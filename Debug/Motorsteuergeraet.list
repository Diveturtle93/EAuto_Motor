
Motorsteuergeraet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060e0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  080062d8  080062d8  000162d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800679c  0800679c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800679c  0800679c  0001679c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067a4  080067a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067a4  080067a4  000167a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067a8  080067a8  000167a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080067ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  2000000c  080067b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  080067b8  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019567  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003962  00000000  00000000  000395a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  0003cf08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  0003e028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c8f4  00000000  00000000  0003efa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017fc0  00000000  00000000  0006b894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107b49  00000000  00000000  00083854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018b39d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004454  00000000  00000000  0018b3f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080062c0 	.word	0x080062c0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080062c0 	.word	0x080062c0

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <BAMOCAN_ID>:
//----------------------------------------------------------------------

// Ermittle Register nach Empfang Bamocar CAN-ID
//----------------------------------------------------------------------
void BAMOCAN_ID(uint8_t* data, uint8_t dlc)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	460b      	mov	r3, r1
 800054a:	70fb      	strb	r3, [r7, #3]
	uint8_t Reg = data[0];
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	733b      	strb	r3, [r7, #12]
	uint16_t speed = 0, strom;
 8000552:	2300      	movs	r3, #0
 8000554:	817b      	strh	r3, [r7, #10]

	// Waehlen welches Register gesendet wurde
	switch (Reg)
 8000556:	7b3b      	ldrb	r3, [r7, #12]
 8000558:	2bd8      	cmp	r3, #216	; 0xd8
 800055a:	f000 80be 	beq.w	80006da <BAMOCAN_ID+0x19a>
 800055e:	2bd8      	cmp	r3, #216	; 0xd8
 8000560:	f300 8100 	bgt.w	8000764 <BAMOCAN_ID+0x224>
 8000564:	2ba8      	cmp	r3, #168	; 0xa8
 8000566:	d012      	beq.n	800058e <BAMOCAN_ID+0x4e>
 8000568:	2ba8      	cmp	r3, #168	; 0xa8
 800056a:	f300 80fb 	bgt.w	8000764 <BAMOCAN_ID+0x224>
 800056e:	2b8f      	cmp	r3, #143	; 0x8f
 8000570:	d077      	beq.n	8000662 <BAMOCAN_ID+0x122>
 8000572:	2b8f      	cmp	r3, #143	; 0x8f
 8000574:	f300 80f6 	bgt.w	8000764 <BAMOCAN_ID+0x224>
 8000578:	2b5f      	cmp	r3, #95	; 0x5f
 800057a:	d025      	beq.n	80005c8 <BAMOCAN_ID+0x88>
 800057c:	2b5f      	cmp	r3, #95	; 0x5f
 800057e:	f300 80f1 	bgt.w	8000764 <BAMOCAN_ID+0x224>
 8000582:	2b1b      	cmp	r3, #27
 8000584:	f000 80d4 	beq.w	8000730 <BAMOCAN_ID+0x1f0>
 8000588:	2b40      	cmp	r3, #64	; 0x40
 800058a:	d037      	beq.n	80005fc <BAMOCAN_ID+0xbc>
 800058c:	e0ea      	b.n	8000764 <BAMOCAN_ID+0x224>
	{
		// Drehzahl vom Bamocar bekommen
		case BAMOCAR_REG_N_ACT_FILTER:
			speed = ((data[2]<<8) + data[1]);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	3302      	adds	r3, #2
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	b29b      	uxth	r3, r3
 8000596:	021b      	lsls	r3, r3, #8
 8000598:	b29a      	uxth	r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3301      	adds	r3, #1
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	4413      	add	r3, r2
 80005a4:	817b      	strh	r3, [r7, #10]
			motor1.Drehzahl = speed;
 80005a6:	4a74      	ldr	r2, [pc, #464]	; (8000778 <BAMOCAN_ID+0x238>)
 80005a8:	897b      	ldrh	r3, [r7, #10]
 80005aa:	8053      	strh	r3, [r2, #2]
// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Motordrehzahl\n", 14);
 80005ac:	210e      	movs	r1, #14
 80005ae:	4873      	ldr	r0, [pc, #460]	; (800077c <BAMOCAN_ID+0x23c>)
 80005b0:	f000 f900 	bl	80007b4 <uartTransmit>
			uartTransmitNumber(speed, 10);
 80005b4:	897b      	ldrh	r3, [r7, #10]
 80005b6:	210a      	movs	r1, #10
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f90f 	bl	80007dc <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005be:	2101      	movs	r1, #1
 80005c0:	486f      	ldr	r0, [pc, #444]	; (8000780 <BAMOCAN_ID+0x240>)
 80005c2:	f000 f8f7 	bl	80007b4 <uartTransmit>
#endif

			break;
 80005c6:	e0d2      	b.n	800076e <BAMOCAN_ID+0x22e>

		// Stromwert von Bamocar bekommen
		case BAMOCAR_REG_I_ACT_FILTER:
			strom = ((data[2]<<8) + data[1]);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3302      	adds	r3, #2
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	021b      	lsls	r3, r3, #8
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3301      	adds	r3, #1
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	4413      	add	r3, r2
 80005de:	813b      	strh	r3, [r7, #8]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Motorstrom\n", 11);
 80005e0:	210b      	movs	r1, #11
 80005e2:	4868      	ldr	r0, [pc, #416]	; (8000784 <BAMOCAN_ID+0x244>)
 80005e4:	f000 f8e6 	bl	80007b4 <uartTransmit>
			uartTransmitNumber(strom, 10);
 80005e8:	893b      	ldrh	r3, [r7, #8]
 80005ea:	210a      	movs	r1, #10
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f8f5 	bl	80007dc <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005f2:	2101      	movs	r1, #1
 80005f4:	4862      	ldr	r0, [pc, #392]	; (8000780 <BAMOCAN_ID+0x240>)
 80005f6:	f000 f8dd 	bl	80007b4 <uartTransmit>
#endif

			break;
 80005fa:	e0b8      	b.n	800076e <BAMOCAN_ID+0x22e>

		// Statusregister von Bamocar bekommen
		case BAMOCAR_REG_STATUS:
			bamocar_stat.status1 = ((data[4] << 24) + (data[3] << 16) + (data[2] << 8) + data[1]);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3304      	adds	r3, #4
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	061a      	lsls	r2, r3, #24
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3303      	adds	r3, #3
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	041b      	lsls	r3, r3, #16
 800060c:	441a      	add	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	3302      	adds	r3, #2
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	021b      	lsls	r3, r3, #8
 8000616:	4413      	add	r3, r2
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	3201      	adds	r2, #1
 800061c:	7812      	ldrb	r2, [r2, #0]
 800061e:	4413      	add	r3, r2
 8000620:	461a      	mov	r2, r3
 8000622:	4b59      	ldr	r3, [pc, #356]	; (8000788 <BAMOCAN_ID+0x248>)
 8000624:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Status\n", 15);
 8000626:	210f      	movs	r1, #15
 8000628:	4858      	ldr	r0, [pc, #352]	; (800078c <BAMOCAN_ID+0x24c>)
 800062a:	f000 f8c3 	bl	80007b4 <uartTransmit>
			for (uint8_t i = 4; i > 0; i--)
 800062e:	2304      	movs	r3, #4
 8000630:	73fb      	strb	r3, [r7, #15]
 8000632:	e00e      	b.n	8000652 <BAMOCAN_ID+0x112>
			{
				uartTransmitNumber(bamocar_stat.status[i-1], 16);
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	3b01      	subs	r3, #1
 8000638:	4a53      	ldr	r2, [pc, #332]	; (8000788 <BAMOCAN_ID+0x248>)
 800063a:	5cd3      	ldrb	r3, [r2, r3]
 800063c:	2110      	movs	r1, #16
 800063e:	4618      	mov	r0, r3
 8000640:	f000 f8cc 	bl	80007dc <uartTransmitNumber>
				uartTransmit(" ", 1);
 8000644:	2101      	movs	r1, #1
 8000646:	4852      	ldr	r0, [pc, #328]	; (8000790 <BAMOCAN_ID+0x250>)
 8000648:	f000 f8b4 	bl	80007b4 <uartTransmit>
			for (uint8_t i = 4; i > 0; i--)
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	3b01      	subs	r3, #1
 8000650:	73fb      	strb	r3, [r7, #15]
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1ed      	bne.n	8000634 <BAMOCAN_ID+0xf4>
			}
			uartTransmit("\n", 1);
 8000658:	2101      	movs	r1, #1
 800065a:	4849      	ldr	r0, [pc, #292]	; (8000780 <BAMOCAN_ID+0x240>)
 800065c:	f000 f8aa 	bl	80007b4 <uartTransmit>
#endif

			break;
 8000660:	e085      	b.n	800076e <BAMOCAN_ID+0x22e>

		// Errorregister von Bamocar bekommen
		case BAMOCAR_REG_ERROR:
			bamocar_error.error1 = ((data[2] << 8) + data[1]);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	3302      	adds	r3, #2
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b29b      	uxth	r3, r3
 800066a:	021b      	lsls	r3, r3, #8
 800066c:	b29a      	uxth	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3301      	adds	r3, #1
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b29b      	uxth	r3, r3
 8000676:	4413      	add	r3, r2
 8000678:	b29a      	uxth	r2, r3
 800067a:	4b46      	ldr	r3, [pc, #280]	; (8000794 <BAMOCAN_ID+0x254>)
 800067c:	801a      	strh	r2, [r3, #0]
			bamocar_warnung.warnung1 = ((data[4] << 8) + data[3]);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	3304      	adds	r3, #4
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b29b      	uxth	r3, r3
 8000686:	021b      	lsls	r3, r3, #8
 8000688:	b29a      	uxth	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3303      	adds	r3, #3
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	b29b      	uxth	r3, r3
 8000692:	4413      	add	r3, r2
 8000694:	b29a      	uxth	r2, r3
 8000696:	4b40      	ldr	r3, [pc, #256]	; (8000798 <BAMOCAN_ID+0x258>)
 8000698:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Error\n", 14);
 800069a:	210e      	movs	r1, #14
 800069c:	483f      	ldr	r0, [pc, #252]	; (800079c <BAMOCAN_ID+0x25c>)
 800069e:	f000 f889 	bl	80007b4 <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006a2:	2300      	movs	r3, #0
 80006a4:	73bb      	strb	r3, [r7, #14]
 80006a6:	e010      	b.n	80006ca <BAMOCAN_ID+0x18a>
			{
				uartTransmitNumber(data[1+i], 16);
 80006a8:	7bbb      	ldrb	r3, [r7, #14]
 80006aa:	3301      	adds	r3, #1
 80006ac:	461a      	mov	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2110      	movs	r1, #16
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 f890 	bl	80007dc <uartTransmitNumber>
				uartTransmit(" ", 1);
 80006bc:	2101      	movs	r1, #1
 80006be:	4834      	ldr	r0, [pc, #208]	; (8000790 <BAMOCAN_ID+0x250>)
 80006c0:	f000 f878 	bl	80007b4 <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006c4:	7bbb      	ldrb	r3, [r7, #14]
 80006c6:	3301      	adds	r3, #1
 80006c8:	73bb      	strb	r3, [r7, #14]
 80006ca:	7bbb      	ldrb	r3, [r7, #14]
 80006cc:	2b03      	cmp	r3, #3
 80006ce:	d9eb      	bls.n	80006a8 <BAMOCAN_ID+0x168>
			}
			uartTransmit("\n", 1);
 80006d0:	2101      	movs	r1, #1
 80006d2:	482b      	ldr	r0, [pc, #172]	; (8000780 <BAMOCAN_ID+0x240>)
 80006d4:	f000 f86e 	bl	80007b4 <uartTransmit>
#endif

			break;
 80006d8:	e049      	b.n	800076e <BAMOCAN_ID+0x22e>

		// Status IO Register von Bamocar bekommen
		case BAMOCAR_REG_STATUS_IO:
			bamocar_statIO.status1 = ((data[2] << 8) + data[1]);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3302      	adds	r3, #2
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	021b      	lsls	r3, r3, #8
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3301      	adds	r3, #1
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	4413      	add	r3, r2
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	4b2b      	ldr	r3, [pc, #172]	; (80007a0 <BAMOCAN_ID+0x260>)
 80006f4:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar IO Status\n", 18);
 80006f6:	2112      	movs	r1, #18
 80006f8:	482a      	ldr	r0, [pc, #168]	; (80007a4 <BAMOCAN_ID+0x264>)
 80006fa:	f000 f85b 	bl	80007b4 <uartTransmit>
			for (uint8_t i = 0; i < 2; i++)
 80006fe:	2300      	movs	r3, #0
 8000700:	737b      	strb	r3, [r7, #13]
 8000702:	e00d      	b.n	8000720 <BAMOCAN_ID+0x1e0>
			{
				uartTransmitNumber(bamocar_statIO.status[i], 16);
 8000704:	7b7b      	ldrb	r3, [r7, #13]
 8000706:	4a26      	ldr	r2, [pc, #152]	; (80007a0 <BAMOCAN_ID+0x260>)
 8000708:	5cd3      	ldrb	r3, [r2, r3]
 800070a:	2110      	movs	r1, #16
 800070c:	4618      	mov	r0, r3
 800070e:	f000 f865 	bl	80007dc <uartTransmitNumber>
				uartTransmit(" ", 1);
 8000712:	2101      	movs	r1, #1
 8000714:	481e      	ldr	r0, [pc, #120]	; (8000790 <BAMOCAN_ID+0x250>)
 8000716:	f000 f84d 	bl	80007b4 <uartTransmit>
			for (uint8_t i = 0; i < 2; i++)
 800071a:	7b7b      	ldrb	r3, [r7, #13]
 800071c:	3301      	adds	r3, #1
 800071e:	737b      	strb	r3, [r7, #13]
 8000720:	7b7b      	ldrb	r3, [r7, #13]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d9ee      	bls.n	8000704 <BAMOCAN_ID+0x1c4>
			}
			uartTransmit("\n", 1);
 8000726:	2101      	movs	r1, #1
 8000728:	4815      	ldr	r0, [pc, #84]	; (8000780 <BAMOCAN_ID+0x240>)
 800072a:	f000 f843 	bl	80007b4 <uartTransmit>
#endif

			break;
 800072e:	e01e      	b.n	800076e <BAMOCAN_ID+0x22e>

		// Firmware von Bamocar ausgelesen
		case BAMOCAR_REG_FIRMWARE:
			bamocar_data.data = ((data[2]<<8) + data[1]);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3302      	adds	r3, #2
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	021b      	lsls	r3, r3, #8
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	3201      	adds	r2, #1
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	4413      	add	r3, r2
 8000740:	461a      	mov	r2, r3
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <BAMOCAN_ID+0x268>)
 8000744:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Firmware\n", 9);
 8000746:	2109      	movs	r1, #9
 8000748:	4818      	ldr	r0, [pc, #96]	; (80007ac <BAMOCAN_ID+0x26c>)
 800074a:	f000 f833 	bl	80007b4 <uartTransmit>
			uartTransmitNumber(bamocar_data.data, 16);
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <BAMOCAN_ID+0x268>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2110      	movs	r1, #16
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f841 	bl	80007dc <uartTransmitNumber>
			uartTransmit("\n", 1);
 800075a:	2101      	movs	r1, #1
 800075c:	4808      	ldr	r0, [pc, #32]	; (8000780 <BAMOCAN_ID+0x240>)
 800075e:	f000 f829 	bl	80007b4 <uartTransmit>
#endif

			break;
 8000762:	e004      	b.n	800076e <BAMOCAN_ID+0x22e>

		// Register fuer Bamocar nicht definiert, Fehler
		default:
			uartTransmit("Bamocar Register nicht definiert\n", 33);
 8000764:	2121      	movs	r1, #33	; 0x21
 8000766:	4812      	ldr	r0, [pc, #72]	; (80007b0 <BAMOCAN_ID+0x270>)
 8000768:	f000 f824 	bl	80007b4 <uartTransmit>
			break;
 800076c:	bf00      	nop
	}
}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000044 	.word	0x20000044
 800077c:	080062d8 	.word	0x080062d8
 8000780:	080062e8 	.word	0x080062e8
 8000784:	080062ec 	.word	0x080062ec
 8000788:	2000004c 	.word	0x2000004c
 800078c:	080062f8 	.word	0x080062f8
 8000790:	08006308 	.word	0x08006308
 8000794:	2000003c 	.word	0x2000003c
 8000798:	20000038 	.word	0x20000038
 800079c:	0800630c 	.word	0x0800630c
 80007a0:	20000034 	.word	0x20000034
 80007a4:	0800631c 	.word	0x0800631c
 80007a8:	20000040 	.word	0x20000040
 80007ac:	08006330 	.word	0x08006330
 80007b0:	0800633c 	.word	0x0800633c

080007b4 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <uartTransmit+0x24>)
 80007ca:	f005 f8ab 	bl	8005924 <HAL_UART_Transmit>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000174 	.word	0x20000174

080007dc <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4619      	mov	r1, r3
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f005 fd64 	bl	80062bc <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fd1d 	bl	8000238 <strlen>
 80007fe:	4603      	mov	r3, r0
 8000800:	b29a      	uxth	r2, r3
 8000802:	f107 010c 	add.w	r1, r7, #12
 8000806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080a:	4803      	ldr	r0, [pc, #12]	; (8000818 <uartTransmitNumber+0x3c>)
 800080c:	f005 f88a 	bl	8005924 <HAL_UART_Transmit>
}
 8000810:	bf00      	nop
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000174 	.word	0x20000174

0800081c <collectMiddlewareInfo>:


// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION		"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION			"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION	"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION			"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8000820:	2112      	movs	r1, #18
 8000822:	4822      	ldr	r0, [pc, #136]	; (80008ac <collectMiddlewareInfo+0x90>)
 8000824:	f7ff ffc6 	bl	80007b4 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8000828:	210a      	movs	r1, #10
 800082a:	2005      	movs	r0, #5
 800082c:	f7ff ffd6 	bl	80007dc <uartTransmitNumber>
	uartTransmit(".", 1);
 8000830:	2101      	movs	r1, #1
 8000832:	481f      	ldr	r0, [pc, #124]	; (80008b0 <collectMiddlewareInfo+0x94>)
 8000834:	f7ff ffbe 	bl	80007b4 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8000838:	210a      	movs	r1, #10
 800083a:	2001      	movs	r0, #1
 800083c:	f7ff ffce 	bl	80007dc <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8000840:	2110      	movs	r1, #16
 8000842:	481c      	ldr	r0, [pc, #112]	; (80008b4 <collectMiddlewareInfo+0x98>)
 8000844:	f7ff ffb6 	bl	80007b4 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8000848:	f001 fd86 	bl	8002358 <HAL_GetHalVersion>
 800084c:	4603      	mov	r3, r0
 800084e:	0e1b      	lsrs	r3, r3, #24
 8000850:	b2db      	uxtb	r3, r3
 8000852:	210a      	movs	r1, #10
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ffc1 	bl	80007dc <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800085a:	2101      	movs	r1, #1
 800085c:	4814      	ldr	r0, [pc, #80]	; (80008b0 <collectMiddlewareInfo+0x94>)
 800085e:	f7ff ffa9 	bl	80007b4 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000862:	f001 fd79 	bl	8002358 <HAL_GetHalVersion>
 8000866:	4603      	mov	r3, r0
 8000868:	0c1b      	lsrs	r3, r3, #16
 800086a:	b2db      	uxtb	r3, r3
 800086c:	210a      	movs	r1, #10
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff ffb4 	bl	80007dc <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000874:	2101      	movs	r1, #1
 8000876:	480e      	ldr	r0, [pc, #56]	; (80008b0 <collectMiddlewareInfo+0x94>)
 8000878:	f7ff ff9c 	bl	80007b4 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 800087c:	f001 fd6c 	bl	8002358 <HAL_GetHalVersion>
 8000880:	4603      	mov	r3, r0
 8000882:	0a1b      	lsrs	r3, r3, #8
 8000884:	b2db      	uxtb	r3, r3
 8000886:	210a      	movs	r1, #10
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ffa7 	bl	80007dc <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800088e:	2101      	movs	r1, #1
 8000890:	4807      	ldr	r0, [pc, #28]	; (80008b0 <collectMiddlewareInfo+0x94>)
 8000892:	f7ff ff8f 	bl	80007b4 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000896:	f001 fd5f 	bl	8002358 <HAL_GetHalVersion>
 800089a:	4603      	mov	r3, r0
 800089c:	b2db      	uxtb	r3, r3
 800089e:	210a      	movs	r1, #10
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff9b 	bl	80007dc <uartTransmitNumber>
	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen

	uartTransmit("\n", 1);
#endif
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	080063b8 	.word	0x080063b8
 80008b0:	080063cc 	.word	0x080063cc
 80008b4:	080063d0 	.word	0x080063d0

080008b8 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	#define STRING_GIT_BRANCH			"\nGit Branch:\t\t"
	#define STRING_GIT_HASH				"\nGit Hash:\t\t"
	#define STRING_BUILD_DATE			"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME			"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_VERSION, sizeof(STRING_GIT_VERSION));
 80008bc:	2110      	movs	r1, #16
 80008be:	4816      	ldr	r0, [pc, #88]	; (8000918 <collectSoftwareInfo+0x60>)
 80008c0:	f7ff ff78 	bl	80007b4 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 80008c4:	2108      	movs	r1, #8
 80008c6:	4815      	ldr	r0, [pc, #84]	; (800091c <collectSoftwareInfo+0x64>)
 80008c8:	f7ff ff74 	bl	80007b4 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 80008cc:	210f      	movs	r1, #15
 80008ce:	4814      	ldr	r0, [pc, #80]	; (8000920 <collectSoftwareInfo+0x68>)
 80008d0:	f7ff ff70 	bl	80007b4 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 80008d4:	210c      	movs	r1, #12
 80008d6:	4813      	ldr	r0, [pc, #76]	; (8000924 <collectSoftwareInfo+0x6c>)
 80008d8:	f7ff ff6c 	bl	80007b4 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 80008dc:	210d      	movs	r1, #13
 80008de:	4812      	ldr	r0, [pc, #72]	; (8000928 <collectSoftwareInfo+0x70>)
 80008e0:	f7ff ff68 	bl	80007b4 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 80008e4:	2129      	movs	r1, #41	; 0x29
 80008e6:	4811      	ldr	r0, [pc, #68]	; (800092c <collectSoftwareInfo+0x74>)
 80008e8:	f7ff ff64 	bl	80007b4 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80008ec:	210f      	movs	r1, #15
 80008ee:	4810      	ldr	r0, [pc, #64]	; (8000930 <collectSoftwareInfo+0x78>)
 80008f0:	f7ff ff60 	bl	80007b4 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 80008f4:	210c      	movs	r1, #12
 80008f6:	480f      	ldr	r0, [pc, #60]	; (8000934 <collectSoftwareInfo+0x7c>)
 80008f8:	f7ff ff5c 	bl	80007b4 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80008fc:	210f      	movs	r1, #15
 80008fe:	480e      	ldr	r0, [pc, #56]	; (8000938 <collectSoftwareInfo+0x80>)
 8000900:	f7ff ff58 	bl	80007b4 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8000904:	2109      	movs	r1, #9
 8000906:	480d      	ldr	r0, [pc, #52]	; (800093c <collectSoftwareInfo+0x84>)
 8000908:	f7ff ff54 	bl	80007b4 <uartTransmit>

	uartTransmit("\n", 1);
 800090c:	2101      	movs	r1, #1
 800090e:	480c      	ldr	r0, [pc, #48]	; (8000940 <collectSoftwareInfo+0x88>)
 8000910:	f7ff ff50 	bl	80007b4 <uartTransmit>
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	080063e0 	.word	0x080063e0
 800091c:	080063f0 	.word	0x080063f0
 8000920:	080063f8 	.word	0x080063f8
 8000924:	08006408 	.word	0x08006408
 8000928:	08006414 	.word	0x08006414
 800092c:	08006424 	.word	0x08006424
 8000930:	08006450 	.word	0x08006450
 8000934:	08006460 	.word	0x08006460
 8000938:	0800646c 	.word	0x0800646c
 800093c:	0800647c 	.word	0x0800647c
 8000940:	08006488 	.word	0x08006488

08000944 <collectHardwareInfo>:
//----------------------------------------------------------------------

// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID		"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION			"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ				"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID				"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 800094a:	2113      	movs	r1, #19
 800094c:	483b      	ldr	r0, [pc, #236]	; (8000a3c <collectHardwareInfo+0xf8>)
 800094e:	f7ff ff31 	bl	80007b4 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 8000952:	f001 fd17 	bl	8002384 <HAL_GetDEVID>
 8000956:	4603      	mov	r3, r0
 8000958:	210a      	movs	r1, #10
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ff3e 	bl	80007dc <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8000960:	2115      	movs	r1, #21
 8000962:	4837      	ldr	r0, [pc, #220]	; (8000a40 <collectHardwareInfo+0xfc>)
 8000964:	f7ff ff26 	bl	80007b4 <uartTransmit>
	
	switch(HAL_GetREVID())													// Mikrocontroller Revision
 8000968:	f001 fd00 	bl	800236c <HAL_GetREVID>
 800096c:	4603      	mov	r3, r0
 800096e:	f242 0201 	movw	r2, #8193	; 0x2001
 8000972:	4293      	cmp	r3, r2
 8000974:	d016      	beq.n	80009a4 <collectHardwareInfo+0x60>
 8000976:	f242 0201 	movw	r2, #8193	; 0x2001
 800097a:	4293      	cmp	r3, r2
 800097c:	d817      	bhi.n	80009ae <collectHardwareInfo+0x6a>
 800097e:	f241 0201 	movw	r2, #4097	; 0x1001
 8000982:	4293      	cmp	r3, r2
 8000984:	d004      	beq.n	8000990 <collectHardwareInfo+0x4c>
 8000986:	f241 0203 	movw	r2, #4099	; 0x1003
 800098a:	4293      	cmp	r3, r2
 800098c:	d005      	beq.n	800099a <collectHardwareInfo+0x56>
 800098e:	e00e      	b.n	80009ae <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8000990:	2101      	movs	r1, #1
 8000992:	482c      	ldr	r0, [pc, #176]	; (8000a44 <collectHardwareInfo+0x100>)
 8000994:	f7ff ff0e 	bl	80007b4 <uartTransmit>
			break;
 8000998:	e011      	b.n	80009be <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 800099a:	2101      	movs	r1, #1
 800099c:	482a      	ldr	r0, [pc, #168]	; (8000a48 <collectHardwareInfo+0x104>)
 800099e:	f7ff ff09 	bl	80007b4 <uartTransmit>
			break;
 80009a2:	e00c      	b.n	80009be <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 80009a4:	2101      	movs	r1, #1
 80009a6:	4829      	ldr	r0, [pc, #164]	; (8000a4c <collectHardwareInfo+0x108>)
 80009a8:	f7ff ff04 	bl	80007b4 <uartTransmit>
			break;
 80009ac:	e007      	b.n	80009be <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 80009ae:	f001 fcdd 	bl	800236c <HAL_GetREVID>
 80009b2:	4603      	mov	r3, r0
 80009b4:	210a      	movs	r1, #10
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ff10 	bl	80007dc <uartTransmitNumber>
			break;
 80009bc:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 80009be:	2113      	movs	r1, #19
 80009c0:	4823      	ldr	r0, [pc, #140]	; (8000a50 <collectHardwareInfo+0x10c>)
 80009c2:	f7ff fef7 	bl	80007b4 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 80009c6:	f003 fe79 	bl	80046bc <HAL_RCC_GetSysClockFreq>
 80009ca:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a21      	ldr	r2, [pc, #132]	; (8000a54 <collectHardwareInfo+0x110>)
 80009d0:	fba2 2303 	umull	r2, r3, r2, r3
 80009d4:	0c9b      	lsrs	r3, r3, #18
 80009d6:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 80009d8:	210a      	movs	r1, #10
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff fefe 	bl	80007dc <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80009e0:	2104      	movs	r1, #4
 80009e2:	481d      	ldr	r0, [pc, #116]	; (8000a58 <collectHardwareInfo+0x114>)
 80009e4:	f7ff fee6 	bl	80007b4 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80009e8:	210f      	movs	r1, #15
 80009ea:	481c      	ldr	r0, [pc, #112]	; (8000a5c <collectHardwareInfo+0x118>)
 80009ec:	f7ff fee2 	bl	80007b4 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 80009f0:	f001 fcd6 	bl	80023a0 <HAL_GetUIDw0>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2110      	movs	r1, #16
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff feef 	bl	80007dc <uartTransmitNumber>

	uartTransmit(" ", 1);
 80009fe:	2101      	movs	r1, #1
 8000a00:	4817      	ldr	r0, [pc, #92]	; (8000a60 <collectHardwareInfo+0x11c>)
 8000a02:	f7ff fed7 	bl	80007b4 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 8000a06:	f001 fcd7 	bl	80023b8 <HAL_GetUIDw1>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2110      	movs	r1, #16
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fee4 	bl	80007dc <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000a14:	2101      	movs	r1, #1
 8000a16:	4812      	ldr	r0, [pc, #72]	; (8000a60 <collectHardwareInfo+0x11c>)
 8000a18:	f7ff fecc 	bl	80007b4 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000a1c:	f001 fcd8 	bl	80023d0 <HAL_GetUIDw2>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2110      	movs	r1, #16
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fed9 	bl	80007dc <uartTransmitNumber>

	uartTransmit("\n", 1);
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	480d      	ldr	r0, [pc, #52]	; (8000a64 <collectHardwareInfo+0x120>)
 8000a2e:	f7ff fec1 	bl	80007b4 <uartTransmit>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	0800648c 	.word	0x0800648c
 8000a40:	080064a0 	.word	0x080064a0
 8000a44:	080064b8 	.word	0x080064b8
 8000a48:	080064bc 	.word	0x080064bc
 8000a4c:	080064c0 	.word	0x080064c0
 8000a50:	080064c4 	.word	0x080064c4
 8000a54:	431bde83 	.word	0x431bde83
 8000a58:	080064d8 	.word	0x080064d8
 8000a5c:	080064e0 	.word	0x080064e0
 8000a60:	080064f0 	.word	0x080064f0
 8000a64:	08006488 	.word	0x08006488

08000a68 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL "\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL "\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL "\n\t --Software--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000a6c:	2111      	movs	r1, #17
 8000a6e:	480b      	ldr	r0, [pc, #44]	; (8000a9c <collectSystemInfo+0x34>)
 8000a70:	f7ff fea0 	bl	80007b4 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000a74:	f7ff ff66 	bl	8000944 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000a78:	2111      	movs	r1, #17
 8000a7a:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <collectSystemInfo+0x38>)
 8000a7c:	f7ff fe9a 	bl	80007b4 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8000a80:	f7ff ff1a 	bl	80008b8 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000a84:	2113      	movs	r1, #19
 8000a86:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <collectSystemInfo+0x3c>)
 8000a88:	f7ff fe94 	bl	80007b4 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000a8c:	f7ff fec6 	bl	800081c <collectMiddlewareInfo>

	uartTransmit("\n\n\n", 3);
 8000a90:	2103      	movs	r1, #3
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <collectSystemInfo+0x40>)
 8000a94:	f7ff fe8e 	bl	80007b4 <uartTransmit>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	080064f4 	.word	0x080064f4
 8000aa0:	08006508 	.word	0x08006508
 8000aa4:	0800651c 	.word	0x0800651c
 8000aa8:	08006530 	.word	0x08006530

08000aac <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000ab6:	4b25      	ldr	r3, [pc, #148]	; (8000b4c <readResetSource+0xa0>)
 8000ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000aba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d002      	beq.n	8000ac8 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000ac8:	4b20      	ldr	r3, [pc, #128]	; (8000b4c <readResetSource+0xa0>)
 8000aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000acc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d002      	beq.n	8000ada <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8000ada:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <readResetSource+0xa0>)
 8000adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	da02      	bge.n	8000ae8 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000ae8:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <readResetSource+0xa0>)
 8000aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d002      	beq.n	8000afa <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	3308      	adds	r3, #8
 8000af8:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <readResetSource+0xa0>)
 8000afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000afe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d002      	beq.n	8000b0c <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	3310      	adds	r3, #16
 8000b0a:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <readResetSource+0xa0>)
 8000b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d002      	beq.n	8000b1e <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	3320      	adds	r3, #32
 8000b1c:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <readResetSource+0xa0>)
 8000b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d002      	beq.n	8000b30 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	3340      	adds	r3, #64	; 0x40
 8000b2e:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <readResetSource+0xa0>)
 8000b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b34:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <readResetSource+0xa0>)
 8000b36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b3a:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800

08000b50 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8000b5a:	2106      	movs	r1, #6
 8000b5c:	482a      	ldr	r0, [pc, #168]	; (8000c08 <printResetSource+0xb8>)
 8000b5e:	f7ff fe29 	bl	80007b4 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d104      	bne.n	8000b72 <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8000b68:	210f      	movs	r1, #15
 8000b6a:	4828      	ldr	r0, [pc, #160]	; (8000c0c <printResetSource+0xbc>)
 8000b6c:	f7ff fe22 	bl	80007b4 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8000b70:	e046      	b.n	8000c00 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d003      	beq.n	8000b84 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000b7c:	2118      	movs	r1, #24
 8000b7e:	4824      	ldr	r0, [pc, #144]	; (8000c10 <printResetSource+0xc0>)
 8000b80:	f7ff fe18 	bl	80007b4 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000b8e:	2116      	movs	r1, #22
 8000b90:	4820      	ldr	r0, [pc, #128]	; (8000c14 <printResetSource+0xc4>)
 8000b92:	f7ff fe0f 	bl	80007b4 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d003      	beq.n	8000ba8 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8000ba0:	210a      	movs	r1, #10
 8000ba2:	481d      	ldr	r0, [pc, #116]	; (8000c18 <printResetSource+0xc8>)
 8000ba4:	f7ff fe06 	bl	80007b4 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	f003 0308 	and.w	r3, r3, #8
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8000bb2:	2110      	movs	r1, #16
 8000bb4:	4819      	ldr	r0, [pc, #100]	; (8000c1c <printResetSource+0xcc>)
 8000bb6:	f7ff fdfd 	bl	80007b4 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	f003 0310 	and.w	r3, r3, #16
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d003      	beq.n	8000bcc <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000bc4:	210f      	movs	r1, #15
 8000bc6:	4816      	ldr	r0, [pc, #88]	; (8000c20 <printResetSource+0xd0>)
 8000bc8:	f7ff fdf4 	bl	80007b4 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 0320 	and.w	r3, r3, #32
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	4812      	ldr	r0, [pc, #72]	; (8000c24 <printResetSource+0xd4>)
 8000bda:	f7ff fdeb 	bl	80007b4 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d003      	beq.n	8000bf0 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000be8:	210a      	movs	r1, #10
 8000bea:	480f      	ldr	r0, [pc, #60]	; (8000c28 <printResetSource+0xd8>)
 8000bec:	f7ff fde2 	bl	80007b4 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	da03      	bge.n	8000c00 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000bf8:	2105      	movs	r1, #5
 8000bfa:	480c      	ldr	r0, [pc, #48]	; (8000c2c <printResetSource+0xdc>)
 8000bfc:	f7ff fdda 	bl	80007b4 <uartTransmit>
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	08006534 	.word	0x08006534
 8000c0c:	0800653c 	.word	0x0800653c
 8000c10:	0800654c 	.word	0x0800654c
 8000c14:	08006568 	.word	0x08006568
 8000c18:	08006580 	.word	0x08006580
 8000c1c:	0800658c 	.word	0x0800658c
 8000c20:	080065a0 	.word	0x080065a0
 8000c24:	080065b0 	.word	0x080065b0
 8000c28:	080065c0 	.word	0x080065c0
 8000c2c:	080065cc 	.word	0x080065cc

08000c30 <ADC_Gaspedal>:
//----------------------------------------------------------------------

// Gaspedal einlesen
//----------------------------------------------------------------------
uint16_t ADC_Gaspedal(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_6;
 8000c46:	2306      	movs	r3, #6
 8000c48:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	4619      	mov	r1, r3
 8000c56:	480e      	ldr	r0, [pc, #56]	; (8000c90 <ADC_Gaspedal+0x60>)
 8000c58:	f001 fda4 	bl	80027a4 <HAL_ADC_ConfigChannel>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <ADC_Gaspedal+0x36>
	{
		Error_Handler();
 8000c62:	f001 f969 	bl	8001f38 <Error_Handler>
	}

	// ADC Starten und Wert einlesen
	HAL_ADC_Start(&hadc1);
 8000c66:	480a      	ldr	r0, [pc, #40]	; (8000c90 <ADC_Gaspedal+0x60>)
 8000c68:	f001 fc02 	bl	8002470 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000c6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c70:	4807      	ldr	r0, [pc, #28]	; (8000c90 <ADC_Gaspedal+0x60>)
 8000c72:	f001 fcff 	bl	8002674 <HAL_ADC_PollForConversion>
	ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000c76:	4806      	ldr	r0, [pc, #24]	; (8000c90 <ADC_Gaspedal+0x60>)
 8000c78:	f001 fd87 	bl	800278a <HAL_ADC_GetValue>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	82fb      	strh	r3, [r7, #22]
	HAL_ADC_Stop(&hadc1);
 8000c80:	4803      	ldr	r0, [pc, #12]	; (8000c90 <ADC_Gaspedal+0x60>)
 8000c82:	f001 fcc3 	bl	800260c <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000c86:	8afb      	ldrh	r3, [r7, #22]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	2000006c 	.word	0x2000006c

08000c94 <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (status == HAL_OK) {													// HAL OK
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d104      	bne.n	8000cae <hal_error+0x1a>
		uartTransmit("HAL OK\n", 7);
 8000ca4:	2107      	movs	r1, #7
 8000ca6:	480f      	ldr	r0, [pc, #60]	; (8000ce4 <hal_error+0x50>)
 8000ca8:	f7ff fd84 	bl	80007b4 <uartTransmit>
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 8000cac:	e016      	b.n	8000cdc <hal_error+0x48>
	else if (status == HAL_ERROR) {											// HAL Error
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d104      	bne.n	8000cbe <hal_error+0x2a>
		uartTransmit("HAL ERROR\n", 10);
 8000cb4:	210a      	movs	r1, #10
 8000cb6:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <hal_error+0x54>)
 8000cb8:	f7ff fd7c 	bl	80007b4 <uartTransmit>
}
 8000cbc:	e00e      	b.n	8000cdc <hal_error+0x48>
	else if (status == HAL_BUSY) {											// HAL Beschaeftigt
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d104      	bne.n	8000cce <hal_error+0x3a>
		uartTransmit("HAL BUSY\n", 9);
 8000cc4:	2109      	movs	r1, #9
 8000cc6:	4809      	ldr	r0, [pc, #36]	; (8000cec <hal_error+0x58>)
 8000cc8:	f7ff fd74 	bl	80007b4 <uartTransmit>
}
 8000ccc:	e006      	b.n	8000cdc <hal_error+0x48>
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b03      	cmp	r3, #3
 8000cd2:	d103      	bne.n	8000cdc <hal_error+0x48>
		uartTransmit("HAL TIMEOUT\n", 12);
 8000cd4:	210c      	movs	r1, #12
 8000cd6:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <hal_error+0x5c>)
 8000cd8:	f7ff fd6c 	bl	80007b4 <uartTransmit>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	080065d4 	.word	0x080065d4
 8000ce8:	080065dc 	.word	0x080065dc
 8000cec:	080065e8 	.word	0x080065e8
 8000cf0:	080065f4 	.word	0x080065f4

08000cf4 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.Kickdown = HAL_GPIO_ReadPin(KICKDOWN_GPIO_Port, KICKDOWN_Pin);					// Eingang Gaspedal getreten
 8000cf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cfc:	48ce      	ldr	r0, [pc, #824]	; (8001038 <readall_inputs+0x344>)
 8000cfe:	f003 f8c1 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000d02:	4603      	mov	r3, r0
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	b2d9      	uxtb	r1, r3
 8000d0a:	4acc      	ldr	r2, [pc, #816]	; (800103c <readall_inputs+0x348>)
 8000d0c:	7813      	ldrb	r3, [r2, #0]
 8000d0e:	f361 0300 	bfi	r3, r1, #0, #1
 8000d12:	7013      	strb	r3, [r2, #0]
	system_in.Leerlauf = HAL_GPIO_ReadPin(LEERLAUF_GPIO_Port, LEERLAUF_Pin);					// Eingang Gaspedal nicht getreten
 8000d14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d18:	48c7      	ldr	r0, [pc, #796]	; (8001038 <readall_inputs+0x344>)
 8000d1a:	f003 f8b3 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	b2d9      	uxtb	r1, r3
 8000d26:	4ac5      	ldr	r2, [pc, #788]	; (800103c <readall_inputs+0x348>)
 8000d28:	7813      	ldrb	r3, [r2, #0]
 8000d2a:	f361 0341 	bfi	r3, r1, #1, #1
 8000d2e:	7013      	strb	r3, [r2, #0]
	system_in.BremseNO = HAL_GPIO_ReadPin(BREMSE_NO_GPIO_Port, BREMSE_NO_Pin);					// Eingang Bremse nicht getreten
 8000d30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d34:	48c0      	ldr	r0, [pc, #768]	; (8001038 <readall_inputs+0x344>)
 8000d36:	f003 f8a5 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	b2d9      	uxtb	r1, r3
 8000d42:	4abe      	ldr	r2, [pc, #760]	; (800103c <readall_inputs+0x348>)
 8000d44:	7813      	ldrb	r3, [r2, #0]
 8000d46:	f361 0382 	bfi	r3, r1, #2, #1
 8000d4a:	7013      	strb	r3, [r2, #0]
	system_in.BremseNC = HAL_GPIO_ReadPin(BREMSE_NC_GPIO_Port, BREMSE_NC_Pin);					// Eingang Bremse getreten
 8000d4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d50:	48b9      	ldr	r0, [pc, #740]	; (8001038 <readall_inputs+0x344>)
 8000d52:	f003 f897 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000d56:	4603      	mov	r3, r0
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	b2d9      	uxtb	r1, r3
 8000d5e:	4ab7      	ldr	r2, [pc, #732]	; (800103c <readall_inputs+0x348>)
 8000d60:	7813      	ldrb	r3, [r2, #0]
 8000d62:	f361 03c3 	bfi	r3, r1, #3, #1
 8000d66:	7013      	strb	r3, [r2, #0]
	system_in.Kupplung = HAL_GPIO_ReadPin(KUPPLUNG_NO_GPIO_Port, KUPPLUNG_NO_Pin);				// Eingang Kupplung nicht getreten
 8000d68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d6c:	48b2      	ldr	r0, [pc, #712]	; (8001038 <readall_inputs+0x344>)
 8000d6e:	f003 f889 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000d72:	4603      	mov	r3, r0
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	b2d9      	uxtb	r1, r3
 8000d7a:	4ab0      	ldr	r2, [pc, #704]	; (800103c <readall_inputs+0x348>)
 8000d7c:	7813      	ldrb	r3, [r2, #0]
 8000d7e:	f361 1304 	bfi	r3, r1, #4, #1
 8000d82:	7013      	strb	r3, [r2, #0]
	system_in.Recuperation = HAL_GPIO_ReadPin(RECUPERATION_GPIO_Port, RECUPERATION_Pin);		// Eingang Recuperation
 8000d84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d88:	48ad      	ldr	r0, [pc, #692]	; (8001040 <readall_inputs+0x34c>)
 8000d8a:	f003 f87b 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	b2d9      	uxtb	r1, r3
 8000d96:	4aa9      	ldr	r2, [pc, #676]	; (800103c <readall_inputs+0x348>)
 8000d98:	7813      	ldrb	r3, [r2, #0]
 8000d9a:	f361 1345 	bfi	r3, r1, #5, #1
 8000d9e:	7013      	strb	r3, [r2, #0]
	system_in.ECON = HAL_GPIO_ReadPin(ECON_GPIO_Port, ECON_Pin);								// Eingang Klima
 8000da0:	2102      	movs	r1, #2
 8000da2:	48a7      	ldr	r0, [pc, #668]	; (8001040 <readall_inputs+0x34c>)
 8000da4:	f003 f86e 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000da8:	4603      	mov	r3, r0
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	b2d9      	uxtb	r1, r3
 8000db0:	4aa2      	ldr	r2, [pc, #648]	; (800103c <readall_inputs+0x348>)
 8000db2:	7813      	ldrb	r3, [r2, #0]
 8000db4:	f361 1386 	bfi	r3, r1, #6, #1
 8000db8:	7013      	strb	r3, [r2, #0]
	system_in.Anlasser = HAL_GPIO_ReadPin(ANLASSER_GPIO_Port, ANLASSER_Pin);					// Eingang Zuendschloss, Motor starten
 8000dba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dbe:	48a1      	ldr	r0, [pc, #644]	; (8001044 <readall_inputs+0x350>)
 8000dc0:	f003 f860 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	b2d9      	uxtb	r1, r3
 8000dcc:	4a9b      	ldr	r2, [pc, #620]	; (800103c <readall_inputs+0x348>)
 8000dce:	7813      	ldrb	r3, [r2, #0]
 8000dd0:	f361 13c7 	bfi	r3, r1, #7, #1
 8000dd4:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8000dd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dda:	489b      	ldr	r0, [pc, #620]	; (8001048 <readall_inputs+0x354>)
 8000ddc:	f003 f852 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000de0:	4603      	mov	r3, r0
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	b2d9      	uxtb	r1, r3
 8000de8:	4a94      	ldr	r2, [pc, #592]	; (800103c <readall_inputs+0x348>)
 8000dea:	7853      	ldrb	r3, [r2, #1]
 8000dec:	f361 0300 	bfi	r3, r1, #0, #1
 8000df0:	7053      	strb	r3, [r2, #1]
	system_in.DCDC_Inst = HAL_GPIO_ReadPin(DCDC_INSTRUCTION_GPIO_Port, DCDC_INSTRUCTION_Pin);	// DCDC Wandler funktioniert einwandfrei
 8000df2:	2101      	movs	r1, #1
 8000df4:	4895      	ldr	r0, [pc, #596]	; (800104c <readall_inputs+0x358>)
 8000df6:	f003 f845 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	b2d9      	uxtb	r1, r3
 8000e02:	4a8e      	ldr	r2, [pc, #568]	; (800103c <readall_inputs+0x348>)
 8000e04:	7853      	ldrb	r3, [r2, #1]
 8000e06:	f361 0341 	bfi	r3, r1, #1, #1
 8000e0a:	7053      	strb	r3, [r2, #1]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	488c      	ldr	r0, [pc, #560]	; (8001040 <readall_inputs+0x34c>)
 8000e10:	f003 f838 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000e14:	4603      	mov	r3, r0
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	b2d9      	uxtb	r1, r3
 8000e1c:	4a87      	ldr	r2, [pc, #540]	; (800103c <readall_inputs+0x348>)
 8000e1e:	7853      	ldrb	r3, [r2, #1]
 8000e20:	f361 0382 	bfi	r3, r1, #2, #1
 8000e24:	7053      	strb	r3, [r2, #1]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8000e26:	2140      	movs	r1, #64	; 0x40
 8000e28:	4883      	ldr	r0, [pc, #524]	; (8001038 <readall_inputs+0x344>)
 8000e2a:	f003 f82b 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	b2d9      	uxtb	r1, r3
 8000e36:	4a81      	ldr	r2, [pc, #516]	; (800103c <readall_inputs+0x348>)
 8000e38:	7853      	ldrb	r3, [r2, #1]
 8000e3a:	f361 03c3 	bfi	r3, r1, #3, #1
 8000e3e:	7053      	strb	r3, [r2, #1]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8000e40:	2101      	movs	r1, #1
 8000e42:	4883      	ldr	r0, [pc, #524]	; (8001050 <readall_inputs+0x35c>)
 8000e44:	f003 f81e 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	b2d9      	uxtb	r1, r3
 8000e50:	4a7a      	ldr	r2, [pc, #488]	; (800103c <readall_inputs+0x348>)
 8000e52:	7853      	ldrb	r3, [r2, #1]
 8000e54:	f361 1304 	bfi	r3, r1, #4, #1
 8000e58:	7053      	strb	r3, [r2, #1]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8000e5a:	2104      	movs	r1, #4
 8000e5c:	487c      	ldr	r0, [pc, #496]	; (8001050 <readall_inputs+0x35c>)
 8000e5e:	f003 f811 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000e62:	4603      	mov	r3, r0
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	b2d9      	uxtb	r1, r3
 8000e6a:	4a74      	ldr	r2, [pc, #464]	; (800103c <readall_inputs+0x348>)
 8000e6c:	7853      	ldrb	r3, [r2, #1]
 8000e6e:	f361 1345 	bfi	r3, r1, #5, #1
 8000e72:	7053      	strb	r3, [r2, #1]
//	system_in.Bremsdruck_NO = HAL_GPIO_ReadPin(Bremsdruck_NO_GPIO_Port, Bremsdruck_NO_Pin);		// Bremsdruck nicht zu hoch
//	system_in.Bremsdruck_NC = HAL_GPIO_ReadPin(Bremsdruck_NC_GPIO_Port, Bremsdruck_NC_Pin);		// Bremsdruck zu hoch

	// SDC-Eingaenge einlesen
	sdc_in.EmergencyRun = HAL_GPIO_ReadPin(EMERGENCY_RUN_GPIO_Port, EMERGENCY_RUN_Pin);			// Emergency Run, Akku
 8000e74:	2102      	movs	r1, #2
 8000e76:	4876      	ldr	r0, [pc, #472]	; (8001050 <readall_inputs+0x35c>)
 8000e78:	f003 f804 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	b2d9      	uxtb	r1, r3
 8000e84:	4a73      	ldr	r2, [pc, #460]	; (8001054 <readall_inputs+0x360>)
 8000e86:	7813      	ldrb	r3, [r2, #0]
 8000e88:	f361 0300 	bfi	r3, r1, #0, #1
 8000e8c:	7013      	strb	r3, [r2, #0]
	sdc_in.SDC0 = HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin);						// Shutdown-Circuit, OK
 8000e8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e92:	4869      	ldr	r0, [pc, #420]	; (8001038 <readall_inputs+0x344>)
 8000e94:	f002 fff6 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	b2d9      	uxtb	r1, r3
 8000ea0:	4a6c      	ldr	r2, [pc, #432]	; (8001054 <readall_inputs+0x360>)
 8000ea2:	7813      	ldrb	r3, [r2, #0]
 8000ea4:	f361 0341 	bfi	r3, r1, #1, #1
 8000ea8:	7013      	strb	r3, [r2, #0]
	sdc_in.AkkuSDC = HAL_GPIO_ReadPin(SENSE_SDC_AKKU_GPIO_Port, SENSE_SDC_AKKU_Pin);			// Shutdown-Circuit Akku, OK
 8000eaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eae:	4862      	ldr	r0, [pc, #392]	; (8001038 <readall_inputs+0x344>)
 8000eb0:	f002 ffe8 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	b2d9      	uxtb	r1, r3
 8000ebc:	4a65      	ldr	r2, [pc, #404]	; (8001054 <readall_inputs+0x360>)
 8000ebe:	7813      	ldrb	r3, [r2, #0]
 8000ec0:	f361 0382 	bfi	r3, r1, #2, #1
 8000ec4:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8000ec6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eca:	485e      	ldr	r0, [pc, #376]	; (8001044 <readall_inputs+0x350>)
 8000ecc:	f002 ffda 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	b2d9      	uxtb	r1, r3
 8000ed8:	4a5e      	ldr	r2, [pc, #376]	; (8001054 <readall_inputs+0x360>)
 8000eda:	7813      	ldrb	r3, [r2, #0]
 8000edc:	f361 03c3 	bfi	r3, r1, #3, #1
 8000ee0:	7013      	strb	r3, [r2, #0]
	sdc_in.DCDC_Fault = HAL_GPIO_ReadPin(DCDC_FAULT_GPIO_Port, DCDC_FAULT_Pin);					// DCDC Wandler funktioniert nicht richtig
 8000ee2:	2102      	movs	r1, #2
 8000ee4:	4859      	ldr	r0, [pc, #356]	; (800104c <readall_inputs+0x358>)
 8000ee6:	f002 ffcd 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000eea:	4603      	mov	r3, r0
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	b2d9      	uxtb	r1, r3
 8000ef2:	4a58      	ldr	r2, [pc, #352]	; (8001054 <readall_inputs+0x360>)
 8000ef4:	7813      	ldrb	r3, [r2, #0]
 8000ef6:	f361 1304 	bfi	r3, r1, #4, #1
 8000efa:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.ASR1 = HAL_GPIO_ReadPin(ASR_IN1_GPIO_Port, ASR_IN1_Pin);							// ASR Eingang Mittelkonsole
 8000efc:	2110      	movs	r1, #16
 8000efe:	4853      	ldr	r0, [pc, #332]	; (800104c <readall_inputs+0x358>)
 8000f00:	f002 ffc0 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000f04:	4603      	mov	r3, r0
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	b2d9      	uxtb	r1, r3
 8000f0c:	4a52      	ldr	r2, [pc, #328]	; (8001058 <readall_inputs+0x364>)
 8000f0e:	7813      	ldrb	r3, [r2, #0]
 8000f10:	f361 0300 	bfi	r3, r1, #0, #1
 8000f14:	7013      	strb	r3, [r2, #0]
	komfort_in.ASR2 = HAL_GPIO_ReadPin(ASR_IN2_GPIO_Port, ASR_IN2_Pin);							// ASR Eingang Mittelkonsole
 8000f16:	2110      	movs	r1, #16
 8000f18:	484b      	ldr	r0, [pc, #300]	; (8001048 <readall_inputs+0x354>)
 8000f1a:	f002 ffb3 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	b2d9      	uxtb	r1, r3
 8000f26:	4a4c      	ldr	r2, [pc, #304]	; (8001058 <readall_inputs+0x364>)
 8000f28:	7813      	ldrb	r3, [r2, #0]
 8000f2a:	f361 0341 	bfi	r3, r1, #1, #1
 8000f2e:	7013      	strb	r3, [r2, #0]
	komfort_in.ECO = HAL_GPIO_ReadPin(ECO_GPIO_Port, ECO_Pin);									// ECO Eingang Mittelkonsole
 8000f30:	2108      	movs	r1, #8
 8000f32:	4841      	ldr	r0, [pc, #260]	; (8001038 <readall_inputs+0x344>)
 8000f34:	f002 ffa6 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	b2d9      	uxtb	r1, r3
 8000f40:	4a45      	ldr	r2, [pc, #276]	; (8001058 <readall_inputs+0x364>)
 8000f42:	7813      	ldrb	r3, [r2, #0]
 8000f44:	f361 0382 	bfi	r3, r1, #2, #1
 8000f48:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Rst_In = HAL_GPIO_ReadPin(BC_RESET_IN_GPIO_Port, BC_RESET_IN_Pin);			// Boardcomputer Reset Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8000f4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f4e:	483f      	ldr	r0, [pc, #252]	; (800104c <readall_inputs+0x358>)
 8000f50:	f002 ff98 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000f54:	4603      	mov	r3, r0
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	b2d9      	uxtb	r1, r3
 8000f5c:	4a3e      	ldr	r2, [pc, #248]	; (8001058 <readall_inputs+0x364>)
 8000f5e:	7813      	ldrb	r3, [r2, #0]
 8000f60:	f361 03c3 	bfi	r3, r1, #3, #1
 8000f64:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Up_In = HAL_GPIO_ReadPin(BC_UP_IN_GPIO_Port, BC_UP_IN_Pin);					// Boardcomputer Rauf Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8000f66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f6a:	4839      	ldr	r0, [pc, #228]	; (8001050 <readall_inputs+0x35c>)
 8000f6c:	f002 ff8a 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000f70:	4603      	mov	r3, r0
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	b2d9      	uxtb	r1, r3
 8000f78:	4a37      	ldr	r2, [pc, #220]	; (8001058 <readall_inputs+0x364>)
 8000f7a:	7813      	ldrb	r3, [r2, #0]
 8000f7c:	f361 1304 	bfi	r3, r1, #4, #1
 8000f80:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Down_In = HAL_GPIO_ReadPin(BC_DOWN_IN_GPIO_Port, BC_DOWN_IN_Pin);				// Boardcomputer Runter Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8000f82:	2110      	movs	r1, #16
 8000f84:	482c      	ldr	r0, [pc, #176]	; (8001038 <readall_inputs+0x344>)
 8000f86:	f002 ff7d 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	b2d9      	uxtb	r1, r3
 8000f92:	4a31      	ldr	r2, [pc, #196]	; (8001058 <readall_inputs+0x364>)
 8000f94:	7813      	ldrb	r3, [r2, #0]
 8000f96:	f361 1345 	bfi	r3, r1, #5, #1
 8000f9a:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn1 = HAL_GPIO_ReadPin(BAMOCAR_IN1_GPIO_Port, BAMOCAR_IN1_Pin);				// Eingang Bamocar 1
 8000f9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa0:	4829      	ldr	r0, [pc, #164]	; (8001048 <readall_inputs+0x354>)
 8000fa2:	f002 ff6f 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	b2d9      	uxtb	r1, r3
 8000fae:	4a2a      	ldr	r2, [pc, #168]	; (8001058 <readall_inputs+0x364>)
 8000fb0:	7813      	ldrb	r3, [r2, #0]
 8000fb2:	f361 1386 	bfi	r3, r1, #6, #1
 8000fb6:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn2 = HAL_GPIO_ReadPin(BAMOCAR_IN2_GPIO_Port, BAMOCAR_IN2_Pin);				// Eingang Bamocar 2
 8000fb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fbc:	4822      	ldr	r0, [pc, #136]	; (8001048 <readall_inputs+0x354>)
 8000fbe:	f002 ff61 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	b2d9      	uxtb	r1, r3
 8000fca:	4a23      	ldr	r2, [pc, #140]	; (8001058 <readall_inputs+0x364>)
 8000fcc:	7813      	ldrb	r3, [r2, #0]
 8000fce:	f361 13c7 	bfi	r3, r1, #7, #1
 8000fd2:	7013      	strb	r3, [r2, #0]
	komfort_in.Enter = HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin);							// Encoder Taster Enter Eingang Mittelconsole
 8000fd4:	2180      	movs	r1, #128	; 0x80
 8000fd6:	4821      	ldr	r0, [pc, #132]	; (800105c <readall_inputs+0x368>)
 8000fd8:	f002 ff54 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	b2d9      	uxtb	r1, r3
 8000fe4:	4a1c      	ldr	r2, [pc, #112]	; (8001058 <readall_inputs+0x364>)
 8000fe6:	7853      	ldrb	r3, [r2, #1]
 8000fe8:	f361 0300 	bfi	r3, r1, #0, #1
 8000fec:	7053      	strb	r3, [r2, #1]
	komfort_in.OutA = HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTA_Pin);								// Encoder OUTA Eingang Mittelconsole
 8000fee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff2:	4817      	ldr	r0, [pc, #92]	; (8001050 <readall_inputs+0x35c>)
 8000ff4:	f002 ff46 	bl	8003e84 <HAL_GPIO_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	b2d9      	uxtb	r1, r3
 8001000:	4a15      	ldr	r2, [pc, #84]	; (8001058 <readall_inputs+0x364>)
 8001002:	7853      	ldrb	r3, [r2, #1]
 8001004:	f361 0341 	bfi	r3, r1, #1, #1
 8001008:	7053      	strb	r3, [r2, #1]
	komfort_in.OutB = HAL_GPIO_ReadPin(OUTB_GPIO_Port, OUTB_Pin);								// Encoder OUTB Eingang Mittelconsole
 800100a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800100e:	4810      	ldr	r0, [pc, #64]	; (8001050 <readall_inputs+0x35c>)
 8001010:	f002 ff38 	bl	8003e84 <HAL_GPIO_ReadPin>
 8001014:	4603      	mov	r3, r0
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	b2d9      	uxtb	r1, r3
 800101c:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <readall_inputs+0x364>)
 800101e:	7853      	ldrb	r3, [r2, #1]
 8001020:	f361 0382 	bfi	r3, r1, #2, #1
 8001024:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA1 = HAL_GPIO_ReadPin(GRA1_GPIO_Port, GRA1_Pin);								// Tempomat 1 Eingang
 8001026:	2120      	movs	r1, #32
 8001028:	4808      	ldr	r0, [pc, #32]	; (800104c <readall_inputs+0x358>)
 800102a:	f002 ff2b 	bl	8003e84 <HAL_GPIO_ReadPin>
 800102e:	4603      	mov	r3, r0
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	b2d9      	uxtb	r1, r3
 8001036:	e013      	b.n	8001060 <readall_inputs+0x36c>
 8001038:	40021000 	.word	0x40021000
 800103c:	20000050 	.word	0x20000050
 8001040:	40021400 	.word	0x40021400
 8001044:	40020400 	.word	0x40020400
 8001048:	40020c00 	.word	0x40020c00
 800104c:	40021800 	.word	0x40021800
 8001050:	40020000 	.word	0x40020000
 8001054:	20000058 	.word	0x20000058
 8001058:	20000054 	.word	0x20000054
 800105c:	40020800 	.word	0x40020800
 8001060:	4a1d      	ldr	r2, [pc, #116]	; (80010d8 <readall_inputs+0x3e4>)
 8001062:	7853      	ldrb	r3, [r2, #1]
 8001064:	f361 03c3 	bfi	r3, r1, #3, #1
 8001068:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA2 = HAL_GPIO_ReadPin(GRA2_GPIO_Port, GRA2_Pin);								// Tempomat 2 Eingang
 800106a:	2140      	movs	r1, #64	; 0x40
 800106c:	481b      	ldr	r0, [pc, #108]	; (80010dc <readall_inputs+0x3e8>)
 800106e:	f002 ff09 	bl	8003e84 <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	b2d9      	uxtb	r1, r3
 800107a:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <readall_inputs+0x3e4>)
 800107c:	7853      	ldrb	r3, [r2, #1]
 800107e:	f361 1304 	bfi	r3, r1, #4, #1
 8001082:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA3 = HAL_GPIO_ReadPin(GRA3_GPIO_Port, GRA3_Pin);								// Tempomat 3 Eingang
 8001084:	2180      	movs	r1, #128	; 0x80
 8001086:	4815      	ldr	r0, [pc, #84]	; (80010dc <readall_inputs+0x3e8>)
 8001088:	f002 fefc 	bl	8003e84 <HAL_GPIO_ReadPin>
 800108c:	4603      	mov	r3, r0
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	b2d9      	uxtb	r1, r3
 8001094:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <readall_inputs+0x3e4>)
 8001096:	7853      	ldrb	r3, [r2, #1]
 8001098:	f361 1345 	bfi	r3, r1, #5, #1
 800109c:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA4 = HAL_GPIO_ReadPin(GRA4_GPIO_Port, GRA4_Pin);								// Tempomat 4 Eingang
 800109e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a2:	480e      	ldr	r0, [pc, #56]	; (80010dc <readall_inputs+0x3e8>)
 80010a4:	f002 feee 	bl	8003e84 <HAL_GPIO_ReadPin>
 80010a8:	4603      	mov	r3, r0
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	b2d9      	uxtb	r1, r3
 80010b0:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <readall_inputs+0x3e4>)
 80010b2:	7853      	ldrb	r3, [r2, #1]
 80010b4:	f361 1386 	bfi	r3, r1, #6, #1
 80010b8:	7053      	strb	r3, [r2, #1]
	komfort_in.Durchfluss = HAL_GPIO_ReadPin(DURCHFLUSS_GPIO_Port, DURCHFLUSS_Pin);				// Durchflusssensor Eingang
 80010ba:	2120      	movs	r1, #32
 80010bc:	4808      	ldr	r0, [pc, #32]	; (80010e0 <readall_inputs+0x3ec>)
 80010be:	f002 fee1 	bl	8003e84 <HAL_GPIO_ReadPin>
 80010c2:	4603      	mov	r3, r0
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	b2d9      	uxtb	r1, r3
 80010ca:	4a03      	ldr	r2, [pc, #12]	; (80010d8 <readall_inputs+0x3e4>)
 80010cc:	7853      	ldrb	r3, [r2, #1]
 80010ce:	f361 13c7 	bfi	r3, r1, #7, #1
 80010d2:	7053      	strb	r3, [r2, #1]
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000054 	.word	0x20000054
 80010dc:	40021800 	.word	0x40021800
 80010e0:	40021000 	.word	0x40021000

080010e4 <millis>:
//----------------------------------------------------------------------
#include "millis.h"
//----------------------------------------------------------------------

uint32_t millis(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80010e8:	f001 f906 	bl	80022f8 <HAL_GetTick>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <testPCB_Leds>:
}
//----------------------------------------------------------------------

// Teste Platinen LEDs
void testPCB_Leds(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	2180      	movs	r1, #128	; 0x80
 80010fc:	481b      	ldr	r0, [pc, #108]	; (800116c <testPCB_Leds+0x78>)
 80010fe:	f002 fed9 	bl	8003eb4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001102:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001106:	f001 f903 	bl	8002310 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	4817      	ldr	r0, [pc, #92]	; (800116c <testPCB_Leds+0x78>)
 8001110:	f002 fed0 	bl	8003eb4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001114:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001118:	f001 f8fa 	bl	8002310 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001122:	4812      	ldr	r0, [pc, #72]	; (800116c <testPCB_Leds+0x78>)
 8001124:	f002 fec6 	bl	8003eb4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001128:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800112c:	f001 f8f0 	bl	8002310 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001136:	480d      	ldr	r0, [pc, #52]	; (800116c <testPCB_Leds+0x78>)
 8001138:	f002 febc 	bl	8003eb4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 800113c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001140:	f001 f8e6 	bl	8002310 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001144:	2201      	movs	r2, #1
 8001146:	2104      	movs	r1, #4
 8001148:	4808      	ldr	r0, [pc, #32]	; (800116c <testPCB_Leds+0x78>)
 800114a:	f002 feb3 	bl	8003eb4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 800114e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001152:	f001 f8dd 	bl	8002310 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	2104      	movs	r1, #4
 800115a:	4804      	ldr	r0, [pc, #16]	; (800116c <testPCB_Leds+0x78>)
 800115c:	f002 feaa 	bl	8003eb4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001160:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001164:	f001 f8d4 	bl	8002310 <HAL_Delay>
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40020400 	.word	0x40020400

08001170 <readTrottle>:
//----------------------------------------------------------------------

// Gaspedal auswerten
//----------------------------------------------------------------------
uint16_t readTrottle(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
	// Variablen anlegen
	uint16_t ADC_Gas = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	80fb      	strh	r3, [r7, #6]
//
//	}
//	else if ((system_in.Kickdown == 1))										// Gaspedal nicht oder teilweise getreten
//	{
//		// Gaspedal einlesen
		ADC_Gas = ADC_Gaspedal();
 800117a:	f7ff fd59 	bl	8000c30 <ADC_Gaspedal>
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]
//	{
//		// Gaspedal invalide
//		software_error(ERROR_GASPEDAL);
//	}

	if (ADC_Gas <= 300)
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001188:	d801      	bhi.n	800118e <readTrottle+0x1e>
	{
		ADC_Gas = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	80fb      	strh	r3, [r7, #6]
	}

	if (ADC_Gas > 300)
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001194:	d903      	bls.n	800119e <readTrottle+0x2e>
	{
		ADC_Gas -= 300;
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800119c:	80fb      	strh	r3, [r7, #6]
	if (ADC_Gas >= 3900)
	{

	}

	return ADC_Gas;
 800119e:	88fb      	ldrh	r3, [r7, #6]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ae:	463b      	mov	r3, r7
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011ba:	4b64      	ldr	r3, [pc, #400]	; (800134c <MX_ADC1_Init+0x1a4>)
 80011bc:	4a64      	ldr	r2, [pc, #400]	; (8001350 <MX_ADC1_Init+0x1a8>)
 80011be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011c0:	4b62      	ldr	r3, [pc, #392]	; (800134c <MX_ADC1_Init+0x1a4>)
 80011c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011c8:	4b60      	ldr	r3, [pc, #384]	; (800134c <MX_ADC1_Init+0x1a4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011ce:	4b5f      	ldr	r3, [pc, #380]	; (800134c <MX_ADC1_Init+0x1a4>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011d4:	4b5d      	ldr	r3, [pc, #372]	; (800134c <MX_ADC1_Init+0x1a4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011da:	4b5c      	ldr	r3, [pc, #368]	; (800134c <MX_ADC1_Init+0x1a4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011e2:	4b5a      	ldr	r3, [pc, #360]	; (800134c <MX_ADC1_Init+0x1a4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e8:	4b58      	ldr	r3, [pc, #352]	; (800134c <MX_ADC1_Init+0x1a4>)
 80011ea:	4a5a      	ldr	r2, [pc, #360]	; (8001354 <MX_ADC1_Init+0x1ac>)
 80011ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ee:	4b57      	ldr	r3, [pc, #348]	; (800134c <MX_ADC1_Init+0x1a4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 80011f4:	4b55      	ldr	r3, [pc, #340]	; (800134c <MX_ADC1_Init+0x1a4>)
 80011f6:	220a      	movs	r2, #10
 80011f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011fa:	4b54      	ldr	r3, [pc, #336]	; (800134c <MX_ADC1_Init+0x1a4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001202:	4b52      	ldr	r3, [pc, #328]	; (800134c <MX_ADC1_Init+0x1a4>)
 8001204:	2201      	movs	r2, #1
 8001206:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001208:	4850      	ldr	r0, [pc, #320]	; (800134c <MX_ADC1_Init+0x1a4>)
 800120a:	f001 f8ed 	bl	80023e8 <HAL_ADC_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001214:	f000 fe90 	bl	8001f38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001218:	230e      	movs	r3, #14
 800121a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800121c:	2301      	movs	r3, #1
 800121e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001220:	2301      	movs	r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001224:	463b      	mov	r3, r7
 8001226:	4619      	mov	r1, r3
 8001228:	4848      	ldr	r0, [pc, #288]	; (800134c <MX_ADC1_Init+0x1a4>)
 800122a:	f001 fabb 	bl	80027a4 <HAL_ADC_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001234:	f000 fe80 	bl	8001f38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001238:	2306      	movs	r3, #6
 800123a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800123c:	2302      	movs	r3, #2
 800123e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001240:	463b      	mov	r3, r7
 8001242:	4619      	mov	r1, r3
 8001244:	4841      	ldr	r0, [pc, #260]	; (800134c <MX_ADC1_Init+0x1a4>)
 8001246:	f001 faad 	bl	80027a4 <HAL_ADC_ConfigChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001250:	f000 fe72 	bl	8001f38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001254:	2304      	movs	r3, #4
 8001256:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001258:	2303      	movs	r3, #3
 800125a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800125c:	2302      	movs	r3, #2
 800125e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001260:	463b      	mov	r3, r7
 8001262:	4619      	mov	r1, r3
 8001264:	4839      	ldr	r0, [pc, #228]	; (800134c <MX_ADC1_Init+0x1a4>)
 8001266:	f001 fa9d 	bl	80027a4 <HAL_ADC_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001270:	f000 fe62 	bl	8001f38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001274:	2305      	movs	r3, #5
 8001276:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001278:	2304      	movs	r3, #4
 800127a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800127c:	463b      	mov	r3, r7
 800127e:	4619      	mov	r1, r3
 8001280:	4832      	ldr	r0, [pc, #200]	; (800134c <MX_ADC1_Init+0x1a4>)
 8001282:	f001 fa8f 	bl	80027a4 <HAL_ADC_ConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 800128c:	f000 fe54 	bl	8001f38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001290:	230f      	movs	r3, #15
 8001292:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001294:	2305      	movs	r3, #5
 8001296:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001298:	2301      	movs	r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	4619      	mov	r1, r3
 80012a0:	482a      	ldr	r0, [pc, #168]	; (800134c <MX_ADC1_Init+0x1a4>)
 80012a2:	f001 fa7f 	bl	80027a4 <HAL_ADC_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80012ac:	f000 fe44 	bl	8001f38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012b0:	2303      	movs	r3, #3
 80012b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80012b4:	2306      	movs	r3, #6
 80012b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80012b8:	2303      	movs	r3, #3
 80012ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012bc:	463b      	mov	r3, r7
 80012be:	4619      	mov	r1, r3
 80012c0:	4822      	ldr	r0, [pc, #136]	; (800134c <MX_ADC1_Init+0x1a4>)
 80012c2:	f001 fa6f 	bl	80027a4 <HAL_ADC_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 80012cc:	f000 fe34 	bl	8001f38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80012d0:	2307      	movs	r3, #7
 80012d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80012d4:	2307      	movs	r3, #7
 80012d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d8:	463b      	mov	r3, r7
 80012da:	4619      	mov	r1, r3
 80012dc:	481b      	ldr	r0, [pc, #108]	; (800134c <MX_ADC1_Init+0x1a4>)
 80012de:	f001 fa61 	bl	80027a4 <HAL_ADC_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 80012e8:	f000 fe26 	bl	8001f38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MX_ADC1_Init+0x1b0>)
 80012ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80012f0:	2308      	movs	r3, #8
 80012f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f4:	463b      	mov	r3, r7
 80012f6:	4619      	mov	r1, r3
 80012f8:	4814      	ldr	r0, [pc, #80]	; (800134c <MX_ADC1_Init+0x1a4>)
 80012fa:	f001 fa53 	bl	80027a4 <HAL_ADC_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 8001304:	f000 fe18 	bl	8001f38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001308:	2308      	movs	r3, #8
 800130a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800130c:	2309      	movs	r3, #9
 800130e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001310:	2301      	movs	r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001314:	463b      	mov	r3, r7
 8001316:	4619      	mov	r1, r3
 8001318:	480c      	ldr	r0, [pc, #48]	; (800134c <MX_ADC1_Init+0x1a4>)
 800131a:	f001 fa43 	bl	80027a4 <HAL_ADC_ConfigChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_ADC1_Init+0x180>
  {
    Error_Handler();
 8001324:	f000 fe08 	bl	8001f38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001328:	2309      	movs	r3, #9
 800132a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800132c:	230a      	movs	r3, #10
 800132e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001330:	463b      	mov	r3, r7
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_ADC1_Init+0x1a4>)
 8001336:	f001 fa35 	bl	80027a4 <HAL_ADC_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_ADC1_Init+0x19c>
  {
    Error_Handler();
 8001340:	f000 fdfa 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	2000006c 	.word	0x2000006c
 8001350:	40012000 	.word	0x40012000
 8001354:	0f000001 	.word	0x0f000001
 8001358:	10000012 	.word	0x10000012

0800135c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08c      	sub	sp, #48	; 0x30
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a2d      	ldr	r2, [pc, #180]	; (8001430 <HAL_ADC_MspInit+0xd4>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d153      	bne.n	8001426 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800137e:	4b2d      	ldr	r3, [pc, #180]	; (8001434 <HAL_ADC_MspInit+0xd8>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a2c      	ldr	r2, [pc, #176]	; (8001434 <HAL_ADC_MspInit+0xd8>)
 8001384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b2a      	ldr	r3, [pc, #168]	; (8001434 <HAL_ADC_MspInit+0xd8>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001392:	61bb      	str	r3, [r7, #24]
 8001394:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	4b27      	ldr	r3, [pc, #156]	; (8001434 <HAL_ADC_MspInit+0xd8>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a26      	ldr	r2, [pc, #152]	; (8001434 <HAL_ADC_MspInit+0xd8>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b24      	ldr	r3, [pc, #144]	; (8001434 <HAL_ADC_MspInit+0xd8>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ae:	4b21      	ldr	r3, [pc, #132]	; (8001434 <HAL_ADC_MspInit+0xd8>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a20      	ldr	r2, [pc, #128]	; (8001434 <HAL_ADC_MspInit+0xd8>)
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <HAL_ADC_MspInit+0xd8>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <HAL_ADC_MspInit+0xd8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a1a      	ldr	r2, [pc, #104]	; (8001434 <HAL_ADC_MspInit+0xd8>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b18      	ldr	r3, [pc, #96]	; (8001434 <HAL_ADC_MspInit+0xd8>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SENSE_KL15_Pin|SENSE_KUEHLWASSER_Pin|SENSE_KLIMA_FLAP_Pin|SENSE_GAS_Pin
 80013de:	23f8      	movs	r3, #248	; 0xf8
 80013e0:	61fb      	str	r3, [r7, #28]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e2:	2303      	movs	r3, #3
 80013e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	4811      	ldr	r0, [pc, #68]	; (8001438 <HAL_ADC_MspInit+0xdc>)
 80013f2:	f002 fb9b 	bl	8003b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_DRUCK_Pin|SENSE_DRUCK_TEMP_Pin;
 80013f6:	2330      	movs	r3, #48	; 0x30
 80013f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013fa:	2303      	movs	r3, #3
 80013fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	4619      	mov	r1, r3
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <HAL_ADC_MspInit+0xe0>)
 800140a:	f002 fb8f 	bl	8003b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_RETURN_Pin|SENSE_INFO_Pin;
 800140e:	2303      	movs	r3, #3
 8001410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001412:	2303      	movs	r3, #3
 8001414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	4619      	mov	r1, r3
 8001420:	4807      	ldr	r0, [pc, #28]	; (8001440 <HAL_ADC_MspInit+0xe4>)
 8001422:	f002 fb83 	bl	8003b2c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001426:	bf00      	nop
 8001428:	3730      	adds	r7, #48	; 0x30
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40012000 	.word	0x40012000
 8001434:	40023800 	.word	0x40023800
 8001438:	40020000 	.word	0x40020000
 800143c:	40020800 	.word	0x40020800
 8001440:	40020400 	.word	0x40020400

08001444 <MX_CAN3_Init>:

CAN_HandleTypeDef hcan3;

/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001448:	4b32      	ldr	r3, [pc, #200]	; (8001514 <MX_CAN3_Init+0xd0>)
 800144a:	4a33      	ldr	r2, [pc, #204]	; (8001518 <MX_CAN3_Init+0xd4>)
 800144c:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 800144e:	4b31      	ldr	r3, [pc, #196]	; (8001514 <MX_CAN3_Init+0xd0>)
 8001450:	2206      	movs	r2, #6
 8001452:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001454:	4b2f      	ldr	r3, [pc, #188]	; (8001514 <MX_CAN3_Init+0xd0>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800145a:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <MX_CAN3_Init+0xd0>)
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001460:	4b2c      	ldr	r3, [pc, #176]	; (8001514 <MX_CAN3_Init+0xd0>)
 8001462:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001466:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001468:	4b2a      	ldr	r3, [pc, #168]	; (8001514 <MX_CAN3_Init+0xd0>)
 800146a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800146e:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001470:	4b28      	ldr	r3, [pc, #160]	; (8001514 <MX_CAN3_Init+0xd0>)
 8001472:	2200      	movs	r2, #0
 8001474:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001476:	4b27      	ldr	r3, [pc, #156]	; (8001514 <MX_CAN3_Init+0xd0>)
 8001478:	2200      	movs	r2, #0
 800147a:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 800147c:	4b25      	ldr	r3, [pc, #148]	; (8001514 <MX_CAN3_Init+0xd0>)
 800147e:	2200      	movs	r2, #0
 8001480:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001482:	4b24      	ldr	r3, [pc, #144]	; (8001514 <MX_CAN3_Init+0xd0>)
 8001484:	2200      	movs	r2, #0
 8001486:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001488:	4b22      	ldr	r3, [pc, #136]	; (8001514 <MX_CAN3_Init+0xd0>)
 800148a:	2200      	movs	r2, #0
 800148c:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 800148e:	4b21      	ldr	r3, [pc, #132]	; (8001514 <MX_CAN3_Init+0xd0>)
 8001490:	2200      	movs	r2, #0
 8001492:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001494:	481f      	ldr	r0, [pc, #124]	; (8001514 <MX_CAN3_Init+0xd0>)
 8001496:	f001 fbc9 	bl	8002c2c <HAL_CAN_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 80014a0:	f000 fd4a 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */
	// Starte CAN Bus
	if((HAL_CAN_Start(&hcan3)) != HAL_OK)
 80014a4:	481b      	ldr	r0, [pc, #108]	; (8001514 <MX_CAN3_Init+0xd0>)
 80014a6:	f001 fda9 	bl	8002ffc <HAL_CAN_Start>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_CAN3_Init+0x70>
	{
		// Fehler beim Starten des CAN-Busses
		Error_Handler();
 80014b0:	f000 fd42 	bl	8001f38 <Error_Handler>
	}

	// Aktiviere Interrupts fuer CAN Bus
	if((HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING)) != HAL_OK)
 80014b4:	2102      	movs	r1, #2
 80014b6:	4817      	ldr	r0, [pc, #92]	; (8001514 <MX_CAN3_Init+0xd0>)
 80014b8:	f001 ffd1 	bl	800345e <HAL_CAN_ActivateNotification>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_CAN3_Init+0x82>
	{
		// Fehler in der Initialisierung des CAN Interrupts
		Error_Handler();
 80014c2:	f000 fd39 	bl	8001f38 <Error_Handler>
	}

	// Filter Bank initialisieren um Daten zu empfangen
	// Akzeptiere alle CAN-Pakete
	sFilterConfig.FilterBank = 0;
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <MX_CAN3_Init+0xd8>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <MX_CAN3_Init+0xd8>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <MX_CAN3_Init+0xd8>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 80014d8:	4b10      	ldr	r3, [pc, #64]	; (800151c <MX_CAN3_Init+0xd8>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_CAN3_Init+0xd8>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80014e4:	4b0d      	ldr	r3, [pc, #52]	; (800151c <MX_CAN3_Init+0xd8>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_CAN3_Init+0xd8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = 0;
 80014f0:	4b0a      	ldr	r3, [pc, #40]	; (800151c <MX_CAN3_Init+0xd8>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_CAN3_Init+0xd8>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	621a      	str	r2, [r3, #32]

	// Filter Bank schreiben
	if((HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 80014fc:	4907      	ldr	r1, [pc, #28]	; (800151c <MX_CAN3_Init+0xd8>)
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_CAN3_Init+0xd0>)
 8001500:	f001 fc90 	bl	8002e24 <HAL_CAN_ConfigFilter>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_CAN3_Init+0xca>
	{
		// Fehler beim konfigurieren der Filterbank fuer den CAN-Bus
		Error_Handler();
 800150a:	f000 fd15 	bl	8001f38 <Error_Handler>
	}

  /* USER CODE END CAN3_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200000dc 	.word	0x200000dc
 8001518:	40003400 	.word	0x40003400
 800151c:	200000b4 	.word	0x200000b4

08001520 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08c      	sub	sp, #48	; 0x30
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 031c 	add.w	r3, r7, #28
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN3)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a27      	ldr	r2, [pc, #156]	; (80015dc <HAL_CAN_MspInit+0xbc>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d148      	bne.n	80015d4 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN3_MspInit 0 */

  /* USER CODE END CAN3_MspInit 0 */
    /* CAN3 clock enable */
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001542:	4b27      	ldr	r3, [pc, #156]	; (80015e0 <HAL_CAN_MspInit+0xc0>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a26      	ldr	r2, [pc, #152]	; (80015e0 <HAL_CAN_MspInit+0xc0>)
 8001548:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <HAL_CAN_MspInit+0xc0>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001556:	61bb      	str	r3, [r7, #24]
 8001558:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 800155a:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <HAL_CAN_MspInit+0xc0>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a20      	ldr	r2, [pc, #128]	; (80015e0 <HAL_CAN_MspInit+0xc0>)
 8001560:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <HAL_CAN_MspInit+0xc0>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001572:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <HAL_CAN_MspInit+0xc0>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a1a      	ldr	r2, [pc, #104]	; (80015e0 <HAL_CAN_MspInit+0xc0>)
 8001578:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <HAL_CAN_MspInit+0xc0>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <HAL_CAN_MspInit+0xc0>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <HAL_CAN_MspInit+0xc0>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_CAN_MspInit+0xc0>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    /**CAN3 GPIO Configuration
    PA8     ------> CAN3_RX
    PA15     ------> CAN3_TX
    */
    GPIO_InitStruct.Pin = ACAN_RX_Pin|ACAN_TX_Pin;
 80015a2:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80015a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80015b4:	230b      	movs	r3, #11
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	4619      	mov	r1, r3
 80015be:	4809      	ldr	r0, [pc, #36]	; (80015e4 <HAL_CAN_MspInit+0xc4>)
 80015c0:	f002 fab4 	bl	8003b2c <HAL_GPIO_Init>

    /* CAN3 interrupt Init */
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2100      	movs	r1, #0
 80015c8:	2069      	movs	r0, #105	; 0x69
 80015ca:	f002 fa78 	bl	8003abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 80015ce:	2069      	movs	r0, #105	; 0x69
 80015d0:	f002 fa91 	bl	8003af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 80015d4:	bf00      	nop
 80015d6:	3730      	adds	r7, #48	; 0x30
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40003400 	.word	0x40003400
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020000 	.word	0x40020000

080015e8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08e      	sub	sp, #56	; 0x38
 80015ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015fe:	4bb6      	ldr	r3, [pc, #728]	; (80018d8 <MX_GPIO_Init+0x2f0>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4ab5      	ldr	r2, [pc, #724]	; (80018d8 <MX_GPIO_Init+0x2f0>)
 8001604:	f043 0310 	orr.w	r3, r3, #16
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4bb3      	ldr	r3, [pc, #716]	; (80018d8 <MX_GPIO_Init+0x2f0>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0310 	and.w	r3, r3, #16
 8001612:	623b      	str	r3, [r7, #32]
 8001614:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	4bb0      	ldr	r3, [pc, #704]	; (80018d8 <MX_GPIO_Init+0x2f0>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4aaf      	ldr	r2, [pc, #700]	; (80018d8 <MX_GPIO_Init+0x2f0>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4bad      	ldr	r3, [pc, #692]	; (80018d8 <MX_GPIO_Init+0x2f0>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	61fb      	str	r3, [r7, #28]
 800162c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800162e:	4baa      	ldr	r3, [pc, #680]	; (80018d8 <MX_GPIO_Init+0x2f0>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4aa9      	ldr	r2, [pc, #676]	; (80018d8 <MX_GPIO_Init+0x2f0>)
 8001634:	f043 0320 	orr.w	r3, r3, #32
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4ba7      	ldr	r3, [pc, #668]	; (80018d8 <MX_GPIO_Init+0x2f0>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0320 	and.w	r3, r3, #32
 8001642:	61bb      	str	r3, [r7, #24]
 8001644:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001646:	4ba4      	ldr	r3, [pc, #656]	; (80018d8 <MX_GPIO_Init+0x2f0>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4aa3      	ldr	r2, [pc, #652]	; (80018d8 <MX_GPIO_Init+0x2f0>)
 800164c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4ba1      	ldr	r3, [pc, #644]	; (80018d8 <MX_GPIO_Init+0x2f0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	4b9e      	ldr	r3, [pc, #632]	; (80018d8 <MX_GPIO_Init+0x2f0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a9d      	ldr	r2, [pc, #628]	; (80018d8 <MX_GPIO_Init+0x2f0>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b9b      	ldr	r3, [pc, #620]	; (80018d8 <MX_GPIO_Init+0x2f0>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	4b98      	ldr	r3, [pc, #608]	; (80018d8 <MX_GPIO_Init+0x2f0>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a97      	ldr	r2, [pc, #604]	; (80018d8 <MX_GPIO_Init+0x2f0>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b95      	ldr	r3, [pc, #596]	; (80018d8 <MX_GPIO_Init+0x2f0>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800168e:	4b92      	ldr	r3, [pc, #584]	; (80018d8 <MX_GPIO_Init+0x2f0>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a91      	ldr	r2, [pc, #580]	; (80018d8 <MX_GPIO_Init+0x2f0>)
 8001694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b8f      	ldr	r3, [pc, #572]	; (80018d8 <MX_GPIO_Init+0x2f0>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a6:	4b8c      	ldr	r3, [pc, #560]	; (80018d8 <MX_GPIO_Init+0x2f0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a8b      	ldr	r2, [pc, #556]	; (80018d8 <MX_GPIO_Init+0x2f0>)
 80016ac:	f043 0308 	orr.w	r3, r3, #8
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b89      	ldr	r3, [pc, #548]	; (80018d8 <MX_GPIO_Init+0x2f0>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 80016be:	2200      	movs	r2, #0
 80016c0:	f248 0187 	movw	r1, #32903	; 0x8087
 80016c4:	4885      	ldr	r0, [pc, #532]	; (80018dc <MX_GPIO_Init+0x2f4>)
 80016c6:	f002 fbf5 	bl	8003eb4 <HAL_GPIO_WritePin>
                          |DIGITAL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_ON_Pin|WS2812_Pin, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	f242 0108 	movw	r1, #8200	; 0x2008
 80016d0:	4883      	ldr	r0, [pc, #524]	; (80018e0 <MX_GPIO_Init+0x2f8>)
 80016d2:	f002 fbef 	bl	8003eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 80016d6:	2200      	movs	r2, #0
 80016d8:	f24f 013c 	movw	r1, #61500	; 0xf03c
 80016dc:	4881      	ldr	r0, [pc, #516]	; (80018e4 <MX_GPIO_Init+0x2fc>)
 80016de:	f002 fbe9 	bl	8003eb4 <HAL_GPIO_WritePin>
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 80016e2:	2200      	movs	r2, #0
 80016e4:	f647 0194 	movw	r1, #30868	; 0x7894
 80016e8:	487f      	ldr	r0, [pc, #508]	; (80018e8 <MX_GPIO_Init+0x300>)
 80016ea:	f002 fbe3 	bl	8003eb4 <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 80016ee:	2200      	movs	r2, #0
 80016f0:	f64e 2188 	movw	r1, #60040	; 0xea88
 80016f4:	487d      	ldr	r0, [pc, #500]	; (80018ec <MX_GPIO_Init+0x304>)
 80016f6:	f002 fbdd 	bl	8003eb4 <HAL_GPIO_WritePin>
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 80016fa:	2200      	movs	r2, #0
 80016fc:	f64e 610c 	movw	r1, #60940	; 0xee0c
 8001700:	487b      	ldr	r0, [pc, #492]	; (80018f0 <MX_GPIO_Init+0x308>)
 8001702:	f002 fbd7 	bl	8003eb4 <HAL_GPIO_WritePin>
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, GPIO_PIN_RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800170c:	4879      	ldr	r0, [pc, #484]	; (80018f4 <MX_GPIO_Init+0x30c>)
 800170e:	f002 fbd1 	bl	8003eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 8001712:	f248 0387 	movw	r3, #32903	; 0x8087
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
                          |DIGITAL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001718:	2301      	movs	r3, #1
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001728:	4619      	mov	r1, r3
 800172a:	486c      	ldr	r0, [pc, #432]	; (80018dc <MX_GPIO_Init+0x2f4>)
 800172c:	f002 f9fe 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ECO_Pin|BC_DOWN_IN_Pin|DURCHFLUSS_Pin|BUTTON2_Pin
 8001730:	f647 7378 	movw	r3, #32632	; 0x7f78
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
                          |KICKDOWN_Pin|LEERLAUF_Pin|KUPPLUNG_NO_Pin|BREMSE_NC_Pin
                          |BREMSE_NO_Pin|SENSE_SDC_AKKU_Pin|SENSE_SDC_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001736:	2300      	movs	r3, #0
 8001738:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800173e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001742:	4619      	mov	r1, r3
 8001744:	4865      	ldr	r0, [pc, #404]	; (80018dc <MX_GPIO_Init+0x2f4>)
 8001746:	f002 f9f1 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 800174a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001760:	4619      	mov	r1, r3
 8001762:	485f      	ldr	r0, [pc, #380]	; (80018e0 <MX_GPIO_Init+0x2f8>)
 8001764:	f002 f9e2 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001768:	f64d 7347 	movw	r3, #57159	; 0xdf47
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|SD_SW_Pin|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800176e:	2303      	movs	r3, #3
 8001770:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177a:	4619      	mov	r1, r3
 800177c:	4858      	ldr	r0, [pc, #352]	; (80018e0 <MX_GPIO_Init+0x2f8>)
 800177e:	f002 f9d5 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|ECON_Pin|RECUPERATION_Pin;
 8001782:	f640 0303 	movw	r3, #2051	; 0x803
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001788:	2300      	movs	r3, #0
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001794:	4619      	mov	r1, r3
 8001796:	4853      	ldr	r0, [pc, #332]	; (80018e4 <MX_GPIO_Init+0x2fc>)
 8001798:	f002 f9c8 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 800179c:	f24f 033c 	movw	r3, #61500	; 0xf03c
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a2:	2301      	movs	r3, #1
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2300      	movs	r3, #0
 80017ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b2:	4619      	mov	r1, r3
 80017b4:	484b      	ldr	r0, [pc, #300]	; (80018e4 <MX_GPIO_Init+0x2fc>)
 80017b6:	f002 f9b9 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PF10 */
  GPIO_InitStruct.Pin = SPI5_CS_Pin|SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin
 80017ba:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017c0:	2303      	movs	r3, #3
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017cc:	4619      	mov	r1, r3
 80017ce:	4845      	ldr	r0, [pc, #276]	; (80018e4 <MX_GPIO_Init+0x2fc>)
 80017d0:	f002 f9ac 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS2812_Pin;
 80017d4:	2308      	movs	r3, #8
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d8:	2301      	movs	r3, #1
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017e0:	2302      	movs	r3, #2
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e8:	4619      	mov	r1, r3
 80017ea:	483d      	ldr	r0, [pc, #244]	; (80018e0 <MX_GPIO_Init+0x2f8>)
 80017ec:	f002 f99e 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|EMERGENCY_RUN_Pin|HW_WAKE_Pin|OUTA_Pin
 80017f0:	f640 6307 	movw	r3, #3591	; 0xe07
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTB_Pin|BC_UP_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001802:	4619      	mov	r1, r3
 8001804:	483b      	ldr	r0, [pc, #236]	; (80018f4 <MX_GPIO_Init+0x30c>)
 8001806:	f002 f991 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 800180a:	f647 0394 	movw	r3, #30868	; 0x7894
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001810:	2301      	movs	r3, #1
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001820:	4619      	mov	r1, r3
 8001822:	4831      	ldr	r0, [pc, #196]	; (80018e8 <MX_GPIO_Init+0x300>)
 8001824:	f002 f982 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DCDC_INSTRUCTION_Pin|DCDC_FAULT_Pin|ASR_IN1_Pin|GRA1_Pin
 8001828:	f241 13f3 	movw	r3, #4595	; 0x11f3
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GRA2_Pin|GRA3_Pin|GRA4_Pin|BC_RESET_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182e:	2300      	movs	r3, #0
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183a:	4619      	mov	r1, r3
 800183c:	482c      	ldr	r0, [pc, #176]	; (80018f0 <MX_GPIO_Init+0x308>)
 800183e:	f002 f975 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSE_SDC_BTB_Pin|ANLASSER_Pin;
 8001842:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001848:	2300      	movs	r3, #0
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001854:	4619      	mov	r1, r3
 8001856:	4824      	ldr	r0, [pc, #144]	; (80018e8 <MX_GPIO_Init+0x300>)
 8001858:	f002 f968 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KL15_Pin|BAMOCAR_IN2_Pin|BAMOCAR_IN1_Pin|ASR_IN2_Pin;
 800185c:	f241 5310 	movw	r3, #5392	; 0x1510
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001862:	2300      	movs	r3, #0
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800186a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186e:	4619      	mov	r1, r3
 8001870:	481e      	ldr	r0, [pc, #120]	; (80018ec <MX_GPIO_Init+0x304>)
 8001872:	f002 f95b 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 8001876:	f64e 2388 	movw	r3, #60040	; 0xea88
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187c:	2301      	movs	r3, #1
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188c:	4619      	mov	r1, r3
 800188e:	4817      	ldr	r0, [pc, #92]	; (80018ec <MX_GPIO_Init+0x304>)
 8001890:	f002 f94c 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 8001894:	f64e 630c 	movw	r3, #60940	; 0xee0c
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189a:	2301      	movs	r3, #1
 800189c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018aa:	4619      	mov	r1, r3
 80018ac:	4810      	ldr	r0, [pc, #64]	; (80018f0 <MX_GPIO_Init+0x308>)
 80018ae:	f002 f93d 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 80018b2:	2380      	movs	r3, #128	; 0x80
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b6:	2300      	movs	r3, #0
 80018b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c2:	4619      	mov	r1, r3
 80018c4:	4806      	ldr	r0, [pc, #24]	; (80018e0 <MX_GPIO_Init+0x2f8>)
 80018c6:	f002 f931 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RUECKWARNUNG_Pin;
 80018ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d0:	2301      	movs	r3, #1
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	e00f      	b.n	80018f8 <MX_GPIO_Init+0x310>
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40020800 	.word	0x40020800
 80018e4:	40021400 	.word	0x40021400
 80018e8:	40020400 	.word	0x40020400
 80018ec:	40020c00 	.word	0x40020c00
 80018f0:	40021800 	.word	0x40021800
 80018f4:	40020000 	.word	0x40020000
 80018f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2300      	movs	r3, #0
 80018fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RUECKWARNUNG_GPIO_Port, &GPIO_InitStruct);
 80018fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001902:	4619      	mov	r1, r3
 8001904:	480f      	ldr	r0, [pc, #60]	; (8001944 <MX_GPIO_Init+0x35c>)
 8001906:	f002 f911 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_TX_Pin|CAN1_RX_Pin|SD_CMD_Pin;
 800190a:	2307      	movs	r3, #7
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800190e:	2303      	movs	r3, #3
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191a:	4619      	mov	r1, r3
 800191c:	480a      	ldr	r0, [pc, #40]	; (8001948 <MX_GPIO_Init+0x360>)
 800191e:	f002 f905 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CAN2_TX_Pin|CAN2_RX_Pin|I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001922:	f44f 7358 	mov.w	r3, #864	; 0x360
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001928:	2303      	movs	r3, #3
 800192a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001934:	4619      	mov	r1, r3
 8001936:	4805      	ldr	r0, [pc, #20]	; (800194c <MX_GPIO_Init+0x364>)
 8001938:	f002 f8f8 	bl	8003b2c <HAL_GPIO_Init>

}
 800193c:	bf00      	nop
 800193e:	3738      	adds	r7, #56	; 0x38
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40020000 	.word	0x40020000
 8001948:	40020c00 	.word	0x40020c00
 800194c:	40020400 	.word	0x40020400

08001950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001950:	b5b0      	push	{r4, r5, r7, lr}
 8001952:	b0aa      	sub	sp, #168	; 0xa8
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001956:	f000 fc7e 	bl	8002256 <HAL_Init>

  /* USER CODE BEGIN Init */

	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[5], InData[5], status, tmp[4];
	uint16_t count = 0, gas_adc, gas_mean = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001960:	2300      	movs	r3, #0
 8001962:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
  	uint32_t lastcan = 0, lastsendcan = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800196c:	2300      	movs	r3, #0
 800196e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  	// Erstelle Can-Nachrichten
  	CAN_TxHeaderTypeDef TxMessage = {0x123, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8001972:	4bbf      	ldr	r3, [pc, #764]	; (8001c70 <main+0x320>)
 8001974:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8001978:	461d      	mov	r5, r3
 800197a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800197c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800197e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001982:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxOutput = {MOTOR_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 6, DISABLE};
 8001986:	4bbb      	ldr	r3, [pc, #748]	; (8001c74 <main+0x324>)
 8001988:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800198c:	461d      	mov	r5, r3
 800198e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001992:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001996:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxInput = {MOTOR_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 6, DISABLE};
 800199a:	4bb7      	ldr	r3, [pc, #732]	; (8001c78 <main+0x328>)
 800199c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80019a0:	461d      	mov	r5, r3
 80019a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019aa:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxMotor1 = {MOTOR_CAN_DREHZAHL, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 80019ae:	4bb3      	ldr	r3, [pc, #716]	; (8001c7c <main+0x32c>)
 80019b0:	f107 0418 	add.w	r4, r7, #24
 80019b4:	461d      	mov	r5, r3
 80019b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019be:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxBamocar = {BAMOCAR_TX_ID, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 80019c2:	4baf      	ldr	r3, [pc, #700]	; (8001c80 <main+0x330>)
 80019c4:	463c      	mov	r4, r7
 80019c6:	461d      	mov	r5, r3
 80019c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019d0:	e884 0003 	stmia.w	r4, {r0, r1}


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019d4:	f000 f9ee 	bl	8001db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019d8:	f7ff fe06 	bl	80015e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019dc:	f000 fb9e 	bl	800211c <MX_USART2_UART_Init>
  MX_CAN3_Init();
 80019e0:	f7ff fd30 	bl	8001444 <MX_CAN3_Init>
  MX_ADC1_Init();
 80019e4:	f7ff fbe0 	bl	80011a8 <MX_ADC1_Init>
  MX_TIM6_Init();
 80019e8:	f000 fb3c 	bl	8002064 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  	// Start Timer 6 Interrupt
  	HAL_TIM_Base_Start_IT(&htim6);
 80019ec:	48a5      	ldr	r0, [pc, #660]	; (8001c84 <main+0x334>)
 80019ee:	f003 fc3f 	bl	8005270 <HAL_TIM_Base_Start_IT>

  	// Schreibe Resetquelle auf die Konsole
#ifdef DEBUG
	printResetSource(readResetSource());
 80019f2:	f7ff f85b 	bl	8000aac <readResetSource>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff f8a9 	bl	8000b50 <printResetSource>

  	/* Teste serielle Schnittstelle*/
  	#define TEST_STRING_UART	"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
  	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 80019fe:	213a      	movs	r1, #58	; 0x3a
 8001a00:	48a1      	ldr	r0, [pc, #644]	; (8001c88 <main+0x338>)
 8001a02:	f7fe fed7 	bl	80007b4 <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 8001a06:	f7ff f82f 	bl	8000a68 <collectSystemInfo>
#endif

	// Leds Testen
  	testPCB_Leds();
 8001a0a:	f7ff fb73 	bl	80010f4 <testPCB_Leds>

  	// Lese alle Eingaenge
  	readall_inputs();
 8001a0e:	f7ff f971 	bl	8000cf4 <readall_inputs>

  	// Daten fuer TxMassage erstellen
  	for (uint8_t j = 0; j < 8; j++)
 8001a12:	2300      	movs	r3, #0
 8001a14:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8001a18:	e00f      	b.n	8001a3a <main+0xea>
  		TxData[j] = (j + 1);
 8001a1a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001a1e:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8001a22:	3201      	adds	r2, #1
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f803 2c1c 	strb.w	r2, [r3, #-28]
  	for (uint8_t j = 0; j < 8; j++)
 8001a30:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001a34:	3301      	adds	r3, #1
 8001a36:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8001a3a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001a3e:	2b07      	cmp	r3, #7
 8001a40:	d9eb      	bls.n	8001a1a <main+0xca>

  	// Start timer
  	HAL_TIM_Base_Start(&htim6);
 8001a42:	4890      	ldr	r0, [pc, #576]	; (8001c84 <main+0x334>)
 8001a44:	f003 fba4 	bl	8005190 <HAL_TIM_Base_Start>
//  	status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
//	hal_error(status);

  	// Starte While-Schleife
#define MAINWHILE				"\nStarte While Schleife\n"
  	uartTransmit(MAINWHILE, sizeof(MAINWHILE));
 8001a48:	2118      	movs	r1, #24
 8001a4a:	4890      	ldr	r0, [pc, #576]	; (8001c8c <main+0x33c>)
 8001a4c:	f7fe feb2 	bl	80007b4 <uartTransmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 8001a50:	4b8f      	ldr	r3, [pc, #572]	; (8001c90 <main+0x340>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d107      	bne.n	8001a6a <main+0x11a>
		{
			count++;													// Zaehler count hochzaehlen
 8001a5a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001a5e:	3301      	adds	r3, #1
 8001a60:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			millisekunden_flag_1 = 0;									// Setze Millisekunden-Flag zurueck
 8001a64:	4b8a      	ldr	r3, [pc, #552]	; (8001c90 <main+0x340>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
		}

		// Task wird alle 20 Millisekunden ausgefuehrt
		if ((count % 20) == 0)
 8001a6a:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001a6e:	4b89      	ldr	r3, [pc, #548]	; (8001c94 <main+0x344>)
 8001a70:	fba3 1302 	umull	r1, r3, r3, r2
 8001a74:	0919      	lsrs	r1, r3, #4
 8001a76:	460b      	mov	r3, r1
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10e      	bne.n	8001aa4 <main+0x154>
		{
			// Sende Nachricht Motor1
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMotor1, motor1.output, (uint32_t *)CAN_TX_MAILBOX0);
 8001a86:	f107 0118 	add.w	r1, r7, #24
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	4a82      	ldr	r2, [pc, #520]	; (8001c98 <main+0x348>)
 8001a8e:	4883      	ldr	r0, [pc, #524]	; (8001c9c <main+0x34c>)
 8001a90:	f001 faf8 	bl	8003084 <HAL_CAN_AddTxMessage>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			hal_error(status);
 8001a9a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff f8f8 	bl	8000c94 <hal_error>
		if ((count % 50) == 0)
		{
		}

		// Task wird alle 100 Millisekunden ausgefuehrt
		if ((count % 100) == 0)
 8001aa4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001aa8:	4a7d      	ldr	r2, [pc, #500]	; (8001ca0 <main+0x350>)
 8001aaa:	fba2 1203 	umull	r1, r2, r2, r3
 8001aae:	0952      	lsrs	r2, r2, #5
 8001ab0:	2164      	movs	r1, #100	; 0x64
 8001ab2:	fb01 f202 	mul.w	r2, r1, r2
 8001ab6:	1a9b      	subs	r3, r3, r2
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d135      	bne.n	8001b2a <main+0x1da>
		{
			// alle Inputs einlesen
			readall_inputs();
 8001abe:	f7ff f919 	bl	8000cf4 <readall_inputs>

			// Bremse pruefen
//			readBrake();

			// Gaspedal pruefen
			gas_adc = readTrottle();
 8001ac2:	f7ff fb55 	bl	8001170 <readTrottle>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

			// Mittelwert bilden (https://nestedsoftware.com/2018/03/20/calculating-a-moving-average-on-streaming-data-5a7k.22879.html)
			// Mittelwertbildung aus 10 Werten (Weniger die 10 verkleineren, Mehr die 10 vergrößern)
			gas_mean = (gas_mean + ((gas_adc - gas_mean)/10));
 8001acc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8001ad0:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	4a73      	ldr	r2, [pc, #460]	; (8001ca4 <main+0x354>)
 8001ad8:	fb82 1203 	smull	r1, r2, r2, r3
 8001adc:	1092      	asrs	r2, r2, #2
 8001ade:	17db      	asrs	r3, r3, #31
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001ae8:	4413      	add	r3, r2
 8001aea:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4

			// Daten in Bamocarformat umwandeln
			tmp[0] = 0x90;
 8001aee:	2390      	movs	r3, #144	; 0x90
 8001af0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
			tmp[1] = (gas_mean);
 8001af4:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			tmp[2] = ((gas_mean) >> 8);
 8001afe:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001b02:	0a1b      	lsrs	r3, r3, #8
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

			// Drehmoment an Bamocar senden
			status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
 8001b0c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001b10:	4639      	mov	r1, r7
 8001b12:	2301      	movs	r3, #1
 8001b14:	4861      	ldr	r0, [pc, #388]	; (8001c9c <main+0x34c>)
 8001b16:	f001 fab5 	bl	8003084 <HAL_CAN_AddTxMessage>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			hal_error(status);
 8001b20:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff f8b5 	bl	8000c94 <hal_error>
		}

		// Task wird alle 200 Millisekunden ausgefuehrt
		if ((count % 200) == 0)
 8001b2a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001b2e:	4a5c      	ldr	r2, [pc, #368]	; (8001ca0 <main+0x350>)
 8001b30:	fba2 1203 	umull	r1, r2, r2, r3
 8001b34:	0992      	lsrs	r2, r2, #6
 8001b36:	21c8      	movs	r1, #200	; 0xc8
 8001b38:	fb01 f202 	mul.w	r2, r1, r2
 8001b3c:	1a9b      	subs	r3, r3, r2
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d17a      	bne.n	8001c3a <main+0x2ea>
		{
			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 8001b44:	4b58      	ldr	r3, [pc, #352]	; (8001ca8 <main+0x358>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
			OutData[1] = highcurrent_out.high_out;
 8001b4c:	4b57      	ldr	r3, [pc, #348]	; (8001cac <main+0x35c>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
			OutData[2] = (leuchten_out.ledoutput >> 8);
 8001b54:	4b56      	ldr	r3, [pc, #344]	; (8001cb0 <main+0x360>)
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			OutData[3] = leuchten_out.ledoutput;
 8001b62:	4b53      	ldr	r3, [pc, #332]	; (8001cb0 <main+0x360>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			OutData[4] = komfort_out.komfortoutput;
 8001b6c:	4b51      	ldr	r3, [pc, #324]	; (8001cb4 <main+0x364>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
			OutData[5] ++;
 8001b74:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8001b78:	3301      	adds	r3, #1
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX2);
 8001b80:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001b84:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001b88:	2304      	movs	r3, #4
 8001b8a:	4844      	ldr	r0, [pc, #272]	; (8001c9c <main+0x34c>)
 8001b8c:	f001 fa7a 	bl	8003084 <HAL_CAN_AddTxMessage>
 8001b90:	4603      	mov	r3, r0
 8001b92:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			hal_error(status);
 8001b96:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff f87a 	bl	8000c94 <hal_error>

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] ++;
 8001ba0:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
			InData[1] = (system_in.systeminput >> 8);
 8001bac:	4b42      	ldr	r3, [pc, #264]	; (8001cb8 <main+0x368>)
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	0a1b      	lsrs	r3, r3, #8
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
			InData[2] = system_in.systeminput;
 8001bba:	4b3f      	ldr	r3, [pc, #252]	; (8001cb8 <main+0x368>)
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
			InData[3] = sdc_in.sdcinput;
 8001bc4:	4b3d      	ldr	r3, [pc, #244]	; (8001cbc <main+0x36c>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			InData[4] = (komfort_in.komfortinput >> 8);
 8001bcc:	4b3c      	ldr	r3, [pc, #240]	; (8001cc0 <main+0x370>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
			InData[5] = komfort_in.komfortinput;
 8001bda:	4b39      	ldr	r3, [pc, #228]	; (8001cc0 <main+0x370>)
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81

			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX1);
 8001be4:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001be8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001bec:	2302      	movs	r3, #2
 8001bee:	482b      	ldr	r0, [pc, #172]	; (8001c9c <main+0x34c>)
 8001bf0:	f001 fa48 	bl	8003084 <HAL_CAN_AddTxMessage>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			hal_error(status);
 8001bfa:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff f848 	bl	8000c94 <hal_error>

			// Bamocar Fehler auslesen
			tmp[0] = 0x3D;
 8001c04:	233d      	movs	r3, #61	; 0x3d
 8001c06:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
			tmp[1] = 0x8F;
 8001c0a:	238f      	movs	r3, #143	; 0x8f
 8001c0c:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			tmp[2] = 0x00;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

			// Befehl Fehler auslesen an Bamocar senden
			status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
 8001c16:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001c1a:	4639      	mov	r1, r7
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	481f      	ldr	r0, [pc, #124]	; (8001c9c <main+0x34c>)
 8001c20:	f001 fa30 	bl	8003084 <HAL_CAN_AddTxMessage>
 8001c24:	4603      	mov	r3, r0
 8001c26:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			hal_error(status);
 8001c2a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff f830 	bl	8000c94 <hal_error>

			// Variable count auf 0 zuruecksetzen
			count = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
		}

	  	// Task wird alle 5 Millisekunden ausgefuehrt
	  	if (millis() - lastcan >= 5)
 8001c3a:	f7ff fa53 	bl	80010e4 <millis>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	f240 8084 	bls.w	8001d54 <main+0x404>
		{
			// Wenn Nachricht ueber den CAN-Bus empfangen wurden
			if (can_change == 1)
 8001c4c:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <main+0x374>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d17f      	bne.n	8001d54 <main+0x404>
			{
				// Nachricht ID über UART ausgeben
				uartTransmitNumber(RxMessage.StdId, 16);
 8001c54:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <main+0x378>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2110      	movs	r1, #16
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fdbe 	bl	80007dc <uartTransmitNumber>
				uartTransmit("\t", 1);
 8001c60:	2101      	movs	r1, #1
 8001c62:	481a      	ldr	r0, [pc, #104]	; (8001ccc <main+0x37c>)
 8001c64:	f7fe fda6 	bl	80007b4 <uartTransmit>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8001c6e:	e03c      	b.n	8001cea <main+0x39a>
 8001c70:	080066c0 	.word	0x080066c0
 8001c74:	080066d8 	.word	0x080066d8
 8001c78:	080066f0 	.word	0x080066f0
 8001c7c:	08006708 	.word	0x08006708
 8001c80:	08006720 	.word	0x08006720
 8001c84:	20000128 	.word	0x20000128
 8001c88:	08006630 	.word	0x08006630
 8001c8c:	0800666c 	.word	0x0800666c
 8001c90:	20000029 	.word	0x20000029
 8001c94:	cccccccd 	.word	0xcccccccd
 8001c98:	20000044 	.word	0x20000044
 8001c9c:	200000dc 	.word	0x200000dc
 8001ca0:	51eb851f 	.word	0x51eb851f
 8001ca4:	66666667 	.word	0x66666667
 8001ca8:	20000060 	.word	0x20000060
 8001cac:	20000064 	.word	0x20000064
 8001cb0:	20000068 	.word	0x20000068
 8001cb4:	2000005c 	.word	0x2000005c
 8001cb8:	20000050 	.word	0x20000050
 8001cbc:	20000058 	.word	0x20000058
 8001cc0:	20000054 	.word	0x20000054
 8001cc4:	20000028 	.word	0x20000028
 8001cc8:	2000010c 	.word	0x2000010c
 8001ccc:	08006684 	.word	0x08006684
				{
					uartTransmitNumber(RxData[i], 16);
 8001cd0:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8001cd4:	4a2f      	ldr	r2, [pc, #188]	; (8001d94 <main+0x444>)
 8001cd6:	5cd3      	ldrb	r3, [r2, r3]
 8001cd8:	2110      	movs	r1, #16
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fd7e 	bl	80007dc <uartTransmitNumber>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 8001ce0:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8001cea:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 8001cee:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <main+0x448>)
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d3ec      	bcc.n	8001cd0 <main+0x380>
				}
				uartTransmit("\n", 1);
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	4828      	ldr	r0, [pc, #160]	; (8001d9c <main+0x44c>)
 8001cfa:	f7fe fd5b 	bl	80007b4 <uartTransmit>

				// Sortieren der IDs nach Geräten
				switch (RxMessage.StdId)
 8001cfe:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <main+0x448>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f240 1211 	movw	r2, #273	; 0x111
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d00b      	beq.n	8001d22 <main+0x3d2>
 8001d0a:	f240 1281 	movw	r2, #385	; 0x181
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d10c      	bne.n	8001d2c <main+0x3dc>
				{
					case BAMOCAR_RX_ID:
						BAMOCAN_ID(&RxData[0], RxMessage.DLC);
 8001d12:	4b21      	ldr	r3, [pc, #132]	; (8001d98 <main+0x448>)
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	4619      	mov	r1, r3
 8001d1a:	481e      	ldr	r0, [pc, #120]	; (8001d94 <main+0x444>)
 8001d1c:	f7fe fc10 	bl	8000540 <BAMOCAN_ID>
						break;
 8001d20:	e009      	b.n	8001d36 <main+0x3e6>
					case 0x111:
						uartTransmit("CAN-ID Computer config\n", 23);
 8001d22:	2117      	movs	r1, #23
 8001d24:	481e      	ldr	r0, [pc, #120]	; (8001da0 <main+0x450>)
 8001d26:	f7fe fd45 	bl	80007b4 <uartTransmit>
						break;
 8001d2a:	e004      	b.n	8001d36 <main+0x3e6>
					default:
						uartTransmit("CAN-ID nicht verfuegbar\n", 24);
 8001d2c:	2118      	movs	r1, #24
 8001d2e:	481d      	ldr	r0, [pc, #116]	; (8001da4 <main+0x454>)
 8001d30:	f7fe fd40 	bl	80007b4 <uartTransmit>
						break;
 8001d34:	bf00      	nop
				}

				TxData[2] = motor1.output[2];
 8001d36:	4b1c      	ldr	r3, [pc, #112]	; (8001da8 <main+0x458>)
 8001d38:	789b      	ldrb	r3, [r3, #2]
 8001d3a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
				TxData[3] = motor1.output[3];
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <main+0x458>)
 8001d40:	78db      	ldrb	r3, [r3, #3]
 8001d42:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				lastcan = millis();
 8001d46:	f7ff f9cd 	bl	80010e4 <millis>
 8001d4a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
				can_change = 0;
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <main+0x45c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
			}
		}

#ifdef DEBUG
		// Sende CAN Nachricht auf CAN-Bus / Teste CAN-BUS
		if (millis() - lastsendcan >= 993)
 8001d54:	f7ff f9c6 	bl	80010e4 <millis>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 8001d64:	f67f ae74 	bls.w	8001a50 <main+0x100>
		{
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 8001d68:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001d6c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001d70:	2301      	movs	r3, #1
 8001d72:	480f      	ldr	r0, [pc, #60]	; (8001db0 <main+0x460>)
 8001d74:	f001 f986 	bl	8003084 <HAL_CAN_AddTxMessage>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			hal_error(status);
 8001d7e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe ff86 	bl	8000c94 <hal_error>
			lastsendcan = millis();
 8001d88:	f7ff f9ac 	bl	80010e4 <millis>
 8001d8c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
		if (millisekunden_flag_1 == 1)
 8001d90:	e65e      	b.n	8001a50 <main+0x100>
 8001d92:	bf00      	nop
 8001d94:	20000104 	.word	0x20000104
 8001d98:	2000010c 	.word	0x2000010c
 8001d9c:	08006688 	.word	0x08006688
 8001da0:	0800668c 	.word	0x0800668c
 8001da4:	080066a4 	.word	0x080066a4
 8001da8:	20000044 	.word	0x20000044
 8001dac:	20000028 	.word	0x20000028
 8001db0:	200000dc 	.word	0x200000dc

08001db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b0b8      	sub	sp, #224	; 0xe0
 8001db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001dbe:	2234      	movs	r2, #52	; 0x34
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f004 fa30 	bl	8006228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dc8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dd8:	f107 0308 	add.w	r3, r7, #8
 8001ddc:	2290      	movs	r2, #144	; 0x90
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f004 fa21 	bl	8006228 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de6:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <SystemClock_Config+0x120>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	4a3a      	ldr	r2, [pc, #232]	; (8001ed4 <SystemClock_Config+0x120>)
 8001dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df0:	6413      	str	r3, [r2, #64]	; 0x40
 8001df2:	4b38      	ldr	r3, [pc, #224]	; (8001ed4 <SystemClock_Config+0x120>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001dfe:	4b36      	ldr	r3, [pc, #216]	; (8001ed8 <SystemClock_Config+0x124>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e06:	4a34      	ldr	r2, [pc, #208]	; (8001ed8 <SystemClock_Config+0x124>)
 8001e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	4b32      	ldr	r3, [pc, #200]	; (8001ed8 <SystemClock_Config+0x124>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e36:	2319      	movs	r3, #25
 8001e38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001e3c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001e40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e44:	2302      	movs	r3, #2
 8001e46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e50:	2302      	movs	r3, #2
 8001e52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e56:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f002 f894 	bl	8003f88 <HAL_RCC_OscConfig>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001e66:	f000 f867 	bl	8001f38 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e6a:	f002 f83d 	bl	8003ee8 <HAL_PWREx_EnableOverDrive>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001e74:	f000 f860 	bl	8001f38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e78:	230f      	movs	r3, #15
 8001e7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001e84:	2380      	movs	r3, #128	; 0x80
 8001e86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e98:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e9c:	2103      	movs	r1, #3
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f002 fb20 	bl	80044e4 <HAL_RCC_ClockConfig>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001eaa:	f000 f845 	bl	8001f38 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eb6:	f107 0308 	add.w	r3, r7, #8
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f002 fce8 	bl	8004890 <HAL_RCCEx_PeriphCLKConfig>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <SystemClock_Config+0x116>
  {
    Error_Handler();
 8001ec6:	f000 f837 	bl	8001f38 <Error_Handler>
  }
}
 8001eca:	bf00      	nop
 8001ecc:	37e0      	adds	r7, #224	; 0xe0
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40007000 	.word	0x40007000

08001edc <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
// Interrupts
// Can-Interrupt: Nachricht wartet
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
	// Nachricht aus Speicher auslesen
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001ee6:	4a07      	ldr	r2, [pc, #28]	; (8001f04 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001ee8:	2100      	movs	r1, #0
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f001 f9a5 	bl	800323a <HAL_CAN_GetRxMessage>
	can_change = 1;
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000104 	.word	0x20000104
 8001f04:	2000010c 	.word	0x2000010c
 8001f08:	20000028 	.word	0x20000028

08001f0c <HAL_TIM_PeriodElapsedCallback>:

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a06      	ldr	r2, [pc, #24]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d102      	bne.n	8001f22 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	701a      	strb	r2, [r3, #0]
	}
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20000128 	.word	0x20000128
 8001f34:	20000029 	.word	0x20000029

08001f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f3c:	b672      	cpsid	i
}
 8001f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  // Schalte Fehler LED ein
  leuchten_out.RedLed = 1;
 8001f40:	4a09      	ldr	r2, [pc, #36]	; (8001f68 <Error_Handler+0x30>)
 8001f42:	7853      	ldrb	r3, [r2, #1]
 8001f44:	f043 0308 	orr.w	r3, r3, #8
 8001f48:	7053      	strb	r3, [r2, #1]
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <Error_Handler+0x30>)
 8001f4c:	785b      	ldrb	r3, [r3, #1]
 8001f4e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	461a      	mov	r2, r3
 8001f56:	2104      	movs	r1, #4
 8001f58:	4804      	ldr	r0, [pc, #16]	; (8001f6c <Error_Handler+0x34>)
 8001f5a:	f001 ffab 	bl	8003eb4 <HAL_GPIO_WritePin>

  // Sende Nachricht auf Uart-Interface
#ifdef DEBUG
  #define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
  uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 8001f5e:	2122      	movs	r1, #34	; 0x22
 8001f60:	4803      	ldr	r0, [pc, #12]	; (8001f70 <Error_Handler+0x38>)
 8001f62:	f7fe fc27 	bl	80007b4 <uartTransmit>
#endif
  // Beginne Endlosschleife nachdem Fehler aufgetreten ist
  while (1)
 8001f66:	e7fe      	b.n	8001f66 <Error_Handler+0x2e>
 8001f68:	20000068 	.word	0x20000068
 8001f6c:	40020400 	.word	0x40020400
 8001f70:	08006738 	.word	0x08006738

08001f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <HAL_MspInit+0x44>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	4a0e      	ldr	r2, [pc, #56]	; (8001fb8 <HAL_MspInit+0x44>)
 8001f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f84:	6413      	str	r3, [r2, #64]	; 0x40
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <HAL_MspInit+0x44>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <HAL_MspInit+0x44>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	4a08      	ldr	r2, [pc, #32]	; (8001fb8 <HAL_MspInit+0x44>)
 8001f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_MspInit+0x44>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40023800 	.word	0x40023800

08001fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fc0:	e7fe      	b.n	8001fc0 <NMI_Handler+0x4>

08001fc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc6:	e7fe      	b.n	8001fc6 <HardFault_Handler+0x4>

08001fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fcc:	e7fe      	b.n	8001fcc <MemManage_Handler+0x4>

08001fce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd2:	e7fe      	b.n	8001fd2 <BusFault_Handler+0x4>

08001fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <UsageFault_Handler+0x4>

08001fda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002008:	f000 f962 	bl	80022d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}

08002010 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002014:	4802      	ldr	r0, [pc, #8]	; (8002020 <TIM6_DAC_IRQHandler+0x10>)
 8002016:	f003 f9a3 	bl	8005360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000128 	.word	0x20000128

08002024 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8002028:	4802      	ldr	r0, [pc, #8]	; (8002034 <CAN3_RX0_IRQHandler+0x10>)
 800202a:	f001 fa3e 	bl	80034aa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200000dc 	.word	0x200000dc

08002038 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <SystemInit+0x28>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002042:	4a07      	ldr	r2, [pc, #28]	; (8002060 <SystemInit+0x28>)
 8002044:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002048:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800204c:	4b04      	ldr	r3, [pc, #16]	; (8002060 <SystemInit+0x28>)
 800204e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002052:	609a      	str	r2, [r3, #8]
#endif
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002074:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <MX_TIM6_Init+0x64>)
 8002076:	4a15      	ldr	r2, [pc, #84]	; (80020cc <MX_TIM6_Init+0x68>)
 8002078:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2;
 800207a:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <MX_TIM6_Init+0x64>)
 800207c:	2202      	movs	r2, #2
 800207e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <MX_TIM6_Init+0x64>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 21600;
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <MX_TIM6_Init+0x64>)
 8002088:	f245 4260 	movw	r2, #21600	; 0x5460
 800208c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <MX_TIM6_Init+0x64>)
 8002090:	2280      	movs	r2, #128	; 0x80
 8002092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002094:	480c      	ldr	r0, [pc, #48]	; (80020c8 <MX_TIM6_Init+0x64>)
 8002096:	f003 f823 	bl	80050e0 <HAL_TIM_Base_Init>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80020a0:	f7ff ff4a 	bl	8001f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a4:	2300      	movs	r3, #0
 80020a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80020ac:	1d3b      	adds	r3, r7, #4
 80020ae:	4619      	mov	r1, r3
 80020b0:	4805      	ldr	r0, [pc, #20]	; (80020c8 <MX_TIM6_Init+0x64>)
 80020b2:	f003 fb3d 	bl	8005730 <HAL_TIMEx_MasterConfigSynchronization>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80020bc:	f7ff ff3c 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20000128 	.word	0x20000128
 80020cc:	40001000 	.word	0x40001000

080020d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0d      	ldr	r2, [pc, #52]	; (8002114 <HAL_TIM_Base_MspInit+0x44>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d113      	bne.n	800210a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020e2:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <HAL_TIM_Base_MspInit+0x48>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a0c      	ldr	r2, [pc, #48]	; (8002118 <HAL_TIM_Base_MspInit+0x48>)
 80020e8:	f043 0310 	orr.w	r3, r3, #16
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <HAL_TIM_Base_MspInit+0x48>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	2036      	movs	r0, #54	; 0x36
 8002100:	f001 fcdd 	bl	8003abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002104:	2036      	movs	r0, #54	; 0x36
 8002106:	f001 fcf6 	bl	8003af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40001000 	.word	0x40001000
 8002118:	40023800 	.word	0x40023800

0800211c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002120:	4b14      	ldr	r3, [pc, #80]	; (8002174 <MX_USART2_UART_Init+0x58>)
 8002122:	4a15      	ldr	r2, [pc, #84]	; (8002178 <MX_USART2_UART_Init+0x5c>)
 8002124:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <MX_USART2_UART_Init+0x58>)
 8002128:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800212c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <MX_USART2_UART_Init+0x58>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002134:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <MX_USART2_UART_Init+0x58>)
 8002136:	2200      	movs	r2, #0
 8002138:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800213a:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <MX_USART2_UART_Init+0x58>)
 800213c:	2200      	movs	r2, #0
 800213e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <MX_USART2_UART_Init+0x58>)
 8002142:	220c      	movs	r2, #12
 8002144:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002146:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <MX_USART2_UART_Init+0x58>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <MX_USART2_UART_Init+0x58>)
 800214e:	2200      	movs	r2, #0
 8002150:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002152:	4b08      	ldr	r3, [pc, #32]	; (8002174 <MX_USART2_UART_Init+0x58>)
 8002154:	2200      	movs	r2, #0
 8002156:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <MX_USART2_UART_Init+0x58>)
 800215a:	2200      	movs	r2, #0
 800215c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800215e:	4805      	ldr	r0, [pc, #20]	; (8002174 <MX_USART2_UART_Init+0x58>)
 8002160:	f003 fb92 	bl	8005888 <HAL_UART_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800216a:	f7ff fee5 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000174 	.word	0x20000174
 8002178:	40004400 	.word	0x40004400

0800217c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08a      	sub	sp, #40	; 0x28
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a17      	ldr	r2, [pc, #92]	; (80021f8 <HAL_UART_MspInit+0x7c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d127      	bne.n	80021ee <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800219e:	4b17      	ldr	r3, [pc, #92]	; (80021fc <HAL_UART_MspInit+0x80>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	4a16      	ldr	r2, [pc, #88]	; (80021fc <HAL_UART_MspInit+0x80>)
 80021a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a8:	6413      	str	r3, [r2, #64]	; 0x40
 80021aa:	4b14      	ldr	r3, [pc, #80]	; (80021fc <HAL_UART_MspInit+0x80>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021b6:	4b11      	ldr	r3, [pc, #68]	; (80021fc <HAL_UART_MspInit+0x80>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a10      	ldr	r2, [pc, #64]	; (80021fc <HAL_UART_MspInit+0x80>)
 80021bc:	f043 0308 	orr.w	r3, r3, #8
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <HAL_UART_MspInit+0x80>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART2TX_Pin|DEBUG_UART2RX_Pin;
 80021ce:	2360      	movs	r3, #96	; 0x60
 80021d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d2:	2302      	movs	r3, #2
 80021d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021da:	2303      	movs	r3, #3
 80021dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021de:	2307      	movs	r3, #7
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021e2:	f107 0314 	add.w	r3, r7, #20
 80021e6:	4619      	mov	r1, r3
 80021e8:	4805      	ldr	r0, [pc, #20]	; (8002200 <HAL_UART_MspInit+0x84>)
 80021ea:	f001 fc9f 	bl	8003b2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80021ee:	bf00      	nop
 80021f0:	3728      	adds	r7, #40	; 0x28
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40004400 	.word	0x40004400
 80021fc:	40023800 	.word	0x40023800
 8002200:	40020c00 	.word	0x40020c00

08002204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800223c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002208:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800220a:	e003      	b.n	8002214 <LoopCopyDataInit>

0800220c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800220e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002210:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002212:	3104      	adds	r1, #4

08002214 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002214:	480b      	ldr	r0, [pc, #44]	; (8002244 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002216:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002218:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800221a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800221c:	d3f6      	bcc.n	800220c <CopyDataInit>
  ldr  r2, =_sbss
 800221e:	4a0b      	ldr	r2, [pc, #44]	; (800224c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002220:	e002      	b.n	8002228 <LoopFillZerobss>

08002222 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002222:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002224:	f842 3b04 	str.w	r3, [r2], #4

08002228 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800222a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800222c:	d3f9      	bcc.n	8002222 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800222e:	f7ff ff03 	bl	8002038 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002232:	f003 ffd5 	bl	80061e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002236:	f7ff fb8b 	bl	8001950 <main>
  bx  lr    
 800223a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800223c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002240:	080067ac 	.word	0x080067ac
  ldr  r0, =_sdata
 8002244:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002248:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800224c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002250:	200001fc 	.word	0x200001fc

08002254 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002254:	e7fe      	b.n	8002254 <ADC_IRQHandler>

08002256 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800225a:	2003      	movs	r0, #3
 800225c:	f001 fc24 	bl	8003aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002260:	2000      	movs	r0, #0
 8002262:	f000 f805 	bl	8002270 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002266:	f7ff fe85 	bl	8001f74 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002278:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <HAL_InitTick+0x54>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_InitTick+0x58>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	4619      	mov	r1, r3
 8002282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002286:	fbb3 f3f1 	udiv	r3, r3, r1
 800228a:	fbb2 f3f3 	udiv	r3, r2, r3
 800228e:	4618      	mov	r0, r3
 8002290:	f001 fc3f 	bl	8003b12 <HAL_SYSTICK_Config>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e00e      	b.n	80022bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b0f      	cmp	r3, #15
 80022a2:	d80a      	bhi.n	80022ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a4:	2200      	movs	r2, #0
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ac:	f001 fc07 	bl	8003abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b0:	4a06      	ldr	r2, [pc, #24]	; (80022cc <HAL_InitTick+0x5c>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e000      	b.n	80022bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000000 	.word	0x20000000
 80022c8:	20000008 	.word	0x20000008
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_IncTick+0x20>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_IncTick+0x24>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <HAL_IncTick+0x24>)
 80022e2:	6013      	str	r3, [r2, #0]
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	20000008 	.word	0x20000008
 80022f4:	200001f8 	.word	0x200001f8

080022f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return uwTick;
 80022fc:	4b03      	ldr	r3, [pc, #12]	; (800230c <HAL_GetTick+0x14>)
 80022fe:	681b      	ldr	r3, [r3, #0]
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	200001f8 	.word	0x200001f8

08002310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002318:	f7ff ffee 	bl	80022f8 <HAL_GetTick>
 800231c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d005      	beq.n	8002336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <HAL_Delay+0x44>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4413      	add	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002336:	bf00      	nop
 8002338:	f7ff ffde 	bl	80022f8 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	429a      	cmp	r2, r3
 8002346:	d8f7      	bhi.n	8002338 <HAL_Delay+0x28>
  {
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000008 	.word	0x20000008

08002358 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
 return __STM32F7xx_HAL_VERSION;
 800235c:	4b02      	ldr	r3, [pc, #8]	; (8002368 <HAL_GetHalVersion+0x10>)
}
 800235e:	4618      	mov	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	01020900 	.word	0x01020900

0800236c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <HAL_GetREVID+0x14>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	0c1b      	lsrs	r3, r3, #16
}
 8002376:	4618      	mov	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	e0042000 	.word	0xe0042000

08002384 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <HAL_GetDEVID+0x18>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e0042000 	.word	0xe0042000

080023a0 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 80023a4:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <HAL_GetUIDw0+0x14>)
 80023a6:	681b      	ldr	r3, [r3, #0]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	1ff0f420 	.word	0x1ff0f420

080023b8 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80023bc:	4b03      	ldr	r3, [pc, #12]	; (80023cc <HAL_GetUIDw1+0x14>)
 80023be:	681b      	ldr	r3, [r3, #0]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	1ff0f424 	.word	0x1ff0f424

080023d0 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <HAL_GetUIDw2+0x14>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	1ff0f428 	.word	0x1ff0f428

080023e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e031      	b.n	8002462 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	2b00      	cmp	r3, #0
 8002404:	d109      	bne.n	800241a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7fe ffa8 	bl	800135c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f003 0310 	and.w	r3, r3, #16
 8002422:	2b00      	cmp	r3, #0
 8002424:	d116      	bne.n	8002454 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <HAL_ADC_Init+0x84>)
 800242c:	4013      	ands	r3, r2
 800242e:	f043 0202 	orr.w	r2, r3, #2
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 fafe 	bl	8002a38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f023 0303 	bic.w	r3, r3, #3
 800244a:	f043 0201 	orr.w	r2, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	641a      	str	r2, [r3, #64]	; 0x40
 8002452:	e001      	b.n	8002458 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002460:	7bfb      	ldrb	r3, [r7, #15]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	ffffeefd 	.word	0xffffeefd

08002470 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_ADC_Start+0x1a>
 8002486:	2302      	movs	r3, #2
 8002488:	e0ad      	b.n	80025e6 <HAL_ADC_Start+0x176>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b01      	cmp	r3, #1
 800249e:	d018      	beq.n	80024d2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80024b0:	4b50      	ldr	r3, [pc, #320]	; (80025f4 <HAL_ADC_Start+0x184>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a50      	ldr	r2, [pc, #320]	; (80025f8 <HAL_ADC_Start+0x188>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	0c9a      	lsrs	r2, r3, #18
 80024bc:	4613      	mov	r3, r2
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	4413      	add	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80024c4:	e002      	b.n	80024cc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f9      	bne.n	80024c6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d175      	bne.n	80025cc <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024e4:	4b45      	ldr	r3, [pc, #276]	; (80025fc <HAL_ADC_Start+0x18c>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d007      	beq.n	800250e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002506:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251a:	d106      	bne.n	800252a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002520:	f023 0206 	bic.w	r2, r3, #6
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	645a      	str	r2, [r3, #68]	; 0x44
 8002528:	e002      	b.n	8002530 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002540:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002542:	4b2f      	ldr	r3, [pc, #188]	; (8002600 <HAL_ADC_Start+0x190>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10f      	bne.n	800256e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d143      	bne.n	80025e4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	e03a      	b.n	80025e4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a24      	ldr	r2, [pc, #144]	; (8002604 <HAL_ADC_Start+0x194>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d10e      	bne.n	8002596 <HAL_ADC_Start+0x126>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d107      	bne.n	8002596 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002594:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002596:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <HAL_ADC_Start+0x190>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d120      	bne.n	80025e4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a18      	ldr	r2, [pc, #96]	; (8002608 <HAL_ADC_Start+0x198>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d11b      	bne.n	80025e4 <HAL_ADC_Start+0x174>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d114      	bne.n	80025e4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	e00b      	b.n	80025e4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	f043 0210 	orr.w	r2, r3, #16
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025dc:	f043 0201 	orr.w	r2, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	20000000 	.word	0x20000000
 80025f8:	431bde83 	.word	0x431bde83
 80025fc:	fffff8fe 	.word	0xfffff8fe
 8002600:	40012300 	.word	0x40012300
 8002604:	40012000 	.word	0x40012000
 8002608:	40012200 	.word	0x40012200

0800260c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_ADC_Stop+0x16>
 800261e:	2302      	movs	r3, #2
 8002620:	e01f      	b.n	8002662 <HAL_ADC_Stop+0x56>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0201 	bic.w	r2, r2, #1
 8002638:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d107      	bne.n	8002658 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800264c:	4b08      	ldr	r3, [pc, #32]	; (8002670 <HAL_ADC_Stop+0x64>)
 800264e:	4013      	ands	r3, r2
 8002650:	f043 0201 	orr.w	r2, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	ffffeefe 	.word	0xffffeefe

08002674 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002690:	d113      	bne.n	80026ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800269c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026a0:	d10b      	bne.n	80026ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f043 0220 	orr.w	r2, r3, #32
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e063      	b.n	8002782 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80026ba:	f7ff fe1d 	bl	80022f8 <HAL_GetTick>
 80026be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026c0:	e021      	b.n	8002706 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c8:	d01d      	beq.n	8002706 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d007      	beq.n	80026e0 <HAL_ADC_PollForConversion+0x6c>
 80026d0:	f7ff fe12 	bl	80022f8 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d212      	bcs.n	8002706 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d00b      	beq.n	8002706 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f043 0204 	orr.w	r2, r3, #4
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e03d      	b.n	8002782 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b02      	cmp	r3, #2
 8002712:	d1d6      	bne.n	80026c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0212 	mvn.w	r2, #18
 800271c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d123      	bne.n	8002780 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800273c:	2b00      	cmp	r3, #0
 800273e:	d11f      	bne.n	8002780 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002746:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800274a:	2b00      	cmp	r3, #0
 800274c:	d006      	beq.n	800275c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002758:	2b00      	cmp	r3, #0
 800275a:	d111      	bne.n	8002780 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d105      	bne.n	8002780 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	f043 0201 	orr.w	r2, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x1c>
 80027bc:	2302      	movs	r3, #2
 80027be:	e12a      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x272>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b09      	cmp	r3, #9
 80027ce:	d93a      	bls.n	8002846 <HAL_ADC_ConfigChannel+0xa2>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027d8:	d035      	beq.n	8002846 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68d9      	ldr	r1, [r3, #12]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	4613      	mov	r3, r2
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	4413      	add	r3, r2
 80027ee:	3b1e      	subs	r3, #30
 80027f0:	2207      	movs	r2, #7
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43da      	mvns	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	400a      	ands	r2, r1
 80027fe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a87      	ldr	r2, [pc, #540]	; (8002a24 <HAL_ADC_ConfigChannel+0x280>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d10a      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68d9      	ldr	r1, [r3, #12]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	061a      	lsls	r2, r3, #24
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800281e:	e035      	b.n	800288c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68d9      	ldr	r1, [r3, #12]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	b29b      	uxth	r3, r3
 8002830:	4618      	mov	r0, r3
 8002832:	4603      	mov	r3, r0
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	4403      	add	r3, r0
 8002838:	3b1e      	subs	r3, #30
 800283a:	409a      	lsls	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002844:	e022      	b.n	800288c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6919      	ldr	r1, [r3, #16]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	b29b      	uxth	r3, r3
 8002852:	461a      	mov	r2, r3
 8002854:	4613      	mov	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	2207      	movs	r2, #7
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43da      	mvns	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	400a      	ands	r2, r1
 8002868:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6919      	ldr	r1, [r3, #16]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	b29b      	uxth	r3, r3
 800287a:	4618      	mov	r0, r3
 800287c:	4603      	mov	r3, r0
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	4403      	add	r3, r0
 8002882:	409a      	lsls	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b06      	cmp	r3, #6
 8002892:	d824      	bhi.n	80028de <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	3b05      	subs	r3, #5
 80028a6:	221f      	movs	r2, #31
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43da      	mvns	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	400a      	ands	r2, r1
 80028b4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	4618      	mov	r0, r3
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	3b05      	subs	r3, #5
 80028d0:	fa00 f203 	lsl.w	r2, r0, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	635a      	str	r2, [r3, #52]	; 0x34
 80028dc:	e04c      	b.n	8002978 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b0c      	cmp	r3, #12
 80028e4:	d824      	bhi.n	8002930 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	3b23      	subs	r3, #35	; 0x23
 80028f8:	221f      	movs	r2, #31
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43da      	mvns	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	400a      	ands	r2, r1
 8002906:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	b29b      	uxth	r3, r3
 8002914:	4618      	mov	r0, r3
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	3b23      	subs	r3, #35	; 0x23
 8002922:	fa00 f203 	lsl.w	r2, r0, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	631a      	str	r2, [r3, #48]	; 0x30
 800292e:	e023      	b.n	8002978 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	3b41      	subs	r3, #65	; 0x41
 8002942:	221f      	movs	r2, #31
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43da      	mvns	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	400a      	ands	r2, r1
 8002950:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	b29b      	uxth	r3, r3
 800295e:	4618      	mov	r0, r3
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	3b41      	subs	r3, #65	; 0x41
 800296c:	fa00 f203 	lsl.w	r2, r0, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a2a      	ldr	r2, [pc, #168]	; (8002a28 <HAL_ADC_ConfigChannel+0x284>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d10a      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x1f4>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800298a:	d105      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800298c:	4b27      	ldr	r3, [pc, #156]	; (8002a2c <HAL_ADC_ConfigChannel+0x288>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4a26      	ldr	r2, [pc, #152]	; (8002a2c <HAL_ADC_ConfigChannel+0x288>)
 8002992:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002996:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a22      	ldr	r2, [pc, #136]	; (8002a28 <HAL_ADC_ConfigChannel+0x284>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d109      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x212>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b12      	cmp	r3, #18
 80029a8:	d105      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80029aa:	4b20      	ldr	r3, [pc, #128]	; (8002a2c <HAL_ADC_ConfigChannel+0x288>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4a1f      	ldr	r2, [pc, #124]	; (8002a2c <HAL_ADC_ConfigChannel+0x288>)
 80029b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029b4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a1b      	ldr	r2, [pc, #108]	; (8002a28 <HAL_ADC_ConfigChannel+0x284>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d125      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x268>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a17      	ldr	r2, [pc, #92]	; (8002a24 <HAL_ADC_ConfigChannel+0x280>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d003      	beq.n	80029d2 <HAL_ADC_ConfigChannel+0x22e>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b11      	cmp	r3, #17
 80029d0:	d11c      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80029d2:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <HAL_ADC_ConfigChannel+0x288>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4a15      	ldr	r2, [pc, #84]	; (8002a2c <HAL_ADC_ConfigChannel+0x288>)
 80029d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029dc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a10      	ldr	r2, [pc, #64]	; (8002a24 <HAL_ADC_ConfigChannel+0x280>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d111      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80029e8:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <HAL_ADC_ConfigChannel+0x28c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a11      	ldr	r2, [pc, #68]	; (8002a34 <HAL_ADC_ConfigChannel+0x290>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	0c9a      	lsrs	r2, r3, #18
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029fe:	e002      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f9      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	10000012 	.word	0x10000012
 8002a28:	40012000 	.word	0x40012000
 8002a2c:	40012300 	.word	0x40012300
 8002a30:	20000000 	.word	0x20000000
 8002a34:	431bde83 	.word	0x431bde83

08002a38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002a40:	4b78      	ldr	r3, [pc, #480]	; (8002c24 <ADC_Init+0x1ec>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4a77      	ldr	r2, [pc, #476]	; (8002c24 <ADC_Init+0x1ec>)
 8002a46:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002a4a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002a4c:	4b75      	ldr	r3, [pc, #468]	; (8002c24 <ADC_Init+0x1ec>)
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4973      	ldr	r1, [pc, #460]	; (8002c24 <ADC_Init+0x1ec>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	021a      	lsls	r2, r3, #8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6859      	ldr	r1, [r3, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6899      	ldr	r1, [r3, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac6:	4a58      	ldr	r2, [pc, #352]	; (8002c28 <ADC_Init+0x1f0>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d022      	beq.n	8002b12 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ada:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6899      	ldr	r1, [r3, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002afc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6899      	ldr	r1, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	e00f      	b.n	8002b32 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0202 	bic.w	r2, r2, #2
 8002b40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6899      	ldr	r1, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	005a      	lsls	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d01b      	beq.n	8002b98 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6859      	ldr	r1, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	035a      	lsls	r2, r3, #13
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	e007      	b.n	8002ba8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ba6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	051a      	lsls	r2, r3, #20
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6899      	ldr	r1, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bea:	025a      	lsls	r2, r3, #9
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6899      	ldr	r1, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	029a      	lsls	r2, r3, #10
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	609a      	str	r2, [r3, #8]
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	40012300 	.word	0x40012300
 8002c28:	0f000001 	.word	0x0f000001

08002c2c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e0ed      	b.n	8002e1a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d102      	bne.n	8002c50 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7fe fc68 	bl	8001520 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0202 	bic.w	r2, r2, #2
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c60:	f7ff fb4a 	bl	80022f8 <HAL_GetTick>
 8002c64:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c66:	e012      	b.n	8002c8e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c68:	f7ff fb46 	bl	80022f8 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b0a      	cmp	r3, #10
 8002c74:	d90b      	bls.n	8002c8e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2205      	movs	r2, #5
 8002c86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e0c5      	b.n	8002e1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1e5      	bne.n	8002c68 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0201 	orr.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cac:	f7ff fb24 	bl	80022f8 <HAL_GetTick>
 8002cb0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002cb2:	e012      	b.n	8002cda <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cb4:	f7ff fb20 	bl	80022f8 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b0a      	cmp	r3, #10
 8002cc0:	d90b      	bls.n	8002cda <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2205      	movs	r2, #5
 8002cd2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e09f      	b.n	8002e1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0e5      	beq.n	8002cb4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	7e1b      	ldrb	r3, [r3, #24]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d108      	bne.n	8002d02 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	e007      	b.n	8002d12 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	7e5b      	ldrb	r3, [r3, #25]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d108      	bne.n	8002d2c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	e007      	b.n	8002d3c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	7e9b      	ldrb	r3, [r3, #26]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d108      	bne.n	8002d56 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0220 	orr.w	r2, r2, #32
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	e007      	b.n	8002d66 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0220 	bic.w	r2, r2, #32
 8002d64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	7edb      	ldrb	r3, [r3, #27]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d108      	bne.n	8002d80 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0210 	bic.w	r2, r2, #16
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	e007      	b.n	8002d90 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0210 	orr.w	r2, r2, #16
 8002d8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	7f1b      	ldrb	r3, [r3, #28]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d108      	bne.n	8002daa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0208 	orr.w	r2, r2, #8
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	e007      	b.n	8002dba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0208 	bic.w	r2, r2, #8
 8002db8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	7f5b      	ldrb	r3, [r3, #29]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d108      	bne.n	8002dd4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0204 	orr.w	r2, r2, #4
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	e007      	b.n	8002de4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0204 	bic.w	r2, r2, #4
 8002de2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	ea42 0103 	orr.w	r1, r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	1e5a      	subs	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e3a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002e3c:	7cfb      	ldrb	r3, [r7, #19]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d003      	beq.n	8002e4a <HAL_CAN_ConfigFilter+0x26>
 8002e42:	7cfb      	ldrb	r3, [r7, #19]
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	f040 80c7 	bne.w	8002fd8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a69      	ldr	r2, [pc, #420]	; (8002ff4 <HAL_CAN_ConfigFilter+0x1d0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d001      	beq.n	8002e58 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002e54:	4b68      	ldr	r3, [pc, #416]	; (8002ff8 <HAL_CAN_ConfigFilter+0x1d4>)
 8002e56:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e5e:	f043 0201 	orr.w	r2, r3, #1
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	4a63      	ldr	r2, [pc, #396]	; (8002ff8 <HAL_CAN_ConfigFilter+0x1d4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d111      	bne.n	8002e94 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e76:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	021b      	lsls	r3, r3, #8
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	f003 031f 	and.w	r3, r3, #31
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	401a      	ands	r2, r3
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d123      	bne.n	8002f06 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	401a      	ands	r2, r3
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ee0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	3248      	adds	r2, #72	; 0x48
 8002ee6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002efa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002efc:	6979      	ldr	r1, [r7, #20]
 8002efe:	3348      	adds	r3, #72	; 0x48
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	440b      	add	r3, r1
 8002f04:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d122      	bne.n	8002f54 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f2e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	3248      	adds	r2, #72	; 0x48
 8002f34:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f48:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f4a:	6979      	ldr	r1, [r7, #20]
 8002f4c:	3348      	adds	r3, #72	; 0x48
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	440b      	add	r3, r1
 8002f52:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d109      	bne.n	8002f70 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	43db      	mvns	r3, r3
 8002f66:	401a      	ands	r2, r3
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002f6e:	e007      	b.n	8002f80 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d109      	bne.n	8002f9c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	43db      	mvns	r3, r3
 8002f92:	401a      	ands	r2, r3
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002f9a:	e007      	b.n	8002fac <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d107      	bne.n	8002fc4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002fca:	f023 0201 	bic.w	r2, r3, #1
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e006      	b.n	8002fe6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
  }
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	371c      	adds	r7, #28
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	40003400 	.word	0x40003400
 8002ff8:	40006400 	.word	0x40006400

08002ffc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3020 	ldrb.w	r3, [r3, #32]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b01      	cmp	r3, #1
 800300e:	d12e      	bne.n	800306e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0201 	bic.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003028:	f7ff f966 	bl	80022f8 <HAL_GetTick>
 800302c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800302e:	e012      	b.n	8003056 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003030:	f7ff f962 	bl	80022f8 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b0a      	cmp	r3, #10
 800303c:	d90b      	bls.n	8003056 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2205      	movs	r2, #5
 800304e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e012      	b.n	800307c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1e5      	bne.n	8003030 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	e006      	b.n	800307c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
  }
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003084:	b480      	push	{r7}
 8003086:	b089      	sub	sp, #36	; 0x24
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003098:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80030a2:	7ffb      	ldrb	r3, [r7, #31]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d003      	beq.n	80030b0 <HAL_CAN_AddTxMessage+0x2c>
 80030a8:	7ffb      	ldrb	r3, [r7, #31]
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	f040 80b8 	bne.w	8003220 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10a      	bne.n	80030d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d105      	bne.n	80030d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 80a0 	beq.w	8003210 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	0e1b      	lsrs	r3, r3, #24
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d907      	bls.n	80030f0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e09e      	b.n	800322e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80030f0:	2201      	movs	r2, #1
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	409a      	lsls	r2, r3
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10d      	bne.n	800311e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800310c:	68f9      	ldr	r1, [r7, #12]
 800310e:	6809      	ldr	r1, [r1, #0]
 8003110:	431a      	orrs	r2, r3
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	3318      	adds	r3, #24
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	440b      	add	r3, r1
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	e00f      	b.n	800313e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003128:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800312e:	68f9      	ldr	r1, [r7, #12]
 8003130:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003132:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	3318      	adds	r3, #24
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	440b      	add	r3, r1
 800313c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6819      	ldr	r1, [r3, #0]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	3318      	adds	r3, #24
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	440b      	add	r3, r1
 800314e:	3304      	adds	r3, #4
 8003150:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	7d1b      	ldrb	r3, [r3, #20]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d111      	bne.n	800317e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	3318      	adds	r3, #24
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	4413      	add	r3, r2
 8003166:	3304      	adds	r3, #4
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	6811      	ldr	r1, [r2, #0]
 800316e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	3318      	adds	r3, #24
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	440b      	add	r3, r1
 800317a:	3304      	adds	r3, #4
 800317c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3307      	adds	r3, #7
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	061a      	lsls	r2, r3, #24
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3306      	adds	r3, #6
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	041b      	lsls	r3, r3, #16
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3305      	adds	r3, #5
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	4313      	orrs	r3, r2
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	3204      	adds	r2, #4
 800319e:	7812      	ldrb	r2, [r2, #0]
 80031a0:	4610      	mov	r0, r2
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	6811      	ldr	r1, [r2, #0]
 80031a6:	ea43 0200 	orr.w	r2, r3, r0
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	440b      	add	r3, r1
 80031b0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80031b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3303      	adds	r3, #3
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	061a      	lsls	r2, r3, #24
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3302      	adds	r3, #2
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	041b      	lsls	r3, r3, #16
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3301      	adds	r3, #1
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	4313      	orrs	r3, r2
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	7812      	ldrb	r2, [r2, #0]
 80031d6:	4610      	mov	r0, r2
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	6811      	ldr	r1, [r2, #0]
 80031dc:	ea43 0200 	orr.w	r2, r3, r0
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	440b      	add	r3, r1
 80031e6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80031ea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	3318      	adds	r3, #24
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	4413      	add	r3, r2
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	6811      	ldr	r1, [r2, #0]
 80031fe:	f043 0201 	orr.w	r2, r3, #1
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	3318      	adds	r3, #24
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	440b      	add	r3, r1
 800320a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	e00e      	b.n	800322e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e006      	b.n	800322e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
  }
}
 800322e:	4618      	mov	r0, r3
 8003230:	3724      	adds	r7, #36	; 0x24
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800323a:	b480      	push	{r7}
 800323c:	b087      	sub	sp, #28
 800323e:	af00      	add	r7, sp, #0
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	607a      	str	r2, [r7, #4]
 8003246:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800324e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003250:	7dfb      	ldrb	r3, [r7, #23]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d003      	beq.n	800325e <HAL_CAN_GetRxMessage+0x24>
 8003256:	7dfb      	ldrb	r3, [r7, #23]
 8003258:	2b02      	cmp	r3, #2
 800325a:	f040 80f3 	bne.w	8003444 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10e      	bne.n	8003282 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d116      	bne.n	80032a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e0e7      	b.n	8003452 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d107      	bne.n	80032a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e0d8      	b.n	8003452 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	331b      	adds	r3, #27
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	4413      	add	r3, r2
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0204 	and.w	r2, r3, #4
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10c      	bne.n	80032d8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	331b      	adds	r3, #27
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	4413      	add	r3, r2
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	0d5b      	lsrs	r3, r3, #21
 80032ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	e00b      	b.n	80032f0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	331b      	adds	r3, #27
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	4413      	add	r3, r2
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	08db      	lsrs	r3, r3, #3
 80032e8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	331b      	adds	r3, #27
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	4413      	add	r3, r2
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0202 	and.w	r2, r3, #2
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	331b      	adds	r3, #27
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	4413      	add	r3, r2
 8003312:	3304      	adds	r3, #4
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 020f 	and.w	r2, r3, #15
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	331b      	adds	r3, #27
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	4413      	add	r3, r2
 800332a:	3304      	adds	r3, #4
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	0a1b      	lsrs	r3, r3, #8
 8003330:	b2da      	uxtb	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	331b      	adds	r3, #27
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	4413      	add	r3, r2
 8003342:	3304      	adds	r3, #4
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	0c1b      	lsrs	r3, r3, #16
 8003348:	b29a      	uxth	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	4413      	add	r3, r2
 8003358:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	b2da      	uxtb	r2, r3
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	4413      	add	r3, r2
 800336e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	0a1a      	lsrs	r2, r3, #8
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	3301      	adds	r3, #1
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	4413      	add	r3, r2
 8003388:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	0c1a      	lsrs	r2, r3, #16
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	3302      	adds	r3, #2
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	0e1a      	lsrs	r2, r3, #24
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	3303      	adds	r3, #3
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	3304      	adds	r3, #4
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	0a1a      	lsrs	r2, r3, #8
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	3305      	adds	r3, #5
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	0c1a      	lsrs	r2, r3, #16
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	3306      	adds	r3, #6
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	4413      	add	r3, r2
 8003408:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	0e1a      	lsrs	r2, r3, #24
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	3307      	adds	r3, #7
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d108      	bne.n	8003430 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f042 0220 	orr.w	r2, r2, #32
 800342c:	60da      	str	r2, [r3, #12]
 800342e:	e007      	b.n	8003440 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691a      	ldr	r2, [r3, #16]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0220 	orr.w	r2, r2, #32
 800343e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	e006      	b.n	8003452 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
  }
}
 8003452:	4618      	mov	r0, r3
 8003454:	371c      	adds	r7, #28
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800345e:	b480      	push	{r7}
 8003460:	b085      	sub	sp, #20
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800346e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d002      	beq.n	800347c <HAL_CAN_ActivateNotification+0x1e>
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d109      	bne.n	8003490 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6959      	ldr	r1, [r3, #20]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	e006      	b.n	800349e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
  }
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b08a      	sub	sp, #40	; 0x28
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80034b2:	2300      	movs	r3, #0
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d07c      	beq.n	80035ea <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d023      	beq.n	8003542 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2201      	movs	r2, #1
 8003500:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f983 	bl	8003818 <HAL_CAN_TxMailbox0CompleteCallback>
 8003512:	e016      	b.n	8003542 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b00      	cmp	r3, #0
 800351c:	d004      	beq.n	8003528 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
 8003526:	e00c      	b.n	8003542 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d004      	beq.n	800353c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
 800353a:	e002      	b.n	8003542 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f989 	bl	8003854 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003548:	2b00      	cmp	r3, #0
 800354a:	d024      	beq.n	8003596 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003554:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f963 	bl	800382c <HAL_CAN_TxMailbox1CompleteCallback>
 8003566:	e016      	b.n	8003596 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356e:	2b00      	cmp	r3, #0
 8003570:	d004      	beq.n	800357c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
 800357a:	e00c      	b.n	8003596 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003582:	2b00      	cmp	r3, #0
 8003584:	d004      	beq.n	8003590 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
 800358e:	e002      	b.n	8003596 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f969 	bl	8003868 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d024      	beq.n	80035ea <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80035a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f943 	bl	8003840 <HAL_CAN_TxMailbox2CompleteCallback>
 80035ba:	e016      	b.n	80035ea <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d004      	beq.n	80035d0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
 80035ce:	e00c      	b.n	80035ea <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d004      	beq.n	80035e4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
 80035e2:	e002      	b.n	80035ea <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f949 	bl	800387c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00c      	beq.n	800360e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d007      	beq.n	800360e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003604:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2210      	movs	r2, #16
 800360c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00b      	beq.n	8003630 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d006      	beq.n	8003630 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2208      	movs	r2, #8
 8003628:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f930 	bl	8003890 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d009      	beq.n	800364e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0303 	and.w	r3, r3, #3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7fe fc47 	bl	8001edc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00c      	beq.n	8003672 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	2b00      	cmp	r3, #0
 8003660:	d007      	beq.n	8003672 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003668:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2210      	movs	r2, #16
 8003670:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00b      	beq.n	8003694 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d006      	beq.n	8003694 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2208      	movs	r2, #8
 800368c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f912 	bl	80038b8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	2b00      	cmp	r3, #0
 800369c:	d009      	beq.n	80036b2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f8f9 	bl	80038a4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00b      	beq.n	80036d4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f003 0310 	and.w	r3, r3, #16
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d006      	beq.n	80036d4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2210      	movs	r2, #16
 80036cc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f8fc 	bl	80038cc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00b      	beq.n	80036f6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d006      	beq.n	80036f6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2208      	movs	r2, #8
 80036ee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f8f5 	bl	80038e0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d07b      	beq.n	80037f8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d072      	beq.n	80037f0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003710:	2b00      	cmp	r3, #0
 8003712:	d008      	beq.n	8003726 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	f043 0302 	orr.w	r3, r3, #2
 8003740:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	f043 0304 	orr.w	r3, r3, #4
 800375c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003764:	2b00      	cmp	r3, #0
 8003766:	d043      	beq.n	80037f0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800376e:	2b00      	cmp	r3, #0
 8003770:	d03e      	beq.n	80037f0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003778:	2b60      	cmp	r3, #96	; 0x60
 800377a:	d02b      	beq.n	80037d4 <HAL_CAN_IRQHandler+0x32a>
 800377c:	2b60      	cmp	r3, #96	; 0x60
 800377e:	d82e      	bhi.n	80037de <HAL_CAN_IRQHandler+0x334>
 8003780:	2b50      	cmp	r3, #80	; 0x50
 8003782:	d022      	beq.n	80037ca <HAL_CAN_IRQHandler+0x320>
 8003784:	2b50      	cmp	r3, #80	; 0x50
 8003786:	d82a      	bhi.n	80037de <HAL_CAN_IRQHandler+0x334>
 8003788:	2b40      	cmp	r3, #64	; 0x40
 800378a:	d019      	beq.n	80037c0 <HAL_CAN_IRQHandler+0x316>
 800378c:	2b40      	cmp	r3, #64	; 0x40
 800378e:	d826      	bhi.n	80037de <HAL_CAN_IRQHandler+0x334>
 8003790:	2b30      	cmp	r3, #48	; 0x30
 8003792:	d010      	beq.n	80037b6 <HAL_CAN_IRQHandler+0x30c>
 8003794:	2b30      	cmp	r3, #48	; 0x30
 8003796:	d822      	bhi.n	80037de <HAL_CAN_IRQHandler+0x334>
 8003798:	2b10      	cmp	r3, #16
 800379a:	d002      	beq.n	80037a2 <HAL_CAN_IRQHandler+0x2f8>
 800379c:	2b20      	cmp	r3, #32
 800379e:	d005      	beq.n	80037ac <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80037a0:	e01d      	b.n	80037de <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	f043 0308 	orr.w	r3, r3, #8
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037aa:	e019      	b.n	80037e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	f043 0310 	orr.w	r3, r3, #16
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037b4:	e014      	b.n	80037e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	f043 0320 	orr.w	r3, r3, #32
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037be:	e00f      	b.n	80037e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037c8:	e00a      	b.n	80037e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037d2:	e005      	b.n	80037e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037dc:	e000      	b.n	80037e0 <HAL_CAN_IRQHandler+0x336>
            break;
 80037de:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80037ee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2204      	movs	r2, #4
 80037f6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d008      	beq.n	8003810 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f872 	bl	80038f4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003810:	bf00      	nop
 8003812:	3728      	adds	r7, #40	; 0x28
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003918:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <__NVIC_SetPriorityGrouping+0x40>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003924:	4013      	ands	r3, r2
 8003926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003930:	4b06      	ldr	r3, [pc, #24]	; (800394c <__NVIC_SetPriorityGrouping+0x44>)
 8003932:	4313      	orrs	r3, r2
 8003934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003936:	4a04      	ldr	r2, [pc, #16]	; (8003948 <__NVIC_SetPriorityGrouping+0x40>)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	60d3      	str	r3, [r2, #12]
}
 800393c:	bf00      	nop
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	e000ed00 	.word	0xe000ed00
 800394c:	05fa0000 	.word	0x05fa0000

08003950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003954:	4b04      	ldr	r3, [pc, #16]	; (8003968 <__NVIC_GetPriorityGrouping+0x18>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	0a1b      	lsrs	r3, r3, #8
 800395a:	f003 0307 	and.w	r3, r3, #7
}
 800395e:	4618      	mov	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	2b00      	cmp	r3, #0
 800397c:	db0b      	blt.n	8003996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	f003 021f 	and.w	r2, r3, #31
 8003984:	4907      	ldr	r1, [pc, #28]	; (80039a4 <__NVIC_EnableIRQ+0x38>)
 8003986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	2001      	movs	r0, #1
 800398e:	fa00 f202 	lsl.w	r2, r0, r2
 8003992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	e000e100 	.word	0xe000e100

080039a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	6039      	str	r1, [r7, #0]
 80039b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	db0a      	blt.n	80039d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	490c      	ldr	r1, [pc, #48]	; (80039f4 <__NVIC_SetPriority+0x4c>)
 80039c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c6:	0112      	lsls	r2, r2, #4
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	440b      	add	r3, r1
 80039cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039d0:	e00a      	b.n	80039e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	4908      	ldr	r1, [pc, #32]	; (80039f8 <__NVIC_SetPriority+0x50>)
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	3b04      	subs	r3, #4
 80039e0:	0112      	lsls	r2, r2, #4
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	440b      	add	r3, r1
 80039e6:	761a      	strb	r2, [r3, #24]
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000e100 	.word	0xe000e100
 80039f8:	e000ed00 	.word	0xe000ed00

080039fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b089      	sub	sp, #36	; 0x24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f1c3 0307 	rsb	r3, r3, #7
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	bf28      	it	cs
 8003a1a:	2304      	movcs	r3, #4
 8003a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	3304      	adds	r3, #4
 8003a22:	2b06      	cmp	r3, #6
 8003a24:	d902      	bls.n	8003a2c <NVIC_EncodePriority+0x30>
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3b03      	subs	r3, #3
 8003a2a:	e000      	b.n	8003a2e <NVIC_EncodePriority+0x32>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a30:	f04f 32ff 	mov.w	r2, #4294967295
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43da      	mvns	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	401a      	ands	r2, r3
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a44:	f04f 31ff 	mov.w	r1, #4294967295
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4e:	43d9      	mvns	r1, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a54:	4313      	orrs	r3, r2
         );
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3724      	adds	r7, #36	; 0x24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
	...

08003a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a74:	d301      	bcc.n	8003a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a76:	2301      	movs	r3, #1
 8003a78:	e00f      	b.n	8003a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a7a:	4a0a      	ldr	r2, [pc, #40]	; (8003aa4 <SysTick_Config+0x40>)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a82:	210f      	movs	r1, #15
 8003a84:	f04f 30ff 	mov.w	r0, #4294967295
 8003a88:	f7ff ff8e 	bl	80039a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <SysTick_Config+0x40>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a92:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <SysTick_Config+0x40>)
 8003a94:	2207      	movs	r2, #7
 8003a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	e000e010 	.word	0xe000e010

08003aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7ff ff29 	bl	8003908 <__NVIC_SetPriorityGrouping>
}
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b086      	sub	sp, #24
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	607a      	str	r2, [r7, #4]
 8003aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ad0:	f7ff ff3e 	bl	8003950 <__NVIC_GetPriorityGrouping>
 8003ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	6978      	ldr	r0, [r7, #20]
 8003adc:	f7ff ff8e 	bl	80039fc <NVIC_EncodePriority>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff ff5d 	bl	80039a8 <__NVIC_SetPriority>
}
 8003aee:	bf00      	nop
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	4603      	mov	r3, r0
 8003afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff ff31 	bl	800396c <__NVIC_EnableIRQ>
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff ffa2 	bl	8003a64 <SysTick_Config>
 8003b20:	4603      	mov	r3, r0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b089      	sub	sp, #36	; 0x24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b46:	2300      	movs	r3, #0
 8003b48:	61fb      	str	r3, [r7, #28]
 8003b4a:	e175      	b.n	8003e38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	f040 8164 	bne.w	8003e32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d00b      	beq.n	8003b8a <HAL_GPIO_Init+0x5e>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d007      	beq.n	8003b8a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b7e:	2b11      	cmp	r3, #17
 8003b80:	d003      	beq.n	8003b8a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b12      	cmp	r3, #18
 8003b88:	d130      	bne.n	8003bec <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	2203      	movs	r2, #3
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	f003 0201 	and.w	r2, r3, #1
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	4013      	ands	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d003      	beq.n	8003c2c <HAL_GPIO_Init+0x100>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b12      	cmp	r3, #18
 8003c2a:	d123      	bne.n	8003c74 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	08da      	lsrs	r2, r3, #3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3208      	adds	r2, #8
 8003c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	220f      	movs	r2, #15
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	08da      	lsrs	r2, r3, #3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	3208      	adds	r2, #8
 8003c6e:	69b9      	ldr	r1, [r7, #24]
 8003c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	2203      	movs	r2, #3
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	43db      	mvns	r3, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 0203 	and.w	r2, r3, #3
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80be 	beq.w	8003e32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cb6:	4b66      	ldr	r3, [pc, #408]	; (8003e50 <HAL_GPIO_Init+0x324>)
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	4a65      	ldr	r2, [pc, #404]	; (8003e50 <HAL_GPIO_Init+0x324>)
 8003cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8003cc2:	4b63      	ldr	r3, [pc, #396]	; (8003e50 <HAL_GPIO_Init+0x324>)
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003cce:	4a61      	ldr	r2, [pc, #388]	; (8003e54 <HAL_GPIO_Init+0x328>)
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	089b      	lsrs	r3, r3, #2
 8003cd4:	3302      	adds	r3, #2
 8003cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	220f      	movs	r2, #15
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43db      	mvns	r3, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a58      	ldr	r2, [pc, #352]	; (8003e58 <HAL_GPIO_Init+0x32c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d037      	beq.n	8003d6a <HAL_GPIO_Init+0x23e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a57      	ldr	r2, [pc, #348]	; (8003e5c <HAL_GPIO_Init+0x330>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d031      	beq.n	8003d66 <HAL_GPIO_Init+0x23a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a56      	ldr	r2, [pc, #344]	; (8003e60 <HAL_GPIO_Init+0x334>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d02b      	beq.n	8003d62 <HAL_GPIO_Init+0x236>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a55      	ldr	r2, [pc, #340]	; (8003e64 <HAL_GPIO_Init+0x338>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d025      	beq.n	8003d5e <HAL_GPIO_Init+0x232>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a54      	ldr	r2, [pc, #336]	; (8003e68 <HAL_GPIO_Init+0x33c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d01f      	beq.n	8003d5a <HAL_GPIO_Init+0x22e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a53      	ldr	r2, [pc, #332]	; (8003e6c <HAL_GPIO_Init+0x340>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d019      	beq.n	8003d56 <HAL_GPIO_Init+0x22a>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a52      	ldr	r2, [pc, #328]	; (8003e70 <HAL_GPIO_Init+0x344>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d013      	beq.n	8003d52 <HAL_GPIO_Init+0x226>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a51      	ldr	r2, [pc, #324]	; (8003e74 <HAL_GPIO_Init+0x348>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00d      	beq.n	8003d4e <HAL_GPIO_Init+0x222>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a50      	ldr	r2, [pc, #320]	; (8003e78 <HAL_GPIO_Init+0x34c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d007      	beq.n	8003d4a <HAL_GPIO_Init+0x21e>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a4f      	ldr	r2, [pc, #316]	; (8003e7c <HAL_GPIO_Init+0x350>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d101      	bne.n	8003d46 <HAL_GPIO_Init+0x21a>
 8003d42:	2309      	movs	r3, #9
 8003d44:	e012      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d46:	230a      	movs	r3, #10
 8003d48:	e010      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d4a:	2308      	movs	r3, #8
 8003d4c:	e00e      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d4e:	2307      	movs	r3, #7
 8003d50:	e00c      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d52:	2306      	movs	r3, #6
 8003d54:	e00a      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d56:	2305      	movs	r3, #5
 8003d58:	e008      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d5a:	2304      	movs	r3, #4
 8003d5c:	e006      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e004      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e002      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <HAL_GPIO_Init+0x240>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	f002 0203 	and.w	r2, r2, #3
 8003d72:	0092      	lsls	r2, r2, #2
 8003d74:	4093      	lsls	r3, r2
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d7c:	4935      	ldr	r1, [pc, #212]	; (8003e54 <HAL_GPIO_Init+0x328>)
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	089b      	lsrs	r3, r3, #2
 8003d82:	3302      	adds	r3, #2
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d8a:	4b3d      	ldr	r3, [pc, #244]	; (8003e80 <HAL_GPIO_Init+0x354>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	43db      	mvns	r3, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4013      	ands	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dae:	4a34      	ldr	r2, [pc, #208]	; (8003e80 <HAL_GPIO_Init+0x354>)
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003db4:	4b32      	ldr	r3, [pc, #200]	; (8003e80 <HAL_GPIO_Init+0x354>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dd8:	4a29      	ldr	r2, [pc, #164]	; (8003e80 <HAL_GPIO_Init+0x354>)
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dde:	4b28      	ldr	r3, [pc, #160]	; (8003e80 <HAL_GPIO_Init+0x354>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	43db      	mvns	r3, r3
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4013      	ands	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e02:	4a1f      	ldr	r2, [pc, #124]	; (8003e80 <HAL_GPIO_Init+0x354>)
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e08:	4b1d      	ldr	r3, [pc, #116]	; (8003e80 <HAL_GPIO_Init+0x354>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	43db      	mvns	r3, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e2c:	4a14      	ldr	r2, [pc, #80]	; (8003e80 <HAL_GPIO_Init+0x354>)
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	3301      	adds	r3, #1
 8003e36:	61fb      	str	r3, [r7, #28]
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	2b0f      	cmp	r3, #15
 8003e3c:	f67f ae86 	bls.w	8003b4c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003e40:	bf00      	nop
 8003e42:	bf00      	nop
 8003e44:	3724      	adds	r7, #36	; 0x24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40023800 	.word	0x40023800
 8003e54:	40013800 	.word	0x40013800
 8003e58:	40020000 	.word	0x40020000
 8003e5c:	40020400 	.word	0x40020400
 8003e60:	40020800 	.word	0x40020800
 8003e64:	40020c00 	.word	0x40020c00
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	40021400 	.word	0x40021400
 8003e70:	40021800 	.word	0x40021800
 8003e74:	40021c00 	.word	0x40021c00
 8003e78:	40022000 	.word	0x40022000
 8003e7c:	40022400 	.word	0x40022400
 8003e80:	40013c00 	.word	0x40013c00

08003e84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	887b      	ldrh	r3, [r7, #2]
 8003e96:	4013      	ands	r3, r2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	73fb      	strb	r3, [r7, #15]
 8003ea0:	e001      	b.n	8003ea6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	807b      	strh	r3, [r7, #2]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ec4:	787b      	ldrb	r3, [r7, #1]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eca:	887a      	ldrh	r2, [r7, #2]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003ed0:	e003      	b.n	8003eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003ed2:	887b      	ldrh	r3, [r7, #2]
 8003ed4:	041a      	lsls	r2, r3, #16
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	619a      	str	r2, [r3, #24]
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
	...

08003ee8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ef2:	4b23      	ldr	r3, [pc, #140]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	4a22      	ldr	r2, [pc, #136]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efc:	6413      	str	r3, [r2, #64]	; 0x40
 8003efe:	4b20      	ldr	r3, [pc, #128]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f0a:	4b1e      	ldr	r3, [pc, #120]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a1d      	ldr	r2, [pc, #116]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f14:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f16:	f7fe f9ef 	bl	80022f8 <HAL_GetTick>
 8003f1a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f1c:	e009      	b.n	8003f32 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f1e:	f7fe f9eb 	bl	80022f8 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f2c:	d901      	bls.n	8003f32 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e022      	b.n	8003f78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f32:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f3e:	d1ee      	bne.n	8003f1e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f40:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a0f      	ldr	r2, [pc, #60]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f4c:	f7fe f9d4 	bl	80022f8 <HAL_GetTick>
 8003f50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f52:	e009      	b.n	8003f68 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f54:	f7fe f9d0 	bl	80022f8 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f62:	d901      	bls.n	8003f68 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e007      	b.n	8003f78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f68:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f74:	d1ee      	bne.n	8003f54 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40023800 	.word	0x40023800
 8003f84:	40007000 	.word	0x40007000

08003f88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f90:	2300      	movs	r3, #0
 8003f92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e29b      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 8087 	beq.w	80040ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fac:	4b96      	ldr	r3, [pc, #600]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 030c 	and.w	r3, r3, #12
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d00c      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fb8:	4b93      	ldr	r3, [pc, #588]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 030c 	and.w	r3, r3, #12
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d112      	bne.n	8003fea <HAL_RCC_OscConfig+0x62>
 8003fc4:	4b90      	ldr	r3, [pc, #576]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fd0:	d10b      	bne.n	8003fea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd2:	4b8d      	ldr	r3, [pc, #564]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d06c      	beq.n	80040b8 <HAL_RCC_OscConfig+0x130>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d168      	bne.n	80040b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e275      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff2:	d106      	bne.n	8004002 <HAL_RCC_OscConfig+0x7a>
 8003ff4:	4b84      	ldr	r3, [pc, #528]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a83      	ldr	r2, [pc, #524]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8003ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	e02e      	b.n	8004060 <HAL_RCC_OscConfig+0xd8>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10c      	bne.n	8004024 <HAL_RCC_OscConfig+0x9c>
 800400a:	4b7f      	ldr	r3, [pc, #508]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a7e      	ldr	r2, [pc, #504]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	4b7c      	ldr	r3, [pc, #496]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a7b      	ldr	r2, [pc, #492]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800401c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	e01d      	b.n	8004060 <HAL_RCC_OscConfig+0xd8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800402c:	d10c      	bne.n	8004048 <HAL_RCC_OscConfig+0xc0>
 800402e:	4b76      	ldr	r3, [pc, #472]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a75      	ldr	r2, [pc, #468]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	4b73      	ldr	r3, [pc, #460]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a72      	ldr	r2, [pc, #456]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	e00b      	b.n	8004060 <HAL_RCC_OscConfig+0xd8>
 8004048:	4b6f      	ldr	r3, [pc, #444]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a6e      	ldr	r2, [pc, #440]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800404e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	4b6c      	ldr	r3, [pc, #432]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a6b      	ldr	r2, [pc, #428]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800405a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800405e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d013      	beq.n	8004090 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7fe f946 	bl	80022f8 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004070:	f7fe f942 	bl	80022f8 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b64      	cmp	r3, #100	; 0x64
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e229      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004082:	4b61      	ldr	r3, [pc, #388]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0xe8>
 800408e:	e014      	b.n	80040ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004090:	f7fe f932 	bl	80022f8 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004098:	f7fe f92e 	bl	80022f8 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b64      	cmp	r3, #100	; 0x64
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e215      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040aa:	4b57      	ldr	r3, [pc, #348]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f0      	bne.n	8004098 <HAL_RCC_OscConfig+0x110>
 80040b6:	e000      	b.n	80040ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d069      	beq.n	800419a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040c6:	4b50      	ldr	r3, [pc, #320]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 030c 	and.w	r3, r3, #12
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00b      	beq.n	80040ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040d2:	4b4d      	ldr	r3, [pc, #308]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d11c      	bne.n	8004118 <HAL_RCC_OscConfig+0x190>
 80040de:	4b4a      	ldr	r3, [pc, #296]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d116      	bne.n	8004118 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ea:	4b47      	ldr	r3, [pc, #284]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <HAL_RCC_OscConfig+0x17a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d001      	beq.n	8004102 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e1e9      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004102:	4b41      	ldr	r3, [pc, #260]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	493d      	ldr	r1, [pc, #244]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004112:	4313      	orrs	r3, r2
 8004114:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004116:	e040      	b.n	800419a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d023      	beq.n	8004168 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004120:	4b39      	ldr	r3, [pc, #228]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a38      	ldr	r2, [pc, #224]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412c:	f7fe f8e4 	bl	80022f8 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004134:	f7fe f8e0 	bl	80022f8 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e1c7      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004146:	4b30      	ldr	r3, [pc, #192]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004152:	4b2d      	ldr	r3, [pc, #180]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	4929      	ldr	r1, [pc, #164]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004162:	4313      	orrs	r3, r2
 8004164:	600b      	str	r3, [r1, #0]
 8004166:	e018      	b.n	800419a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004168:	4b27      	ldr	r3, [pc, #156]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a26      	ldr	r2, [pc, #152]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fe f8c0 	bl	80022f8 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417c:	f7fe f8bc 	bl	80022f8 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e1a3      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418e:	4b1e      	ldr	r3, [pc, #120]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d038      	beq.n	8004218 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d019      	beq.n	80041e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ae:	4b16      	ldr	r3, [pc, #88]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80041b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b2:	4a15      	ldr	r2, [pc, #84]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ba:	f7fe f89d 	bl	80022f8 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c2:	f7fe f899 	bl	80022f8 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e180      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d4:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80041d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0f0      	beq.n	80041c2 <HAL_RCC_OscConfig+0x23a>
 80041e0:	e01a      	b.n	8004218 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e2:	4b09      	ldr	r3, [pc, #36]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80041e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e6:	4a08      	ldr	r2, [pc, #32]	; (8004208 <HAL_RCC_OscConfig+0x280>)
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ee:	f7fe f883 	bl	80022f8 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f4:	e00a      	b.n	800420c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f6:	f7fe f87f 	bl	80022f8 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d903      	bls.n	800420c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e166      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
 8004208:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800420c:	4b92      	ldr	r3, [pc, #584]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 800420e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1ee      	bne.n	80041f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 80a4 	beq.w	800436e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004226:	4b8c      	ldr	r3, [pc, #560]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10d      	bne.n	800424e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004232:	4b89      	ldr	r3, [pc, #548]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	4a88      	ldr	r2, [pc, #544]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423c:	6413      	str	r3, [r2, #64]	; 0x40
 800423e:	4b86      	ldr	r3, [pc, #536]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424a:	2301      	movs	r3, #1
 800424c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800424e:	4b83      	ldr	r3, [pc, #524]	; (800445c <HAL_RCC_OscConfig+0x4d4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d118      	bne.n	800428c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800425a:	4b80      	ldr	r3, [pc, #512]	; (800445c <HAL_RCC_OscConfig+0x4d4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a7f      	ldr	r2, [pc, #508]	; (800445c <HAL_RCC_OscConfig+0x4d4>)
 8004260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004266:	f7fe f847 	bl	80022f8 <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426e:	f7fe f843 	bl	80022f8 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b64      	cmp	r3, #100	; 0x64
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e12a      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004280:	4b76      	ldr	r3, [pc, #472]	; (800445c <HAL_RCC_OscConfig+0x4d4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f0      	beq.n	800426e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d106      	bne.n	80042a2 <HAL_RCC_OscConfig+0x31a>
 8004294:	4b70      	ldr	r3, [pc, #448]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004298:	4a6f      	ldr	r2, [pc, #444]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	6713      	str	r3, [r2, #112]	; 0x70
 80042a0:	e02d      	b.n	80042fe <HAL_RCC_OscConfig+0x376>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10c      	bne.n	80042c4 <HAL_RCC_OscConfig+0x33c>
 80042aa:	4b6b      	ldr	r3, [pc, #428]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ae:	4a6a      	ldr	r2, [pc, #424]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	6713      	str	r3, [r2, #112]	; 0x70
 80042b6:	4b68      	ldr	r3, [pc, #416]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	4a67      	ldr	r2, [pc, #412]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042bc:	f023 0304 	bic.w	r3, r3, #4
 80042c0:	6713      	str	r3, [r2, #112]	; 0x70
 80042c2:	e01c      	b.n	80042fe <HAL_RCC_OscConfig+0x376>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2b05      	cmp	r3, #5
 80042ca:	d10c      	bne.n	80042e6 <HAL_RCC_OscConfig+0x35e>
 80042cc:	4b62      	ldr	r3, [pc, #392]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d0:	4a61      	ldr	r2, [pc, #388]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042d2:	f043 0304 	orr.w	r3, r3, #4
 80042d6:	6713      	str	r3, [r2, #112]	; 0x70
 80042d8:	4b5f      	ldr	r3, [pc, #380]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042dc:	4a5e      	ldr	r2, [pc, #376]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	6713      	str	r3, [r2, #112]	; 0x70
 80042e4:	e00b      	b.n	80042fe <HAL_RCC_OscConfig+0x376>
 80042e6:	4b5c      	ldr	r3, [pc, #368]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ea:	4a5b      	ldr	r2, [pc, #364]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	6713      	str	r3, [r2, #112]	; 0x70
 80042f2:	4b59      	ldr	r3, [pc, #356]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	4a58      	ldr	r2, [pc, #352]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80042f8:	f023 0304 	bic.w	r3, r3, #4
 80042fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d015      	beq.n	8004332 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004306:	f7fd fff7 	bl	80022f8 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800430c:	e00a      	b.n	8004324 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430e:	f7fd fff3 	bl	80022f8 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	; 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e0d8      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004324:	4b4c      	ldr	r3, [pc, #304]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0ee      	beq.n	800430e <HAL_RCC_OscConfig+0x386>
 8004330:	e014      	b.n	800435c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004332:	f7fd ffe1 	bl	80022f8 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004338:	e00a      	b.n	8004350 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433a:	f7fd ffdd 	bl	80022f8 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	f241 3288 	movw	r2, #5000	; 0x1388
 8004348:	4293      	cmp	r3, r2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e0c2      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004350:	4b41      	ldr	r3, [pc, #260]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1ee      	bne.n	800433a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800435c:	7dfb      	ldrb	r3, [r7, #23]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d105      	bne.n	800436e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004362:	4b3d      	ldr	r3, [pc, #244]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	4a3c      	ldr	r2, [pc, #240]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800436c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 80ae 	beq.w	80044d4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004378:	4b37      	ldr	r3, [pc, #220]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 030c 	and.w	r3, r3, #12
 8004380:	2b08      	cmp	r3, #8
 8004382:	d06d      	beq.n	8004460 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	2b02      	cmp	r3, #2
 800438a:	d14b      	bne.n	8004424 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438c:	4b32      	ldr	r3, [pc, #200]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a31      	ldr	r2, [pc, #196]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004392:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7fd ffae 	bl	80022f8 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fd ffaa 	bl	80022f8 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e091      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b2:	4b29      	ldr	r3, [pc, #164]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69da      	ldr	r2, [r3, #28]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	019b      	lsls	r3, r3, #6
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d4:	085b      	lsrs	r3, r3, #1
 80043d6:	3b01      	subs	r3, #1
 80043d8:	041b      	lsls	r3, r3, #16
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	061b      	lsls	r3, r3, #24
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e8:	071b      	lsls	r3, r3, #28
 80043ea:	491b      	ldr	r1, [pc, #108]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043f0:	4b19      	ldr	r3, [pc, #100]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a18      	ldr	r2, [pc, #96]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 80043f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fc:	f7fd ff7c 	bl	80022f8 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004404:	f7fd ff78 	bl	80022f8 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e05f      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004416:	4b10      	ldr	r3, [pc, #64]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f0      	beq.n	8004404 <HAL_RCC_OscConfig+0x47c>
 8004422:	e057      	b.n	80044d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004424:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a0b      	ldr	r2, [pc, #44]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 800442a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800442e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004430:	f7fd ff62 	bl	80022f8 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004438:	f7fd ff5e 	bl	80022f8 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e045      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800444a:	4b03      	ldr	r3, [pc, #12]	; (8004458 <HAL_RCC_OscConfig+0x4d0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f0      	bne.n	8004438 <HAL_RCC_OscConfig+0x4b0>
 8004456:	e03d      	b.n	80044d4 <HAL_RCC_OscConfig+0x54c>
 8004458:	40023800 	.word	0x40023800
 800445c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004460:	4b1f      	ldr	r3, [pc, #124]	; (80044e0 <HAL_RCC_OscConfig+0x558>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d030      	beq.n	80044d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004478:	429a      	cmp	r2, r3
 800447a:	d129      	bne.n	80044d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004486:	429a      	cmp	r2, r3
 8004488:	d122      	bne.n	80044d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004490:	4013      	ands	r3, r2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004496:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004498:	4293      	cmp	r3, r2
 800449a:	d119      	bne.n	80044d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a6:	085b      	lsrs	r3, r3, #1
 80044a8:	3b01      	subs	r3, #1
 80044aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d10f      	bne.n	80044d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80044bc:	429a      	cmp	r2, r3
 80044be:	d107      	bne.n	80044d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d001      	beq.n	80044d4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e000      	b.n	80044d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40023800 	.word	0x40023800

080044e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0d0      	b.n	800469e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044fc:	4b6a      	ldr	r3, [pc, #424]	; (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 030f 	and.w	r3, r3, #15
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d910      	bls.n	800452c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450a:	4b67      	ldr	r3, [pc, #412]	; (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f023 020f 	bic.w	r2, r3, #15
 8004512:	4965      	ldr	r1, [pc, #404]	; (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	4313      	orrs	r3, r2
 8004518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800451a:	4b63      	ldr	r3, [pc, #396]	; (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d001      	beq.n	800452c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0b8      	b.n	800469e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d020      	beq.n	800457a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d005      	beq.n	8004550 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004544:	4b59      	ldr	r3, [pc, #356]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	4a58      	ldr	r2, [pc, #352]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 800454a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800454e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0308 	and.w	r3, r3, #8
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800455c:	4b53      	ldr	r3, [pc, #332]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	4a52      	ldr	r2, [pc, #328]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004566:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004568:	4b50      	ldr	r3, [pc, #320]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	494d      	ldr	r1, [pc, #308]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004576:	4313      	orrs	r3, r2
 8004578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d040      	beq.n	8004608 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d107      	bne.n	800459e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458e:	4b47      	ldr	r3, [pc, #284]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d115      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e07f      	b.n	800469e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d107      	bne.n	80045b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a6:	4b41      	ldr	r3, [pc, #260]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e073      	b.n	800469e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b6:	4b3d      	ldr	r3, [pc, #244]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e06b      	b.n	800469e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045c6:	4b39      	ldr	r3, [pc, #228]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f023 0203 	bic.w	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	4936      	ldr	r1, [pc, #216]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d8:	f7fd fe8e 	bl	80022f8 <HAL_GetTick>
 80045dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045de:	e00a      	b.n	80045f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e0:	f7fd fe8a 	bl	80022f8 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e053      	b.n	800469e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f6:	4b2d      	ldr	r3, [pc, #180]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 020c 	and.w	r2, r3, #12
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	429a      	cmp	r2, r3
 8004606:	d1eb      	bne.n	80045e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004608:	4b27      	ldr	r3, [pc, #156]	; (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d210      	bcs.n	8004638 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004616:	4b24      	ldr	r3, [pc, #144]	; (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f023 020f 	bic.w	r2, r3, #15
 800461e:	4922      	ldr	r1, [pc, #136]	; (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	4313      	orrs	r3, r2
 8004624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004626:	4b20      	ldr	r3, [pc, #128]	; (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d001      	beq.n	8004638 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e032      	b.n	800469e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	d008      	beq.n	8004656 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004644:	4b19      	ldr	r3, [pc, #100]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	4916      	ldr	r1, [pc, #88]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004652:	4313      	orrs	r3, r2
 8004654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0308 	and.w	r3, r3, #8
 800465e:	2b00      	cmp	r3, #0
 8004660:	d009      	beq.n	8004676 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004662:	4b12      	ldr	r3, [pc, #72]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	490e      	ldr	r1, [pc, #56]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004672:	4313      	orrs	r3, r2
 8004674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004676:	f000 f821 	bl	80046bc <HAL_RCC_GetSysClockFreq>
 800467a:	4602      	mov	r2, r0
 800467c:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	091b      	lsrs	r3, r3, #4
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	490a      	ldr	r1, [pc, #40]	; (80046b0 <HAL_RCC_ClockConfig+0x1cc>)
 8004688:	5ccb      	ldrb	r3, [r1, r3]
 800468a:	fa22 f303 	lsr.w	r3, r2, r3
 800468e:	4a09      	ldr	r2, [pc, #36]	; (80046b4 <HAL_RCC_ClockConfig+0x1d0>)
 8004690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004692:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <HAL_RCC_ClockConfig+0x1d4>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f7fd fdea 	bl	8002270 <HAL_InitTick>

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40023c00 	.word	0x40023c00
 80046ac:	40023800 	.word	0x40023800
 80046b0:	0800675c 	.word	0x0800675c
 80046b4:	20000000 	.word	0x20000000
 80046b8:	20000004 	.word	0x20000004

080046bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046bc:	b5b0      	push	{r4, r5, r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80046c2:	2100      	movs	r1, #0
 80046c4:	6079      	str	r1, [r7, #4]
 80046c6:	2100      	movs	r1, #0
 80046c8:	60f9      	str	r1, [r7, #12]
 80046ca:	2100      	movs	r1, #0
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80046ce:	2100      	movs	r1, #0
 80046d0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046d2:	4952      	ldr	r1, [pc, #328]	; (800481c <HAL_RCC_GetSysClockFreq+0x160>)
 80046d4:	6889      	ldr	r1, [r1, #8]
 80046d6:	f001 010c 	and.w	r1, r1, #12
 80046da:	2908      	cmp	r1, #8
 80046dc:	d00d      	beq.n	80046fa <HAL_RCC_GetSysClockFreq+0x3e>
 80046de:	2908      	cmp	r1, #8
 80046e0:	f200 8094 	bhi.w	800480c <HAL_RCC_GetSysClockFreq+0x150>
 80046e4:	2900      	cmp	r1, #0
 80046e6:	d002      	beq.n	80046ee <HAL_RCC_GetSysClockFreq+0x32>
 80046e8:	2904      	cmp	r1, #4
 80046ea:	d003      	beq.n	80046f4 <HAL_RCC_GetSysClockFreq+0x38>
 80046ec:	e08e      	b.n	800480c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046ee:	4b4c      	ldr	r3, [pc, #304]	; (8004820 <HAL_RCC_GetSysClockFreq+0x164>)
 80046f0:	60bb      	str	r3, [r7, #8]
      break;
 80046f2:	e08e      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046f4:	4b4b      	ldr	r3, [pc, #300]	; (8004824 <HAL_RCC_GetSysClockFreq+0x168>)
 80046f6:	60bb      	str	r3, [r7, #8]
      break;
 80046f8:	e08b      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046fa:	4948      	ldr	r1, [pc, #288]	; (800481c <HAL_RCC_GetSysClockFreq+0x160>)
 80046fc:	6849      	ldr	r1, [r1, #4]
 80046fe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004702:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004704:	4945      	ldr	r1, [pc, #276]	; (800481c <HAL_RCC_GetSysClockFreq+0x160>)
 8004706:	6849      	ldr	r1, [r1, #4]
 8004708:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800470c:	2900      	cmp	r1, #0
 800470e:	d024      	beq.n	800475a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004710:	4942      	ldr	r1, [pc, #264]	; (800481c <HAL_RCC_GetSysClockFreq+0x160>)
 8004712:	6849      	ldr	r1, [r1, #4]
 8004714:	0989      	lsrs	r1, r1, #6
 8004716:	4608      	mov	r0, r1
 8004718:	f04f 0100 	mov.w	r1, #0
 800471c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004720:	f04f 0500 	mov.w	r5, #0
 8004724:	ea00 0204 	and.w	r2, r0, r4
 8004728:	ea01 0305 	and.w	r3, r1, r5
 800472c:	493d      	ldr	r1, [pc, #244]	; (8004824 <HAL_RCC_GetSysClockFreq+0x168>)
 800472e:	fb01 f003 	mul.w	r0, r1, r3
 8004732:	2100      	movs	r1, #0
 8004734:	fb01 f102 	mul.w	r1, r1, r2
 8004738:	1844      	adds	r4, r0, r1
 800473a:	493a      	ldr	r1, [pc, #232]	; (8004824 <HAL_RCC_GetSysClockFreq+0x168>)
 800473c:	fba2 0101 	umull	r0, r1, r2, r1
 8004740:	1863      	adds	r3, r4, r1
 8004742:	4619      	mov	r1, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	461a      	mov	r2, r3
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	f7fb fd7c 	bl	8000248 <__aeabi_uldivmod>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4613      	mov	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	e04a      	b.n	80047f0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800475a:	4b30      	ldr	r3, [pc, #192]	; (800481c <HAL_RCC_GetSysClockFreq+0x160>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	099b      	lsrs	r3, r3, #6
 8004760:	461a      	mov	r2, r3
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	f240 10ff 	movw	r0, #511	; 0x1ff
 800476a:	f04f 0100 	mov.w	r1, #0
 800476e:	ea02 0400 	and.w	r4, r2, r0
 8004772:	ea03 0501 	and.w	r5, r3, r1
 8004776:	4620      	mov	r0, r4
 8004778:	4629      	mov	r1, r5
 800477a:	f04f 0200 	mov.w	r2, #0
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	014b      	lsls	r3, r1, #5
 8004784:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004788:	0142      	lsls	r2, r0, #5
 800478a:	4610      	mov	r0, r2
 800478c:	4619      	mov	r1, r3
 800478e:	1b00      	subs	r0, r0, r4
 8004790:	eb61 0105 	sbc.w	r1, r1, r5
 8004794:	f04f 0200 	mov.w	r2, #0
 8004798:	f04f 0300 	mov.w	r3, #0
 800479c:	018b      	lsls	r3, r1, #6
 800479e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047a2:	0182      	lsls	r2, r0, #6
 80047a4:	1a12      	subs	r2, r2, r0
 80047a6:	eb63 0301 	sbc.w	r3, r3, r1
 80047aa:	f04f 0000 	mov.w	r0, #0
 80047ae:	f04f 0100 	mov.w	r1, #0
 80047b2:	00d9      	lsls	r1, r3, #3
 80047b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047b8:	00d0      	lsls	r0, r2, #3
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	1912      	adds	r2, r2, r4
 80047c0:	eb45 0303 	adc.w	r3, r5, r3
 80047c4:	f04f 0000 	mov.w	r0, #0
 80047c8:	f04f 0100 	mov.w	r1, #0
 80047cc:	0299      	lsls	r1, r3, #10
 80047ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80047d2:	0290      	lsls	r0, r2, #10
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4610      	mov	r0, r2
 80047da:	4619      	mov	r1, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	461a      	mov	r2, r3
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	f7fb fd30 	bl	8000248 <__aeabi_uldivmod>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4613      	mov	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80047f0:	4b0a      	ldr	r3, [pc, #40]	; (800481c <HAL_RCC_GetSysClockFreq+0x160>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	0c1b      	lsrs	r3, r3, #16
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	3301      	adds	r3, #1
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	fbb2 f3f3 	udiv	r3, r2, r3
 8004808:	60bb      	str	r3, [r7, #8]
      break;
 800480a:	e002      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800480c:	4b04      	ldr	r3, [pc, #16]	; (8004820 <HAL_RCC_GetSysClockFreq+0x164>)
 800480e:	60bb      	str	r3, [r7, #8]
      break;
 8004810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004812:	68bb      	ldr	r3, [r7, #8]
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bdb0      	pop	{r4, r5, r7, pc}
 800481c:	40023800 	.word	0x40023800
 8004820:	00f42400 	.word	0x00f42400
 8004824:	017d7840 	.word	0x017d7840

08004828 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800482c:	4b03      	ldr	r3, [pc, #12]	; (800483c <HAL_RCC_GetHCLKFreq+0x14>)
 800482e:	681b      	ldr	r3, [r3, #0]
}
 8004830:	4618      	mov	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	20000000 	.word	0x20000000

08004840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004844:	f7ff fff0 	bl	8004828 <HAL_RCC_GetHCLKFreq>
 8004848:	4602      	mov	r2, r0
 800484a:	4b05      	ldr	r3, [pc, #20]	; (8004860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	0a9b      	lsrs	r3, r3, #10
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	4903      	ldr	r1, [pc, #12]	; (8004864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004856:	5ccb      	ldrb	r3, [r1, r3]
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800485c:	4618      	mov	r0, r3
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40023800 	.word	0x40023800
 8004864:	0800676c 	.word	0x0800676c

08004868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800486c:	f7ff ffdc 	bl	8004828 <HAL_RCC_GetHCLKFreq>
 8004870:	4602      	mov	r2, r0
 8004872:	4b05      	ldr	r3, [pc, #20]	; (8004888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	0b5b      	lsrs	r3, r3, #13
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	4903      	ldr	r1, [pc, #12]	; (800488c <HAL_RCC_GetPCLK2Freq+0x24>)
 800487e:	5ccb      	ldrb	r3, [r1, r3]
 8004880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004884:	4618      	mov	r0, r3
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40023800 	.word	0x40023800
 800488c:	0800676c 	.word	0x0800676c

08004890 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800489c:	2300      	movs	r3, #0
 800489e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80048a0:	2300      	movs	r3, #0
 80048a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80048a4:	2300      	movs	r3, #0
 80048a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80048a8:	2300      	movs	r3, #0
 80048aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d012      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80048b8:	4b69      	ldr	r3, [pc, #420]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	4a68      	ldr	r2, [pc, #416]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80048c2:	6093      	str	r3, [r2, #8]
 80048c4:	4b66      	ldr	r3, [pc, #408]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048cc:	4964      	ldr	r1, [pc, #400]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80048da:	2301      	movs	r3, #1
 80048dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d017      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048ea:	4b5d      	ldr	r3, [pc, #372]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f8:	4959      	ldr	r1, [pc, #356]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004904:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004908:	d101      	bne.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800490a:	2301      	movs	r3, #1
 800490c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004916:	2301      	movs	r3, #1
 8004918:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d017      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004926:	4b4e      	ldr	r3, [pc, #312]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800492c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	494a      	ldr	r1, [pc, #296]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004944:	d101      	bne.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004946:	2301      	movs	r3, #1
 8004948:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004952:	2301      	movs	r3, #1
 8004954:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004962:	2301      	movs	r3, #1
 8004964:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 808b 	beq.w	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004974:	4b3a      	ldr	r3, [pc, #232]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004978:	4a39      	ldr	r2, [pc, #228]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800497e:	6413      	str	r3, [r2, #64]	; 0x40
 8004980:	4b37      	ldr	r3, [pc, #220]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004988:	60bb      	str	r3, [r7, #8]
 800498a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800498c:	4b35      	ldr	r3, [pc, #212]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a34      	ldr	r2, [pc, #208]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004996:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004998:	f7fd fcae 	bl	80022f8 <HAL_GetTick>
 800499c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800499e:	e008      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a0:	f7fd fcaa 	bl	80022f8 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b64      	cmp	r3, #100	; 0x64
 80049ac:	d901      	bls.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e38f      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80049b2:	4b2c      	ldr	r3, [pc, #176]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0f0      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049be:	4b28      	ldr	r3, [pc, #160]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d035      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d02e      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049dc:	4b20      	ldr	r3, [pc, #128]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049e6:	4b1e      	ldr	r3, [pc, #120]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ea:	4a1d      	ldr	r2, [pc, #116]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049f2:	4b1b      	ldr	r3, [pc, #108]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f6:	4a1a      	ldr	r2, [pc, #104]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80049fe:	4a18      	ldr	r2, [pc, #96]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a04:	4b16      	ldr	r3, [pc, #88]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d114      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a10:	f7fd fc72 	bl	80022f8 <HAL_GetTick>
 8004a14:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a16:	e00a      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a18:	f7fd fc6e 	bl	80022f8 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e351      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a2e:	4b0c      	ldr	r3, [pc, #48]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0ee      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a46:	d111      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a54:	4b04      	ldr	r3, [pc, #16]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a56:	400b      	ands	r3, r1
 8004a58:	4901      	ldr	r1, [pc, #4]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	608b      	str	r3, [r1, #8]
 8004a5e:	e00b      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004a60:	40023800 	.word	0x40023800
 8004a64:	40007000 	.word	0x40007000
 8004a68:	0ffffcff 	.word	0x0ffffcff
 8004a6c:	4bb3      	ldr	r3, [pc, #716]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	4ab2      	ldr	r2, [pc, #712]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a76:	6093      	str	r3, [r2, #8]
 8004a78:	4bb0      	ldr	r3, [pc, #704]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a84:	49ad      	ldr	r1, [pc, #692]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0310 	and.w	r3, r3, #16
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d010      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a96:	4ba9      	ldr	r3, [pc, #676]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a9c:	4aa7      	ldr	r2, [pc, #668]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aa2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004aa6:	4ba5      	ldr	r3, [pc, #660]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004aa8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	49a2      	ldr	r1, [pc, #648]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00a      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ac4:	4b9d      	ldr	r3, [pc, #628]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ad2:	499a      	ldr	r1, [pc, #616]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ae6:	4b95      	ldr	r3, [pc, #596]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004af4:	4991      	ldr	r1, [pc, #580]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00a      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b08:	4b8c      	ldr	r3, [pc, #560]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b16:	4989      	ldr	r1, [pc, #548]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b2a:	4b84      	ldr	r3, [pc, #528]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b38:	4980      	ldr	r1, [pc, #512]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00a      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b4c:	4b7b      	ldr	r3, [pc, #492]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b52:	f023 0203 	bic.w	r2, r3, #3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5a:	4978      	ldr	r1, [pc, #480]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b6e:	4b73      	ldr	r3, [pc, #460]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b74:	f023 020c 	bic.w	r2, r3, #12
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7c:	496f      	ldr	r1, [pc, #444]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00a      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b90:	4b6a      	ldr	r3, [pc, #424]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9e:	4967      	ldr	r1, [pc, #412]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bb2:	4b62      	ldr	r3, [pc, #392]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc0:	495e      	ldr	r1, [pc, #376]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00a      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004bd4:	4b59      	ldr	r3, [pc, #356]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be2:	4956      	ldr	r1, [pc, #344]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004bf6:	4b51      	ldr	r3, [pc, #324]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c04:	494d      	ldr	r1, [pc, #308]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00a      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004c18:	4b48      	ldr	r3, [pc, #288]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c26:	4945      	ldr	r1, [pc, #276]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004c3a:	4b40      	ldr	r3, [pc, #256]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c48:	493c      	ldr	r1, [pc, #240]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c5c:	4b37      	ldr	r3, [pc, #220]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c62:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c6a:	4934      	ldr	r1, [pc, #208]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d011      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c7e:	4b2f      	ldr	r3, [pc, #188]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c84:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c8c:	492b      	ldr	r1, [pc, #172]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c9c:	d101      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cbe:	4b1f      	ldr	r3, [pc, #124]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ccc:	491b      	ldr	r1, [pc, #108]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00b      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ce0:	4b16      	ldr	r3, [pc, #88]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cf0:	4912      	ldr	r1, [pc, #72]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00b      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004d04:	4b0d      	ldr	r3, [pc, #52]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d14:	4909      	ldr	r1, [pc, #36]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00f      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d28:	4b04      	ldr	r3, [pc, #16]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d2e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d38:	e002      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004d3a:	bf00      	nop
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	4986      	ldr	r1, [pc, #536]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00b      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004d54:	4b81      	ldr	r3, [pc, #516]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d5a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d64:	497d      	ldr	r1, [pc, #500]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d006      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 80d6 	beq.w	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d80:	4b76      	ldr	r3, [pc, #472]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a75      	ldr	r2, [pc, #468]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d8c:	f7fd fab4 	bl	80022f8 <HAL_GetTick>
 8004d90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d94:	f7fd fab0 	bl	80022f8 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b64      	cmp	r3, #100	; 0x64
 8004da0:	d901      	bls.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e195      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004da6:	4b6d      	ldr	r3, [pc, #436]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1f0      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d021      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d11d      	bne.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004dc6:	4b65      	ldr	r3, [pc, #404]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dcc:	0c1b      	lsrs	r3, r3, #16
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004dd4:	4b61      	ldr	r3, [pc, #388]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dda:	0e1b      	lsrs	r3, r3, #24
 8004ddc:	f003 030f 	and.w	r3, r3, #15
 8004de0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	019a      	lsls	r2, r3, #6
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	041b      	lsls	r3, r3, #16
 8004dec:	431a      	orrs	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	061b      	lsls	r3, r3, #24
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	071b      	lsls	r3, r3, #28
 8004dfa:	4958      	ldr	r1, [pc, #352]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d004      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e16:	d00a      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d02e      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e2c:	d129      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e2e:	4b4b      	ldr	r3, [pc, #300]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e34:	0c1b      	lsrs	r3, r3, #16
 8004e36:	f003 0303 	and.w	r3, r3, #3
 8004e3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e3c:	4b47      	ldr	r3, [pc, #284]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e42:	0f1b      	lsrs	r3, r3, #28
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	019a      	lsls	r2, r3, #6
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	041b      	lsls	r3, r3, #16
 8004e54:	431a      	orrs	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	061b      	lsls	r3, r3, #24
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	071b      	lsls	r3, r3, #28
 8004e62:	493e      	ldr	r1, [pc, #248]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e6a:	4b3c      	ldr	r3, [pc, #240]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e70:	f023 021f 	bic.w	r2, r3, #31
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	4938      	ldr	r1, [pc, #224]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01d      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e8e:	4b33      	ldr	r3, [pc, #204]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e94:	0e1b      	lsrs	r3, r3, #24
 8004e96:	f003 030f 	and.w	r3, r3, #15
 8004e9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e9c:	4b2f      	ldr	r3, [pc, #188]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ea2:	0f1b      	lsrs	r3, r3, #28
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	019a      	lsls	r2, r3, #6
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	041b      	lsls	r3, r3, #16
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	061b      	lsls	r3, r3, #24
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	071b      	lsls	r3, r3, #28
 8004ec2:	4926      	ldr	r1, [pc, #152]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d011      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	019a      	lsls	r2, r3, #6
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	041b      	lsls	r3, r3, #16
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	061b      	lsls	r3, r3, #24
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	071b      	lsls	r3, r3, #28
 8004ef2:	491a      	ldr	r1, [pc, #104]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004efa:	4b18      	ldr	r3, [pc, #96]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a17      	ldr	r2, [pc, #92]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f06:	f7fd f9f7 	bl	80022f8 <HAL_GetTick>
 8004f0a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f0e:	f7fd f9f3 	bl	80022f8 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b64      	cmp	r3, #100	; 0x64
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e0d8      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f20:	4b0e      	ldr	r3, [pc, #56]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0f0      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	f040 80ce 	bne.w	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f34:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a08      	ldr	r2, [pc, #32]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f40:	f7fd f9da 	bl	80022f8 <HAL_GetTick>
 8004f44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f46:	e00b      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f48:	f7fd f9d6 	bl	80022f8 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b64      	cmp	r3, #100	; 0x64
 8004f54:	d904      	bls.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e0bb      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004f5a:	bf00      	nop
 8004f5c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f60:	4b5e      	ldr	r3, [pc, #376]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f6c:	d0ec      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d009      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d02e      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d12a      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f96:	4b51      	ldr	r3, [pc, #324]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9c:	0c1b      	lsrs	r3, r3, #16
 8004f9e:	f003 0303 	and.w	r3, r3, #3
 8004fa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fa4:	4b4d      	ldr	r3, [pc, #308]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004faa:	0f1b      	lsrs	r3, r3, #28
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	019a      	lsls	r2, r3, #6
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	041b      	lsls	r3, r3, #16
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	061b      	lsls	r3, r3, #24
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	071b      	lsls	r3, r3, #28
 8004fca:	4944      	ldr	r1, [pc, #272]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004fd2:	4b42      	ldr	r3, [pc, #264]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fd8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	021b      	lsls	r3, r3, #8
 8004fe4:	493d      	ldr	r1, [pc, #244]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d022      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ffc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005000:	d11d      	bne.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005002:	4b36      	ldr	r3, [pc, #216]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005008:	0e1b      	lsrs	r3, r3, #24
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005010:	4b32      	ldr	r3, [pc, #200]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005016:	0f1b      	lsrs	r3, r3, #28
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	019a      	lsls	r2, r3, #6
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	041b      	lsls	r3, r3, #16
 800502a:	431a      	orrs	r2, r3
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	061b      	lsls	r3, r3, #24
 8005030:	431a      	orrs	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	071b      	lsls	r3, r3, #28
 8005036:	4929      	ldr	r1, [pc, #164]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005038:	4313      	orrs	r3, r2
 800503a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d028      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800504a:	4b24      	ldr	r3, [pc, #144]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800504c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005050:	0e1b      	lsrs	r3, r3, #24
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005058:	4b20      	ldr	r3, [pc, #128]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800505a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505e:	0c1b      	lsrs	r3, r3, #16
 8005060:	f003 0303 	and.w	r3, r3, #3
 8005064:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	019a      	lsls	r2, r3, #6
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	041b      	lsls	r3, r3, #16
 8005070:	431a      	orrs	r2, r3
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	061b      	lsls	r3, r3, #24
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	071b      	lsls	r3, r3, #28
 800507e:	4917      	ldr	r1, [pc, #92]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005080:	4313      	orrs	r3, r2
 8005082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005086:	4b15      	ldr	r3, [pc, #84]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800508c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005094:	4911      	ldr	r1, [pc, #68]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005096:	4313      	orrs	r3, r2
 8005098:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800509c:	4b0f      	ldr	r3, [pc, #60]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a0e      	ldr	r2, [pc, #56]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a8:	f7fd f926 	bl	80022f8 <HAL_GetTick>
 80050ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050ae:	e008      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050b0:	f7fd f922 	bl	80022f8 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b64      	cmp	r3, #100	; 0x64
 80050bc:	d901      	bls.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e007      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050c2:	4b06      	ldr	r3, [pc, #24]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050ce:	d1ef      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3720      	adds	r7, #32
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40023800 	.word	0x40023800

080050e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e049      	b.n	8005186 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7fc ffe2 	bl	80020d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3304      	adds	r3, #4
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f000 fa66 	bl	80055f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d001      	beq.n	80051a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e04c      	b.n	8005242 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a26      	ldr	r2, [pc, #152]	; (8005250 <HAL_TIM_Base_Start+0xc0>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d022      	beq.n	8005200 <HAL_TIM_Base_Start+0x70>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c2:	d01d      	beq.n	8005200 <HAL_TIM_Base_Start+0x70>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a22      	ldr	r2, [pc, #136]	; (8005254 <HAL_TIM_Base_Start+0xc4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d018      	beq.n	8005200 <HAL_TIM_Base_Start+0x70>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a21      	ldr	r2, [pc, #132]	; (8005258 <HAL_TIM_Base_Start+0xc8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d013      	beq.n	8005200 <HAL_TIM_Base_Start+0x70>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a1f      	ldr	r2, [pc, #124]	; (800525c <HAL_TIM_Base_Start+0xcc>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d00e      	beq.n	8005200 <HAL_TIM_Base_Start+0x70>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a1e      	ldr	r2, [pc, #120]	; (8005260 <HAL_TIM_Base_Start+0xd0>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d009      	beq.n	8005200 <HAL_TIM_Base_Start+0x70>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a1c      	ldr	r2, [pc, #112]	; (8005264 <HAL_TIM_Base_Start+0xd4>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d004      	beq.n	8005200 <HAL_TIM_Base_Start+0x70>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a1b      	ldr	r2, [pc, #108]	; (8005268 <HAL_TIM_Base_Start+0xd8>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d115      	bne.n	800522c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	4b19      	ldr	r3, [pc, #100]	; (800526c <HAL_TIM_Base_Start+0xdc>)
 8005208:	4013      	ands	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2b06      	cmp	r3, #6
 8005210:	d015      	beq.n	800523e <HAL_TIM_Base_Start+0xae>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005218:	d011      	beq.n	800523e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f042 0201 	orr.w	r2, r2, #1
 8005228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800522a:	e008      	b.n	800523e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	e000      	b.n	8005240 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800523e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40010000 	.word	0x40010000
 8005254:	40000400 	.word	0x40000400
 8005258:	40000800 	.word	0x40000800
 800525c:	40000c00 	.word	0x40000c00
 8005260:	40010400 	.word	0x40010400
 8005264:	40014000 	.word	0x40014000
 8005268:	40001800 	.word	0x40001800
 800526c:	00010007 	.word	0x00010007

08005270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b01      	cmp	r3, #1
 8005282:	d001      	beq.n	8005288 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e054      	b.n	8005332 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a26      	ldr	r2, [pc, #152]	; (8005340 <HAL_TIM_Base_Start_IT+0xd0>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d022      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x80>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b2:	d01d      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x80>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a22      	ldr	r2, [pc, #136]	; (8005344 <HAL_TIM_Base_Start_IT+0xd4>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d018      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x80>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a21      	ldr	r2, [pc, #132]	; (8005348 <HAL_TIM_Base_Start_IT+0xd8>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d013      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x80>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a1f      	ldr	r2, [pc, #124]	; (800534c <HAL_TIM_Base_Start_IT+0xdc>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d00e      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x80>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a1e      	ldr	r2, [pc, #120]	; (8005350 <HAL_TIM_Base_Start_IT+0xe0>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d009      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x80>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a1c      	ldr	r2, [pc, #112]	; (8005354 <HAL_TIM_Base_Start_IT+0xe4>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d004      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x80>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a1b      	ldr	r2, [pc, #108]	; (8005358 <HAL_TIM_Base_Start_IT+0xe8>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d115      	bne.n	800531c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689a      	ldr	r2, [r3, #8]
 80052f6:	4b19      	ldr	r3, [pc, #100]	; (800535c <HAL_TIM_Base_Start_IT+0xec>)
 80052f8:	4013      	ands	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b06      	cmp	r3, #6
 8005300:	d015      	beq.n	800532e <HAL_TIM_Base_Start_IT+0xbe>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005308:	d011      	beq.n	800532e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f042 0201 	orr.w	r2, r2, #1
 8005318:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531a:	e008      	b.n	800532e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0201 	orr.w	r2, r2, #1
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	e000      	b.n	8005330 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800532e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40010000 	.word	0x40010000
 8005344:	40000400 	.word	0x40000400
 8005348:	40000800 	.word	0x40000800
 800534c:	40000c00 	.word	0x40000c00
 8005350:	40010400 	.word	0x40010400
 8005354:	40014000 	.word	0x40014000
 8005358:	40001800 	.word	0x40001800
 800535c:	00010007 	.word	0x00010007

08005360 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b02      	cmp	r3, #2
 8005374:	d122      	bne.n	80053bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b02      	cmp	r3, #2
 8005382:	d11b      	bne.n	80053bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f06f 0202 	mvn.w	r2, #2
 800538c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f905 	bl	80055b2 <HAL_TIM_IC_CaptureCallback>
 80053a8:	e005      	b.n	80053b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f8f7 	bl	800559e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f908 	bl	80055c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f003 0304 	and.w	r3, r3, #4
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d122      	bne.n	8005410 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b04      	cmp	r3, #4
 80053d6:	d11b      	bne.n	8005410 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f06f 0204 	mvn.w	r2, #4
 80053e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2202      	movs	r2, #2
 80053e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f8db 	bl	80055b2 <HAL_TIM_IC_CaptureCallback>
 80053fc:	e005      	b.n	800540a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f8cd 	bl	800559e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f8de 	bl	80055c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f003 0308 	and.w	r3, r3, #8
 800541a:	2b08      	cmp	r3, #8
 800541c:	d122      	bne.n	8005464 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f003 0308 	and.w	r3, r3, #8
 8005428:	2b08      	cmp	r3, #8
 800542a:	d11b      	bne.n	8005464 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f06f 0208 	mvn.w	r2, #8
 8005434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2204      	movs	r2, #4
 800543a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	f003 0303 	and.w	r3, r3, #3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f8b1 	bl	80055b2 <HAL_TIM_IC_CaptureCallback>
 8005450:	e005      	b.n	800545e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f8a3 	bl	800559e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f8b4 	bl	80055c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f003 0310 	and.w	r3, r3, #16
 800546e:	2b10      	cmp	r3, #16
 8005470:	d122      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f003 0310 	and.w	r3, r3, #16
 800547c:	2b10      	cmp	r3, #16
 800547e:	d11b      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f06f 0210 	mvn.w	r2, #16
 8005488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2208      	movs	r2, #8
 800548e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f887 	bl	80055b2 <HAL_TIM_IC_CaptureCallback>
 80054a4:	e005      	b.n	80054b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f879 	bl	800559e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f88a 	bl	80055c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d10e      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d107      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0201 	mvn.w	r2, #1
 80054dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7fc fd14 	bl	8001f0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ee:	2b80      	cmp	r3, #128	; 0x80
 80054f0:	d10e      	bne.n	8005510 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fc:	2b80      	cmp	r3, #128	; 0x80
 80054fe:	d107      	bne.n	8005510 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f9a8 	bl	8005860 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800551e:	d10e      	bne.n	800553e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552a:	2b80      	cmp	r3, #128	; 0x80
 800552c:	d107      	bne.n	800553e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f99b 	bl	8005874 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005548:	2b40      	cmp	r3, #64	; 0x40
 800554a:	d10e      	bne.n	800556a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005556:	2b40      	cmp	r3, #64	; 0x40
 8005558:	d107      	bne.n	800556a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f838 	bl	80055da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	f003 0320 	and.w	r3, r3, #32
 8005574:	2b20      	cmp	r3, #32
 8005576:	d10e      	bne.n	8005596 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f003 0320 	and.w	r3, r3, #32
 8005582:	2b20      	cmp	r3, #32
 8005584:	d107      	bne.n	8005596 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f06f 0220 	mvn.w	r2, #32
 800558e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f95b 	bl	800584c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005596:	bf00      	nop
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055ba:	bf00      	nop
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
	...

080055f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a40      	ldr	r2, [pc, #256]	; (8005704 <TIM_Base_SetConfig+0x114>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d013      	beq.n	8005630 <TIM_Base_SetConfig+0x40>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800560e:	d00f      	beq.n	8005630 <TIM_Base_SetConfig+0x40>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a3d      	ldr	r2, [pc, #244]	; (8005708 <TIM_Base_SetConfig+0x118>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d00b      	beq.n	8005630 <TIM_Base_SetConfig+0x40>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a3c      	ldr	r2, [pc, #240]	; (800570c <TIM_Base_SetConfig+0x11c>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d007      	beq.n	8005630 <TIM_Base_SetConfig+0x40>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a3b      	ldr	r2, [pc, #236]	; (8005710 <TIM_Base_SetConfig+0x120>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d003      	beq.n	8005630 <TIM_Base_SetConfig+0x40>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a3a      	ldr	r2, [pc, #232]	; (8005714 <TIM_Base_SetConfig+0x124>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d108      	bne.n	8005642 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	4313      	orrs	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a2f      	ldr	r2, [pc, #188]	; (8005704 <TIM_Base_SetConfig+0x114>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d02b      	beq.n	80056a2 <TIM_Base_SetConfig+0xb2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005650:	d027      	beq.n	80056a2 <TIM_Base_SetConfig+0xb2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a2c      	ldr	r2, [pc, #176]	; (8005708 <TIM_Base_SetConfig+0x118>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d023      	beq.n	80056a2 <TIM_Base_SetConfig+0xb2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a2b      	ldr	r2, [pc, #172]	; (800570c <TIM_Base_SetConfig+0x11c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d01f      	beq.n	80056a2 <TIM_Base_SetConfig+0xb2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a2a      	ldr	r2, [pc, #168]	; (8005710 <TIM_Base_SetConfig+0x120>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d01b      	beq.n	80056a2 <TIM_Base_SetConfig+0xb2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a29      	ldr	r2, [pc, #164]	; (8005714 <TIM_Base_SetConfig+0x124>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d017      	beq.n	80056a2 <TIM_Base_SetConfig+0xb2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a28      	ldr	r2, [pc, #160]	; (8005718 <TIM_Base_SetConfig+0x128>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d013      	beq.n	80056a2 <TIM_Base_SetConfig+0xb2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a27      	ldr	r2, [pc, #156]	; (800571c <TIM_Base_SetConfig+0x12c>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d00f      	beq.n	80056a2 <TIM_Base_SetConfig+0xb2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a26      	ldr	r2, [pc, #152]	; (8005720 <TIM_Base_SetConfig+0x130>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d00b      	beq.n	80056a2 <TIM_Base_SetConfig+0xb2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a25      	ldr	r2, [pc, #148]	; (8005724 <TIM_Base_SetConfig+0x134>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d007      	beq.n	80056a2 <TIM_Base_SetConfig+0xb2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a24      	ldr	r2, [pc, #144]	; (8005728 <TIM_Base_SetConfig+0x138>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d003      	beq.n	80056a2 <TIM_Base_SetConfig+0xb2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a23      	ldr	r2, [pc, #140]	; (800572c <TIM_Base_SetConfig+0x13c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d108      	bne.n	80056b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	4313      	orrs	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a0a      	ldr	r2, [pc, #40]	; (8005704 <TIM_Base_SetConfig+0x114>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d003      	beq.n	80056e8 <TIM_Base_SetConfig+0xf8>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a0c      	ldr	r2, [pc, #48]	; (8005714 <TIM_Base_SetConfig+0x124>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d103      	bne.n	80056f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	691a      	ldr	r2, [r3, #16]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	615a      	str	r2, [r3, #20]
}
 80056f6:	bf00      	nop
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	40010000 	.word	0x40010000
 8005708:	40000400 	.word	0x40000400
 800570c:	40000800 	.word	0x40000800
 8005710:	40000c00 	.word	0x40000c00
 8005714:	40010400 	.word	0x40010400
 8005718:	40014000 	.word	0x40014000
 800571c:	40014400 	.word	0x40014400
 8005720:	40014800 	.word	0x40014800
 8005724:	40001800 	.word	0x40001800
 8005728:	40001c00 	.word	0x40001c00
 800572c:	40002000 	.word	0x40002000

08005730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005744:	2302      	movs	r3, #2
 8005746:	e06d      	b.n	8005824 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a30      	ldr	r2, [pc, #192]	; (8005830 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d004      	beq.n	800577c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a2f      	ldr	r2, [pc, #188]	; (8005834 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d108      	bne.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005782:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005794:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4313      	orrs	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a20      	ldr	r2, [pc, #128]	; (8005830 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d022      	beq.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ba:	d01d      	beq.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a1d      	ldr	r2, [pc, #116]	; (8005838 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d018      	beq.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a1c      	ldr	r2, [pc, #112]	; (800583c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d013      	beq.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a1a      	ldr	r2, [pc, #104]	; (8005840 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d00e      	beq.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a15      	ldr	r2, [pc, #84]	; (8005834 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d009      	beq.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a16      	ldr	r2, [pc, #88]	; (8005844 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d004      	beq.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a15      	ldr	r2, [pc, #84]	; (8005848 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d10c      	bne.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	4313      	orrs	r3, r2
 8005808:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	40010000 	.word	0x40010000
 8005834:	40010400 	.word	0x40010400
 8005838:	40000400 	.word	0x40000400
 800583c:	40000800 	.word	0x40000800
 8005840:	40000c00 	.word	0x40000c00
 8005844:	40014000 	.word	0x40014000
 8005848:	40001800 	.word	0x40001800

0800584c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e040      	b.n	800591c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d106      	bne.n	80058b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7fc fc66 	bl	800217c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2224      	movs	r2, #36	; 0x24
 80058b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0201 	bic.w	r2, r2, #1
 80058c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f8c0 	bl	8005a4c <UART_SetConfig>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d101      	bne.n	80058d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e022      	b.n	800591c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fb16 	bl	8005f10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005902:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0201 	orr.w	r2, r2, #1
 8005912:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fb9d 	bl	8006054 <UART_CheckIdleState>
 800591a:	4603      	mov	r3, r0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08a      	sub	sp, #40	; 0x28
 8005928:	af02      	add	r7, sp, #8
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	603b      	str	r3, [r7, #0]
 8005930:	4613      	mov	r3, r2
 8005932:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005938:	2b20      	cmp	r3, #32
 800593a:	f040 8081 	bne.w	8005a40 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <HAL_UART_Transmit+0x26>
 8005944:	88fb      	ldrh	r3, [r7, #6]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e079      	b.n	8005a42 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005954:	2b01      	cmp	r3, #1
 8005956:	d101      	bne.n	800595c <HAL_UART_Transmit+0x38>
 8005958:	2302      	movs	r3, #2
 800595a:	e072      	b.n	8005a42 <HAL_UART_Transmit+0x11e>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2221      	movs	r2, #33	; 0x21
 8005970:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005972:	f7fc fcc1 	bl	80022f8 <HAL_GetTick>
 8005976:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	88fa      	ldrh	r2, [r7, #6]
 800597c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	88fa      	ldrh	r2, [r7, #6]
 8005984:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005990:	d108      	bne.n	80059a4 <HAL_UART_Transmit+0x80>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d104      	bne.n	80059a4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800599a:	2300      	movs	r3, #0
 800599c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	61bb      	str	r3, [r7, #24]
 80059a2:	e003      	b.n	80059ac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059a8:	2300      	movs	r3, #0
 80059aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80059b4:	e02c      	b.n	8005a10 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2200      	movs	r2, #0
 80059be:	2180      	movs	r1, #128	; 0x80
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f000 fb90 	bl	80060e6 <UART_WaitOnFlagUntilTimeout>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d001      	beq.n	80059d0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e038      	b.n	8005a42 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10b      	bne.n	80059ee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	461a      	mov	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	3302      	adds	r3, #2
 80059ea:	61bb      	str	r3, [r7, #24]
 80059ec:	e007      	b.n	80059fe <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	781a      	ldrb	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	3301      	adds	r3, #1
 80059fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1cc      	bne.n	80059b6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	2200      	movs	r2, #0
 8005a24:	2140      	movs	r1, #64	; 0x40
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 fb5d 	bl	80060e6 <UART_WaitOnFlagUntilTimeout>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e005      	b.n	8005a42 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	e000      	b.n	8005a42 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005a40:	2302      	movs	r3, #2
  }
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3720      	adds	r7, #32
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b088      	sub	sp, #32
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	431a      	orrs	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	431a      	orrs	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	69db      	ldr	r3, [r3, #28]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	4ba7      	ldr	r3, [pc, #668]	; (8005d14 <UART_SetConfig+0x2c8>)
 8005a78:	4013      	ands	r3, r2
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6812      	ldr	r2, [r2, #0]
 8005a7e:	6979      	ldr	r1, [r7, #20]
 8005a80:	430b      	orrs	r3, r1
 8005a82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a95      	ldr	r2, [pc, #596]	; (8005d18 <UART_SetConfig+0x2cc>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d120      	bne.n	8005b0a <UART_SetConfig+0xbe>
 8005ac8:	4b94      	ldr	r3, [pc, #592]	; (8005d1c <UART_SetConfig+0x2d0>)
 8005aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ace:	f003 0303 	and.w	r3, r3, #3
 8005ad2:	2b03      	cmp	r3, #3
 8005ad4:	d816      	bhi.n	8005b04 <UART_SetConfig+0xb8>
 8005ad6:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <UART_SetConfig+0x90>)
 8005ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005adc:	08005aed 	.word	0x08005aed
 8005ae0:	08005af9 	.word	0x08005af9
 8005ae4:	08005af3 	.word	0x08005af3
 8005ae8:	08005aff 	.word	0x08005aff
 8005aec:	2301      	movs	r3, #1
 8005aee:	77fb      	strb	r3, [r7, #31]
 8005af0:	e14f      	b.n	8005d92 <UART_SetConfig+0x346>
 8005af2:	2302      	movs	r3, #2
 8005af4:	77fb      	strb	r3, [r7, #31]
 8005af6:	e14c      	b.n	8005d92 <UART_SetConfig+0x346>
 8005af8:	2304      	movs	r3, #4
 8005afa:	77fb      	strb	r3, [r7, #31]
 8005afc:	e149      	b.n	8005d92 <UART_SetConfig+0x346>
 8005afe:	2308      	movs	r3, #8
 8005b00:	77fb      	strb	r3, [r7, #31]
 8005b02:	e146      	b.n	8005d92 <UART_SetConfig+0x346>
 8005b04:	2310      	movs	r3, #16
 8005b06:	77fb      	strb	r3, [r7, #31]
 8005b08:	e143      	b.n	8005d92 <UART_SetConfig+0x346>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a84      	ldr	r2, [pc, #528]	; (8005d20 <UART_SetConfig+0x2d4>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d132      	bne.n	8005b7a <UART_SetConfig+0x12e>
 8005b14:	4b81      	ldr	r3, [pc, #516]	; (8005d1c <UART_SetConfig+0x2d0>)
 8005b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1a:	f003 030c 	and.w	r3, r3, #12
 8005b1e:	2b0c      	cmp	r3, #12
 8005b20:	d828      	bhi.n	8005b74 <UART_SetConfig+0x128>
 8005b22:	a201      	add	r2, pc, #4	; (adr r2, 8005b28 <UART_SetConfig+0xdc>)
 8005b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b28:	08005b5d 	.word	0x08005b5d
 8005b2c:	08005b75 	.word	0x08005b75
 8005b30:	08005b75 	.word	0x08005b75
 8005b34:	08005b75 	.word	0x08005b75
 8005b38:	08005b69 	.word	0x08005b69
 8005b3c:	08005b75 	.word	0x08005b75
 8005b40:	08005b75 	.word	0x08005b75
 8005b44:	08005b75 	.word	0x08005b75
 8005b48:	08005b63 	.word	0x08005b63
 8005b4c:	08005b75 	.word	0x08005b75
 8005b50:	08005b75 	.word	0x08005b75
 8005b54:	08005b75 	.word	0x08005b75
 8005b58:	08005b6f 	.word	0x08005b6f
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	77fb      	strb	r3, [r7, #31]
 8005b60:	e117      	b.n	8005d92 <UART_SetConfig+0x346>
 8005b62:	2302      	movs	r3, #2
 8005b64:	77fb      	strb	r3, [r7, #31]
 8005b66:	e114      	b.n	8005d92 <UART_SetConfig+0x346>
 8005b68:	2304      	movs	r3, #4
 8005b6a:	77fb      	strb	r3, [r7, #31]
 8005b6c:	e111      	b.n	8005d92 <UART_SetConfig+0x346>
 8005b6e:	2308      	movs	r3, #8
 8005b70:	77fb      	strb	r3, [r7, #31]
 8005b72:	e10e      	b.n	8005d92 <UART_SetConfig+0x346>
 8005b74:	2310      	movs	r3, #16
 8005b76:	77fb      	strb	r3, [r7, #31]
 8005b78:	e10b      	b.n	8005d92 <UART_SetConfig+0x346>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a69      	ldr	r2, [pc, #420]	; (8005d24 <UART_SetConfig+0x2d8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d120      	bne.n	8005bc6 <UART_SetConfig+0x17a>
 8005b84:	4b65      	ldr	r3, [pc, #404]	; (8005d1c <UART_SetConfig+0x2d0>)
 8005b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b8e:	2b30      	cmp	r3, #48	; 0x30
 8005b90:	d013      	beq.n	8005bba <UART_SetConfig+0x16e>
 8005b92:	2b30      	cmp	r3, #48	; 0x30
 8005b94:	d814      	bhi.n	8005bc0 <UART_SetConfig+0x174>
 8005b96:	2b20      	cmp	r3, #32
 8005b98:	d009      	beq.n	8005bae <UART_SetConfig+0x162>
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	d810      	bhi.n	8005bc0 <UART_SetConfig+0x174>
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <UART_SetConfig+0x15c>
 8005ba2:	2b10      	cmp	r3, #16
 8005ba4:	d006      	beq.n	8005bb4 <UART_SetConfig+0x168>
 8005ba6:	e00b      	b.n	8005bc0 <UART_SetConfig+0x174>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	77fb      	strb	r3, [r7, #31]
 8005bac:	e0f1      	b.n	8005d92 <UART_SetConfig+0x346>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	77fb      	strb	r3, [r7, #31]
 8005bb2:	e0ee      	b.n	8005d92 <UART_SetConfig+0x346>
 8005bb4:	2304      	movs	r3, #4
 8005bb6:	77fb      	strb	r3, [r7, #31]
 8005bb8:	e0eb      	b.n	8005d92 <UART_SetConfig+0x346>
 8005bba:	2308      	movs	r3, #8
 8005bbc:	77fb      	strb	r3, [r7, #31]
 8005bbe:	e0e8      	b.n	8005d92 <UART_SetConfig+0x346>
 8005bc0:	2310      	movs	r3, #16
 8005bc2:	77fb      	strb	r3, [r7, #31]
 8005bc4:	e0e5      	b.n	8005d92 <UART_SetConfig+0x346>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a57      	ldr	r2, [pc, #348]	; (8005d28 <UART_SetConfig+0x2dc>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d120      	bne.n	8005c12 <UART_SetConfig+0x1c6>
 8005bd0:	4b52      	ldr	r3, [pc, #328]	; (8005d1c <UART_SetConfig+0x2d0>)
 8005bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005bda:	2bc0      	cmp	r3, #192	; 0xc0
 8005bdc:	d013      	beq.n	8005c06 <UART_SetConfig+0x1ba>
 8005bde:	2bc0      	cmp	r3, #192	; 0xc0
 8005be0:	d814      	bhi.n	8005c0c <UART_SetConfig+0x1c0>
 8005be2:	2b80      	cmp	r3, #128	; 0x80
 8005be4:	d009      	beq.n	8005bfa <UART_SetConfig+0x1ae>
 8005be6:	2b80      	cmp	r3, #128	; 0x80
 8005be8:	d810      	bhi.n	8005c0c <UART_SetConfig+0x1c0>
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <UART_SetConfig+0x1a8>
 8005bee:	2b40      	cmp	r3, #64	; 0x40
 8005bf0:	d006      	beq.n	8005c00 <UART_SetConfig+0x1b4>
 8005bf2:	e00b      	b.n	8005c0c <UART_SetConfig+0x1c0>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	77fb      	strb	r3, [r7, #31]
 8005bf8:	e0cb      	b.n	8005d92 <UART_SetConfig+0x346>
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	77fb      	strb	r3, [r7, #31]
 8005bfe:	e0c8      	b.n	8005d92 <UART_SetConfig+0x346>
 8005c00:	2304      	movs	r3, #4
 8005c02:	77fb      	strb	r3, [r7, #31]
 8005c04:	e0c5      	b.n	8005d92 <UART_SetConfig+0x346>
 8005c06:	2308      	movs	r3, #8
 8005c08:	77fb      	strb	r3, [r7, #31]
 8005c0a:	e0c2      	b.n	8005d92 <UART_SetConfig+0x346>
 8005c0c:	2310      	movs	r3, #16
 8005c0e:	77fb      	strb	r3, [r7, #31]
 8005c10:	e0bf      	b.n	8005d92 <UART_SetConfig+0x346>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a45      	ldr	r2, [pc, #276]	; (8005d2c <UART_SetConfig+0x2e0>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d125      	bne.n	8005c68 <UART_SetConfig+0x21c>
 8005c1c:	4b3f      	ldr	r3, [pc, #252]	; (8005d1c <UART_SetConfig+0x2d0>)
 8005c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c2a:	d017      	beq.n	8005c5c <UART_SetConfig+0x210>
 8005c2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c30:	d817      	bhi.n	8005c62 <UART_SetConfig+0x216>
 8005c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c36:	d00b      	beq.n	8005c50 <UART_SetConfig+0x204>
 8005c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c3c:	d811      	bhi.n	8005c62 <UART_SetConfig+0x216>
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <UART_SetConfig+0x1fe>
 8005c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c46:	d006      	beq.n	8005c56 <UART_SetConfig+0x20a>
 8005c48:	e00b      	b.n	8005c62 <UART_SetConfig+0x216>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	77fb      	strb	r3, [r7, #31]
 8005c4e:	e0a0      	b.n	8005d92 <UART_SetConfig+0x346>
 8005c50:	2302      	movs	r3, #2
 8005c52:	77fb      	strb	r3, [r7, #31]
 8005c54:	e09d      	b.n	8005d92 <UART_SetConfig+0x346>
 8005c56:	2304      	movs	r3, #4
 8005c58:	77fb      	strb	r3, [r7, #31]
 8005c5a:	e09a      	b.n	8005d92 <UART_SetConfig+0x346>
 8005c5c:	2308      	movs	r3, #8
 8005c5e:	77fb      	strb	r3, [r7, #31]
 8005c60:	e097      	b.n	8005d92 <UART_SetConfig+0x346>
 8005c62:	2310      	movs	r3, #16
 8005c64:	77fb      	strb	r3, [r7, #31]
 8005c66:	e094      	b.n	8005d92 <UART_SetConfig+0x346>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a30      	ldr	r2, [pc, #192]	; (8005d30 <UART_SetConfig+0x2e4>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d125      	bne.n	8005cbe <UART_SetConfig+0x272>
 8005c72:	4b2a      	ldr	r3, [pc, #168]	; (8005d1c <UART_SetConfig+0x2d0>)
 8005c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c80:	d017      	beq.n	8005cb2 <UART_SetConfig+0x266>
 8005c82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c86:	d817      	bhi.n	8005cb8 <UART_SetConfig+0x26c>
 8005c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c8c:	d00b      	beq.n	8005ca6 <UART_SetConfig+0x25a>
 8005c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c92:	d811      	bhi.n	8005cb8 <UART_SetConfig+0x26c>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <UART_SetConfig+0x254>
 8005c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c9c:	d006      	beq.n	8005cac <UART_SetConfig+0x260>
 8005c9e:	e00b      	b.n	8005cb8 <UART_SetConfig+0x26c>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	77fb      	strb	r3, [r7, #31]
 8005ca4:	e075      	b.n	8005d92 <UART_SetConfig+0x346>
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	77fb      	strb	r3, [r7, #31]
 8005caa:	e072      	b.n	8005d92 <UART_SetConfig+0x346>
 8005cac:	2304      	movs	r3, #4
 8005cae:	77fb      	strb	r3, [r7, #31]
 8005cb0:	e06f      	b.n	8005d92 <UART_SetConfig+0x346>
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	77fb      	strb	r3, [r7, #31]
 8005cb6:	e06c      	b.n	8005d92 <UART_SetConfig+0x346>
 8005cb8:	2310      	movs	r3, #16
 8005cba:	77fb      	strb	r3, [r7, #31]
 8005cbc:	e069      	b.n	8005d92 <UART_SetConfig+0x346>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a1c      	ldr	r2, [pc, #112]	; (8005d34 <UART_SetConfig+0x2e8>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d137      	bne.n	8005d38 <UART_SetConfig+0x2ec>
 8005cc8:	4b14      	ldr	r3, [pc, #80]	; (8005d1c <UART_SetConfig+0x2d0>)
 8005cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005cd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005cd6:	d017      	beq.n	8005d08 <UART_SetConfig+0x2bc>
 8005cd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005cdc:	d817      	bhi.n	8005d0e <UART_SetConfig+0x2c2>
 8005cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ce2:	d00b      	beq.n	8005cfc <UART_SetConfig+0x2b0>
 8005ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ce8:	d811      	bhi.n	8005d0e <UART_SetConfig+0x2c2>
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <UART_SetConfig+0x2aa>
 8005cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf2:	d006      	beq.n	8005d02 <UART_SetConfig+0x2b6>
 8005cf4:	e00b      	b.n	8005d0e <UART_SetConfig+0x2c2>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	77fb      	strb	r3, [r7, #31]
 8005cfa:	e04a      	b.n	8005d92 <UART_SetConfig+0x346>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	77fb      	strb	r3, [r7, #31]
 8005d00:	e047      	b.n	8005d92 <UART_SetConfig+0x346>
 8005d02:	2304      	movs	r3, #4
 8005d04:	77fb      	strb	r3, [r7, #31]
 8005d06:	e044      	b.n	8005d92 <UART_SetConfig+0x346>
 8005d08:	2308      	movs	r3, #8
 8005d0a:	77fb      	strb	r3, [r7, #31]
 8005d0c:	e041      	b.n	8005d92 <UART_SetConfig+0x346>
 8005d0e:	2310      	movs	r3, #16
 8005d10:	77fb      	strb	r3, [r7, #31]
 8005d12:	e03e      	b.n	8005d92 <UART_SetConfig+0x346>
 8005d14:	efff69f3 	.word	0xefff69f3
 8005d18:	40011000 	.word	0x40011000
 8005d1c:	40023800 	.word	0x40023800
 8005d20:	40004400 	.word	0x40004400
 8005d24:	40004800 	.word	0x40004800
 8005d28:	40004c00 	.word	0x40004c00
 8005d2c:	40005000 	.word	0x40005000
 8005d30:	40011400 	.word	0x40011400
 8005d34:	40007800 	.word	0x40007800
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a71      	ldr	r2, [pc, #452]	; (8005f04 <UART_SetConfig+0x4b8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d125      	bne.n	8005d8e <UART_SetConfig+0x342>
 8005d42:	4b71      	ldr	r3, [pc, #452]	; (8005f08 <UART_SetConfig+0x4bc>)
 8005d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d4c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d50:	d017      	beq.n	8005d82 <UART_SetConfig+0x336>
 8005d52:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d56:	d817      	bhi.n	8005d88 <UART_SetConfig+0x33c>
 8005d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d5c:	d00b      	beq.n	8005d76 <UART_SetConfig+0x32a>
 8005d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d62:	d811      	bhi.n	8005d88 <UART_SetConfig+0x33c>
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d003      	beq.n	8005d70 <UART_SetConfig+0x324>
 8005d68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d6c:	d006      	beq.n	8005d7c <UART_SetConfig+0x330>
 8005d6e:	e00b      	b.n	8005d88 <UART_SetConfig+0x33c>
 8005d70:	2300      	movs	r3, #0
 8005d72:	77fb      	strb	r3, [r7, #31]
 8005d74:	e00d      	b.n	8005d92 <UART_SetConfig+0x346>
 8005d76:	2302      	movs	r3, #2
 8005d78:	77fb      	strb	r3, [r7, #31]
 8005d7a:	e00a      	b.n	8005d92 <UART_SetConfig+0x346>
 8005d7c:	2304      	movs	r3, #4
 8005d7e:	77fb      	strb	r3, [r7, #31]
 8005d80:	e007      	b.n	8005d92 <UART_SetConfig+0x346>
 8005d82:	2308      	movs	r3, #8
 8005d84:	77fb      	strb	r3, [r7, #31]
 8005d86:	e004      	b.n	8005d92 <UART_SetConfig+0x346>
 8005d88:	2310      	movs	r3, #16
 8005d8a:	77fb      	strb	r3, [r7, #31]
 8005d8c:	e001      	b.n	8005d92 <UART_SetConfig+0x346>
 8005d8e:	2310      	movs	r3, #16
 8005d90:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d9a:	d15b      	bne.n	8005e54 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005d9c:	7ffb      	ldrb	r3, [r7, #31]
 8005d9e:	2b08      	cmp	r3, #8
 8005da0:	d827      	bhi.n	8005df2 <UART_SetConfig+0x3a6>
 8005da2:	a201      	add	r2, pc, #4	; (adr r2, 8005da8 <UART_SetConfig+0x35c>)
 8005da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da8:	08005dcd 	.word	0x08005dcd
 8005dac:	08005dd5 	.word	0x08005dd5
 8005db0:	08005ddd 	.word	0x08005ddd
 8005db4:	08005df3 	.word	0x08005df3
 8005db8:	08005de3 	.word	0x08005de3
 8005dbc:	08005df3 	.word	0x08005df3
 8005dc0:	08005df3 	.word	0x08005df3
 8005dc4:	08005df3 	.word	0x08005df3
 8005dc8:	08005deb 	.word	0x08005deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dcc:	f7fe fd38 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 8005dd0:	61b8      	str	r0, [r7, #24]
        break;
 8005dd2:	e013      	b.n	8005dfc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dd4:	f7fe fd48 	bl	8004868 <HAL_RCC_GetPCLK2Freq>
 8005dd8:	61b8      	str	r0, [r7, #24]
        break;
 8005dda:	e00f      	b.n	8005dfc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ddc:	4b4b      	ldr	r3, [pc, #300]	; (8005f0c <UART_SetConfig+0x4c0>)
 8005dde:	61bb      	str	r3, [r7, #24]
        break;
 8005de0:	e00c      	b.n	8005dfc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005de2:	f7fe fc6b 	bl	80046bc <HAL_RCC_GetSysClockFreq>
 8005de6:	61b8      	str	r0, [r7, #24]
        break;
 8005de8:	e008      	b.n	8005dfc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dee:	61bb      	str	r3, [r7, #24]
        break;
 8005df0:	e004      	b.n	8005dfc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	77bb      	strb	r3, [r7, #30]
        break;
 8005dfa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d074      	beq.n	8005eec <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	005a      	lsls	r2, r3, #1
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	085b      	lsrs	r3, r3, #1
 8005e0c:	441a      	add	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	2b0f      	cmp	r3, #15
 8005e1e:	d916      	bls.n	8005e4e <UART_SetConfig+0x402>
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e26:	d212      	bcs.n	8005e4e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	f023 030f 	bic.w	r3, r3, #15
 8005e30:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	085b      	lsrs	r3, r3, #1
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	f003 0307 	and.w	r3, r3, #7
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	89fb      	ldrh	r3, [r7, #14]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	89fa      	ldrh	r2, [r7, #14]
 8005e4a:	60da      	str	r2, [r3, #12]
 8005e4c:	e04e      	b.n	8005eec <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	77bb      	strb	r3, [r7, #30]
 8005e52:	e04b      	b.n	8005eec <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e54:	7ffb      	ldrb	r3, [r7, #31]
 8005e56:	2b08      	cmp	r3, #8
 8005e58:	d827      	bhi.n	8005eaa <UART_SetConfig+0x45e>
 8005e5a:	a201      	add	r2, pc, #4	; (adr r2, 8005e60 <UART_SetConfig+0x414>)
 8005e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e60:	08005e85 	.word	0x08005e85
 8005e64:	08005e8d 	.word	0x08005e8d
 8005e68:	08005e95 	.word	0x08005e95
 8005e6c:	08005eab 	.word	0x08005eab
 8005e70:	08005e9b 	.word	0x08005e9b
 8005e74:	08005eab 	.word	0x08005eab
 8005e78:	08005eab 	.word	0x08005eab
 8005e7c:	08005eab 	.word	0x08005eab
 8005e80:	08005ea3 	.word	0x08005ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e84:	f7fe fcdc 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 8005e88:	61b8      	str	r0, [r7, #24]
        break;
 8005e8a:	e013      	b.n	8005eb4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e8c:	f7fe fcec 	bl	8004868 <HAL_RCC_GetPCLK2Freq>
 8005e90:	61b8      	str	r0, [r7, #24]
        break;
 8005e92:	e00f      	b.n	8005eb4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e94:	4b1d      	ldr	r3, [pc, #116]	; (8005f0c <UART_SetConfig+0x4c0>)
 8005e96:	61bb      	str	r3, [r7, #24]
        break;
 8005e98:	e00c      	b.n	8005eb4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e9a:	f7fe fc0f 	bl	80046bc <HAL_RCC_GetSysClockFreq>
 8005e9e:	61b8      	str	r0, [r7, #24]
        break;
 8005ea0:	e008      	b.n	8005eb4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ea6:	61bb      	str	r3, [r7, #24]
        break;
 8005ea8:	e004      	b.n	8005eb4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	77bb      	strb	r3, [r7, #30]
        break;
 8005eb2:	bf00      	nop
    }

    if (pclk != 0U)
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d018      	beq.n	8005eec <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	085a      	lsrs	r2, r3, #1
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	441a      	add	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	2b0f      	cmp	r3, #15
 8005ed4:	d908      	bls.n	8005ee8 <UART_SetConfig+0x49c>
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005edc:	d204      	bcs.n	8005ee8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	60da      	str	r2, [r3, #12]
 8005ee6:	e001      	b.n	8005eec <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005ef8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3720      	adds	r7, #32
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	40007c00 	.word	0x40007c00
 8005f08:	40023800 	.word	0x40023800
 8005f0c:	00f42400 	.word	0x00f42400

08005f10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00a      	beq.n	8005f3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	f003 0304 	and.w	r3, r3, #4
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00a      	beq.n	8005f7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa4:	f003 0310 	and.w	r3, r3, #16
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc6:	f003 0320 	and.w	r3, r3, #32
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01a      	beq.n	8006026 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800600e:	d10a      	bne.n	8006026 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	605a      	str	r2, [r3, #4]
  }
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af02      	add	r7, sp, #8
 800605a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006064:	f7fc f948 	bl	80022f8 <HAL_GetTick>
 8006068:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0308 	and.w	r3, r3, #8
 8006074:	2b08      	cmp	r3, #8
 8006076:	d10e      	bne.n	8006096 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006078:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f82d 	bl	80060e6 <UART_WaitOnFlagUntilTimeout>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e023      	b.n	80060de <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0304 	and.w	r3, r3, #4
 80060a0:	2b04      	cmp	r3, #4
 80060a2:	d10e      	bne.n	80060c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f817 	bl	80060e6 <UART_WaitOnFlagUntilTimeout>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e00d      	b.n	80060de <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2220      	movs	r2, #32
 80060c6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2220      	movs	r2, #32
 80060cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b084      	sub	sp, #16
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	603b      	str	r3, [r7, #0]
 80060f2:	4613      	mov	r3, r2
 80060f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060f6:	e05e      	b.n	80061b6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fe:	d05a      	beq.n	80061b6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006100:	f7fc f8fa 	bl	80022f8 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	429a      	cmp	r2, r3
 800610e:	d302      	bcc.n	8006116 <UART_WaitOnFlagUntilTimeout+0x30>
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d11b      	bne.n	800614e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006124:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 0201 	bic.w	r2, r2, #1
 8006134:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2220      	movs	r2, #32
 800613a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2220      	movs	r2, #32
 8006140:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e043      	b.n	80061d6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b00      	cmp	r3, #0
 800615a:	d02c      	beq.n	80061b6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800616a:	d124      	bne.n	80061b6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006174:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006184:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0201 	bic.w	r2, r2, #1
 8006194:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2220      	movs	r2, #32
 800619a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2220      	movs	r2, #32
 80061a0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2220      	movs	r2, #32
 80061a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e00f      	b.n	80061d6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69da      	ldr	r2, [r3, #28]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	4013      	ands	r3, r2
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	bf0c      	ite	eq
 80061c6:	2301      	moveq	r3, #1
 80061c8:	2300      	movne	r3, #0
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	461a      	mov	r2, r3
 80061ce:	79fb      	ldrb	r3, [r7, #7]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d091      	beq.n	80060f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
	...

080061e0 <__libc_init_array>:
 80061e0:	b570      	push	{r4, r5, r6, lr}
 80061e2:	4d0d      	ldr	r5, [pc, #52]	; (8006218 <__libc_init_array+0x38>)
 80061e4:	4c0d      	ldr	r4, [pc, #52]	; (800621c <__libc_init_array+0x3c>)
 80061e6:	1b64      	subs	r4, r4, r5
 80061e8:	10a4      	asrs	r4, r4, #2
 80061ea:	2600      	movs	r6, #0
 80061ec:	42a6      	cmp	r6, r4
 80061ee:	d109      	bne.n	8006204 <__libc_init_array+0x24>
 80061f0:	4d0b      	ldr	r5, [pc, #44]	; (8006220 <__libc_init_array+0x40>)
 80061f2:	4c0c      	ldr	r4, [pc, #48]	; (8006224 <__libc_init_array+0x44>)
 80061f4:	f000 f864 	bl	80062c0 <_init>
 80061f8:	1b64      	subs	r4, r4, r5
 80061fa:	10a4      	asrs	r4, r4, #2
 80061fc:	2600      	movs	r6, #0
 80061fe:	42a6      	cmp	r6, r4
 8006200:	d105      	bne.n	800620e <__libc_init_array+0x2e>
 8006202:	bd70      	pop	{r4, r5, r6, pc}
 8006204:	f855 3b04 	ldr.w	r3, [r5], #4
 8006208:	4798      	blx	r3
 800620a:	3601      	adds	r6, #1
 800620c:	e7ee      	b.n	80061ec <__libc_init_array+0xc>
 800620e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006212:	4798      	blx	r3
 8006214:	3601      	adds	r6, #1
 8006216:	e7f2      	b.n	80061fe <__libc_init_array+0x1e>
 8006218:	080067a4 	.word	0x080067a4
 800621c:	080067a4 	.word	0x080067a4
 8006220:	080067a4 	.word	0x080067a4
 8006224:	080067a8 	.word	0x080067a8

08006228 <memset>:
 8006228:	4402      	add	r2, r0
 800622a:	4603      	mov	r3, r0
 800622c:	4293      	cmp	r3, r2
 800622e:	d100      	bne.n	8006232 <memset+0xa>
 8006230:	4770      	bx	lr
 8006232:	f803 1b01 	strb.w	r1, [r3], #1
 8006236:	e7f9      	b.n	800622c <memset+0x4>

08006238 <__utoa>:
 8006238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800623a:	4c1f      	ldr	r4, [pc, #124]	; (80062b8 <__utoa+0x80>)
 800623c:	b08b      	sub	sp, #44	; 0x2c
 800623e:	4605      	mov	r5, r0
 8006240:	460b      	mov	r3, r1
 8006242:	466e      	mov	r6, sp
 8006244:	f104 0c20 	add.w	ip, r4, #32
 8006248:	6820      	ldr	r0, [r4, #0]
 800624a:	6861      	ldr	r1, [r4, #4]
 800624c:	4637      	mov	r7, r6
 800624e:	c703      	stmia	r7!, {r0, r1}
 8006250:	3408      	adds	r4, #8
 8006252:	4564      	cmp	r4, ip
 8006254:	463e      	mov	r6, r7
 8006256:	d1f7      	bne.n	8006248 <__utoa+0x10>
 8006258:	7921      	ldrb	r1, [r4, #4]
 800625a:	7139      	strb	r1, [r7, #4]
 800625c:	1e91      	subs	r1, r2, #2
 800625e:	6820      	ldr	r0, [r4, #0]
 8006260:	6038      	str	r0, [r7, #0]
 8006262:	2922      	cmp	r1, #34	; 0x22
 8006264:	f04f 0100 	mov.w	r1, #0
 8006268:	d904      	bls.n	8006274 <__utoa+0x3c>
 800626a:	7019      	strb	r1, [r3, #0]
 800626c:	460b      	mov	r3, r1
 800626e:	4618      	mov	r0, r3
 8006270:	b00b      	add	sp, #44	; 0x2c
 8006272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006274:	1e58      	subs	r0, r3, #1
 8006276:	4684      	mov	ip, r0
 8006278:	fbb5 f7f2 	udiv	r7, r5, r2
 800627c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006280:	fb02 5617 	mls	r6, r2, r7, r5
 8006284:	4476      	add	r6, lr
 8006286:	460c      	mov	r4, r1
 8006288:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800628c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006290:	462e      	mov	r6, r5
 8006292:	42b2      	cmp	r2, r6
 8006294:	f101 0101 	add.w	r1, r1, #1
 8006298:	463d      	mov	r5, r7
 800629a:	d9ed      	bls.n	8006278 <__utoa+0x40>
 800629c:	2200      	movs	r2, #0
 800629e:	545a      	strb	r2, [r3, r1]
 80062a0:	1919      	adds	r1, r3, r4
 80062a2:	1aa5      	subs	r5, r4, r2
 80062a4:	42aa      	cmp	r2, r5
 80062a6:	dae2      	bge.n	800626e <__utoa+0x36>
 80062a8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80062ac:	780e      	ldrb	r6, [r1, #0]
 80062ae:	7006      	strb	r6, [r0, #0]
 80062b0:	3201      	adds	r2, #1
 80062b2:	f801 5901 	strb.w	r5, [r1], #-1
 80062b6:	e7f4      	b.n	80062a2 <__utoa+0x6a>
 80062b8:	08006774 	.word	0x08006774

080062bc <utoa>:
 80062bc:	f7ff bfbc 	b.w	8006238 <__utoa>

080062c0 <_init>:
 80062c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c2:	bf00      	nop
 80062c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062c6:	bc08      	pop	{r3}
 80062c8:	469e      	mov	lr, r3
 80062ca:	4770      	bx	lr

080062cc <_fini>:
 80062cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ce:	bf00      	nop
 80062d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062d2:	bc08      	pop	{r3}
 80062d4:	469e      	mov	lr, r3
 80062d6:	4770      	bx	lr
