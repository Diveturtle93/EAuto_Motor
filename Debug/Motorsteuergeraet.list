
Motorsteuergeraet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087ec  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  080089e4  080089e4  000189e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009194  08009194  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08009194  08009194  00019194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800919c  0800919c  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800919c  0800919c  0001919c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091a0  080091a0  000191a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  080091a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  200000d0  08009274  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08009274  00020350  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b738  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000414e  00000000  00000000  0003b836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  0003f988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  00040c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ce2a  00000000  00000000  00041dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c0e7  00000000  00000000  0006ebfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109170  00000000  00000000  0008ace1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00193e51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bf4  00000000  00000000  00193ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200000d0 	.word	0x200000d0
 8000214:	00000000 	.word	0x00000000
 8000218:	080089cc 	.word	0x080089cc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200000d4 	.word	0x200000d4
 8000234:	080089cc 	.word	0x080089cc

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <BAMOCAN_ID>:
//----------------------------------------------------------------------

// Ermittle Register nach Empfang Bamocar CAN-ID
//----------------------------------------------------------------------
void BAMOCAN_ID(uint8_t* data, uint8_t dlc)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	460b      	mov	r3, r1
 8000556:	70fb      	strb	r3, [r7, #3]
	uint8_t Reg = data[0];
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	733b      	strb	r3, [r7, #12]
	uint16_t speed = 0, strom;
 800055e:	2300      	movs	r3, #0
 8000560:	817b      	strh	r3, [r7, #10]

	// Waehlen welches Register gesendet wurde
	switch (Reg)
 8000562:	7b3b      	ldrb	r3, [r7, #12]
 8000564:	2bd8      	cmp	r3, #216	; 0xd8
 8000566:	f000 80be 	beq.w	80006e6 <BAMOCAN_ID+0x19a>
 800056a:	2bd8      	cmp	r3, #216	; 0xd8
 800056c:	f300 8100 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 8000570:	2ba8      	cmp	r3, #168	; 0xa8
 8000572:	d012      	beq.n	800059a <BAMOCAN_ID+0x4e>
 8000574:	2ba8      	cmp	r3, #168	; 0xa8
 8000576:	f300 80fb 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 800057a:	2b8f      	cmp	r3, #143	; 0x8f
 800057c:	d077      	beq.n	800066e <BAMOCAN_ID+0x122>
 800057e:	2b8f      	cmp	r3, #143	; 0x8f
 8000580:	f300 80f6 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 8000584:	2b5f      	cmp	r3, #95	; 0x5f
 8000586:	d025      	beq.n	80005d4 <BAMOCAN_ID+0x88>
 8000588:	2b5f      	cmp	r3, #95	; 0x5f
 800058a:	f300 80f1 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 800058e:	2b1b      	cmp	r3, #27
 8000590:	f000 80d4 	beq.w	800073c <BAMOCAN_ID+0x1f0>
 8000594:	2b40      	cmp	r3, #64	; 0x40
 8000596:	d037      	beq.n	8000608 <BAMOCAN_ID+0xbc>
 8000598:	e0ea      	b.n	8000770 <BAMOCAN_ID+0x224>
	{
		// Drehzahl vom Bamocar bekommen
		case BAMOCAR_REG_N_ACT_FILTER:
			speed = ((data[2]<<8) + data[1]);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3302      	adds	r3, #2
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	021b      	lsls	r3, r3, #8
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	3301      	adds	r3, #1
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	4413      	add	r3, r2
 80005b0:	817b      	strh	r3, [r7, #10]
			motor1.Drehzahl = speed;
 80005b2:	4a74      	ldr	r2, [pc, #464]	; (8000784 <BAMOCAN_ID+0x238>)
 80005b4:	897b      	ldrh	r3, [r7, #10]
 80005b6:	8053      	strh	r3, [r2, #2]
// Uart Ausgabe
#ifdef DEBUG_BAMOCAR
			uartTransmit("Motordrehzahl\n", 14);
 80005b8:	210e      	movs	r1, #14
 80005ba:	4873      	ldr	r0, [pc, #460]	; (8000788 <BAMOCAN_ID+0x23c>)
 80005bc:	f000 f900 	bl	80007c0 <uartTransmit>
			uartTransmitNumber(speed, 10);
 80005c0:	897b      	ldrh	r3, [r7, #10]
 80005c2:	210a      	movs	r1, #10
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f90f 	bl	80007e8 <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005ca:	2101      	movs	r1, #1
 80005cc:	486f      	ldr	r0, [pc, #444]	; (800078c <BAMOCAN_ID+0x240>)
 80005ce:	f000 f8f7 	bl	80007c0 <uartTransmit>
#endif
			break;
 80005d2:	e0d2      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Stromwert von Bamocar bekommen
		case BAMOCAR_REG_I_ACT_FILTER:
			strom = ((data[2]<<8) + data[1]);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3302      	adds	r3, #2
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	021b      	lsls	r3, r3, #8
 80005de:	b29a      	uxth	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3301      	adds	r3, #1
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	4413      	add	r3, r2
 80005ea:	813b      	strh	r3, [r7, #8]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Motorstrom\n", 11);
 80005ec:	210b      	movs	r1, #11
 80005ee:	4868      	ldr	r0, [pc, #416]	; (8000790 <BAMOCAN_ID+0x244>)
 80005f0:	f000 f8e6 	bl	80007c0 <uartTransmit>
			uartTransmitNumber(strom, 10);
 80005f4:	893b      	ldrh	r3, [r7, #8]
 80005f6:	210a      	movs	r1, #10
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 f8f5 	bl	80007e8 <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005fe:	2101      	movs	r1, #1
 8000600:	4862      	ldr	r0, [pc, #392]	; (800078c <BAMOCAN_ID+0x240>)
 8000602:	f000 f8dd 	bl	80007c0 <uartTransmit>
#endif

			break;
 8000606:	e0b8      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Statusregister von Bamocar bekommen
		case BAMOCAR_REG_STATUS:
			bamocar_stat.status1 = ((data[4] << 24) + (data[3] << 16) + (data[2] << 8) + data[1]);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3304      	adds	r3, #4
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	061a      	lsls	r2, r3, #24
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3303      	adds	r3, #3
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	041b      	lsls	r3, r3, #16
 8000618:	441a      	add	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	3302      	adds	r3, #2
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	4413      	add	r3, r2
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	3201      	adds	r2, #1
 8000628:	7812      	ldrb	r2, [r2, #0]
 800062a:	4413      	add	r3, r2
 800062c:	461a      	mov	r2, r3
 800062e:	4b59      	ldr	r3, [pc, #356]	; (8000794 <BAMOCAN_ID+0x248>)
 8000630:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Status\n", 15);
 8000632:	210f      	movs	r1, #15
 8000634:	4858      	ldr	r0, [pc, #352]	; (8000798 <BAMOCAN_ID+0x24c>)
 8000636:	f000 f8c3 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 4; i > 0; i--)
 800063a:	2304      	movs	r3, #4
 800063c:	73fb      	strb	r3, [r7, #15]
 800063e:	e00e      	b.n	800065e <BAMOCAN_ID+0x112>
			{
				uartTransmitNumber(bamocar_stat.status[i-1], 16);
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	3b01      	subs	r3, #1
 8000644:	4a53      	ldr	r2, [pc, #332]	; (8000794 <BAMOCAN_ID+0x248>)
 8000646:	5cd3      	ldrb	r3, [r2, r3]
 8000648:	2110      	movs	r1, #16
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f8cc 	bl	80007e8 <uartTransmitNumber>
				uartTransmit(" ", 1);
 8000650:	2101      	movs	r1, #1
 8000652:	4852      	ldr	r0, [pc, #328]	; (800079c <BAMOCAN_ID+0x250>)
 8000654:	f000 f8b4 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 4; i > 0; i--)
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	3b01      	subs	r3, #1
 800065c:	73fb      	strb	r3, [r7, #15]
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d1ed      	bne.n	8000640 <BAMOCAN_ID+0xf4>
			}
			uartTransmit("\n", 1);
 8000664:	2101      	movs	r1, #1
 8000666:	4849      	ldr	r0, [pc, #292]	; (800078c <BAMOCAN_ID+0x240>)
 8000668:	f000 f8aa 	bl	80007c0 <uartTransmit>
#endif

			break;
 800066c:	e085      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Errorregister von Bamocar bekommen
		case BAMOCAR_REG_ERROR:
			bamocar_error.error1 = ((data[2] << 8) + data[1]);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3302      	adds	r3, #2
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b29b      	uxth	r3, r3
 8000676:	021b      	lsls	r3, r3, #8
 8000678:	b29a      	uxth	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	3301      	adds	r3, #1
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b29b      	uxth	r3, r3
 8000682:	4413      	add	r3, r2
 8000684:	b29a      	uxth	r2, r3
 8000686:	4b46      	ldr	r3, [pc, #280]	; (80007a0 <BAMOCAN_ID+0x254>)
 8000688:	801a      	strh	r2, [r3, #0]
			bamocar_warnung.warnung1 = ((data[4] << 8) + data[3]);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3304      	adds	r3, #4
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	b29b      	uxth	r3, r3
 8000692:	021b      	lsls	r3, r3, #8
 8000694:	b29a      	uxth	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3303      	adds	r3, #3
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b29b      	uxth	r3, r3
 800069e:	4413      	add	r3, r2
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	4b40      	ldr	r3, [pc, #256]	; (80007a4 <BAMOCAN_ID+0x258>)
 80006a4:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Error\n", 14);
 80006a6:	210e      	movs	r1, #14
 80006a8:	483f      	ldr	r0, [pc, #252]	; (80007a8 <BAMOCAN_ID+0x25c>)
 80006aa:	f000 f889 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	73bb      	strb	r3, [r7, #14]
 80006b2:	e010      	b.n	80006d6 <BAMOCAN_ID+0x18a>
			{
				uartTransmitNumber(data[1+i], 16);
 80006b4:	7bbb      	ldrb	r3, [r7, #14]
 80006b6:	3301      	adds	r3, #1
 80006b8:	461a      	mov	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2110      	movs	r1, #16
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 f890 	bl	80007e8 <uartTransmitNumber>
				uartTransmit(" ", 1);
 80006c8:	2101      	movs	r1, #1
 80006ca:	4834      	ldr	r0, [pc, #208]	; (800079c <BAMOCAN_ID+0x250>)
 80006cc:	f000 f878 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006d0:	7bbb      	ldrb	r3, [r7, #14]
 80006d2:	3301      	adds	r3, #1
 80006d4:	73bb      	strb	r3, [r7, #14]
 80006d6:	7bbb      	ldrb	r3, [r7, #14]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	d9eb      	bls.n	80006b4 <BAMOCAN_ID+0x168>
			}
			uartTransmit("\n", 1);
 80006dc:	2101      	movs	r1, #1
 80006de:	482b      	ldr	r0, [pc, #172]	; (800078c <BAMOCAN_ID+0x240>)
 80006e0:	f000 f86e 	bl	80007c0 <uartTransmit>
#endif

			break;
 80006e4:	e049      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Status IO Register von Bamocar bekommen
		case BAMOCAR_REG_STATUS_IO:
			bamocar_IOstatus.status1 = ((data[2] << 8) + data[1]);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3302      	adds	r3, #2
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	021b      	lsls	r3, r3, #8
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3301      	adds	r3, #1
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	4413      	add	r3, r2
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <BAMOCAN_ID+0x260>)
 8000700:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar IO Status\n", 18);
 8000702:	2112      	movs	r1, #18
 8000704:	482a      	ldr	r0, [pc, #168]	; (80007b0 <BAMOCAN_ID+0x264>)
 8000706:	f000 f85b 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 2; i++)
 800070a:	2300      	movs	r3, #0
 800070c:	737b      	strb	r3, [r7, #13]
 800070e:	e00d      	b.n	800072c <BAMOCAN_ID+0x1e0>
			{
				uartTransmitNumber(bamocar_IOstatus.status[i], 16);
 8000710:	7b7b      	ldrb	r3, [r7, #13]
 8000712:	4a26      	ldr	r2, [pc, #152]	; (80007ac <BAMOCAN_ID+0x260>)
 8000714:	5cd3      	ldrb	r3, [r2, r3]
 8000716:	2110      	movs	r1, #16
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f865 	bl	80007e8 <uartTransmitNumber>
				uartTransmit(" ", 1);
 800071e:	2101      	movs	r1, #1
 8000720:	481e      	ldr	r0, [pc, #120]	; (800079c <BAMOCAN_ID+0x250>)
 8000722:	f000 f84d 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 2; i++)
 8000726:	7b7b      	ldrb	r3, [r7, #13]
 8000728:	3301      	adds	r3, #1
 800072a:	737b      	strb	r3, [r7, #13]
 800072c:	7b7b      	ldrb	r3, [r7, #13]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d9ee      	bls.n	8000710 <BAMOCAN_ID+0x1c4>
			}
			uartTransmit("\n", 1);
 8000732:	2101      	movs	r1, #1
 8000734:	4815      	ldr	r0, [pc, #84]	; (800078c <BAMOCAN_ID+0x240>)
 8000736:	f000 f843 	bl	80007c0 <uartTransmit>
#endif

			break;
 800073a:	e01e      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Firmware von Bamocar ausgelesen
		case BAMOCAR_REG_FIRMWARE:
			bamocar_data.data = ((data[2]<<8) + data[1]);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3302      	adds	r3, #2
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	021b      	lsls	r3, r3, #8
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	3201      	adds	r2, #1
 8000748:	7812      	ldrb	r2, [r2, #0]
 800074a:	4413      	add	r3, r2
 800074c:	461a      	mov	r2, r3
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <BAMOCAN_ID+0x268>)
 8000750:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Firmware\n", 9);
 8000752:	2109      	movs	r1, #9
 8000754:	4818      	ldr	r0, [pc, #96]	; (80007b8 <BAMOCAN_ID+0x26c>)
 8000756:	f000 f833 	bl	80007c0 <uartTransmit>
			uartTransmitNumber(bamocar_data.data, 16);
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <BAMOCAN_ID+0x268>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2110      	movs	r1, #16
 8000760:	4618      	mov	r0, r3
 8000762:	f000 f841 	bl	80007e8 <uartTransmitNumber>
			uartTransmit("\n", 1);
 8000766:	2101      	movs	r1, #1
 8000768:	4808      	ldr	r0, [pc, #32]	; (800078c <BAMOCAN_ID+0x240>)
 800076a:	f000 f829 	bl	80007c0 <uartTransmit>
#endif

			break;
 800076e:	e004      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Register fuer Bamocar nicht definiert, Fehler
		default:
			uartTransmit("Bamocar Register nicht definiert\n", 33);
 8000770:	2121      	movs	r1, #33	; 0x21
 8000772:	4812      	ldr	r0, [pc, #72]	; (80007bc <BAMOCAN_ID+0x270>)
 8000774:	f000 f824 	bl	80007c0 <uartTransmit>
			break;
 8000778:	bf00      	nop
	}
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000270 	.word	0x20000270
 8000788:	080089e4 	.word	0x080089e4
 800078c:	080089f4 	.word	0x080089f4
 8000790:	080089f8 	.word	0x080089f8
 8000794:	200000f0 	.word	0x200000f0
 8000798:	08008a04 	.word	0x08008a04
 800079c:	08008a14 	.word	0x08008a14
 80007a0:	200000f4 	.word	0x200000f4
 80007a4:	200000f8 	.word	0x200000f8
 80007a8:	08008a18 	.word	0x08008a18
 80007ac:	200000ec 	.word	0x200000ec
 80007b0:	08008a28 	.word	0x08008a28
 80007b4:	200000fc 	.word	0x200000fc
 80007b8:	08008a3c 	.word	0x08008a3c
 80007bc:	08008a48 	.word	0x08008a48

080007c0 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	4803      	ldr	r0, [pc, #12]	; (80007e4 <uartTransmit+0x24>)
 80007d6:	f006 fdc5 	bl	8007364 <HAL_UART_Transmit>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200002c4 	.word	0x200002c4

080007e8 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4619      	mov	r1, r3
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f008 f8e4 	bl	80089c8 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fd17 	bl	8000238 <strlen>
 800080a:	4603      	mov	r3, r0
 800080c:	b29a      	uxth	r2, r3
 800080e:	f107 010c 	add.w	r1, r7, #12
 8000812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000816:	4803      	ldr	r0, [pc, #12]	; (8000824 <uartTransmitNumber+0x3c>)
 8000818:	f006 fda4 	bl	8007364 <HAL_UART_Transmit>
}
 800081c:	bf00      	nop
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200002c4 	.word	0x200002c4

08000828 <readDIS>:
CAN_TxHeaderTypeDef TxNavi = {0x6C0, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
CAN_RxHeaderTypeDef RxNavi;


void readDIS(unsigned long id) 					// read waiting message(s) and send ack
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	uint8_t len = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	77fb      	strb	r3, [r7, #31]
	uint8_t recBuf[8];
	uint8_t ackBuf[8];
	while (HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) != 0)
 8000834:	e03a      	b.n	80008ac <readDIS+0x84>
	{
		HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxNavi, recBuf);    			// read data,  len: data length, buf: data buf
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4a22      	ldr	r2, [pc, #136]	; (80008c4 <readDIS+0x9c>)
 800083c:	2100      	movs	r1, #0
 800083e:	4822      	ldr	r0, [pc, #136]	; (80008c8 <readDIS+0xa0>)
 8000840:	f004 f9b0 	bl	8004ba4 <HAL_CAN_GetRxMessage>
		len = RxNavi.DLC;
 8000844:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <readDIS+0x9c>)
 8000846:	691b      	ldr	r3, [r3, #16]
 8000848:	77fb      	strb	r3, [r7, #31]
		if (RxNavi.StdId == id)
 800084a:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <readDIS+0x9c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	429a      	cmp	r2, r3
 8000852:	d12b      	bne.n	80008ac <readDIS+0x84>
//			for(int i = 0; i<len; i++)  {  			// print the data
//				Serial.print(recBuf[i], HEX);
//				Serial.print("\t");
//			}
//			Serial.println();
			if (len > 1)							// if not an ack or A3
 8000854:	7ffb      	ldrb	r3, [r7, #31]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d928      	bls.n	80008ac <readDIS+0x84>
			{
				recCounter++;
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <readDIS+0xa4>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	3301      	adds	r3, #1
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <readDIS+0xa4>)
 8000864:	701a      	strb	r2, [r3, #0]
				/* Send ack */
				if (recBuf[0] < 0x20)  					// Don't ack 2X message */
 8000866:	7d3b      	ldrb	r3, [r7, #20]
 8000868:	2b1f      	cmp	r3, #31
 800086a:	d81f      	bhi.n	80008ac <readDIS+0x84>
				{
					ackBuf[0] = (0xB0 + recCounter % 15);
 800086c:	4b17      	ldr	r3, [pc, #92]	; (80008cc <readDIS+0xa4>)
 800086e:	781a      	ldrb	r2, [r3, #0]
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <readDIS+0xa8>)
 8000872:	fba3 1302 	umull	r1, r3, r3, r2
 8000876:	08d9      	lsrs	r1, r3, #3
 8000878:	460b      	mov	r3, r1
 800087a:	011b      	lsls	r3, r3, #4
 800087c:	1a5b      	subs	r3, r3, r1
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	b2db      	uxtb	r3, r3
 8000882:	3b50      	subs	r3, #80	; 0x50
 8000884:	b2db      	uxtb	r3, r3
 8000886:	733b      	strb	r3, [r7, #12]
					TxNavi.DLC = 1;
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <readDIS+0xac>)
 800088a:	2201      	movs	r2, #1
 800088c:	611a      	str	r2, [r3, #16]
					HAL_CAN_AddTxMessage(&hcan2, &TxNavi, ackBuf, (uint32_t *)CAN_TX_MAILBOX0);
 800088e:	f107 020c 	add.w	r2, r7, #12
 8000892:	2301      	movs	r3, #1
 8000894:	490f      	ldr	r1, [pc, #60]	; (80008d4 <readDIS+0xac>)
 8000896:	480c      	ldr	r0, [pc, #48]	; (80008c8 <readDIS+0xa0>)
 8000898:	f004 f890 	bl	80049bc <HAL_CAN_AddTxMessage>
					while(HAL_CAN_IsTxMessagePending(&hcan2, CAN_TX_MAILBOX0) == 1)
 800089c:	bf00      	nop
 800089e:	2101      	movs	r1, #1
 80008a0:	4809      	ldr	r0, [pc, #36]	; (80008c8 <readDIS+0xa0>)
 80008a2:	f004 f95b 	bl	8004b5c <HAL_CAN_IsTxMessagePending>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d0f8      	beq.n	800089e <readDIS+0x76>
	while (HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) != 0)
 80008ac:	2100      	movs	r1, #0
 80008ae:	4806      	ldr	r0, [pc, #24]	; (80008c8 <readDIS+0xa0>)
 80008b0:	f004 fa8a 	bl	8004dc8 <HAL_CAN_GetRxFifoFillLevel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1bd      	bne.n	8000836 <readDIS+0xe>
//					Serial.println();
				}
			}
		}
	}
}
 80008ba:	bf00      	nop
 80008bc:	bf00      	nop
 80008be:	3720      	adds	r7, #32
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000108 	.word	0x20000108
 80008c8:	200001d8 	.word	0x200001d8
 80008cc:	20000105 	.word	0x20000105
 80008d0:	88888889 	.word	0x88888889
 80008d4:	2000000c 	.word	0x2000000c

080008d8 <sendDIS>:



uint8_t sendDIS(unsigned long id, uint8_t len, uint8_t *message)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08c      	sub	sp, #48	; 0x30
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	460b      	mov	r3, r1
 80008e2:	607a      	str	r2, [r7, #4]
 80008e4:	72fb      	strb	r3, [r7, #11]
	uint8_t sendBuf[8]={0};
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
	uint8_t ack = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for(int i = 0; i < len; i++)   						// copy message to buffer
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80008f8:	e00c      	b.n	8000914 <sendDIS+0x3c>
	{
		sendBuf[i] = message[i];
 80008fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	4413      	add	r3, r2
 8000900:	7819      	ldrb	r1, [r3, #0]
 8000902:	f107 021c 	add.w	r2, r7, #28
 8000906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000908:	4413      	add	r3, r2
 800090a:	460a      	mov	r2, r1
 800090c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < len; i++)   						// copy message to buffer
 800090e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000910:	3301      	adds	r3, #1
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
 8000914:	7afb      	ldrb	r3, [r7, #11]
 8000916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000918:	429a      	cmp	r2, r3
 800091a:	dbee      	blt.n	80008fa <sendDIS+0x22>
	}
	if ((sendBuf[0] == 0xA3) || (sendBuf[0] == 0xA0))
 800091c:	7f3b      	ldrb	r3, [r7, #28]
 800091e:	2ba3      	cmp	r3, #163	; 0xa3
 8000920:	d002      	beq.n	8000928 <sendDIS+0x50>
 8000922:	7f3b      	ldrb	r3, [r7, #28]
 8000924:	2ba0      	cmp	r3, #160	; 0xa0
 8000926:	d103      	bne.n	8000930 <sendDIS+0x58>
	{
		expectedAck = LONG_ACK;
 8000928:	4b53      	ldr	r3, [pc, #332]	; (8000a78 <sendDIS+0x1a0>)
 800092a:	2201      	movs	r2, #1
 800092c:	701a      	strb	r2, [r3, #0]
 800092e:	e01e      	b.n	800096e <sendDIS+0x96>
	}
	else
	{
		sendBuf[0] = (sendBuf[0]) + (sendCounter % 16);		// set sequence count
 8000930:	7f3a      	ldrb	r2, [r7, #28]
 8000932:	4b52      	ldr	r3, [pc, #328]	; (8000a7c <sendDIS+0x1a4>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	f003 030f 	and.w	r3, r3, #15
 800093a:	b2db      	uxtb	r3, r3
 800093c:	4413      	add	r3, r2
 800093e:	b2db      	uxtb	r3, r3
 8000940:	773b      	strb	r3, [r7, #28]
		sendCounter++;
 8000942:	4b4e      	ldr	r3, [pc, #312]	; (8000a7c <sendDIS+0x1a4>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	3301      	adds	r3, #1
 8000948:	b2da      	uxtb	r2, r3
 800094a:	4b4c      	ldr	r3, [pc, #304]	; (8000a7c <sendDIS+0x1a4>)
 800094c:	701a      	strb	r2, [r3, #0]
		if (sendBuf[0] >= 0x20)
 800094e:	7f3b      	ldrb	r3, [r7, #28]
 8000950:	2b1f      	cmp	r3, #31
 8000952:	d909      	bls.n	8000968 <sendDIS+0x90>
		{
			expectedAck = NO_ACK;
 8000954:	4b48      	ldr	r3, [pc, #288]	; (8000a78 <sendDIS+0x1a0>)
 8000956:	2203      	movs	r2, #3
 8000958:	701a      	strb	r2, [r3, #0]
			ack = 1;
 800095a:	2301      	movs	r3, #1
 800095c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			HAL_Delay(100);  									// don't send multi-line messages too fast
 8000960:	2064      	movs	r0, #100	; 0x64
 8000962:	f003 f965 	bl	8003c30 <HAL_Delay>
 8000966:	e002      	b.n	800096e <sendDIS+0x96>
		}
		else
		{
			expectedAck = NORMAL_ACK;
 8000968:	4b43      	ldr	r3, [pc, #268]	; (8000a78 <sendDIS+0x1a0>)
 800096a:	2202      	movs	r2, #2
 800096c:	701a      	strb	r2, [r3, #0]
		}
	}
	/* Check for waiting message */
	readDIS(DIS_REC_ID);
 800096e:	4b44      	ldr	r3, [pc, #272]	; (8000a80 <sendDIS+0x1a8>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff ff58 	bl	8000828 <readDIS>
	/* Send the message */
	TxNavi.DLC = len;
 8000978:	7afb      	ldrb	r3, [r7, #11]
 800097a:	4a42      	ldr	r2, [pc, #264]	; (8000a84 <sendDIS+0x1ac>)
 800097c:	6113      	str	r3, [r2, #16]
	HAL_CAN_AddTxMessage(&hcan2, &TxNavi, sendBuf, (uint32_t *)CAN_TX_MAILBOX0);
 800097e:	f107 021c 	add.w	r2, r7, #28
 8000982:	2301      	movs	r3, #1
 8000984:	493f      	ldr	r1, [pc, #252]	; (8000a84 <sendDIS+0x1ac>)
 8000986:	4840      	ldr	r0, [pc, #256]	; (8000a88 <sendDIS+0x1b0>)
 8000988:	f004 f818 	bl	80049bc <HAL_CAN_AddTxMessage>
	while(HAL_CAN_IsTxMessagePending(&hcan2, CAN_TX_MAILBOX0) == 1)
 800098c:	bf00      	nop
 800098e:	2101      	movs	r1, #1
 8000990:	483d      	ldr	r0, [pc, #244]	; (8000a88 <sendDIS+0x1b0>)
 8000992:	f004 f8e3 	bl	8004b5c <HAL_CAN_IsTxMessagePending>
 8000996:	4603      	mov	r3, r0
 8000998:	2b01      	cmp	r3, #1
 800099a:	d0f8      	beq.n	800098e <sendDIS+0xb6>
//	}
//	Serial.println();

/* Wait for Ack */
	uint8_t ackBuf[8];
	delayStart = millis();
 800099c:	f001 fb08 	bl	8001fb0 <millis>
 80009a0:	4603      	mov	r3, r0
 80009a2:	4a3a      	ldr	r2, [pc, #232]	; (8000a8c <sendDIS+0x1b4>)
 80009a4:	6013      	str	r3, [r2, #0]
	while (responseTime >=(millis() - delayStart) && (ack == 0))
 80009a6:	e052      	b.n	8000a4e <sendDIS+0x176>
	{
		if((HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) != 0) && (ack == 0))        // check if data coming
 80009a8:	2100      	movs	r1, #0
 80009aa:	4837      	ldr	r0, [pc, #220]	; (8000a88 <sendDIS+0x1b0>)
 80009ac:	f004 fa0c 	bl	8004dc8 <HAL_CAN_GetRxFifoFillLevel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d04a      	beq.n	8000a4c <sendDIS+0x174>
 80009b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d146      	bne.n	8000a4c <sendDIS+0x174>
		{
			HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxNavi, ackBuf);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4a33      	ldr	r2, [pc, #204]	; (8000a90 <sendDIS+0x1b8>)
 80009c4:	2100      	movs	r1, #0
 80009c6:	4830      	ldr	r0, [pc, #192]	; (8000a88 <sendDIS+0x1b0>)
 80009c8:	f004 f8ec 	bl	8004ba4 <HAL_CAN_GetRxMessage>
			len = RxNavi.DLC;
 80009cc:	4b30      	ldr	r3, [pc, #192]	; (8000a90 <sendDIS+0x1b8>)
 80009ce:	691b      	ldr	r3, [r3, #16]
 80009d0:	72fb      	strb	r3, [r7, #11]
			if (RxNavi.StdId == DIS_REC_ID)
 80009d2:	4b2f      	ldr	r3, [pc, #188]	; (8000a90 <sendDIS+0x1b8>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <sendDIS+0x1a8>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	429a      	cmp	r2, r3
 80009dc:	d136      	bne.n	8000a4c <sendDIS+0x174>
//				for(int i = 0; i<len; i++)  {  // print the data
//					Serial.print(ackBuf[i], HEX);
//					Serial.print("\t");
//				}
//				Serial.println();
				switch (expectedAck)
 80009de:	4b26      	ldr	r3, [pc, #152]	; (8000a78 <sendDIS+0x1a0>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d002      	beq.n	80009ec <sendDIS+0x114>
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d01c      	beq.n	8000a24 <sendDIS+0x14c>
 80009ea:	e030      	b.n	8000a4e <sendDIS+0x176>
				{
					case LONG_ACK:
						ack = 1;
 80009ec:	2301      	movs	r3, #1
 80009ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						for(int i = 0; i<len; i++)
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
 80009f6:	e010      	b.n	8000a1a <sendDIS+0x142>
						{
							if (ackBuf[i] != A0_RESPONSE[i])
 80009f8:	f107 0214 	add.w	r2, r7, #20
 80009fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fe:	4413      	add	r3, r2
 8000a00:	781a      	ldrb	r2, [r3, #0]
 8000a02:	4924      	ldr	r1, [pc, #144]	; (8000a94 <sendDIS+0x1bc>)
 8000a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a06:	440b      	add	r3, r1
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d002      	beq.n	8000a14 <sendDIS+0x13c>
							{
								ack = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						for(int i = 0; i<len; i++)
 8000a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a16:	3301      	adds	r3, #1
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
 8000a1a:	7afb      	ldrb	r3, [r7, #11]
 8000a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	dbea      	blt.n	80009f8 <sendDIS+0x120>
							}
						}
					break;
 8000a22:	e014      	b.n	8000a4e <sendDIS+0x176>
					case NORMAL_ACK :
						if (ackBuf[0] == (0xB0 + (recCounter % 15)))
 8000a24:	7d3b      	ldrb	r3, [r7, #20]
 8000a26:	4618      	mov	r0, r3
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <sendDIS+0x1c0>)
 8000a2a:	781a      	ldrb	r2, [r3, #0]
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <sendDIS+0x1c4>)
 8000a2e:	fba3 1302 	umull	r1, r3, r3, r2
 8000a32:	08d9      	lsrs	r1, r3, #3
 8000a34:	460b      	mov	r3, r1
 8000a36:	011b      	lsls	r3, r3, #4
 8000a38:	1a5b      	subs	r3, r3, r1
 8000a3a:	1ad3      	subs	r3, r2, r3
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	33b0      	adds	r3, #176	; 0xb0
 8000a40:	4298      	cmp	r0, r3
 8000a42:	d104      	bne.n	8000a4e <sendDIS+0x176>
						{
							ack = 1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						}
					break;
 8000a4a:	e000      	b.n	8000a4e <sendDIS+0x176>
				}
			}
 8000a4c:	bf00      	nop
	while (responseTime >=(millis() - delayStart) && (ack == 0))
 8000a4e:	f001 faaf 	bl	8001fb0 <millis>
 8000a52:	4602      	mov	r2, r0
 8000a54:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <sendDIS+0x1b4>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	1ad2      	subs	r2, r2, r3
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <sendDIS+0x1c8>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d803      	bhi.n	8000a6a <sendDIS+0x192>
 8000a62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d09e      	beq.n	80009a8 <sendDIS+0xd0>
		}
	}
	return ack;
 8000a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3730      	adds	r7, #48	; 0x30
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000106 	.word	0x20000106
 8000a7c:	20000104 	.word	0x20000104
 8000a80:	20000028 	.word	0x20000028
 8000a84:	2000000c 	.word	0x2000000c
 8000a88:	200001d8 	.word	0x200001d8
 8000a8c:	20000100 	.word	0x20000100
 8000a90:	20000108 	.word	0x20000108
 8000a94:	20000004 	.word	0x20000004
 8000a98:	20000105 	.word	0x20000105
 8000a9c:	88888889 	.word	0x88888889
 8000aa0:	20000000 	.word	0x20000000

08000aa4 <waitDIS>:

	


void waitDIS(unsigned long id, uint8_t *message) 			// wait for message
{
 8000aa4:	b590      	push	{r4, r7, lr}
 8000aa6:	b089      	sub	sp, #36	; 0x24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
	uint8_t messageReceived = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	77fb      	strb	r3, [r7, #31]
	delayStart = millis();
 8000ab2:	f001 fa7d 	bl	8001fb0 <millis>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	4a35      	ldr	r2, [pc, #212]	; (8000b90 <waitDIS+0xec>)
 8000aba:	6013      	str	r3, [r2, #0]
	uint8_t recBuf[8];
	uint8_t ackBuf[8];

	while (responseTime >=(millis() - delayStart) && (messageReceived == 0))
 8000abc:	e056      	b.n	8000b6c <waitDIS+0xc8>
	{
		if((HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) != 0) && (messageReceived == 0))        // check if data coming
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4834      	ldr	r0, [pc, #208]	; (8000b94 <waitDIS+0xf0>)
 8000ac2:	f004 f981 	bl	8004dc8 <HAL_CAN_GetRxFifoFillLevel>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d04f      	beq.n	8000b6c <waitDIS+0xc8>
 8000acc:	7ffb      	ldrb	r3, [r7, #31]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d14c      	bne.n	8000b6c <waitDIS+0xc8>
		{
			HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxNavi, recBuf);    				// read data,  len: data length, buf: data buf
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4a30      	ldr	r2, [pc, #192]	; (8000b98 <waitDIS+0xf4>)
 8000ad8:	2100      	movs	r1, #0
 8000ada:	482e      	ldr	r0, [pc, #184]	; (8000b94 <waitDIS+0xf0>)
 8000adc:	f004 f862 	bl	8004ba4 <HAL_CAN_GetRxMessage>
			if (RxNavi.StdId == id)
 8000ae0:	4b2d      	ldr	r3, [pc, #180]	; (8000b98 <waitDIS+0xf4>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d140      	bne.n	8000b6c <waitDIS+0xc8>
			{
				if (recBuf[0] == (message[0] + (recCounter % 15)))
 8000aea:	7d3b      	ldrb	r3, [r7, #20]
 8000aec:	4618      	mov	r0, r3
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	461c      	mov	r4, r3
 8000af4:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <waitDIS+0xf8>)
 8000af6:	781a      	ldrb	r2, [r3, #0]
 8000af8:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <waitDIS+0xfc>)
 8000afa:	fba3 1302 	umull	r1, r3, r3, r2
 8000afe:	08d9      	lsrs	r1, r3, #3
 8000b00:	460b      	mov	r3, r1
 8000b02:	011b      	lsls	r3, r3, #4
 8000b04:	1a5b      	subs	r3, r3, r1
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	4423      	add	r3, r4
 8000b0c:	4298      	cmp	r0, r3
 8000b0e:	d101      	bne.n	8000b14 <waitDIS+0x70>
				{
					messageReceived = 1;
 8000b10:	2301      	movs	r3, #1
 8000b12:	77fb      	strb	r3, [r7, #31]
//				for(int i = 0; i<len; i++)  {  			// print the data
//					Serial.print(recBuf[i], HEX);
//					Serial.print("\t");
//				}
//				Serial.println();
				if (messageReceived)
 8000b14:	7ffb      	ldrb	r3, [r7, #31]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d005      	beq.n	8000b26 <waitDIS+0x82>
				{
					recCounter++;
 8000b1a:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <waitDIS+0xf8>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <waitDIS+0xf8>)
 8000b24:	701a      	strb	r2, [r3, #0]
				}
				if (recBuf[0] < 0x20)  					// Don't ack 2X message */
 8000b26:	7d3b      	ldrb	r3, [r7, #20]
 8000b28:	2b1f      	cmp	r3, #31
 8000b2a:	d81f      	bhi.n	8000b6c <waitDIS+0xc8>
				{
					ackBuf[0] = (0xB0 + recCounter % 15);
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <waitDIS+0xf8>)
 8000b2e:	781a      	ldrb	r2, [r3, #0]
 8000b30:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <waitDIS+0xfc>)
 8000b32:	fba3 1302 	umull	r1, r3, r3, r2
 8000b36:	08d9      	lsrs	r1, r3, #3
 8000b38:	460b      	mov	r3, r1
 8000b3a:	011b      	lsls	r3, r3, #4
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	3b50      	subs	r3, #80	; 0x50
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	733b      	strb	r3, [r7, #12]
//					CAN.sendMsgBuf(DIS_SEND_ID, 0, 1, ackBuf);
					TxNavi.DLC = 1;
 8000b48:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <waitDIS+0x100>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	611a      	str	r2, [r3, #16]
					HAL_CAN_AddTxMessage(&hcan2, &TxNavi, ackBuf, (uint32_t *)CAN_TX_MAILBOX0);
 8000b4e:	f107 020c 	add.w	r2, r7, #12
 8000b52:	2301      	movs	r3, #1
 8000b54:	4913      	ldr	r1, [pc, #76]	; (8000ba4 <waitDIS+0x100>)
 8000b56:	480f      	ldr	r0, [pc, #60]	; (8000b94 <waitDIS+0xf0>)
 8000b58:	f003 ff30 	bl	80049bc <HAL_CAN_AddTxMessage>
					while(HAL_CAN_IsTxMessagePending(&hcan2, CAN_TX_MAILBOX0) == 1)
 8000b5c:	bf00      	nop
 8000b5e:	2101      	movs	r1, #1
 8000b60:	480c      	ldr	r0, [pc, #48]	; (8000b94 <waitDIS+0xf0>)
 8000b62:	f003 fffb 	bl	8004b5c <HAL_CAN_IsTxMessagePending>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d0f8      	beq.n	8000b5e <waitDIS+0xba>
	while (responseTime >=(millis() - delayStart) && (messageReceived == 0))
 8000b6c:	f001 fa20 	bl	8001fb0 <millis>
 8000b70:	4602      	mov	r2, r0
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <waitDIS+0xec>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	1ad2      	subs	r2, r2, r3
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <waitDIS+0x104>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d802      	bhi.n	8000b86 <waitDIS+0xe2>
 8000b80:	7ffb      	ldrb	r3, [r7, #31]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d09b      	beq.n	8000abe <waitDIS+0x1a>
//					Serial.println();
				}
			}
		}
	}
}
 8000b86:	bf00      	nop
 8000b88:	3724      	adds	r7, #36	; 0x24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd90      	pop	{r4, r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000100 	.word	0x20000100
 8000b94:	200001d8 	.word	0x200001d8
 8000b98:	20000108 	.word	0x20000108
 8000b9c:	20000105 	.word	0x20000105
 8000ba0:	88888889 	.word	0x88888889
 8000ba4:	2000000c 	.word	0x2000000c
 8000ba8:	20000000 	.word	0x20000000

08000bac <initDIS>:
const uint8_t  NO_ACK = 4;




void initDIS(void) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0

	sendCounter = 0;
 8000bb2:	4b69      	ldr	r3, [pc, #420]	; (8000d58 <initDIS+0x1ac>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
	recCounter = 0;		
 8000bb8:	4b68      	ldr	r3, [pc, #416]	; (8000d5c <initDIS+0x1b0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]

 
  /* Establish Comms */

  
    sendDIS(DIS_SEND_ID, sizeof(A0_MESSAGE), A0_MESSAGE);				// {0xA0, 0x0F, 0x8A, 0xFF, 0x4A, 0xFF}
 8000bbe:	4b68      	ldr	r3, [pc, #416]	; (8000d60 <initDIS+0x1b4>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a68      	ldr	r2, [pc, #416]	; (8000d64 <initDIS+0x1b8>)
 8000bc4:	2106      	movs	r1, #6
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fe86 	bl	80008d8 <sendDIS>
	HAL_Delay(10);
 8000bcc:	200a      	movs	r0, #10
 8000bce:	f003 f82f 	bl	8003c30 <HAL_Delay>
    sendDIS(DIS_SEND_ID,  sizeof(M15_SEND), M15_SEND);					// {0x10, 0x15, 0x02, 0x01, 0x02, 0x00, 0x00}
 8000bd2:	4b63      	ldr	r3, [pc, #396]	; (8000d60 <initDIS+0x1b4>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a64      	ldr	r2, [pc, #400]	; (8000d68 <initDIS+0x1bc>)
 8000bd8:	2107      	movs	r1, #7
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fe7c 	bl	80008d8 <sendDIS>
    waitDIS(DIS_REC_ID, M00_01_REC);									// {0x10, 0x00, 0x01}
 8000be0:	4b62      	ldr	r3, [pc, #392]	; (8000d6c <initDIS+0x1c0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4962      	ldr	r1, [pc, #392]	; (8000d70 <initDIS+0x1c4>)
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ff5c 	bl	8000aa4 <waitDIS>
	HAL_Delay(10);
 8000bec:	200a      	movs	r0, #10
 8000bee:	f003 f81f 	bl	8003c30 <HAL_Delay>
    sendDIS(DIS_SEND_ID,  sizeof(M01_02_00_SEND), M01_02_00_SEND);		// {0x10, 0x01, 0x02, 0x00}
 8000bf2:	4b5b      	ldr	r3, [pc, #364]	; (8000d60 <initDIS+0x1b4>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a5f      	ldr	r2, [pc, #380]	; (8000d74 <initDIS+0x1c8>)
 8000bf8:	2104      	movs	r1, #4
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fe6c 	bl	80008d8 <sendDIS>
    waitDIS(DIS_REC_ID, M00_01_REC);									// {0x10, 0x00, 0x01}
 8000c00:	4b5a      	ldr	r3, [pc, #360]	; (8000d6c <initDIS+0x1c0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	495a      	ldr	r1, [pc, #360]	; (8000d70 <initDIS+0x1c4>)
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff4c 	bl	8000aa4 <waitDIS>
	HAL_Delay(10);
 8000c0c:	200a      	movs	r0, #10
 8000c0e:	f003 f80f 	bl	8003c30 <HAL_Delay>
    for(int i = 0; i<4; i++)  { 
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	e00c      	b.n	8000c32 <initDIS+0x86>
		sendDIS(DIS_SEND_ID,  sizeof(A3_MESSAGE), A3_MESSAGE);			// {0xA3}
 8000c18:	4b51      	ldr	r3, [pc, #324]	; (8000d60 <initDIS+0x1b4>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a56      	ldr	r2, [pc, #344]	; (8000d78 <initDIS+0x1cc>)
 8000c1e:	2101      	movs	r1, #1
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fe59 	bl	80008d8 <sendDIS>
		HAL_Delay(25);
 8000c26:	2019      	movs	r0, #25
 8000c28:	f003 f802 	bl	8003c30 <HAL_Delay>
    for(int i = 0; i<4; i++)  { 
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	ddef      	ble.n	8000c18 <initDIS+0x6c>
    }
	HAL_Delay(10);
 8000c38:	200a      	movs	r0, #10
 8000c3a:	f002 fff9 	bl	8003c30 <HAL_Delay>
    sendDIS(DIS_SEND_ID,  sizeof(M01_02_01_SEND), M01_02_01_SEND);		// {0x10, 0x01, 0x02, 0x01}
 8000c3e:	4b48      	ldr	r3, [pc, #288]	; (8000d60 <initDIS+0x1b4>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a4e      	ldr	r2, [pc, #312]	; (8000d7c <initDIS+0x1d0>)
 8000c44:	2104      	movs	r1, #4
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fe46 	bl	80008d8 <sendDIS>
    waitDIS(DIS_REC_ID, M00_01_REC);									// {0x10, 0x00, 0x01}
 8000c4c:	4b47      	ldr	r3, [pc, #284]	; (8000d6c <initDIS+0x1c0>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4947      	ldr	r1, [pc, #284]	; (8000d70 <initDIS+0x1c4>)
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ff26 	bl	8000aa4 <waitDIS>
	HAL_Delay(10);
 8000c58:	200a      	movs	r0, #10
 8000c5a:	f002 ffe9 	bl	8003c30 <HAL_Delay>
    sendDIS(DIS_SEND_ID,  sizeof(M01_01_00_SEND), M01_01_00_SEND);		// {0x10, 0x01, 0x02, 0x00}
 8000c5e:	4b40      	ldr	r3, [pc, #256]	; (8000d60 <initDIS+0x1b4>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a47      	ldr	r2, [pc, #284]	; (8000d80 <initDIS+0x1d4>)
 8000c64:	2104      	movs	r1, #4
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fe36 	bl	80008d8 <sendDIS>
	HAL_Delay(10);
 8000c6c:	200a      	movs	r0, #10
 8000c6e:	f002 ffdf 	bl	8003c30 <HAL_Delay>
    sendDIS(DIS_SEND_ID,  sizeof(M08_SEND), M08_SEND);					// {0x10, 0x08}
 8000c72:	4b3b      	ldr	r3, [pc, #236]	; (8000d60 <initDIS+0x1b4>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a43      	ldr	r2, [pc, #268]	; (8000d84 <initDIS+0x1d8>)
 8000c78:	2102      	movs	r1, #2
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fe2c 	bl	80008d8 <sendDIS>
    waitDIS(DIS_REC_ID, M09_1_REC);										// {0x20, 0x09, 0x20, 0x0B, 0x50, 0x00, 0x32, 0x44}
 8000c80:	4b3a      	ldr	r3, [pc, #232]	; (8000d6c <initDIS+0x1c0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4940      	ldr	r1, [pc, #256]	; (8000d88 <initDIS+0x1dc>)
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ff0c 	bl	8000aa4 <waitDIS>
    waitDIS(DIS_REC_ID, M09_2_REC);										// {0x10, 0x30, 0x34, 0x00, 0x31, 0x00}
 8000c8c:	4b37      	ldr	r3, [pc, #220]	; (8000d6c <initDIS+0x1c0>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	493e      	ldr	r1, [pc, #248]	; (8000d8c <initDIS+0x1e0>)
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff06 	bl	8000aa4 <waitDIS>
	HAL_Delay(10);
 8000c98:	200a      	movs	r0, #10
 8000c9a:	f002 ffc9 	bl	8003c30 <HAL_Delay>
    sendDIS(DIS_SEND_ID,  sizeof(M09_1_SEND), M09_1_SEND);				// {0x20, 0x09, 0x20, 0x00, 0x50, 0x07, 0x12,  0x4E}
 8000c9e:	4b30      	ldr	r3, [pc, #192]	; (8000d60 <initDIS+0x1b4>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a3b      	ldr	r2, [pc, #236]	; (8000d90 <initDIS+0x1e4>)
 8000ca4:	2108      	movs	r1, #8
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fe16 	bl	80008d8 <sendDIS>
    sendDIS(DIS_SEND_ID,  sizeof(M09_2_SEND), M09_2_SEND);				// {0x20, 0x41, 0x56, 0x4C, 0x4C, 0x2D, 0x30,  0x32}
 8000cac:	4b2c      	ldr	r3, [pc, #176]	; (8000d60 <initDIS+0x1b4>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a38      	ldr	r2, [pc, #224]	; (8000d94 <initDIS+0x1e8>)
 8000cb2:	2108      	movs	r1, #8
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fe0f 	bl	80008d8 <sendDIS>
    sendDIS(DIS_SEND_ID,  sizeof(M09_3_SEND), M09_3_SEND);				// {0x10, 0x30, 0x30, 0x00}
 8000cba:	4b29      	ldr	r3, [pc, #164]	; (8000d60 <initDIS+0x1b4>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a36      	ldr	r2, [pc, #216]	; (8000d98 <initDIS+0x1ec>)
 8000cc0:	2104      	movs	r1, #4
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fe08 	bl	80008d8 <sendDIS>
	HAL_Delay(10);
 8000cc8:	200a      	movs	r0, #10
 8000cca:	f002 ffb1 	bl	8003c30 <HAL_Delay>
    sendDIS(DIS_SEND_ID,  sizeof(M24_SEND), M24_SEND);					// {0x10, 0x24}
 8000cce:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <initDIS+0x1b4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a32      	ldr	r2, [pc, #200]	; (8000d9c <initDIS+0x1f0>)
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fdfe 	bl	80008d8 <sendDIS>
 	HAL_Delay(10);
 8000cdc:	200a      	movs	r0, #10
 8000cde:	f002 ffa7 	bl	8003c30 <HAL_Delay>
    for(int i = 0; i<4; i++)  { 
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	e00c      	b.n	8000d02 <initDIS+0x156>
		sendDIS(DIS_SEND_ID,  sizeof(A3_MESSAGE), A3_MESSAGE);			// {0xA3}
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <initDIS+0x1b4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a22      	ldr	r2, [pc, #136]	; (8000d78 <initDIS+0x1cc>)
 8000cee:	2101      	movs	r1, #1
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fdf1 	bl	80008d8 <sendDIS>
		HAL_Delay(25);
 8000cf6:	2019      	movs	r0, #25
 8000cf8:	f002 ff9a 	bl	8003c30 <HAL_Delay>
    for(int i = 0; i<4; i++)  { 
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	ddef      	ble.n	8000ce8 <initDIS+0x13c>
	}
    sendDIS(DIS_SEND_ID,  sizeof(M28_SEND), M28_SEND);					// {0x10, 0x28}
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <initDIS+0x1b4>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a24      	ldr	r2, [pc, #144]	; (8000da0 <initDIS+0x1f4>)
 8000d0e:	2102      	movs	r1, #2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fde1 	bl	80008d8 <sendDIS>
    waitDIS(DIS_REC_ID, M05_1_REC);										// {0x20, 0x29, 0x02, 0x39, 0x1E, 0xD0, 0x07, 0x01}
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <initDIS+0x1c0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4922      	ldr	r1, [pc, #136]	; (8000da4 <initDIS+0x1f8>)
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fec1 	bl	8000aa4 <waitDIS>
    waitDIS(DIS_REC_ID, M05_2_REC);										// {0x10, 0x01}
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <initDIS+0x1c0>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4920      	ldr	r1, [pc, #128]	; (8000da8 <initDIS+0x1fc>)
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff febb 	bl	8000aa4 <waitDIS>
	HAL_Delay(10);
 8000d2e:	200a      	movs	r0, #10
 8000d30:	f002 ff7e 	bl	8003c30 <HAL_Delay>
    sendDIS(DIS_SEND_ID,  sizeof(M20_SEND), M20_SEND);					// {0x10, 0x20, 0x3B, 0xA0, 0x00}
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <initDIS+0x1b4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a1c      	ldr	r2, [pc, #112]	; (8000dac <initDIS+0x200>)
 8000d3a:	2105      	movs	r1, #5
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fdcb 	bl	80008d8 <sendDIS>
    waitDIS(DIS_REC_ID, M21_REC);										// {0x10, 0x21, 0x3B, 0xA0, 0x00}
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <initDIS+0x1c0>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	491a      	ldr	r1, [pc, #104]	; (8000db0 <initDIS+0x204>)
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff feab 	bl	8000aa4 <waitDIS>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000104 	.word	0x20000104
 8000d5c:	20000105 	.word	0x20000105
 8000d60:	20000024 	.word	0x20000024
 8000d64:	2000002c 	.word	0x2000002c
 8000d68:	20000034 	.word	0x20000034
 8000d6c:	20000028 	.word	0x20000028
 8000d70:	200000a8 	.word	0x200000a8
 8000d74:	2000003c 	.word	0x2000003c
 8000d78:	20000088 	.word	0x20000088
 8000d7c:	20000040 	.word	0x20000040
 8000d80:	20000044 	.word	0x20000044
 8000d84:	20000048 	.word	0x20000048
 8000d88:	2000008c 	.word	0x2000008c
 8000d8c:	20000094 	.word	0x20000094
 8000d90:	20000054 	.word	0x20000054
 8000d94:	2000005c 	.word	0x2000005c
 8000d98:	20000064 	.word	0x20000064
 8000d9c:	2000004c 	.word	0x2000004c
 8000da0:	20000050 	.word	0x20000050
 8000da4:	2000009c 	.word	0x2000009c
 8000da8:	200000a4 	.word	0x200000a4
 8000dac:	20000068 	.word	0x20000068
 8000db0:	200000ac 	.word	0x200000ac

08000db4 <claimScreen>:


void claimScreen(void) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
    sendDIS(DIS_SEND_ID,  sizeof(R_CLAIM), R_CLAIM);					// {0x10, 0x52, 0x05, 0x80, 0x00, 0x1B, 0x40, 0x30}
 8000db8:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <claimScreen+0x98>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a24      	ldr	r2, [pc, #144]	; (8000e50 <claimScreen+0x9c>)
 8000dbe:	2108      	movs	r1, #8
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fd89 	bl	80008d8 <sendDIS>
    waitDIS(DIS_REC_ID, M53_84_REC);									// {0x10, 0x53, 0x84}
 8000dc6:	4b23      	ldr	r3, [pc, #140]	; (8000e54 <claimScreen+0xa0>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4923      	ldr	r1, [pc, #140]	; (8000e58 <claimScreen+0xa4>)
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fe69 	bl	8000aa4 <waitDIS>
    waitDIS(DIS_REC_ID, M53_05_REC);									// {0x10, 0x53, 0x05}
 8000dd2:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <claimScreen+0xa0>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4921      	ldr	r1, [pc, #132]	; (8000e5c <claimScreen+0xa8>)
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fe63 	bl	8000aa4 <waitDIS>
    waitDIS(DIS_REC_ID, M2E_REC);										// {0x10, 0x2E}
 8000dde:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <claimScreen+0xa0>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	491f      	ldr	r1, [pc, #124]	; (8000e60 <claimScreen+0xac>)
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fe5d 	bl	8000aa4 <waitDIS>
	HAL_Delay(10);
 8000dea:	200a      	movs	r0, #10
 8000dec:	f002 ff20 	bl	8003c30 <HAL_Delay>
    sendDIS(DIS_SEND_ID,  sizeof(M2F_SEND), M2F_SEND);					// {0x10, 0x2F}
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <claimScreen+0x98>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a1b      	ldr	r2, [pc, #108]	; (8000e64 <claimScreen+0xb0>)
 8000df6:	2102      	movs	r1, #2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fd6d 	bl	80008d8 <sendDIS>
	HAL_Delay(10);
 8000dfe:	200a      	movs	r0, #10
 8000e00:	f002 ff16 	bl	8003c30 <HAL_Delay>
    sendDIS(DIS_SEND_ID,  sizeof(R_CLAIM), R_CLAIM);					// {0x10, 0x52, 0x05, 0x80, 0x00, 0x1B, 0x40, 0x30}
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <claimScreen+0x98>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a11      	ldr	r2, [pc, #68]	; (8000e50 <claimScreen+0x9c>)
 8000e0a:	2108      	movs	r1, #8
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fd63 	bl	80008d8 <sendDIS>
    waitDIS(DIS_REC_ID, M53_85_REC);									// {0x10, 0x53, 0x85}
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <claimScreen+0xa0>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4914      	ldr	r1, [pc, #80]	; (8000e68 <claimScreen+0xb4>)
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fe43 	bl	8000aa4 <waitDIS>
	HAL_Delay(10);
 8000e1e:	200a      	movs	r0, #10
 8000e20:	f002 ff06 	bl	8003c30 <HAL_Delay>
    sendDIS(DIS_SEND_ID,  sizeof(R_CLEAR), R_CLEAR);					// {0x10, 0x52, 0x05, 0x02, 0x00, 0x1B, 0x40, 0x30}
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <claimScreen+0x98>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a10      	ldr	r2, [pc, #64]	; (8000e6c <claimScreen+0xb8>)
 8000e2a:	2108      	movs	r1, #8
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fd53 	bl	80008d8 <sendDIS>
 	HAL_Delay(10);
 8000e32:	200a      	movs	r0, #10
 8000e34:	f002 fefc 	bl	8003c30 <HAL_Delay>
    sendDIS(DIS_SEND_ID,  sizeof(M39_SEND), M39_SEND);					// {0x10, 0x39}
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <claimScreen+0x98>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0c      	ldr	r2, [pc, #48]	; (8000e70 <claimScreen+0xbc>)
 8000e3e:	2102      	movs	r1, #2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fd49 	bl	80008d8 <sendDIS>
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000024 	.word	0x20000024
 8000e50:	20000078 	.word	0x20000078
 8000e54:	20000028 	.word	0x20000028
 8000e58:	200000b8 	.word	0x200000b8
 8000e5c:	200000b4 	.word	0x200000b4
 8000e60:	200000c0 	.word	0x200000c0
 8000e64:	20000074 	.word	0x20000074
 8000e68:	200000bc 	.word	0x200000bc
 8000e6c:	20000080 	.word	0x20000080
 8000e70:	20000070 	.word	0x20000070

08000e74 <drawFrame>:


void drawFrame(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
//    sendDIS(DIS_SEND_ID,  sizeof(DRAW_7), DRAW_7);
//    sendDIS(DIS_SEND_ID,  sizeof(DRAW_8), DRAW_8);
//    sendDIS(DIS_SEND_ID,  sizeof(DRAW_9), DRAW_9);
//    sendDIS(DIS_SEND_ID,  sizeof(DRAW_10), DRAW_10);
//    sendDIS(DIS_SEND_ID,  sizeof(DRAW_11), DRAW_11);
	uint8_t test1[8] = {0x20, 0x57, 0x11, 0x06, 0x01, 0x01, 0x48, 0x41};
 8000e7a:	4a25      	ldr	r2, [pc, #148]	; (8000f10 <drawFrame+0x9c>)
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e84:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t test2[8] = {0x20, 0x4C, 0x4C, 0x4F, 0x65, 0x46, 0x52, 0x45};
 8000e88:	4a22      	ldr	r2, [pc, #136]	; (8000f14 <drawFrame+0xa0>)
 8000e8a:	f107 0308 	add.w	r3, r7, #8
 8000e8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e92:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t test3[8] = {0x10, 0x44, 0x45, 0x52, 0x49, 0x4B};
 8000e96:	4a20      	ldr	r2, [pc, #128]	; (8000f18 <drawFrame+0xa4>)
 8000e98:	463b      	mov	r3, r7
 8000e9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e9e:	6018      	str	r0, [r3, #0]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	8019      	strh	r1, [r3, #0]
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	0c0a      	lsrs	r2, r1, #16
 8000ea8:	701a      	strb	r2, [r3, #0]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	71fb      	strb	r3, [r7, #7]
	sendDIS(DIS_SEND_ID,  sizeof(test1), test1);
 8000eae:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <drawFrame+0xa8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f107 0210 	add.w	r2, r7, #16
 8000eb6:	2108      	movs	r1, #8
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fd0d 	bl	80008d8 <sendDIS>
	sendDIS(DIS_SEND_ID,  sizeof(test2), test2);
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <drawFrame+0xa8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f107 0208 	add.w	r2, r7, #8
 8000ec6:	2108      	movs	r1, #8
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fd05 	bl	80008d8 <sendDIS>
	sendDIS(DIS_SEND_ID,  sizeof(test3), test3);
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <drawFrame+0xa8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	463a      	mov	r2, r7
 8000ed4:	2108      	movs	r1, #8
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fcfe 	bl	80008d8 <sendDIS>

    sendDIS(DIS_SEND_ID,  sizeof(A3_MESSAGE), A3_MESSAGE);				// {0xA3}
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <drawFrame+0xa8>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0f      	ldr	r2, [pc, #60]	; (8000f20 <drawFrame+0xac>)
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fcf7 	bl	80008d8 <sendDIS>
    sendDIS(DIS_SEND_ID,  sizeof(M39_SEND), M39_SEND);					// {0x10, 0x39}
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <drawFrame+0xa8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a0d      	ldr	r2, [pc, #52]	; (8000f24 <drawFrame+0xb0>)
 8000ef0:	2102      	movs	r1, #2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fcf0 	bl	80008d8 <sendDIS>
    sendDIS(DIS_SEND_ID,  sizeof(A3_MESSAGE), A3_MESSAGE);				// {0xA3}
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <drawFrame+0xa8>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <drawFrame+0xac>)
 8000efe:	2101      	movs	r1, #1
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fce9 	bl	80008d8 <sendDIS>
 
}   
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	08008ac4 	.word	0x08008ac4
 8000f14:	08008acc 	.word	0x08008acc
 8000f18:	08008ad4 	.word	0x08008ad4
 8000f1c:	20000024 	.word	0x20000024
 8000f20:	20000088 	.word	0x20000088
 8000f24:	20000070 	.word	0x20000070

08000f28 <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 8000f2e:	2114      	movs	r1, #20
 8000f30:	483d      	ldr	r0, [pc, #244]	; (8001028 <collectHardwareInfo+0x100>)
 8000f32:	f7ff fc45 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 8000f36:	f002 feb5 	bl	8003ca4 <HAL_GetDEVID>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	210a      	movs	r1, #10
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fc52 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8000f44:	2116      	movs	r1, #22
 8000f46:	4839      	ldr	r0, [pc, #228]	; (800102c <collectHardwareInfo+0x104>)
 8000f48:	f7ff fc3a 	bl	80007c0 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 8000f4c:	f002 fe9e 	bl	8003c8c <HAL_GetREVID>
 8000f50:	4603      	mov	r3, r0
 8000f52:	f242 0201 	movw	r2, #8193	; 0x2001
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d016      	beq.n	8000f88 <collectHardwareInfo+0x60>
 8000f5a:	f242 0201 	movw	r2, #8193	; 0x2001
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d817      	bhi.n	8000f92 <collectHardwareInfo+0x6a>
 8000f62:	f241 0201 	movw	r2, #4097	; 0x1001
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d004      	beq.n	8000f74 <collectHardwareInfo+0x4c>
 8000f6a:	f241 0203 	movw	r2, #4099	; 0x1003
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d005      	beq.n	8000f7e <collectHardwareInfo+0x56>
 8000f72:	e00e      	b.n	8000f92 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8000f74:	2101      	movs	r1, #1
 8000f76:	482e      	ldr	r0, [pc, #184]	; (8001030 <collectHardwareInfo+0x108>)
 8000f78:	f7ff fc22 	bl	80007c0 <uartTransmit>
			break;
 8000f7c:	e011      	b.n	8000fa2 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 8000f7e:	2101      	movs	r1, #1
 8000f80:	482c      	ldr	r0, [pc, #176]	; (8001034 <collectHardwareInfo+0x10c>)
 8000f82:	f7ff fc1d 	bl	80007c0 <uartTransmit>
			break;
 8000f86:	e00c      	b.n	8000fa2 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000f88:	2101      	movs	r1, #1
 8000f8a:	482b      	ldr	r0, [pc, #172]	; (8001038 <collectHardwareInfo+0x110>)
 8000f8c:	f7ff fc18 	bl	80007c0 <uartTransmit>
			break;
 8000f90:	e007      	b.n	8000fa2 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 8000f92:	f002 fe7b 	bl	8003c8c <HAL_GetREVID>
 8000f96:	4603      	mov	r3, r0
 8000f98:	210a      	movs	r1, #10
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fc24 	bl	80007e8 <uartTransmitNumber>
			break;
 8000fa0:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 8000fa2:	2114      	movs	r1, #20
 8000fa4:	4825      	ldr	r0, [pc, #148]	; (800103c <collectHardwareInfo+0x114>)
 8000fa6:	f7ff fc0b 	bl	80007c0 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 8000faa:	f005 f907 	bl	80061bc <HAL_RCC_GetSysClockFreq>
 8000fae:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a23      	ldr	r2, [pc, #140]	; (8001040 <collectHardwareInfo+0x118>)
 8000fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb8:	0c9b      	lsrs	r3, r3, #18
 8000fba:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 8000fbc:	210a      	movs	r1, #10
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff fc12 	bl	80007e8 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	481f      	ldr	r0, [pc, #124]	; (8001044 <collectHardwareInfo+0x11c>)
 8000fc8:	f7ff fbfa 	bl	80007c0 <uartTransmit>


	uartTransmit("\n", 1);
 8000fcc:	2101      	movs	r1, #1
 8000fce:	481e      	ldr	r0, [pc, #120]	; (8001048 <collectHardwareInfo+0x120>)
 8000fd0:	f7ff fbf6 	bl	80007c0 <uartTransmit>
	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 8000fd4:	2110      	movs	r1, #16
 8000fd6:	481d      	ldr	r0, [pc, #116]	; (800104c <collectHardwareInfo+0x124>)
 8000fd8:	f7ff fbf2 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 8000fdc:	f002 fe70 	bl	8003cc0 <HAL_GetUIDw0>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2110      	movs	r1, #16
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fbff 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000fea:	2101      	movs	r1, #1
 8000fec:	4818      	ldr	r0, [pc, #96]	; (8001050 <collectHardwareInfo+0x128>)
 8000fee:	f7ff fbe7 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 8000ff2:	f002 fe71 	bl	8003cd8 <HAL_GetUIDw1>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2110      	movs	r1, #16
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fbf4 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8001000:	2101      	movs	r1, #1
 8001002:	4813      	ldr	r0, [pc, #76]	; (8001050 <collectHardwareInfo+0x128>)
 8001004:	f7ff fbdc 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8001008:	f002 fe72 	bl	8003cf0 <HAL_GetUIDw2>
 800100c:	4603      	mov	r3, r0
 800100e:	2110      	movs	r1, #16
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fbe9 	bl	80007e8 <uartTransmitNumber>

	uartTransmit("\n", 1);
 8001016:	2101      	movs	r1, #1
 8001018:	480b      	ldr	r0, [pc, #44]	; (8001048 <collectHardwareInfo+0x120>)
 800101a:	f7ff fbd1 	bl	80007c0 <uartTransmit>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	08008adc 	.word	0x08008adc
 800102c:	08008af0 	.word	0x08008af0
 8001030:	08008b08 	.word	0x08008b08
 8001034:	08008b0c 	.word	0x08008b0c
 8001038:	08008b10 	.word	0x08008b10
 800103c:	08008b14 	.word	0x08008b14
 8001040:	431bde83 	.word	0x431bde83
 8001044:	08008b28 	.word	0x08008b28
 8001048:	08008b30 	.word	0x08008b30
 800104c:	08008b34 	.word	0x08008b34
 8001050:	08008b44 	.word	0x08008b44

08001054 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 8001058:	2110      	movs	r1, #16
 800105a:	4826      	ldr	r0, [pc, #152]	; (80010f4 <collectSoftwareInfo+0xa0>)
 800105c:	f7ff fbb0 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8001060:	2108      	movs	r1, #8
 8001062:	4825      	ldr	r0, [pc, #148]	; (80010f8 <collectSoftwareInfo+0xa4>)
 8001064:	f7ff fbac 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8001068:	2110      	movs	r1, #16
 800106a:	4824      	ldr	r0, [pc, #144]	; (80010fc <collectSoftwareInfo+0xa8>)
 800106c:	f7ff fba8 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8001070:	2108      	movs	r1, #8
 8001072:	4823      	ldr	r0, [pc, #140]	; (8001100 <collectSoftwareInfo+0xac>)
 8001074:	f7ff fba4 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8001078:	210e      	movs	r1, #14
 800107a:	4822      	ldr	r0, [pc, #136]	; (8001104 <collectSoftwareInfo+0xb0>)
 800107c:	f7ff fba0 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 8001080:	2129      	movs	r1, #41	; 0x29
 8001082:	4821      	ldr	r0, [pc, #132]	; (8001108 <collectSoftwareInfo+0xb4>)
 8001084:	f7ff fb9c 	bl	80007c0 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8001088:	2101      	movs	r1, #1
 800108a:	4820      	ldr	r0, [pc, #128]	; (800110c <collectSoftwareInfo+0xb8>)
 800108c:	f7ff fb98 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8001090:	2115      	movs	r1, #21
 8001092:	481f      	ldr	r0, [pc, #124]	; (8001110 <collectSoftwareInfo+0xbc>)
 8001094:	f7ff fb94 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 8001098:	210e      	movs	r1, #14
 800109a:	481e      	ldr	r0, [pc, #120]	; (8001114 <collectSoftwareInfo+0xc0>)
 800109c:	f7ff fb90 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 80010a0:	2114      	movs	r1, #20
 80010a2:	481d      	ldr	r0, [pc, #116]	; (8001118 <collectSoftwareInfo+0xc4>)
 80010a4:	f7ff fb8c 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 80010a8:	2129      	movs	r1, #41	; 0x29
 80010aa:	481c      	ldr	r0, [pc, #112]	; (800111c <collectSoftwareInfo+0xc8>)
 80010ac:	f7ff fb88 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 80010b0:	2115      	movs	r1, #21
 80010b2:	481b      	ldr	r0, [pc, #108]	; (8001120 <collectSoftwareInfo+0xcc>)
 80010b4:	f7ff fb84 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 80010b8:	2115      	movs	r1, #21
 80010ba:	481a      	ldr	r0, [pc, #104]	; (8001124 <collectSoftwareInfo+0xd0>)
 80010bc:	f7ff fb80 	bl	80007c0 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80010c0:	2101      	movs	r1, #1
 80010c2:	4812      	ldr	r0, [pc, #72]	; (800110c <collectSoftwareInfo+0xb8>)
 80010c4:	f7ff fb7c 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80010c8:	2110      	movs	r1, #16
 80010ca:	4817      	ldr	r0, [pc, #92]	; (8001128 <collectSoftwareInfo+0xd4>)
 80010cc:	f7ff fb78 	bl	80007c0 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 80010d0:	210b      	movs	r1, #11
 80010d2:	4816      	ldr	r0, [pc, #88]	; (800112c <collectSoftwareInfo+0xd8>)
 80010d4:	f7ff fb74 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80010d8:	2110      	movs	r1, #16
 80010da:	4815      	ldr	r0, [pc, #84]	; (8001130 <collectSoftwareInfo+0xdc>)
 80010dc:	f7ff fb70 	bl	80007c0 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 80010e0:	2109      	movs	r1, #9
 80010e2:	4814      	ldr	r0, [pc, #80]	; (8001134 <collectSoftwareInfo+0xe0>)
 80010e4:	f7ff fb6c 	bl	80007c0 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80010e8:	2101      	movs	r1, #1
 80010ea:	4808      	ldr	r0, [pc, #32]	; (800110c <collectSoftwareInfo+0xb8>)
 80010ec:	f7ff fb68 	bl	80007c0 <uartTransmit>
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	08008b48 	.word	0x08008b48
 80010f8:	08008b58 	.word	0x08008b58
 80010fc:	08008b60 	.word	0x08008b60
 8001100:	08008b70 	.word	0x08008b70
 8001104:	08008b78 	.word	0x08008b78
 8001108:	08008b88 	.word	0x08008b88
 800110c:	08008b30 	.word	0x08008b30
 8001110:	08008bb4 	.word	0x08008bb4
 8001114:	08008bcc 	.word	0x08008bcc
 8001118:	08008bdc 	.word	0x08008bdc
 800111c:	08008bf0 	.word	0x08008bf0
 8001120:	08008c1c 	.word	0x08008c1c
 8001124:	08008c34 	.word	0x08008c34
 8001128:	08008c4c 	.word	0x08008c4c
 800112c:	08008c5c 	.word	0x08008c5c
 8001130:	08008c68 	.word	0x08008c68
 8001134:	08008c78 	.word	0x08008c78

08001138 <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 800113c:	2113      	movs	r1, #19
 800113e:	4824      	ldr	r0, [pc, #144]	; (80011d0 <collectMiddlewareInfo+0x98>)
 8001140:	f7ff fb3e 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8001144:	210a      	movs	r1, #10
 8001146:	2005      	movs	r0, #5
 8001148:	f7ff fb4e 	bl	80007e8 <uartTransmitNumber>
	uartTransmit(".", 1);
 800114c:	2101      	movs	r1, #1
 800114e:	4821      	ldr	r0, [pc, #132]	; (80011d4 <collectMiddlewareInfo+0x9c>)
 8001150:	f7ff fb36 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8001154:	210a      	movs	r1, #10
 8001156:	2001      	movs	r0, #1
 8001158:	f7ff fb46 	bl	80007e8 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 800115c:	2111      	movs	r1, #17
 800115e:	481e      	ldr	r0, [pc, #120]	; (80011d8 <collectMiddlewareInfo+0xa0>)
 8001160:	f7ff fb2e 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8001164:	f002 fd88 	bl	8003c78 <HAL_GetHalVersion>
 8001168:	4603      	mov	r3, r0
 800116a:	0e1b      	lsrs	r3, r3, #24
 800116c:	b2db      	uxtb	r3, r3
 800116e:	210a      	movs	r1, #10
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fb39 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8001176:	2101      	movs	r1, #1
 8001178:	4816      	ldr	r0, [pc, #88]	; (80011d4 <collectMiddlewareInfo+0x9c>)
 800117a:	f7ff fb21 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 800117e:	f002 fd7b 	bl	8003c78 <HAL_GetHalVersion>
 8001182:	4603      	mov	r3, r0
 8001184:	0c1b      	lsrs	r3, r3, #16
 8001186:	b2db      	uxtb	r3, r3
 8001188:	210a      	movs	r1, #10
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fb2c 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8001190:	2101      	movs	r1, #1
 8001192:	4810      	ldr	r0, [pc, #64]	; (80011d4 <collectMiddlewareInfo+0x9c>)
 8001194:	f7ff fb14 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8001198:	f002 fd6e 	bl	8003c78 <HAL_GetHalVersion>
 800119c:	4603      	mov	r3, r0
 800119e:	0a1b      	lsrs	r3, r3, #8
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	210a      	movs	r1, #10
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fb1f 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 80011aa:	2101      	movs	r1, #1
 80011ac:	4809      	ldr	r0, [pc, #36]	; (80011d4 <collectMiddlewareInfo+0x9c>)
 80011ae:	f7ff fb07 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 80011b2:	f002 fd61 	bl	8003c78 <HAL_GetHalVersion>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	210a      	movs	r1, #10
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fb13 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 80011c2:	2101      	movs	r1, #1
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <collectMiddlewareInfo+0xa4>)
 80011c6:	f7ff fafb 	bl	80007c0 <uartTransmit>
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	08008c84 	.word	0x08008c84
 80011d4:	08008c98 	.word	0x08008c98
 80011d8:	08008c9c 	.word	0x08008c9c
 80011dc:	08008b30 	.word	0x08008b30

080011e0 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 80011e4:	2114      	movs	r1, #20
 80011e6:	4814      	ldr	r0, [pc, #80]	; (8001238 <collectGitcounts+0x58>)
 80011e8:	f7ff faea 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 80011ec:	2103      	movs	r1, #3
 80011ee:	4813      	ldr	r0, [pc, #76]	; (800123c <collectGitcounts+0x5c>)
 80011f0:	f7ff fae6 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 80011f4:	2116      	movs	r1, #22
 80011f6:	4812      	ldr	r0, [pc, #72]	; (8001240 <collectGitcounts+0x60>)
 80011f8:	f7ff fae2 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 80011fc:	2103      	movs	r1, #3
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <collectGitcounts+0x64>)
 8001200:	f7ff fade 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 8001204:	211b      	movs	r1, #27
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <collectGitcounts+0x68>)
 8001208:	f7ff fada 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 800120c:	2103      	movs	r1, #3
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <collectGitcounts+0x6c>)
 8001210:	f7ff fad6 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8001214:	2115      	movs	r1, #21
 8001216:	480e      	ldr	r0, [pc, #56]	; (8001250 <collectGitcounts+0x70>)
 8001218:	f7ff fad2 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 800121c:	2102      	movs	r1, #2
 800121e:	480d      	ldr	r0, [pc, #52]	; (8001254 <collectGitcounts+0x74>)
 8001220:	f7ff face 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8001224:	2114      	movs	r1, #20
 8001226:	480c      	ldr	r0, [pc, #48]	; (8001258 <collectGitcounts+0x78>)
 8001228:	f7ff faca 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 800122c:	2103      	movs	r1, #3
 800122e:	480b      	ldr	r0, [pc, #44]	; (800125c <collectGitcounts+0x7c>)
 8001230:	f7ff fac6 	bl	80007c0 <uartTransmit>
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	08008cb0 	.word	0x08008cb0
 800123c:	08008cc4 	.word	0x08008cc4
 8001240:	08008cc8 	.word	0x08008cc8
 8001244:	08008ce0 	.word	0x08008ce0
 8001248:	08008ce4 	.word	0x08008ce4
 800124c:	08008d00 	.word	0x08008d00
 8001250:	08008bb4 	.word	0x08008bb4
 8001254:	08008d04 	.word	0x08008d04
 8001258:	08008bdc 	.word	0x08008bdc
 800125c:	08008d08 	.word	0x08008d08

08001260 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8001264:	2111      	movs	r1, #17
 8001266:	480e      	ldr	r0, [pc, #56]	; (80012a0 <collectSystemInfo+0x40>)
 8001268:	f7ff faaa 	bl	80007c0 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 800126c:	f7ff fe5c 	bl	8000f28 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8001270:	2111      	movs	r1, #17
 8001272:	480c      	ldr	r0, [pc, #48]	; (80012a4 <collectSystemInfo+0x44>)
 8001274:	f7ff faa4 	bl	80007c0 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8001278:	f7ff feec 	bl	8001054 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 800127c:	2113      	movs	r1, #19
 800127e:	480a      	ldr	r0, [pc, #40]	; (80012a8 <collectSystemInfo+0x48>)
 8001280:	f7ff fa9e 	bl	80007c0 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8001284:	f7ff ff58 	bl	8001138 <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8001288:	2113      	movs	r1, #19
 800128a:	4808      	ldr	r0, [pc, #32]	; (80012ac <collectSystemInfo+0x4c>)
 800128c:	f7ff fa98 	bl	80007c0 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8001290:	f7ff ffa6 	bl	80011e0 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 8001294:	2103      	movs	r1, #3
 8001296:	4806      	ldr	r0, [pc, #24]	; (80012b0 <collectSystemInfo+0x50>)
 8001298:	f7ff fa92 	bl	80007c0 <uartTransmit>
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	08008d0c 	.word	0x08008d0c
 80012a4:	08008d20 	.word	0x08008d20
 80012a8:	08008d34 	.word	0x08008d34
 80012ac:	08008d48 	.word	0x08008d48
 80012b0:	08008d5c 	.word	0x08008d5c

080012b4 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 80012ba:	2300      	movs	r3, #0
 80012bc:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 80012be:	4b25      	ldr	r3, [pc, #148]	; (8001354 <readResetSource+0xa0>)
 80012c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d002      	beq.n	80012d0 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	3301      	adds	r3, #1
 80012ce:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 80012d0:	4b20      	ldr	r3, [pc, #128]	; (8001354 <readResetSource+0xa0>)
 80012d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	3302      	adds	r3, #2
 80012e0:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <readResetSource+0xa0>)
 80012e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	da02      	bge.n	80012f0 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	3304      	adds	r3, #4
 80012ee:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <readResetSource+0xa0>)
 80012f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d002      	beq.n	8001302 <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	3308      	adds	r3, #8
 8001300:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <readResetSource+0xa0>)
 8001304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001306:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d002      	beq.n	8001314 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	3310      	adds	r3, #16
 8001312:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <readResetSource+0xa0>)
 8001316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	3320      	adds	r3, #32
 8001324:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <readResetSource+0xa0>)
 8001328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800132a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d002      	beq.n	8001338 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	3340      	adds	r3, #64	; 0x40
 8001336:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <readResetSource+0xa0>)
 800133a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800133c:	4a05      	ldr	r2, [pc, #20]	; (8001354 <readResetSource+0xa0>)
 800133e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001342:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8001344:	79fb      	ldrb	r3, [r7, #7]
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800

08001358 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8001362:	2106      	movs	r1, #6
 8001364:	482a      	ldr	r0, [pc, #168]	; (8001410 <printResetSource+0xb8>)
 8001366:	f7ff fa2b 	bl	80007c0 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d104      	bne.n	800137a <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8001370:	210f      	movs	r1, #15
 8001372:	4828      	ldr	r0, [pc, #160]	; (8001414 <printResetSource+0xbc>)
 8001374:	f7ff fa24 	bl	80007c0 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8001378:	e046      	b.n	8001408 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8001384:	2118      	movs	r1, #24
 8001386:	4824      	ldr	r0, [pc, #144]	; (8001418 <printResetSource+0xc0>)
 8001388:	f7ff fa1a 	bl	80007c0 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8001396:	2116      	movs	r1, #22
 8001398:	4820      	ldr	r0, [pc, #128]	; (800141c <printResetSource+0xc4>)
 800139a:	f7ff fa11 	bl	80007c0 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 80013a8:	210a      	movs	r1, #10
 80013aa:	481d      	ldr	r0, [pc, #116]	; (8001420 <printResetSource+0xc8>)
 80013ac:	f7ff fa08 	bl	80007c0 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 80013ba:	2110      	movs	r1, #16
 80013bc:	4819      	ldr	r0, [pc, #100]	; (8001424 <printResetSource+0xcc>)
 80013be:	f7ff f9ff 	bl	80007c0 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	f003 0310 	and.w	r3, r3, #16
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 80013cc:	210f      	movs	r1, #15
 80013ce:	4816      	ldr	r0, [pc, #88]	; (8001428 <printResetSource+0xd0>)
 80013d0:	f7ff f9f6 	bl	80007c0 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	f003 0320 	and.w	r3, r3, #32
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 80013de:	210f      	movs	r1, #15
 80013e0:	4812      	ldr	r0, [pc, #72]	; (800142c <printResetSource+0xd4>)
 80013e2:	f7ff f9ed 	bl	80007c0 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 80013f0:	210a      	movs	r1, #10
 80013f2:	480f      	ldr	r0, [pc, #60]	; (8001430 <printResetSource+0xd8>)
 80013f4:	f7ff f9e4 	bl	80007c0 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	da03      	bge.n	8001408 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8001400:	2105      	movs	r1, #5
 8001402:	480c      	ldr	r0, [pc, #48]	; (8001434 <printResetSource+0xdc>)
 8001404:	f7ff f9dc 	bl	80007c0 <uartTransmit>
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	08008d60 	.word	0x08008d60
 8001414:	08008d68 	.word	0x08008d68
 8001418:	08008d78 	.word	0x08008d78
 800141c:	08008d94 	.word	0x08008d94
 8001420:	08008dac 	.word	0x08008dac
 8001424:	08008db8 	.word	0x08008db8
 8001428:	08008dcc 	.word	0x08008dcc
 800142c:	08008ddc 	.word	0x08008ddc
 8001430:	08008dec 	.word	0x08008dec
 8001434:	08008df8 	.word	0x08008df8

08001438 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001440:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001444:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b00      	cmp	r3, #0
 800144e:	d013      	beq.n	8001478 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001450:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001454:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001458:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00b      	beq.n	8001478 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001460:	e000      	b.n	8001464 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001462:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001464:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f9      	beq.n	8001462 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800146e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001478:	687b      	ldr	r3, [r7, #4]
}
 800147a:	4618      	mov	r0, r3
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <ADC_Gaspedal>:
//----------------------------------------------------------------------

// Gaspedal einlesen
//----------------------------------------------------------------------
uint16_t ADC_Gaspedal(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC von Gaspedal einlesen\n");
 800148e:	4820      	ldr	r0, [pc, #128]	; (8001510 <ADC_Gaspedal+0x88>)
 8001490:	f000 faf8 	bl	8001a84 <ITM_SendString>
#endif

	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_6;
 80014a4:	2306      	movs	r3, #6
 80014a6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 80014a8:	2301      	movs	r3, #1
 80014aa:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80014ac:	2301      	movs	r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	4619      	mov	r1, r3
 80014b4:	4817      	ldr	r0, [pc, #92]	; (8001514 <ADC_Gaspedal+0x8c>)
 80014b6:	f002 fe05 	bl	80040c4 <HAL_ADC_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <ADC_Gaspedal+0x3c>
	{
		Error_Handler();
 80014c0:	f002 f98e 	bl	80037e0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);
 80014c4:	4813      	ldr	r0, [pc, #76]	; (8001514 <ADC_Gaspedal+0x8c>)
 80014c6:	f002 fc63 	bl	8003d90 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 80014ca:	2164      	movs	r1, #100	; 0x64
 80014cc:	4811      	ldr	r0, [pc, #68]	; (8001514 <ADC_Gaspedal+0x8c>)
 80014ce:	f002 fd61 	bl	8003f94 <HAL_ADC_PollForConversion>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d105      	bne.n	80014e4 <ADC_Gaspedal+0x5c>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 80014d8:	480e      	ldr	r0, [pc, #56]	; (8001514 <ADC_Gaspedal+0x8c>)
 80014da:	f002 fde6 	bl	80040aa <HAL_ADC_GetValue>
 80014de:	4603      	mov	r3, r0
 80014e0:	82fb      	strh	r3, [r7, #22]
 80014e2:	e002      	b.n	80014ea <ADC_Gaspedal+0x62>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 80014e4:	2004      	movs	r0, #4
 80014e6:	f000 fa25 	bl	8001934 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 80014ea:	480a      	ldr	r0, [pc, #40]	; (8001514 <ADC_Gaspedal+0x8c>)
 80014ec:	f002 fd1e 	bl	8003f2c <HAL_ADC_Stop>

#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC-Wert Gaspedal:\t");
 80014f0:	4809      	ldr	r0, [pc, #36]	; (8001518 <ADC_Gaspedal+0x90>)
 80014f2:	f000 fac7 	bl	8001a84 <ITM_SendString>
	ITM_SendNumber(ADC_Data);
 80014f6:	8afb      	ldrh	r3, [r7, #22]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 facd 	bl	8001a98 <ITM_SendNumber>
	ITM_SendChar('\n');
 80014fe:	200a      	movs	r0, #10
 8001500:	f7ff ff9a 	bl	8001438 <ITM_SendChar>
#endif

	//ADC Wert zurueck geben
	return ADC_Data;
 8001504:	8afb      	ldrh	r3, [r7, #22]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	08008e00 	.word	0x08008e00
 8001514:	20000140 	.word	0x20000140
 8001518:	08008e1c 	.word	0x08008e1c

0800151c <ADC_Bremsdruck>:
//----------------------------------------------------------------------

// Bremsdruck einlesen
//----------------------------------------------------------------------
uint16_t ADC_Bremsdruck(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC von Bremsdruck einlesen\n");
 8001522:	4820      	ldr	r0, [pc, #128]	; (80015a4 <ADC_Bremsdruck+0x88>)
 8001524:	f000 faae 	bl	8001a84 <ITM_SendString>
#endif

	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_14;
 8001538:	230e      	movs	r3, #14
 800153a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 800153c:	2301      	movs	r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001540:	2301      	movs	r3, #1
 8001542:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	4619      	mov	r1, r3
 8001548:	4817      	ldr	r0, [pc, #92]	; (80015a8 <ADC_Bremsdruck+0x8c>)
 800154a:	f002 fdbb 	bl	80040c4 <HAL_ADC_ConfigChannel>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <ADC_Bremsdruck+0x3c>
	{
		Error_Handler();
 8001554:	f002 f944 	bl	80037e0 <Error_Handler>
	}
	
	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8001558:	4813      	ldr	r0, [pc, #76]	; (80015a8 <ADC_Bremsdruck+0x8c>)
 800155a:	f002 fc19 	bl	8003d90 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 800155e:	2164      	movs	r1, #100	; 0x64
 8001560:	4811      	ldr	r0, [pc, #68]	; (80015a8 <ADC_Bremsdruck+0x8c>)
 8001562:	f002 fd17 	bl	8003f94 <HAL_ADC_PollForConversion>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d105      	bne.n	8001578 <ADC_Bremsdruck+0x5c>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 800156c:	480e      	ldr	r0, [pc, #56]	; (80015a8 <ADC_Bremsdruck+0x8c>)
 800156e:	f002 fd9c 	bl	80040aa <HAL_ADC_GetValue>
 8001572:	4603      	mov	r3, r0
 8001574:	82fb      	strh	r3, [r7, #22]
 8001576:	e002      	b.n	800157e <ADC_Bremsdruck+0x62>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8001578:	2004      	movs	r0, #4
 800157a:	f000 f9db 	bl	8001934 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 800157e:	480a      	ldr	r0, [pc, #40]	; (80015a8 <ADC_Bremsdruck+0x8c>)
 8001580:	f002 fcd4 	bl	8003f2c <HAL_ADC_Stop>

#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC-Wert Bremsdruck:\t");
 8001584:	4809      	ldr	r0, [pc, #36]	; (80015ac <ADC_Bremsdruck+0x90>)
 8001586:	f000 fa7d 	bl	8001a84 <ITM_SendString>
	ITM_SendNumber(ADC_Data);
 800158a:	8afb      	ldrh	r3, [r7, #22]
 800158c:	4618      	mov	r0, r3
 800158e:	f000 fa83 	bl	8001a98 <ITM_SendNumber>
	ITM_SendChar('\n');
 8001592:	200a      	movs	r0, #10
 8001594:	f7ff ff50 	bl	8001438 <ITM_SendChar>
#endif

	//ADC Wert zurueck geben
	return ADC_Data;
 8001598:	8afb      	ldrh	r3, [r7, #22]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	08008e30 	.word	0x08008e30
 80015a8:	20000140 	.word	0x20000140
 80015ac:	08008e50 	.word	0x08008e50

080015b0 <ADC_KL15>:
//----------------------------------------------------------------------

// Spannung KL15 einlesen
//----------------------------------------------------------------------
uint16_t ADC_KL15 (void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_3;										// ADC Kanal einstellen
 80015c6:	2303      	movs	r3, #3
 80015c8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 80015ca:	2301      	movs	r3, #1
 80015cc:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 80015ce:	2301      	movs	r3, #1
 80015d0:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	4619      	mov	r1, r3
 80015d6:	4811      	ldr	r0, [pc, #68]	; (800161c <ADC_KL15+0x6c>)
 80015d8:	f002 fd74 	bl	80040c4 <HAL_ADC_ConfigChannel>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <ADC_KL15+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 80015e2:	f002 f8fd 	bl	80037e0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 80015e6:	480d      	ldr	r0, [pc, #52]	; (800161c <ADC_KL15+0x6c>)
 80015e8:	f002 fbd2 	bl	8003d90 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 80015ec:	2164      	movs	r1, #100	; 0x64
 80015ee:	480b      	ldr	r0, [pc, #44]	; (800161c <ADC_KL15+0x6c>)
 80015f0:	f002 fcd0 	bl	8003f94 <HAL_ADC_PollForConversion>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d105      	bne.n	8001606 <ADC_KL15+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 80015fa:	4808      	ldr	r0, [pc, #32]	; (800161c <ADC_KL15+0x6c>)
 80015fc:	f002 fd55 	bl	80040aa <HAL_ADC_GetValue>
 8001600:	4603      	mov	r3, r0
 8001602:	82fb      	strh	r3, [r7, #22]
 8001604:	e002      	b.n	800160c <ADC_KL15+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8001606:	2004      	movs	r0, #4
 8001608:	f000 f994 	bl	8001934 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 800160c:	4803      	ldr	r0, [pc, #12]	; (800161c <ADC_KL15+0x6c>)
 800160e:	f002 fc8d 	bl	8003f2c <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8001612:	8afb      	ldrh	r3, [r7, #22]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000140 	.word	0x20000140

08001620 <ADC_Kuhlwassertemperatur>:
//----------------------------------------------------------------------

// Kuehlwassertemperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_Kuhlwassertemperatur (void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_4;										// ADC Kanal einstellen
 8001636:	2304      	movs	r3, #4
 8001638:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 800163a:	2301      	movs	r3, #1
 800163c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 800163e:	2301      	movs	r3, #1
 8001640:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	4619      	mov	r1, r3
 8001646:	4811      	ldr	r0, [pc, #68]	; (800168c <ADC_Kuhlwassertemperatur+0x6c>)
 8001648:	f002 fd3c 	bl	80040c4 <HAL_ADC_ConfigChannel>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <ADC_Kuhlwassertemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8001652:	f002 f8c5 	bl	80037e0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8001656:	480d      	ldr	r0, [pc, #52]	; (800168c <ADC_Kuhlwassertemperatur+0x6c>)
 8001658:	f002 fb9a 	bl	8003d90 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 800165c:	2164      	movs	r1, #100	; 0x64
 800165e:	480b      	ldr	r0, [pc, #44]	; (800168c <ADC_Kuhlwassertemperatur+0x6c>)
 8001660:	f002 fc98 	bl	8003f94 <HAL_ADC_PollForConversion>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d105      	bne.n	8001676 <ADC_Kuhlwassertemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 800166a:	4808      	ldr	r0, [pc, #32]	; (800168c <ADC_Kuhlwassertemperatur+0x6c>)
 800166c:	f002 fd1d 	bl	80040aa <HAL_ADC_GetValue>
 8001670:	4603      	mov	r3, r0
 8001672:	82fb      	strh	r3, [r7, #22]
 8001674:	e002      	b.n	800167c <ADC_Kuhlwassertemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8001676:	2004      	movs	r0, #4
 8001678:	f000 f95c 	bl	8001934 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 800167c:	4803      	ldr	r0, [pc, #12]	; (800168c <ADC_Kuhlwassertemperatur+0x6c>)
 800167e:	f002 fc55 	bl	8003f2c <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8001682:	8afb      	ldrh	r3, [r7, #22]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000140 	.word	0x20000140

08001690 <ADC_Klimaflap>:
//----------------------------------------------------------------------

// Klimaflapstellung einlesen (Position ueber Poti)
//----------------------------------------------------------------------
uint16_t ADC_Klimaflap (void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_5;										// ADC Kanal einstellen
 80016a6:	2305      	movs	r3, #5
 80016a8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 80016aa:	2301      	movs	r3, #1
 80016ac:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 80016ae:	2301      	movs	r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	4619      	mov	r1, r3
 80016b6:	4811      	ldr	r0, [pc, #68]	; (80016fc <ADC_Klimaflap+0x6c>)
 80016b8:	f002 fd04 	bl	80040c4 <HAL_ADC_ConfigChannel>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <ADC_Klimaflap+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 80016c2:	f002 f88d 	bl	80037e0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 80016c6:	480d      	ldr	r0, [pc, #52]	; (80016fc <ADC_Klimaflap+0x6c>)
 80016c8:	f002 fb62 	bl	8003d90 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 80016cc:	2164      	movs	r1, #100	; 0x64
 80016ce:	480b      	ldr	r0, [pc, #44]	; (80016fc <ADC_Klimaflap+0x6c>)
 80016d0:	f002 fc60 	bl	8003f94 <HAL_ADC_PollForConversion>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d105      	bne.n	80016e6 <ADC_Klimaflap+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 80016da:	4808      	ldr	r0, [pc, #32]	; (80016fc <ADC_Klimaflap+0x6c>)
 80016dc:	f002 fce5 	bl	80040aa <HAL_ADC_GetValue>
 80016e0:	4603      	mov	r3, r0
 80016e2:	82fb      	strh	r3, [r7, #22]
 80016e4:	e002      	b.n	80016ec <ADC_Klimaflap+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 80016e6:	2004      	movs	r0, #4
 80016e8:	f000 f924 	bl	8001934 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 80016ec:	4803      	ldr	r0, [pc, #12]	; (80016fc <ADC_Klimaflap+0x6c>)
 80016ee:	f002 fc1d 	bl	8003f2c <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 80016f2:	8afb      	ldrh	r3, [r7, #22]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000140 	.word	0x20000140

08001700 <ADC_PCBTemperatur>:
//----------------------------------------------------------------------

// PCB Temperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_PCBTemperatur (void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_7;										// ADC Kanal einstellen
 8001716:	2307      	movs	r3, #7
 8001718:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 800171a:	2301      	movs	r3, #1
 800171c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 800171e:	2301      	movs	r3, #1
 8001720:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	4619      	mov	r1, r3
 8001726:	4811      	ldr	r0, [pc, #68]	; (800176c <ADC_PCBTemperatur+0x6c>)
 8001728:	f002 fccc 	bl	80040c4 <HAL_ADC_ConfigChannel>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <ADC_PCBTemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8001732:	f002 f855 	bl	80037e0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8001736:	480d      	ldr	r0, [pc, #52]	; (800176c <ADC_PCBTemperatur+0x6c>)
 8001738:	f002 fb2a 	bl	8003d90 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 800173c:	2164      	movs	r1, #100	; 0x64
 800173e:	480b      	ldr	r0, [pc, #44]	; (800176c <ADC_PCBTemperatur+0x6c>)
 8001740:	f002 fc28 	bl	8003f94 <HAL_ADC_PollForConversion>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d105      	bne.n	8001756 <ADC_PCBTemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 800174a:	4808      	ldr	r0, [pc, #32]	; (800176c <ADC_PCBTemperatur+0x6c>)
 800174c:	f002 fcad 	bl	80040aa <HAL_ADC_GetValue>
 8001750:	4603      	mov	r3, r0
 8001752:	82fb      	strh	r3, [r7, #22]
 8001754:	e002      	b.n	800175c <ADC_PCBTemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8001756:	2004      	movs	r0, #4
 8001758:	f000 f8ec 	bl	8001934 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 800175c:	4803      	ldr	r0, [pc, #12]	; (800176c <ADC_PCBTemperatur+0x6c>)
 800175e:	f002 fbe5 	bl	8003f2c <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8001762:	8afb      	ldrh	r3, [r7, #22]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000140 	.word	0x20000140

08001770 <ADC_Return>:
//----------------------------------------------------------------------

// Navibedienelement Return einlesen (2 Schalter mit unterschiedlichen Widerstaenden)
//----------------------------------------------------------------------
uint16_t ADC_Return (void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_8;										// ADC Kanal einstellen
 8001786:	2308      	movs	r3, #8
 8001788:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 800178a:	2301      	movs	r3, #1
 800178c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 800178e:	2301      	movs	r3, #1
 8001790:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	4619      	mov	r1, r3
 8001796:	4811      	ldr	r0, [pc, #68]	; (80017dc <ADC_Return+0x6c>)
 8001798:	f002 fc94 	bl	80040c4 <HAL_ADC_ConfigChannel>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <ADC_Return+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 80017a2:	f002 f81d 	bl	80037e0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 80017a6:	480d      	ldr	r0, [pc, #52]	; (80017dc <ADC_Return+0x6c>)
 80017a8:	f002 faf2 	bl	8003d90 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 80017ac:	2164      	movs	r1, #100	; 0x64
 80017ae:	480b      	ldr	r0, [pc, #44]	; (80017dc <ADC_Return+0x6c>)
 80017b0:	f002 fbf0 	bl	8003f94 <HAL_ADC_PollForConversion>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d105      	bne.n	80017c6 <ADC_Return+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 80017ba:	4808      	ldr	r0, [pc, #32]	; (80017dc <ADC_Return+0x6c>)
 80017bc:	f002 fc75 	bl	80040aa <HAL_ADC_GetValue>
 80017c0:	4603      	mov	r3, r0
 80017c2:	82fb      	strh	r3, [r7, #22]
 80017c4:	e002      	b.n	80017cc <ADC_Return+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 80017c6:	2004      	movs	r0, #4
 80017c8:	f000 f8b4 	bl	8001934 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 80017cc:	4803      	ldr	r0, [pc, #12]	; (80017dc <ADC_Return+0x6c>)
 80017ce:	f002 fbad 	bl	8003f2c <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 80017d2:	8afb      	ldrh	r3, [r7, #22]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000140 	.word	0x20000140

080017e0 <ADC_Info>:
//----------------------------------------------------------------------

// Navibedienelement Info einlesen (2 Schalter mit unterschiedlichen Widerstaenden)
//----------------------------------------------------------------------
uint16_t ADC_Info (void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_9;										// ADC Kanal einstellen
 80017f6:	2309      	movs	r3, #9
 80017f8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 80017fa:	2301      	movs	r3, #1
 80017fc:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 80017fe:	2301      	movs	r3, #1
 8001800:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	4619      	mov	r1, r3
 8001806:	4811      	ldr	r0, [pc, #68]	; (800184c <ADC_Info+0x6c>)
 8001808:	f002 fc5c 	bl	80040c4 <HAL_ADC_ConfigChannel>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <ADC_Info+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8001812:	f001 ffe5 	bl	80037e0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8001816:	480d      	ldr	r0, [pc, #52]	; (800184c <ADC_Info+0x6c>)
 8001818:	f002 faba 	bl	8003d90 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 800181c:	2164      	movs	r1, #100	; 0x64
 800181e:	480b      	ldr	r0, [pc, #44]	; (800184c <ADC_Info+0x6c>)
 8001820:	f002 fbb8 	bl	8003f94 <HAL_ADC_PollForConversion>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d105      	bne.n	8001836 <ADC_Info+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 800182a:	4808      	ldr	r0, [pc, #32]	; (800184c <ADC_Info+0x6c>)
 800182c:	f002 fc3d 	bl	80040aa <HAL_ADC_GetValue>
 8001830:	4603      	mov	r3, r0
 8001832:	82fb      	strh	r3, [r7, #22]
 8001834:	e002      	b.n	800183c <ADC_Info+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8001836:	2004      	movs	r0, #4
 8001838:	f000 f87c 	bl	8001934 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 800183c:	4803      	ldr	r0, [pc, #12]	; (800184c <ADC_Info+0x6c>)
 800183e:	f002 fb75 	bl	8003f2c <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8001842:	8afb      	ldrh	r3, [r7, #22]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000140 	.word	0x20000140

08001850 <ADC_Bremsdrucktemperatur>:
//----------------------------------------------------------------------

// Bremsdrucktemperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_Bremsdrucktemperatur (void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_15;										// ADC Kanal einstellen
 8001866:	230f      	movs	r3, #15
 8001868:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 800186a:	2301      	movs	r3, #1
 800186c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 800186e:	2301      	movs	r3, #1
 8001870:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	4619      	mov	r1, r3
 8001876:	4811      	ldr	r0, [pc, #68]	; (80018bc <ADC_Bremsdrucktemperatur+0x6c>)
 8001878:	f002 fc24 	bl	80040c4 <HAL_ADC_ConfigChannel>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <ADC_Bremsdrucktemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8001882:	f001 ffad 	bl	80037e0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8001886:	480d      	ldr	r0, [pc, #52]	; (80018bc <ADC_Bremsdrucktemperatur+0x6c>)
 8001888:	f002 fa82 	bl	8003d90 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 800188c:	2164      	movs	r1, #100	; 0x64
 800188e:	480b      	ldr	r0, [pc, #44]	; (80018bc <ADC_Bremsdrucktemperatur+0x6c>)
 8001890:	f002 fb80 	bl	8003f94 <HAL_ADC_PollForConversion>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d105      	bne.n	80018a6 <ADC_Bremsdrucktemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 800189a:	4808      	ldr	r0, [pc, #32]	; (80018bc <ADC_Bremsdrucktemperatur+0x6c>)
 800189c:	f002 fc05 	bl	80040aa <HAL_ADC_GetValue>
 80018a0:	4603      	mov	r3, r0
 80018a2:	82fb      	strh	r3, [r7, #22]
 80018a4:	e002      	b.n	80018ac <ADC_Bremsdrucktemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 80018a6:	2004      	movs	r0, #4
 80018a8:	f000 f844 	bl	8001934 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 80018ac:	4803      	ldr	r0, [pc, #12]	; (80018bc <ADC_Bremsdrucktemperatur+0x6c>)
 80018ae:	f002 fb3d 	bl	8003f2c <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 80018b2:	8afb      	ldrh	r3, [r7, #22]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000140 	.word	0x20000140

080018c0 <ADC_STMTemperatur>:
//----------------------------------------------------------------------

// STM32 Temperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_STMTemperatur (void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;								// ADC Kanal einstellen
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <ADC_STMTemperatur+0x6c>)
 80018d8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 80018da:	2301      	movs	r3, #1
 80018dc:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 80018de:	2301      	movs	r3, #1
 80018e0:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	4619      	mov	r1, r3
 80018e6:	4812      	ldr	r0, [pc, #72]	; (8001930 <ADC_STMTemperatur+0x70>)
 80018e8:	f002 fbec 	bl	80040c4 <HAL_ADC_ConfigChannel>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <ADC_STMTemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 80018f2:	f001 ff75 	bl	80037e0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 80018f6:	480e      	ldr	r0, [pc, #56]	; (8001930 <ADC_STMTemperatur+0x70>)
 80018f8:	f002 fa4a 	bl	8003d90 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 80018fc:	2164      	movs	r1, #100	; 0x64
 80018fe:	480c      	ldr	r0, [pc, #48]	; (8001930 <ADC_STMTemperatur+0x70>)
 8001900:	f002 fb48 	bl	8003f94 <HAL_ADC_PollForConversion>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d105      	bne.n	8001916 <ADC_STMTemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 800190a:	4809      	ldr	r0, [pc, #36]	; (8001930 <ADC_STMTemperatur+0x70>)
 800190c:	f002 fbcd 	bl	80040aa <HAL_ADC_GetValue>
 8001910:	4603      	mov	r3, r0
 8001912:	82fb      	strh	r3, [r7, #22]
 8001914:	e002      	b.n	800191c <ADC_STMTemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8001916:	2004      	movs	r0, #4
 8001918:	f000 f80c 	bl	8001934 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 800191c:	4804      	ldr	r0, [pc, #16]	; (8001930 <ADC_STMTemperatur+0x70>)
 800191e:	f002 fb05 	bl	8003f2c <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8001922:	8afb      	ldrh	r3, [r7, #22]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	10000012 	.word	0x10000012
 8001930:	20000140 	.word	0x20000140

08001934 <software_error>:
//----------------------------------------------------------------------

// Diagnose Funktion falls ein Fehler auftritt
//----------------------------------------------------------------------
void software_error(uint8_t errorcode)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800193e:	b672      	cpsid	i
}
 8001940:	bf00      	nop
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8001942:	4a1e      	ldr	r2, [pc, #120]	; (80019bc <software_error+0x88>)
 8001944:	7853      	ldrb	r3, [r2, #1]
 8001946:	f043 0308 	orr.w	r3, r3, #8
 800194a:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 800194c:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <software_error+0x88>)
 800194e:	785b      	ldrb	r3, [r3, #1]
 8001950:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001954:	b2db      	uxtb	r3, r3
 8001956:	461a      	mov	r2, r3
 8001958:	2104      	movs	r1, #4
 800195a:	4819      	ldr	r0, [pc, #100]	; (80019c0 <software_error+0x8c>)
 800195c:	f004 f810 	bl	8005980 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8001960:	4a16      	ldr	r2, [pc, #88]	; (80019bc <software_error+0x88>)
 8001962:	7853      	ldrb	r3, [r2, #1]
 8001964:	f36f 1304 	bfc	r3, #4, #1
 8001968:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// OK LED ausschalten
 800196a:	4b14      	ldr	r3, [pc, #80]	; (80019bc <software_error+0x88>)
 800196c:	785b      	ldrb	r3, [r3, #1]
 800196e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800197a:	4811      	ldr	r0, [pc, #68]	; (80019c0 <software_error+0x8c>)
 800197c:	f004 f800 	bl	8005980 <HAL_GPIO_WritePin>

	// Schalte SDC_Motor aus
	system_out.MotorSDC = 0;												// Zuruecksetzen Variable
 8001980:	4a10      	ldr	r2, [pc, #64]	; (80019c4 <software_error+0x90>)
 8001982:	7813      	ldrb	r3, [r2, #0]
 8001984:	f36f 1345 	bfc	r3, #5, #1
 8001988:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, system_out.MotorSDC);// SDC oeffnen
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <software_error+0x90>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001992:	b2db      	uxtb	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800199a:	480b      	ldr	r0, [pc, #44]	; (80019c8 <software_error+0x94>)
 800199c:	f003 fff0 	bl	8005980 <HAL_GPIO_WritePin>
#ifdef DEBUG																// Serielle Kommunukation nur waehrend Debugging
#define SOFTERRORMESSAGE			"\nSoftware Error Handler ausgeloest\n"	// Ausgabe das Fehler aufgetreten ist
	uartTransmit(SOFTERRORMESSAGE,sizeof(SOFTERRORMESSAGE));
 80019a0:	2124      	movs	r1, #36	; 0x24
 80019a2:	480a      	ldr	r0, [pc, #40]	; (80019cc <software_error+0x98>)
 80019a4:	f7fe ff0c 	bl	80007c0 <uartTransmit>

#define ERRORCODE					"Error Code:\t"							// Ausgabe des Fehlers anhand von Fehlercode
	uartTransmit(ERRORCODE,sizeof(ERRORCODE));
 80019a8:	210d      	movs	r1, #13
 80019aa:	4809      	ldr	r0, [pc, #36]	; (80019d0 <software_error+0x9c>)
 80019ac:	f7fe ff08 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(errorcode, 10);										// Fehlercode ausgeben
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	210a      	movs	r1, #10
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe ff17 	bl	80007e8 <uartTransmitNumber>
#endif
	while (1);																// Endlosschleife
 80019ba:	e7fe      	b.n	80019ba <software_error+0x86>
 80019bc:	20000138 	.word	0x20000138
 80019c0:	40020400 	.word	0x40020400
 80019c4:	20000130 	.word	0x20000130
 80019c8:	40021000 	.word	0x40021000
 80019cc:	08008e68 	.word	0x08008e68
 80019d0:	08008e8c 	.word	0x08008e8c

080019d4 <software_error_debug>:
//----------------------------------------------------------------------

// Diagnose Funktion falls ein Fehler auftritt (Nur Debugzwecke)
//----------------------------------------------------------------------
void software_error_debug(uint8_t errorcode)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 80019de:	4a22      	ldr	r2, [pc, #136]	; (8001a68 <software_error_debug+0x94>)
 80019e0:	7853      	ldrb	r3, [r2, #1]
 80019e2:	f043 0308 	orr.w	r3, r3, #8
 80019e6:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 80019e8:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <software_error_debug+0x94>)
 80019ea:	785b      	ldrb	r3, [r3, #1]
 80019ec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	461a      	mov	r2, r3
 80019f4:	2104      	movs	r1, #4
 80019f6:	481d      	ldr	r0, [pc, #116]	; (8001a6c <software_error_debug+0x98>)
 80019f8:	f003 ffc2 	bl	8005980 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 80019fc:	4a1a      	ldr	r2, [pc, #104]	; (8001a68 <software_error_debug+0x94>)
 80019fe:	7853      	ldrb	r3, [r2, #1]
 8001a00:	f36f 1304 	bfc	r3, #4, #1
 8001a04:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// OK LED ausschalten
 8001a06:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <software_error_debug+0x94>)
 8001a08:	785b      	ldrb	r3, [r3, #1]
 8001a0a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a16:	4815      	ldr	r0, [pc, #84]	; (8001a6c <software_error_debug+0x98>)
 8001a18:	f003 ffb2 	bl	8005980 <HAL_GPIO_WritePin>

	// Schalte SDC_Motor aus
	system_out.MotorSDC = 0;												// Zuruecksetzen Variable
 8001a1c:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <software_error_debug+0x9c>)
 8001a1e:	7813      	ldrb	r3, [r2, #0]
 8001a20:	f36f 1345 	bfc	r3, #5, #1
 8001a24:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, system_out.MotorSDC);// SDC oeffnen
 8001a26:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <software_error_debug+0x9c>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	461a      	mov	r2, r3
 8001a32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a36:	480f      	ldr	r0, [pc, #60]	; (8001a74 <software_error_debug+0xa0>)
 8001a38:	f003 ffa2 	bl	8005980 <HAL_GPIO_WritePin>
#ifdef DEBUG																// Serielle Kommunukation nur waehrend Debugging
#define SOFTERRORMESSAGE			"\nSoftware Error Handler ausgeloest\n"	// Ausgabe das Fehler aufgetreten ist
	uartTransmit(SOFTERRORMESSAGE,sizeof(SOFTERRORMESSAGE));
 8001a3c:	2124      	movs	r1, #36	; 0x24
 8001a3e:	480e      	ldr	r0, [pc, #56]	; (8001a78 <software_error_debug+0xa4>)
 8001a40:	f7fe febe 	bl	80007c0 <uartTransmit>

#define ERRORCODE					"Error Code:\t"							// Ausgabe des Fehlers anhand von Fehlercode
	uartTransmit(ERRORCODE,sizeof(ERRORCODE));
 8001a44:	210d      	movs	r1, #13
 8001a46:	480d      	ldr	r0, [pc, #52]	; (8001a7c <software_error_debug+0xa8>)
 8001a48:	f7fe feba 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(errorcode, 10);										// Fehlercode ausgeben
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	210a      	movs	r1, #10
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fec9 	bl	80007e8 <uartTransmitNumber>
	uartTransmit("\n", 1);
 8001a56:	2101      	movs	r1, #1
 8001a58:	4809      	ldr	r0, [pc, #36]	; (8001a80 <software_error_debug+0xac>)
 8001a5a:	f7fe feb1 	bl	80007c0 <uartTransmit>
#endif
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000138 	.word	0x20000138
 8001a6c:	40020400 	.word	0x40020400
 8001a70:	20000130 	.word	0x20000130
 8001a74:	40021000 	.word	0x40021000
 8001a78:	08008e68 	.word	0x08008e68
 8001a7c:	08008e8c 	.word	0x08008e8c
 8001a80:	08008e9c 	.word	0x08008e9c

08001a84 <ITM_SendString>:
// Nachricht SWO ITM Data Console
// Core Clock := Maximalfrequenz ; HCLK fuer Serial Wire Viewer
// Im String #GRN# oder #RED# oder #ORG# erscheint die Nachricht in einer Farbe
//----------------------------------------------------------------------
void ITM_SendString(char *text)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	{
		ITM_SendChar(*text);												// Sende ITM Zeichen
		text++;																// Pointer hochzaehlen
	}
#endif
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <ITM_SendNumber>:
//----------------------------------------------------------------------

// Debug Nummer ueber SWO senden
//----------------------------------------------------------------------
void ITM_SendNumber(long number)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	for(; i > 0; i--)
	{
		ITM_SendChar('0' + buf[i-1]);
	}
#endif
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <ITM_SendChar>:
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001ab4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ab8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d013      	beq.n	8001aec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001ac4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ac8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001acc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00b      	beq.n	8001aec <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 8001ad4:	e000      	b.n	8001ad8 <ITM_SendChar+0x2c>
      __NOP();
 8001ad6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001ad8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f9      	beq.n	8001ad6 <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001ae2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	701a      	strb	r2, [r3, #0]
  return (ch);
 8001aec:	687b      	ldr	r3, [r7, #4]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <readall_inputs>:
//----------------------------------------------------------------------

// Alle Eingaenge einlesen und speichern
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
#ifdef DEBUG_INPUT
	ITM_SendString("Lese Inputs ein\n");
 8001b00:	48cf      	ldr	r0, [pc, #828]	; (8001e40 <readall_inputs+0x344>)
 8001b02:	f7ff ffbf 	bl	8001a84 <ITM_SendString>
#endif

	// Systemeingaenge einlesen
	system_in.Kickdown = HAL_GPIO_ReadPin(KICKDOWN_GPIO_Port, KICKDOWN_Pin);					// Eingang Gaspedal getreten
 8001b06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b0a:	48ce      	ldr	r0, [pc, #824]	; (8001e44 <readall_inputs+0x348>)
 8001b0c:	f003 ff20 	bl	8005950 <HAL_GPIO_ReadPin>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	b2d9      	uxtb	r1, r3
 8001b18:	4acb      	ldr	r2, [pc, #812]	; (8001e48 <readall_inputs+0x34c>)
 8001b1a:	7813      	ldrb	r3, [r2, #0]
 8001b1c:	f361 0300 	bfi	r3, r1, #0, #1
 8001b20:	7013      	strb	r3, [r2, #0]
	system_in.Leerlauf = HAL_GPIO_ReadPin(LEERLAUF_GPIO_Port, LEERLAUF_Pin);					// Eingang Gaspedal nicht getreten
 8001b22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b26:	48c7      	ldr	r0, [pc, #796]	; (8001e44 <readall_inputs+0x348>)
 8001b28:	f003 ff12 	bl	8005950 <HAL_GPIO_ReadPin>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	b2d9      	uxtb	r1, r3
 8001b34:	4ac4      	ldr	r2, [pc, #784]	; (8001e48 <readall_inputs+0x34c>)
 8001b36:	7813      	ldrb	r3, [r2, #0]
 8001b38:	f361 0341 	bfi	r3, r1, #1, #1
 8001b3c:	7013      	strb	r3, [r2, #0]
	system_in.BremseNO = HAL_GPIO_ReadPin(BREMSE_NO_GPIO_Port, BREMSE_NO_Pin);					// Eingang Bremse nicht getreten
 8001b3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b42:	48c0      	ldr	r0, [pc, #768]	; (8001e44 <readall_inputs+0x348>)
 8001b44:	f003 ff04 	bl	8005950 <HAL_GPIO_ReadPin>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	b2d9      	uxtb	r1, r3
 8001b50:	4abd      	ldr	r2, [pc, #756]	; (8001e48 <readall_inputs+0x34c>)
 8001b52:	7813      	ldrb	r3, [r2, #0]
 8001b54:	f361 0382 	bfi	r3, r1, #2, #1
 8001b58:	7013      	strb	r3, [r2, #0]
	system_in.BremseNC = HAL_GPIO_ReadPin(BREMSE_NC_GPIO_Port, BREMSE_NC_Pin);					// Eingang Bremse getreten
 8001b5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b5e:	48b9      	ldr	r0, [pc, #740]	; (8001e44 <readall_inputs+0x348>)
 8001b60:	f003 fef6 	bl	8005950 <HAL_GPIO_ReadPin>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	b2d9      	uxtb	r1, r3
 8001b6c:	4ab6      	ldr	r2, [pc, #728]	; (8001e48 <readall_inputs+0x34c>)
 8001b6e:	7813      	ldrb	r3, [r2, #0]
 8001b70:	f361 03c3 	bfi	r3, r1, #3, #1
 8001b74:	7013      	strb	r3, [r2, #0]
	system_in.Kupplung = HAL_GPIO_ReadPin(KUPPLUNG_NO_GPIO_Port, KUPPLUNG_NO_Pin);				// Eingang Kupplung nicht getreten
 8001b76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b7a:	48b2      	ldr	r0, [pc, #712]	; (8001e44 <readall_inputs+0x348>)
 8001b7c:	f003 fee8 	bl	8005950 <HAL_GPIO_ReadPin>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	b2d9      	uxtb	r1, r3
 8001b88:	4aaf      	ldr	r2, [pc, #700]	; (8001e48 <readall_inputs+0x34c>)
 8001b8a:	7813      	ldrb	r3, [r2, #0]
 8001b8c:	f361 1304 	bfi	r3, r1, #4, #1
 8001b90:	7013      	strb	r3, [r2, #0]
	system_in.Recuperation = HAL_GPIO_ReadPin(RECUPERATION_GPIO_Port, RECUPERATION_Pin);		// Eingang Recuperation
 8001b92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b96:	48ad      	ldr	r0, [pc, #692]	; (8001e4c <readall_inputs+0x350>)
 8001b98:	f003 feda 	bl	8005950 <HAL_GPIO_ReadPin>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	b2d9      	uxtb	r1, r3
 8001ba4:	4aa8      	ldr	r2, [pc, #672]	; (8001e48 <readall_inputs+0x34c>)
 8001ba6:	7813      	ldrb	r3, [r2, #0]
 8001ba8:	f361 1345 	bfi	r3, r1, #5, #1
 8001bac:	7013      	strb	r3, [r2, #0]
	system_in.ECON = HAL_GPIO_ReadPin(ECON_GPIO_Port, ECON_Pin);								// Eingang Klima
 8001bae:	2102      	movs	r1, #2
 8001bb0:	48a6      	ldr	r0, [pc, #664]	; (8001e4c <readall_inputs+0x350>)
 8001bb2:	f003 fecd 	bl	8005950 <HAL_GPIO_ReadPin>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	b2d9      	uxtb	r1, r3
 8001bbe:	4aa2      	ldr	r2, [pc, #648]	; (8001e48 <readall_inputs+0x34c>)
 8001bc0:	7813      	ldrb	r3, [r2, #0]
 8001bc2:	f361 1386 	bfi	r3, r1, #6, #1
 8001bc6:	7013      	strb	r3, [r2, #0]
	system_in.Anlasser = HAL_GPIO_ReadPin(ANLASSER_GPIO_Port, ANLASSER_Pin);					// Eingang Zuendschloss, Motor starten
 8001bc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bcc:	48a0      	ldr	r0, [pc, #640]	; (8001e50 <readall_inputs+0x354>)
 8001bce:	f003 febf 	bl	8005950 <HAL_GPIO_ReadPin>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	b2d9      	uxtb	r1, r3
 8001bda:	4a9b      	ldr	r2, [pc, #620]	; (8001e48 <readall_inputs+0x34c>)
 8001bdc:	7813      	ldrb	r3, [r2, #0]
 8001bde:	f361 13c7 	bfi	r3, r1, #7, #1
 8001be2:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8001be4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001be8:	4899      	ldr	r0, [pc, #612]	; (8001e50 <readall_inputs+0x354>)
 8001bea:	f003 feb1 	bl	8005950 <HAL_GPIO_ReadPin>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	b2d9      	uxtb	r1, r3
 8001bf6:	4a94      	ldr	r2, [pc, #592]	; (8001e48 <readall_inputs+0x34c>)
 8001bf8:	7853      	ldrb	r3, [r2, #1]
 8001bfa:	f361 0300 	bfi	r3, r1, #0, #1
 8001bfe:	7053      	strb	r3, [r2, #1]
	system_in.DCDC_Inst = HAL_GPIO_ReadPin(DCDC_INSTRUCTION_GPIO_Port, DCDC_INSTRUCTION_Pin);	// DCDC Wandler funktioniert einwandfrei
 8001c00:	2101      	movs	r1, #1
 8001c02:	4894      	ldr	r0, [pc, #592]	; (8001e54 <readall_inputs+0x358>)
 8001c04:	f003 fea4 	bl	8005950 <HAL_GPIO_ReadPin>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	b2d9      	uxtb	r1, r3
 8001c10:	4a8d      	ldr	r2, [pc, #564]	; (8001e48 <readall_inputs+0x34c>)
 8001c12:	7853      	ldrb	r3, [r2, #1]
 8001c14:	f361 0341 	bfi	r3, r1, #1, #1
 8001c18:	7053      	strb	r3, [r2, #1]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	488b      	ldr	r0, [pc, #556]	; (8001e4c <readall_inputs+0x350>)
 8001c1e:	f003 fe97 	bl	8005950 <HAL_GPIO_ReadPin>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	b2d9      	uxtb	r1, r3
 8001c2a:	4a87      	ldr	r2, [pc, #540]	; (8001e48 <readall_inputs+0x34c>)
 8001c2c:	7853      	ldrb	r3, [r2, #1]
 8001c2e:	f361 0382 	bfi	r3, r1, #2, #1
 8001c32:	7053      	strb	r3, [r2, #1]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8001c34:	2140      	movs	r1, #64	; 0x40
 8001c36:	4883      	ldr	r0, [pc, #524]	; (8001e44 <readall_inputs+0x348>)
 8001c38:	f003 fe8a 	bl	8005950 <HAL_GPIO_ReadPin>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	b2d9      	uxtb	r1, r3
 8001c44:	4a80      	ldr	r2, [pc, #512]	; (8001e48 <readall_inputs+0x34c>)
 8001c46:	7853      	ldrb	r3, [r2, #1]
 8001c48:	f361 03c3 	bfi	r3, r1, #3, #1
 8001c4c:	7053      	strb	r3, [r2, #1]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8001c4e:	2101      	movs	r1, #1
 8001c50:	4881      	ldr	r0, [pc, #516]	; (8001e58 <readall_inputs+0x35c>)
 8001c52:	f003 fe7d 	bl	8005950 <HAL_GPIO_ReadPin>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	b2d9      	uxtb	r1, r3
 8001c5e:	4a7a      	ldr	r2, [pc, #488]	; (8001e48 <readall_inputs+0x34c>)
 8001c60:	7853      	ldrb	r3, [r2, #1]
 8001c62:	f361 1304 	bfi	r3, r1, #4, #1
 8001c66:	7053      	strb	r3, [r2, #1]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8001c68:	2104      	movs	r1, #4
 8001c6a:	487b      	ldr	r0, [pc, #492]	; (8001e58 <readall_inputs+0x35c>)
 8001c6c:	f003 fe70 	bl	8005950 <HAL_GPIO_ReadPin>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	b2d9      	uxtb	r1, r3
 8001c78:	4a73      	ldr	r2, [pc, #460]	; (8001e48 <readall_inputs+0x34c>)
 8001c7a:	7853      	ldrb	r3, [r2, #1]
 8001c7c:	f361 1345 	bfi	r3, r1, #5, #1
 8001c80:	7053      	strb	r3, [r2, #1]
//	system_in.Bremsdruck_NO = HAL_GPIO_ReadPin(Bremsdruck_NO_GPIO_Port, Bremsdruck_NO_Pin);		// Bremsdruck nicht zu hoch
//	system_in.Bremsdruck_NC = HAL_GPIO_ReadPin(Bremsdruck_NC_GPIO_Port, Bremsdruck_NC_Pin);		// Bremsdruck zu hoch

	// SDC-Eingaenge einlesen
	sdc_in.EmergencyRun = HAL_GPIO_ReadPin(EMERGENCY_RUN_GPIO_Port, EMERGENCY_RUN_Pin);			// Emergency Run, Akku
 8001c82:	2102      	movs	r1, #2
 8001c84:	4874      	ldr	r0, [pc, #464]	; (8001e58 <readall_inputs+0x35c>)
 8001c86:	f003 fe63 	bl	8005950 <HAL_GPIO_ReadPin>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	b2d9      	uxtb	r1, r3
 8001c92:	4a72      	ldr	r2, [pc, #456]	; (8001e5c <readall_inputs+0x360>)
 8001c94:	7813      	ldrb	r3, [r2, #0]
 8001c96:	f361 0300 	bfi	r3, r1, #0, #1
 8001c9a:	7013      	strb	r3, [r2, #0]
	sdc_in.SDC0 = HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin);						// Shutdown-Circuit, OK
 8001c9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ca0:	4868      	ldr	r0, [pc, #416]	; (8001e44 <readall_inputs+0x348>)
 8001ca2:	f003 fe55 	bl	8005950 <HAL_GPIO_ReadPin>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	b2d9      	uxtb	r1, r3
 8001cae:	4a6b      	ldr	r2, [pc, #428]	; (8001e5c <readall_inputs+0x360>)
 8001cb0:	7813      	ldrb	r3, [r2, #0]
 8001cb2:	f361 0341 	bfi	r3, r1, #1, #1
 8001cb6:	7013      	strb	r3, [r2, #0]
	sdc_in.Akku1SDC = HAL_GPIO_ReadPin(SENSE_SDC_AKKU_GPIO_Port, SENSE_SDC_AKKU_Pin);			// Shutdown-Circuit Akku, OK
 8001cb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cbc:	4861      	ldr	r0, [pc, #388]	; (8001e44 <readall_inputs+0x348>)
 8001cbe:	f003 fe47 	bl	8005950 <HAL_GPIO_ReadPin>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	b2d9      	uxtb	r1, r3
 8001cca:	4a64      	ldr	r2, [pc, #400]	; (8001e5c <readall_inputs+0x360>)
 8001ccc:	7813      	ldrb	r3, [r2, #0]
 8001cce:	f361 0382 	bfi	r3, r1, #2, #1
 8001cd2:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8001cd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cd8:	4861      	ldr	r0, [pc, #388]	; (8001e60 <readall_inputs+0x364>)
 8001cda:	f003 fe39 	bl	8005950 <HAL_GPIO_ReadPin>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	b2d9      	uxtb	r1, r3
 8001ce6:	4a5d      	ldr	r2, [pc, #372]	; (8001e5c <readall_inputs+0x360>)
 8001ce8:	7813      	ldrb	r3, [r2, #0]
 8001cea:	f361 03c3 	bfi	r3, r1, #3, #1
 8001cee:	7013      	strb	r3, [r2, #0]
	sdc_in.DCDC_Fault = HAL_GPIO_ReadPin(DCDC_FAULT_GPIO_Port, DCDC_FAULT_Pin);					// DCDC Wandler funktioniert nicht richtig
 8001cf0:	2102      	movs	r1, #2
 8001cf2:	4858      	ldr	r0, [pc, #352]	; (8001e54 <readall_inputs+0x358>)
 8001cf4:	f003 fe2c 	bl	8005950 <HAL_GPIO_ReadPin>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	b2d9      	uxtb	r1, r3
 8001d00:	4a56      	ldr	r2, [pc, #344]	; (8001e5c <readall_inputs+0x360>)
 8001d02:	7813      	ldrb	r3, [r2, #0]
 8001d04:	f361 1304 	bfi	r3, r1, #4, #1
 8001d08:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.ASR1 = HAL_GPIO_ReadPin(ASR_IN1_GPIO_Port, ASR_IN1_Pin);							// ASR Eingang Mittelkonsole
 8001d0a:	2110      	movs	r1, #16
 8001d0c:	4851      	ldr	r0, [pc, #324]	; (8001e54 <readall_inputs+0x358>)
 8001d0e:	f003 fe1f 	bl	8005950 <HAL_GPIO_ReadPin>
 8001d12:	4603      	mov	r3, r0
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	b2d9      	uxtb	r1, r3
 8001d1a:	4a52      	ldr	r2, [pc, #328]	; (8001e64 <readall_inputs+0x368>)
 8001d1c:	7813      	ldrb	r3, [r2, #0]
 8001d1e:	f361 0300 	bfi	r3, r1, #0, #1
 8001d22:	7013      	strb	r3, [r2, #0]
	komfort_in.ASR2 = HAL_GPIO_ReadPin(ASR_IN2_GPIO_Port, ASR_IN2_Pin);							// ASR Eingang Mittelkonsole
 8001d24:	2110      	movs	r1, #16
 8001d26:	484a      	ldr	r0, [pc, #296]	; (8001e50 <readall_inputs+0x354>)
 8001d28:	f003 fe12 	bl	8005950 <HAL_GPIO_ReadPin>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	b2d9      	uxtb	r1, r3
 8001d34:	4a4b      	ldr	r2, [pc, #300]	; (8001e64 <readall_inputs+0x368>)
 8001d36:	7813      	ldrb	r3, [r2, #0]
 8001d38:	f361 0341 	bfi	r3, r1, #1, #1
 8001d3c:	7013      	strb	r3, [r2, #0]
	komfort_in.ECO = HAL_GPIO_ReadPin(ECO_GPIO_Port, ECO_Pin);									// ECO Eingang Mittelkonsole
 8001d3e:	2108      	movs	r1, #8
 8001d40:	4840      	ldr	r0, [pc, #256]	; (8001e44 <readall_inputs+0x348>)
 8001d42:	f003 fe05 	bl	8005950 <HAL_GPIO_ReadPin>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	b2d9      	uxtb	r1, r3
 8001d4e:	4a45      	ldr	r2, [pc, #276]	; (8001e64 <readall_inputs+0x368>)
 8001d50:	7813      	ldrb	r3, [r2, #0]
 8001d52:	f361 0382 	bfi	r3, r1, #2, #1
 8001d56:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Rst_In = HAL_GPIO_ReadPin(BC_RESET_IN_GPIO_Port, BC_RESET_IN_Pin);			// Boardcomputer Reset Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8001d58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d5c:	483d      	ldr	r0, [pc, #244]	; (8001e54 <readall_inputs+0x358>)
 8001d5e:	f003 fdf7 	bl	8005950 <HAL_GPIO_ReadPin>
 8001d62:	4603      	mov	r3, r0
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	b2d9      	uxtb	r1, r3
 8001d6a:	4a3e      	ldr	r2, [pc, #248]	; (8001e64 <readall_inputs+0x368>)
 8001d6c:	7813      	ldrb	r3, [r2, #0]
 8001d6e:	f361 03c3 	bfi	r3, r1, #3, #1
 8001d72:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Up_In = HAL_GPIO_ReadPin(BC_UP_IN_GPIO_Port, BC_UP_IN_Pin);					// Boardcomputer Rauf Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8001d74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d78:	4837      	ldr	r0, [pc, #220]	; (8001e58 <readall_inputs+0x35c>)
 8001d7a:	f003 fde9 	bl	8005950 <HAL_GPIO_ReadPin>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	b2d9      	uxtb	r1, r3
 8001d86:	4a37      	ldr	r2, [pc, #220]	; (8001e64 <readall_inputs+0x368>)
 8001d88:	7813      	ldrb	r3, [r2, #0]
 8001d8a:	f361 1304 	bfi	r3, r1, #4, #1
 8001d8e:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Down_In = HAL_GPIO_ReadPin(BC_DOWN_IN_GPIO_Port, BC_DOWN_IN_Pin);				// Boardcomputer Runter Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8001d90:	2110      	movs	r1, #16
 8001d92:	482c      	ldr	r0, [pc, #176]	; (8001e44 <readall_inputs+0x348>)
 8001d94:	f003 fddc 	bl	8005950 <HAL_GPIO_ReadPin>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	b2d9      	uxtb	r1, r3
 8001da0:	4a30      	ldr	r2, [pc, #192]	; (8001e64 <readall_inputs+0x368>)
 8001da2:	7813      	ldrb	r3, [r2, #0]
 8001da4:	f361 1345 	bfi	r3, r1, #5, #1
 8001da8:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn1 = HAL_GPIO_ReadPin(BAMOCAR_IN1_GPIO_Port, BAMOCAR_IN1_Pin);				// Eingang Bamocar 1
 8001daa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dae:	4828      	ldr	r0, [pc, #160]	; (8001e50 <readall_inputs+0x354>)
 8001db0:	f003 fdce 	bl	8005950 <HAL_GPIO_ReadPin>
 8001db4:	4603      	mov	r3, r0
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	b2d9      	uxtb	r1, r3
 8001dbc:	4a29      	ldr	r2, [pc, #164]	; (8001e64 <readall_inputs+0x368>)
 8001dbe:	7813      	ldrb	r3, [r2, #0]
 8001dc0:	f361 1386 	bfi	r3, r1, #6, #1
 8001dc4:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn2 = HAL_GPIO_ReadPin(BAMOCAR_IN2_GPIO_Port, BAMOCAR_IN2_Pin);				// Eingang Bamocar 2
 8001dc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dca:	4825      	ldr	r0, [pc, #148]	; (8001e60 <readall_inputs+0x364>)
 8001dcc:	f003 fdc0 	bl	8005950 <HAL_GPIO_ReadPin>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	b2d9      	uxtb	r1, r3
 8001dd8:	4a22      	ldr	r2, [pc, #136]	; (8001e64 <readall_inputs+0x368>)
 8001dda:	7813      	ldrb	r3, [r2, #0]
 8001ddc:	f361 13c7 	bfi	r3, r1, #7, #1
 8001de0:	7013      	strb	r3, [r2, #0]
	komfort_in.Enter = HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin);							// Encoder Taster Enter Eingang Mittelconsole
 8001de2:	2180      	movs	r1, #128	; 0x80
 8001de4:	4820      	ldr	r0, [pc, #128]	; (8001e68 <readall_inputs+0x36c>)
 8001de6:	f003 fdb3 	bl	8005950 <HAL_GPIO_ReadPin>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	b2d9      	uxtb	r1, r3
 8001df2:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <readall_inputs+0x368>)
 8001df4:	7853      	ldrb	r3, [r2, #1]
 8001df6:	f361 0300 	bfi	r3, r1, #0, #1
 8001dfa:	7053      	strb	r3, [r2, #1]
	komfort_in.OutA = HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTA_Pin);								// Encoder OUTA Eingang Mittelconsole
 8001dfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e00:	4815      	ldr	r0, [pc, #84]	; (8001e58 <readall_inputs+0x35c>)
 8001e02:	f003 fda5 	bl	8005950 <HAL_GPIO_ReadPin>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	b2d9      	uxtb	r1, r3
 8001e0e:	4a15      	ldr	r2, [pc, #84]	; (8001e64 <readall_inputs+0x368>)
 8001e10:	7853      	ldrb	r3, [r2, #1]
 8001e12:	f361 0341 	bfi	r3, r1, #1, #1
 8001e16:	7053      	strb	r3, [r2, #1]
	komfort_in.OutB = HAL_GPIO_ReadPin(OUTB_GPIO_Port, OUTB_Pin);								// Encoder OUTB Eingang Mittelconsole
 8001e18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e1c:	480e      	ldr	r0, [pc, #56]	; (8001e58 <readall_inputs+0x35c>)
 8001e1e:	f003 fd97 	bl	8005950 <HAL_GPIO_ReadPin>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	b2d9      	uxtb	r1, r3
 8001e2a:	4a0e      	ldr	r2, [pc, #56]	; (8001e64 <readall_inputs+0x368>)
 8001e2c:	7853      	ldrb	r3, [r2, #1]
 8001e2e:	f361 0382 	bfi	r3, r1, #2, #1
 8001e32:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA1 = HAL_GPIO_ReadPin(GRA1_GPIO_Port, GRA1_Pin);								// Tempomat 1 Eingang
 8001e34:	2120      	movs	r1, #32
 8001e36:	4807      	ldr	r0, [pc, #28]	; (8001e54 <readall_inputs+0x358>)
 8001e38:	f003 fd8a 	bl	8005950 <HAL_GPIO_ReadPin>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	e015      	b.n	8001e6c <readall_inputs+0x370>
 8001e40:	08008ea0 	.word	0x08008ea0
 8001e44:	40021000 	.word	0x40021000
 8001e48:	20000124 	.word	0x20000124
 8001e4c:	40021400 	.word	0x40021400
 8001e50:	40020c00 	.word	0x40020c00
 8001e54:	40021800 	.word	0x40021800
 8001e58:	40020000 	.word	0x40020000
 8001e5c:	20000128 	.word	0x20000128
 8001e60:	40020400 	.word	0x40020400
 8001e64:	2000012c 	.word	0x2000012c
 8001e68:	40020800 	.word	0x40020800
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	b2d9      	uxtb	r1, r3
 8001e72:	4a30      	ldr	r2, [pc, #192]	; (8001f34 <readall_inputs+0x438>)
 8001e74:	7853      	ldrb	r3, [r2, #1]
 8001e76:	f361 03c3 	bfi	r3, r1, #3, #1
 8001e7a:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA2 = HAL_GPIO_ReadPin(GRA2_GPIO_Port, GRA2_Pin);								// Tempomat 2 Eingang
 8001e7c:	2140      	movs	r1, #64	; 0x40
 8001e7e:	482e      	ldr	r0, [pc, #184]	; (8001f38 <readall_inputs+0x43c>)
 8001e80:	f003 fd66 	bl	8005950 <HAL_GPIO_ReadPin>
 8001e84:	4603      	mov	r3, r0
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	b2d9      	uxtb	r1, r3
 8001e8c:	4a29      	ldr	r2, [pc, #164]	; (8001f34 <readall_inputs+0x438>)
 8001e8e:	7853      	ldrb	r3, [r2, #1]
 8001e90:	f361 1304 	bfi	r3, r1, #4, #1
 8001e94:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA3 = HAL_GPIO_ReadPin(GRA3_GPIO_Port, GRA3_Pin);								// Tempomat 3 Eingang
 8001e96:	2180      	movs	r1, #128	; 0x80
 8001e98:	4827      	ldr	r0, [pc, #156]	; (8001f38 <readall_inputs+0x43c>)
 8001e9a:	f003 fd59 	bl	8005950 <HAL_GPIO_ReadPin>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	b2d9      	uxtb	r1, r3
 8001ea6:	4a23      	ldr	r2, [pc, #140]	; (8001f34 <readall_inputs+0x438>)
 8001ea8:	7853      	ldrb	r3, [r2, #1]
 8001eaa:	f361 1345 	bfi	r3, r1, #5, #1
 8001eae:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA4 = HAL_GPIO_ReadPin(GRA4_GPIO_Port, GRA4_Pin);								// Tempomat 4 Eingang
 8001eb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eb4:	4820      	ldr	r0, [pc, #128]	; (8001f38 <readall_inputs+0x43c>)
 8001eb6:	f003 fd4b 	bl	8005950 <HAL_GPIO_ReadPin>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	b2d9      	uxtb	r1, r3
 8001ec2:	4a1c      	ldr	r2, [pc, #112]	; (8001f34 <readall_inputs+0x438>)
 8001ec4:	7853      	ldrb	r3, [r2, #1]
 8001ec6:	f361 1386 	bfi	r3, r1, #6, #1
 8001eca:	7053      	strb	r3, [r2, #1]
	komfort_in.Durchfluss = HAL_GPIO_ReadPin(DURCHFLUSS_GPIO_Port, DURCHFLUSS_Pin);				// Durchflusssensor Eingang
 8001ecc:	2120      	movs	r1, #32
 8001ece:	481b      	ldr	r0, [pc, #108]	; (8001f3c <readall_inputs+0x440>)
 8001ed0:	f003 fd3e 	bl	8005950 <HAL_GPIO_ReadPin>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	b2d9      	uxtb	r1, r3
 8001edc:	4a15      	ldr	r2, [pc, #84]	; (8001f34 <readall_inputs+0x438>)
 8001ede:	7853      	ldrb	r3, [r2, #1]
 8001ee0:	f361 13c7 	bfi	r3, r1, #7, #1
 8001ee4:	7053      	strb	r3, [r2, #1]

#ifdef DEBUG_INPUT
	ITM_SendString("Eingaenge gelesen.\n");
 8001ee6:	4816      	ldr	r0, [pc, #88]	; (8001f40 <readall_inputs+0x444>)
 8001ee8:	f7ff fdcc 	bl	8001a84 <ITM_SendString>
	ITM_SendString("system_in:\t");
 8001eec:	4815      	ldr	r0, [pc, #84]	; (8001f44 <readall_inputs+0x448>)
 8001eee:	f7ff fdc9 	bl	8001a84 <ITM_SendString>
	ITM_SendNumber(system_in.systeminput);
 8001ef2:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <readall_inputs+0x44c>)
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fdce 	bl	8001a98 <ITM_SendNumber>
	ITM_SendChar('\n');
 8001efc:	200a      	movs	r0, #10
 8001efe:	f7ff fdd5 	bl	8001aac <ITM_SendChar>
	ITM_SendString("sdc_in:\t");
 8001f02:	4812      	ldr	r0, [pc, #72]	; (8001f4c <readall_inputs+0x450>)
 8001f04:	f7ff fdbe 	bl	8001a84 <ITM_SendString>
	ITM_SendNumber(sdc_in.sdcinput);
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <readall_inputs+0x454>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fdc3 	bl	8001a98 <ITM_SendNumber>
	ITM_SendChar('\n');
 8001f12:	200a      	movs	r0, #10
 8001f14:	f7ff fdca 	bl	8001aac <ITM_SendChar>
	ITM_SendString("komfort_in:\t");
 8001f18:	480e      	ldr	r0, [pc, #56]	; (8001f54 <readall_inputs+0x458>)
 8001f1a:	f7ff fdb3 	bl	8001a84 <ITM_SendString>
	ITM_SendNumber(komfort_in.komfortinput);
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <readall_inputs+0x438>)
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fdb8 	bl	8001a98 <ITM_SendNumber>
	ITM_SendChar('\n');
 8001f28:	200a      	movs	r0, #10
 8001f2a:	f7ff fdbf 	bl	8001aac <ITM_SendChar>
#endif
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	2000012c 	.word	0x2000012c
 8001f38:	40021800 	.word	0x40021800
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	08008eb4 	.word	0x08008eb4
 8001f44:	08008ec8 	.word	0x08008ec8
 8001f48:	20000124 	.word	0x20000124
 8001f4c:	08008ed4 	.word	0x08008ed4
 8001f50:	20000128 	.word	0x20000128
 8001f54:	08008ee0 	.word	0x08008ee0

08001f58 <readAnlasser>:
//----------------------------------------------------------------------

// Anlasser einlesen, Wert in Variable speichern, bis KL15 abfaellt
//----------------------------------------------------------------------
void readAnlasser(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
	if (system_in.Anlasser != 1)
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <readAnlasser+0x50>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d105      	bne.n	8001f76 <readAnlasser+0x1e>
	{
		sdc_in.Anlasser = 1;
 8001f6a:	4a10      	ldr	r2, [pc, #64]	; (8001fac <readAnlasser+0x54>)
 8001f6c:	7813      	ldrb	r3, [r2, #0]
 8001f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f72:	7013      	strb	r3, [r2, #0]
	}
	else if ((sdc_in.Anlasser == 1) && (system_in.KL15 == 1))
	{
		sdc_in.Anlasser = 0;
	}
}
 8001f74:	e012      	b.n	8001f9c <readAnlasser+0x44>
	else if ((sdc_in.Anlasser == 1) && (system_in.KL15 == 1))
 8001f76:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <readAnlasser+0x54>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00b      	beq.n	8001f9c <readAnlasser+0x44>
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <readAnlasser+0x50>)
 8001f86:	785b      	ldrb	r3, [r3, #1]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d004      	beq.n	8001f9c <readAnlasser+0x44>
		sdc_in.Anlasser = 0;
 8001f92:	4a06      	ldr	r2, [pc, #24]	; (8001fac <readAnlasser+0x54>)
 8001f94:	7813      	ldrb	r3, [r2, #0]
 8001f96:	f36f 1386 	bfc	r3, #6, #1
 8001f9a:	7013      	strb	r3, [r2, #0]
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	20000124 	.word	0x20000124
 8001fac:	20000128 	.word	0x20000128

08001fb0 <millis>:
//----------------------------------------------------------------------
#include "millis.h"
//----------------------------------------------------------------------

uint32_t millis(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001fb4:	f001 fe30 	bl	8003c18 <HAL_GetTick>
 8001fb8:	4603      	mov	r3, r0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);							// Teste Green LED, an
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fca:	481b      	ldr	r0, [pc, #108]	; (8002038 <testPCB_Leds+0x78>)
 8001fcc:	f003 fcd8 	bl	8005980 <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 8001fd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fd4:	f001 fe2c 	bl	8003c30 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);							// Teste Green LED, aus
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fde:	4816      	ldr	r0, [pc, #88]	; (8002038 <testPCB_Leds+0x78>)
 8001fe0:	f003 fcce 	bl	8005980 <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 8001fe4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fe8:	f001 fe22 	bl	8003c30 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);								// Teste Blue LED, an
 8001fec:	2201      	movs	r2, #1
 8001fee:	2180      	movs	r1, #128	; 0x80
 8001ff0:	4811      	ldr	r0, [pc, #68]	; (8002038 <testPCB_Leds+0x78>)
 8001ff2:	f003 fcc5 	bl	8005980 <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 8001ff6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ffa:	f001 fe19 	bl	8003c30 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);							// Teste Blue LED, aus
 8001ffe:	2200      	movs	r2, #0
 8002000:	2180      	movs	r1, #128	; 0x80
 8002002:	480d      	ldr	r0, [pc, #52]	; (8002038 <testPCB_Leds+0x78>)
 8002004:	f003 fcbc 	bl	8005980 <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 8002008:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800200c:	f001 fe10 	bl	8003c30 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);								// Teste Red LED, an
 8002010:	2201      	movs	r2, #1
 8002012:	2104      	movs	r1, #4
 8002014:	4808      	ldr	r0, [pc, #32]	; (8002038 <testPCB_Leds+0x78>)
 8002016:	f003 fcb3 	bl	8005980 <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 800201a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800201e:	f001 fe07 	bl	8003c30 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);								// Teste Red LED, aus
 8002022:	2200      	movs	r2, #0
 8002024:	2104      	movs	r1, #4
 8002026:	4804      	ldr	r0, [pc, #16]	; (8002038 <testPCB_Leds+0x78>)
 8002028:	f003 fcaa 	bl	8005980 <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 800202c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002030:	f001 fdfe 	bl	8003c30 <HAL_Delay>
}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40020400 	.word	0x40020400

0800203c <testCockpit_Leds>:
//----------------------------------------------------------------------

// Teste Cockpit LEDs
//----------------------------------------------------------------------
void testCockpit_Leds(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(ANHAENGER_GPIO_Port, ANHAENGER_Pin, GPIO_PIN_SET);							// Teste Anhaenger LED, an (Cockpit ECO)
 8002040:	2201      	movs	r2, #1
 8002042:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002046:	4813      	ldr	r0, [pc, #76]	; (8002094 <testCockpit_Leds+0x58>)
 8002048:	f003 fc9a 	bl	8005980 <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 800204c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002050:	f001 fdee 	bl	8003c30 <HAL_Delay>
    HAL_GPIO_WritePin(ANHAENGER_GPIO_Port, ANHAENGER_Pin, GPIO_PIN_RESET);							// Teste Anhaenger LED, aus (Cockpit ECO)
 8002054:	2200      	movs	r2, #0
 8002056:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800205a:	480e      	ldr	r0, [pc, #56]	; (8002094 <testCockpit_Leds+0x58>)
 800205c:	f003 fc90 	bl	8005980 <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 8002060:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002064:	f001 fde4 	bl	8003c30 <HAL_Delay>
    HAL_GPIO_WritePin(RESERVE_OUT_GPIO_Port, RESERVE_OUT_Pin, GPIO_PIN_SET);						// Teste Reserve LED, an (Cockpit Niveauregulierung)
 8002068:	2201      	movs	r2, #1
 800206a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800206e:	4809      	ldr	r0, [pc, #36]	; (8002094 <testCockpit_Leds+0x58>)
 8002070:	f003 fc86 	bl	8005980 <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 8002074:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002078:	f001 fdda 	bl	8003c30 <HAL_Delay>
    HAL_GPIO_WritePin(RESERVE_OUT_GPIO_Port, RESERVE_OUT_Pin, GPIO_PIN_RESET);						// Teste Reserve LED, aus (Cockpit Niveauregulierung)
 800207c:	2200      	movs	r2, #0
 800207e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002082:	4804      	ldr	r0, [pc, #16]	; (8002094 <testCockpit_Leds+0x58>)
 8002084:	f003 fc7c 	bl	8005980 <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 8002088:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800208c:	f001 fdd0 	bl	8003c30 <HAL_Delay>
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40020c00 	.word	0x40020c00

08002098 <pwm_oelstand>:
//----------------------------------------------------------------------

// PWM fuer Oelstandsensor am Kombiinstrument
//----------------------------------------------------------------------
void pwm_oelstand(uint16_t time)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	80fb      	strh	r3, [r7, #6]
	// Auswahl wie viele Sekunden vergangen
	switch (time)																					// Zeit wird uebergeben
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	2b4b      	cmp	r3, #75	; 0x4b
 80020a6:	d01f      	beq.n	80020e8 <pwm_oelstand+0x50>
 80020a8:	2b4b      	cmp	r3, #75	; 0x4b
 80020aa:	dc24      	bgt.n	80020f6 <pwm_oelstand+0x5e>
 80020ac:	2b2d      	cmp	r3, #45	; 0x2d
 80020ae:	d014      	beq.n	80020da <pwm_oelstand+0x42>
 80020b0:	2b2d      	cmp	r3, #45	; 0x2d
 80020b2:	dc20      	bgt.n	80020f6 <pwm_oelstand+0x5e>
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <pwm_oelstand+0x26>
 80020b8:	2b0f      	cmp	r3, #15
 80020ba:	d007      	beq.n	80020cc <pwm_oelstand+0x34>
			break;
		case 75: // 5x15 ms = 75 ms
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 75ms Oelstandsensor Ausgang high
			break;
		default:
			break;
 80020bc:	e01b      	b.n	80020f6 <pwm_oelstand+0x5e>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_RESET);			// Bei 0ms Oelstandsensor Ausgang low
 80020be:	2200      	movs	r2, #0
 80020c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020c4:	480e      	ldr	r0, [pc, #56]	; (8002100 <pwm_oelstand+0x68>)
 80020c6:	f003 fc5b 	bl	8005980 <HAL_GPIO_WritePin>
			break;
 80020ca:	e015      	b.n	80020f8 <pwm_oelstand+0x60>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 15ms Oelstandsensor Ausgang high
 80020cc:	2201      	movs	r2, #1
 80020ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020d2:	480b      	ldr	r0, [pc, #44]	; (8002100 <pwm_oelstand+0x68>)
 80020d4:	f003 fc54 	bl	8005980 <HAL_GPIO_WritePin>
			break;
 80020d8:	e00e      	b.n	80020f8 <pwm_oelstand+0x60>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_RESET);			// Bei 45ms Oelstandsensor Ausgang low
 80020da:	2200      	movs	r2, #0
 80020dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020e0:	4807      	ldr	r0, [pc, #28]	; (8002100 <pwm_oelstand+0x68>)
 80020e2:	f003 fc4d 	bl	8005980 <HAL_GPIO_WritePin>
			break;
 80020e6:	e007      	b.n	80020f8 <pwm_oelstand+0x60>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 75ms Oelstandsensor Ausgang high
 80020e8:	2201      	movs	r2, #1
 80020ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020ee:	4804      	ldr	r0, [pc, #16]	; (8002100 <pwm_oelstand+0x68>)
 80020f0:	f003 fc46 	bl	8005980 <HAL_GPIO_WritePin>
			break;
 80020f4:	e000      	b.n	80020f8 <pwm_oelstand+0x60>
			break;
 80020f6:	bf00      	nop
	}
	// Nach 405ms wird das ganze wiederholt
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40020000 	.word	0x40020000

08002104 <cockpit_default>:
//----------------------------------------------------------------------

// Setze Cockpit auf default, alle Fehler OK
//----------------------------------------------------------------------
void cockpit_default(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
	leuchten_out.Ruechwarn = 1;																		// Ruecklichtwarnung setzen
 8002108:	4a1f      	ldr	r2, [pc, #124]	; (8002188 <cockpit_default+0x84>)
 800210a:	7813      	ldrb	r3, [r2, #0]
 800210c:	f043 0310 	orr.w	r3, r3, #16
 8002110:	7013      	strb	r3, [r2, #0]
	leuchten_out.Wischwarn = 1;																		// Wischwasserwarnung setzen
 8002112:	4a1d      	ldr	r2, [pc, #116]	; (8002188 <cockpit_default+0x84>)
 8002114:	7813      	ldrb	r3, [r2, #0]
 8002116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800211a:	7013      	strb	r3, [r2, #0]
	leuchten_out.Bremswarn = 1;																		// Bremslichtwarnung setzen
 800211c:	4a1a      	ldr	r2, [pc, #104]	; (8002188 <cockpit_default+0x84>)
 800211e:	7813      	ldrb	r3, [r2, #0]
 8002120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002124:	7013      	strb	r3, [r2, #0]
	leuchten_out.Oeldruck = 1;																		// Oelstandwarnung setzen
 8002126:	4a18      	ldr	r2, [pc, #96]	; (8002188 <cockpit_default+0x84>)
 8002128:	7853      	ldrb	r3, [r2, #1]
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, leuchten_out.Ruechwarn);			// Fehlermeldung fuer Ruecklichtwarnung einschalten
 8002130:	4b15      	ldr	r3, [pc, #84]	; (8002188 <cockpit_default+0x84>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002138:	b2db      	uxtb	r3, r3
 800213a:	461a      	mov	r2, r3
 800213c:	2180      	movs	r1, #128	; 0x80
 800213e:	4813      	ldr	r0, [pc, #76]	; (800218c <cockpit_default+0x88>)
 8002140:	f003 fc1e 	bl	8005980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WISCHWARNUNG_GPIO_Port, WISCHWARNUNG_Pin, leuchten_out.Wischwarn);			// Fehlermeldung fuer Wischwasserwarnung einschalten
 8002144:	4b10      	ldr	r3, [pc, #64]	; (8002188 <cockpit_default+0x84>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800214c:	b2db      	uxtb	r3, r3
 800214e:	461a      	mov	r2, r3
 8002150:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002154:	480e      	ldr	r0, [pc, #56]	; (8002190 <cockpit_default+0x8c>)
 8002156:	f003 fc13 	bl	8005980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BREMSWARNUNG_GPIO_Port, BREMSWARNUNG_Pin, leuchten_out.Bremswarn);			// Fehlermeldung fuer Bremslichtwarnung einschalten
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <cockpit_default+0x84>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002162:	b2db      	uxtb	r3, r3
 8002164:	461a      	mov	r2, r3
 8002166:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800216a:	4809      	ldr	r0, [pc, #36]	; (8002190 <cockpit_default+0x8c>)
 800216c:	f003 fc08 	bl	8005980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OELDRUCK_GPIO_Port, OELDRUCK_Pin, leuchten_out.Oeldruck);						// Fehlermeldung fuer Oeldruckwarnung einschalten
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <cockpit_default+0x84>)
 8002172:	785b      	ldrb	r3, [r3, #1]
 8002174:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002178:	b2db      	uxtb	r3, r3
 800217a:	461a      	mov	r2, r3
 800217c:	2104      	movs	r1, #4
 800217e:	4805      	ldr	r0, [pc, #20]	; (8002194 <cockpit_default+0x90>)
 8002180:	f003 fbfe 	bl	8005980 <HAL_GPIO_WritePin>
}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000138 	.word	0x20000138
 800218c:	40020c00 	.word	0x40020c00
 8002190:	40021800 	.word	0x40021800
 8002194:	40021400 	.word	0x40021400

08002198 <testSDC>:
//----------------------------------------------------------------------

// Testen der Spannung am Shutdown-Circuit, Signal 1 = offen, Signal = 0 geschlossen
//----------------------------------------------------------------------
void testSDC(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, GPIO_PIN_SET);					// Einschalten von Shutdown-Circuit zum testen
 800219c:	2201      	movs	r2, #1
 800219e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021a2:	4811      	ldr	r0, [pc, #68]	; (80021e8 <testSDC+0x50>)
 80021a4:	f003 fbec 	bl	8005980 <HAL_GPIO_WritePin>
	HAL_Delay(100);																					// Wartezeit zum setzen
 80021a8:	2064      	movs	r0, #100	; 0x64
 80021aa:	f001 fd41 	bl	8003c30 <HAL_Delay>
	if (HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin) == 1)								// Einlesen von SDC0 Eingang
 80021ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021b2:	480d      	ldr	r0, [pc, #52]	; (80021e8 <testSDC+0x50>)
 80021b4:	f003 fbcc 	bl	8005950 <HAL_GPIO_ReadPin>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d103      	bne.n	80021c6 <testSDC+0x2e>
	{
#ifndef DEBUG_SDC
		software_error(ERROR_SDC_SPANNUNG);															// Sollte Sicherung kaputt oder Kurzschluss, dann Fehlerausgeben
#else
#warning Das Abschalten des Softwarefehlers kann unter Umstaenden zu Beschaedigung der HW fuehren.
		software_error_debug(ERROR_SDC_SPANNUNG);													// Errorfunktion stoppt Programm nicht
 80021be:	2003      	movs	r0, #3
 80021c0:	f7ff fc08 	bl	80019d4 <software_error_debug>
 80021c4:	e004      	b.n	80021d0 <testSDC+0x38>
#endif
	}
	else
	{
	  	sdc_in.SDC12V = 1;																			// SDC Spannungsversorgung OK
 80021c6:	4a09      	ldr	r2, [pc, #36]	; (80021ec <testSDC+0x54>)
 80021c8:	7813      	ldrb	r3, [r2, #0]
 80021ca:	f043 0320 	orr.w	r3, r3, #32
 80021ce:	7013      	strb	r3, [r2, #0]
	}
	HAL_Delay(100);																					// Wartezeit zum setzen
 80021d0:	2064      	movs	r0, #100	; 0x64
 80021d2:	f001 fd2d 	bl	8003c30 <HAL_Delay>
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, GPIO_PIN_RESET);					// Auschalten von Shutdown-Circuit
 80021d6:	2200      	movs	r2, #0
 80021d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <testSDC+0x50>)
 80021de:	f003 fbcf 	bl	8005980 <HAL_GPIO_WritePin>
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	20000128 	.word	0x20000128

080021f0 <readTrottle>:
//----------------------------------------------------------------------

// Gaspedal auswerten
//----------------------------------------------------------------------
uint16_t readTrottle(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
	// Variablen anlegen
	uint16_t ADC_Gas = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	80fb      	strh	r3, [r7, #6]

	// Pruefen ob Variable Anlasser aktiv ist
	if (sdc_in.Anlasser == 1)												// Nur aktiv, wenn KL15 an und Anlasser einmal betaetigt.
 80021fa:	4b34      	ldr	r3, [pc, #208]	; (80022cc <readTrottle+0xdc>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d05c      	beq.n	80022c2 <readTrottle+0xd2>
	{
		// Gaspedal einlesen
		ADC_Gas = ADC_Gaspedal();
 8002208:	f7ff f93e 	bl	8001488 <ADC_Gaspedal>
 800220c:	4603      	mov	r3, r0
 800220e:	80fb      	strh	r3, [r7, #6]

		// Pruefen ob Kupplung getreten wurde
		if (system_in.Kupplung == 1)										// Wenn Kupplung nicht getreten wurde == 1
 8002210:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <readTrottle+0xe0>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	f003 0310 	and.w	r3, r3, #16
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d04f      	beq.n	80022be <readTrottle+0xce>
		{
			// Wenn Leerlauf und Kickdown aktiv Plausibilitaetsfehler
			if ((system_in.Leerlauf == 1) && (system_in.Kickdown == 1))
 800221e:	4b2c      	ldr	r3, [pc, #176]	; (80022d0 <readTrottle+0xe0>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00e      	beq.n	800224a <readTrottle+0x5a>
 800222c:	4b28      	ldr	r3, [pc, #160]	; (80022d0 <readTrottle+0xe0>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d007      	beq.n	800224a <readTrottle+0x5a>
			{
				// Fehlermeldung auf Uart ausgeben
#define TROTTLE_INVALID				"Error_Gaspedal_1 Plausibilitaetsfehler: Kickdown und Leerlauf"
				uartTransmit(TROTTLE_INVALID, sizeof(TROTTLE_INVALID));
 800223a:	213e      	movs	r1, #62	; 0x3e
 800223c:	4825      	ldr	r0, [pc, #148]	; (80022d4 <readTrottle+0xe4>)
 800223e:	f7fe fabf 	bl	80007c0 <uartTransmit>
				// Gaspedal invalide
				software_error(ERROR_GASPEDAL);
 8002242:	2001      	movs	r0, #1
 8002244:	f7ff fb76 	bl	8001934 <software_error>
 8002248:	e03b      	b.n	80022c2 <readTrottle+0xd2>
			}
			// Threshold Wert vergleichen / Threshold Wert >= THRESHOLD und Leerlauf aktiv
			else if ((system_in.Leerlauf == 1) && (ADC_Gas >= GAS_THRESHOLD))
 800224a:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <readTrottle+0xe0>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <readTrottle+0x7a>
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800225e:	d304      	bcc.n	800226a <readTrottle+0x7a>
			{
				// Wenn Wert groesser THRESHOLD ist, dann THRESHOLD vom ADC-Wert abziehen
				ADC_Gas -= GAS_THRESHOLD;
 8002260:	88fb      	ldrh	r3, [r7, #6]
 8002262:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002266:	80fb      	strh	r3, [r7, #6]
 8002268:	e02b      	b.n	80022c2 <readTrottle+0xd2>
			}
			// Threshold Wert vergleichen / Threshold Wert < THRESHOLD und Leerlauf aktiv
			else if ((system_in.Leerlauf == 1) && (ADC_Gas < GAS_THRESHOLD))
 800226a:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <readTrottle+0xe0>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d006      	beq.n	8002286 <readTrottle+0x96>
 8002278:	88fb      	ldrh	r3, [r7, #6]
 800227a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800227e:	d202      	bcs.n	8002286 <readTrottle+0x96>
			{
				// Wenn der Wert kleine als THRESHOLD ist, dann ADC ignorieren, alle Werte sind 0
				ADC_Gas = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	80fb      	strh	r3, [r7, #6]
 8002284:	e01d      	b.n	80022c2 <readTrottle+0xd2>
			}
			// Threshold Wert vergleichen / Threshold Wert < THRESHOLD und Kickdown aktiv
			else if ((system_in.Kickdown == 1) && (ADC_Gas < (GAS_MAX_ADC - GAS_THRESHOLD)))
 8002286:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <readTrottle+0xe0>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d004      	beq.n	800229e <readTrottle+0xae>
 8002294:	88fb      	ldrh	r3, [r7, #6]
 8002296:	f640 62d2 	movw	r2, #3794	; 0xed2
 800229a:	4293      	cmp	r3, r2
 800229c:	d911      	bls.n	80022c2 <readTrottle+0xd2>
			{
				// Wenn Wert kleiner THRESHOLD ist

			}
			// Threshold Wert vergleichen / Threshold Wert > THRESHOLD und Kickdown aktiv
			else if ((system_in.Kickdown == 1) && (ADC_Gas >= (GAS_MAX_ADC - GAS_THRESHOLD)))
 800229e:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <readTrottle+0xe0>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00a      	beq.n	80022c2 <readTrottle+0xd2>
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	f640 62d2 	movw	r2, #3794	; 0xed2
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d905      	bls.n	80022c2 <readTrottle+0xd2>
			{
				// Wenn Wert gleich THRESHOLD ist
				ADC_Gas = GAS_MAX_ADC;
 80022b6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80022ba:	80fb      	strh	r3, [r7, #6]
 80022bc:	e001      	b.n	80022c2 <readTrottle+0xd2>
		}
		// Wenn Kupplung getreten == 0
		else
		{
			// Wenn Kupplung oder Bremse getreten
			ADC_Gas = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	80fb      	strh	r3, [r7, #6]
		}
	}

	return ADC_Gas;
 80022c2:	88fb      	ldrh	r3, [r7, #6]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000128 	.word	0x20000128
 80022d0:	20000124 	.word	0x20000124
 80022d4:	08008ef0 	.word	0x08008ef0

080022d8 <readBrake>:
//----------------------------------------------------------------------

// Bremse auswerten
//----------------------------------------------------------------------
void readBrake(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
	// Variablen anlegen
//	uint16_t ADC_Bremse = 0;

	// Gaspedal auf Plausibilitaet pruefen
	if ((system_in.BremseNO == 1) && (system_in.BremseNC != 1))				// Bremse nicht getreten
 80022dc:	4b13      	ldr	r3, [pc, #76]	; (800232c <readBrake+0x54>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d01a      	beq.n	8002320 <readBrake+0x48>
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <readBrake+0x54>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d013      	beq.n	8002320 <readBrake+0x48>
	{
		// Bremsdruck einlesen
//		ADC_Bremse = ADC_Bremsdruck();
	}
	else if ((system_in.BremseNO != 1) && (system_in.BremseNC == 1))		// Bremse voll getreten
 80022f8:	4b0c      	ldr	r3, [pc, #48]	; (800232c <readBrake+0x54>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10c      	bne.n	8002320 <readBrake+0x48>
 8002306:	4b09      	ldr	r3, [pc, #36]	; (800232c <readBrake+0x54>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d105      	bne.n	8002320 <readBrake+0x48>
	{

	}
	else if ((system_in.BremseNO != 1) && (system_in.BremseNC != 1))		// Bremse teilweise getreten
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <readBrake+0x54>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
#else
#warning Das Abschalten des Softwarefehlers kann unter Umstaenden zu Beschaedigung der HW fuehren.
//		software_error_debug(ERROR_BREMSPEDAL);								// Errorfunktion stoppt Programm nicht
#endif
	}
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	20000124 	.word	0x20000124

08002330 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002336:	463b      	mov	r3, r7
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002342:	4b21      	ldr	r3, [pc, #132]	; (80023c8 <MX_ADC1_Init+0x98>)
 8002344:	4a21      	ldr	r2, [pc, #132]	; (80023cc <MX_ADC1_Init+0x9c>)
 8002346:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002348:	4b1f      	ldr	r3, [pc, #124]	; (80023c8 <MX_ADC1_Init+0x98>)
 800234a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800234e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002350:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <MX_ADC1_Init+0x98>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002356:	4b1c      	ldr	r3, [pc, #112]	; (80023c8 <MX_ADC1_Init+0x98>)
 8002358:	2200      	movs	r2, #0
 800235a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800235c:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <MX_ADC1_Init+0x98>)
 800235e:	2200      	movs	r2, #0
 8002360:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002362:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <MX_ADC1_Init+0x98>)
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <MX_ADC1_Init+0x98>)
 800236c:	2200      	movs	r2, #0
 800236e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002370:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <MX_ADC1_Init+0x98>)
 8002372:	4a17      	ldr	r2, [pc, #92]	; (80023d0 <MX_ADC1_Init+0xa0>)
 8002374:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002376:	4b14      	ldr	r3, [pc, #80]	; (80023c8 <MX_ADC1_Init+0x98>)
 8002378:	2200      	movs	r2, #0
 800237a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <MX_ADC1_Init+0x98>)
 800237e:	2201      	movs	r2, #1
 8002380:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002382:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <MX_ADC1_Init+0x98>)
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800238a:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <MX_ADC1_Init+0x98>)
 800238c:	2201      	movs	r2, #1
 800238e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002390:	480d      	ldr	r0, [pc, #52]	; (80023c8 <MX_ADC1_Init+0x98>)
 8002392:	f001 fcb9 	bl	8003d08 <HAL_ADC_Init>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800239c:	f001 fa20 	bl	80037e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80023a0:	230e      	movs	r3, #14
 80023a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023a4:	2301      	movs	r3, #1
 80023a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80023a8:	2301      	movs	r3, #1
 80023aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023ac:	463b      	mov	r3, r7
 80023ae:	4619      	mov	r1, r3
 80023b0:	4805      	ldr	r0, [pc, #20]	; (80023c8 <MX_ADC1_Init+0x98>)
 80023b2:	f001 fe87 	bl	80040c4 <HAL_ADC_ConfigChannel>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80023bc:	f001 fa10 	bl	80037e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20000140 	.word	0x20000140
 80023cc:	40012000 	.word	0x40012000
 80023d0:	0f000001 	.word	0x0f000001

080023d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08c      	sub	sp, #48	; 0x30
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 031c 	add.w	r3, r7, #28
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a2d      	ldr	r2, [pc, #180]	; (80024a8 <HAL_ADC_MspInit+0xd4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d153      	bne.n	800249e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023f6:	4b2d      	ldr	r3, [pc, #180]	; (80024ac <HAL_ADC_MspInit+0xd8>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	4a2c      	ldr	r2, [pc, #176]	; (80024ac <HAL_ADC_MspInit+0xd8>)
 80023fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002400:	6453      	str	r3, [r2, #68]	; 0x44
 8002402:	4b2a      	ldr	r3, [pc, #168]	; (80024ac <HAL_ADC_MspInit+0xd8>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240a:	61bb      	str	r3, [r7, #24]
 800240c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240e:	4b27      	ldr	r3, [pc, #156]	; (80024ac <HAL_ADC_MspInit+0xd8>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a26      	ldr	r2, [pc, #152]	; (80024ac <HAL_ADC_MspInit+0xd8>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b24      	ldr	r3, [pc, #144]	; (80024ac <HAL_ADC_MspInit+0xd8>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002426:	4b21      	ldr	r3, [pc, #132]	; (80024ac <HAL_ADC_MspInit+0xd8>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4a20      	ldr	r2, [pc, #128]	; (80024ac <HAL_ADC_MspInit+0xd8>)
 800242c:	f043 0304 	orr.w	r3, r3, #4
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
 8002432:	4b1e      	ldr	r3, [pc, #120]	; (80024ac <HAL_ADC_MspInit+0xd8>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800243e:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <HAL_ADC_MspInit+0xd8>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a1a      	ldr	r2, [pc, #104]	; (80024ac <HAL_ADC_MspInit+0xd8>)
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b18      	ldr	r3, [pc, #96]	; (80024ac <HAL_ADC_MspInit+0xd8>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SENSE_KL15_Pin|SENSE_KUEHLWASSER_Pin|SENSE_KLIMA_FLAP_Pin|SENSE_GAS_Pin
 8002456:	23f8      	movs	r3, #248	; 0xf8
 8002458:	61fb      	str	r3, [r7, #28]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800245a:	2303      	movs	r3, #3
 800245c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002462:	f107 031c 	add.w	r3, r7, #28
 8002466:	4619      	mov	r1, r3
 8002468:	4811      	ldr	r0, [pc, #68]	; (80024b0 <HAL_ADC_MspInit+0xdc>)
 800246a:	f003 f8c5 	bl	80055f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_DRUCK_Pin|SENSE_DRUCK_TEMP_Pin;
 800246e:	2330      	movs	r3, #48	; 0x30
 8002470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002472:	2303      	movs	r3, #3
 8002474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800247a:	f107 031c 	add.w	r3, r7, #28
 800247e:	4619      	mov	r1, r3
 8002480:	480c      	ldr	r0, [pc, #48]	; (80024b4 <HAL_ADC_MspInit+0xe0>)
 8002482:	f003 f8b9 	bl	80055f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_RETURN_Pin|SENSE_INFO_Pin;
 8002486:	2303      	movs	r3, #3
 8002488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800248a:	2303      	movs	r3, #3
 800248c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002492:	f107 031c 	add.w	r3, r7, #28
 8002496:	4619      	mov	r1, r3
 8002498:	4807      	ldr	r0, [pc, #28]	; (80024b8 <HAL_ADC_MspInit+0xe4>)
 800249a:	f003 f8ad 	bl	80055f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800249e:	bf00      	nop
 80024a0:	3730      	adds	r7, #48	; 0x30
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40012000 	.word	0x40012000
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40020000 	.word	0x40020000
 80024b4:	40020800 	.word	0x40020800
 80024b8:	40020400 	.word	0x40020400

080024bc <MX_CAN1_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80024c0:	4b2e      	ldr	r3, [pc, #184]	; (800257c <MX_CAN1_Init+0xc0>)
 80024c2:	4a2f      	ldr	r2, [pc, #188]	; (8002580 <MX_CAN1_Init+0xc4>)
 80024c4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 30;
 80024c6:	4b2d      	ldr	r3, [pc, #180]	; (800257c <MX_CAN1_Init+0xc0>)
 80024c8:	221e      	movs	r2, #30
 80024ca:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80024cc:	4b2b      	ldr	r3, [pc, #172]	; (800257c <MX_CAN1_Init+0xc0>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80024d2:	4b2a      	ldr	r3, [pc, #168]	; (800257c <MX_CAN1_Init+0xc0>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 80024d8:	4b28      	ldr	r3, [pc, #160]	; (800257c <MX_CAN1_Init+0xc0>)
 80024da:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80024de:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80024e0:	4b26      	ldr	r3, [pc, #152]	; (800257c <MX_CAN1_Init+0xc0>)
 80024e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024e6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80024e8:	4b24      	ldr	r3, [pc, #144]	; (800257c <MX_CAN1_Init+0xc0>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80024ee:	4b23      	ldr	r3, [pc, #140]	; (800257c <MX_CAN1_Init+0xc0>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80024f4:	4b21      	ldr	r3, [pc, #132]	; (800257c <MX_CAN1_Init+0xc0>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <MX_CAN1_Init+0xc0>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002500:	4b1e      	ldr	r3, [pc, #120]	; (800257c <MX_CAN1_Init+0xc0>)
 8002502:	2200      	movs	r2, #0
 8002504:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002506:	4b1d      	ldr	r3, [pc, #116]	; (800257c <MX_CAN1_Init+0xc0>)
 8002508:	2200      	movs	r2, #0
 800250a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800250c:	481b      	ldr	r0, [pc, #108]	; (800257c <MX_CAN1_Init+0xc0>)
 800250e:	f002 f829 	bl	8004564 <HAL_CAN_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002518:	f001 f962 	bl	80037e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	// Starte CAN Bus
	if((HAL_CAN_Start(&hcan1)) != HAL_OK)
 800251c:	4817      	ldr	r0, [pc, #92]	; (800257c <MX_CAN1_Init+0xc0>)
 800251e:	f002 fa09 	bl	8004934 <HAL_CAN_Start>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_CAN1_Init+0x70>
	{
		// Fehler beim Starten des CAN-Busses
		Error_Handler();
 8002528:	f001 f95a 	bl	80037e0 <Error_Handler>
	}

	// Filter Bank initialisieren um Daten zu empfangen
	// Akzeptiere alle CAN-Pakete
	sFilterConfig.FilterBank = 0;
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <MX_CAN1_Init+0xc8>)
 800252e:	2200      	movs	r2, #0
 8002530:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <MX_CAN1_Init+0xc8>)
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <MX_CAN1_Init+0xc8>)
 800253a:	2201      	movs	r2, #1
 800253c:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0111 << 5;
 800253e:	4b11      	ldr	r3, [pc, #68]	; (8002584 <MX_CAN1_Init+0xc8>)
 8002540:	f242 2220 	movw	r2, #8736	; 0x2220
 8002544:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0;
 8002546:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <MX_CAN1_Init+0xc8>)
 8002548:	2200      	movs	r2, #0
 800254a:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0111 << 5;
 800254c:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <MX_CAN1_Init+0xc8>)
 800254e:	f242 2220 	movw	r2, #8736	; 0x2220
 8002552:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0;
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <MX_CAN1_Init+0xc8>)
 8002556:	2200      	movs	r2, #0
 8002558:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = 0;
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <MX_CAN1_Init+0xc8>)
 800255c:	2200      	movs	r2, #0
 800255e:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8002560:	4b08      	ldr	r3, [pc, #32]	; (8002584 <MX_CAN1_Init+0xc8>)
 8002562:	2201      	movs	r2, #1
 8002564:	621a      	str	r2, [r3, #32]

	// Filter Bank schreiben
	if((HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig)) != HAL_OK)
 8002566:	4907      	ldr	r1, [pc, #28]	; (8002584 <MX_CAN1_Init+0xc8>)
 8002568:	4804      	ldr	r0, [pc, #16]	; (800257c <MX_CAN1_Init+0xc0>)
 800256a:	f002 f8f7 	bl	800475c <HAL_CAN_ConfigFilter>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_CAN1_Init+0xbc>
	{
		// Fehler beim konfigurieren der Filterbank fuer den CAN-Bus
		Error_Handler();
 8002574:	f001 f934 	bl	80037e0 <Error_Handler>
	}

  /* USER CODE END CAN1_Init 2 */

}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}
 800257c:	200001b0 	.word	0x200001b0
 8002580:	40006400 	.word	0x40006400
 8002584:	20000188 	.word	0x20000188

08002588 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800258c:	4b2d      	ldr	r3, [pc, #180]	; (8002644 <MX_CAN2_Init+0xbc>)
 800258e:	4a2e      	ldr	r2, [pc, #184]	; (8002648 <MX_CAN2_Init+0xc0>)
 8002590:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 30;
 8002592:	4b2c      	ldr	r3, [pc, #176]	; (8002644 <MX_CAN2_Init+0xbc>)
 8002594:	221e      	movs	r2, #30
 8002596:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002598:	4b2a      	ldr	r3, [pc, #168]	; (8002644 <MX_CAN2_Init+0xbc>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800259e:	4b29      	ldr	r3, [pc, #164]	; (8002644 <MX_CAN2_Init+0xbc>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_15TQ;
 80025a4:	4b27      	ldr	r3, [pc, #156]	; (8002644 <MX_CAN2_Init+0xbc>)
 80025a6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80025aa:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80025ac:	4b25      	ldr	r3, [pc, #148]	; (8002644 <MX_CAN2_Init+0xbc>)
 80025ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80025b2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80025b4:	4b23      	ldr	r3, [pc, #140]	; (8002644 <MX_CAN2_Init+0xbc>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80025ba:	4b22      	ldr	r3, [pc, #136]	; (8002644 <MX_CAN2_Init+0xbc>)
 80025bc:	2200      	movs	r2, #0
 80025be:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80025c0:	4b20      	ldr	r3, [pc, #128]	; (8002644 <MX_CAN2_Init+0xbc>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80025c6:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <MX_CAN2_Init+0xbc>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80025cc:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <MX_CAN2_Init+0xbc>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80025d2:	4b1c      	ldr	r3, [pc, #112]	; (8002644 <MX_CAN2_Init+0xbc>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80025d8:	481a      	ldr	r0, [pc, #104]	; (8002644 <MX_CAN2_Init+0xbc>)
 80025da:	f001 ffc3 	bl	8004564 <HAL_CAN_Init>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80025e4:	f001 f8fc 	bl	80037e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
	// Starte CAN Bus
	if((HAL_CAN_Start(&hcan2)) != HAL_OK)
 80025e8:	4816      	ldr	r0, [pc, #88]	; (8002644 <MX_CAN2_Init+0xbc>)
 80025ea:	f002 f9a3 	bl	8004934 <HAL_CAN_Start>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_CAN2_Init+0x70>
	{
		// Fehler beim Starten des CAN-Busses
		Error_Handler();
 80025f4:	f001 f8f4 	bl	80037e0 <Error_Handler>
	}

	// Filter Bank initialisieren um Daten zu empfangen
	// Akzeptiere alle CAN-Pakete
	sFilterConfig.FilterBank = 14;
 80025f8:	4b14      	ldr	r3, [pc, #80]	; (800264c <MX_CAN2_Init+0xc4>)
 80025fa:	220e      	movs	r2, #14
 80025fc:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80025fe:	4b13      	ldr	r3, [pc, #76]	; (800264c <MX_CAN2_Init+0xc4>)
 8002600:	2200      	movs	r2, #0
 8002602:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <MX_CAN2_Init+0xc4>)
 8002606:	2201      	movs	r2, #1
 8002608:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0 << 5;
 800260a:	4b10      	ldr	r3, [pc, #64]	; (800264c <MX_CAN2_Init+0xc4>)
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0;
 8002610:	4b0e      	ldr	r3, [pc, #56]	; (800264c <MX_CAN2_Init+0xc4>)
 8002612:	2200      	movs	r2, #0
 8002614:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0 << 5;
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <MX_CAN2_Init+0xc4>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0;
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <MX_CAN2_Init+0xc4>)
 800261e:	2200      	movs	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = 0;
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <MX_CAN2_Init+0xc4>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8002628:	4b08      	ldr	r3, [pc, #32]	; (800264c <MX_CAN2_Init+0xc4>)
 800262a:	2201      	movs	r2, #1
 800262c:	621a      	str	r2, [r3, #32]

	// Filter Bank schreiben
	if((HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig)) != HAL_OK)
 800262e:	4907      	ldr	r1, [pc, #28]	; (800264c <MX_CAN2_Init+0xc4>)
 8002630:	4804      	ldr	r0, [pc, #16]	; (8002644 <MX_CAN2_Init+0xbc>)
 8002632:	f002 f893 	bl	800475c <HAL_CAN_ConfigFilter>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_CAN2_Init+0xb8>
	{
		// Fehler beim konfigurieren der Filterbank fuer den CAN-Bus
		Error_Handler();
 800263c:	f001 f8d0 	bl	80037e0 <Error_Handler>
	}

  /* USER CODE END CAN2_Init 2 */

}
 8002640:	bf00      	nop
 8002642:	bd80      	pop	{r7, pc}
 8002644:	200001d8 	.word	0x200001d8
 8002648:	40006800 	.word	0x40006800
 800264c:	20000188 	.word	0x20000188

08002650 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8002654:	4b33      	ldr	r3, [pc, #204]	; (8002724 <MX_CAN3_Init+0xd4>)
 8002656:	4a34      	ldr	r2, [pc, #208]	; (8002728 <MX_CAN3_Init+0xd8>)
 8002658:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 800265a:	4b32      	ldr	r3, [pc, #200]	; (8002724 <MX_CAN3_Init+0xd4>)
 800265c:	2206      	movs	r2, #6
 800265e:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8002660:	4b30      	ldr	r3, [pc, #192]	; (8002724 <MX_CAN3_Init+0xd4>)
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002666:	4b2f      	ldr	r3, [pc, #188]	; (8002724 <MX_CAN3_Init+0xd4>)
 8002668:	2200      	movs	r2, #0
 800266a:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 800266c:	4b2d      	ldr	r3, [pc, #180]	; (8002724 <MX_CAN3_Init+0xd4>)
 800266e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002672:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002674:	4b2b      	ldr	r3, [pc, #172]	; (8002724 <MX_CAN3_Init+0xd4>)
 8002676:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800267a:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 800267c:	4b29      	ldr	r3, [pc, #164]	; (8002724 <MX_CAN3_Init+0xd4>)
 800267e:	2200      	movs	r2, #0
 8002680:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8002682:	4b28      	ldr	r3, [pc, #160]	; (8002724 <MX_CAN3_Init+0xd4>)
 8002684:	2200      	movs	r2, #0
 8002686:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8002688:	4b26      	ldr	r3, [pc, #152]	; (8002724 <MX_CAN3_Init+0xd4>)
 800268a:	2200      	movs	r2, #0
 800268c:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 800268e:	4b25      	ldr	r3, [pc, #148]	; (8002724 <MX_CAN3_Init+0xd4>)
 8002690:	2200      	movs	r2, #0
 8002692:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8002694:	4b23      	ldr	r3, [pc, #140]	; (8002724 <MX_CAN3_Init+0xd4>)
 8002696:	2200      	movs	r2, #0
 8002698:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 800269a:	4b22      	ldr	r3, [pc, #136]	; (8002724 <MX_CAN3_Init+0xd4>)
 800269c:	2200      	movs	r2, #0
 800269e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 80026a0:	4820      	ldr	r0, [pc, #128]	; (8002724 <MX_CAN3_Init+0xd4>)
 80026a2:	f001 ff5f 	bl	8004564 <HAL_CAN_Init>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 80026ac:	f001 f898 	bl	80037e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */
	// Starte CAN Bus
	if((HAL_CAN_Start(&hcan3)) != HAL_OK)
 80026b0:	481c      	ldr	r0, [pc, #112]	; (8002724 <MX_CAN3_Init+0xd4>)
 80026b2:	f002 f93f 	bl	8004934 <HAL_CAN_Start>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <MX_CAN3_Init+0x70>
	{
		// Fehler beim Starten des CAN-Busses
		Error_Handler();
 80026bc:	f001 f890 	bl	80037e0 <Error_Handler>
	}

	// Aktiviere Interrupts fuer CAN Bus
	if((HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_FULL)) != HAL_OK)
 80026c0:	2104      	movs	r1, #4
 80026c2:	4818      	ldr	r0, [pc, #96]	; (8002724 <MX_CAN3_Init+0xd4>)
 80026c4:	f002 fba8 	bl	8004e18 <HAL_CAN_ActivateNotification>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_CAN3_Init+0x82>
	{
		// Fehler in der Initialisierung des CAN Interrupts
		Error_Handler();
 80026ce:	f001 f887 	bl	80037e0 <Error_Handler>
	}

	// Filter Bank initialisieren um Daten zu empfangen
	// Akzeptiere alle CAN-Pakete
	sFilterConfig.FilterBank = 0;
 80026d2:	4b16      	ldr	r3, [pc, #88]	; (800272c <MX_CAN3_Init+0xdc>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80026d8:	4b14      	ldr	r3, [pc, #80]	; (800272c <MX_CAN3_Init+0xdc>)
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80026de:	4b13      	ldr	r3, [pc, #76]	; (800272c <MX_CAN3_Init+0xdc>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0111 << 5;
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <MX_CAN3_Init+0xdc>)
 80026e6:	f242 2220 	movw	r2, #8736	; 0x2220
 80026ea:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0;
 80026ec:	4b0f      	ldr	r3, [pc, #60]	; (800272c <MX_CAN3_Init+0xdc>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0111 << 5;
 80026f2:	4b0e      	ldr	r3, [pc, #56]	; (800272c <MX_CAN3_Init+0xdc>)
 80026f4:	f242 2220 	movw	r2, #8736	; 0x2220
 80026f8:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0;
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <MX_CAN3_Init+0xdc>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = 0;
 8002700:	4b0a      	ldr	r3, [pc, #40]	; (800272c <MX_CAN3_Init+0xdc>)
 8002702:	2200      	movs	r2, #0
 8002704:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <MX_CAN3_Init+0xdc>)
 8002708:	2201      	movs	r2, #1
 800270a:	621a      	str	r2, [r3, #32]

	// Filter Bank schreiben
	if((HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 800270c:	4907      	ldr	r1, [pc, #28]	; (800272c <MX_CAN3_Init+0xdc>)
 800270e:	4805      	ldr	r0, [pc, #20]	; (8002724 <MX_CAN3_Init+0xd4>)
 8002710:	f002 f824 	bl	800475c <HAL_CAN_ConfigFilter>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_CAN3_Init+0xce>
	{
		// Fehler beim konfigurieren der Filterbank fuer den CAN-Bus
		Error_Handler();
 800271a:	f001 f861 	bl	80037e0 <Error_Handler>
	}

  /* USER CODE END CAN3_Init 2 */

}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000200 	.word	0x20000200
 8002728:	40003400 	.word	0x40003400
 800272c:	20000188 	.word	0x20000188

08002730 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08e      	sub	sp, #56	; 0x38
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a58      	ldr	r2, [pc, #352]	; (80028b0 <HAL_CAN_MspInit+0x180>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d131      	bne.n	80027b6 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002752:	4b58      	ldr	r3, [pc, #352]	; (80028b4 <HAL_CAN_MspInit+0x184>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	3301      	adds	r3, #1
 8002758:	4a56      	ldr	r2, [pc, #344]	; (80028b4 <HAL_CAN_MspInit+0x184>)
 800275a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800275c:	4b55      	ldr	r3, [pc, #340]	; (80028b4 <HAL_CAN_MspInit+0x184>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d10b      	bne.n	800277c <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002764:	4b54      	ldr	r3, [pc, #336]	; (80028b8 <HAL_CAN_MspInit+0x188>)
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	4a53      	ldr	r2, [pc, #332]	; (80028b8 <HAL_CAN_MspInit+0x188>)
 800276a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800276e:	6413      	str	r3, [r2, #64]	; 0x40
 8002770:	4b51      	ldr	r3, [pc, #324]	; (80028b8 <HAL_CAN_MspInit+0x188>)
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002778:	623b      	str	r3, [r7, #32]
 800277a:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800277c:	4b4e      	ldr	r3, [pc, #312]	; (80028b8 <HAL_CAN_MspInit+0x188>)
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	4a4d      	ldr	r2, [pc, #308]	; (80028b8 <HAL_CAN_MspInit+0x188>)
 8002782:	f043 0308 	orr.w	r3, r3, #8
 8002786:	6313      	str	r3, [r2, #48]	; 0x30
 8002788:	4b4b      	ldr	r3, [pc, #300]	; (80028b8 <HAL_CAN_MspInit+0x188>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002794:	2303      	movs	r3, #3
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002798:	2302      	movs	r3, #2
 800279a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a0:	2303      	movs	r3, #3
 80027a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80027a4:	2309      	movs	r3, #9
 80027a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ac:	4619      	mov	r1, r3
 80027ae:	4843      	ldr	r0, [pc, #268]	; (80028bc <HAL_CAN_MspInit+0x18c>)
 80027b0:	f002 ff22 	bl	80055f8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 80027b4:	e078      	b.n	80028a8 <HAL_CAN_MspInit+0x178>
  else if(canHandle->Instance==CAN2)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a41      	ldr	r2, [pc, #260]	; (80028c0 <HAL_CAN_MspInit+0x190>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d13d      	bne.n	800283c <HAL_CAN_MspInit+0x10c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80027c0:	4b3d      	ldr	r3, [pc, #244]	; (80028b8 <HAL_CAN_MspInit+0x188>)
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	4a3c      	ldr	r2, [pc, #240]	; (80028b8 <HAL_CAN_MspInit+0x188>)
 80027c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027ca:	6413      	str	r3, [r2, #64]	; 0x40
 80027cc:	4b3a      	ldr	r3, [pc, #232]	; (80028b8 <HAL_CAN_MspInit+0x188>)
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	69bb      	ldr	r3, [r7, #24]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80027d8:	4b36      	ldr	r3, [pc, #216]	; (80028b4 <HAL_CAN_MspInit+0x184>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	3301      	adds	r3, #1
 80027de:	4a35      	ldr	r2, [pc, #212]	; (80028b4 <HAL_CAN_MspInit+0x184>)
 80027e0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80027e2:	4b34      	ldr	r3, [pc, #208]	; (80028b4 <HAL_CAN_MspInit+0x184>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d10b      	bne.n	8002802 <HAL_CAN_MspInit+0xd2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80027ea:	4b33      	ldr	r3, [pc, #204]	; (80028b8 <HAL_CAN_MspInit+0x188>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	4a32      	ldr	r2, [pc, #200]	; (80028b8 <HAL_CAN_MspInit+0x188>)
 80027f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027f4:	6413      	str	r3, [r2, #64]	; 0x40
 80027f6:	4b30      	ldr	r3, [pc, #192]	; (80028b8 <HAL_CAN_MspInit+0x188>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002802:	4b2d      	ldr	r3, [pc, #180]	; (80028b8 <HAL_CAN_MspInit+0x188>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	4a2c      	ldr	r2, [pc, #176]	; (80028b8 <HAL_CAN_MspInit+0x188>)
 8002808:	f043 0302 	orr.w	r3, r3, #2
 800280c:	6313      	str	r3, [r2, #48]	; 0x30
 800280e:	4b2a      	ldr	r3, [pc, #168]	; (80028b8 <HAL_CAN_MspInit+0x188>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800281a:	2360      	movs	r3, #96	; 0x60
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281e:	2302      	movs	r3, #2
 8002820:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002826:	2303      	movs	r3, #3
 8002828:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800282a:	2309      	movs	r3, #9
 800282c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002832:	4619      	mov	r1, r3
 8002834:	4823      	ldr	r0, [pc, #140]	; (80028c4 <HAL_CAN_MspInit+0x194>)
 8002836:	f002 fedf 	bl	80055f8 <HAL_GPIO_Init>
}
 800283a:	e035      	b.n	80028a8 <HAL_CAN_MspInit+0x178>
  else if(canHandle->Instance==CAN3)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a21      	ldr	r2, [pc, #132]	; (80028c8 <HAL_CAN_MspInit+0x198>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d130      	bne.n	80028a8 <HAL_CAN_MspInit+0x178>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8002846:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <HAL_CAN_MspInit+0x188>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	4a1b      	ldr	r2, [pc, #108]	; (80028b8 <HAL_CAN_MspInit+0x188>)
 800284c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002850:	6413      	str	r3, [r2, #64]	; 0x40
 8002852:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <HAL_CAN_MspInit+0x188>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285e:	4b16      	ldr	r3, [pc, #88]	; (80028b8 <HAL_CAN_MspInit+0x188>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	4a15      	ldr	r2, [pc, #84]	; (80028b8 <HAL_CAN_MspInit+0x188>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	6313      	str	r3, [r2, #48]	; 0x30
 800286a:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <HAL_CAN_MspInit+0x188>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	60bb      	str	r3, [r7, #8]
 8002874:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ACAN_RX_Pin|ACAN_TX_Pin;
 8002876:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002884:	2303      	movs	r3, #3
 8002886:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8002888:	230b      	movs	r3, #11
 800288a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002890:	4619      	mov	r1, r3
 8002892:	480e      	ldr	r0, [pc, #56]	; (80028cc <HAL_CAN_MspInit+0x19c>)
 8002894:	f002 feb0 	bl	80055f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 8002898:	2200      	movs	r2, #0
 800289a:	2100      	movs	r1, #0
 800289c:	2069      	movs	r0, #105	; 0x69
 800289e:	f002 fde2 	bl	8005466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 80028a2:	2069      	movs	r0, #105	; 0x69
 80028a4:	f002 fdfb 	bl	800549e <HAL_NVIC_EnableIRQ>
}
 80028a8:	bf00      	nop
 80028aa:	3738      	adds	r7, #56	; 0x38
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40006400 	.word	0x40006400
 80028b4:	20000228 	.word	0x20000228
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40020c00 	.word	0x40020c00
 80028c0:	40006800 	.word	0x40006800
 80028c4:	40020400 	.word	0x40020400
 80028c8:	40003400 	.word	0x40003400
 80028cc:	40020000 	.word	0x40020000

080028d0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08e      	sub	sp, #56	; 0x38
 80028d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	605a      	str	r2, [r3, #4]
 80028e0:	609a      	str	r2, [r3, #8]
 80028e2:	60da      	str	r2, [r3, #12]
 80028e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028e6:	4bb6      	ldr	r3, [pc, #728]	; (8002bc0 <MX_GPIO_Init+0x2f0>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	4ab5      	ldr	r2, [pc, #724]	; (8002bc0 <MX_GPIO_Init+0x2f0>)
 80028ec:	f043 0310 	orr.w	r3, r3, #16
 80028f0:	6313      	str	r3, [r2, #48]	; 0x30
 80028f2:	4bb3      	ldr	r3, [pc, #716]	; (8002bc0 <MX_GPIO_Init+0x2f0>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	623b      	str	r3, [r7, #32]
 80028fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028fe:	4bb0      	ldr	r3, [pc, #704]	; (8002bc0 <MX_GPIO_Init+0x2f0>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4aaf      	ldr	r2, [pc, #700]	; (8002bc0 <MX_GPIO_Init+0x2f0>)
 8002904:	f043 0304 	orr.w	r3, r3, #4
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4bad      	ldr	r3, [pc, #692]	; (8002bc0 <MX_GPIO_Init+0x2f0>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	61fb      	str	r3, [r7, #28]
 8002914:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002916:	4baa      	ldr	r3, [pc, #680]	; (8002bc0 <MX_GPIO_Init+0x2f0>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	4aa9      	ldr	r2, [pc, #676]	; (8002bc0 <MX_GPIO_Init+0x2f0>)
 800291c:	f043 0320 	orr.w	r3, r3, #32
 8002920:	6313      	str	r3, [r2, #48]	; 0x30
 8002922:	4ba7      	ldr	r3, [pc, #668]	; (8002bc0 <MX_GPIO_Init+0x2f0>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f003 0320 	and.w	r3, r3, #32
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800292e:	4ba4      	ldr	r3, [pc, #656]	; (8002bc0 <MX_GPIO_Init+0x2f0>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4aa3      	ldr	r2, [pc, #652]	; (8002bc0 <MX_GPIO_Init+0x2f0>)
 8002934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002938:	6313      	str	r3, [r2, #48]	; 0x30
 800293a:	4ba1      	ldr	r3, [pc, #644]	; (8002bc0 <MX_GPIO_Init+0x2f0>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002946:	4b9e      	ldr	r3, [pc, #632]	; (8002bc0 <MX_GPIO_Init+0x2f0>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	4a9d      	ldr	r2, [pc, #628]	; (8002bc0 <MX_GPIO_Init+0x2f0>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	6313      	str	r3, [r2, #48]	; 0x30
 8002952:	4b9b      	ldr	r3, [pc, #620]	; (8002bc0 <MX_GPIO_Init+0x2f0>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800295e:	4b98      	ldr	r3, [pc, #608]	; (8002bc0 <MX_GPIO_Init+0x2f0>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a97      	ldr	r2, [pc, #604]	; (8002bc0 <MX_GPIO_Init+0x2f0>)
 8002964:	f043 0302 	orr.w	r3, r3, #2
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b95      	ldr	r3, [pc, #596]	; (8002bc0 <MX_GPIO_Init+0x2f0>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002976:	4b92      	ldr	r3, [pc, #584]	; (8002bc0 <MX_GPIO_Init+0x2f0>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	4a91      	ldr	r2, [pc, #580]	; (8002bc0 <MX_GPIO_Init+0x2f0>)
 800297c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	4b8f      	ldr	r3, [pc, #572]	; (8002bc0 <MX_GPIO_Init+0x2f0>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800298e:	4b8c      	ldr	r3, [pc, #560]	; (8002bc0 <MX_GPIO_Init+0x2f0>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	4a8b      	ldr	r2, [pc, #556]	; (8002bc0 <MX_GPIO_Init+0x2f0>)
 8002994:	f043 0308 	orr.w	r3, r3, #8
 8002998:	6313      	str	r3, [r2, #48]	; 0x30
 800299a:	4b89      	ldr	r3, [pc, #548]	; (8002bc0 <MX_GPIO_Init+0x2f0>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 80029a6:	2200      	movs	r2, #0
 80029a8:	f248 0187 	movw	r1, #32903	; 0x8087
 80029ac:	4885      	ldr	r0, [pc, #532]	; (8002bc4 <MX_GPIO_Init+0x2f4>)
 80029ae:	f002 ffe7 	bl	8005980 <HAL_GPIO_WritePin>
                          |DIGITAL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_ON_Pin|WS2812_Pin, GPIO_PIN_RESET);
 80029b2:	2200      	movs	r2, #0
 80029b4:	f242 0108 	movw	r1, #8200	; 0x2008
 80029b8:	4883      	ldr	r0, [pc, #524]	; (8002bc8 <MX_GPIO_Init+0x2f8>)
 80029ba:	f002 ffe1 	bl	8005980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 80029be:	2200      	movs	r2, #0
 80029c0:	f24f 013c 	movw	r1, #61500	; 0xf03c
 80029c4:	4881      	ldr	r0, [pc, #516]	; (8002bcc <MX_GPIO_Init+0x2fc>)
 80029c6:	f002 ffdb 	bl	8005980 <HAL_GPIO_WritePin>
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 80029ca:	2200      	movs	r2, #0
 80029cc:	f647 0194 	movw	r1, #30868	; 0x7894
 80029d0:	487f      	ldr	r0, [pc, #508]	; (8002bd0 <MX_GPIO_Init+0x300>)
 80029d2:	f002 ffd5 	bl	8005980 <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 80029d6:	2200      	movs	r2, #0
 80029d8:	f64e 2188 	movw	r1, #60040	; 0xea88
 80029dc:	487d      	ldr	r0, [pc, #500]	; (8002bd4 <MX_GPIO_Init+0x304>)
 80029de:	f002 ffcf 	bl	8005980 <HAL_GPIO_WritePin>
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|RUECKWARNUNG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 80029e2:	2200      	movs	r2, #0
 80029e4:	f64e 610c 	movw	r1, #60940	; 0xee0c
 80029e8:	487b      	ldr	r0, [pc, #492]	; (8002bd8 <MX_GPIO_Init+0x308>)
 80029ea:	f002 ffc9 	bl	8005980 <HAL_GPIO_WritePin>
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_RESET);
 80029ee:	2200      	movs	r2, #0
 80029f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029f4:	4879      	ldr	r0, [pc, #484]	; (8002bdc <MX_GPIO_Init+0x30c>)
 80029f6:	f002 ffc3 	bl	8005980 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 80029fa:	f248 0387 	movw	r3, #32903	; 0x8087
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
                          |DIGITAL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a00:	2301      	movs	r3, #1
 8002a02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a10:	4619      	mov	r1, r3
 8002a12:	486c      	ldr	r0, [pc, #432]	; (8002bc4 <MX_GPIO_Init+0x2f4>)
 8002a14:	f002 fdf0 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ECO_Pin|BC_DOWN_IN_Pin|DURCHFLUSS_Pin|BUTTON2_Pin
 8002a18:	f647 7378 	movw	r3, #32632	; 0x7f78
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
                          |KICKDOWN_Pin|LEERLAUF_Pin|KUPPLUNG_NO_Pin|BREMSE_NC_Pin
                          |BREMSE_NO_Pin|SENSE_SDC_AKKU_Pin|SENSE_SDC_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4865      	ldr	r0, [pc, #404]	; (8002bc4 <MX_GPIO_Init+0x2f4>)
 8002a2e:	f002 fde3 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 8002a32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a40:	2300      	movs	r3, #0
 8002a42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8002a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a48:	4619      	mov	r1, r3
 8002a4a:	485f      	ldr	r0, [pc, #380]	; (8002bc8 <MX_GPIO_Init+0x2f8>)
 8002a4c:	f002 fdd4 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8002a50:	f64d 7347 	movw	r3, #57159	; 0xdf47
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|SD_SW_Pin|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a56:	2303      	movs	r3, #3
 8002a58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a62:	4619      	mov	r1, r3
 8002a64:	4858      	ldr	r0, [pc, #352]	; (8002bc8 <MX_GPIO_Init+0x2f8>)
 8002a66:	f002 fdc7 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|ECON_Pin|RECUPERATION_Pin;
 8002a6a:	f640 0303 	movw	r3, #2051	; 0x803
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a70:	2300      	movs	r3, #0
 8002a72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4853      	ldr	r0, [pc, #332]	; (8002bcc <MX_GPIO_Init+0x2fc>)
 8002a80:	f002 fdba 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 8002a84:	f24f 033c 	movw	r3, #61500	; 0xf03c
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a92:	2300      	movs	r3, #0
 8002a94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	484b      	ldr	r0, [pc, #300]	; (8002bcc <MX_GPIO_Init+0x2fc>)
 8002a9e:	f002 fdab 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PF10 */
  GPIO_InitStruct.Pin = SPI5_CS_Pin|SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin
 8002aa2:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4845      	ldr	r0, [pc, #276]	; (8002bcc <MX_GPIO_Init+0x2fc>)
 8002ab8:	f002 fd9e 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS2812_Pin;
 8002abc:	2308      	movs	r3, #8
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 8002acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	483d      	ldr	r0, [pc, #244]	; (8002bc8 <MX_GPIO_Init+0x2f8>)
 8002ad4:	f002 fd90 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|EMERGENCY_RUN_Pin|HW_WAKE_Pin|OUTA_Pin
 8002ad8:	f640 6307 	movw	r3, #3591	; 0xe07
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTB_Pin|BC_UP_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aea:	4619      	mov	r1, r3
 8002aec:	483b      	ldr	r0, [pc, #236]	; (8002bdc <MX_GPIO_Init+0x30c>)
 8002aee:	f002 fd83 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 8002af2:	f647 0394 	movw	r3, #30868	; 0x7894
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af8:	2301      	movs	r3, #1
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b00:	2300      	movs	r3, #0
 8002b02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4831      	ldr	r0, [pc, #196]	; (8002bd0 <MX_GPIO_Init+0x300>)
 8002b0c:	f002 fd74 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DCDC_INSTRUCTION_Pin|DCDC_FAULT_Pin|ASR_IN1_Pin|GRA1_Pin
 8002b10:	f241 13f3 	movw	r3, #4595	; 0x11f3
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
                          |GRA2_Pin|GRA3_Pin|GRA4_Pin|BC_RESET_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b16:	2300      	movs	r3, #0
 8002b18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b22:	4619      	mov	r1, r3
 8002b24:	482c      	ldr	r0, [pc, #176]	; (8002bd8 <MX_GPIO_Init+0x308>)
 8002b26:	f002 fd67 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSE_SDC_BTB_Pin|BAMOCAR_IN2_Pin;
 8002b2a:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b30:	2300      	movs	r3, #0
 8002b32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4824      	ldr	r0, [pc, #144]	; (8002bd0 <MX_GPIO_Init+0x300>)
 8002b40:	f002 fd5a 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KL15_Pin|ANLASSER_Pin|BAMOCAR_IN1_Pin|ASR_IN2_Pin;
 8002b44:	f241 5310 	movw	r3, #5392	; 0x1510
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b56:	4619      	mov	r1, r3
 8002b58:	481e      	ldr	r0, [pc, #120]	; (8002bd4 <MX_GPIO_Init+0x304>)
 8002b5a:	f002 fd4d 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 8002b5e:	f64e 2388 	movw	r3, #60040	; 0xea88
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|RUECKWARNUNG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b64:	2301      	movs	r3, #1
 8002b66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b74:	4619      	mov	r1, r3
 8002b76:	4817      	ldr	r0, [pc, #92]	; (8002bd4 <MX_GPIO_Init+0x304>)
 8002b78:	f002 fd3e 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 8002b7c:	f64e 630c 	movw	r3, #60940	; 0xee0c
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b82:	2301      	movs	r3, #1
 8002b84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b92:	4619      	mov	r1, r3
 8002b94:	4810      	ldr	r0, [pc, #64]	; (8002bd8 <MX_GPIO_Init+0x308>)
 8002b96:	f002 fd2f 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 8002b9a:	2380      	movs	r3, #128	; 0x80
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 8002ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002baa:	4619      	mov	r1, r3
 8002bac:	4806      	ldr	r0, [pc, #24]	; (8002bc8 <MX_GPIO_Init+0x2f8>)
 8002bae:	f002 fd23 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OELSTAND_TEMP_Pin;
 8002bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	e00f      	b.n	8002be0 <MX_GPIO_Init+0x310>
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	40020800 	.word	0x40020800
 8002bcc:	40021400 	.word	0x40021400
 8002bd0:	40020400 	.word	0x40020400
 8002bd4:	40020c00 	.word	0x40020c00
 8002bd8:	40021800 	.word	0x40021800
 8002bdc:	40020000 	.word	0x40020000
 8002be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be2:	2300      	movs	r3, #0
 8002be4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OELSTAND_TEMP_GPIO_Port, &GPIO_InitStruct);
 8002be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bea:	4619      	mov	r1, r3
 8002bec:	480f      	ldr	r0, [pc, #60]	; (8002c2c <MX_GPIO_Init+0x35c>)
 8002bee:	f002 fd03 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CMD_Pin;
 8002bf2:	2304      	movs	r3, #4
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8002bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c02:	4619      	mov	r1, r3
 8002c04:	480a      	ldr	r0, [pc, #40]	; (8002c30 <MX_GPIO_Init+0x360>)
 8002c06:	f002 fcf7 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002c0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c10:	2303      	movs	r3, #3
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4805      	ldr	r0, [pc, #20]	; (8002c34 <MX_GPIO_Init+0x364>)
 8002c20:	f002 fcea 	bl	80055f8 <HAL_GPIO_Init>

}
 8002c24:	bf00      	nop
 8002c26:	3738      	adds	r7, #56	; 0x38
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40020000 	.word	0x40020000
 8002c30:	40020c00 	.word	0x40020c00
 8002c34:	40020400 	.word	0x40020400

08002c38 <__NVIC_SystemReset>:
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c3c:	f3bf 8f4f 	dsb	sy
}
 8002c40:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002c42:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <__NVIC_SystemReset+0x24>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002c4a:	4904      	ldr	r1, [pc, #16]	; (8002c5c <__NVIC_SystemReset+0x24>)
 8002c4c:	4b04      	ldr	r3, [pc, #16]	; (8002c60 <__NVIC_SystemReset+0x28>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c52:	f3bf 8f4f 	dsb	sy
}
 8002c56:	bf00      	nop
    __NOP();
 8002c58:	bf00      	nop
 8002c5a:	e7fd      	b.n	8002c58 <__NVIC_SystemReset+0x20>
 8002c5c:	e000ed00 	.word	0xe000ed00
 8002c60:	05fa0004 	.word	0x05fa0004

08002c64 <ITM_SendChar>:
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002c6c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002c70:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d013      	beq.n	8002ca4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002c7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002c80:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002c84:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00b      	beq.n	8002ca4 <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 8002c8c:	e000      	b.n	8002c90 <ITM_SendChar+0x2c>
      __NOP();
 8002c8e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002c90:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f9      	beq.n	8002c8e <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002c9a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	701a      	strb	r2, [r3, #0]
  return (ch);
 8002ca4:	687b      	ldr	r3, [r7, #4]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <startComms>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void startComms(void)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	af00      	add	r7, sp, #0
   // Start DIS Comms
    initDIS();
 8002cb6:	f7fd ff79 	bl	8000bac <initDIS>
    claimScreen();
 8002cba:	f7fe f87b 	bl	8000db4 <claimScreen>
    drawFrame();
 8002cbe:	f7fe f8d9 	bl	8000e74 <drawFrame>
}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cc8:	b5b0      	push	{r4, r5, r7, lr}
 8002cca:	b0ce      	sub	sp, #312	; 0x138
 8002ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t ADC_VAL[10] = {0};
 8002cce:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	605a      	str	r2, [r3, #4]
 8002cd8:	609a      	str	r2, [r3, #8]
 8002cda:	60da      	str	r2, [r3, #12]
 8002cdc:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cde:	f000 ff4a 	bl	8003b76 <HAL_Init>

  /* USER CODE BEGIN Init */

	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[6] = {0}, InData[6] = {0}, AnalogData[8] = {0}, TempData[8] = {0};
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002d00:	2300      	movs	r3, #0
 8002d02:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002d06:	2300      	movs	r3, #0
 8002d08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	uint8_t status, tmp[4], task = 0, TxRadioData[8] = {0};
 8002d12:	2300      	movs	r3, #0
 8002d14:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	uint16_t count = 0, gas_adc = 0, gas_mean = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
 8002d30:	2300      	movs	r3, #0
 8002d32:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
  	uint32_t lastcan = 0, lastsendcan = 0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
//  	uint8_t nav = 0, a_nav[8], nav_count = 0;

  	// Erstelle Can-Nachrichten
    // Sendenachricht erstellen
  	CAN_TxHeaderTypeDef TxMessage = {0x123, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8002d42:	4bb0      	ldr	r3, [pc, #704]	; (8003004 <main+0x33c>)
 8002d44:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8002d48:	461d      	mov	r5, r3
 8002d4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002d52:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet digitale Ausgaenge erstellen
  	CAN_TxHeaderTypeDef TxOutput = {MOTOR_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 6, DISABLE};
 8002d56:	4bac      	ldr	r3, [pc, #688]	; (8003008 <main+0x340>)
 8002d58:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8002d5c:	461d      	mov	r5, r3
 8002d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002d66:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet digitale Eingaenge erstellen
  	CAN_TxHeaderTypeDef TxInput = {MOTOR_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 6, DISABLE};
 8002d6a:	4ba8      	ldr	r3, [pc, #672]	; (800300c <main+0x344>)
 8002d6c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8002d70:	461d      	mov	r5, r3
 8002d72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002d7a:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet Motor1 erstellen
  	CAN_TxHeaderTypeDef TxMotor1 = {MOTOR_CAN_DREHZAHL, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8002d7e:	4ba4      	ldr	r3, [pc, #656]	; (8003010 <main+0x348>)
 8002d80:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8002d84:	461d      	mov	r5, r3
 8002d86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d8a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002d8e:	e884 0003 	stmia.w	r4, {r0, r1}
  	// Sendenachricht Motorsteuergeraet an Bamocar erstellen
  	CAN_TxHeaderTypeDef TxBamocar = {BAMOCAR_TX_ID, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 8002d92:	4ba0      	ldr	r3, [pc, #640]	; (8003014 <main+0x34c>)
 8002d94:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8002d98:	461d      	mov	r5, r3
 8002d9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d9e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002da2:	e884 0003 	stmia.w	r4, {r0, r1}
  	// Sendenachricht Lenkgetriebe an Kombi erstellen, Simulation
  	CAN_TxHeaderTypeDef TxLenkrad = {0x3D0, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 8002da6:	4b9c      	ldr	r3, [pc, #624]	; (8003018 <main+0x350>)
 8002da8:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002dac:	461d      	mov	r5, r3
 8002dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002db2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002db6:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet analoge Eingaenge erstellen
  	CAN_TxHeaderTypeDef TxAnalog = {MOTOR_CAN_ANALOG_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8002dba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002dbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002dc2:	4a96      	ldr	r2, [pc, #600]	; (800301c <main+0x354>)
 8002dc4:	461c      	mov	r4, r3
 8002dc6:	4615      	mov	r5, r2
 8002dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dcc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002dd0:	e884 0003 	stmia.w	r4, {r0, r1}
  	// Sendenachricht Motorsteuergeraet Temperatur Eingaenge erstellen
  	CAN_TxHeaderTypeDef TxTemperatur = {MOTOR_CAN_TEMPERATUR, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8002dd4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002dd8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002ddc:	4a90      	ldr	r2, [pc, #576]	; (8003020 <main+0x358>)
 8002dde:	461c      	mov	r4, r3
 8002de0:	4615      	mov	r5, r2
 8002de2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002de6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002dea:	e884 0003 	stmia.w	r4, {r0, r1}
  	// Sendenachricht Navi
//  	CAN_TxHeaderTypeDef TxNav = {0x6C0, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
  	CAN_TxHeaderTypeDef TxRadio = {0x661, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8002dee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002df2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002df6:	4a8b      	ldr	r2, [pc, #556]	; (8003024 <main+0x35c>)
 8002df8:	461c      	mov	r4, r3
 8002dfa:	4615      	mov	r5, r2
 8002dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002e04:	e884 0003 	stmia.w	r4, {r0, r1}
//  	CAN_TxHeaderTypeDef TxRing = {0x436, 0, CAN_RTR_DATA, CAN_ID_STD, 6, DISABLE};

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e08:	f000 fb66 	bl	80034d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e0c:	f7ff fd60 	bl	80028d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002e10:	f000 fdf2 	bl	80039f8 <MX_USART2_UART_Init>
  MX_CAN3_Init();
 8002e14:	f7ff fc1c 	bl	8002650 <MX_CAN3_Init>
  MX_ADC1_Init();
 8002e18:	f7ff fa8a 	bl	8002330 <MX_ADC1_Init>
  MX_TIM6_Init();
 8002e1c:	f000 fd90 	bl	8003940 <MX_TIM6_Init>
  MX_CAN1_Init();
 8002e20:	f7ff fb4c 	bl	80024bc <MX_CAN1_Init>
  MX_CAN2_Init();
 8002e24:	f7ff fbb0 	bl	8002588 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */

  // ITM HCLK
  ITM_SendChar('H');
 8002e28:	2048      	movs	r0, #72	; 0x48
 8002e2a:	f7ff ff1b 	bl	8002c64 <ITM_SendChar>
  ITM_SendChar('a');
 8002e2e:	2061      	movs	r0, #97	; 0x61
 8002e30:	f7ff ff18 	bl	8002c64 <ITM_SendChar>
  ITM_SendChar('l');
 8002e34:	206c      	movs	r0, #108	; 0x6c
 8002e36:	f7ff ff15 	bl	8002c64 <ITM_SendChar>
  ITM_SendChar('l');
 8002e3a:	206c      	movs	r0, #108	; 0x6c
 8002e3c:	f7ff ff12 	bl	8002c64 <ITM_SendChar>
  ITM_SendChar('o');
 8002e40:	206f      	movs	r0, #111	; 0x6f
 8002e42:	f7ff ff0f 	bl	8002c64 <ITM_SendChar>
  ITM_SendChar(' ');
 8002e46:	2020      	movs	r0, #32
 8002e48:	f7ff ff0c 	bl	8002c64 <ITM_SendChar>
  	// Start Timer 6 Interrupt
  	HAL_TIM_Base_Start_IT(&htim6);
 8002e4c:	4876      	ldr	r0, [pc, #472]	; (8003028 <main+0x360>)
 8002e4e:	f003 ff2f 	bl	8006cb0 <HAL_TIM_Base_Start_IT>
  	HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer[uart_count], 1);
 8002e52:	4b76      	ldr	r3, [pc, #472]	; (800302c <main+0x364>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	4b75      	ldr	r3, [pc, #468]	; (8003030 <main+0x368>)
 8002e5a:	4413      	add	r3, r2
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4874      	ldr	r0, [pc, #464]	; (8003034 <main+0x36c>)
 8002e62:	f004 fb02 	bl	800746a <HAL_UART_Receive_IT>

  	// Schreibe Resetquelle auf die Konsole
#ifdef DEBUG
	printResetSource(readResetSource());
 8002e66:	f7fe fa25 	bl	80012b4 <readResetSource>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fe fa73 	bl	8001358 <printResetSource>

  	// Teste serielle Schnittstelle
  	#define TEST_STRING_UART	"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
  	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 8002e72:	213a      	movs	r1, #58	; 0x3a
 8002e74:	4870      	ldr	r0, [pc, #448]	; (8003038 <main+0x370>)
 8002e76:	f7fd fca3 	bl	80007c0 <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 8002e7a:	f7fe f9f1 	bl	8001260 <collectSystemInfo>
#endif

	// Leds Testen
  	testPCB_Leds();
 8002e7e:	f7ff f89f 	bl	8001fc0 <testPCB_Leds>
	testCockpit_Leds();
 8002e82:	f7ff f8db 	bl	800203c <testCockpit_Leds>

  	// Testen der Versorgungsspannung am Shutdown-Circuit
  	testSDC();
 8002e86:	f7ff f987 	bl	8002198 <testSDC>

  	// Alle Fehler Cockpit loeschen
  	cockpit_default();
 8002e8a:	f7ff f93b 	bl	8002104 <cockpit_default>

  	// Lese alle Eingaenge
  	readall_inputs();
 8002e8e:	f7fe fe35 	bl	8001afc <readall_inputs>

    // Sendenachricht 0x123 mit Dummy-Daten fuellen
  	for (uint8_t j = 0; j < 8; j++)
 8002e92:	2300      	movs	r3, #0
 8002e94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 8002e98:	e00f      	b.n	8002eba <main+0x1f2>
  		TxData[j] = (j + 1);
 8002e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e9e:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8002ea2:	3201      	adds	r2, #1
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002eaa:	443b      	add	r3, r7
 8002eac:	f803 2c34 	strb.w	r2, [r3, #-52]
  	for (uint8_t j = 0; j < 8; j++)
 8002eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 8002eba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ebe:	2b07      	cmp	r3, #7
 8002ec0:	d9eb      	bls.n	8002e9a <main+0x1d2>

  	// Starte While-Schleife
#define MAINWHILE				"\nStarte While Schleife\n"
  	uartTransmit(MAINWHILE, sizeof(MAINWHILE));
 8002ec2:	2118      	movs	r1, #24
 8002ec4:	485d      	ldr	r0, [pc, #372]	; (800303c <main+0x374>)
 8002ec6:	f7fd fc7b 	bl	80007c0 <uartTransmit>

  	startComms();
 8002eca:	f7ff fef2 	bl	8002cb2 <startComms>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	switch (UART2_msg[0])
 8002ece:	4b5c      	ldr	r3, [pc, #368]	; (8003040 <main+0x378>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d014      	beq.n	8002f00 <main+0x238>
 8002ed6:	2b03      	cmp	r3, #3
 8002ed8:	dc16      	bgt.n	8002f08 <main+0x240>
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d002      	beq.n	8002ee4 <main+0x21c>
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d008      	beq.n	8002ef4 <main+0x22c>
			break;
	  		case 3:
	  			UART2_msg[0] = 0;
			break;
			default:
			break;
 8002ee2:	e011      	b.n	8002f08 <main+0x240>
				HAL_UART_Transmit(&huart2, (uint8_t*)"\nSystem Reset\r\n", 15, 100);
 8002ee4:	2364      	movs	r3, #100	; 0x64
 8002ee6:	220f      	movs	r2, #15
 8002ee8:	4956      	ldr	r1, [pc, #344]	; (8003044 <main+0x37c>)
 8002eea:	4852      	ldr	r0, [pc, #328]	; (8003034 <main+0x36c>)
 8002eec:	f004 fa3a 	bl	8007364 <HAL_UART_Transmit>
				NVIC_SystemReset();
 8002ef0:	f7ff fea2 	bl	8002c38 <__NVIC_SystemReset>
	  			UART2_msg[0] = 0;
 8002ef4:	4b52      	ldr	r3, [pc, #328]	; (8003040 <main+0x378>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	701a      	strb	r2, [r3, #0]
	  			drawFrame();
 8002efa:	f7fd ffbb 	bl	8000e74 <drawFrame>
			break;
 8002efe:	e004      	b.n	8002f0a <main+0x242>
	  			UART2_msg[0] = 0;
 8002f00:	4b4f      	ldr	r3, [pc, #316]	; (8003040 <main+0x378>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]
			break;
 8002f06:	e000      	b.n	8002f0a <main+0x242>
			break;
 8002f08:	bf00      	nop
		}
	  	// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 8002f0a:	4b4f      	ldr	r3, [pc, #316]	; (8003048 <main+0x380>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d10a      	bne.n	8002f2a <main+0x262>
		{
			count++;																	// Zaehler count hochzaehlen
 8002f14:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8002f18:	3301      	adds	r3, #1
 8002f1a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
			millisekunden_flag_1 = 0;													// Setze Millisekunden-Flag zurueck
 8002f1e:	4b4a      	ldr	r3, [pc, #296]	; (8003048 <main+0x380>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	701a      	strb	r2, [r3, #0]

			// Setze Flag start, nur wenn millisekunden Flag gesetzt war
			task = 1;
 8002f24:	2301      	movs	r3, #1
 8002f26:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
		}

		// PWM Oelstandsensor Kombiinstrument ausgeben
		pwm_oelstand(count);
 8002f2a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff f8b2 	bl	8002098 <pwm_oelstand>

		// Task wird alle 20 Millisekunden ausgefuehrt
		if (((count % 20) == 0) && (task == 1))
 8002f34:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 8002f38:	4b44      	ldr	r3, [pc, #272]	; (800304c <main+0x384>)
 8002f3a:	fba3 1302 	umull	r1, r3, r3, r2
 8002f3e:	0919      	lsrs	r1, r3, #4
 8002f40:	460b      	mov	r3, r1
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d126      	bne.n	8002f9e <main+0x2d6>
 8002f50:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d122      	bne.n	8002f9e <main+0x2d6>
		{
			// Sende Nachricht Motor1
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMotor1, motor1.output, (uint32_t *)CAN_TX_MAILBOX0);
 8002f58:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	4a3c      	ldr	r2, [pc, #240]	; (8003050 <main+0x388>)
 8002f60:	483c      	ldr	r0, [pc, #240]	; (8003054 <main+0x38c>)
 8002f62:	f001 fd2b 	bl	80049bc <HAL_CAN_AddTxMessage>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 8002f6c:	bf00      	nop
 8002f6e:	2101      	movs	r1, #1
 8002f70:	4838      	ldr	r0, [pc, #224]	; (8003054 <main+0x38c>)
 8002f72:	f001 fdf3 	bl	8004b5c <HAL_CAN_IsTxMessagePending>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d0f8      	beq.n	8002f6e <main+0x2a6>
			tmp[0] = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
			tmp[1] = 1;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1

			status = HAL_CAN_AddTxMessage(&hcan3, &TxLenkrad, tmp, (uint32_t *)CAN_TX_MAILBOX0);
 8002f88:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002f8c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002f90:	2301      	movs	r3, #1
 8002f92:	4830      	ldr	r0, [pc, #192]	; (8003054 <main+0x38c>)
 8002f94:	f001 fd12 	bl	80049bc <HAL_CAN_AddTxMessage>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
			//hal_error(status);
		}

		// Task wird alle 100 Millisekunden ausgefuehrt
		if (((count % 100) == 0) && (task == 1))
 8002f9e:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8002fa2:	4a2d      	ldr	r2, [pc, #180]	; (8003058 <main+0x390>)
 8002fa4:	fba2 1203 	umull	r1, r2, r2, r3
 8002fa8:	0952      	lsrs	r2, r2, #5
 8002faa:	2164      	movs	r1, #100	; 0x64
 8002fac:	fb01 f202 	mul.w	r2, r1, r2
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d170      	bne.n	800309a <main+0x3d2>
 8002fb8:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d16c      	bne.n	800309a <main+0x3d2>
		{
			// alle Inputs einlesen
			readall_inputs();
 8002fc0:	f7fe fd9c 	bl	8001afc <readall_inputs>

			// Anlasser abfragen
			readAnlasser();
 8002fc4:	f7fe ffc8 	bl	8001f58 <readAnlasser>

			// Bremse pruefen
			readBrake();
 8002fc8:	f7ff f986 	bl	80022d8 <readBrake>

			// Gaspedal pruefen
			gas_adc = readTrottle();
 8002fcc:	f7ff f910 	bl	80021f0 <readTrottle>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124

			// Abfrage ob Mittelwertbildung
			if (gas_adc > 0)															// Wenn Gaspedal Plausible dann Mittelwertbildung
 8002fd6:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d040      	beq.n	8003060 <main+0x398>
			{
				// Mittelwert bilden (https://nestedsoftware.com/2018/03/20/calculating-a-moving-average-on-streaming-data-5a7k.22879.html)
				// Mittelwertbildung aus 10 Werten (Weniger die 10 verkleineren, Mehr die 10 vergroeßern)
				gas_mean = (gas_mean + ((gas_adc - gas_mean)/10));
 8002fde:	f8b7 2124 	ldrh.w	r2, [r7, #292]	; 0x124
 8002fe2:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	4a1c      	ldr	r2, [pc, #112]	; (800305c <main+0x394>)
 8002fea:	fb82 1203 	smull	r1, r2, r2, r3
 8002fee:	1092      	asrs	r2, r2, #2
 8002ff0:	17db      	asrs	r3, r3, #31
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
 8003000:	e031      	b.n	8003066 <main+0x39e>
 8003002:	bf00      	nop
 8003004:	08008fd0 	.word	0x08008fd0
 8003008:	08008fe8 	.word	0x08008fe8
 800300c:	08009000 	.word	0x08009000
 8003010:	08009018 	.word	0x08009018
 8003014:	08009030 	.word	0x08009030
 8003018:	08009048 	.word	0x08009048
 800301c:	08009060 	.word	0x08009060
 8003020:	08009078 	.word	0x08009078
 8003024:	08009090 	.word	0x08009090
 8003028:	20000278 	.word	0x20000278
 800302c:	20000260 	.word	0x20000260
 8003030:	20000248 	.word	0x20000248
 8003034:	200002c4 	.word	0x200002c4
 8003038:	08008f30 	.word	0x08008f30
 800303c:	08008f6c 	.word	0x08008f6c
 8003040:	20000254 	.word	0x20000254
 8003044:	08008f84 	.word	0x08008f84
 8003048:	2000026c 	.word	0x2000026c
 800304c:	cccccccd 	.word	0xcccccccd
 8003050:	20000270 	.word	0x20000270
 8003054:	20000200 	.word	0x20000200
 8003058:	51eb851f 	.word	0x51eb851f
 800305c:	66666667 	.word	0x66666667
			}
			else																		// Wenn Gaspedal unplausible oder Kupplung getreten
			{
				gas_mean = 0;
 8003060:	2300      	movs	r3, #0
 8003062:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
			}

			// Daten in Bamocarformat umwandeln
			tmp[0] = 0x90;
 8003066:	2390      	movs	r3, #144	; 0x90
 8003068:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
			tmp[1] = (gas_mean);
 800306c:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8003070:	b2db      	uxtb	r3, r3
 8003072:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
			tmp[2] = ((gas_mean) >> 8);
 8003076:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 800307a:	0a1b      	lsrs	r3, r3, #8
 800307c:	b29b      	uxth	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

			// Drehmoment an Bamocar senden
			status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
 8003084:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8003088:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800308c:	2301      	movs	r3, #1
 800308e:	48ca      	ldr	r0, [pc, #808]	; (80033b8 <main+0x6f0>)
 8003090:	f001 fc94 	bl	80049bc <HAL_CAN_AddTxMessage>
 8003094:	4603      	mov	r3, r0
 8003096:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
			//hal_error(status);
		}

		// Task wird alle 200 Millisekunden ausgefuehrt
		if (((count % 200) == 0) && (task == 1))
 800309a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800309e:	4ac7      	ldr	r2, [pc, #796]	; (80033bc <main+0x6f4>)
 80030a0:	fba2 1203 	umull	r1, r2, r2, r3
 80030a4:	0992      	lsrs	r2, r2, #6
 80030a6:	21c8      	movs	r1, #200	; 0xc8
 80030a8:	fb01 f202 	mul.w	r2, r1, r2
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f040 812a 	bne.w	800330a <main+0x642>
 80030b6:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	f040 8125 	bne.w	800330a <main+0x642>
		{
			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 80030c0:	4bbf      	ldr	r3, [pc, #764]	; (80033c0 <main+0x6f8>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
			OutData[1] = highcurrent_out.high_out;
 80030c8:	4bbe      	ldr	r3, [pc, #760]	; (80033c4 <main+0x6fc>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
			OutData[2] = (leuchten_out.ledoutput >> 8);
 80030d0:	4bbd      	ldr	r3, [pc, #756]	; (80033c8 <main+0x700>)
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	0a1b      	lsrs	r3, r3, #8
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
			OutData[3] = leuchten_out.ledoutput;
 80030de:	4bba      	ldr	r3, [pc, #744]	; (80033c8 <main+0x700>)
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
			OutData[4] = komfort_out.komfortoutput;
 80030e8:	4bb8      	ldr	r3, [pc, #736]	; (80033cc <main+0x704>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
			OutData[5] ++;
 80030f0:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 80030f4:	3301      	adds	r3, #1
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101

			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX0);
 80030fc:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8003100:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003104:	2301      	movs	r3, #1
 8003106:	48ac      	ldr	r0, [pc, #688]	; (80033b8 <main+0x6f0>)
 8003108:	f001 fc58 	bl	80049bc <HAL_CAN_AddTxMessage>
 800310c:	4603      	mov	r3, r0
 800310e:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
			//hal_error(status);

			// ADC-Werte einlesen Bremse und Temperaturen
			ADC_VAL[0] = ADC_Bremsdruck();
 8003112:	f7fe fa03 	bl	800151c <ADC_Bremsdruck>
 8003116:	4603      	mov	r3, r0
 8003118:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			ADC_VAL[1] = ADC_Bremsdrucktemperatur();
 800311c:	f7fe fb98 	bl	8001850 <ADC_Bremsdrucktemperatur>
 8003120:	4603      	mov	r3, r0
 8003122:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			ADC_VAL[2] = ADC_STMTemperatur();
 8003126:	f7fe fbcb 	bl	80018c0 <ADC_STMTemperatur>
 800312a:	4603      	mov	r3, r0
 800312c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			ADC_VAL[3] = ADC_PCBTemperatur();
 8003130:	f7fe fae6 	bl	8001700 <ADC_PCBTemperatur>
 8003134:	4603      	mov	r3, r0
 8003136:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] ++;
 800313a:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 800313e:	3301      	adds	r3, #1
 8003140:	b2db      	uxtb	r3, r3
 8003142:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
			InData[1] = (system_in.systeminput >> 8);
 8003146:	4ba2      	ldr	r3, [pc, #648]	; (80033d0 <main+0x708>)
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	0a1b      	lsrs	r3, r3, #8
 800314c:	b29b      	uxth	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
			InData[2] = system_in.systeminput;
 8003154:	4b9e      	ldr	r3, [pc, #632]	; (80033d0 <main+0x708>)
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
			InData[3] = sdc_in.sdcinput;
 800315e:	4b9d      	ldr	r3, [pc, #628]	; (80033d4 <main+0x70c>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
			InData[4] = (komfort_in.komfortinput >> 8);
 8003166:	4b9c      	ldr	r3, [pc, #624]	; (80033d8 <main+0x710>)
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	0a1b      	lsrs	r3, r3, #8
 800316c:	b29b      	uxth	r3, r3
 800316e:	b2db      	uxtb	r3, r3
 8003170:	f887 30f8 	strb.w	r3, [r7, #248]	; 0xf8
			InData[5] = komfort_in.komfortinput;
 8003174:	4b98      	ldr	r3, [pc, #608]	; (80033d8 <main+0x710>)
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	b2db      	uxtb	r3, r3
 800317a:	f887 30f9 	strb.w	r3, [r7, #249]	; 0xf9

			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 800317e:	bf00      	nop
 8003180:	2101      	movs	r1, #1
 8003182:	488d      	ldr	r0, [pc, #564]	; (80033b8 <main+0x6f0>)
 8003184:	f001 fcea 	bl	8004b5c <HAL_CAN_IsTxMessagePending>
 8003188:	4603      	mov	r3, r0
 800318a:	2b01      	cmp	r3, #1
 800318c:	d0f8      	beq.n	8003180 <main+0x4b8>
			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX0);
 800318e:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8003192:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003196:	2301      	movs	r3, #1
 8003198:	4887      	ldr	r0, [pc, #540]	; (80033b8 <main+0x6f0>)
 800319a:	f001 fc0f 	bl	80049bc <HAL_CAN_AddTxMessage>
 800319e:	4603      	mov	r3, r0
 80031a0:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
			//hal_error(status);

			// ADC-Werte einlesen Navi, Klima, KL15
			ADC_VAL[4] = ADC_KL15();
 80031a4:	f7fe fa04 	bl	80015b0 <ADC_KL15>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
			ADC_VAL[5] = ADC_Klimaflap();
 80031ae:	f7fe fa6f 	bl	8001690 <ADC_Klimaflap>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
			ADC_VAL[6] = ADC_Info();
 80031b8:	f7fe fb12 	bl	80017e0 <ADC_Info>
 80031bc:	4603      	mov	r3, r0
 80031be:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			ADC_VAL[7] = ADC_Return();
 80031c2:	f7fe fad5 	bl	8001770 <ADC_Return>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a

			// ADC-Werte umwandeln
			AnalogData[0] = ADC_VAL[4];
 80031cc:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec
			AnalogData[1] = (ADC_VAL[4] >> 8) | (ADC_VAL[0] << 4);
 80031d6:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80031da:	0a1b      	lsrs	r3, r3, #8
 80031dc:	b29b      	uxth	r3, r3
 80031de:	b25a      	sxtb	r2, r3
 80031e0:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	b25b      	sxtb	r3, r3
 80031e8:	4313      	orrs	r3, r2
 80031ea:	b25b      	sxtb	r3, r3
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
			AnalogData[2] = (ADC_VAL[0] >> 4);
 80031f2:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
			AnalogData[3] = ADC_VAL[6];
 8003200:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8003204:	b2db      	uxtb	r3, r3
 8003206:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
			AnalogData[4] = (ADC_VAL[6] >> 8) | (ADC_VAL[7] << 4);
 800320a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800320e:	0a1b      	lsrs	r3, r3, #8
 8003210:	b29b      	uxth	r3, r3
 8003212:	b25a      	sxtb	r2, r3
 8003214:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	b25b      	sxtb	r3, r3
 800321c:	4313      	orrs	r3, r2
 800321e:	b25b      	sxtb	r3, r3
 8003220:	b2db      	uxtb	r3, r3
 8003222:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
			AnalogData[5] = (ADC_VAL[7] >> 4);
 8003226:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 800322a:	091b      	lsrs	r3, r3, #4
 800322c:	b29b      	uxth	r3, r3
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
			AnalogData[6] = ADC_VAL[5];
 8003234:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
			AnalogData[7] = (ADC_VAL[5] >> 8);
 800323e:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8003242:	0a1b      	lsrs	r3, r3, #8
 8003244:	b29b      	uxth	r3, r3
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
//			// Befehl Fehler auslesen an Bamocar senden
//			status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
			//hal_error(status);

			// ADC-Werte einlesen Kuehlwassertemperatur
			ADC_VAL[8] = ADC_Kuhlwassertemperatur();
 800324c:	f7fe f9e8 	bl	8001620 <ADC_Kuhlwassertemperatur>
 8003250:	4603      	mov	r3, r0
 8003252:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

			// ADC-Werte umwandeln
			TempData[0] = ADC_VAL[2];
 8003256:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
			TempData[1] = (ADC_VAL[2] >> 8) | (ADC_VAL[3] << 4);
 8003260:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8003264:	0a1b      	lsrs	r3, r3, #8
 8003266:	b29b      	uxth	r3, r3
 8003268:	b25a      	sxtb	r2, r3
 800326a:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	b25b      	sxtb	r3, r3
 8003272:	4313      	orrs	r3, r2
 8003274:	b25b      	sxtb	r3, r3
 8003276:	b2db      	uxtb	r3, r3
 8003278:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
			TempData[2] = (ADC_VAL[3] >> 4);
 800327c:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	b29b      	uxth	r3, r3
 8003284:	b2db      	uxtb	r3, r3
 8003286:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			TempData[3] = ADC_VAL[8];
 800328a:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800328e:	b2db      	uxtb	r3, r3
 8003290:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			TempData[4] = (ADC_VAL[8] >> 8) | (ADC_VAL[1] << 4);
 8003294:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8003298:	0a1b      	lsrs	r3, r3, #8
 800329a:	b29b      	uxth	r3, r3
 800329c:	b25a      	sxtb	r2, r3
 800329e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	b25b      	sxtb	r3, r3
 80032a6:	4313      	orrs	r3, r2
 80032a8:	b25b      	sxtb	r3, r3
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	f887 30e8 	strb.w	r3, [r7, #232]	; 0xe8
			TempData[5] = (ADC_VAL[1] >> 4);
 80032b0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9

			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 80032be:	bf00      	nop
 80032c0:	2101      	movs	r1, #1
 80032c2:	483d      	ldr	r0, [pc, #244]	; (80033b8 <main+0x6f0>)
 80032c4:	f001 fc4a 	bl	8004b5c <HAL_CAN_IsTxMessagePending>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d0f8      	beq.n	80032c0 <main+0x5f8>
			// Befehl Fehler auslesen an Bamocar senden
			status = HAL_CAN_AddTxMessage(&hcan3, &TxTemperatur, TempData, (uint32_t *)CAN_TX_MAILBOX0);
 80032ce:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80032d2:	f107 0118 	add.w	r1, r7, #24
 80032d6:	2301      	movs	r3, #1
 80032d8:	4837      	ldr	r0, [pc, #220]	; (80033b8 <main+0x6f0>)
 80032da:	f001 fb6f 	bl	80049bc <HAL_CAN_AddTxMessage>
 80032de:	4603      	mov	r3, r0
 80032e0:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 80032e4:	bf00      	nop
 80032e6:	2101      	movs	r1, #1
 80032e8:	4833      	ldr	r0, [pc, #204]	; (80033b8 <main+0x6f0>)
 80032ea:	f001 fc37 	bl	8004b5c <HAL_CAN_IsTxMessagePending>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d0f8      	beq.n	80032e6 <main+0x61e>
			status = HAL_CAN_AddTxMessage(&hcan3, &TxAnalog, AnalogData, (uint32_t *)CAN_TX_MAILBOX0);
 80032f4:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 80032f8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80032fc:	2301      	movs	r3, #1
 80032fe:	482e      	ldr	r0, [pc, #184]	; (80033b8 <main+0x6f0>)
 8003300:	f001 fb5c 	bl	80049bc <HAL_CAN_AddTxMessage>
 8003304:	4603      	mov	r3, r0
 8003306:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123


		}

		if (((count % 400) == 0) && (task == 1))
 800330a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800330e:	4a2b      	ldr	r2, [pc, #172]	; (80033bc <main+0x6f4>)
 8003310:	fba2 1203 	umull	r1, r2, r2, r3
 8003314:	09d2      	lsrs	r2, r2, #7
 8003316:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800331a:	fb01 f202 	mul.w	r2, r1, r2
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d124      	bne.n	8003370 <main+0x6a8>
 8003326:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800332a:	2b01      	cmp	r3, #1
 800332c:	d120      	bne.n	8003370 <main+0x6a8>
		{
			TxRadioData[0] = 0x83;
 800332e:	2383      	movs	r3, #131	; 0x83
 8003330:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
			TxRadioData[1] = 0x01;
 8003334:	2301      	movs	r3, #1
 8003336:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
			TxRadioData[2] = 0x12;
 800333a:	2312      	movs	r3, #18
 800333c:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
			TxRadioData[3] = 0xA0;
 8003340:	23a0      	movs	r3, #160	; 0xa0
 8003342:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb

			// Navi Meldung
			while (HAL_CAN_IsTxMessagePending(&hcan2, CAN_TX_MAILBOX0) == 1);
 8003346:	bf00      	nop
 8003348:	2101      	movs	r1, #1
 800334a:	4824      	ldr	r0, [pc, #144]	; (80033dc <main+0x714>)
 800334c:	f001 fc06 	bl	8004b5c <HAL_CAN_IsTxMessagePending>
 8003350:	4603      	mov	r3, r0
 8003352:	2b01      	cmp	r3, #1
 8003354:	d0f8      	beq.n	8003348 <main+0x680>
			status = HAL_CAN_AddTxMessage(&hcan2, &TxRadio, TxRadioData, (uint32_t *)CAN_TX_MAILBOX0);
 8003356:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800335a:	4639      	mov	r1, r7
 800335c:	2301      	movs	r3, #1
 800335e:	481f      	ldr	r0, [pc, #124]	; (80033dc <main+0x714>)
 8003360:	f001 fb2c 	bl	80049bc <HAL_CAN_AddTxMessage>
 8003364:	4603      	mov	r3, r0
 8003366:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
			//hal_error(status);

			// Variable count auf 0 zuruecksetzen
			count = 0;
 800336a:	2300      	movs	r3, #0
 800336c:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		}

		// Zuruecksetzen Flag start
		task = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137


	  	// Task wird alle 5 Millisekunden ausgefuehrt
	  	if (millis() - lastcan >= 5)
 8003376:	f7fe fe1b 	bl	8001fb0 <millis>
 800337a:	4602      	mov	r2, r0
 800337c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b04      	cmp	r3, #4
 8003384:	d977      	bls.n	8003476 <main+0x7ae>
		{
	  		HAL_CAN_GetRxMessage(&hcan3, CAN_RX_FIFO0, &RxMessage, TxData);
 8003386:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800338a:	4a15      	ldr	r2, [pc, #84]	; (80033e0 <main+0x718>)
 800338c:	2100      	movs	r1, #0
 800338e:	480a      	ldr	r0, [pc, #40]	; (80033b8 <main+0x6f0>)
 8003390:	f001 fc08 	bl	8004ba4 <HAL_CAN_GetRxMessage>

			// Wenn Nachricht ueber den CAN-Bus empfangen wurden
			if (can_change == 1)
 8003394:	4b13      	ldr	r3, [pc, #76]	; (80033e4 <main+0x71c>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b01      	cmp	r3, #1
 800339c:	d16b      	bne.n	8003476 <main+0x7ae>
			{
				// Nachricht ID ueber UART ausgeben
				uartTransmitNumber(RxMessage.StdId, 16);
 800339e:	4b10      	ldr	r3, [pc, #64]	; (80033e0 <main+0x718>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2110      	movs	r1, #16
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fd fa1f 	bl	80007e8 <uartTransmitNumber>
				uartTransmit("\t", 1);
 80033aa:	2101      	movs	r1, #1
 80033ac:	480e      	ldr	r0, [pc, #56]	; (80033e8 <main+0x720>)
 80033ae:	f7fd fa07 	bl	80007c0 <uartTransmit>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 80033b2:	2300      	movs	r3, #0
 80033b4:	e01a      	b.n	80033ec <main+0x724>
 80033b6:	bf00      	nop
 80033b8:	20000200 	.word	0x20000200
 80033bc:	51eb851f 	.word	0x51eb851f
 80033c0:	20000130 	.word	0x20000130
 80033c4:	20000134 	.word	0x20000134
 80033c8:	20000138 	.word	0x20000138
 80033cc:	2000013c 	.word	0x2000013c
 80033d0:	20000124 	.word	0x20000124
 80033d4:	20000128 	.word	0x20000128
 80033d8:	2000012c 	.word	0x2000012c
 80033dc:	200001d8 	.word	0x200001d8
 80033e0:	2000022c 	.word	0x2000022c
 80033e4:	2000026d 	.word	0x2000026d
 80033e8:	08008f94 	.word	0x08008f94
 80033ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80033f0:	e00c      	b.n	800340c <main+0x744>
				{
					uartTransmitNumber(RxData[i], 16);
 80033f2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80033f6:	4a2f      	ldr	r2, [pc, #188]	; (80034b4 <main+0x7ec>)
 80033f8:	5cd3      	ldrb	r3, [r2, r3]
 80033fa:	2110      	movs	r1, #16
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fd f9f3 	bl	80007e8 <uartTransmitNumber>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 8003402:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8003406:	3301      	adds	r3, #1
 8003408:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800340c:	f897 2126 	ldrb.w	r2, [r7, #294]	; 0x126
 8003410:	4b29      	ldr	r3, [pc, #164]	; (80034b8 <main+0x7f0>)
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	429a      	cmp	r2, r3
 8003416:	d3ec      	bcc.n	80033f2 <main+0x72a>
				}
				uartTransmit("\n", 1);
 8003418:	2101      	movs	r1, #1
 800341a:	4828      	ldr	r0, [pc, #160]	; (80034bc <main+0x7f4>)
 800341c:	f7fd f9d0 	bl	80007c0 <uartTransmit>

				// Sortieren der IDs nach Geraeten
				switch (RxMessage.StdId)
 8003420:	4b25      	ldr	r3, [pc, #148]	; (80034b8 <main+0x7f0>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f240 1211 	movw	r2, #273	; 0x111
 8003428:	4293      	cmp	r3, r2
 800342a:	d00b      	beq.n	8003444 <main+0x77c>
 800342c:	f240 1281 	movw	r2, #385	; 0x181
 8003430:	4293      	cmp	r3, r2
 8003432:	d10c      	bne.n	800344e <main+0x786>
				{
					case BAMOCAR_RX_ID:
						BAMOCAN_ID(&RxData[0], RxMessage.DLC);
 8003434:	4b20      	ldr	r3, [pc, #128]	; (80034b8 <main+0x7f0>)
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	4619      	mov	r1, r3
 800343c:	481d      	ldr	r0, [pc, #116]	; (80034b4 <main+0x7ec>)
 800343e:	f7fd f885 	bl	800054c <BAMOCAN_ID>
						break;
 8003442:	e009      	b.n	8003458 <main+0x790>
					case 0x111:
						uartTransmit("CAN-ID Computer config\n", 23);
 8003444:	2117      	movs	r1, #23
 8003446:	481e      	ldr	r0, [pc, #120]	; (80034c0 <main+0x7f8>)
 8003448:	f7fd f9ba 	bl	80007c0 <uartTransmit>
						break;
 800344c:	e004      	b.n	8003458 <main+0x790>
					default:
						uartTransmit("CAN-ID nicht verfuegbar\n", 24);
 800344e:	2118      	movs	r1, #24
 8003450:	481c      	ldr	r0, [pc, #112]	; (80034c4 <main+0x7fc>)
 8003452:	f7fd f9b5 	bl	80007c0 <uartTransmit>
						break;
 8003456:	bf00      	nop
				}

				// Drehzahl ausgeben
				TxData[2] = motor1.output[2];
 8003458:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <main+0x800>)
 800345a:	789b      	ldrb	r3, [r3, #2]
 800345c:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				TxData[3] = motor1.output[3];
 8003460:	4b19      	ldr	r3, [pc, #100]	; (80034c8 <main+0x800>)
 8003462:	78db      	ldrb	r3, [r3, #3]
 8003464:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				lastcan = millis();
 8003468:	f7fe fda2 	bl	8001fb0 <millis>
 800346c:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

				can_change = 0;
 8003470:	4b16      	ldr	r3, [pc, #88]	; (80034cc <main+0x804>)
 8003472:	2200      	movs	r2, #0
 8003474:	701a      	strb	r2, [r3, #0]
			}
		}

#ifdef DEBUG
		// Sende CAN Nachricht auf CAN-Bus / Teste CAN-BUS
		if (millis() - lastsendcan >= 1000)
 8003476:	f7fe fd9b 	bl	8001fb0 <millis>
 800347a:	4602      	mov	r2, r0
 800347c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003486:	f4ff ad22 	bcc.w	8002ece <main+0x206>
		{
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 800348a:	f507 7282 	add.w	r2, r7, #260	; 0x104
 800348e:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8003492:	2301      	movs	r3, #1
 8003494:	480e      	ldr	r0, [pc, #56]	; (80034d0 <main+0x808>)
 8003496:	f001 fa91 	bl	80049bc <HAL_CAN_AddTxMessage>
 800349a:	4603      	mov	r3, r0
 800349c:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
			//hal_error(status);
			lastsendcan = millis();
 80034a0:	f7fe fd86 	bl	8001fb0 <millis>
 80034a4:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

			HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 80034a8:	2180      	movs	r1, #128	; 0x80
 80034aa:	480a      	ldr	r0, [pc, #40]	; (80034d4 <main+0x80c>)
 80034ac:	f002 fa81 	bl	80059b2 <HAL_GPIO_TogglePin>
	  	switch (UART2_msg[0])
 80034b0:	e50d      	b.n	8002ece <main+0x206>
 80034b2:	bf00      	nop
 80034b4:	20000264 	.word	0x20000264
 80034b8:	2000022c 	.word	0x2000022c
 80034bc:	08008f98 	.word	0x08008f98
 80034c0:	08008f9c 	.word	0x08008f9c
 80034c4:	08008fb4 	.word	0x08008fb4
 80034c8:	20000270 	.word	0x20000270
 80034cc:	2000026d 	.word	0x2000026d
 80034d0:	20000200 	.word	0x20000200
 80034d4:	40020400 	.word	0x40020400

080034d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b094      	sub	sp, #80	; 0x50
 80034dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034de:	f107 031c 	add.w	r3, r7, #28
 80034e2:	2234      	movs	r2, #52	; 0x34
 80034e4:	2100      	movs	r1, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	f005 fa24 	bl	8008934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034ec:	f107 0308 	add.w	r3, r7, #8
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	605a      	str	r2, [r3, #4]
 80034f6:	609a      	str	r2, [r3, #8]
 80034f8:	60da      	str	r2, [r3, #12]
 80034fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80034fc:	4b2c      	ldr	r3, [pc, #176]	; (80035b0 <SystemClock_Config+0xd8>)
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	4a2b      	ldr	r2, [pc, #172]	; (80035b0 <SystemClock_Config+0xd8>)
 8003502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003506:	6413      	str	r3, [r2, #64]	; 0x40
 8003508:	4b29      	ldr	r3, [pc, #164]	; (80035b0 <SystemClock_Config+0xd8>)
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003510:	607b      	str	r3, [r7, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003514:	4b27      	ldr	r3, [pc, #156]	; (80035b4 <SystemClock_Config+0xdc>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a26      	ldr	r2, [pc, #152]	; (80035b4 <SystemClock_Config+0xdc>)
 800351a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <SystemClock_Config+0xdc>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003528:	603b      	str	r3, [r7, #0]
 800352a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800352c:	2301      	movs	r3, #1
 800352e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003530:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003534:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003536:	2302      	movs	r3, #2
 8003538:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800353a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800353e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003540:	2319      	movs	r3, #25
 8003542:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8003544:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8003548:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800354a:	2302      	movs	r3, #2
 800354c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800354e:	2302      	movs	r3, #2
 8003550:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003552:	2302      	movs	r3, #2
 8003554:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003556:	f107 031c 	add.w	r3, r7, #28
 800355a:	4618      	mov	r0, r3
 800355c:	f002 fa94 	bl	8005a88 <HAL_RCC_OscConfig>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8003566:	f000 f93b 	bl	80037e0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800356a:	f002 fa3d 	bl	80059e8 <HAL_PWREx_EnableOverDrive>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8003574:	f000 f934 	bl	80037e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003578:	230f      	movs	r3, #15
 800357a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800357c:	2302      	movs	r3, #2
 800357e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003580:	2300      	movs	r3, #0
 8003582:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003584:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003588:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800358a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800358e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003590:	f107 0308 	add.w	r3, r7, #8
 8003594:	2107      	movs	r1, #7
 8003596:	4618      	mov	r0, r3
 8003598:	f002 fd24 	bl	8005fe4 <HAL_RCC_ClockConfig>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80035a2:	f000 f91d 	bl	80037e0 <Error_Handler>
  }
}
 80035a6:	bf00      	nop
 80035a8:	3750      	adds	r7, #80	; 0x50
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40007000 	.word	0x40007000

080035b8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Interrupts
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08a      	sub	sp, #40	; 0x28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &UART2_rxBuffer[uart_count], 1, 100);
 80035c0:	4b5c      	ldr	r3, [pc, #368]	; (8003734 <HAL_UART_RxCpltCallback+0x17c>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	461a      	mov	r2, r3
 80035c6:	4b5c      	ldr	r3, [pc, #368]	; (8003738 <HAL_UART_RxCpltCallback+0x180>)
 80035c8:	18d1      	adds	r1, r2, r3
 80035ca:	2364      	movs	r3, #100	; 0x64
 80035cc:	2201      	movs	r2, #1
 80035ce:	485b      	ldr	r0, [pc, #364]	; (800373c <HAL_UART_RxCpltCallback+0x184>)
 80035d0:	f003 fec8 	bl	8007364 <HAL_UART_Transmit>

	if (UART2_rxBuffer[uart_count] == 0x7F)
 80035d4:	4b57      	ldr	r3, [pc, #348]	; (8003734 <HAL_UART_RxCpltCallback+0x17c>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	461a      	mov	r2, r3
 80035da:	4b57      	ldr	r3, [pc, #348]	; (8003738 <HAL_UART_RxCpltCallback+0x180>)
 80035dc:	5c9b      	ldrb	r3, [r3, r2]
 80035de:	2b7f      	cmp	r3, #127	; 0x7f
 80035e0:	d106      	bne.n	80035f0 <HAL_UART_RxCpltCallback+0x38>
	{
		uart_count--;
 80035e2:	4b54      	ldr	r3, [pc, #336]	; (8003734 <HAL_UART_RxCpltCallback+0x17c>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	4b52      	ldr	r3, [pc, #328]	; (8003734 <HAL_UART_RxCpltCallback+0x17c>)
 80035ec:	701a      	strb	r2, [r3, #0]
 80035ee:	e005      	b.n	80035fc <HAL_UART_RxCpltCallback+0x44>
	}
	else
	{
		uart_count++;
 80035f0:	4b50      	ldr	r3, [pc, #320]	; (8003734 <HAL_UART_RxCpltCallback+0x17c>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	3301      	adds	r3, #1
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	4b4e      	ldr	r3, [pc, #312]	; (8003734 <HAL_UART_RxCpltCallback+0x17c>)
 80035fa:	701a      	strb	r2, [r3, #0]
	}

	if (UART2_rxBuffer[uart_count-1] == '\r')
 80035fc:	4b4d      	ldr	r3, [pc, #308]	; (8003734 <HAL_UART_RxCpltCallback+0x17c>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	3b01      	subs	r3, #1
 8003602:	4a4d      	ldr	r2, [pc, #308]	; (8003738 <HAL_UART_RxCpltCallback+0x180>)
 8003604:	5cd3      	ldrb	r3, [r2, r3]
 8003606:	2b0d      	cmp	r3, #13
 8003608:	d16a      	bne.n	80036e0 <HAL_UART_RxCpltCallback+0x128>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)"\nEingabe OK\r\n", 13, 100);
 800360a:	2364      	movs	r3, #100	; 0x64
 800360c:	220d      	movs	r2, #13
 800360e:	494c      	ldr	r1, [pc, #304]	; (8003740 <HAL_UART_RxCpltCallback+0x188>)
 8003610:	484a      	ldr	r0, [pc, #296]	; (800373c <HAL_UART_RxCpltCallback+0x184>)
 8003612:	f003 fea7 	bl	8007364 <HAL_UART_Transmit>
		if (UART2_rxBuffer[0] == 'R' && UART2_rxBuffer[1] == 'E' && UART2_rxBuffer[2] == 'S')
 8003616:	4b48      	ldr	r3, [pc, #288]	; (8003738 <HAL_UART_RxCpltCallback+0x180>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b52      	cmp	r3, #82	; 0x52
 800361c:	d11e      	bne.n	800365c <HAL_UART_RxCpltCallback+0xa4>
 800361e:	4b46      	ldr	r3, [pc, #280]	; (8003738 <HAL_UART_RxCpltCallback+0x180>)
 8003620:	785b      	ldrb	r3, [r3, #1]
 8003622:	2b45      	cmp	r3, #69	; 0x45
 8003624:	d11a      	bne.n	800365c <HAL_UART_RxCpltCallback+0xa4>
 8003626:	4b44      	ldr	r3, [pc, #272]	; (8003738 <HAL_UART_RxCpltCallback+0x180>)
 8003628:	789b      	ldrb	r3, [r3, #2]
 800362a:	2b53      	cmp	r3, #83	; 0x53
 800362c:	d116      	bne.n	800365c <HAL_UART_RxCpltCallback+0xa4>
		{
			uint8_t c[10] = {204, 205, 205, 205, 205, 205, 205, 205, 205, 185};
 800362e:	4a45      	ldr	r2, [pc, #276]	; (8003744 <HAL_UART_RxCpltCallback+0x18c>)
 8003630:	f107 031c 	add.w	r3, r7, #28
 8003634:	ca07      	ldmia	r2, {r0, r1, r2}
 8003636:	c303      	stmia	r3!, {r0, r1}
 8003638:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)"\a", 1, 100);
 800363a:	2364      	movs	r3, #100	; 0x64
 800363c:	2201      	movs	r2, #1
 800363e:	4942      	ldr	r1, [pc, #264]	; (8003748 <HAL_UART_RxCpltCallback+0x190>)
 8003640:	483e      	ldr	r0, [pc, #248]	; (800373c <HAL_UART_RxCpltCallback+0x184>)
 8003642:	f003 fe8f 	bl	8007364 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, c, 10, 100);
 8003646:	f107 011c 	add.w	r1, r7, #28
 800364a:	2364      	movs	r3, #100	; 0x64
 800364c:	220a      	movs	r2, #10
 800364e:	483b      	ldr	r0, [pc, #236]	; (800373c <HAL_UART_RxCpltCallback+0x184>)
 8003650:	f003 fe88 	bl	8007364 <HAL_UART_Transmit>
			UART2_msg[0] = 1;
 8003654:	4b3d      	ldr	r3, [pc, #244]	; (800374c <HAL_UART_RxCpltCallback+0x194>)
 8003656:	2201      	movs	r2, #1
 8003658:	701a      	strb	r2, [r3, #0]
		{
 800365a:	e03e      	b.n	80036da <HAL_UART_RxCpltCallback+0x122>
		}
		else if (UART2_rxBuffer[0] == 'N' && UART2_rxBuffer[1] == 'A' && UART2_rxBuffer[2] == 'V')
 800365c:	4b36      	ldr	r3, [pc, #216]	; (8003738 <HAL_UART_RxCpltCallback+0x180>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b4e      	cmp	r3, #78	; 0x4e
 8003662:	d10f      	bne.n	8003684 <HAL_UART_RxCpltCallback+0xcc>
 8003664:	4b34      	ldr	r3, [pc, #208]	; (8003738 <HAL_UART_RxCpltCallback+0x180>)
 8003666:	785b      	ldrb	r3, [r3, #1]
 8003668:	2b41      	cmp	r3, #65	; 0x41
 800366a:	d10b      	bne.n	8003684 <HAL_UART_RxCpltCallback+0xcc>
 800366c:	4b32      	ldr	r3, [pc, #200]	; (8003738 <HAL_UART_RxCpltCallback+0x180>)
 800366e:	789b      	ldrb	r3, [r3, #2]
 8003670:	2b56      	cmp	r3, #86	; 0x56
 8003672:	d107      	bne.n	8003684 <HAL_UART_RxCpltCallback+0xcc>
		{
			uartTransmit("Display Nav\r\n", 13);
 8003674:	210d      	movs	r1, #13
 8003676:	4836      	ldr	r0, [pc, #216]	; (8003750 <HAL_UART_RxCpltCallback+0x198>)
 8003678:	f7fd f8a2 	bl	80007c0 <uartTransmit>
			UART2_msg[0] = 2;
 800367c:	4b33      	ldr	r3, [pc, #204]	; (800374c <HAL_UART_RxCpltCallback+0x194>)
 800367e:	2202      	movs	r2, #2
 8003680:	701a      	strb	r2, [r3, #0]
 8003682:	e02a      	b.n	80036da <HAL_UART_RxCpltCallback+0x122>
		}
		else if (UART2_rxBuffer[0] == 'T' && UART2_rxBuffer[1] == 'E' && UART2_rxBuffer[2] == 'L')
 8003684:	4b2c      	ldr	r3, [pc, #176]	; (8003738 <HAL_UART_RxCpltCallback+0x180>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b54      	cmp	r3, #84	; 0x54
 800368a:	d10f      	bne.n	80036ac <HAL_UART_RxCpltCallback+0xf4>
 800368c:	4b2a      	ldr	r3, [pc, #168]	; (8003738 <HAL_UART_RxCpltCallback+0x180>)
 800368e:	785b      	ldrb	r3, [r3, #1]
 8003690:	2b45      	cmp	r3, #69	; 0x45
 8003692:	d10b      	bne.n	80036ac <HAL_UART_RxCpltCallback+0xf4>
 8003694:	4b28      	ldr	r3, [pc, #160]	; (8003738 <HAL_UART_RxCpltCallback+0x180>)
 8003696:	789b      	ldrb	r3, [r3, #2]
 8003698:	2b4c      	cmp	r3, #76	; 0x4c
 800369a:	d107      	bne.n	80036ac <HAL_UART_RxCpltCallback+0xf4>
		{
			uartTransmit("Display Tel\r\n", 13);
 800369c:	210d      	movs	r1, #13
 800369e:	482d      	ldr	r0, [pc, #180]	; (8003754 <HAL_UART_RxCpltCallback+0x19c>)
 80036a0:	f7fd f88e 	bl	80007c0 <uartTransmit>
			UART2_msg[0] = 3;
 80036a4:	4b29      	ldr	r3, [pc, #164]	; (800374c <HAL_UART_RxCpltCallback+0x194>)
 80036a6:	2203      	movs	r2, #3
 80036a8:	701a      	strb	r2, [r3, #0]
 80036aa:	e016      	b.n	80036da <HAL_UART_RxCpltCallback+0x122>
		}
		else
		{
			uint8_t c[10] = {204, 205, 205, 205, 205, 205, 205, 205, 205, 185};
 80036ac:	4a25      	ldr	r2, [pc, #148]	; (8003744 <HAL_UART_RxCpltCallback+0x18c>)
 80036ae:	f107 0310 	add.w	r3, r7, #16
 80036b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80036b4:	c303      	stmia	r3!, {r0, r1}
 80036b6:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)"\a", 1, 100);
 80036b8:	2364      	movs	r3, #100	; 0x64
 80036ba:	2201      	movs	r2, #1
 80036bc:	4922      	ldr	r1, [pc, #136]	; (8003748 <HAL_UART_RxCpltCallback+0x190>)
 80036be:	481f      	ldr	r0, [pc, #124]	; (800373c <HAL_UART_RxCpltCallback+0x184>)
 80036c0:	f003 fe50 	bl	8007364 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, c, 10, 100);
 80036c4:	f107 0110 	add.w	r1, r7, #16
 80036c8:	2364      	movs	r3, #100	; 0x64
 80036ca:	220a      	movs	r2, #10
 80036cc:	481b      	ldr	r0, [pc, #108]	; (800373c <HAL_UART_RxCpltCallback+0x184>)
 80036ce:	f003 fe49 	bl	8007364 <HAL_UART_Transmit>
			uartTransmit("Falsche Eingabe\r\n", 17);
 80036d2:	2111      	movs	r1, #17
 80036d4:	4820      	ldr	r0, [pc, #128]	; (8003758 <HAL_UART_RxCpltCallback+0x1a0>)
 80036d6:	f7fd f873 	bl	80007c0 <uartTransmit>
		}
		uart_count = 0;
 80036da:	4b16      	ldr	r3, [pc, #88]	; (8003734 <HAL_UART_RxCpltCallback+0x17c>)
 80036dc:	2200      	movs	r2, #0
 80036de:	701a      	strb	r2, [r3, #0]
	}

	if (uart_count == 12)
 80036e0:	4b14      	ldr	r3, [pc, #80]	; (8003734 <HAL_UART_RxCpltCallback+0x17c>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b0c      	cmp	r3, #12
 80036e6:	d117      	bne.n	8003718 <HAL_UART_RxCpltCallback+0x160>
	{
		uint8_t tmp = 0x81;
 80036e8:	2381      	movs	r3, #129	; 0x81
 80036ea:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r\nEingabe Ung", 13, 100);
 80036ec:	2364      	movs	r3, #100	; 0x64
 80036ee:	220d      	movs	r2, #13
 80036f0:	491a      	ldr	r1, [pc, #104]	; (800375c <HAL_UART_RxCpltCallback+0x1a4>)
 80036f2:	4812      	ldr	r0, [pc, #72]	; (800373c <HAL_UART_RxCpltCallback+0x184>)
 80036f4:	f003 fe36 	bl	8007364 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, &tmp, 1, 100);
 80036f8:	f107 010f 	add.w	r1, r7, #15
 80036fc:	2364      	movs	r3, #100	; 0x64
 80036fe:	2201      	movs	r2, #1
 8003700:	480e      	ldr	r0, [pc, #56]	; (800373c <HAL_UART_RxCpltCallback+0x184>)
 8003702:	f003 fe2f 	bl	8007364 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) "ltig\r\n", 6, 100);
 8003706:	2364      	movs	r3, #100	; 0x64
 8003708:	2206      	movs	r2, #6
 800370a:	4915      	ldr	r1, [pc, #84]	; (8003760 <HAL_UART_RxCpltCallback+0x1a8>)
 800370c:	480b      	ldr	r0, [pc, #44]	; (800373c <HAL_UART_RxCpltCallback+0x184>)
 800370e:	f003 fe29 	bl	8007364 <HAL_UART_Transmit>
		uart_count = 0;
 8003712:	4b08      	ldr	r3, [pc, #32]	; (8003734 <HAL_UART_RxCpltCallback+0x17c>)
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]
	}
    HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer[uart_count], 1);
 8003718:	4b06      	ldr	r3, [pc, #24]	; (8003734 <HAL_UART_RxCpltCallback+0x17c>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	4b06      	ldr	r3, [pc, #24]	; (8003738 <HAL_UART_RxCpltCallback+0x180>)
 8003720:	4413      	add	r3, r2
 8003722:	2201      	movs	r2, #1
 8003724:	4619      	mov	r1, r3
 8003726:	4805      	ldr	r0, [pc, #20]	; (800373c <HAL_UART_RxCpltCallback+0x184>)
 8003728:	f003 fe9f 	bl	800746a <HAL_UART_Receive_IT>
}
 800372c:	bf00      	nop
 800372e:	3728      	adds	r7, #40	; 0x28
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	20000260 	.word	0x20000260
 8003738:	20000248 	.word	0x20000248
 800373c:	200002c4 	.word	0x200002c4
 8003740:	080090a8 	.word	0x080090a8
 8003744:	08009108 	.word	0x08009108
 8003748:	080090b8 	.word	0x080090b8
 800374c:	20000254 	.word	0x20000254
 8003750:	080090bc 	.word	0x080090bc
 8003754:	080090cc 	.word	0x080090cc
 8003758:	080090dc 	.word	0x080090dc
 800375c:	080090f0 	.word	0x080090f0
 8003760:	08009100 	.word	0x08009100

08003764 <HAL_CAN_RxFifo0MsgPendingCallback>:

// Can-Interrupt: Nachricht wartet
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
	// Nachricht aus Speicher auslesen
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 800376c:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800376e:	4a07      	ldr	r2, [pc, #28]	; (800378c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8003770:	2100      	movs	r1, #0
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f001 fa16 	bl	8004ba4 <HAL_CAN_GetRxMessage>
	can_change = 1;
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800377a:	2201      	movs	r2, #1
 800377c:	701a      	strb	r2, [r3, #0]
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20000264 	.word	0x20000264
 800378c:	2000022c 	.word	0x2000022c
 8003790:	2000026d 	.word	0x2000026d

08003794 <HAL_CAN_RxFifo0FullCallback>:

// Can-Interrupt: Fifo0 ist voll
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	// Fifo0 voll
	uartTransmit("Fifo0 von CAN3 ist voll\n", 24);
 800379c:	2118      	movs	r1, #24
 800379e:	4804      	ldr	r0, [pc, #16]	; (80037b0 <HAL_CAN_RxFifo0FullCallback+0x1c>)
 80037a0:	f7fd f80e 	bl	80007c0 <uartTransmit>

	Error_Handler();
 80037a4:	f000 f81c 	bl	80037e0 <Error_Handler>
}
 80037a8:	bf00      	nop
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	08009114 	.word	0x08009114

080037b4 <HAL_TIM_PeriodElapsedCallback>:

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)																	// Wenn Timer 6 den ueberlauf ausgeloest hat
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a06      	ldr	r2, [pc, #24]	; (80037d8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d102      	bne.n	80037ca <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;														// Setze Millisekunden Flag
 80037c4:	4b05      	ldr	r3, [pc, #20]	; (80037dc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	701a      	strb	r2, [r3, #0]
	}
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	20000278 	.word	0x20000278
 80037dc:	2000026c 	.word	0x2000026c

080037e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80037e4:	b672      	cpsid	i
}
 80037e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 80037e8:	4a11      	ldr	r2, [pc, #68]	; (8003830 <Error_Handler+0x50>)
 80037ea:	7853      	ldrb	r3, [r2, #1]
 80037ec:	f043 0308 	orr.w	r3, r3, #8
 80037f0:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 80037f2:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <Error_Handler+0x50>)
 80037f4:	785b      	ldrb	r3, [r3, #1]
 80037f6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	461a      	mov	r2, r3
 80037fe:	2104      	movs	r1, #4
 8003800:	480c      	ldr	r0, [pc, #48]	; (8003834 <Error_Handler+0x54>)
 8003802:	f002 f8bd 	bl	8005980 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8003806:	4a0a      	ldr	r2, [pc, #40]	; (8003830 <Error_Handler+0x50>)
 8003808:	7853      	ldrb	r3, [r2, #1]
 800380a:	f36f 1304 	bfc	r3, #4, #1
 800380e:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 8003810:	4b07      	ldr	r3, [pc, #28]	; (8003830 <Error_Handler+0x50>)
 8003812:	785b      	ldrb	r3, [r3, #1]
 8003814:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003818:	b2db      	uxtb	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003820:	4804      	ldr	r0, [pc, #16]	; (8003834 <Error_Handler+0x54>)
 8003822:	f002 f8ad 	bl	8005980 <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 8003826:	2122      	movs	r1, #34	; 0x22
 8003828:	4803      	ldr	r0, [pc, #12]	; (8003838 <Error_Handler+0x58>)
 800382a:	f7fc ffc9 	bl	80007c0 <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1);
 800382e:	e7fe      	b.n	800382e <Error_Handler+0x4e>
 8003830:	20000138 	.word	0x20000138
 8003834:	40020400 	.word	0x40020400
 8003838:	08009130 	.word	0x08009130

0800383c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003842:	4b0f      	ldr	r3, [pc, #60]	; (8003880 <HAL_MspInit+0x44>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	4a0e      	ldr	r2, [pc, #56]	; (8003880 <HAL_MspInit+0x44>)
 8003848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800384c:	6413      	str	r3, [r2, #64]	; 0x40
 800384e:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <HAL_MspInit+0x44>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003856:	607b      	str	r3, [r7, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800385a:	4b09      	ldr	r3, [pc, #36]	; (8003880 <HAL_MspInit+0x44>)
 800385c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385e:	4a08      	ldr	r2, [pc, #32]	; (8003880 <HAL_MspInit+0x44>)
 8003860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003864:	6453      	str	r3, [r2, #68]	; 0x44
 8003866:	4b06      	ldr	r3, [pc, #24]	; (8003880 <HAL_MspInit+0x44>)
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40023800 	.word	0x40023800

08003884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003888:	e7fe      	b.n	8003888 <NMI_Handler+0x4>

0800388a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800388a:	b480      	push	{r7}
 800388c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800388e:	e7fe      	b.n	800388e <HardFault_Handler+0x4>

08003890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003894:	e7fe      	b.n	8003894 <MemManage_Handler+0x4>

08003896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003896:	b480      	push	{r7}
 8003898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800389a:	e7fe      	b.n	800389a <BusFault_Handler+0x4>

0800389c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038a0:	e7fe      	b.n	80038a0 <UsageFault_Handler+0x4>

080038a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038a2:	b480      	push	{r7}
 80038a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038a6:	bf00      	nop
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038be:	b480      	push	{r7}
 80038c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038c2:	bf00      	nop
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038d0:	f000 f98e 	bl	8003bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038d4:	bf00      	nop
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80038dc:	4802      	ldr	r0, [pc, #8]	; (80038e8 <USART2_IRQHandler+0x10>)
 80038de:	f003 fe09 	bl	80074f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	200002c4 	.word	0x200002c4

080038ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80038f0:	4802      	ldr	r0, [pc, #8]	; (80038fc <TIM6_DAC_IRQHandler+0x10>)
 80038f2:	f003 fa55 	bl	8006da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000278 	.word	0x20000278

08003900 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8003904:	4802      	ldr	r0, [pc, #8]	; (8003910 <CAN3_RX0_IRQHandler+0x10>)
 8003906:	f001 faad 	bl	8004e64 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000200 	.word	0x20000200

08003914 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <SystemInit+0x28>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391e:	4a07      	ldr	r2, [pc, #28]	; (800393c <SystemInit+0x28>)
 8003920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003928:	4b04      	ldr	r3, [pc, #16]	; (800393c <SystemInit+0x28>)
 800392a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800392e:	609a      	str	r2, [r3, #8]
#endif
}
 8003930:	bf00      	nop
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	e000ed00 	.word	0xe000ed00

08003940 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003946:	1d3b      	adds	r3, r7, #4
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	605a      	str	r2, [r3, #4]
 800394e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003950:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <MX_TIM6_Init+0x64>)
 8003952:	4a15      	ldr	r2, [pc, #84]	; (80039a8 <MX_TIM6_Init+0x68>)
 8003954:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27-1;
 8003956:	4b13      	ldr	r3, [pc, #76]	; (80039a4 <MX_TIM6_Init+0x64>)
 8003958:	221a      	movs	r2, #26
 800395a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800395c:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <MX_TIM6_Init+0x64>)
 800395e:	2200      	movs	r2, #0
 8003960:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000-1;
 8003962:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <MX_TIM6_Init+0x64>)
 8003964:	f640 729f 	movw	r2, #3999	; 0xf9f
 8003968:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800396a:	4b0e      	ldr	r3, [pc, #56]	; (80039a4 <MX_TIM6_Init+0x64>)
 800396c:	2200      	movs	r2, #0
 800396e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003970:	480c      	ldr	r0, [pc, #48]	; (80039a4 <MX_TIM6_Init+0x64>)
 8003972:	f003 f945 	bl	8006c00 <HAL_TIM_Base_Init>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800397c:	f7ff ff30 	bl	80037e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003980:	2300      	movs	r3, #0
 8003982:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003984:	2300      	movs	r3, #0
 8003986:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003988:	1d3b      	adds	r3, r7, #4
 800398a:	4619      	mov	r1, r3
 800398c:	4805      	ldr	r0, [pc, #20]	; (80039a4 <MX_TIM6_Init+0x64>)
 800398e:	f003 fbef 	bl	8007170 <HAL_TIMEx_MasterConfigSynchronization>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003998:	f7ff ff22 	bl	80037e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800399c:	bf00      	nop
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	20000278 	.word	0x20000278
 80039a8:	40001000 	.word	0x40001000

080039ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a0d      	ldr	r2, [pc, #52]	; (80039f0 <HAL_TIM_Base_MspInit+0x44>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d113      	bne.n	80039e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80039be:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <HAL_TIM_Base_MspInit+0x48>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	4a0c      	ldr	r2, [pc, #48]	; (80039f4 <HAL_TIM_Base_MspInit+0x48>)
 80039c4:	f043 0310 	orr.w	r3, r3, #16
 80039c8:	6413      	str	r3, [r2, #64]	; 0x40
 80039ca:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <HAL_TIM_Base_MspInit+0x48>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80039d6:	2200      	movs	r2, #0
 80039d8:	2100      	movs	r1, #0
 80039da:	2036      	movs	r0, #54	; 0x36
 80039dc:	f001 fd43 	bl	8005466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80039e0:	2036      	movs	r0, #54	; 0x36
 80039e2:	f001 fd5c 	bl	800549e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80039e6:	bf00      	nop
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40001000 	.word	0x40001000
 80039f4:	40023800 	.word	0x40023800

080039f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039fc:	4b14      	ldr	r3, [pc, #80]	; (8003a50 <MX_USART2_UART_Init+0x58>)
 80039fe:	4a15      	ldr	r2, [pc, #84]	; (8003a54 <MX_USART2_UART_Init+0x5c>)
 8003a00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003a02:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <MX_USART2_UART_Init+0x58>)
 8003a04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003a08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a0a:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <MX_USART2_UART_Init+0x58>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003a10:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <MX_USART2_UART_Init+0x58>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003a16:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <MX_USART2_UART_Init+0x58>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <MX_USART2_UART_Init+0x58>)
 8003a1e:	220c      	movs	r2, #12
 8003a20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <MX_USART2_UART_Init+0x58>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a28:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <MX_USART2_UART_Init+0x58>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a2e:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <MX_USART2_UART_Init+0x58>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <MX_USART2_UART_Init+0x58>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a3a:	4805      	ldr	r0, [pc, #20]	; (8003a50 <MX_USART2_UART_Init+0x58>)
 8003a3c:	f003 fc44 	bl	80072c8 <HAL_UART_Init>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003a46:	f7ff fecb 	bl	80037e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a4a:	bf00      	nop
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	200002c4 	.word	0x200002c4
 8003a54:	40004400 	.word	0x40004400

08003a58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b0ae      	sub	sp, #184	; 0xb8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	605a      	str	r2, [r3, #4]
 8003a6a:	609a      	str	r2, [r3, #8]
 8003a6c:	60da      	str	r2, [r3, #12]
 8003a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a70:	f107 0314 	add.w	r3, r7, #20
 8003a74:	2290      	movs	r2, #144	; 0x90
 8003a76:	2100      	movs	r1, #0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f004 ff5b 	bl	8008934 <memset>
  if(uartHandle->Instance==USART2)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a25      	ldr	r2, [pc, #148]	; (8003b18 <HAL_UART_MspInit+0xc0>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d142      	bne.n	8003b0e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003a88:	2380      	movs	r3, #128	; 0x80
 8003a8a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a90:	f107 0314 	add.w	r3, r7, #20
 8003a94:	4618      	mov	r0, r3
 8003a96:	f002 fc8b 	bl	80063b0 <HAL_RCCEx_PeriphCLKConfig>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003aa0:	f7ff fe9e 	bl	80037e0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003aa4:	4b1d      	ldr	r3, [pc, #116]	; (8003b1c <HAL_UART_MspInit+0xc4>)
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	4a1c      	ldr	r2, [pc, #112]	; (8003b1c <HAL_UART_MspInit+0xc4>)
 8003aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aae:	6413      	str	r3, [r2, #64]	; 0x40
 8003ab0:	4b1a      	ldr	r3, [pc, #104]	; (8003b1c <HAL_UART_MspInit+0xc4>)
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003abc:	4b17      	ldr	r3, [pc, #92]	; (8003b1c <HAL_UART_MspInit+0xc4>)
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	4a16      	ldr	r2, [pc, #88]	; (8003b1c <HAL_UART_MspInit+0xc4>)
 8003ac2:	f043 0308 	orr.w	r3, r3, #8
 8003ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac8:	4b14      	ldr	r3, [pc, #80]	; (8003b1c <HAL_UART_MspInit+0xc4>)
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART2TX_Pin|DEBUG_UART2RX_Pin;
 8003ad4:	2360      	movs	r3, #96	; 0x60
 8003ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ada:	2302      	movs	r3, #2
 8003adc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003aec:	2307      	movs	r3, #7
 8003aee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003af2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003af6:	4619      	mov	r1, r3
 8003af8:	4809      	ldr	r0, [pc, #36]	; (8003b20 <HAL_UART_MspInit+0xc8>)
 8003afa:	f001 fd7d 	bl	80055f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003afe:	2200      	movs	r2, #0
 8003b00:	2100      	movs	r1, #0
 8003b02:	2026      	movs	r0, #38	; 0x26
 8003b04:	f001 fcaf 	bl	8005466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b08:	2026      	movs	r0, #38	; 0x26
 8003b0a:	f001 fcc8 	bl	800549e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003b0e:	bf00      	nop
 8003b10:	37b8      	adds	r7, #184	; 0xb8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40004400 	.word	0x40004400
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	40020c00 	.word	0x40020c00

08003b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003b28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b2a:	e003      	b.n	8003b34 <LoopCopyDataInit>

08003b2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b2c:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003b2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b32:	3104      	adds	r1, #4

08003b34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b34:	480b      	ldr	r0, [pc, #44]	; (8003b64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003b36:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003b38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b3c:	d3f6      	bcc.n	8003b2c <CopyDataInit>
  ldr  r2, =_sbss
 8003b3e:	4a0b      	ldr	r2, [pc, #44]	; (8003b6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003b40:	e002      	b.n	8003b48 <LoopFillZerobss>

08003b42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003b42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003b44:	f842 3b04 	str.w	r3, [r2], #4

08003b48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003b48:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003b4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003b4c:	d3f9      	bcc.n	8003b42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b4e:	f7ff fee1 	bl	8003914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b52:	f004 fecb 	bl	80088ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b56:	f7ff f8b7 	bl	8002cc8 <main>
  bx  lr    
 8003b5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b5c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003b60:	080091a4 	.word	0x080091a4
  ldr  r0, =_sdata
 8003b64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b68:	200000d0 	.word	0x200000d0
  ldr  r2, =_sbss
 8003b6c:	200000d0 	.word	0x200000d0
  ldr  r3, = _ebss
 8003b70:	20000350 	.word	0x20000350

08003b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b74:	e7fe      	b.n	8003b74 <ADC_IRQHandler>

08003b76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b7a:	2003      	movs	r0, #3
 8003b7c:	f001 fc68 	bl	8005450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b80:	2000      	movs	r0, #0
 8003b82:	f000 f805 	bl	8003b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b86:	f7ff fe59 	bl	800383c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b98:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <HAL_InitTick+0x54>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	4b12      	ldr	r3, [pc, #72]	; (8003be8 <HAL_InitTick+0x58>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f001 fc83 	bl	80054ba <HAL_SYSTICK_Config>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e00e      	b.n	8003bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b0f      	cmp	r3, #15
 8003bc2:	d80a      	bhi.n	8003bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bcc:	f001 fc4b 	bl	8005466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bd0:	4a06      	ldr	r2, [pc, #24]	; (8003bec <HAL_InitTick+0x5c>)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	e000      	b.n	8003bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	200000c4 	.word	0x200000c4
 8003be8:	200000cc 	.word	0x200000cc
 8003bec:	200000c8 	.word	0x200000c8

08003bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bf4:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <HAL_IncTick+0x20>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <HAL_IncTick+0x24>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4413      	add	r3, r2
 8003c00:	4a04      	ldr	r2, [pc, #16]	; (8003c14 <HAL_IncTick+0x24>)
 8003c02:	6013      	str	r3, [r2, #0]
}
 8003c04:	bf00      	nop
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	200000cc 	.word	0x200000cc
 8003c14:	2000034c 	.word	0x2000034c

08003c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c1c:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <HAL_GetTick+0x14>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	2000034c 	.word	0x2000034c

08003c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c38:	f7ff ffee 	bl	8003c18 <HAL_GetTick>
 8003c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c48:	d005      	beq.n	8003c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c4a:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <HAL_Delay+0x44>)
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4413      	add	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c56:	bf00      	nop
 8003c58:	f7ff ffde 	bl	8003c18 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d8f7      	bhi.n	8003c58 <HAL_Delay+0x28>
  {
  }
}
 8003c68:	bf00      	nop
 8003c6a:	bf00      	nop
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	200000cc 	.word	0x200000cc

08003c78 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 8003c7c:	4b02      	ldr	r3, [pc, #8]	; (8003c88 <HAL_GetHalVersion+0x10>)
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	01030000 	.word	0x01030000

08003c8c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8003c90:	4b03      	ldr	r3, [pc, #12]	; (8003ca0 <HAL_GetREVID+0x14>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	0c1b      	lsrs	r3, r3, #16
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	e0042000 	.word	0xe0042000

08003ca4 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8003ca8:	4b04      	ldr	r3, [pc, #16]	; (8003cbc <HAL_GetDEVID+0x18>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	e0042000 	.word	0xe0042000

08003cc0 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8003cc4:	4b03      	ldr	r3, [pc, #12]	; (8003cd4 <HAL_GetUIDw0+0x14>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	1ff0f420 	.word	0x1ff0f420

08003cd8 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003cdc:	4b03      	ldr	r3, [pc, #12]	; (8003cec <HAL_GetUIDw1+0x14>)
 8003cde:	681b      	ldr	r3, [r3, #0]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	1ff0f424 	.word	0x1ff0f424

08003cf0 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003cf4:	4b03      	ldr	r3, [pc, #12]	; (8003d04 <HAL_GetUIDw2+0x14>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	1ff0f428 	.word	0x1ff0f428

08003d08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e031      	b.n	8003d82 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d109      	bne.n	8003d3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fe fb54 	bl	80023d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	f003 0310 	and.w	r3, r3, #16
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d116      	bne.n	8003d74 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d4a:	4b10      	ldr	r3, [pc, #64]	; (8003d8c <HAL_ADC_Init+0x84>)
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	f043 0202 	orr.w	r2, r3, #2
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 fb0a 	bl	8004370 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	f023 0303 	bic.w	r3, r3, #3
 8003d6a:	f043 0201 	orr.w	r2, r3, #1
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	641a      	str	r2, [r3, #64]	; 0x40
 8003d72:	e001      	b.n	8003d78 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	ffffeefd 	.word	0xffffeefd

08003d90 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_ADC_Start+0x1a>
 8003da6:	2302      	movs	r3, #2
 8003da8:	e0ad      	b.n	8003f06 <HAL_ADC_Start+0x176>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d018      	beq.n	8003df2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003dd0:	4b50      	ldr	r3, [pc, #320]	; (8003f14 <HAL_ADC_Start+0x184>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a50      	ldr	r2, [pc, #320]	; (8003f18 <HAL_ADC_Start+0x188>)
 8003dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dda:	0c9a      	lsrs	r2, r3, #18
 8003ddc:	4613      	mov	r3, r2
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	4413      	add	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003de4:	e002      	b.n	8003dec <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	3b01      	subs	r3, #1
 8003dea:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f9      	bne.n	8003de6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d175      	bne.n	8003eec <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e04:	4b45      	ldr	r3, [pc, #276]	; (8003f1c <HAL_ADC_Start+0x18c>)
 8003e06:	4013      	ands	r3, r2
 8003e08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d007      	beq.n	8003e2e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e26:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e3a:	d106      	bne.n	8003e4a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e40:	f023 0206 	bic.w	r2, r3, #6
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	645a      	str	r2, [r3, #68]	; 0x44
 8003e48:	e002      	b.n	8003e50 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e60:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003e62:	4b2f      	ldr	r3, [pc, #188]	; (8003f20 <HAL_ADC_Start+0x190>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f003 031f 	and.w	r3, r3, #31
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10f      	bne.n	8003e8e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d143      	bne.n	8003f04 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e8a:	609a      	str	r2, [r3, #8]
 8003e8c:	e03a      	b.n	8003f04 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a24      	ldr	r2, [pc, #144]	; (8003f24 <HAL_ADC_Start+0x194>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d10e      	bne.n	8003eb6 <HAL_ADC_Start+0x126>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d107      	bne.n	8003eb6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003eb4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003eb6:	4b1a      	ldr	r3, [pc, #104]	; (8003f20 <HAL_ADC_Start+0x190>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f003 0310 	and.w	r3, r3, #16
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d120      	bne.n	8003f04 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a18      	ldr	r2, [pc, #96]	; (8003f28 <HAL_ADC_Start+0x198>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d11b      	bne.n	8003f04 <HAL_ADC_Start+0x174>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d114      	bne.n	8003f04 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ee8:	609a      	str	r2, [r3, #8]
 8003eea:	e00b      	b.n	8003f04 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	f043 0210 	orr.w	r2, r3, #16
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efc:	f043 0201 	orr.w	r2, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	200000c4 	.word	0x200000c4
 8003f18:	431bde83 	.word	0x431bde83
 8003f1c:	fffff8fe 	.word	0xfffff8fe
 8003f20:	40012300 	.word	0x40012300
 8003f24:	40012000 	.word	0x40012000
 8003f28:	40012200 	.word	0x40012200

08003f2c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_ADC_Stop+0x16>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e01f      	b.n	8003f82 <HAL_ADC_Stop+0x56>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0201 	bic.w	r2, r2, #1
 8003f58:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d107      	bne.n	8003f78 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f6c:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <HAL_ADC_Stop+0x64>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	f043 0201 	orr.w	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	ffffeefe 	.word	0xffffeefe

08003f94 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb0:	d113      	bne.n	8003fda <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fc0:	d10b      	bne.n	8003fda <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	f043 0220 	orr.w	r2, r3, #32
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e063      	b.n	80040a2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003fda:	f7ff fe1d 	bl	8003c18 <HAL_GetTick>
 8003fde:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003fe0:	e021      	b.n	8004026 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe8:	d01d      	beq.n	8004026 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d007      	beq.n	8004000 <HAL_ADC_PollForConversion+0x6c>
 8003ff0:	f7ff fe12 	bl	8003c18 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d212      	bcs.n	8004026 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b02      	cmp	r3, #2
 800400c:	d00b      	beq.n	8004026 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f043 0204 	orr.w	r2, r3, #4
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e03d      	b.n	80040a2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b02      	cmp	r3, #2
 8004032:	d1d6      	bne.n	8003fe2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f06f 0212 	mvn.w	r2, #18
 800403c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d123      	bne.n	80040a0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800405c:	2b00      	cmp	r3, #0
 800405e:	d11f      	bne.n	80040a0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800406a:	2b00      	cmp	r3, #0
 800406c:	d006      	beq.n	800407c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004078:	2b00      	cmp	r3, #0
 800407a:	d111      	bne.n	80040a0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d105      	bne.n	80040a0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	f043 0201 	orr.w	r2, r3, #1
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80040ce:	2300      	movs	r3, #0
 80040d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_ADC_ConfigChannel+0x1c>
 80040dc:	2302      	movs	r3, #2
 80040de:	e136      	b.n	800434e <HAL_ADC_ConfigChannel+0x28a>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b09      	cmp	r3, #9
 80040ee:	d93a      	bls.n	8004166 <HAL_ADC_ConfigChannel+0xa2>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040f8:	d035      	beq.n	8004166 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68d9      	ldr	r1, [r3, #12]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	b29b      	uxth	r3, r3
 8004106:	461a      	mov	r2, r3
 8004108:	4613      	mov	r3, r2
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	4413      	add	r3, r2
 800410e:	3b1e      	subs	r3, #30
 8004110:	2207      	movs	r2, #7
 8004112:	fa02 f303 	lsl.w	r3, r2, r3
 8004116:	43da      	mvns	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	400a      	ands	r2, r1
 800411e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a8d      	ldr	r2, [pc, #564]	; (800435c <HAL_ADC_ConfigChannel+0x298>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d10a      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68d9      	ldr	r1, [r3, #12]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	061a      	lsls	r2, r3, #24
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800413e:	e035      	b.n	80041ac <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68d9      	ldr	r1, [r3, #12]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	b29b      	uxth	r3, r3
 8004150:	4618      	mov	r0, r3
 8004152:	4603      	mov	r3, r0
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	4403      	add	r3, r0
 8004158:	3b1e      	subs	r3, #30
 800415a:	409a      	lsls	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004164:	e022      	b.n	80041ac <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6919      	ldr	r1, [r3, #16]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	b29b      	uxth	r3, r3
 8004172:	461a      	mov	r2, r3
 8004174:	4613      	mov	r3, r2
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	4413      	add	r3, r2
 800417a:	2207      	movs	r2, #7
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	43da      	mvns	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	400a      	ands	r2, r1
 8004188:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6919      	ldr	r1, [r3, #16]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	b29b      	uxth	r3, r3
 800419a:	4618      	mov	r0, r3
 800419c:	4603      	mov	r3, r0
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	4403      	add	r3, r0
 80041a2:	409a      	lsls	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b06      	cmp	r3, #6
 80041b2:	d824      	bhi.n	80041fe <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	3b05      	subs	r3, #5
 80041c6:	221f      	movs	r2, #31
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	43da      	mvns	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	400a      	ands	r2, r1
 80041d4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	4618      	mov	r0, r3
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	4613      	mov	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	3b05      	subs	r3, #5
 80041f0:	fa00 f203 	lsl.w	r2, r0, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	635a      	str	r2, [r3, #52]	; 0x34
 80041fc:	e04c      	b.n	8004298 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b0c      	cmp	r3, #12
 8004204:	d824      	bhi.n	8004250 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	3b23      	subs	r3, #35	; 0x23
 8004218:	221f      	movs	r2, #31
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	43da      	mvns	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	400a      	ands	r2, r1
 8004226:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	4618      	mov	r0, r3
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	3b23      	subs	r3, #35	; 0x23
 8004242:	fa00 f203 	lsl.w	r2, r0, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	631a      	str	r2, [r3, #48]	; 0x30
 800424e:	e023      	b.n	8004298 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	4613      	mov	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	3b41      	subs	r3, #65	; 0x41
 8004262:	221f      	movs	r2, #31
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	43da      	mvns	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	400a      	ands	r2, r1
 8004270:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	b29b      	uxth	r3, r3
 800427e:	4618      	mov	r0, r3
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	3b41      	subs	r3, #65	; 0x41
 800428c:	fa00 f203 	lsl.w	r2, r0, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a30      	ldr	r2, [pc, #192]	; (8004360 <HAL_ADC_ConfigChannel+0x29c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d10a      	bne.n	80042b8 <HAL_ADC_ConfigChannel+0x1f4>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042aa:	d105      	bne.n	80042b8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80042ac:	4b2d      	ldr	r3, [pc, #180]	; (8004364 <HAL_ADC_ConfigChannel+0x2a0>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	4a2c      	ldr	r2, [pc, #176]	; (8004364 <HAL_ADC_ConfigChannel+0x2a0>)
 80042b2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80042b6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a28      	ldr	r2, [pc, #160]	; (8004360 <HAL_ADC_ConfigChannel+0x29c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d10f      	bne.n	80042e2 <HAL_ADC_ConfigChannel+0x21e>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b12      	cmp	r3, #18
 80042c8:	d10b      	bne.n	80042e2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80042ca:	4b26      	ldr	r3, [pc, #152]	; (8004364 <HAL_ADC_ConfigChannel+0x2a0>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	4a25      	ldr	r2, [pc, #148]	; (8004364 <HAL_ADC_ConfigChannel+0x2a0>)
 80042d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80042d4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80042d6:	4b23      	ldr	r3, [pc, #140]	; (8004364 <HAL_ADC_ConfigChannel+0x2a0>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	4a22      	ldr	r2, [pc, #136]	; (8004364 <HAL_ADC_ConfigChannel+0x2a0>)
 80042dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042e0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a1e      	ldr	r2, [pc, #120]	; (8004360 <HAL_ADC_ConfigChannel+0x29c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d12b      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x280>
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a1a      	ldr	r2, [pc, #104]	; (800435c <HAL_ADC_ConfigChannel+0x298>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d003      	beq.n	80042fe <HAL_ADC_ConfigChannel+0x23a>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b11      	cmp	r3, #17
 80042fc:	d122      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80042fe:	4b19      	ldr	r3, [pc, #100]	; (8004364 <HAL_ADC_ConfigChannel+0x2a0>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	4a18      	ldr	r2, [pc, #96]	; (8004364 <HAL_ADC_ConfigChannel+0x2a0>)
 8004304:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004308:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800430a:	4b16      	ldr	r3, [pc, #88]	; (8004364 <HAL_ADC_ConfigChannel+0x2a0>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	4a15      	ldr	r2, [pc, #84]	; (8004364 <HAL_ADC_ConfigChannel+0x2a0>)
 8004310:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004314:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a10      	ldr	r2, [pc, #64]	; (800435c <HAL_ADC_ConfigChannel+0x298>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d111      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004320:	4b11      	ldr	r3, [pc, #68]	; (8004368 <HAL_ADC_ConfigChannel+0x2a4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a11      	ldr	r2, [pc, #68]	; (800436c <HAL_ADC_ConfigChannel+0x2a8>)
 8004326:	fba2 2303 	umull	r2, r3, r2, r3
 800432a:	0c9a      	lsrs	r2, r3, #18
 800432c:	4613      	mov	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004336:	e002      	b.n	800433e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	3b01      	subs	r3, #1
 800433c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1f9      	bne.n	8004338 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	10000012 	.word	0x10000012
 8004360:	40012000 	.word	0x40012000
 8004364:	40012300 	.word	0x40012300
 8004368:	200000c4 	.word	0x200000c4
 800436c:	431bde83 	.word	0x431bde83

08004370 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004378:	4b78      	ldr	r3, [pc, #480]	; (800455c <ADC_Init+0x1ec>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	4a77      	ldr	r2, [pc, #476]	; (800455c <ADC_Init+0x1ec>)
 800437e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004382:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004384:	4b75      	ldr	r3, [pc, #468]	; (800455c <ADC_Init+0x1ec>)
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	4973      	ldr	r1, [pc, #460]	; (800455c <ADC_Init+0x1ec>)
 800438e:	4313      	orrs	r3, r2
 8004390:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6859      	ldr	r1, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	021a      	lsls	r2, r3, #8
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80043c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6859      	ldr	r1, [r3, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	430a      	orrs	r2, r1
 80043d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6899      	ldr	r1, [r3, #8]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fe:	4a58      	ldr	r2, [pc, #352]	; (8004560 <ADC_Init+0x1f0>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d022      	beq.n	800444a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689a      	ldr	r2, [r3, #8]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004412:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6899      	ldr	r1, [r3, #8]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004434:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6899      	ldr	r1, [r3, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	609a      	str	r2, [r3, #8]
 8004448:	e00f      	b.n	800446a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004458:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004468:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0202 	bic.w	r2, r2, #2
 8004478:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6899      	ldr	r1, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	005a      	lsls	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01b      	beq.n	80044d0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80044b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6859      	ldr	r1, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	3b01      	subs	r3, #1
 80044c4:	035a      	lsls	r2, r3, #13
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	605a      	str	r2, [r3, #4]
 80044ce:	e007      	b.n	80044e0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80044ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	051a      	lsls	r2, r3, #20
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004514:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6899      	ldr	r1, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004522:	025a      	lsls	r2, r3, #9
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800453a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6899      	ldr	r1, [r3, #8]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	029a      	lsls	r2, r3, #10
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	609a      	str	r2, [r3, #8]
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	40012300 	.word	0x40012300
 8004560:	0f000001 	.word	0x0f000001

08004564 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e0ed      	b.n	8004752 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d102      	bne.n	8004588 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7fe f8d4 	bl	8002730 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004598:	f7ff fb3e 	bl	8003c18 <HAL_GetTick>
 800459c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800459e:	e012      	b.n	80045c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80045a0:	f7ff fb3a 	bl	8003c18 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b0a      	cmp	r3, #10
 80045ac:	d90b      	bls.n	80045c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2205      	movs	r2, #5
 80045be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e0c5      	b.n	8004752 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0e5      	beq.n	80045a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0202 	bic.w	r2, r2, #2
 80045e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045e4:	f7ff fb18 	bl	8003c18 <HAL_GetTick>
 80045e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80045ea:	e012      	b.n	8004612 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80045ec:	f7ff fb14 	bl	8003c18 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b0a      	cmp	r3, #10
 80045f8:	d90b      	bls.n	8004612 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2205      	movs	r2, #5
 800460a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e09f      	b.n	8004752 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1e5      	bne.n	80045ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	7e1b      	ldrb	r3, [r3, #24]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d108      	bne.n	800463a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	e007      	b.n	800464a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004648:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	7e5b      	ldrb	r3, [r3, #25]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d108      	bne.n	8004664 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	e007      	b.n	8004674 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004672:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	7e9b      	ldrb	r3, [r3, #26]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d108      	bne.n	800468e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0220 	orr.w	r2, r2, #32
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	e007      	b.n	800469e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0220 	bic.w	r2, r2, #32
 800469c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	7edb      	ldrb	r3, [r3, #27]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d108      	bne.n	80046b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0210 	bic.w	r2, r2, #16
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	e007      	b.n	80046c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0210 	orr.w	r2, r2, #16
 80046c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	7f1b      	ldrb	r3, [r3, #28]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d108      	bne.n	80046e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0208 	orr.w	r2, r2, #8
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	e007      	b.n	80046f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0208 	bic.w	r2, r2, #8
 80046f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	7f5b      	ldrb	r3, [r3, #29]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d108      	bne.n	800470c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0204 	orr.w	r2, r2, #4
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	e007      	b.n	800471c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0204 	bic.w	r2, r2, #4
 800471a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	ea42 0103 	orr.w	r1, r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	1e5a      	subs	r2, r3, #1
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004772:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004774:	7cfb      	ldrb	r3, [r7, #19]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d003      	beq.n	8004782 <HAL_CAN_ConfigFilter+0x26>
 800477a:	7cfb      	ldrb	r3, [r7, #19]
 800477c:	2b02      	cmp	r3, #2
 800477e:	f040 80c7 	bne.w	8004910 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a69      	ldr	r2, [pc, #420]	; (800492c <HAL_CAN_ConfigFilter+0x1d0>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d001      	beq.n	8004790 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800478c:	4b68      	ldr	r3, [pc, #416]	; (8004930 <HAL_CAN_ConfigFilter+0x1d4>)
 800478e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004796:	f043 0201 	orr.w	r2, r3, #1
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	4a63      	ldr	r2, [pc, #396]	; (8004930 <HAL_CAN_ConfigFilter+0x1d4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d111      	bne.n	80047cc <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80047ae:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	021b      	lsls	r3, r3, #8
 80047c4:	431a      	orrs	r2, r3
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	f003 031f 	and.w	r3, r3, #31
 80047d4:	2201      	movs	r2, #1
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	43db      	mvns	r3, r3
 80047e6:	401a      	ands	r2, r3
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d123      	bne.n	800483e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	43db      	mvns	r3, r3
 8004800:	401a      	ands	r2, r3
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004818:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	3248      	adds	r2, #72	; 0x48
 800481e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004832:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004834:	6979      	ldr	r1, [r7, #20]
 8004836:	3348      	adds	r3, #72	; 0x48
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	440b      	add	r3, r1
 800483c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d122      	bne.n	800488c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	431a      	orrs	r2, r3
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004866:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	3248      	adds	r2, #72	; 0x48
 800486c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004880:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004882:	6979      	ldr	r1, [r7, #20]
 8004884:	3348      	adds	r3, #72	; 0x48
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	440b      	add	r3, r1
 800488a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d109      	bne.n	80048a8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	43db      	mvns	r3, r3
 800489e:	401a      	ands	r2, r3
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80048a6:	e007      	b.n	80048b8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	431a      	orrs	r2, r3
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d109      	bne.n	80048d4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	43db      	mvns	r3, r3
 80048ca:	401a      	ands	r2, r3
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80048d2:	e007      	b.n	80048e4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	431a      	orrs	r2, r3
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d107      	bne.n	80048fc <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	431a      	orrs	r2, r3
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004902:	f023 0201 	bic.w	r2, r3, #1
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800490c:	2300      	movs	r3, #0
 800490e:	e006      	b.n	800491e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
  }
}
 800491e:	4618      	mov	r0, r3
 8004920:	371c      	adds	r7, #28
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40003400 	.word	0x40003400
 8004930:	40006400 	.word	0x40006400

08004934 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b01      	cmp	r3, #1
 8004946:	d12e      	bne.n	80049a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0201 	bic.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004960:	f7ff f95a 	bl	8003c18 <HAL_GetTick>
 8004964:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004966:	e012      	b.n	800498e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004968:	f7ff f956 	bl	8003c18 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b0a      	cmp	r3, #10
 8004974:	d90b      	bls.n	800498e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2205      	movs	r2, #5
 8004986:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e012      	b.n	80049b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1e5      	bne.n	8004968 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	e006      	b.n	80049b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
  }
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80049bc:	b480      	push	{r7}
 80049be:	b089      	sub	sp, #36	; 0x24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049d0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80049da:	7ffb      	ldrb	r3, [r7, #31]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d003      	beq.n	80049e8 <HAL_CAN_AddTxMessage+0x2c>
 80049e0:	7ffb      	ldrb	r3, [r7, #31]
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	f040 80ad 	bne.w	8004b42 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10a      	bne.n	8004a08 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d105      	bne.n	8004a08 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 8095 	beq.w	8004b32 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	0e1b      	lsrs	r3, r3, #24
 8004a0c:	f003 0303 	and.w	r3, r3, #3
 8004a10:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004a12:	2201      	movs	r2, #1
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	409a      	lsls	r2, r3
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10d      	bne.n	8004a40 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004a2e:	68f9      	ldr	r1, [r7, #12]
 8004a30:	6809      	ldr	r1, [r1, #0]
 8004a32:	431a      	orrs	r2, r3
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	3318      	adds	r3, #24
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	440b      	add	r3, r1
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	e00f      	b.n	8004a60 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a4a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a50:	68f9      	ldr	r1, [r7, #12]
 8004a52:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004a54:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	3318      	adds	r3, #24
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	440b      	add	r3, r1
 8004a5e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6819      	ldr	r1, [r3, #0]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	691a      	ldr	r2, [r3, #16]
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	3318      	adds	r3, #24
 8004a6c:	011b      	lsls	r3, r3, #4
 8004a6e:	440b      	add	r3, r1
 8004a70:	3304      	adds	r3, #4
 8004a72:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	7d1b      	ldrb	r3, [r3, #20]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d111      	bne.n	8004aa0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	3318      	adds	r3, #24
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	4413      	add	r3, r2
 8004a88:	3304      	adds	r3, #4
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	6811      	ldr	r1, [r2, #0]
 8004a90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	3318      	adds	r3, #24
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	440b      	add	r3, r1
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3307      	adds	r3, #7
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	061a      	lsls	r2, r3, #24
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3306      	adds	r3, #6
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	041b      	lsls	r3, r3, #16
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3305      	adds	r3, #5
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	4313      	orrs	r3, r2
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	3204      	adds	r2, #4
 8004ac0:	7812      	ldrb	r2, [r2, #0]
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	6811      	ldr	r1, [r2, #0]
 8004ac8:	ea43 0200 	orr.w	r2, r3, r0
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	011b      	lsls	r3, r3, #4
 8004ad0:	440b      	add	r3, r1
 8004ad2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004ad6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3303      	adds	r3, #3
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	061a      	lsls	r2, r3, #24
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3302      	adds	r3, #2
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	041b      	lsls	r3, r3, #16
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3301      	adds	r3, #1
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	021b      	lsls	r3, r3, #8
 8004af2:	4313      	orrs	r3, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	7812      	ldrb	r2, [r2, #0]
 8004af8:	4610      	mov	r0, r2
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	6811      	ldr	r1, [r2, #0]
 8004afe:	ea43 0200 	orr.w	r2, r3, r0
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	440b      	add	r3, r1
 8004b08:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004b0c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	3318      	adds	r3, #24
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	4413      	add	r3, r2
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	6811      	ldr	r1, [r2, #0]
 8004b20:	f043 0201 	orr.w	r2, r3, #1
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	3318      	adds	r3, #24
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	440b      	add	r3, r1
 8004b2c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e00e      	b.n	8004b50 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e006      	b.n	8004b50 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
  }
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3724      	adds	r7, #36	; 0x24
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b70:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8004b72:	7afb      	ldrb	r3, [r7, #11]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d002      	beq.n	8004b7e <HAL_CAN_IsTxMessagePending+0x22>
 8004b78:	7afb      	ldrb	r3, [r7, #11]
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d10b      	bne.n	8004b96 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	069b      	lsls	r3, r3, #26
 8004b88:	401a      	ands	r2, r3
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	069b      	lsls	r3, r3, #26
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d001      	beq.n	8004b96 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8004b92:	2301      	movs	r3, #1
 8004b94:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8004b96:	68fb      	ldr	r3, [r7, #12]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
 8004bb0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bb8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004bba:	7dfb      	ldrb	r3, [r7, #23]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d003      	beq.n	8004bc8 <HAL_CAN_GetRxMessage+0x24>
 8004bc0:	7dfb      	ldrb	r3, [r7, #23]
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	f040 80f3 	bne.w	8004dae <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10e      	bne.n	8004bec <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d116      	bne.n	8004c0a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0e7      	b.n	8004dbc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d107      	bne.n	8004c0a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e0d8      	b.n	8004dbc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	331b      	adds	r3, #27
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	4413      	add	r3, r2
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0204 	and.w	r2, r3, #4
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10c      	bne.n	8004c42 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	331b      	adds	r3, #27
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	4413      	add	r3, r2
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	0d5b      	lsrs	r3, r3, #21
 8004c38:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	e00b      	b.n	8004c5a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	331b      	adds	r3, #27
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	4413      	add	r3, r2
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	08db      	lsrs	r3, r3, #3
 8004c52:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	331b      	adds	r3, #27
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	4413      	add	r3, r2
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0202 	and.w	r2, r3, #2
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	331b      	adds	r3, #27
 8004c78:	011b      	lsls	r3, r3, #4
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 020f 	and.w	r2, r3, #15
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	331b      	adds	r3, #27
 8004c90:	011b      	lsls	r3, r3, #4
 8004c92:	4413      	add	r3, r2
 8004c94:	3304      	adds	r3, #4
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	0a1b      	lsrs	r3, r3, #8
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	331b      	adds	r3, #27
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	4413      	add	r3, r2
 8004cac:	3304      	adds	r3, #4
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	0c1b      	lsrs	r3, r3, #16
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	011b      	lsls	r3, r3, #4
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	0a1a      	lsrs	r2, r3, #8
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	b2d2      	uxtb	r2, r2
 8004ce6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	0c1a      	lsrs	r2, r3, #16
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	3302      	adds	r3, #2
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	0e1a      	lsrs	r2, r3, #24
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	3303      	adds	r3, #3
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	b2d2      	uxtb	r2, r2
 8004d32:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	0a1a      	lsrs	r2, r3, #8
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	3305      	adds	r3, #5
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	011b      	lsls	r3, r3, #4
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	0c1a      	lsrs	r2, r3, #16
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	3306      	adds	r3, #6
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	0e1a      	lsrs	r2, r3, #24
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	3307      	adds	r3, #7
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d108      	bne.n	8004d9a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0220 	orr.w	r2, r2, #32
 8004d96:	60da      	str	r2, [r3, #12]
 8004d98:	e007      	b.n	8004daa <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0220 	orr.w	r2, r2, #32
 8004da8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	e006      	b.n	8004dbc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
  }
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	371c      	adds	r7, #28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ddc:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004dde:	7afb      	ldrb	r3, [r7, #11]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d002      	beq.n	8004dea <HAL_CAN_GetRxFifoFillLevel+0x22>
 8004de4:	7afb      	ldrb	r3, [r7, #11]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d10f      	bne.n	8004e0a <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d106      	bne.n	8004dfe <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	e005      	b.n	8004e0a <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	f003 0303 	and.w	r3, r3, #3
 8004e08:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e28:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d002      	beq.n	8004e36 <HAL_CAN_ActivateNotification+0x1e>
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d109      	bne.n	8004e4a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6959      	ldr	r1, [r3, #20]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	e006      	b.n	8004e58 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
  }
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08a      	sub	sp, #40	; 0x28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d07c      	beq.n	8004fa4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d023      	beq.n	8004efc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f983 	bl	80051d2 <HAL_CAN_TxMailbox0CompleteCallback>
 8004ecc:	e016      	b.n	8004efc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d004      	beq.n	8004ee2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ede:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee0:	e00c      	b.n	8004efc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d004      	beq.n	8004ef6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef4:	e002      	b.n	8004efc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f989 	bl	800520e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d024      	beq.n	8004f50 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f0e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f963 	bl	80051e6 <HAL_CAN_TxMailbox1CompleteCallback>
 8004f20:	e016      	b.n	8004f50 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d004      	beq.n	8004f36 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
 8004f34:	e00c      	b.n	8004f50 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d004      	beq.n	8004f4a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24
 8004f48:	e002      	b.n	8004f50 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f969 	bl	8005222 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d024      	beq.n	8004fa4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004f62:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f943 	bl	80051fa <HAL_CAN_TxMailbox2CompleteCallback>
 8004f74:	e016      	b.n	8004fa4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d004      	beq.n	8004f8a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f86:	627b      	str	r3, [r7, #36]	; 0x24
 8004f88:	e00c      	b.n	8004fa4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d004      	beq.n	8004f9e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f9c:	e002      	b.n	8004fa4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f949 	bl	8005236 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	f003 0308 	and.w	r3, r3, #8
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00c      	beq.n	8004fc8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f003 0310 	and.w	r3, r3, #16
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d007      	beq.n	8004fc8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2210      	movs	r2, #16
 8004fc6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	f003 0304 	and.w	r3, r3, #4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00b      	beq.n	8004fea <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f003 0308 	and.w	r3, r3, #8
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d006      	beq.n	8004fea <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2208      	movs	r2, #8
 8004fe2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7fe fbd5 	bl	8003794 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d009      	beq.n	8005008 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f003 0303 	and.w	r3, r3, #3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7fe fbae 	bl	8003764 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00c      	beq.n	800502c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f003 0310 	and.w	r3, r3, #16
 8005018:	2b00      	cmp	r3, #0
 800501a:	d007      	beq.n	800502c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005022:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2210      	movs	r2, #16
 800502a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00b      	beq.n	800504e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b00      	cmp	r3, #0
 800503e:	d006      	beq.n	800504e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2208      	movs	r2, #8
 8005046:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f908 	bl	800525e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	f003 0310 	and.w	r3, r3, #16
 8005054:	2b00      	cmp	r3, #0
 8005056:	d009      	beq.n	800506c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d002      	beq.n	800506c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f8ef 	bl	800524a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00b      	beq.n	800508e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	f003 0310 	and.w	r3, r3, #16
 800507c:	2b00      	cmp	r3, #0
 800507e:	d006      	beq.n	800508e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2210      	movs	r2, #16
 8005086:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f8f2 	bl	8005272 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00b      	beq.n	80050b0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	f003 0308 	and.w	r3, r3, #8
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d006      	beq.n	80050b0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2208      	movs	r2, #8
 80050a8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f8eb 	bl	8005286 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d07b      	beq.n	80051b2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d072      	beq.n	80051aa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d008      	beq.n	80050e0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	f043 0301 	orr.w	r3, r3, #1
 80050de:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d008      	beq.n	80050fc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d003      	beq.n	80050fc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	f043 0302 	orr.w	r3, r3, #2
 80050fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005102:	2b00      	cmp	r3, #0
 8005104:	d008      	beq.n	8005118 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	f043 0304 	orr.w	r3, r3, #4
 8005116:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800511e:	2b00      	cmp	r3, #0
 8005120:	d043      	beq.n	80051aa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005128:	2b00      	cmp	r3, #0
 800512a:	d03e      	beq.n	80051aa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005132:	2b60      	cmp	r3, #96	; 0x60
 8005134:	d02b      	beq.n	800518e <HAL_CAN_IRQHandler+0x32a>
 8005136:	2b60      	cmp	r3, #96	; 0x60
 8005138:	d82e      	bhi.n	8005198 <HAL_CAN_IRQHandler+0x334>
 800513a:	2b50      	cmp	r3, #80	; 0x50
 800513c:	d022      	beq.n	8005184 <HAL_CAN_IRQHandler+0x320>
 800513e:	2b50      	cmp	r3, #80	; 0x50
 8005140:	d82a      	bhi.n	8005198 <HAL_CAN_IRQHandler+0x334>
 8005142:	2b40      	cmp	r3, #64	; 0x40
 8005144:	d019      	beq.n	800517a <HAL_CAN_IRQHandler+0x316>
 8005146:	2b40      	cmp	r3, #64	; 0x40
 8005148:	d826      	bhi.n	8005198 <HAL_CAN_IRQHandler+0x334>
 800514a:	2b30      	cmp	r3, #48	; 0x30
 800514c:	d010      	beq.n	8005170 <HAL_CAN_IRQHandler+0x30c>
 800514e:	2b30      	cmp	r3, #48	; 0x30
 8005150:	d822      	bhi.n	8005198 <HAL_CAN_IRQHandler+0x334>
 8005152:	2b10      	cmp	r3, #16
 8005154:	d002      	beq.n	800515c <HAL_CAN_IRQHandler+0x2f8>
 8005156:	2b20      	cmp	r3, #32
 8005158:	d005      	beq.n	8005166 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800515a:	e01d      	b.n	8005198 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	f043 0308 	orr.w	r3, r3, #8
 8005162:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005164:	e019      	b.n	800519a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	f043 0310 	orr.w	r3, r3, #16
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800516e:	e014      	b.n	800519a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	f043 0320 	orr.w	r3, r3, #32
 8005176:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005178:	e00f      	b.n	800519a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005182:	e00a      	b.n	800519a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800518a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800518c:	e005      	b.n	800519a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005194:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005196:	e000      	b.n	800519a <HAL_CAN_IRQHandler+0x336>
            break;
 8005198:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	699a      	ldr	r2, [r3, #24]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80051a8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2204      	movs	r2, #4
 80051b0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d008      	beq.n	80051ca <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f868 	bl	800529a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80051ca:	bf00      	nop
 80051cc:	3728      	adds	r7, #40	; 0x28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b083      	sub	sp, #12
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b083      	sub	sp, #12
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005252:	bf00      	nop
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005272:	b480      	push	{r7}
 8005274:	b083      	sub	sp, #12
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
	...

080052b0 <__NVIC_SetPriorityGrouping>:
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052c0:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <__NVIC_SetPriorityGrouping+0x40>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80052cc:	4013      	ands	r3, r2
 80052ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80052d8:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <__NVIC_SetPriorityGrouping+0x44>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052de:	4a04      	ldr	r2, [pc, #16]	; (80052f0 <__NVIC_SetPriorityGrouping+0x40>)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	60d3      	str	r3, [r2, #12]
}
 80052e4:	bf00      	nop
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	e000ed00 	.word	0xe000ed00
 80052f4:	05fa0000 	.word	0x05fa0000

080052f8 <__NVIC_GetPriorityGrouping>:
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052fc:	4b04      	ldr	r3, [pc, #16]	; (8005310 <__NVIC_GetPriorityGrouping+0x18>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	0a1b      	lsrs	r3, r3, #8
 8005302:	f003 0307 	and.w	r3, r3, #7
}
 8005306:	4618      	mov	r0, r3
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	e000ed00 	.word	0xe000ed00

08005314 <__NVIC_EnableIRQ>:
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	4603      	mov	r3, r0
 800531c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800531e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005322:	2b00      	cmp	r3, #0
 8005324:	db0b      	blt.n	800533e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	f003 021f 	and.w	r2, r3, #31
 800532c:	4907      	ldr	r1, [pc, #28]	; (800534c <__NVIC_EnableIRQ+0x38>)
 800532e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005332:	095b      	lsrs	r3, r3, #5
 8005334:	2001      	movs	r0, #1
 8005336:	fa00 f202 	lsl.w	r2, r0, r2
 800533a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	e000e100 	.word	0xe000e100

08005350 <__NVIC_SetPriority>:
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	4603      	mov	r3, r0
 8005358:	6039      	str	r1, [r7, #0]
 800535a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800535c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005360:	2b00      	cmp	r3, #0
 8005362:	db0a      	blt.n	800537a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	b2da      	uxtb	r2, r3
 8005368:	490c      	ldr	r1, [pc, #48]	; (800539c <__NVIC_SetPriority+0x4c>)
 800536a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800536e:	0112      	lsls	r2, r2, #4
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	440b      	add	r3, r1
 8005374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005378:	e00a      	b.n	8005390 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	b2da      	uxtb	r2, r3
 800537e:	4908      	ldr	r1, [pc, #32]	; (80053a0 <__NVIC_SetPriority+0x50>)
 8005380:	79fb      	ldrb	r3, [r7, #7]
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	3b04      	subs	r3, #4
 8005388:	0112      	lsls	r2, r2, #4
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	440b      	add	r3, r1
 800538e:	761a      	strb	r2, [r3, #24]
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	e000e100 	.word	0xe000e100
 80053a0:	e000ed00 	.word	0xe000ed00

080053a4 <NVIC_EncodePriority>:
{
 80053a4:	b480      	push	{r7}
 80053a6:	b089      	sub	sp, #36	; 0x24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	f1c3 0307 	rsb	r3, r3, #7
 80053be:	2b04      	cmp	r3, #4
 80053c0:	bf28      	it	cs
 80053c2:	2304      	movcs	r3, #4
 80053c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	3304      	adds	r3, #4
 80053ca:	2b06      	cmp	r3, #6
 80053cc:	d902      	bls.n	80053d4 <NVIC_EncodePriority+0x30>
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	3b03      	subs	r3, #3
 80053d2:	e000      	b.n	80053d6 <NVIC_EncodePriority+0x32>
 80053d4:	2300      	movs	r3, #0
 80053d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053d8:	f04f 32ff 	mov.w	r2, #4294967295
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	fa02 f303 	lsl.w	r3, r2, r3
 80053e2:	43da      	mvns	r2, r3
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	401a      	ands	r2, r3
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053ec:	f04f 31ff 	mov.w	r1, #4294967295
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	fa01 f303 	lsl.w	r3, r1, r3
 80053f6:	43d9      	mvns	r1, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053fc:	4313      	orrs	r3, r2
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3724      	adds	r7, #36	; 0x24
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
	...

0800540c <SysTick_Config>:
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3b01      	subs	r3, #1
 8005418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800541c:	d301      	bcc.n	8005422 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800541e:	2301      	movs	r3, #1
 8005420:	e00f      	b.n	8005442 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005422:	4a0a      	ldr	r2, [pc, #40]	; (800544c <SysTick_Config+0x40>)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3b01      	subs	r3, #1
 8005428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800542a:	210f      	movs	r1, #15
 800542c:	f04f 30ff 	mov.w	r0, #4294967295
 8005430:	f7ff ff8e 	bl	8005350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005434:	4b05      	ldr	r3, [pc, #20]	; (800544c <SysTick_Config+0x40>)
 8005436:	2200      	movs	r2, #0
 8005438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800543a:	4b04      	ldr	r3, [pc, #16]	; (800544c <SysTick_Config+0x40>)
 800543c:	2207      	movs	r2, #7
 800543e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	e000e010 	.word	0xe000e010

08005450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7ff ff29 	bl	80052b0 <__NVIC_SetPriorityGrouping>
}
 800545e:	bf00      	nop
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005466:	b580      	push	{r7, lr}
 8005468:	b086      	sub	sp, #24
 800546a:	af00      	add	r7, sp, #0
 800546c:	4603      	mov	r3, r0
 800546e:	60b9      	str	r1, [r7, #8]
 8005470:	607a      	str	r2, [r7, #4]
 8005472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005474:	2300      	movs	r3, #0
 8005476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005478:	f7ff ff3e 	bl	80052f8 <__NVIC_GetPriorityGrouping>
 800547c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	6978      	ldr	r0, [r7, #20]
 8005484:	f7ff ff8e 	bl	80053a4 <NVIC_EncodePriority>
 8005488:	4602      	mov	r2, r0
 800548a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800548e:	4611      	mov	r1, r2
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff ff5d 	bl	8005350 <__NVIC_SetPriority>
}
 8005496:	bf00      	nop
 8005498:	3718      	adds	r7, #24
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b082      	sub	sp, #8
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	4603      	mov	r3, r0
 80054a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7ff ff31 	bl	8005314 <__NVIC_EnableIRQ>
}
 80054b2:	bf00      	nop
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b082      	sub	sp, #8
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7ff ffa2 	bl	800540c <SysTick_Config>
 80054c8:	4603      	mov	r3, r0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b084      	sub	sp, #16
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80054e0:	f7fe fb9a 	bl	8003c18 <HAL_GetTick>
 80054e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d008      	beq.n	8005504 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2280      	movs	r2, #128	; 0x80
 80054f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e052      	b.n	80055aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0216 	bic.w	r2, r2, #22
 8005512:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695a      	ldr	r2, [r3, #20]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005522:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005528:	2b00      	cmp	r3, #0
 800552a:	d103      	bne.n	8005534 <HAL_DMA_Abort+0x62>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005530:	2b00      	cmp	r3, #0
 8005532:	d007      	beq.n	8005544 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0208 	bic.w	r2, r2, #8
 8005542:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 0201 	bic.w	r2, r2, #1
 8005552:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005554:	e013      	b.n	800557e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005556:	f7fe fb5f 	bl	8003c18 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b05      	cmp	r3, #5
 8005562:	d90c      	bls.n	800557e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2220      	movs	r2, #32
 8005568:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2203      	movs	r2, #3
 800556e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e015      	b.n	80055aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1e4      	bne.n	8005556 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005590:	223f      	movs	r2, #63	; 0x3f
 8005592:	409a      	lsls	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d004      	beq.n	80055d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2280      	movs	r2, #128	; 0x80
 80055ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e00c      	b.n	80055ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2205      	movs	r2, #5
 80055d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0201 	bic.w	r2, r2, #1
 80055e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
	...

080055f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b089      	sub	sp, #36	; 0x24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005602:	2300      	movs	r3, #0
 8005604:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005606:	2300      	movs	r3, #0
 8005608:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800560a:	2300      	movs	r3, #0
 800560c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800560e:	2300      	movs	r3, #0
 8005610:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005612:	2300      	movs	r3, #0
 8005614:	61fb      	str	r3, [r7, #28]
 8005616:	e175      	b.n	8005904 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005618:	2201      	movs	r2, #1
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	4013      	ands	r3, r2
 800562a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	429a      	cmp	r2, r3
 8005632:	f040 8164 	bne.w	80058fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f003 0303 	and.w	r3, r3, #3
 800563e:	2b01      	cmp	r3, #1
 8005640:	d005      	beq.n	800564e <HAL_GPIO_Init+0x56>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f003 0303 	and.w	r3, r3, #3
 800564a:	2b02      	cmp	r3, #2
 800564c:	d130      	bne.n	80056b0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	2203      	movs	r2, #3
 800565a:	fa02 f303 	lsl.w	r3, r2, r3
 800565e:	43db      	mvns	r3, r3
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	4013      	ands	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	fa02 f303 	lsl.w	r3, r2, r3
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	4313      	orrs	r3, r2
 8005676:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005684:	2201      	movs	r2, #1
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	fa02 f303 	lsl.w	r3, r2, r3
 800568c:	43db      	mvns	r3, r3
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	4013      	ands	r3, r2
 8005692:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	091b      	lsrs	r3, r3, #4
 800569a:	f003 0201 	and.w	r2, r3, #1
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f003 0303 	and.w	r3, r3, #3
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d017      	beq.n	80056ec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	2203      	movs	r2, #3
 80056c8:	fa02 f303 	lsl.w	r3, r2, r3
 80056cc:	43db      	mvns	r3, r3
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	4013      	ands	r3, r2
 80056d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	fa02 f303 	lsl.w	r3, r2, r3
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f003 0303 	and.w	r3, r3, #3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d123      	bne.n	8005740 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	08da      	lsrs	r2, r3, #3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3208      	adds	r2, #8
 8005700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	220f      	movs	r2, #15
 8005710:	fa02 f303 	lsl.w	r3, r2, r3
 8005714:	43db      	mvns	r3, r3
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	4013      	ands	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	fa02 f303 	lsl.w	r3, r2, r3
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	4313      	orrs	r3, r2
 8005730:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	08da      	lsrs	r2, r3, #3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3208      	adds	r2, #8
 800573a:	69b9      	ldr	r1, [r7, #24]
 800573c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	2203      	movs	r2, #3
 800574c:	fa02 f303 	lsl.w	r3, r2, r3
 8005750:	43db      	mvns	r3, r3
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	4013      	ands	r3, r2
 8005756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f003 0203 	and.w	r2, r3, #3
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	fa02 f303 	lsl.w	r3, r2, r3
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	4313      	orrs	r3, r2
 800576c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 80be 	beq.w	80058fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005782:	4b66      	ldr	r3, [pc, #408]	; (800591c <HAL_GPIO_Init+0x324>)
 8005784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005786:	4a65      	ldr	r2, [pc, #404]	; (800591c <HAL_GPIO_Init+0x324>)
 8005788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800578c:	6453      	str	r3, [r2, #68]	; 0x44
 800578e:	4b63      	ldr	r3, [pc, #396]	; (800591c <HAL_GPIO_Init+0x324>)
 8005790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800579a:	4a61      	ldr	r2, [pc, #388]	; (8005920 <HAL_GPIO_Init+0x328>)
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	089b      	lsrs	r3, r3, #2
 80057a0:	3302      	adds	r3, #2
 80057a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	220f      	movs	r2, #15
 80057b2:	fa02 f303 	lsl.w	r3, r2, r3
 80057b6:	43db      	mvns	r3, r3
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	4013      	ands	r3, r2
 80057bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a58      	ldr	r2, [pc, #352]	; (8005924 <HAL_GPIO_Init+0x32c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d037      	beq.n	8005836 <HAL_GPIO_Init+0x23e>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a57      	ldr	r2, [pc, #348]	; (8005928 <HAL_GPIO_Init+0x330>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d031      	beq.n	8005832 <HAL_GPIO_Init+0x23a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a56      	ldr	r2, [pc, #344]	; (800592c <HAL_GPIO_Init+0x334>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d02b      	beq.n	800582e <HAL_GPIO_Init+0x236>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a55      	ldr	r2, [pc, #340]	; (8005930 <HAL_GPIO_Init+0x338>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d025      	beq.n	800582a <HAL_GPIO_Init+0x232>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a54      	ldr	r2, [pc, #336]	; (8005934 <HAL_GPIO_Init+0x33c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d01f      	beq.n	8005826 <HAL_GPIO_Init+0x22e>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a53      	ldr	r2, [pc, #332]	; (8005938 <HAL_GPIO_Init+0x340>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d019      	beq.n	8005822 <HAL_GPIO_Init+0x22a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a52      	ldr	r2, [pc, #328]	; (800593c <HAL_GPIO_Init+0x344>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d013      	beq.n	800581e <HAL_GPIO_Init+0x226>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a51      	ldr	r2, [pc, #324]	; (8005940 <HAL_GPIO_Init+0x348>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d00d      	beq.n	800581a <HAL_GPIO_Init+0x222>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a50      	ldr	r2, [pc, #320]	; (8005944 <HAL_GPIO_Init+0x34c>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d007      	beq.n	8005816 <HAL_GPIO_Init+0x21e>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a4f      	ldr	r2, [pc, #316]	; (8005948 <HAL_GPIO_Init+0x350>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d101      	bne.n	8005812 <HAL_GPIO_Init+0x21a>
 800580e:	2309      	movs	r3, #9
 8005810:	e012      	b.n	8005838 <HAL_GPIO_Init+0x240>
 8005812:	230a      	movs	r3, #10
 8005814:	e010      	b.n	8005838 <HAL_GPIO_Init+0x240>
 8005816:	2308      	movs	r3, #8
 8005818:	e00e      	b.n	8005838 <HAL_GPIO_Init+0x240>
 800581a:	2307      	movs	r3, #7
 800581c:	e00c      	b.n	8005838 <HAL_GPIO_Init+0x240>
 800581e:	2306      	movs	r3, #6
 8005820:	e00a      	b.n	8005838 <HAL_GPIO_Init+0x240>
 8005822:	2305      	movs	r3, #5
 8005824:	e008      	b.n	8005838 <HAL_GPIO_Init+0x240>
 8005826:	2304      	movs	r3, #4
 8005828:	e006      	b.n	8005838 <HAL_GPIO_Init+0x240>
 800582a:	2303      	movs	r3, #3
 800582c:	e004      	b.n	8005838 <HAL_GPIO_Init+0x240>
 800582e:	2302      	movs	r3, #2
 8005830:	e002      	b.n	8005838 <HAL_GPIO_Init+0x240>
 8005832:	2301      	movs	r3, #1
 8005834:	e000      	b.n	8005838 <HAL_GPIO_Init+0x240>
 8005836:	2300      	movs	r3, #0
 8005838:	69fa      	ldr	r2, [r7, #28]
 800583a:	f002 0203 	and.w	r2, r2, #3
 800583e:	0092      	lsls	r2, r2, #2
 8005840:	4093      	lsls	r3, r2
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	4313      	orrs	r3, r2
 8005846:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005848:	4935      	ldr	r1, [pc, #212]	; (8005920 <HAL_GPIO_Init+0x328>)
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	089b      	lsrs	r3, r3, #2
 800584e:	3302      	adds	r3, #2
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005856:	4b3d      	ldr	r3, [pc, #244]	; (800594c <HAL_GPIO_Init+0x354>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	43db      	mvns	r3, r3
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	4013      	ands	r3, r2
 8005864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800587a:	4a34      	ldr	r2, [pc, #208]	; (800594c <HAL_GPIO_Init+0x354>)
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005880:	4b32      	ldr	r3, [pc, #200]	; (800594c <HAL_GPIO_Init+0x354>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	43db      	mvns	r3, r3
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	4013      	ands	r3, r2
 800588e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d003      	beq.n	80058a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058a4:	4a29      	ldr	r2, [pc, #164]	; (800594c <HAL_GPIO_Init+0x354>)
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80058aa:	4b28      	ldr	r3, [pc, #160]	; (800594c <HAL_GPIO_Init+0x354>)
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	43db      	mvns	r3, r3
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	4013      	ands	r3, r2
 80058b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058ce:	4a1f      	ldr	r2, [pc, #124]	; (800594c <HAL_GPIO_Init+0x354>)
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058d4:	4b1d      	ldr	r3, [pc, #116]	; (800594c <HAL_GPIO_Init+0x354>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	43db      	mvns	r3, r3
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	4013      	ands	r3, r2
 80058e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058f8:	4a14      	ldr	r2, [pc, #80]	; (800594c <HAL_GPIO_Init+0x354>)
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	3301      	adds	r3, #1
 8005902:	61fb      	str	r3, [r7, #28]
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	2b0f      	cmp	r3, #15
 8005908:	f67f ae86 	bls.w	8005618 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800590c:	bf00      	nop
 800590e:	bf00      	nop
 8005910:	3724      	adds	r7, #36	; 0x24
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40023800 	.word	0x40023800
 8005920:	40013800 	.word	0x40013800
 8005924:	40020000 	.word	0x40020000
 8005928:	40020400 	.word	0x40020400
 800592c:	40020800 	.word	0x40020800
 8005930:	40020c00 	.word	0x40020c00
 8005934:	40021000 	.word	0x40021000
 8005938:	40021400 	.word	0x40021400
 800593c:	40021800 	.word	0x40021800
 8005940:	40021c00 	.word	0x40021c00
 8005944:	40022000 	.word	0x40022000
 8005948:	40022400 	.word	0x40022400
 800594c:	40013c00 	.word	0x40013c00

08005950 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	460b      	mov	r3, r1
 800595a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	691a      	ldr	r2, [r3, #16]
 8005960:	887b      	ldrh	r3, [r7, #2]
 8005962:	4013      	ands	r3, r2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005968:	2301      	movs	r3, #1
 800596a:	73fb      	strb	r3, [r7, #15]
 800596c:	e001      	b.n	8005972 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800596e:	2300      	movs	r3, #0
 8005970:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005972:	7bfb      	ldrb	r3, [r7, #15]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	807b      	strh	r3, [r7, #2]
 800598c:	4613      	mov	r3, r2
 800598e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005990:	787b      	ldrb	r3, [r7, #1]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005996:	887a      	ldrh	r2, [r7, #2]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800599c:	e003      	b.n	80059a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800599e:	887b      	ldrh	r3, [r7, #2]
 80059a0:	041a      	lsls	r2, r3, #16
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	619a      	str	r2, [r3, #24]
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b085      	sub	sp, #20
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	460b      	mov	r3, r1
 80059bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059c4:	887a      	ldrh	r2, [r7, #2]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4013      	ands	r3, r2
 80059ca:	041a      	lsls	r2, r3, #16
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	43d9      	mvns	r1, r3
 80059d0:	887b      	ldrh	r3, [r7, #2]
 80059d2:	400b      	ands	r3, r1
 80059d4:	431a      	orrs	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	619a      	str	r2, [r3, #24]
}
 80059da:	bf00      	nop
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
	...

080059e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80059ee:	2300      	movs	r3, #0
 80059f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80059f2:	4b23      	ldr	r3, [pc, #140]	; (8005a80 <HAL_PWREx_EnableOverDrive+0x98>)
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	4a22      	ldr	r2, [pc, #136]	; (8005a80 <HAL_PWREx_EnableOverDrive+0x98>)
 80059f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059fc:	6413      	str	r3, [r2, #64]	; 0x40
 80059fe:	4b20      	ldr	r3, [pc, #128]	; (8005a80 <HAL_PWREx_EnableOverDrive+0x98>)
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a06:	603b      	str	r3, [r7, #0]
 8005a08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005a0a:	4b1e      	ldr	r3, [pc, #120]	; (8005a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a1d      	ldr	r2, [pc, #116]	; (8005a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a14:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a16:	f7fe f8ff 	bl	8003c18 <HAL_GetTick>
 8005a1a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005a1c:	e009      	b.n	8005a32 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005a1e:	f7fe f8fb 	bl	8003c18 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a2c:	d901      	bls.n	8005a32 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e022      	b.n	8005a78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005a32:	4b14      	ldr	r3, [pc, #80]	; (8005a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a3e:	d1ee      	bne.n	8005a1e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005a40:	4b10      	ldr	r3, [pc, #64]	; (8005a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a0f      	ldr	r2, [pc, #60]	; (8005a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a4c:	f7fe f8e4 	bl	8003c18 <HAL_GetTick>
 8005a50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005a52:	e009      	b.n	8005a68 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005a54:	f7fe f8e0 	bl	8003c18 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a62:	d901      	bls.n	8005a68 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e007      	b.n	8005a78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005a68:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a74:	d1ee      	bne.n	8005a54 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3708      	adds	r7, #8
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	40023800 	.word	0x40023800
 8005a84:	40007000 	.word	0x40007000

08005a88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005a90:	2300      	movs	r3, #0
 8005a92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e29b      	b.n	8005fd6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 8087 	beq.w	8005bba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005aac:	4b96      	ldr	r3, [pc, #600]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f003 030c 	and.w	r3, r3, #12
 8005ab4:	2b04      	cmp	r3, #4
 8005ab6:	d00c      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ab8:	4b93      	ldr	r3, [pc, #588]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f003 030c 	and.w	r3, r3, #12
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	d112      	bne.n	8005aea <HAL_RCC_OscConfig+0x62>
 8005ac4:	4b90      	ldr	r3, [pc, #576]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ad0:	d10b      	bne.n	8005aea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ad2:	4b8d      	ldr	r3, [pc, #564]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d06c      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x130>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d168      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e275      	b.n	8005fd6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af2:	d106      	bne.n	8005b02 <HAL_RCC_OscConfig+0x7a>
 8005af4:	4b84      	ldr	r3, [pc, #528]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a83      	ldr	r2, [pc, #524]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005afe:	6013      	str	r3, [r2, #0]
 8005b00:	e02e      	b.n	8005b60 <HAL_RCC_OscConfig+0xd8>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10c      	bne.n	8005b24 <HAL_RCC_OscConfig+0x9c>
 8005b0a:	4b7f      	ldr	r3, [pc, #508]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a7e      	ldr	r2, [pc, #504]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b14:	6013      	str	r3, [r2, #0]
 8005b16:	4b7c      	ldr	r3, [pc, #496]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a7b      	ldr	r2, [pc, #492]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005b1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	e01d      	b.n	8005b60 <HAL_RCC_OscConfig+0xd8>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b2c:	d10c      	bne.n	8005b48 <HAL_RCC_OscConfig+0xc0>
 8005b2e:	4b76      	ldr	r3, [pc, #472]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a75      	ldr	r2, [pc, #468]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	4b73      	ldr	r3, [pc, #460]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a72      	ldr	r2, [pc, #456]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	e00b      	b.n	8005b60 <HAL_RCC_OscConfig+0xd8>
 8005b48:	4b6f      	ldr	r3, [pc, #444]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a6e      	ldr	r2, [pc, #440]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b52:	6013      	str	r3, [r2, #0]
 8005b54:	4b6c      	ldr	r3, [pc, #432]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a6b      	ldr	r2, [pc, #428]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d013      	beq.n	8005b90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b68:	f7fe f856 	bl	8003c18 <HAL_GetTick>
 8005b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b6e:	e008      	b.n	8005b82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b70:	f7fe f852 	bl	8003c18 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	2b64      	cmp	r3, #100	; 0x64
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e229      	b.n	8005fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b82:	4b61      	ldr	r3, [pc, #388]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0f0      	beq.n	8005b70 <HAL_RCC_OscConfig+0xe8>
 8005b8e:	e014      	b.n	8005bba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b90:	f7fe f842 	bl	8003c18 <HAL_GetTick>
 8005b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b98:	f7fe f83e 	bl	8003c18 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b64      	cmp	r3, #100	; 0x64
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e215      	b.n	8005fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005baa:	4b57      	ldr	r3, [pc, #348]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1f0      	bne.n	8005b98 <HAL_RCC_OscConfig+0x110>
 8005bb6:	e000      	b.n	8005bba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d069      	beq.n	8005c9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bc6:	4b50      	ldr	r3, [pc, #320]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f003 030c 	and.w	r3, r3, #12
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00b      	beq.n	8005bea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bd2:	4b4d      	ldr	r3, [pc, #308]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f003 030c 	and.w	r3, r3, #12
 8005bda:	2b08      	cmp	r3, #8
 8005bdc:	d11c      	bne.n	8005c18 <HAL_RCC_OscConfig+0x190>
 8005bde:	4b4a      	ldr	r3, [pc, #296]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d116      	bne.n	8005c18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bea:	4b47      	ldr	r3, [pc, #284]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d005      	beq.n	8005c02 <HAL_RCC_OscConfig+0x17a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d001      	beq.n	8005c02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e1e9      	b.n	8005fd6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c02:	4b41      	ldr	r3, [pc, #260]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	00db      	lsls	r3, r3, #3
 8005c10:	493d      	ldr	r1, [pc, #244]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c16:	e040      	b.n	8005c9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d023      	beq.n	8005c68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c20:	4b39      	ldr	r3, [pc, #228]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a38      	ldr	r2, [pc, #224]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005c26:	f043 0301 	orr.w	r3, r3, #1
 8005c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2c:	f7fd fff4 	bl	8003c18 <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c32:	e008      	b.n	8005c46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c34:	f7fd fff0 	bl	8003c18 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e1c7      	b.n	8005fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c46:	4b30      	ldr	r3, [pc, #192]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0f0      	beq.n	8005c34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c52:	4b2d      	ldr	r3, [pc, #180]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	4929      	ldr	r1, [pc, #164]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	600b      	str	r3, [r1, #0]
 8005c66:	e018      	b.n	8005c9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c68:	4b27      	ldr	r3, [pc, #156]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a26      	ldr	r2, [pc, #152]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005c6e:	f023 0301 	bic.w	r3, r3, #1
 8005c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c74:	f7fd ffd0 	bl	8003c18 <HAL_GetTick>
 8005c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c7c:	f7fd ffcc 	bl	8003c18 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e1a3      	b.n	8005fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c8e:	4b1e      	ldr	r3, [pc, #120]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1f0      	bne.n	8005c7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0308 	and.w	r3, r3, #8
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d038      	beq.n	8005d18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d019      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cae:	4b16      	ldr	r3, [pc, #88]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cb2:	4a15      	ldr	r2, [pc, #84]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005cb4:	f043 0301 	orr.w	r3, r3, #1
 8005cb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cba:	f7fd ffad 	bl	8003c18 <HAL_GetTick>
 8005cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cc2:	f7fd ffa9 	bl	8003c18 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e180      	b.n	8005fd6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cd4:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d0f0      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x23a>
 8005ce0:	e01a      	b.n	8005d18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ce2:	4b09      	ldr	r3, [pc, #36]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce6:	4a08      	ldr	r2, [pc, #32]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005ce8:	f023 0301 	bic.w	r3, r3, #1
 8005cec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cee:	f7fd ff93 	bl	8003c18 <HAL_GetTick>
 8005cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cf4:	e00a      	b.n	8005d0c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cf6:	f7fd ff8f 	bl	8003c18 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d903      	bls.n	8005d0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e166      	b.n	8005fd6 <HAL_RCC_OscConfig+0x54e>
 8005d08:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d0c:	4b92      	ldr	r3, [pc, #584]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1ee      	bne.n	8005cf6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 80a4 	beq.w	8005e6e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d26:	4b8c      	ldr	r3, [pc, #560]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10d      	bne.n	8005d4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d32:	4b89      	ldr	r3, [pc, #548]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d36:	4a88      	ldr	r2, [pc, #544]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d3e:	4b86      	ldr	r3, [pc, #536]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d46:	60bb      	str	r3, [r7, #8]
 8005d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d4e:	4b83      	ldr	r3, [pc, #524]	; (8005f5c <HAL_RCC_OscConfig+0x4d4>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d118      	bne.n	8005d8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005d5a:	4b80      	ldr	r3, [pc, #512]	; (8005f5c <HAL_RCC_OscConfig+0x4d4>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a7f      	ldr	r2, [pc, #508]	; (8005f5c <HAL_RCC_OscConfig+0x4d4>)
 8005d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d66:	f7fd ff57 	bl	8003c18 <HAL_GetTick>
 8005d6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d6c:	e008      	b.n	8005d80 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d6e:	f7fd ff53 	bl	8003c18 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b64      	cmp	r3, #100	; 0x64
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e12a      	b.n	8005fd6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d80:	4b76      	ldr	r3, [pc, #472]	; (8005f5c <HAL_RCC_OscConfig+0x4d4>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d0f0      	beq.n	8005d6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d106      	bne.n	8005da2 <HAL_RCC_OscConfig+0x31a>
 8005d94:	4b70      	ldr	r3, [pc, #448]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d98:	4a6f      	ldr	r2, [pc, #444]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005d9a:	f043 0301 	orr.w	r3, r3, #1
 8005d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8005da0:	e02d      	b.n	8005dfe <HAL_RCC_OscConfig+0x376>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10c      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x33c>
 8005daa:	4b6b      	ldr	r3, [pc, #428]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dae:	4a6a      	ldr	r2, [pc, #424]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005db0:	f023 0301 	bic.w	r3, r3, #1
 8005db4:	6713      	str	r3, [r2, #112]	; 0x70
 8005db6:	4b68      	ldr	r3, [pc, #416]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dba:	4a67      	ldr	r2, [pc, #412]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005dbc:	f023 0304 	bic.w	r3, r3, #4
 8005dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8005dc2:	e01c      	b.n	8005dfe <HAL_RCC_OscConfig+0x376>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	2b05      	cmp	r3, #5
 8005dca:	d10c      	bne.n	8005de6 <HAL_RCC_OscConfig+0x35e>
 8005dcc:	4b62      	ldr	r3, [pc, #392]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd0:	4a61      	ldr	r2, [pc, #388]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005dd2:	f043 0304 	orr.w	r3, r3, #4
 8005dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8005dd8:	4b5f      	ldr	r3, [pc, #380]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ddc:	4a5e      	ldr	r2, [pc, #376]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005dde:	f043 0301 	orr.w	r3, r3, #1
 8005de2:	6713      	str	r3, [r2, #112]	; 0x70
 8005de4:	e00b      	b.n	8005dfe <HAL_RCC_OscConfig+0x376>
 8005de6:	4b5c      	ldr	r3, [pc, #368]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dea:	4a5b      	ldr	r2, [pc, #364]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005dec:	f023 0301 	bic.w	r3, r3, #1
 8005df0:	6713      	str	r3, [r2, #112]	; 0x70
 8005df2:	4b59      	ldr	r3, [pc, #356]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df6:	4a58      	ldr	r2, [pc, #352]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005df8:	f023 0304 	bic.w	r3, r3, #4
 8005dfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d015      	beq.n	8005e32 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e06:	f7fd ff07 	bl	8003c18 <HAL_GetTick>
 8005e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e0c:	e00a      	b.n	8005e24 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e0e:	f7fd ff03 	bl	8003c18 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d901      	bls.n	8005e24 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e0d8      	b.n	8005fd6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e24:	4b4c      	ldr	r3, [pc, #304]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0ee      	beq.n	8005e0e <HAL_RCC_OscConfig+0x386>
 8005e30:	e014      	b.n	8005e5c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e32:	f7fd fef1 	bl	8003c18 <HAL_GetTick>
 8005e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e38:	e00a      	b.n	8005e50 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e3a:	f7fd feed 	bl	8003c18 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d901      	bls.n	8005e50 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e0c2      	b.n	8005fd6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e50:	4b41      	ldr	r3, [pc, #260]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e54:	f003 0302 	and.w	r3, r3, #2
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1ee      	bne.n	8005e3a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e5c:	7dfb      	ldrb	r3, [r7, #23]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d105      	bne.n	8005e6e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e62:	4b3d      	ldr	r3, [pc, #244]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e66:	4a3c      	ldr	r2, [pc, #240]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 80ae 	beq.w	8005fd4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e78:	4b37      	ldr	r3, [pc, #220]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f003 030c 	and.w	r3, r3, #12
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d06d      	beq.n	8005f60 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d14b      	bne.n	8005f24 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e8c:	4b32      	ldr	r3, [pc, #200]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a31      	ldr	r2, [pc, #196]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e98:	f7fd febe 	bl	8003c18 <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ea0:	f7fd feba 	bl	8003c18 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e091      	b.n	8005fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eb2:	4b29      	ldr	r3, [pc, #164]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1f0      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	69da      	ldr	r2, [r3, #28]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ecc:	019b      	lsls	r3, r3, #6
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed4:	085b      	lsrs	r3, r3, #1
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	041b      	lsls	r3, r3, #16
 8005eda:	431a      	orrs	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee0:	061b      	lsls	r3, r3, #24
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee8:	071b      	lsls	r3, r3, #28
 8005eea:	491b      	ldr	r1, [pc, #108]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ef0:	4b19      	ldr	r3, [pc, #100]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a18      	ldr	r2, [pc, #96]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005efc:	f7fd fe8c 	bl	8003c18 <HAL_GetTick>
 8005f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f02:	e008      	b.n	8005f16 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f04:	f7fd fe88 	bl	8003c18 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e05f      	b.n	8005fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f16:	4b10      	ldr	r3, [pc, #64]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0f0      	beq.n	8005f04 <HAL_RCC_OscConfig+0x47c>
 8005f22:	e057      	b.n	8005fd4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f24:	4b0c      	ldr	r3, [pc, #48]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a0b      	ldr	r2, [pc, #44]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f30:	f7fd fe72 	bl	8003c18 <HAL_GetTick>
 8005f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f36:	e008      	b.n	8005f4a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f38:	f7fd fe6e 	bl	8003c18 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e045      	b.n	8005fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f4a:	4b03      	ldr	r3, [pc, #12]	; (8005f58 <HAL_RCC_OscConfig+0x4d0>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1f0      	bne.n	8005f38 <HAL_RCC_OscConfig+0x4b0>
 8005f56:	e03d      	b.n	8005fd4 <HAL_RCC_OscConfig+0x54c>
 8005f58:	40023800 	.word	0x40023800
 8005f5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005f60:	4b1f      	ldr	r3, [pc, #124]	; (8005fe0 <HAL_RCC_OscConfig+0x558>)
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d030      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d129      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d122      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f90:	4013      	ands	r3, r2
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f96:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d119      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa6:	085b      	lsrs	r3, r3, #1
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d10f      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d107      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d001      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e000      	b.n	8005fd6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	40023800 	.word	0x40023800

08005fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e0d0      	b.n	800619e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ffc:	4b6a      	ldr	r3, [pc, #424]	; (80061a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 030f 	and.w	r3, r3, #15
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d910      	bls.n	800602c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800600a:	4b67      	ldr	r3, [pc, #412]	; (80061a8 <HAL_RCC_ClockConfig+0x1c4>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f023 020f 	bic.w	r2, r3, #15
 8006012:	4965      	ldr	r1, [pc, #404]	; (80061a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	4313      	orrs	r3, r2
 8006018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800601a:	4b63      	ldr	r3, [pc, #396]	; (80061a8 <HAL_RCC_ClockConfig+0x1c4>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 030f 	and.w	r3, r3, #15
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	429a      	cmp	r2, r3
 8006026:	d001      	beq.n	800602c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e0b8      	b.n	800619e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d020      	beq.n	800607a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b00      	cmp	r3, #0
 8006042:	d005      	beq.n	8006050 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006044:	4b59      	ldr	r3, [pc, #356]	; (80061ac <HAL_RCC_ClockConfig+0x1c8>)
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	4a58      	ldr	r2, [pc, #352]	; (80061ac <HAL_RCC_ClockConfig+0x1c8>)
 800604a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800604e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0308 	and.w	r3, r3, #8
 8006058:	2b00      	cmp	r3, #0
 800605a:	d005      	beq.n	8006068 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800605c:	4b53      	ldr	r3, [pc, #332]	; (80061ac <HAL_RCC_ClockConfig+0x1c8>)
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	4a52      	ldr	r2, [pc, #328]	; (80061ac <HAL_RCC_ClockConfig+0x1c8>)
 8006062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006066:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006068:	4b50      	ldr	r3, [pc, #320]	; (80061ac <HAL_RCC_ClockConfig+0x1c8>)
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	494d      	ldr	r1, [pc, #308]	; (80061ac <HAL_RCC_ClockConfig+0x1c8>)
 8006076:	4313      	orrs	r3, r2
 8006078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d040      	beq.n	8006108 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d107      	bne.n	800609e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800608e:	4b47      	ldr	r3, [pc, #284]	; (80061ac <HAL_RCC_ClockConfig+0x1c8>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d115      	bne.n	80060c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e07f      	b.n	800619e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d107      	bne.n	80060b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060a6:	4b41      	ldr	r3, [pc, #260]	; (80061ac <HAL_RCC_ClockConfig+0x1c8>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d109      	bne.n	80060c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e073      	b.n	800619e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060b6:	4b3d      	ldr	r3, [pc, #244]	; (80061ac <HAL_RCC_ClockConfig+0x1c8>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e06b      	b.n	800619e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060c6:	4b39      	ldr	r3, [pc, #228]	; (80061ac <HAL_RCC_ClockConfig+0x1c8>)
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f023 0203 	bic.w	r2, r3, #3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	4936      	ldr	r1, [pc, #216]	; (80061ac <HAL_RCC_ClockConfig+0x1c8>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060d8:	f7fd fd9e 	bl	8003c18 <HAL_GetTick>
 80060dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060de:	e00a      	b.n	80060f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060e0:	f7fd fd9a 	bl	8003c18 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e053      	b.n	800619e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060f6:	4b2d      	ldr	r3, [pc, #180]	; (80061ac <HAL_RCC_ClockConfig+0x1c8>)
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f003 020c 	and.w	r2, r3, #12
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	429a      	cmp	r2, r3
 8006106:	d1eb      	bne.n	80060e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006108:	4b27      	ldr	r3, [pc, #156]	; (80061a8 <HAL_RCC_ClockConfig+0x1c4>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 030f 	and.w	r3, r3, #15
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	429a      	cmp	r2, r3
 8006114:	d210      	bcs.n	8006138 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006116:	4b24      	ldr	r3, [pc, #144]	; (80061a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f023 020f 	bic.w	r2, r3, #15
 800611e:	4922      	ldr	r1, [pc, #136]	; (80061a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	4313      	orrs	r3, r2
 8006124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006126:	4b20      	ldr	r3, [pc, #128]	; (80061a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	429a      	cmp	r2, r3
 8006132:	d001      	beq.n	8006138 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e032      	b.n	800619e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0304 	and.w	r3, r3, #4
 8006140:	2b00      	cmp	r3, #0
 8006142:	d008      	beq.n	8006156 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006144:	4b19      	ldr	r3, [pc, #100]	; (80061ac <HAL_RCC_ClockConfig+0x1c8>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	4916      	ldr	r1, [pc, #88]	; (80061ac <HAL_RCC_ClockConfig+0x1c8>)
 8006152:	4313      	orrs	r3, r2
 8006154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0308 	and.w	r3, r3, #8
 800615e:	2b00      	cmp	r3, #0
 8006160:	d009      	beq.n	8006176 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006162:	4b12      	ldr	r3, [pc, #72]	; (80061ac <HAL_RCC_ClockConfig+0x1c8>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	490e      	ldr	r1, [pc, #56]	; (80061ac <HAL_RCC_ClockConfig+0x1c8>)
 8006172:	4313      	orrs	r3, r2
 8006174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006176:	f000 f821 	bl	80061bc <HAL_RCC_GetSysClockFreq>
 800617a:	4602      	mov	r2, r0
 800617c:	4b0b      	ldr	r3, [pc, #44]	; (80061ac <HAL_RCC_ClockConfig+0x1c8>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	091b      	lsrs	r3, r3, #4
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	490a      	ldr	r1, [pc, #40]	; (80061b0 <HAL_RCC_ClockConfig+0x1cc>)
 8006188:	5ccb      	ldrb	r3, [r1, r3]
 800618a:	fa22 f303 	lsr.w	r3, r2, r3
 800618e:	4a09      	ldr	r2, [pc, #36]	; (80061b4 <HAL_RCC_ClockConfig+0x1d0>)
 8006190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006192:	4b09      	ldr	r3, [pc, #36]	; (80061b8 <HAL_RCC_ClockConfig+0x1d4>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4618      	mov	r0, r3
 8006198:	f7fd fcfa 	bl	8003b90 <HAL_InitTick>

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	40023c00 	.word	0x40023c00
 80061ac:	40023800 	.word	0x40023800
 80061b0:	08009154 	.word	0x08009154
 80061b4:	200000c4 	.word	0x200000c4
 80061b8:	200000c8 	.word	0x200000c8

080061bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061c0:	b090      	sub	sp, #64	; 0x40
 80061c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80061c4:	2300      	movs	r3, #0
 80061c6:	637b      	str	r3, [r7, #52]	; 0x34
 80061c8:	2300      	movs	r3, #0
 80061ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061cc:	2300      	movs	r3, #0
 80061ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80061d0:	2300      	movs	r3, #0
 80061d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061d4:	4b59      	ldr	r3, [pc, #356]	; (800633c <HAL_RCC_GetSysClockFreq+0x180>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f003 030c 	and.w	r3, r3, #12
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d00d      	beq.n	80061fc <HAL_RCC_GetSysClockFreq+0x40>
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	f200 80a1 	bhi.w	8006328 <HAL_RCC_GetSysClockFreq+0x16c>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <HAL_RCC_GetSysClockFreq+0x34>
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	d003      	beq.n	80061f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80061ee:	e09b      	b.n	8006328 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061f0:	4b53      	ldr	r3, [pc, #332]	; (8006340 <HAL_RCC_GetSysClockFreq+0x184>)
 80061f2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80061f4:	e09b      	b.n	800632e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061f6:	4b53      	ldr	r3, [pc, #332]	; (8006344 <HAL_RCC_GetSysClockFreq+0x188>)
 80061f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80061fa:	e098      	b.n	800632e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061fc:	4b4f      	ldr	r3, [pc, #316]	; (800633c <HAL_RCC_GetSysClockFreq+0x180>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006204:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006206:	4b4d      	ldr	r3, [pc, #308]	; (800633c <HAL_RCC_GetSysClockFreq+0x180>)
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d028      	beq.n	8006264 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006212:	4b4a      	ldr	r3, [pc, #296]	; (800633c <HAL_RCC_GetSysClockFreq+0x180>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	099b      	lsrs	r3, r3, #6
 8006218:	2200      	movs	r2, #0
 800621a:	623b      	str	r3, [r7, #32]
 800621c:	627a      	str	r2, [r7, #36]	; 0x24
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006224:	2100      	movs	r1, #0
 8006226:	4b47      	ldr	r3, [pc, #284]	; (8006344 <HAL_RCC_GetSysClockFreq+0x188>)
 8006228:	fb03 f201 	mul.w	r2, r3, r1
 800622c:	2300      	movs	r3, #0
 800622e:	fb00 f303 	mul.w	r3, r0, r3
 8006232:	4413      	add	r3, r2
 8006234:	4a43      	ldr	r2, [pc, #268]	; (8006344 <HAL_RCC_GetSysClockFreq+0x188>)
 8006236:	fba0 1202 	umull	r1, r2, r0, r2
 800623a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800623c:	460a      	mov	r2, r1
 800623e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006242:	4413      	add	r3, r2
 8006244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006248:	2200      	movs	r2, #0
 800624a:	61bb      	str	r3, [r7, #24]
 800624c:	61fa      	str	r2, [r7, #28]
 800624e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006252:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006256:	f7f9 fff7 	bl	8000248 <__aeabi_uldivmod>
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
 800625e:	4613      	mov	r3, r2
 8006260:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006262:	e053      	b.n	800630c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006264:	4b35      	ldr	r3, [pc, #212]	; (800633c <HAL_RCC_GetSysClockFreq+0x180>)
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	099b      	lsrs	r3, r3, #6
 800626a:	2200      	movs	r2, #0
 800626c:	613b      	str	r3, [r7, #16]
 800626e:	617a      	str	r2, [r7, #20]
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006276:	f04f 0b00 	mov.w	fp, #0
 800627a:	4652      	mov	r2, sl
 800627c:	465b      	mov	r3, fp
 800627e:	f04f 0000 	mov.w	r0, #0
 8006282:	f04f 0100 	mov.w	r1, #0
 8006286:	0159      	lsls	r1, r3, #5
 8006288:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800628c:	0150      	lsls	r0, r2, #5
 800628e:	4602      	mov	r2, r0
 8006290:	460b      	mov	r3, r1
 8006292:	ebb2 080a 	subs.w	r8, r2, sl
 8006296:	eb63 090b 	sbc.w	r9, r3, fp
 800629a:	f04f 0200 	mov.w	r2, #0
 800629e:	f04f 0300 	mov.w	r3, #0
 80062a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80062a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80062aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80062ae:	ebb2 0408 	subs.w	r4, r2, r8
 80062b2:	eb63 0509 	sbc.w	r5, r3, r9
 80062b6:	f04f 0200 	mov.w	r2, #0
 80062ba:	f04f 0300 	mov.w	r3, #0
 80062be:	00eb      	lsls	r3, r5, #3
 80062c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062c4:	00e2      	lsls	r2, r4, #3
 80062c6:	4614      	mov	r4, r2
 80062c8:	461d      	mov	r5, r3
 80062ca:	eb14 030a 	adds.w	r3, r4, sl
 80062ce:	603b      	str	r3, [r7, #0]
 80062d0:	eb45 030b 	adc.w	r3, r5, fp
 80062d4:	607b      	str	r3, [r7, #4]
 80062d6:	f04f 0200 	mov.w	r2, #0
 80062da:	f04f 0300 	mov.w	r3, #0
 80062de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062e2:	4629      	mov	r1, r5
 80062e4:	028b      	lsls	r3, r1, #10
 80062e6:	4621      	mov	r1, r4
 80062e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062ec:	4621      	mov	r1, r4
 80062ee:	028a      	lsls	r2, r1, #10
 80062f0:	4610      	mov	r0, r2
 80062f2:	4619      	mov	r1, r3
 80062f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f6:	2200      	movs	r2, #0
 80062f8:	60bb      	str	r3, [r7, #8]
 80062fa:	60fa      	str	r2, [r7, #12]
 80062fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006300:	f7f9 ffa2 	bl	8000248 <__aeabi_uldivmod>
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	4613      	mov	r3, r2
 800630a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800630c:	4b0b      	ldr	r3, [pc, #44]	; (800633c <HAL_RCC_GetSysClockFreq+0x180>)
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	0c1b      	lsrs	r3, r3, #16
 8006312:	f003 0303 	and.w	r3, r3, #3
 8006316:	3301      	adds	r3, #1
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800631c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006320:	fbb2 f3f3 	udiv	r3, r2, r3
 8006324:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006326:	e002      	b.n	800632e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006328:	4b05      	ldr	r3, [pc, #20]	; (8006340 <HAL_RCC_GetSysClockFreq+0x184>)
 800632a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800632c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800632e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006330:	4618      	mov	r0, r3
 8006332:	3740      	adds	r7, #64	; 0x40
 8006334:	46bd      	mov	sp, r7
 8006336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800633a:	bf00      	nop
 800633c:	40023800 	.word	0x40023800
 8006340:	00f42400 	.word	0x00f42400
 8006344:	017d7840 	.word	0x017d7840

08006348 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006348:	b480      	push	{r7}
 800634a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800634c:	4b03      	ldr	r3, [pc, #12]	; (800635c <HAL_RCC_GetHCLKFreq+0x14>)
 800634e:	681b      	ldr	r3, [r3, #0]
}
 8006350:	4618      	mov	r0, r3
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	200000c4 	.word	0x200000c4

08006360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006364:	f7ff fff0 	bl	8006348 <HAL_RCC_GetHCLKFreq>
 8006368:	4602      	mov	r2, r0
 800636a:	4b05      	ldr	r3, [pc, #20]	; (8006380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	0a9b      	lsrs	r3, r3, #10
 8006370:	f003 0307 	and.w	r3, r3, #7
 8006374:	4903      	ldr	r1, [pc, #12]	; (8006384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006376:	5ccb      	ldrb	r3, [r1, r3]
 8006378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800637c:	4618      	mov	r0, r3
 800637e:	bd80      	pop	{r7, pc}
 8006380:	40023800 	.word	0x40023800
 8006384:	08009164 	.word	0x08009164

08006388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800638c:	f7ff ffdc 	bl	8006348 <HAL_RCC_GetHCLKFreq>
 8006390:	4602      	mov	r2, r0
 8006392:	4b05      	ldr	r3, [pc, #20]	; (80063a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	0b5b      	lsrs	r3, r3, #13
 8006398:	f003 0307 	and.w	r3, r3, #7
 800639c:	4903      	ldr	r1, [pc, #12]	; (80063ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800639e:	5ccb      	ldrb	r3, [r1, r3]
 80063a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	40023800 	.word	0x40023800
 80063ac:	08009164 	.word	0x08009164

080063b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b088      	sub	sp, #32
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80063b8:	2300      	movs	r3, #0
 80063ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80063bc:	2300      	movs	r3, #0
 80063be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80063c0:	2300      	movs	r3, #0
 80063c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80063c4:	2300      	movs	r3, #0
 80063c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80063c8:	2300      	movs	r3, #0
 80063ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d012      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80063d8:	4b69      	ldr	r3, [pc, #420]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	4a68      	ldr	r2, [pc, #416]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80063e2:	6093      	str	r3, [r2, #8]
 80063e4:	4b66      	ldr	r3, [pc, #408]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ec:	4964      	ldr	r1, [pc, #400]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80063fa:	2301      	movs	r3, #1
 80063fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d017      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800640a:	4b5d      	ldr	r3, [pc, #372]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800640c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006410:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006418:	4959      	ldr	r1, [pc, #356]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800641a:	4313      	orrs	r3, r2
 800641c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006428:	d101      	bne.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800642a:	2301      	movs	r3, #1
 800642c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006436:	2301      	movs	r3, #1
 8006438:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d017      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006446:	4b4e      	ldr	r3, [pc, #312]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800644c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006454:	494a      	ldr	r1, [pc, #296]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006456:	4313      	orrs	r3, r2
 8006458:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006464:	d101      	bne.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006466:	2301      	movs	r3, #1
 8006468:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006472:	2301      	movs	r3, #1
 8006474:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006482:	2301      	movs	r3, #1
 8006484:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0320 	and.w	r3, r3, #32
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 808b 	beq.w	80065aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006494:	4b3a      	ldr	r3, [pc, #232]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006498:	4a39      	ldr	r2, [pc, #228]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800649a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800649e:	6413      	str	r3, [r2, #64]	; 0x40
 80064a0:	4b37      	ldr	r3, [pc, #220]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064a8:	60bb      	str	r3, [r7, #8]
 80064aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80064ac:	4b35      	ldr	r3, [pc, #212]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a34      	ldr	r2, [pc, #208]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064b8:	f7fd fbae 	bl	8003c18 <HAL_GetTick>
 80064bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80064be:	e008      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064c0:	f7fd fbaa 	bl	8003c18 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b64      	cmp	r3, #100	; 0x64
 80064cc:	d901      	bls.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e38f      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80064d2:	4b2c      	ldr	r3, [pc, #176]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d0f0      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064de:	4b28      	ldr	r3, [pc, #160]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d035      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d02e      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064fc:	4b20      	ldr	r3, [pc, #128]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006504:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006506:	4b1e      	ldr	r3, [pc, #120]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800650a:	4a1d      	ldr	r2, [pc, #116]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800650c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006510:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006512:	4b1b      	ldr	r3, [pc, #108]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006516:	4a1a      	ldr	r2, [pc, #104]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800651c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800651e:	4a18      	ldr	r2, [pc, #96]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006524:	4b16      	ldr	r3, [pc, #88]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b01      	cmp	r3, #1
 800652e:	d114      	bne.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006530:	f7fd fb72 	bl	8003c18 <HAL_GetTick>
 8006534:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006536:	e00a      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006538:	f7fd fb6e 	bl	8003c18 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	f241 3288 	movw	r2, #5000	; 0x1388
 8006546:	4293      	cmp	r3, r2
 8006548:	d901      	bls.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e351      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800654e:	4b0c      	ldr	r3, [pc, #48]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d0ee      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006566:	d111      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006568:	4b05      	ldr	r3, [pc, #20]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006574:	4b04      	ldr	r3, [pc, #16]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006576:	400b      	ands	r3, r1
 8006578:	4901      	ldr	r1, [pc, #4]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800657a:	4313      	orrs	r3, r2
 800657c:	608b      	str	r3, [r1, #8]
 800657e:	e00b      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006580:	40023800 	.word	0x40023800
 8006584:	40007000 	.word	0x40007000
 8006588:	0ffffcff 	.word	0x0ffffcff
 800658c:	4bac      	ldr	r3, [pc, #688]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	4aab      	ldr	r2, [pc, #684]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006592:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006596:	6093      	str	r3, [r2, #8]
 8006598:	4ba9      	ldr	r3, [pc, #676]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800659a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065a4:	49a6      	ldr	r1, [pc, #664]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0310 	and.w	r3, r3, #16
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d010      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065b6:	4ba2      	ldr	r3, [pc, #648]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065bc:	4aa0      	ldr	r2, [pc, #640]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80065c6:	4b9e      	ldr	r3, [pc, #632]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d0:	499b      	ldr	r1, [pc, #620]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00a      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065e4:	4b96      	ldr	r3, [pc, #600]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065f2:	4993      	ldr	r1, [pc, #588]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00a      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006606:	4b8e      	ldr	r3, [pc, #568]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006614:	498a      	ldr	r1, [pc, #552]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006616:	4313      	orrs	r3, r2
 8006618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00a      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006628:	4b85      	ldr	r3, [pc, #532]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800662a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800662e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006636:	4982      	ldr	r1, [pc, #520]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006638:	4313      	orrs	r3, r2
 800663a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00a      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800664a:	4b7d      	ldr	r3, [pc, #500]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800664c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006650:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006658:	4979      	ldr	r1, [pc, #484]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800665a:	4313      	orrs	r3, r2
 800665c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00a      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800666c:	4b74      	ldr	r3, [pc, #464]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800666e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006672:	f023 0203 	bic.w	r2, r3, #3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667a:	4971      	ldr	r1, [pc, #452]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800667c:	4313      	orrs	r3, r2
 800667e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00a      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800668e:	4b6c      	ldr	r3, [pc, #432]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006694:	f023 020c 	bic.w	r2, r3, #12
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800669c:	4968      	ldr	r1, [pc, #416]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00a      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066b0:	4b63      	ldr	r3, [pc, #396]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066be:	4960      	ldr	r1, [pc, #384]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066d2:	4b5b      	ldr	r3, [pc, #364]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e0:	4957      	ldr	r1, [pc, #348]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00a      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80066f4:	4b52      	ldr	r3, [pc, #328]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006702:	494f      	ldr	r1, [pc, #316]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006704:	4313      	orrs	r3, r2
 8006706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00a      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006716:	4b4a      	ldr	r3, [pc, #296]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800671c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006724:	4946      	ldr	r1, [pc, #280]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006726:	4313      	orrs	r3, r2
 8006728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00a      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006738:	4b41      	ldr	r3, [pc, #260]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800673a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800673e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006746:	493e      	ldr	r1, [pc, #248]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006748:	4313      	orrs	r3, r2
 800674a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00a      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800675a:	4b39      	ldr	r3, [pc, #228]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800675c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006760:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006768:	4935      	ldr	r1, [pc, #212]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800676a:	4313      	orrs	r3, r2
 800676c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00a      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800677c:	4b30      	ldr	r3, [pc, #192]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800677e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006782:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800678a:	492d      	ldr	r1, [pc, #180]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800678c:	4313      	orrs	r3, r2
 800678e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d011      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800679e:	4b28      	ldr	r3, [pc, #160]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067ac:	4924      	ldr	r1, [pc, #144]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067bc:	d101      	bne.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80067be:	2301      	movs	r3, #1
 80067c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0308 	and.w	r3, r3, #8
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80067ce:	2301      	movs	r3, #1
 80067d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00a      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067de:	4b18      	ldr	r3, [pc, #96]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ec:	4914      	ldr	r1, [pc, #80]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00b      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006800:	4b0f      	ldr	r3, [pc, #60]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006806:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006810:	490b      	ldr	r1, [pc, #44]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006812:	4313      	orrs	r3, r2
 8006814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00f      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006824:	4b06      	ldr	r3, [pc, #24]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800682a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006834:	4902      	ldr	r1, [pc, #8]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006836:	4313      	orrs	r3, r2
 8006838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800683c:	e002      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800683e:	bf00      	nop
 8006840:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00b      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006850:	4b8a      	ldr	r3, [pc, #552]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006856:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006860:	4986      	ldr	r1, [pc, #536]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006862:	4313      	orrs	r3, r2
 8006864:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00b      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006874:	4b81      	ldr	r3, [pc, #516]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800687a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006884:	497d      	ldr	r1, [pc, #500]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006886:	4313      	orrs	r3, r2
 8006888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d006      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 80d6 	beq.w	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80068a0:	4b76      	ldr	r3, [pc, #472]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a75      	ldr	r2, [pc, #468]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068ac:	f7fd f9b4 	bl	8003c18 <HAL_GetTick>
 80068b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068b2:	e008      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80068b4:	f7fd f9b0 	bl	8003c18 <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	2b64      	cmp	r3, #100	; 0x64
 80068c0:	d901      	bls.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e195      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068c6:	4b6d      	ldr	r3, [pc, #436]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1f0      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d021      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d11d      	bne.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80068e6:	4b65      	ldr	r3, [pc, #404]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068ec:	0c1b      	lsrs	r3, r3, #16
 80068ee:	f003 0303 	and.w	r3, r3, #3
 80068f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80068f4:	4b61      	ldr	r3, [pc, #388]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068fa:	0e1b      	lsrs	r3, r3, #24
 80068fc:	f003 030f 	and.w	r3, r3, #15
 8006900:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	019a      	lsls	r2, r3, #6
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	041b      	lsls	r3, r3, #16
 800690c:	431a      	orrs	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	061b      	lsls	r3, r3, #24
 8006912:	431a      	orrs	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	071b      	lsls	r3, r3, #28
 800691a:	4958      	ldr	r1, [pc, #352]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800691c:	4313      	orrs	r3, r2
 800691e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d004      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006936:	d00a      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006940:	2b00      	cmp	r3, #0
 8006942:	d02e      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800694c:	d129      	bne.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800694e:	4b4b      	ldr	r3, [pc, #300]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006954:	0c1b      	lsrs	r3, r3, #16
 8006956:	f003 0303 	and.w	r3, r3, #3
 800695a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800695c:	4b47      	ldr	r3, [pc, #284]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800695e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006962:	0f1b      	lsrs	r3, r3, #28
 8006964:	f003 0307 	and.w	r3, r3, #7
 8006968:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	019a      	lsls	r2, r3, #6
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	041b      	lsls	r3, r3, #16
 8006974:	431a      	orrs	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	061b      	lsls	r3, r3, #24
 800697c:	431a      	orrs	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	071b      	lsls	r3, r3, #28
 8006982:	493e      	ldr	r1, [pc, #248]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006984:	4313      	orrs	r3, r2
 8006986:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800698a:	4b3c      	ldr	r3, [pc, #240]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800698c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006990:	f023 021f 	bic.w	r2, r3, #31
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	3b01      	subs	r3, #1
 800699a:	4938      	ldr	r1, [pc, #224]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800699c:	4313      	orrs	r3, r2
 800699e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d01d      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80069ae:	4b33      	ldr	r3, [pc, #204]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80069b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069b4:	0e1b      	lsrs	r3, r3, #24
 80069b6:	f003 030f 	and.w	r3, r3, #15
 80069ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80069bc:	4b2f      	ldr	r3, [pc, #188]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80069be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069c2:	0f1b      	lsrs	r3, r3, #28
 80069c4:	f003 0307 	and.w	r3, r3, #7
 80069c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	019a      	lsls	r2, r3, #6
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	041b      	lsls	r3, r3, #16
 80069d6:	431a      	orrs	r2, r3
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	061b      	lsls	r3, r3, #24
 80069dc:	431a      	orrs	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	071b      	lsls	r3, r3, #28
 80069e2:	4926      	ldr	r1, [pc, #152]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d011      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	019a      	lsls	r2, r3, #6
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	041b      	lsls	r3, r3, #16
 8006a02:	431a      	orrs	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	061b      	lsls	r3, r3, #24
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	071b      	lsls	r3, r3, #28
 8006a12:	491a      	ldr	r1, [pc, #104]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a1a:	4b18      	ldr	r3, [pc, #96]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a17      	ldr	r2, [pc, #92]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a26:	f7fd f8f7 	bl	8003c18 <HAL_GetTick>
 8006a2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a2c:	e008      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a2e:	f7fd f8f3 	bl	8003c18 <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	2b64      	cmp	r3, #100	; 0x64
 8006a3a:	d901      	bls.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e0d8      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a40:	4b0e      	ldr	r3, [pc, #56]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d0f0      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	f040 80ce 	bne.w	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006a54:	4b09      	ldr	r3, [pc, #36]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a08      	ldr	r2, [pc, #32]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a60:	f7fd f8da 	bl	8003c18 <HAL_GetTick>
 8006a64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a66:	e00b      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006a68:	f7fd f8d6 	bl	8003c18 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b64      	cmp	r3, #100	; 0x64
 8006a74:	d904      	bls.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e0bb      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006a7a:	bf00      	nop
 8006a7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a80:	4b5e      	ldr	r3, [pc, #376]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a8c:	d0ec      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d009      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d02e      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d12a      	bne.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006ab6:	4b51      	ldr	r3, [pc, #324]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006abc:	0c1b      	lsrs	r3, r3, #16
 8006abe:	f003 0303 	and.w	r3, r3, #3
 8006ac2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ac4:	4b4d      	ldr	r3, [pc, #308]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aca:	0f1b      	lsrs	r3, r3, #28
 8006acc:	f003 0307 	and.w	r3, r3, #7
 8006ad0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	019a      	lsls	r2, r3, #6
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	041b      	lsls	r3, r3, #16
 8006adc:	431a      	orrs	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	061b      	lsls	r3, r3, #24
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	071b      	lsls	r3, r3, #28
 8006aea:	4944      	ldr	r1, [pc, #272]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006af2:	4b42      	ldr	r3, [pc, #264]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006af8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b00:	3b01      	subs	r3, #1
 8006b02:	021b      	lsls	r3, r3, #8
 8006b04:	493d      	ldr	r1, [pc, #244]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d022      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b20:	d11d      	bne.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b22:	4b36      	ldr	r3, [pc, #216]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b28:	0e1b      	lsrs	r3, r3, #24
 8006b2a:	f003 030f 	and.w	r3, r3, #15
 8006b2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b30:	4b32      	ldr	r3, [pc, #200]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b36:	0f1b      	lsrs	r3, r3, #28
 8006b38:	f003 0307 	and.w	r3, r3, #7
 8006b3c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	019a      	lsls	r2, r3, #6
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a1b      	ldr	r3, [r3, #32]
 8006b48:	041b      	lsls	r3, r3, #16
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	061b      	lsls	r3, r3, #24
 8006b50:	431a      	orrs	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	071b      	lsls	r3, r3, #28
 8006b56:	4929      	ldr	r1, [pc, #164]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0308 	and.w	r3, r3, #8
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d028      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b6a:	4b24      	ldr	r3, [pc, #144]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b70:	0e1b      	lsrs	r3, r3, #24
 8006b72:	f003 030f 	and.w	r3, r3, #15
 8006b76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b78:	4b20      	ldr	r3, [pc, #128]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b7e:	0c1b      	lsrs	r3, r3, #16
 8006b80:	f003 0303 	and.w	r3, r3, #3
 8006b84:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	019a      	lsls	r2, r3, #6
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	041b      	lsls	r3, r3, #16
 8006b90:	431a      	orrs	r2, r3
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	061b      	lsls	r3, r3, #24
 8006b96:	431a      	orrs	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	69db      	ldr	r3, [r3, #28]
 8006b9c:	071b      	lsls	r3, r3, #28
 8006b9e:	4917      	ldr	r1, [pc, #92]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006ba6:	4b15      	ldr	r3, [pc, #84]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb4:	4911      	ldr	r1, [pc, #68]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006bbc:	4b0f      	ldr	r3, [pc, #60]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a0e      	ldr	r2, [pc, #56]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bc8:	f7fd f826 	bl	8003c18 <HAL_GetTick>
 8006bcc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006bce:	e008      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006bd0:	f7fd f822 	bl	8003c18 <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	2b64      	cmp	r3, #100	; 0x64
 8006bdc:	d901      	bls.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e007      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006be2:	4b06      	ldr	r3, [pc, #24]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bee:	d1ef      	bne.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3720      	adds	r7, #32
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	40023800 	.word	0x40023800

08006c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e049      	b.n	8006ca6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d106      	bne.n	8006c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7fc fec0 	bl	80039ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	4610      	mov	r0, r2
 8006c40:	f000 f9f6 	bl	8007030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
	...

08006cb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d001      	beq.n	8006cc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e054      	b.n	8006d72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68da      	ldr	r2, [r3, #12]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 0201 	orr.w	r2, r2, #1
 8006cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a26      	ldr	r2, [pc, #152]	; (8006d80 <HAL_TIM_Base_Start_IT+0xd0>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d022      	beq.n	8006d30 <HAL_TIM_Base_Start_IT+0x80>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf2:	d01d      	beq.n	8006d30 <HAL_TIM_Base_Start_IT+0x80>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a22      	ldr	r2, [pc, #136]	; (8006d84 <HAL_TIM_Base_Start_IT+0xd4>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d018      	beq.n	8006d30 <HAL_TIM_Base_Start_IT+0x80>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a21      	ldr	r2, [pc, #132]	; (8006d88 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d013      	beq.n	8006d30 <HAL_TIM_Base_Start_IT+0x80>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a1f      	ldr	r2, [pc, #124]	; (8006d8c <HAL_TIM_Base_Start_IT+0xdc>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00e      	beq.n	8006d30 <HAL_TIM_Base_Start_IT+0x80>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a1e      	ldr	r2, [pc, #120]	; (8006d90 <HAL_TIM_Base_Start_IT+0xe0>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d009      	beq.n	8006d30 <HAL_TIM_Base_Start_IT+0x80>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a1c      	ldr	r2, [pc, #112]	; (8006d94 <HAL_TIM_Base_Start_IT+0xe4>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d004      	beq.n	8006d30 <HAL_TIM_Base_Start_IT+0x80>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a1b      	ldr	r2, [pc, #108]	; (8006d98 <HAL_TIM_Base_Start_IT+0xe8>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d115      	bne.n	8006d5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689a      	ldr	r2, [r3, #8]
 8006d36:	4b19      	ldr	r3, [pc, #100]	; (8006d9c <HAL_TIM_Base_Start_IT+0xec>)
 8006d38:	4013      	ands	r3, r2
 8006d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2b06      	cmp	r3, #6
 8006d40:	d015      	beq.n	8006d6e <HAL_TIM_Base_Start_IT+0xbe>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d48:	d011      	beq.n	8006d6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f042 0201 	orr.w	r2, r2, #1
 8006d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d5a:	e008      	b.n	8006d6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0201 	orr.w	r2, r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	e000      	b.n	8006d70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3714      	adds	r7, #20
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	40010000 	.word	0x40010000
 8006d84:	40000400 	.word	0x40000400
 8006d88:	40000800 	.word	0x40000800
 8006d8c:	40000c00 	.word	0x40000c00
 8006d90:	40010400 	.word	0x40010400
 8006d94:	40014000 	.word	0x40014000
 8006d98:	40001800 	.word	0x40001800
 8006d9c:	00010007 	.word	0x00010007

08006da0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d122      	bne.n	8006dfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d11b      	bne.n	8006dfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f06f 0202 	mvn.w	r2, #2
 8006dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	f003 0303 	and.w	r3, r3, #3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f905 	bl	8006ff2 <HAL_TIM_IC_CaptureCallback>
 8006de8:	e005      	b.n	8006df6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f8f7 	bl	8006fde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f908 	bl	8007006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	f003 0304 	and.w	r3, r3, #4
 8006e06:	2b04      	cmp	r3, #4
 8006e08:	d122      	bne.n	8006e50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	f003 0304 	and.w	r3, r3, #4
 8006e14:	2b04      	cmp	r3, #4
 8006e16:	d11b      	bne.n	8006e50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f06f 0204 	mvn.w	r2, #4
 8006e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2202      	movs	r2, #2
 8006e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d003      	beq.n	8006e3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f8db 	bl	8006ff2 <HAL_TIM_IC_CaptureCallback>
 8006e3c:	e005      	b.n	8006e4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f8cd 	bl	8006fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 f8de 	bl	8007006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	f003 0308 	and.w	r3, r3, #8
 8006e5a:	2b08      	cmp	r3, #8
 8006e5c:	d122      	bne.n	8006ea4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	f003 0308 	and.w	r3, r3, #8
 8006e68:	2b08      	cmp	r3, #8
 8006e6a:	d11b      	bne.n	8006ea4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f06f 0208 	mvn.w	r2, #8
 8006e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2204      	movs	r2, #4
 8006e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	f003 0303 	and.w	r3, r3, #3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f8b1 	bl	8006ff2 <HAL_TIM_IC_CaptureCallback>
 8006e90:	e005      	b.n	8006e9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f8a3 	bl	8006fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f8b4 	bl	8007006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	f003 0310 	and.w	r3, r3, #16
 8006eae:	2b10      	cmp	r3, #16
 8006eb0:	d122      	bne.n	8006ef8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f003 0310 	and.w	r3, r3, #16
 8006ebc:	2b10      	cmp	r3, #16
 8006ebe:	d11b      	bne.n	8006ef8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f06f 0210 	mvn.w	r2, #16
 8006ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2208      	movs	r2, #8
 8006ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f887 	bl	8006ff2 <HAL_TIM_IC_CaptureCallback>
 8006ee4:	e005      	b.n	8006ef2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f879 	bl	8006fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f88a 	bl	8007006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d10e      	bne.n	8006f24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d107      	bne.n	8006f24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f06f 0201 	mvn.w	r2, #1
 8006f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7fc fc48 	bl	80037b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f2e:	2b80      	cmp	r3, #128	; 0x80
 8006f30:	d10e      	bne.n	8006f50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f3c:	2b80      	cmp	r3, #128	; 0x80
 8006f3e:	d107      	bne.n	8006f50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f9a8 	bl	80072a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f5e:	d10e      	bne.n	8006f7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f6a:	2b80      	cmp	r3, #128	; 0x80
 8006f6c:	d107      	bne.n	8006f7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f99b 	bl	80072b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f88:	2b40      	cmp	r3, #64	; 0x40
 8006f8a:	d10e      	bne.n	8006faa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f96:	2b40      	cmp	r3, #64	; 0x40
 8006f98:	d107      	bne.n	8006faa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f838 	bl	800701a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	f003 0320 	and.w	r3, r3, #32
 8006fb4:	2b20      	cmp	r3, #32
 8006fb6:	d10e      	bne.n	8006fd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	f003 0320 	and.w	r3, r3, #32
 8006fc2:	2b20      	cmp	r3, #32
 8006fc4:	d107      	bne.n	8006fd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f06f 0220 	mvn.w	r2, #32
 8006fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f95b 	bl	800728c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fd6:	bf00      	nop
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b083      	sub	sp, #12
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fe6:	bf00      	nop
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b083      	sub	sp, #12
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ffa:	bf00      	nop
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007006:	b480      	push	{r7}
 8007008:	b083      	sub	sp, #12
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800700e:	bf00      	nop
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800701a:	b480      	push	{r7}
 800701c:	b083      	sub	sp, #12
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007022:	bf00      	nop
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
	...

08007030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a40      	ldr	r2, [pc, #256]	; (8007144 <TIM_Base_SetConfig+0x114>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d013      	beq.n	8007070 <TIM_Base_SetConfig+0x40>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800704e:	d00f      	beq.n	8007070 <TIM_Base_SetConfig+0x40>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a3d      	ldr	r2, [pc, #244]	; (8007148 <TIM_Base_SetConfig+0x118>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00b      	beq.n	8007070 <TIM_Base_SetConfig+0x40>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a3c      	ldr	r2, [pc, #240]	; (800714c <TIM_Base_SetConfig+0x11c>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d007      	beq.n	8007070 <TIM_Base_SetConfig+0x40>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a3b      	ldr	r2, [pc, #236]	; (8007150 <TIM_Base_SetConfig+0x120>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d003      	beq.n	8007070 <TIM_Base_SetConfig+0x40>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a3a      	ldr	r2, [pc, #232]	; (8007154 <TIM_Base_SetConfig+0x124>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d108      	bne.n	8007082 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	4313      	orrs	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a2f      	ldr	r2, [pc, #188]	; (8007144 <TIM_Base_SetConfig+0x114>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d02b      	beq.n	80070e2 <TIM_Base_SetConfig+0xb2>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007090:	d027      	beq.n	80070e2 <TIM_Base_SetConfig+0xb2>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a2c      	ldr	r2, [pc, #176]	; (8007148 <TIM_Base_SetConfig+0x118>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d023      	beq.n	80070e2 <TIM_Base_SetConfig+0xb2>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a2b      	ldr	r2, [pc, #172]	; (800714c <TIM_Base_SetConfig+0x11c>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d01f      	beq.n	80070e2 <TIM_Base_SetConfig+0xb2>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a2a      	ldr	r2, [pc, #168]	; (8007150 <TIM_Base_SetConfig+0x120>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d01b      	beq.n	80070e2 <TIM_Base_SetConfig+0xb2>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a29      	ldr	r2, [pc, #164]	; (8007154 <TIM_Base_SetConfig+0x124>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d017      	beq.n	80070e2 <TIM_Base_SetConfig+0xb2>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a28      	ldr	r2, [pc, #160]	; (8007158 <TIM_Base_SetConfig+0x128>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d013      	beq.n	80070e2 <TIM_Base_SetConfig+0xb2>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a27      	ldr	r2, [pc, #156]	; (800715c <TIM_Base_SetConfig+0x12c>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d00f      	beq.n	80070e2 <TIM_Base_SetConfig+0xb2>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a26      	ldr	r2, [pc, #152]	; (8007160 <TIM_Base_SetConfig+0x130>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d00b      	beq.n	80070e2 <TIM_Base_SetConfig+0xb2>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a25      	ldr	r2, [pc, #148]	; (8007164 <TIM_Base_SetConfig+0x134>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d007      	beq.n	80070e2 <TIM_Base_SetConfig+0xb2>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a24      	ldr	r2, [pc, #144]	; (8007168 <TIM_Base_SetConfig+0x138>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d003      	beq.n	80070e2 <TIM_Base_SetConfig+0xb2>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a23      	ldr	r2, [pc, #140]	; (800716c <TIM_Base_SetConfig+0x13c>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d108      	bne.n	80070f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	4313      	orrs	r3, r2
 8007100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a0a      	ldr	r2, [pc, #40]	; (8007144 <TIM_Base_SetConfig+0x114>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d003      	beq.n	8007128 <TIM_Base_SetConfig+0xf8>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a0c      	ldr	r2, [pc, #48]	; (8007154 <TIM_Base_SetConfig+0x124>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d103      	bne.n	8007130 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	691a      	ldr	r2, [r3, #16]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	615a      	str	r2, [r3, #20]
}
 8007136:	bf00      	nop
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	40010000 	.word	0x40010000
 8007148:	40000400 	.word	0x40000400
 800714c:	40000800 	.word	0x40000800
 8007150:	40000c00 	.word	0x40000c00
 8007154:	40010400 	.word	0x40010400
 8007158:	40014000 	.word	0x40014000
 800715c:	40014400 	.word	0x40014400
 8007160:	40014800 	.word	0x40014800
 8007164:	40001800 	.word	0x40001800
 8007168:	40001c00 	.word	0x40001c00
 800716c:	40002000 	.word	0x40002000

08007170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007180:	2b01      	cmp	r3, #1
 8007182:	d101      	bne.n	8007188 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007184:	2302      	movs	r3, #2
 8007186:	e06d      	b.n	8007264 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a30      	ldr	r2, [pc, #192]	; (8007270 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d004      	beq.n	80071bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a2f      	ldr	r2, [pc, #188]	; (8007274 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d108      	bne.n	80071ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80071c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	4313      	orrs	r3, r2
 80071de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a20      	ldr	r2, [pc, #128]	; (8007270 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d022      	beq.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071fa:	d01d      	beq.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a1d      	ldr	r2, [pc, #116]	; (8007278 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d018      	beq.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a1c      	ldr	r2, [pc, #112]	; (800727c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d013      	beq.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a1a      	ldr	r2, [pc, #104]	; (8007280 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d00e      	beq.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a15      	ldr	r2, [pc, #84]	; (8007274 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d009      	beq.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a16      	ldr	r2, [pc, #88]	; (8007284 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d004      	beq.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a15      	ldr	r2, [pc, #84]	; (8007288 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d10c      	bne.n	8007252 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800723e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	4313      	orrs	r3, r2
 8007248:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	40010000 	.word	0x40010000
 8007274:	40010400 	.word	0x40010400
 8007278:	40000400 	.word	0x40000400
 800727c:	40000800 	.word	0x40000800
 8007280:	40000c00 	.word	0x40000c00
 8007284:	40014000 	.word	0x40014000
 8007288:	40001800 	.word	0x40001800

0800728c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e040      	b.n	800735c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d106      	bne.n	80072f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7fc fbb4 	bl	8003a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2224      	movs	r2, #36	; 0x24
 80072f4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f022 0201 	bic.w	r2, r2, #1
 8007304:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fc06 	bl	8007b18 <UART_SetConfig>
 800730c:	4603      	mov	r3, r0
 800730e:	2b01      	cmp	r3, #1
 8007310:	d101      	bne.n	8007316 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e022      	b.n	800735c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731a:	2b00      	cmp	r3, #0
 800731c:	d002      	beq.n	8007324 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fe5e 	bl	8007fe0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	685a      	ldr	r2, [r3, #4]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007332:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689a      	ldr	r2, [r3, #8]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007342:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 0201 	orr.w	r2, r2, #1
 8007352:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fee5 	bl	8008124 <UART_CheckIdleState>
 800735a:	4603      	mov	r3, r0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b08a      	sub	sp, #40	; 0x28
 8007368:	af02      	add	r7, sp, #8
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	603b      	str	r3, [r7, #0]
 8007370:	4613      	mov	r3, r2
 8007372:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007378:	2b20      	cmp	r3, #32
 800737a:	d171      	bne.n	8007460 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d002      	beq.n	8007388 <HAL_UART_Transmit+0x24>
 8007382:	88fb      	ldrh	r3, [r7, #6]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d101      	bne.n	800738c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e06a      	b.n	8007462 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2221      	movs	r2, #33	; 0x21
 8007398:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800739a:	f7fc fc3d 	bl	8003c18 <HAL_GetTick>
 800739e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	88fa      	ldrh	r2, [r7, #6]
 80073a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	88fa      	ldrh	r2, [r7, #6]
 80073ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073b8:	d108      	bne.n	80073cc <HAL_UART_Transmit+0x68>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d104      	bne.n	80073cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80073c2:	2300      	movs	r3, #0
 80073c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	61bb      	str	r3, [r7, #24]
 80073ca:	e003      	b.n	80073d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073d0:	2300      	movs	r3, #0
 80073d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80073d4:	e02c      	b.n	8007430 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2200      	movs	r2, #0
 80073de:	2180      	movs	r1, #128	; 0x80
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f000 feec 	bl	80081be <UART_WaitOnFlagUntilTimeout>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d001      	beq.n	80073f0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e038      	b.n	8007462 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10b      	bne.n	800740e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	881b      	ldrh	r3, [r3, #0]
 80073fa:	461a      	mov	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007404:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	3302      	adds	r3, #2
 800740a:	61bb      	str	r3, [r7, #24]
 800740c:	e007      	b.n	800741e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	781a      	ldrb	r2, [r3, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	3301      	adds	r3, #1
 800741c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007424:	b29b      	uxth	r3, r3
 8007426:	3b01      	subs	r3, #1
 8007428:	b29a      	uxth	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007436:	b29b      	uxth	r3, r3
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1cc      	bne.n	80073d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	2200      	movs	r2, #0
 8007444:	2140      	movs	r1, #64	; 0x40
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f000 feb9 	bl	80081be <UART_WaitOnFlagUntilTimeout>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e005      	b.n	8007462 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2220      	movs	r2, #32
 800745a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	e000      	b.n	8007462 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007460:	2302      	movs	r3, #2
  }
}
 8007462:	4618      	mov	r0, r3
 8007464:	3720      	adds	r7, #32
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b08a      	sub	sp, #40	; 0x28
 800746e:	af00      	add	r7, sp, #0
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	60b9      	str	r1, [r7, #8]
 8007474:	4613      	mov	r3, r2
 8007476:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800747e:	2b20      	cmp	r3, #32
 8007480:	d132      	bne.n	80074e8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d002      	beq.n	800748e <HAL_UART_Receive_IT+0x24>
 8007488:	88fb      	ldrh	r3, [r7, #6]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e02b      	b.n	80074ea <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d018      	beq.n	80074d8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	e853 3f00 	ldrex	r3, [r3]
 80074b2:	613b      	str	r3, [r7, #16]
   return(result);
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074ba:	627b      	str	r3, [r7, #36]	; 0x24
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	461a      	mov	r2, r3
 80074c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c4:	623b      	str	r3, [r7, #32]
 80074c6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c8:	69f9      	ldr	r1, [r7, #28]
 80074ca:	6a3a      	ldr	r2, [r7, #32]
 80074cc:	e841 2300 	strex	r3, r2, [r1]
 80074d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1e6      	bne.n	80074a6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80074d8:	88fb      	ldrh	r3, [r7, #6]
 80074da:	461a      	mov	r2, r3
 80074dc:	68b9      	ldr	r1, [r7, #8]
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f000 ff34 	bl	800834c <UART_Start_Receive_IT>
 80074e4:	4603      	mov	r3, r0
 80074e6:	e000      	b.n	80074ea <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80074e8:	2302      	movs	r3, #2
  }
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3728      	adds	r7, #40	; 0x28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b0ba      	sub	sp, #232	; 0xe8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800751a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800751e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007522:	4013      	ands	r3, r2
 8007524:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007528:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800752c:	2b00      	cmp	r3, #0
 800752e:	d115      	bne.n	800755c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007534:	f003 0320 	and.w	r3, r3, #32
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00f      	beq.n	800755c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800753c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007540:	f003 0320 	and.w	r3, r3, #32
 8007544:	2b00      	cmp	r3, #0
 8007546:	d009      	beq.n	800755c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 82ac 	beq.w	8007aaa <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	4798      	blx	r3
      }
      return;
 800755a:	e2a6      	b.n	8007aaa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800755c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 8117 	beq.w	8007794 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	2b00      	cmp	r3, #0
 8007570:	d106      	bne.n	8007580 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007572:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007576:	4b85      	ldr	r3, [pc, #532]	; (800778c <HAL_UART_IRQHandler+0x298>)
 8007578:	4013      	ands	r3, r2
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 810a 	beq.w	8007794 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	2b00      	cmp	r3, #0
 800758a:	d011      	beq.n	80075b0 <HAL_UART_IRQHandler+0xbc>
 800758c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00b      	beq.n	80075b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2201      	movs	r2, #1
 800759e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075a6:	f043 0201 	orr.w	r2, r3, #1
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075b4:	f003 0302 	and.w	r3, r3, #2
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d011      	beq.n	80075e0 <HAL_UART_IRQHandler+0xec>
 80075bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00b      	beq.n	80075e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2202      	movs	r2, #2
 80075ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075d6:	f043 0204 	orr.w	r2, r3, #4
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e4:	f003 0304 	and.w	r3, r3, #4
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d011      	beq.n	8007610 <HAL_UART_IRQHandler+0x11c>
 80075ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00b      	beq.n	8007610 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2204      	movs	r2, #4
 80075fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007606:	f043 0202 	orr.w	r2, r3, #2
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007614:	f003 0308 	and.w	r3, r3, #8
 8007618:	2b00      	cmp	r3, #0
 800761a:	d017      	beq.n	800764c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800761c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007620:	f003 0320 	and.w	r3, r3, #32
 8007624:	2b00      	cmp	r3, #0
 8007626:	d105      	bne.n	8007634 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800762c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00b      	beq.n	800764c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2208      	movs	r2, #8
 800763a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007642:	f043 0208 	orr.w	r2, r3, #8
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800764c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007654:	2b00      	cmp	r3, #0
 8007656:	d012      	beq.n	800767e <HAL_UART_IRQHandler+0x18a>
 8007658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800765c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00c      	beq.n	800767e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800766c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007674:	f043 0220 	orr.w	r2, r3, #32
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 8212 	beq.w	8007aae <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800768a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800768e:	f003 0320 	and.w	r3, r3, #32
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00d      	beq.n	80076b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800769a:	f003 0320 	and.w	r3, r3, #32
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d007      	beq.n	80076b2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d003      	beq.n	80076b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c6:	2b40      	cmp	r3, #64	; 0x40
 80076c8:	d005      	beq.n	80076d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80076ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d04f      	beq.n	8007776 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fefe 	bl	80084d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e6:	2b40      	cmp	r3, #64	; 0x40
 80076e8:	d141      	bne.n	800776e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	3308      	adds	r3, #8
 80076f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076f8:	e853 3f00 	ldrex	r3, [r3]
 80076fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007700:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007708:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3308      	adds	r3, #8
 8007712:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007716:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800771a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007722:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007726:	e841 2300 	strex	r3, r2, [r1]
 800772a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800772e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1d9      	bne.n	80076ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800773a:	2b00      	cmp	r3, #0
 800773c:	d013      	beq.n	8007766 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007742:	4a13      	ldr	r2, [pc, #76]	; (8007790 <HAL_UART_IRQHandler+0x29c>)
 8007744:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800774a:	4618      	mov	r0, r3
 800774c:	f7fd ff31 	bl	80055b2 <HAL_DMA_Abort_IT>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d017      	beq.n	8007786 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800775a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007760:	4610      	mov	r0, r2
 8007762:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007764:	e00f      	b.n	8007786 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f9b6 	bl	8007ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800776c:	e00b      	b.n	8007786 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f9b2 	bl	8007ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007774:	e007      	b.n	8007786 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f9ae 	bl	8007ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007784:	e193      	b.n	8007aae <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007786:	bf00      	nop
    return;
 8007788:	e191      	b.n	8007aae <HAL_UART_IRQHandler+0x5ba>
 800778a:	bf00      	nop
 800778c:	04000120 	.word	0x04000120
 8007790:	080085a1 	.word	0x080085a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007798:	2b01      	cmp	r3, #1
 800779a:	f040 814c 	bne.w	8007a36 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800779e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077a2:	f003 0310 	and.w	r3, r3, #16
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 8145 	beq.w	8007a36 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80077ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077b0:	f003 0310 	and.w	r3, r3, #16
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 813e 	beq.w	8007a36 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2210      	movs	r2, #16
 80077c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077cc:	2b40      	cmp	r3, #64	; 0x40
 80077ce:	f040 80b6 	bne.w	800793e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 8165 	beq.w	8007ab2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077f2:	429a      	cmp	r2, r3
 80077f4:	f080 815d 	bcs.w	8007ab2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007806:	69db      	ldr	r3, [r3, #28]
 8007808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800780c:	f000 8086 	beq.w	800791c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007818:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800781c:	e853 3f00 	ldrex	r3, [r3]
 8007820:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007824:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800782c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	461a      	mov	r2, r3
 8007836:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800783a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800783e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007842:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007846:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800784a:	e841 2300 	strex	r3, r2, [r1]
 800784e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007852:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1da      	bne.n	8007810 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3308      	adds	r3, #8
 8007860:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007864:	e853 3f00 	ldrex	r3, [r3]
 8007868:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800786a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800786c:	f023 0301 	bic.w	r3, r3, #1
 8007870:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	3308      	adds	r3, #8
 800787a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800787e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007882:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007884:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007886:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800788a:	e841 2300 	strex	r3, r2, [r1]
 800788e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007890:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1e1      	bne.n	800785a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3308      	adds	r3, #8
 800789c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078a0:	e853 3f00 	ldrex	r3, [r3]
 80078a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3308      	adds	r3, #8
 80078b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078c2:	e841 2300 	strex	r3, r2, [r1]
 80078c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1e3      	bne.n	8007896 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2220      	movs	r2, #32
 80078d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078e4:	e853 3f00 	ldrex	r3, [r3]
 80078e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078ec:	f023 0310 	bic.w	r3, r3, #16
 80078f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	461a      	mov	r2, r3
 80078fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8007900:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007902:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007904:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800790c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1e4      	bne.n	80078dc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007916:	4618      	mov	r0, r3
 8007918:	f7fd fddb 	bl	80054d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2202      	movs	r2, #2
 8007920:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800792e:	b29b      	uxth	r3, r3
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	b29b      	uxth	r3, r3
 8007934:	4619      	mov	r1, r3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f8d8 	bl	8007aec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800793c:	e0b9      	b.n	8007ab2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800794a:	b29b      	uxth	r3, r3
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007958:	b29b      	uxth	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	f000 80ab 	beq.w	8007ab6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8007960:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 80a6 	beq.w	8007ab6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007972:	e853 3f00 	ldrex	r3, [r3]
 8007976:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800797a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800797e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	461a      	mov	r2, r3
 8007988:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800798c:	647b      	str	r3, [r7, #68]	; 0x44
 800798e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007990:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007992:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007994:	e841 2300 	strex	r3, r2, [r1]
 8007998:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800799a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1e4      	bne.n	800796a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	3308      	adds	r3, #8
 80079a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	e853 3f00 	ldrex	r3, [r3]
 80079ae:	623b      	str	r3, [r7, #32]
   return(result);
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	f023 0301 	bic.w	r3, r3, #1
 80079b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	3308      	adds	r3, #8
 80079c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80079c4:	633a      	str	r2, [r7, #48]	; 0x30
 80079c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079cc:	e841 2300 	strex	r3, r2, [r1]
 80079d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1e3      	bne.n	80079a0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2220      	movs	r2, #32
 80079dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f023 0310 	bic.w	r3, r3, #16
 8007a00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a0e:	61fb      	str	r3, [r7, #28]
 8007a10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	69b9      	ldr	r1, [r7, #24]
 8007a14:	69fa      	ldr	r2, [r7, #28]
 8007a16:	e841 2300 	strex	r3, r2, [r1]
 8007a1a:	617b      	str	r3, [r7, #20]
   return(result);
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1e4      	bne.n	80079ec <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2202      	movs	r2, #2
 8007a26:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f85c 	bl	8007aec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a34:	e03f      	b.n	8007ab6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00e      	beq.n	8007a60 <HAL_UART_IRQHandler+0x56c>
 8007a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d008      	beq.n	8007a60 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f853 	bl	8007b04 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a5e:	e02d      	b.n	8007abc <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00e      	beq.n	8007a8a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d008      	beq.n	8007a8a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d01c      	beq.n	8007aba <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	4798      	blx	r3
    }
    return;
 8007a88:	e017      	b.n	8007aba <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d012      	beq.n	8007abc <HAL_UART_IRQHandler+0x5c8>
 8007a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00c      	beq.n	8007abc <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fd92 	bl	80085cc <UART_EndTransmit_IT>
    return;
 8007aa8:	e008      	b.n	8007abc <HAL_UART_IRQHandler+0x5c8>
      return;
 8007aaa:	bf00      	nop
 8007aac:	e006      	b.n	8007abc <HAL_UART_IRQHandler+0x5c8>
    return;
 8007aae:	bf00      	nop
 8007ab0:	e004      	b.n	8007abc <HAL_UART_IRQHandler+0x5c8>
      return;
 8007ab2:	bf00      	nop
 8007ab4:	e002      	b.n	8007abc <HAL_UART_IRQHandler+0x5c8>
      return;
 8007ab6:	bf00      	nop
 8007ab8:	e000      	b.n	8007abc <HAL_UART_IRQHandler+0x5c8>
    return;
 8007aba:	bf00      	nop
  }

}
 8007abc:	37e8      	adds	r7, #232	; 0xe8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop

08007ac4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	460b      	mov	r3, r1
 8007af6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b088      	sub	sp, #32
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	689a      	ldr	r2, [r3, #8]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	431a      	orrs	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	431a      	orrs	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	69db      	ldr	r3, [r3, #28]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	4ba6      	ldr	r3, [pc, #664]	; (8007ddc <UART_SetConfig+0x2c4>)
 8007b44:	4013      	ands	r3, r2
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	6812      	ldr	r2, [r2, #0]
 8007b4a:	6979      	ldr	r1, [r7, #20]
 8007b4c:	430b      	orrs	r3, r1
 8007b4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	68da      	ldr	r2, [r3, #12]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a1b      	ldr	r3, [r3, #32]
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	430a      	orrs	r2, r1
 8007b88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a94      	ldr	r2, [pc, #592]	; (8007de0 <UART_SetConfig+0x2c8>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d120      	bne.n	8007bd6 <UART_SetConfig+0xbe>
 8007b94:	4b93      	ldr	r3, [pc, #588]	; (8007de4 <UART_SetConfig+0x2cc>)
 8007b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b9a:	f003 0303 	and.w	r3, r3, #3
 8007b9e:	2b03      	cmp	r3, #3
 8007ba0:	d816      	bhi.n	8007bd0 <UART_SetConfig+0xb8>
 8007ba2:	a201      	add	r2, pc, #4	; (adr r2, 8007ba8 <UART_SetConfig+0x90>)
 8007ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba8:	08007bb9 	.word	0x08007bb9
 8007bac:	08007bc5 	.word	0x08007bc5
 8007bb0:	08007bbf 	.word	0x08007bbf
 8007bb4:	08007bcb 	.word	0x08007bcb
 8007bb8:	2301      	movs	r3, #1
 8007bba:	77fb      	strb	r3, [r7, #31]
 8007bbc:	e150      	b.n	8007e60 <UART_SetConfig+0x348>
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	77fb      	strb	r3, [r7, #31]
 8007bc2:	e14d      	b.n	8007e60 <UART_SetConfig+0x348>
 8007bc4:	2304      	movs	r3, #4
 8007bc6:	77fb      	strb	r3, [r7, #31]
 8007bc8:	e14a      	b.n	8007e60 <UART_SetConfig+0x348>
 8007bca:	2308      	movs	r3, #8
 8007bcc:	77fb      	strb	r3, [r7, #31]
 8007bce:	e147      	b.n	8007e60 <UART_SetConfig+0x348>
 8007bd0:	2310      	movs	r3, #16
 8007bd2:	77fb      	strb	r3, [r7, #31]
 8007bd4:	e144      	b.n	8007e60 <UART_SetConfig+0x348>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a83      	ldr	r2, [pc, #524]	; (8007de8 <UART_SetConfig+0x2d0>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d132      	bne.n	8007c46 <UART_SetConfig+0x12e>
 8007be0:	4b80      	ldr	r3, [pc, #512]	; (8007de4 <UART_SetConfig+0x2cc>)
 8007be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007be6:	f003 030c 	and.w	r3, r3, #12
 8007bea:	2b0c      	cmp	r3, #12
 8007bec:	d828      	bhi.n	8007c40 <UART_SetConfig+0x128>
 8007bee:	a201      	add	r2, pc, #4	; (adr r2, 8007bf4 <UART_SetConfig+0xdc>)
 8007bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf4:	08007c29 	.word	0x08007c29
 8007bf8:	08007c41 	.word	0x08007c41
 8007bfc:	08007c41 	.word	0x08007c41
 8007c00:	08007c41 	.word	0x08007c41
 8007c04:	08007c35 	.word	0x08007c35
 8007c08:	08007c41 	.word	0x08007c41
 8007c0c:	08007c41 	.word	0x08007c41
 8007c10:	08007c41 	.word	0x08007c41
 8007c14:	08007c2f 	.word	0x08007c2f
 8007c18:	08007c41 	.word	0x08007c41
 8007c1c:	08007c41 	.word	0x08007c41
 8007c20:	08007c41 	.word	0x08007c41
 8007c24:	08007c3b 	.word	0x08007c3b
 8007c28:	2300      	movs	r3, #0
 8007c2a:	77fb      	strb	r3, [r7, #31]
 8007c2c:	e118      	b.n	8007e60 <UART_SetConfig+0x348>
 8007c2e:	2302      	movs	r3, #2
 8007c30:	77fb      	strb	r3, [r7, #31]
 8007c32:	e115      	b.n	8007e60 <UART_SetConfig+0x348>
 8007c34:	2304      	movs	r3, #4
 8007c36:	77fb      	strb	r3, [r7, #31]
 8007c38:	e112      	b.n	8007e60 <UART_SetConfig+0x348>
 8007c3a:	2308      	movs	r3, #8
 8007c3c:	77fb      	strb	r3, [r7, #31]
 8007c3e:	e10f      	b.n	8007e60 <UART_SetConfig+0x348>
 8007c40:	2310      	movs	r3, #16
 8007c42:	77fb      	strb	r3, [r7, #31]
 8007c44:	e10c      	b.n	8007e60 <UART_SetConfig+0x348>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a68      	ldr	r2, [pc, #416]	; (8007dec <UART_SetConfig+0x2d4>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d120      	bne.n	8007c92 <UART_SetConfig+0x17a>
 8007c50:	4b64      	ldr	r3, [pc, #400]	; (8007de4 <UART_SetConfig+0x2cc>)
 8007c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c5a:	2b30      	cmp	r3, #48	; 0x30
 8007c5c:	d013      	beq.n	8007c86 <UART_SetConfig+0x16e>
 8007c5e:	2b30      	cmp	r3, #48	; 0x30
 8007c60:	d814      	bhi.n	8007c8c <UART_SetConfig+0x174>
 8007c62:	2b20      	cmp	r3, #32
 8007c64:	d009      	beq.n	8007c7a <UART_SetConfig+0x162>
 8007c66:	2b20      	cmp	r3, #32
 8007c68:	d810      	bhi.n	8007c8c <UART_SetConfig+0x174>
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d002      	beq.n	8007c74 <UART_SetConfig+0x15c>
 8007c6e:	2b10      	cmp	r3, #16
 8007c70:	d006      	beq.n	8007c80 <UART_SetConfig+0x168>
 8007c72:	e00b      	b.n	8007c8c <UART_SetConfig+0x174>
 8007c74:	2300      	movs	r3, #0
 8007c76:	77fb      	strb	r3, [r7, #31]
 8007c78:	e0f2      	b.n	8007e60 <UART_SetConfig+0x348>
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	77fb      	strb	r3, [r7, #31]
 8007c7e:	e0ef      	b.n	8007e60 <UART_SetConfig+0x348>
 8007c80:	2304      	movs	r3, #4
 8007c82:	77fb      	strb	r3, [r7, #31]
 8007c84:	e0ec      	b.n	8007e60 <UART_SetConfig+0x348>
 8007c86:	2308      	movs	r3, #8
 8007c88:	77fb      	strb	r3, [r7, #31]
 8007c8a:	e0e9      	b.n	8007e60 <UART_SetConfig+0x348>
 8007c8c:	2310      	movs	r3, #16
 8007c8e:	77fb      	strb	r3, [r7, #31]
 8007c90:	e0e6      	b.n	8007e60 <UART_SetConfig+0x348>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a56      	ldr	r2, [pc, #344]	; (8007df0 <UART_SetConfig+0x2d8>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d120      	bne.n	8007cde <UART_SetConfig+0x1c6>
 8007c9c:	4b51      	ldr	r3, [pc, #324]	; (8007de4 <UART_SetConfig+0x2cc>)
 8007c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007ca6:	2bc0      	cmp	r3, #192	; 0xc0
 8007ca8:	d013      	beq.n	8007cd2 <UART_SetConfig+0x1ba>
 8007caa:	2bc0      	cmp	r3, #192	; 0xc0
 8007cac:	d814      	bhi.n	8007cd8 <UART_SetConfig+0x1c0>
 8007cae:	2b80      	cmp	r3, #128	; 0x80
 8007cb0:	d009      	beq.n	8007cc6 <UART_SetConfig+0x1ae>
 8007cb2:	2b80      	cmp	r3, #128	; 0x80
 8007cb4:	d810      	bhi.n	8007cd8 <UART_SetConfig+0x1c0>
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d002      	beq.n	8007cc0 <UART_SetConfig+0x1a8>
 8007cba:	2b40      	cmp	r3, #64	; 0x40
 8007cbc:	d006      	beq.n	8007ccc <UART_SetConfig+0x1b4>
 8007cbe:	e00b      	b.n	8007cd8 <UART_SetConfig+0x1c0>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	77fb      	strb	r3, [r7, #31]
 8007cc4:	e0cc      	b.n	8007e60 <UART_SetConfig+0x348>
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	77fb      	strb	r3, [r7, #31]
 8007cca:	e0c9      	b.n	8007e60 <UART_SetConfig+0x348>
 8007ccc:	2304      	movs	r3, #4
 8007cce:	77fb      	strb	r3, [r7, #31]
 8007cd0:	e0c6      	b.n	8007e60 <UART_SetConfig+0x348>
 8007cd2:	2308      	movs	r3, #8
 8007cd4:	77fb      	strb	r3, [r7, #31]
 8007cd6:	e0c3      	b.n	8007e60 <UART_SetConfig+0x348>
 8007cd8:	2310      	movs	r3, #16
 8007cda:	77fb      	strb	r3, [r7, #31]
 8007cdc:	e0c0      	b.n	8007e60 <UART_SetConfig+0x348>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a44      	ldr	r2, [pc, #272]	; (8007df4 <UART_SetConfig+0x2dc>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d125      	bne.n	8007d34 <UART_SetConfig+0x21c>
 8007ce8:	4b3e      	ldr	r3, [pc, #248]	; (8007de4 <UART_SetConfig+0x2cc>)
 8007cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cf6:	d017      	beq.n	8007d28 <UART_SetConfig+0x210>
 8007cf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cfc:	d817      	bhi.n	8007d2e <UART_SetConfig+0x216>
 8007cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d02:	d00b      	beq.n	8007d1c <UART_SetConfig+0x204>
 8007d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d08:	d811      	bhi.n	8007d2e <UART_SetConfig+0x216>
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <UART_SetConfig+0x1fe>
 8007d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d12:	d006      	beq.n	8007d22 <UART_SetConfig+0x20a>
 8007d14:	e00b      	b.n	8007d2e <UART_SetConfig+0x216>
 8007d16:	2300      	movs	r3, #0
 8007d18:	77fb      	strb	r3, [r7, #31]
 8007d1a:	e0a1      	b.n	8007e60 <UART_SetConfig+0x348>
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	77fb      	strb	r3, [r7, #31]
 8007d20:	e09e      	b.n	8007e60 <UART_SetConfig+0x348>
 8007d22:	2304      	movs	r3, #4
 8007d24:	77fb      	strb	r3, [r7, #31]
 8007d26:	e09b      	b.n	8007e60 <UART_SetConfig+0x348>
 8007d28:	2308      	movs	r3, #8
 8007d2a:	77fb      	strb	r3, [r7, #31]
 8007d2c:	e098      	b.n	8007e60 <UART_SetConfig+0x348>
 8007d2e:	2310      	movs	r3, #16
 8007d30:	77fb      	strb	r3, [r7, #31]
 8007d32:	e095      	b.n	8007e60 <UART_SetConfig+0x348>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a2f      	ldr	r2, [pc, #188]	; (8007df8 <UART_SetConfig+0x2e0>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d125      	bne.n	8007d8a <UART_SetConfig+0x272>
 8007d3e:	4b29      	ldr	r3, [pc, #164]	; (8007de4 <UART_SetConfig+0x2cc>)
 8007d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d4c:	d017      	beq.n	8007d7e <UART_SetConfig+0x266>
 8007d4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d52:	d817      	bhi.n	8007d84 <UART_SetConfig+0x26c>
 8007d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d58:	d00b      	beq.n	8007d72 <UART_SetConfig+0x25a>
 8007d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d5e:	d811      	bhi.n	8007d84 <UART_SetConfig+0x26c>
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d003      	beq.n	8007d6c <UART_SetConfig+0x254>
 8007d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d68:	d006      	beq.n	8007d78 <UART_SetConfig+0x260>
 8007d6a:	e00b      	b.n	8007d84 <UART_SetConfig+0x26c>
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	77fb      	strb	r3, [r7, #31]
 8007d70:	e076      	b.n	8007e60 <UART_SetConfig+0x348>
 8007d72:	2302      	movs	r3, #2
 8007d74:	77fb      	strb	r3, [r7, #31]
 8007d76:	e073      	b.n	8007e60 <UART_SetConfig+0x348>
 8007d78:	2304      	movs	r3, #4
 8007d7a:	77fb      	strb	r3, [r7, #31]
 8007d7c:	e070      	b.n	8007e60 <UART_SetConfig+0x348>
 8007d7e:	2308      	movs	r3, #8
 8007d80:	77fb      	strb	r3, [r7, #31]
 8007d82:	e06d      	b.n	8007e60 <UART_SetConfig+0x348>
 8007d84:	2310      	movs	r3, #16
 8007d86:	77fb      	strb	r3, [r7, #31]
 8007d88:	e06a      	b.n	8007e60 <UART_SetConfig+0x348>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a1b      	ldr	r2, [pc, #108]	; (8007dfc <UART_SetConfig+0x2e4>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d138      	bne.n	8007e06 <UART_SetConfig+0x2ee>
 8007d94:	4b13      	ldr	r3, [pc, #76]	; (8007de4 <UART_SetConfig+0x2cc>)
 8007d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d9a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007d9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007da2:	d017      	beq.n	8007dd4 <UART_SetConfig+0x2bc>
 8007da4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007da8:	d82a      	bhi.n	8007e00 <UART_SetConfig+0x2e8>
 8007daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dae:	d00b      	beq.n	8007dc8 <UART_SetConfig+0x2b0>
 8007db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007db4:	d824      	bhi.n	8007e00 <UART_SetConfig+0x2e8>
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d003      	beq.n	8007dc2 <UART_SetConfig+0x2aa>
 8007dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dbe:	d006      	beq.n	8007dce <UART_SetConfig+0x2b6>
 8007dc0:	e01e      	b.n	8007e00 <UART_SetConfig+0x2e8>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	77fb      	strb	r3, [r7, #31]
 8007dc6:	e04b      	b.n	8007e60 <UART_SetConfig+0x348>
 8007dc8:	2302      	movs	r3, #2
 8007dca:	77fb      	strb	r3, [r7, #31]
 8007dcc:	e048      	b.n	8007e60 <UART_SetConfig+0x348>
 8007dce:	2304      	movs	r3, #4
 8007dd0:	77fb      	strb	r3, [r7, #31]
 8007dd2:	e045      	b.n	8007e60 <UART_SetConfig+0x348>
 8007dd4:	2308      	movs	r3, #8
 8007dd6:	77fb      	strb	r3, [r7, #31]
 8007dd8:	e042      	b.n	8007e60 <UART_SetConfig+0x348>
 8007dda:	bf00      	nop
 8007ddc:	efff69f3 	.word	0xefff69f3
 8007de0:	40011000 	.word	0x40011000
 8007de4:	40023800 	.word	0x40023800
 8007de8:	40004400 	.word	0x40004400
 8007dec:	40004800 	.word	0x40004800
 8007df0:	40004c00 	.word	0x40004c00
 8007df4:	40005000 	.word	0x40005000
 8007df8:	40011400 	.word	0x40011400
 8007dfc:	40007800 	.word	0x40007800
 8007e00:	2310      	movs	r3, #16
 8007e02:	77fb      	strb	r3, [r7, #31]
 8007e04:	e02c      	b.n	8007e60 <UART_SetConfig+0x348>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a72      	ldr	r2, [pc, #456]	; (8007fd4 <UART_SetConfig+0x4bc>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d125      	bne.n	8007e5c <UART_SetConfig+0x344>
 8007e10:	4b71      	ldr	r3, [pc, #452]	; (8007fd8 <UART_SetConfig+0x4c0>)
 8007e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007e1a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e1e:	d017      	beq.n	8007e50 <UART_SetConfig+0x338>
 8007e20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e24:	d817      	bhi.n	8007e56 <UART_SetConfig+0x33e>
 8007e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e2a:	d00b      	beq.n	8007e44 <UART_SetConfig+0x32c>
 8007e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e30:	d811      	bhi.n	8007e56 <UART_SetConfig+0x33e>
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <UART_SetConfig+0x326>
 8007e36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e3a:	d006      	beq.n	8007e4a <UART_SetConfig+0x332>
 8007e3c:	e00b      	b.n	8007e56 <UART_SetConfig+0x33e>
 8007e3e:	2300      	movs	r3, #0
 8007e40:	77fb      	strb	r3, [r7, #31]
 8007e42:	e00d      	b.n	8007e60 <UART_SetConfig+0x348>
 8007e44:	2302      	movs	r3, #2
 8007e46:	77fb      	strb	r3, [r7, #31]
 8007e48:	e00a      	b.n	8007e60 <UART_SetConfig+0x348>
 8007e4a:	2304      	movs	r3, #4
 8007e4c:	77fb      	strb	r3, [r7, #31]
 8007e4e:	e007      	b.n	8007e60 <UART_SetConfig+0x348>
 8007e50:	2308      	movs	r3, #8
 8007e52:	77fb      	strb	r3, [r7, #31]
 8007e54:	e004      	b.n	8007e60 <UART_SetConfig+0x348>
 8007e56:	2310      	movs	r3, #16
 8007e58:	77fb      	strb	r3, [r7, #31]
 8007e5a:	e001      	b.n	8007e60 <UART_SetConfig+0x348>
 8007e5c:	2310      	movs	r3, #16
 8007e5e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	69db      	ldr	r3, [r3, #28]
 8007e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e68:	d15b      	bne.n	8007f22 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007e6a:	7ffb      	ldrb	r3, [r7, #31]
 8007e6c:	2b08      	cmp	r3, #8
 8007e6e:	d828      	bhi.n	8007ec2 <UART_SetConfig+0x3aa>
 8007e70:	a201      	add	r2, pc, #4	; (adr r2, 8007e78 <UART_SetConfig+0x360>)
 8007e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e76:	bf00      	nop
 8007e78:	08007e9d 	.word	0x08007e9d
 8007e7c:	08007ea5 	.word	0x08007ea5
 8007e80:	08007ead 	.word	0x08007ead
 8007e84:	08007ec3 	.word	0x08007ec3
 8007e88:	08007eb3 	.word	0x08007eb3
 8007e8c:	08007ec3 	.word	0x08007ec3
 8007e90:	08007ec3 	.word	0x08007ec3
 8007e94:	08007ec3 	.word	0x08007ec3
 8007e98:	08007ebb 	.word	0x08007ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e9c:	f7fe fa60 	bl	8006360 <HAL_RCC_GetPCLK1Freq>
 8007ea0:	61b8      	str	r0, [r7, #24]
        break;
 8007ea2:	e013      	b.n	8007ecc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ea4:	f7fe fa70 	bl	8006388 <HAL_RCC_GetPCLK2Freq>
 8007ea8:	61b8      	str	r0, [r7, #24]
        break;
 8007eaa:	e00f      	b.n	8007ecc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007eac:	4b4b      	ldr	r3, [pc, #300]	; (8007fdc <UART_SetConfig+0x4c4>)
 8007eae:	61bb      	str	r3, [r7, #24]
        break;
 8007eb0:	e00c      	b.n	8007ecc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eb2:	f7fe f983 	bl	80061bc <HAL_RCC_GetSysClockFreq>
 8007eb6:	61b8      	str	r0, [r7, #24]
        break;
 8007eb8:	e008      	b.n	8007ecc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ebe:	61bb      	str	r3, [r7, #24]
        break;
 8007ec0:	e004      	b.n	8007ecc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	77bb      	strb	r3, [r7, #30]
        break;
 8007eca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d074      	beq.n	8007fbc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	005a      	lsls	r2, r3, #1
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	085b      	lsrs	r3, r3, #1
 8007edc:	441a      	add	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	2b0f      	cmp	r3, #15
 8007eec:	d916      	bls.n	8007f1c <UART_SetConfig+0x404>
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ef4:	d212      	bcs.n	8007f1c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	f023 030f 	bic.w	r3, r3, #15
 8007efe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	085b      	lsrs	r3, r3, #1
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	f003 0307 	and.w	r3, r3, #7
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	89fb      	ldrh	r3, [r7, #14]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	89fa      	ldrh	r2, [r7, #14]
 8007f18:	60da      	str	r2, [r3, #12]
 8007f1a:	e04f      	b.n	8007fbc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	77bb      	strb	r3, [r7, #30]
 8007f20:	e04c      	b.n	8007fbc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f22:	7ffb      	ldrb	r3, [r7, #31]
 8007f24:	2b08      	cmp	r3, #8
 8007f26:	d828      	bhi.n	8007f7a <UART_SetConfig+0x462>
 8007f28:	a201      	add	r2, pc, #4	; (adr r2, 8007f30 <UART_SetConfig+0x418>)
 8007f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2e:	bf00      	nop
 8007f30:	08007f55 	.word	0x08007f55
 8007f34:	08007f5d 	.word	0x08007f5d
 8007f38:	08007f65 	.word	0x08007f65
 8007f3c:	08007f7b 	.word	0x08007f7b
 8007f40:	08007f6b 	.word	0x08007f6b
 8007f44:	08007f7b 	.word	0x08007f7b
 8007f48:	08007f7b 	.word	0x08007f7b
 8007f4c:	08007f7b 	.word	0x08007f7b
 8007f50:	08007f73 	.word	0x08007f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f54:	f7fe fa04 	bl	8006360 <HAL_RCC_GetPCLK1Freq>
 8007f58:	61b8      	str	r0, [r7, #24]
        break;
 8007f5a:	e013      	b.n	8007f84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f5c:	f7fe fa14 	bl	8006388 <HAL_RCC_GetPCLK2Freq>
 8007f60:	61b8      	str	r0, [r7, #24]
        break;
 8007f62:	e00f      	b.n	8007f84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f64:	4b1d      	ldr	r3, [pc, #116]	; (8007fdc <UART_SetConfig+0x4c4>)
 8007f66:	61bb      	str	r3, [r7, #24]
        break;
 8007f68:	e00c      	b.n	8007f84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f6a:	f7fe f927 	bl	80061bc <HAL_RCC_GetSysClockFreq>
 8007f6e:	61b8      	str	r0, [r7, #24]
        break;
 8007f70:	e008      	b.n	8007f84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f76:	61bb      	str	r3, [r7, #24]
        break;
 8007f78:	e004      	b.n	8007f84 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	77bb      	strb	r3, [r7, #30]
        break;
 8007f82:	bf00      	nop
    }

    if (pclk != 0U)
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d018      	beq.n	8007fbc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	085a      	lsrs	r2, r3, #1
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	441a      	add	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	2b0f      	cmp	r3, #15
 8007fa2:	d909      	bls.n	8007fb8 <UART_SetConfig+0x4a0>
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007faa:	d205      	bcs.n	8007fb8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	60da      	str	r2, [r3, #12]
 8007fb6:	e001      	b.n	8007fbc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007fc8:	7fbb      	ldrb	r3, [r7, #30]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3720      	adds	r7, #32
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	40007c00 	.word	0x40007c00
 8007fd8:	40023800 	.word	0x40023800
 8007fdc:	00f42400 	.word	0x00f42400

08007fe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00a      	beq.n	800800a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	430a      	orrs	r2, r1
 8008008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800e:	f003 0302 	and.w	r3, r3, #2
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00a      	beq.n	800802c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	430a      	orrs	r2, r1
 800802a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00a      	beq.n	800804e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008052:	f003 0308 	and.w	r3, r3, #8
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00a      	beq.n	8008070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	430a      	orrs	r2, r1
 800806e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008074:	f003 0310 	and.w	r3, r3, #16
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00a      	beq.n	8008092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	430a      	orrs	r2, r1
 8008090:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008096:	f003 0320 	and.w	r3, r3, #32
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00a      	beq.n	80080b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	430a      	orrs	r2, r1
 80080b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d01a      	beq.n	80080f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	430a      	orrs	r2, r1
 80080d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080de:	d10a      	bne.n	80080f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	430a      	orrs	r2, r1
 80080f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00a      	beq.n	8008118 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	430a      	orrs	r2, r1
 8008116:	605a      	str	r2, [r3, #4]
  }
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b086      	sub	sp, #24
 8008128:	af02      	add	r7, sp, #8
 800812a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008134:	f7fb fd70 	bl	8003c18 <HAL_GetTick>
 8008138:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 0308 	and.w	r3, r3, #8
 8008144:	2b08      	cmp	r3, #8
 8008146:	d10e      	bne.n	8008166 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f831 	bl	80081be <UART_WaitOnFlagUntilTimeout>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	e027      	b.n	80081b6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0304 	and.w	r3, r3, #4
 8008170:	2b04      	cmp	r3, #4
 8008172:	d10e      	bne.n	8008192 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008174:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f81b 	bl	80081be <UART_WaitOnFlagUntilTimeout>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d001      	beq.n	8008192 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e011      	b.n	80081b6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2220      	movs	r2, #32
 8008196:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2220      	movs	r2, #32
 800819c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b09c      	sub	sp, #112	; 0x70
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	60f8      	str	r0, [r7, #12]
 80081c6:	60b9      	str	r1, [r7, #8]
 80081c8:	603b      	str	r3, [r7, #0]
 80081ca:	4613      	mov	r3, r2
 80081cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ce:	e0a7      	b.n	8008320 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d6:	f000 80a3 	beq.w	8008320 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081da:	f7fb fd1d 	bl	8003c18 <HAL_GetTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d302      	bcc.n	80081f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80081ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d13f      	bne.n	8008270 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081f8:	e853 3f00 	ldrex	r3, [r3]
 80081fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80081fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008200:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008204:	667b      	str	r3, [r7, #100]	; 0x64
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	461a      	mov	r2, r3
 800820c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800820e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008210:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008212:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008214:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008216:	e841 2300 	strex	r3, r2, [r1]
 800821a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800821c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1e6      	bne.n	80081f0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3308      	adds	r3, #8
 8008228:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800822c:	e853 3f00 	ldrex	r3, [r3]
 8008230:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008234:	f023 0301 	bic.w	r3, r3, #1
 8008238:	663b      	str	r3, [r7, #96]	; 0x60
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3308      	adds	r3, #8
 8008240:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008242:	64ba      	str	r2, [r7, #72]	; 0x48
 8008244:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008246:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008248:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800824a:	e841 2300 	strex	r3, r2, [r1]
 800824e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1e5      	bne.n	8008222 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2220      	movs	r2, #32
 800825a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2220      	movs	r2, #32
 8008260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800826c:	2303      	movs	r3, #3
 800826e:	e068      	b.n	8008342 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 0304 	and.w	r3, r3, #4
 800827a:	2b00      	cmp	r3, #0
 800827c:	d050      	beq.n	8008320 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	69db      	ldr	r3, [r3, #28]
 8008284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800828c:	d148      	bne.n	8008320 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008296:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a0:	e853 3f00 	ldrex	r3, [r3]
 80082a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	461a      	mov	r2, r3
 80082b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082b6:	637b      	str	r3, [r7, #52]	; 0x34
 80082b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082be:	e841 2300 	strex	r3, r2, [r1]
 80082c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d1e6      	bne.n	8008298 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	3308      	adds	r3, #8
 80082d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	e853 3f00 	ldrex	r3, [r3]
 80082d8:	613b      	str	r3, [r7, #16]
   return(result);
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	f023 0301 	bic.w	r3, r3, #1
 80082e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	3308      	adds	r3, #8
 80082e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082ea:	623a      	str	r2, [r7, #32]
 80082ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ee:	69f9      	ldr	r1, [r7, #28]
 80082f0:	6a3a      	ldr	r2, [r7, #32]
 80082f2:	e841 2300 	strex	r3, r2, [r1]
 80082f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d1e5      	bne.n	80082ca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2220      	movs	r2, #32
 8008302:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2220      	movs	r2, #32
 8008308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2220      	movs	r2, #32
 8008310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800831c:	2303      	movs	r3, #3
 800831e:	e010      	b.n	8008342 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	69da      	ldr	r2, [r3, #28]
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	4013      	ands	r3, r2
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	429a      	cmp	r2, r3
 800832e:	bf0c      	ite	eq
 8008330:	2301      	moveq	r3, #1
 8008332:	2300      	movne	r3, #0
 8008334:	b2db      	uxtb	r3, r3
 8008336:	461a      	mov	r2, r3
 8008338:	79fb      	ldrb	r3, [r7, #7]
 800833a:	429a      	cmp	r2, r3
 800833c:	f43f af48 	beq.w	80081d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3770      	adds	r7, #112	; 0x70
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
	...

0800834c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800834c:	b480      	push	{r7}
 800834e:	b097      	sub	sp, #92	; 0x5c
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	4613      	mov	r3, r2
 8008358:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	88fa      	ldrh	r2, [r7, #6]
 8008364:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	88fa      	ldrh	r2, [r7, #6]
 800836c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800837e:	d10e      	bne.n	800839e <UART_Start_Receive_IT+0x52>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d105      	bne.n	8008394 <UART_Start_Receive_IT+0x48>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800838e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008392:	e02d      	b.n	80083f0 <UART_Start_Receive_IT+0xa4>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	22ff      	movs	r2, #255	; 0xff
 8008398:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800839c:	e028      	b.n	80083f0 <UART_Start_Receive_IT+0xa4>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10d      	bne.n	80083c2 <UART_Start_Receive_IT+0x76>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d104      	bne.n	80083b8 <UART_Start_Receive_IT+0x6c>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	22ff      	movs	r2, #255	; 0xff
 80083b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083b6:	e01b      	b.n	80083f0 <UART_Start_Receive_IT+0xa4>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	227f      	movs	r2, #127	; 0x7f
 80083bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083c0:	e016      	b.n	80083f0 <UART_Start_Receive_IT+0xa4>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083ca:	d10d      	bne.n	80083e8 <UART_Start_Receive_IT+0x9c>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d104      	bne.n	80083de <UART_Start_Receive_IT+0x92>
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	227f      	movs	r2, #127	; 0x7f
 80083d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083dc:	e008      	b.n	80083f0 <UART_Start_Receive_IT+0xa4>
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	223f      	movs	r2, #63	; 0x3f
 80083e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083e6:	e003      	b.n	80083f0 <UART_Start_Receive_IT+0xa4>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2222      	movs	r2, #34	; 0x22
 80083fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	3308      	adds	r3, #8
 8008406:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800840a:	e853 3f00 	ldrex	r3, [r3]
 800840e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008412:	f043 0301 	orr.w	r3, r3, #1
 8008416:	657b      	str	r3, [r7, #84]	; 0x54
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	3308      	adds	r3, #8
 800841e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008420:	64ba      	str	r2, [r7, #72]	; 0x48
 8008422:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008424:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008426:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008428:	e841 2300 	strex	r3, r2, [r1]
 800842c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800842e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1e5      	bne.n	8008400 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800843c:	d107      	bne.n	800844e <UART_Start_Receive_IT+0x102>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d103      	bne.n	800844e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	4a21      	ldr	r2, [pc, #132]	; (80084d0 <UART_Start_Receive_IT+0x184>)
 800844a:	669a      	str	r2, [r3, #104]	; 0x68
 800844c:	e002      	b.n	8008454 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	4a20      	ldr	r2, [pc, #128]	; (80084d4 <UART_Start_Receive_IT+0x188>)
 8008452:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d019      	beq.n	8008490 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008464:	e853 3f00 	ldrex	r3, [r3]
 8008468:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008470:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	461a      	mov	r2, r3
 8008478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800847a:	637b      	str	r3, [r7, #52]	; 0x34
 800847c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008480:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008482:	e841 2300 	strex	r3, r2, [r1]
 8008486:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1e6      	bne.n	800845c <UART_Start_Receive_IT+0x110>
 800848e:	e018      	b.n	80084c2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	e853 3f00 	ldrex	r3, [r3]
 800849c:	613b      	str	r3, [r7, #16]
   return(result);
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	f043 0320 	orr.w	r3, r3, #32
 80084a4:	653b      	str	r3, [r7, #80]	; 0x50
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	461a      	mov	r2, r3
 80084ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084ae:	623b      	str	r3, [r7, #32]
 80084b0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b2:	69f9      	ldr	r1, [r7, #28]
 80084b4:	6a3a      	ldr	r2, [r7, #32]
 80084b6:	e841 2300 	strex	r3, r2, [r1]
 80084ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1e6      	bne.n	8008490 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	375c      	adds	r7, #92	; 0x5c
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr
 80084d0:	08008787 	.word	0x08008787
 80084d4:	08008621 	.word	0x08008621

080084d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084d8:	b480      	push	{r7}
 80084da:	b095      	sub	sp, #84	; 0x54
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e8:	e853 3f00 	ldrex	r3, [r3]
 80084ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	461a      	mov	r2, r3
 80084fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084fe:	643b      	str	r3, [r7, #64]	; 0x40
 8008500:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008502:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008504:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008506:	e841 2300 	strex	r3, r2, [r1]
 800850a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800850c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850e:	2b00      	cmp	r3, #0
 8008510:	d1e6      	bne.n	80084e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3308      	adds	r3, #8
 8008518:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851a:	6a3b      	ldr	r3, [r7, #32]
 800851c:	e853 3f00 	ldrex	r3, [r3]
 8008520:	61fb      	str	r3, [r7, #28]
   return(result);
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	f023 0301 	bic.w	r3, r3, #1
 8008528:	64bb      	str	r3, [r7, #72]	; 0x48
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3308      	adds	r3, #8
 8008530:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008532:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008534:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008536:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800853a:	e841 2300 	strex	r3, r2, [r1]
 800853e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1e5      	bne.n	8008512 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800854a:	2b01      	cmp	r3, #1
 800854c:	d118      	bne.n	8008580 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	e853 3f00 	ldrex	r3, [r3]
 800855a:	60bb      	str	r3, [r7, #8]
   return(result);
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	f023 0310 	bic.w	r3, r3, #16
 8008562:	647b      	str	r3, [r7, #68]	; 0x44
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	461a      	mov	r2, r3
 800856a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800856c:	61bb      	str	r3, [r7, #24]
 800856e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008570:	6979      	ldr	r1, [r7, #20]
 8008572:	69ba      	ldr	r2, [r7, #24]
 8008574:	e841 2300 	strex	r3, r2, [r1]
 8008578:	613b      	str	r3, [r7, #16]
   return(result);
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1e6      	bne.n	800854e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2220      	movs	r2, #32
 8008584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008594:	bf00      	nop
 8008596:	3754      	adds	r7, #84	; 0x54
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f7ff fa8a 	bl	8007ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085c4:	bf00      	nop
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b088      	sub	sp, #32
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	e853 3f00 	ldrex	r3, [r3]
 80085e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085e8:	61fb      	str	r3, [r7, #28]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	461a      	mov	r2, r3
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	61bb      	str	r3, [r7, #24]
 80085f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f6:	6979      	ldr	r1, [r7, #20]
 80085f8:	69ba      	ldr	r2, [r7, #24]
 80085fa:	e841 2300 	strex	r3, r2, [r1]
 80085fe:	613b      	str	r3, [r7, #16]
   return(result);
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1e6      	bne.n	80085d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2220      	movs	r2, #32
 800860a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7ff fa56 	bl	8007ac4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008618:	bf00      	nop
 800861a:	3720      	adds	r7, #32
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b096      	sub	sp, #88	; 0x58
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800862e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008638:	2b22      	cmp	r3, #34	; 0x22
 800863a:	f040 8098 	bne.w	800876e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008644:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008648:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800864c:	b2d9      	uxtb	r1, r3
 800864e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008652:	b2da      	uxtb	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008658:	400a      	ands	r2, r1
 800865a:	b2d2      	uxtb	r2, r2
 800865c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008662:	1c5a      	adds	r2, r3, #1
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800866e:	b29b      	uxth	r3, r3
 8008670:	3b01      	subs	r3, #1
 8008672:	b29a      	uxth	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008680:	b29b      	uxth	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	d17b      	bne.n	800877e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868e:	e853 3f00 	ldrex	r3, [r3]
 8008692:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008696:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800869a:	653b      	str	r3, [r7, #80]	; 0x50
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	461a      	mov	r2, r3
 80086a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086a4:	647b      	str	r3, [r7, #68]	; 0x44
 80086a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086ac:	e841 2300 	strex	r3, r2, [r1]
 80086b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1e6      	bne.n	8008686 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3308      	adds	r3, #8
 80086be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	e853 3f00 	ldrex	r3, [r3]
 80086c6:	623b      	str	r3, [r7, #32]
   return(result);
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	f023 0301 	bic.w	r3, r3, #1
 80086ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	3308      	adds	r3, #8
 80086d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086d8:	633a      	str	r2, [r7, #48]	; 0x30
 80086da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086e0:	e841 2300 	strex	r3, r2, [r1]
 80086e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1e5      	bne.n	80086b8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2220      	movs	r2, #32
 80086f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008704:	2b01      	cmp	r3, #1
 8008706:	d12e      	bne.n	8008766 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	e853 3f00 	ldrex	r3, [r3]
 800871a:	60fb      	str	r3, [r7, #12]
   return(result);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f023 0310 	bic.w	r3, r3, #16
 8008722:	64bb      	str	r3, [r7, #72]	; 0x48
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	461a      	mov	r2, r3
 800872a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800872c:	61fb      	str	r3, [r7, #28]
 800872e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008730:	69b9      	ldr	r1, [r7, #24]
 8008732:	69fa      	ldr	r2, [r7, #28]
 8008734:	e841 2300 	strex	r3, r2, [r1]
 8008738:	617b      	str	r3, [r7, #20]
   return(result);
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1e6      	bne.n	800870e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	69db      	ldr	r3, [r3, #28]
 8008746:	f003 0310 	and.w	r3, r3, #16
 800874a:	2b10      	cmp	r3, #16
 800874c:	d103      	bne.n	8008756 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2210      	movs	r2, #16
 8008754:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800875c:	4619      	mov	r1, r3
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7ff f9c4 	bl	8007aec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008764:	e00b      	b.n	800877e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7fa ff26 	bl	80035b8 <HAL_UART_RxCpltCallback>
}
 800876c:	e007      	b.n	800877e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	699a      	ldr	r2, [r3, #24]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f042 0208 	orr.w	r2, r2, #8
 800877c:	619a      	str	r2, [r3, #24]
}
 800877e:	bf00      	nop
 8008780:	3758      	adds	r7, #88	; 0x58
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b096      	sub	sp, #88	; 0x58
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008794:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800879e:	2b22      	cmp	r3, #34	; 0x22
 80087a0:	f040 8098 	bne.w	80088d4 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087aa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80087b4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80087b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80087bc:	4013      	ands	r3, r2
 80087be:	b29a      	uxth	r2, r3
 80087c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087c2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c8:	1c9a      	adds	r2, r3, #2
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	3b01      	subs	r3, #1
 80087d8:	b29a      	uxth	r2, r3
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d17b      	bne.n	80088e4 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f4:	e853 3f00 	ldrex	r3, [r3]
 80087f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008800:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	461a      	mov	r2, r3
 8008808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800880a:	643b      	str	r3, [r7, #64]	; 0x40
 800880c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008810:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008812:	e841 2300 	strex	r3, r2, [r1]
 8008816:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1e6      	bne.n	80087ec <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	3308      	adds	r3, #8
 8008824:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008826:	6a3b      	ldr	r3, [r7, #32]
 8008828:	e853 3f00 	ldrex	r3, [r3]
 800882c:	61fb      	str	r3, [r7, #28]
   return(result);
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	f023 0301 	bic.w	r3, r3, #1
 8008834:	64bb      	str	r3, [r7, #72]	; 0x48
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	3308      	adds	r3, #8
 800883c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800883e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008840:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008842:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008846:	e841 2300 	strex	r3, r2, [r1]
 800884a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1e5      	bne.n	800881e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2220      	movs	r2, #32
 8008856:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800886a:	2b01      	cmp	r3, #1
 800886c:	d12e      	bne.n	80088cc <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	e853 3f00 	ldrex	r3, [r3]
 8008880:	60bb      	str	r3, [r7, #8]
   return(result);
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	f023 0310 	bic.w	r3, r3, #16
 8008888:	647b      	str	r3, [r7, #68]	; 0x44
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	461a      	mov	r2, r3
 8008890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008892:	61bb      	str	r3, [r7, #24]
 8008894:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008896:	6979      	ldr	r1, [r7, #20]
 8008898:	69ba      	ldr	r2, [r7, #24]
 800889a:	e841 2300 	strex	r3, r2, [r1]
 800889e:	613b      	str	r3, [r7, #16]
   return(result);
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1e6      	bne.n	8008874 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	69db      	ldr	r3, [r3, #28]
 80088ac:	f003 0310 	and.w	r3, r3, #16
 80088b0:	2b10      	cmp	r3, #16
 80088b2:	d103      	bne.n	80088bc <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2210      	movs	r2, #16
 80088ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80088c2:	4619      	mov	r1, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f7ff f911 	bl	8007aec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088ca:	e00b      	b.n	80088e4 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f7fa fe73 	bl	80035b8 <HAL_UART_RxCpltCallback>
}
 80088d2:	e007      	b.n	80088e4 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	699a      	ldr	r2, [r3, #24]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f042 0208 	orr.w	r2, r2, #8
 80088e2:	619a      	str	r2, [r3, #24]
}
 80088e4:	bf00      	nop
 80088e6:	3758      	adds	r7, #88	; 0x58
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <__libc_init_array>:
 80088ec:	b570      	push	{r4, r5, r6, lr}
 80088ee:	4d0d      	ldr	r5, [pc, #52]	; (8008924 <__libc_init_array+0x38>)
 80088f0:	4c0d      	ldr	r4, [pc, #52]	; (8008928 <__libc_init_array+0x3c>)
 80088f2:	1b64      	subs	r4, r4, r5
 80088f4:	10a4      	asrs	r4, r4, #2
 80088f6:	2600      	movs	r6, #0
 80088f8:	42a6      	cmp	r6, r4
 80088fa:	d109      	bne.n	8008910 <__libc_init_array+0x24>
 80088fc:	4d0b      	ldr	r5, [pc, #44]	; (800892c <__libc_init_array+0x40>)
 80088fe:	4c0c      	ldr	r4, [pc, #48]	; (8008930 <__libc_init_array+0x44>)
 8008900:	f000 f864 	bl	80089cc <_init>
 8008904:	1b64      	subs	r4, r4, r5
 8008906:	10a4      	asrs	r4, r4, #2
 8008908:	2600      	movs	r6, #0
 800890a:	42a6      	cmp	r6, r4
 800890c:	d105      	bne.n	800891a <__libc_init_array+0x2e>
 800890e:	bd70      	pop	{r4, r5, r6, pc}
 8008910:	f855 3b04 	ldr.w	r3, [r5], #4
 8008914:	4798      	blx	r3
 8008916:	3601      	adds	r6, #1
 8008918:	e7ee      	b.n	80088f8 <__libc_init_array+0xc>
 800891a:	f855 3b04 	ldr.w	r3, [r5], #4
 800891e:	4798      	blx	r3
 8008920:	3601      	adds	r6, #1
 8008922:	e7f2      	b.n	800890a <__libc_init_array+0x1e>
 8008924:	0800919c 	.word	0x0800919c
 8008928:	0800919c 	.word	0x0800919c
 800892c:	0800919c 	.word	0x0800919c
 8008930:	080091a0 	.word	0x080091a0

08008934 <memset>:
 8008934:	4402      	add	r2, r0
 8008936:	4603      	mov	r3, r0
 8008938:	4293      	cmp	r3, r2
 800893a:	d100      	bne.n	800893e <memset+0xa>
 800893c:	4770      	bx	lr
 800893e:	f803 1b01 	strb.w	r1, [r3], #1
 8008942:	e7f9      	b.n	8008938 <memset+0x4>

08008944 <__utoa>:
 8008944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008946:	4c1f      	ldr	r4, [pc, #124]	; (80089c4 <__utoa+0x80>)
 8008948:	b08b      	sub	sp, #44	; 0x2c
 800894a:	4605      	mov	r5, r0
 800894c:	460b      	mov	r3, r1
 800894e:	466e      	mov	r6, sp
 8008950:	f104 0c20 	add.w	ip, r4, #32
 8008954:	6820      	ldr	r0, [r4, #0]
 8008956:	6861      	ldr	r1, [r4, #4]
 8008958:	4637      	mov	r7, r6
 800895a:	c703      	stmia	r7!, {r0, r1}
 800895c:	3408      	adds	r4, #8
 800895e:	4564      	cmp	r4, ip
 8008960:	463e      	mov	r6, r7
 8008962:	d1f7      	bne.n	8008954 <__utoa+0x10>
 8008964:	7921      	ldrb	r1, [r4, #4]
 8008966:	7139      	strb	r1, [r7, #4]
 8008968:	1e91      	subs	r1, r2, #2
 800896a:	6820      	ldr	r0, [r4, #0]
 800896c:	6038      	str	r0, [r7, #0]
 800896e:	2922      	cmp	r1, #34	; 0x22
 8008970:	f04f 0100 	mov.w	r1, #0
 8008974:	d904      	bls.n	8008980 <__utoa+0x3c>
 8008976:	7019      	strb	r1, [r3, #0]
 8008978:	460b      	mov	r3, r1
 800897a:	4618      	mov	r0, r3
 800897c:	b00b      	add	sp, #44	; 0x2c
 800897e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008980:	1e58      	subs	r0, r3, #1
 8008982:	4684      	mov	ip, r0
 8008984:	fbb5 f7f2 	udiv	r7, r5, r2
 8008988:	fb02 5617 	mls	r6, r2, r7, r5
 800898c:	3628      	adds	r6, #40	; 0x28
 800898e:	446e      	add	r6, sp
 8008990:	460c      	mov	r4, r1
 8008992:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008996:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800899a:	462e      	mov	r6, r5
 800899c:	42b2      	cmp	r2, r6
 800899e:	f101 0101 	add.w	r1, r1, #1
 80089a2:	463d      	mov	r5, r7
 80089a4:	d9ee      	bls.n	8008984 <__utoa+0x40>
 80089a6:	2200      	movs	r2, #0
 80089a8:	545a      	strb	r2, [r3, r1]
 80089aa:	1919      	adds	r1, r3, r4
 80089ac:	1aa5      	subs	r5, r4, r2
 80089ae:	42aa      	cmp	r2, r5
 80089b0:	dae3      	bge.n	800897a <__utoa+0x36>
 80089b2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80089b6:	780e      	ldrb	r6, [r1, #0]
 80089b8:	7006      	strb	r6, [r0, #0]
 80089ba:	3201      	adds	r2, #1
 80089bc:	f801 5901 	strb.w	r5, [r1], #-1
 80089c0:	e7f4      	b.n	80089ac <__utoa+0x68>
 80089c2:	bf00      	nop
 80089c4:	0800916c 	.word	0x0800916c

080089c8 <utoa>:
 80089c8:	f7ff bfbc 	b.w	8008944 <__utoa>

080089cc <_init>:
 80089cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ce:	bf00      	nop
 80089d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089d2:	bc08      	pop	{r3}
 80089d4:	469e      	mov	lr, r3
 80089d6:	4770      	bx	lr

080089d8 <_fini>:
 80089d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089da:	bf00      	nop
 80089dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089de:	bc08      	pop	{r3}
 80089e0:	469e      	mov	lr, r3
 80089e2:	4770      	bx	lr
