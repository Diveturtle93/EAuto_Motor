
Motorsteuergeraet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b44  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006fc  08007d3c  08007d3c  00017d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008438  08008438  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008438  08008438  00018438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008440  08008440  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008440  08008440  00018440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008444  08008444  00018444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000000c  08008454  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08008454  00020214  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a4ce  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d2f  00000000  00000000  0003a508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  0003e238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  0003f4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c9da  00000000  00000000  00040580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab22  00000000  00000000  0006cf5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108d9b  00000000  00000000  00087a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00190817  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a44  00000000  00000000  00190868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08007d24 	.word	0x08007d24

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08007d24 	.word	0x08007d24

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <BAMOCAN_ID>:
//----------------------------------------------------------------------

// Ermittle Register nach Empfang Bamocar CAN-ID
//----------------------------------------------------------------------
void BAMOCAN_ID(uint8_t* data, uint8_t dlc)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	460b      	mov	r3, r1
 8000556:	70fb      	strb	r3, [r7, #3]
	uint8_t Reg = data[0];
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	733b      	strb	r3, [r7, #12]
	uint16_t speed = 0, strom;
 800055e:	2300      	movs	r3, #0
 8000560:	817b      	strh	r3, [r7, #10]

	// Waehlen welches Register gesendet wurde
	switch (Reg)
 8000562:	7b3b      	ldrb	r3, [r7, #12]
 8000564:	2bd8      	cmp	r3, #216	; 0xd8
 8000566:	f000 80be 	beq.w	80006e6 <BAMOCAN_ID+0x19a>
 800056a:	2bd8      	cmp	r3, #216	; 0xd8
 800056c:	f300 8100 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 8000570:	2ba8      	cmp	r3, #168	; 0xa8
 8000572:	d012      	beq.n	800059a <BAMOCAN_ID+0x4e>
 8000574:	2ba8      	cmp	r3, #168	; 0xa8
 8000576:	f300 80fb 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 800057a:	2b8f      	cmp	r3, #143	; 0x8f
 800057c:	d077      	beq.n	800066e <BAMOCAN_ID+0x122>
 800057e:	2b8f      	cmp	r3, #143	; 0x8f
 8000580:	f300 80f6 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 8000584:	2b5f      	cmp	r3, #95	; 0x5f
 8000586:	d025      	beq.n	80005d4 <BAMOCAN_ID+0x88>
 8000588:	2b5f      	cmp	r3, #95	; 0x5f
 800058a:	f300 80f1 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 800058e:	2b1b      	cmp	r3, #27
 8000590:	f000 80d4 	beq.w	800073c <BAMOCAN_ID+0x1f0>
 8000594:	2b40      	cmp	r3, #64	; 0x40
 8000596:	d037      	beq.n	8000608 <BAMOCAN_ID+0xbc>
 8000598:	e0ea      	b.n	8000770 <BAMOCAN_ID+0x224>
	{
		// Drehzahl vom Bamocar bekommen
		case BAMOCAR_REG_N_ACT_FILTER:
			speed = ((data[2]<<8) + data[1]);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3302      	adds	r3, #2
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	021b      	lsls	r3, r3, #8
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	3301      	adds	r3, #1
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	4413      	add	r3, r2
 80005b0:	817b      	strh	r3, [r7, #10]
			motor1.Drehzahl = speed;
 80005b2:	4a74      	ldr	r2, [pc, #464]	; (8000784 <BAMOCAN_ID+0x238>)
 80005b4:	897b      	ldrh	r3, [r7, #10]
 80005b6:	8053      	strh	r3, [r2, #2]
// Uart Ausgabe
#ifdef DEBUG_BAMOCAR
			uartTransmit("Motordrehzahl\n", 14);
 80005b8:	210e      	movs	r1, #14
 80005ba:	4873      	ldr	r0, [pc, #460]	; (8000788 <BAMOCAN_ID+0x23c>)
 80005bc:	f000 f900 	bl	80007c0 <uartTransmit>
			uartTransmitNumber(speed, 10);
 80005c0:	897b      	ldrh	r3, [r7, #10]
 80005c2:	210a      	movs	r1, #10
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f90f 	bl	80007e8 <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005ca:	2101      	movs	r1, #1
 80005cc:	486f      	ldr	r0, [pc, #444]	; (800078c <BAMOCAN_ID+0x240>)
 80005ce:	f000 f8f7 	bl	80007c0 <uartTransmit>
#endif
			break;
 80005d2:	e0d2      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Stromwert von Bamocar bekommen
		case BAMOCAR_REG_I_ACT_FILTER:
			strom = ((data[2]<<8) + data[1]);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3302      	adds	r3, #2
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	021b      	lsls	r3, r3, #8
 80005de:	b29a      	uxth	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3301      	adds	r3, #1
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	4413      	add	r3, r2
 80005ea:	813b      	strh	r3, [r7, #8]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Motorstrom\n", 11);
 80005ec:	210b      	movs	r1, #11
 80005ee:	4868      	ldr	r0, [pc, #416]	; (8000790 <BAMOCAN_ID+0x244>)
 80005f0:	f000 f8e6 	bl	80007c0 <uartTransmit>
			uartTransmitNumber(strom, 10);
 80005f4:	893b      	ldrh	r3, [r7, #8]
 80005f6:	210a      	movs	r1, #10
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 f8f5 	bl	80007e8 <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005fe:	2101      	movs	r1, #1
 8000600:	4862      	ldr	r0, [pc, #392]	; (800078c <BAMOCAN_ID+0x240>)
 8000602:	f000 f8dd 	bl	80007c0 <uartTransmit>
#endif

			break;
 8000606:	e0b8      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Statusregister von Bamocar bekommen
		case BAMOCAR_REG_STATUS:
			bamocar_stat.status1 = ((data[4] << 24) + (data[3] << 16) + (data[2] << 8) + data[1]);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3304      	adds	r3, #4
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	061a      	lsls	r2, r3, #24
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3303      	adds	r3, #3
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	041b      	lsls	r3, r3, #16
 8000618:	441a      	add	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	3302      	adds	r3, #2
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	4413      	add	r3, r2
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	3201      	adds	r2, #1
 8000628:	7812      	ldrb	r2, [r2, #0]
 800062a:	4413      	add	r3, r2
 800062c:	461a      	mov	r2, r3
 800062e:	4b59      	ldr	r3, [pc, #356]	; (8000794 <BAMOCAN_ID+0x248>)
 8000630:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Status\n", 15);
 8000632:	210f      	movs	r1, #15
 8000634:	4858      	ldr	r0, [pc, #352]	; (8000798 <BAMOCAN_ID+0x24c>)
 8000636:	f000 f8c3 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 4; i > 0; i--)
 800063a:	2304      	movs	r3, #4
 800063c:	73fb      	strb	r3, [r7, #15]
 800063e:	e00e      	b.n	800065e <BAMOCAN_ID+0x112>
			{
				uartTransmitNumber(bamocar_stat.status[i-1], 16);
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	3b01      	subs	r3, #1
 8000644:	4a53      	ldr	r2, [pc, #332]	; (8000794 <BAMOCAN_ID+0x248>)
 8000646:	5cd3      	ldrb	r3, [r2, r3]
 8000648:	2110      	movs	r1, #16
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f8cc 	bl	80007e8 <uartTransmitNumber>
				uartTransmit(" ", 1);
 8000650:	2101      	movs	r1, #1
 8000652:	4852      	ldr	r0, [pc, #328]	; (800079c <BAMOCAN_ID+0x250>)
 8000654:	f000 f8b4 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 4; i > 0; i--)
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	3b01      	subs	r3, #1
 800065c:	73fb      	strb	r3, [r7, #15]
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d1ed      	bne.n	8000640 <BAMOCAN_ID+0xf4>
			}
			uartTransmit("\n", 1);
 8000664:	2101      	movs	r1, #1
 8000666:	4849      	ldr	r0, [pc, #292]	; (800078c <BAMOCAN_ID+0x240>)
 8000668:	f000 f8aa 	bl	80007c0 <uartTransmit>
#endif

			break;
 800066c:	e085      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Errorregister von Bamocar bekommen
		case BAMOCAR_REG_ERROR:
			bamocar_error.error1 = ((data[2] << 8) + data[1]);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3302      	adds	r3, #2
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b29b      	uxth	r3, r3
 8000676:	021b      	lsls	r3, r3, #8
 8000678:	b29a      	uxth	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	3301      	adds	r3, #1
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b29b      	uxth	r3, r3
 8000682:	4413      	add	r3, r2
 8000684:	b29a      	uxth	r2, r3
 8000686:	4b46      	ldr	r3, [pc, #280]	; (80007a0 <BAMOCAN_ID+0x254>)
 8000688:	801a      	strh	r2, [r3, #0]
			bamocar_warnung.warnung1 = ((data[4] << 8) + data[3]);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3304      	adds	r3, #4
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	b29b      	uxth	r3, r3
 8000692:	021b      	lsls	r3, r3, #8
 8000694:	b29a      	uxth	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3303      	adds	r3, #3
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b29b      	uxth	r3, r3
 800069e:	4413      	add	r3, r2
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	4b40      	ldr	r3, [pc, #256]	; (80007a4 <BAMOCAN_ID+0x258>)
 80006a4:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Error\n", 14);
 80006a6:	210e      	movs	r1, #14
 80006a8:	483f      	ldr	r0, [pc, #252]	; (80007a8 <BAMOCAN_ID+0x25c>)
 80006aa:	f000 f889 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	73bb      	strb	r3, [r7, #14]
 80006b2:	e010      	b.n	80006d6 <BAMOCAN_ID+0x18a>
			{
				uartTransmitNumber(data[1+i], 16);
 80006b4:	7bbb      	ldrb	r3, [r7, #14]
 80006b6:	3301      	adds	r3, #1
 80006b8:	461a      	mov	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2110      	movs	r1, #16
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 f890 	bl	80007e8 <uartTransmitNumber>
				uartTransmit(" ", 1);
 80006c8:	2101      	movs	r1, #1
 80006ca:	4834      	ldr	r0, [pc, #208]	; (800079c <BAMOCAN_ID+0x250>)
 80006cc:	f000 f878 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006d0:	7bbb      	ldrb	r3, [r7, #14]
 80006d2:	3301      	adds	r3, #1
 80006d4:	73bb      	strb	r3, [r7, #14]
 80006d6:	7bbb      	ldrb	r3, [r7, #14]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	d9eb      	bls.n	80006b4 <BAMOCAN_ID+0x168>
			}
			uartTransmit("\n", 1);
 80006dc:	2101      	movs	r1, #1
 80006de:	482b      	ldr	r0, [pc, #172]	; (800078c <BAMOCAN_ID+0x240>)
 80006e0:	f000 f86e 	bl	80007c0 <uartTransmit>
#endif

			break;
 80006e4:	e049      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Status IO Register von Bamocar bekommen
		case BAMOCAR_REG_STATUS_IO:
			bamocar_IOstatus.status1 = ((data[2] << 8) + data[1]);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3302      	adds	r3, #2
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	021b      	lsls	r3, r3, #8
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3301      	adds	r3, #1
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	4413      	add	r3, r2
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <BAMOCAN_ID+0x260>)
 8000700:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar IO Status\n", 18);
 8000702:	2112      	movs	r1, #18
 8000704:	482a      	ldr	r0, [pc, #168]	; (80007b0 <BAMOCAN_ID+0x264>)
 8000706:	f000 f85b 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 2; i++)
 800070a:	2300      	movs	r3, #0
 800070c:	737b      	strb	r3, [r7, #13]
 800070e:	e00d      	b.n	800072c <BAMOCAN_ID+0x1e0>
			{
				uartTransmitNumber(bamocar_IOstatus.status[i], 16);
 8000710:	7b7b      	ldrb	r3, [r7, #13]
 8000712:	4a26      	ldr	r2, [pc, #152]	; (80007ac <BAMOCAN_ID+0x260>)
 8000714:	5cd3      	ldrb	r3, [r2, r3]
 8000716:	2110      	movs	r1, #16
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f865 	bl	80007e8 <uartTransmitNumber>
				uartTransmit(" ", 1);
 800071e:	2101      	movs	r1, #1
 8000720:	481e      	ldr	r0, [pc, #120]	; (800079c <BAMOCAN_ID+0x250>)
 8000722:	f000 f84d 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 2; i++)
 8000726:	7b7b      	ldrb	r3, [r7, #13]
 8000728:	3301      	adds	r3, #1
 800072a:	737b      	strb	r3, [r7, #13]
 800072c:	7b7b      	ldrb	r3, [r7, #13]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d9ee      	bls.n	8000710 <BAMOCAN_ID+0x1c4>
			}
			uartTransmit("\n", 1);
 8000732:	2101      	movs	r1, #1
 8000734:	4815      	ldr	r0, [pc, #84]	; (800078c <BAMOCAN_ID+0x240>)
 8000736:	f000 f843 	bl	80007c0 <uartTransmit>
#endif

			break;
 800073a:	e01e      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Firmware von Bamocar ausgelesen
		case BAMOCAR_REG_FIRMWARE:
			bamocar_data.data = ((data[2]<<8) + data[1]);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3302      	adds	r3, #2
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	021b      	lsls	r3, r3, #8
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	3201      	adds	r2, #1
 8000748:	7812      	ldrb	r2, [r2, #0]
 800074a:	4413      	add	r3, r2
 800074c:	461a      	mov	r2, r3
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <BAMOCAN_ID+0x268>)
 8000750:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Firmware\n", 9);
 8000752:	2109      	movs	r1, #9
 8000754:	4818      	ldr	r0, [pc, #96]	; (80007b8 <BAMOCAN_ID+0x26c>)
 8000756:	f000 f833 	bl	80007c0 <uartTransmit>
			uartTransmitNumber(bamocar_data.data, 16);
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <BAMOCAN_ID+0x268>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2110      	movs	r1, #16
 8000760:	4618      	mov	r0, r3
 8000762:	f000 f841 	bl	80007e8 <uartTransmitNumber>
			uartTransmit("\n", 1);
 8000766:	2101      	movs	r1, #1
 8000768:	4808      	ldr	r0, [pc, #32]	; (800078c <BAMOCAN_ID+0x240>)
 800076a:	f000 f829 	bl	80007c0 <uartTransmit>
#endif

			break;
 800076e:	e004      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Register fuer Bamocar nicht definiert, Fehler
		default:
			uartTransmit("Bamocar Register nicht definiert\n", 33);
 8000770:	2121      	movs	r1, #33	; 0x21
 8000772:	4812      	ldr	r0, [pc, #72]	; (80007bc <BAMOCAN_ID+0x270>)
 8000774:	f000 f824 	bl	80007c0 <uartTransmit>
			break;
 8000778:	bf00      	nop
	}
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000134 	.word	0x20000134
 8000788:	08007d3c 	.word	0x08007d3c
 800078c:	08007d4c 	.word	0x08007d4c
 8000790:	08007d50 	.word	0x08007d50
 8000794:	2000002c 	.word	0x2000002c
 8000798:	08007d5c 	.word	0x08007d5c
 800079c:	08007d6c 	.word	0x08007d6c
 80007a0:	20000030 	.word	0x20000030
 80007a4:	20000034 	.word	0x20000034
 80007a8:	08007d70 	.word	0x08007d70
 80007ac:	20000028 	.word	0x20000028
 80007b0:	08007d80 	.word	0x08007d80
 80007b4:	20000038 	.word	0x20000038
 80007b8:	08007d94 	.word	0x08007d94
 80007bc:	08007da0 	.word	0x08007da0

080007c0 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	4803      	ldr	r0, [pc, #12]	; (80007e4 <uartTransmit+0x24>)
 80007d6:	f005 ff71 	bl	80066bc <HAL_UART_Transmit>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000188 	.word	0x20000188

080007e8 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4619      	mov	r1, r3
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f007 fa90 	bl	8007d20 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fd17 	bl	8000238 <strlen>
 800080a:	4603      	mov	r3, r0
 800080c:	b29a      	uxth	r2, r3
 800080e:	f107 010c 	add.w	r1, r7, #12
 8000812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000816:	4803      	ldr	r0, [pc, #12]	; (8000824 <uartTransmitNumber+0x3c>)
 8000818:	f005 ff50 	bl	80066bc <HAL_UART_Transmit>
}
 800081c:	bf00      	nop
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000188 	.word	0x20000188

08000828 <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 800082e:	2114      	movs	r1, #20
 8000830:	483d      	ldr	r0, [pc, #244]	; (8000928 <collectHardwareInfo+0x100>)
 8000832:	f7ff ffc5 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 8000836:	f002 fc2d 	bl	8003094 <HAL_GetDEVID>
 800083a:	4603      	mov	r3, r0
 800083c:	210a      	movs	r1, #10
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ffd2 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8000844:	2116      	movs	r1, #22
 8000846:	4839      	ldr	r0, [pc, #228]	; (800092c <collectHardwareInfo+0x104>)
 8000848:	f7ff ffba 	bl	80007c0 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 800084c:	f002 fc16 	bl	800307c <HAL_GetREVID>
 8000850:	4603      	mov	r3, r0
 8000852:	f242 0201 	movw	r2, #8193	; 0x2001
 8000856:	4293      	cmp	r3, r2
 8000858:	d016      	beq.n	8000888 <collectHardwareInfo+0x60>
 800085a:	f242 0201 	movw	r2, #8193	; 0x2001
 800085e:	4293      	cmp	r3, r2
 8000860:	d817      	bhi.n	8000892 <collectHardwareInfo+0x6a>
 8000862:	f241 0201 	movw	r2, #4097	; 0x1001
 8000866:	4293      	cmp	r3, r2
 8000868:	d004      	beq.n	8000874 <collectHardwareInfo+0x4c>
 800086a:	f241 0203 	movw	r2, #4099	; 0x1003
 800086e:	4293      	cmp	r3, r2
 8000870:	d005      	beq.n	800087e <collectHardwareInfo+0x56>
 8000872:	e00e      	b.n	8000892 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8000874:	2101      	movs	r1, #1
 8000876:	482e      	ldr	r0, [pc, #184]	; (8000930 <collectHardwareInfo+0x108>)
 8000878:	f7ff ffa2 	bl	80007c0 <uartTransmit>
			break;
 800087c:	e011      	b.n	80008a2 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 800087e:	2101      	movs	r1, #1
 8000880:	482c      	ldr	r0, [pc, #176]	; (8000934 <collectHardwareInfo+0x10c>)
 8000882:	f7ff ff9d 	bl	80007c0 <uartTransmit>
			break;
 8000886:	e00c      	b.n	80008a2 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000888:	2101      	movs	r1, #1
 800088a:	482b      	ldr	r0, [pc, #172]	; (8000938 <collectHardwareInfo+0x110>)
 800088c:	f7ff ff98 	bl	80007c0 <uartTransmit>
			break;
 8000890:	e007      	b.n	80008a2 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 8000892:	f002 fbf3 	bl	800307c <HAL_GetREVID>
 8000896:	4603      	mov	r3, r0
 8000898:	210a      	movs	r1, #10
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ffa4 	bl	80007e8 <uartTransmitNumber>
			break;
 80008a0:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 80008a2:	2114      	movs	r1, #20
 80008a4:	4825      	ldr	r0, [pc, #148]	; (800093c <collectHardwareInfo+0x114>)
 80008a6:	f7ff ff8b 	bl	80007c0 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 80008aa:	f004 fe33 	bl	8005514 <HAL_RCC_GetSysClockFreq>
 80008ae:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a23      	ldr	r2, [pc, #140]	; (8000940 <collectHardwareInfo+0x118>)
 80008b4:	fba2 2303 	umull	r2, r3, r2, r3
 80008b8:	0c9b      	lsrs	r3, r3, #18
 80008ba:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 80008bc:	210a      	movs	r1, #10
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ff92 	bl	80007e8 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80008c4:	2104      	movs	r1, #4
 80008c6:	481f      	ldr	r0, [pc, #124]	; (8000944 <collectHardwareInfo+0x11c>)
 80008c8:	f7ff ff7a 	bl	80007c0 <uartTransmit>


	uartTransmit("\n", 1);
 80008cc:	2101      	movs	r1, #1
 80008ce:	481e      	ldr	r0, [pc, #120]	; (8000948 <collectHardwareInfo+0x120>)
 80008d0:	f7ff ff76 	bl	80007c0 <uartTransmit>
	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80008d4:	2110      	movs	r1, #16
 80008d6:	481d      	ldr	r0, [pc, #116]	; (800094c <collectHardwareInfo+0x124>)
 80008d8:	f7ff ff72 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 80008dc:	f002 fbe8 	bl	80030b0 <HAL_GetUIDw0>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2110      	movs	r1, #16
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff7f 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80008ea:	2101      	movs	r1, #1
 80008ec:	4818      	ldr	r0, [pc, #96]	; (8000950 <collectHardwareInfo+0x128>)
 80008ee:	f7ff ff67 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 80008f2:	f002 fbe9 	bl	80030c8 <HAL_GetUIDw1>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2110      	movs	r1, #16
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ff74 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000900:	2101      	movs	r1, #1
 8000902:	4813      	ldr	r0, [pc, #76]	; (8000950 <collectHardwareInfo+0x128>)
 8000904:	f7ff ff5c 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000908:	f002 fbea 	bl	80030e0 <HAL_GetUIDw2>
 800090c:	4603      	mov	r3, r0
 800090e:	2110      	movs	r1, #16
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ff69 	bl	80007e8 <uartTransmitNumber>

	uartTransmit("\n", 1);
 8000916:	2101      	movs	r1, #1
 8000918:	480b      	ldr	r0, [pc, #44]	; (8000948 <collectHardwareInfo+0x120>)
 800091a:	f7ff ff51 	bl	80007c0 <uartTransmit>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	08007e1c 	.word	0x08007e1c
 800092c:	08007e30 	.word	0x08007e30
 8000930:	08007e48 	.word	0x08007e48
 8000934:	08007e4c 	.word	0x08007e4c
 8000938:	08007e50 	.word	0x08007e50
 800093c:	08007e54 	.word	0x08007e54
 8000940:	431bde83 	.word	0x431bde83
 8000944:	08007e68 	.word	0x08007e68
 8000948:	08007e70 	.word	0x08007e70
 800094c:	08007e74 	.word	0x08007e74
 8000950:	08007e84 	.word	0x08007e84

08000954 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 8000958:	2110      	movs	r1, #16
 800095a:	4826      	ldr	r0, [pc, #152]	; (80009f4 <collectSoftwareInfo+0xa0>)
 800095c:	f7ff ff30 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000960:	2108      	movs	r1, #8
 8000962:	4825      	ldr	r0, [pc, #148]	; (80009f8 <collectSoftwareInfo+0xa4>)
 8000964:	f7ff ff2c 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000968:	2110      	movs	r1, #16
 800096a:	4824      	ldr	r0, [pc, #144]	; (80009fc <collectSoftwareInfo+0xa8>)
 800096c:	f7ff ff28 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000970:	2108      	movs	r1, #8
 8000972:	4823      	ldr	r0, [pc, #140]	; (8000a00 <collectSoftwareInfo+0xac>)
 8000974:	f7ff ff24 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000978:	210e      	movs	r1, #14
 800097a:	4822      	ldr	r0, [pc, #136]	; (8000a04 <collectSoftwareInfo+0xb0>)
 800097c:	f7ff ff20 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 8000980:	2129      	movs	r1, #41	; 0x29
 8000982:	4821      	ldr	r0, [pc, #132]	; (8000a08 <collectSoftwareInfo+0xb4>)
 8000984:	f7ff ff1c 	bl	80007c0 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000988:	2101      	movs	r1, #1
 800098a:	4820      	ldr	r0, [pc, #128]	; (8000a0c <collectSoftwareInfo+0xb8>)
 800098c:	f7ff ff18 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000990:	2115      	movs	r1, #21
 8000992:	481f      	ldr	r0, [pc, #124]	; (8000a10 <collectSoftwareInfo+0xbc>)
 8000994:	f7ff ff14 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 8000998:	2105      	movs	r1, #5
 800099a:	481e      	ldr	r0, [pc, #120]	; (8000a14 <collectSoftwareInfo+0xc0>)
 800099c:	f7ff ff10 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 80009a0:	2114      	movs	r1, #20
 80009a2:	481d      	ldr	r0, [pc, #116]	; (8000a18 <collectSoftwareInfo+0xc4>)
 80009a4:	f7ff ff0c 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 80009a8:	2108      	movs	r1, #8
 80009aa:	481c      	ldr	r0, [pc, #112]	; (8000a1c <collectSoftwareInfo+0xc8>)
 80009ac:	f7ff ff08 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 80009b0:	2115      	movs	r1, #21
 80009b2:	481b      	ldr	r0, [pc, #108]	; (8000a20 <collectSoftwareInfo+0xcc>)
 80009b4:	f7ff ff04 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 80009b8:	2111      	movs	r1, #17
 80009ba:	481a      	ldr	r0, [pc, #104]	; (8000a24 <collectSoftwareInfo+0xd0>)
 80009bc:	f7ff ff00 	bl	80007c0 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80009c0:	2101      	movs	r1, #1
 80009c2:	4812      	ldr	r0, [pc, #72]	; (8000a0c <collectSoftwareInfo+0xb8>)
 80009c4:	f7ff fefc 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80009c8:	2110      	movs	r1, #16
 80009ca:	4817      	ldr	r0, [pc, #92]	; (8000a28 <collectSoftwareInfo+0xd4>)
 80009cc:	f7ff fef8 	bl	80007c0 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 80009d0:	210b      	movs	r1, #11
 80009d2:	4816      	ldr	r0, [pc, #88]	; (8000a2c <collectSoftwareInfo+0xd8>)
 80009d4:	f7ff fef4 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80009d8:	2110      	movs	r1, #16
 80009da:	4815      	ldr	r0, [pc, #84]	; (8000a30 <collectSoftwareInfo+0xdc>)
 80009dc:	f7ff fef0 	bl	80007c0 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 80009e0:	2109      	movs	r1, #9
 80009e2:	4814      	ldr	r0, [pc, #80]	; (8000a34 <collectSoftwareInfo+0xe0>)
 80009e4:	f7ff feec 	bl	80007c0 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80009e8:	2101      	movs	r1, #1
 80009ea:	4808      	ldr	r0, [pc, #32]	; (8000a0c <collectSoftwareInfo+0xb8>)
 80009ec:	f7ff fee8 	bl	80007c0 <uartTransmit>
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	08007e88 	.word	0x08007e88
 80009f8:	08007e98 	.word	0x08007e98
 80009fc:	08007ea0 	.word	0x08007ea0
 8000a00:	08007eb0 	.word	0x08007eb0
 8000a04:	08007eb8 	.word	0x08007eb8
 8000a08:	08007ec8 	.word	0x08007ec8
 8000a0c:	08007e70 	.word	0x08007e70
 8000a10:	08007ef4 	.word	0x08007ef4
 8000a14:	08007f0c 	.word	0x08007f0c
 8000a18:	08007f14 	.word	0x08007f14
 8000a1c:	08007f28 	.word	0x08007f28
 8000a20:	08007f30 	.word	0x08007f30
 8000a24:	08007f48 	.word	0x08007f48
 8000a28:	08007f5c 	.word	0x08007f5c
 8000a2c:	08007f6c 	.word	0x08007f6c
 8000a30:	08007f78 	.word	0x08007f78
 8000a34:	08007f88 	.word	0x08007f88

08000a38 <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8000a3c:	2113      	movs	r1, #19
 8000a3e:	4824      	ldr	r0, [pc, #144]	; (8000ad0 <collectMiddlewareInfo+0x98>)
 8000a40:	f7ff febe 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8000a44:	210a      	movs	r1, #10
 8000a46:	2005      	movs	r0, #5
 8000a48:	f7ff fece 	bl	80007e8 <uartTransmitNumber>
	uartTransmit(".", 1);
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	4821      	ldr	r0, [pc, #132]	; (8000ad4 <collectMiddlewareInfo+0x9c>)
 8000a50:	f7ff feb6 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8000a54:	210a      	movs	r1, #10
 8000a56:	2001      	movs	r0, #1
 8000a58:	f7ff fec6 	bl	80007e8 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8000a5c:	2111      	movs	r1, #17
 8000a5e:	481e      	ldr	r0, [pc, #120]	; (8000ad8 <collectMiddlewareInfo+0xa0>)
 8000a60:	f7ff feae 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8000a64:	f002 fb00 	bl	8003068 <HAL_GetHalVersion>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	0e1b      	lsrs	r3, r3, #24
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	210a      	movs	r1, #10
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff feb9 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000a76:	2101      	movs	r1, #1
 8000a78:	4816      	ldr	r0, [pc, #88]	; (8000ad4 <collectMiddlewareInfo+0x9c>)
 8000a7a:	f7ff fea1 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000a7e:	f002 faf3 	bl	8003068 <HAL_GetHalVersion>
 8000a82:	4603      	mov	r3, r0
 8000a84:	0c1b      	lsrs	r3, r3, #16
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	210a      	movs	r1, #10
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff feac 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000a90:	2101      	movs	r1, #1
 8000a92:	4810      	ldr	r0, [pc, #64]	; (8000ad4 <collectMiddlewareInfo+0x9c>)
 8000a94:	f7ff fe94 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000a98:	f002 fae6 	bl	8003068 <HAL_GetHalVersion>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	0a1b      	lsrs	r3, r3, #8
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	210a      	movs	r1, #10
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fe9f 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000aaa:	2101      	movs	r1, #1
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <collectMiddlewareInfo+0x9c>)
 8000aae:	f7ff fe87 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000ab2:	f002 fad9 	bl	8003068 <HAL_GetHalVersion>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	210a      	movs	r1, #10
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fe93 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <collectMiddlewareInfo+0xa4>)
 8000ac6:	f7ff fe7b 	bl	80007c0 <uartTransmit>
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	08007f94 	.word	0x08007f94
 8000ad4:	08007fa8 	.word	0x08007fa8
 8000ad8:	08007fac 	.word	0x08007fac
 8000adc:	08007e70 	.word	0x08007e70

08000ae0 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 8000ae4:	2114      	movs	r1, #20
 8000ae6:	4814      	ldr	r0, [pc, #80]	; (8000b38 <collectGitcounts+0x58>)
 8000ae8:	f7ff fe6a 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8000aec:	2103      	movs	r1, #3
 8000aee:	4813      	ldr	r0, [pc, #76]	; (8000b3c <collectGitcounts+0x5c>)
 8000af0:	f7ff fe66 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 8000af4:	2116      	movs	r1, #22
 8000af6:	4812      	ldr	r0, [pc, #72]	; (8000b40 <collectGitcounts+0x60>)
 8000af8:	f7ff fe62 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8000afc:	2103      	movs	r1, #3
 8000afe:	4811      	ldr	r0, [pc, #68]	; (8000b44 <collectGitcounts+0x64>)
 8000b00:	f7ff fe5e 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 8000b04:	211b      	movs	r1, #27
 8000b06:	4810      	ldr	r0, [pc, #64]	; (8000b48 <collectGitcounts+0x68>)
 8000b08:	f7ff fe5a 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8000b0c:	2103      	movs	r1, #3
 8000b0e:	480d      	ldr	r0, [pc, #52]	; (8000b44 <collectGitcounts+0x64>)
 8000b10:	f7ff fe56 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000b14:	2115      	movs	r1, #21
 8000b16:	480d      	ldr	r0, [pc, #52]	; (8000b4c <collectGitcounts+0x6c>)
 8000b18:	f7ff fe52 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	480c      	ldr	r0, [pc, #48]	; (8000b50 <collectGitcounts+0x70>)
 8000b20:	f7ff fe4e 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000b24:	2114      	movs	r1, #20
 8000b26:	480b      	ldr	r0, [pc, #44]	; (8000b54 <collectGitcounts+0x74>)
 8000b28:	f7ff fe4a 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	480a      	ldr	r0, [pc, #40]	; (8000b58 <collectGitcounts+0x78>)
 8000b30:	f7ff fe46 	bl	80007c0 <uartTransmit>
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	08007fc0 	.word	0x08007fc0
 8000b3c:	08007fd4 	.word	0x08007fd4
 8000b40:	08007fd8 	.word	0x08007fd8
 8000b44:	08007ff0 	.word	0x08007ff0
 8000b48:	08007ff4 	.word	0x08007ff4
 8000b4c:	08007ef4 	.word	0x08007ef4
 8000b50:	08008010 	.word	0x08008010
 8000b54:	08007f14 	.word	0x08007f14
 8000b58:	08008014 	.word	0x08008014

08000b5c <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000b60:	2111      	movs	r1, #17
 8000b62:	480e      	ldr	r0, [pc, #56]	; (8000b9c <collectSystemInfo+0x40>)
 8000b64:	f7ff fe2c 	bl	80007c0 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000b68:	f7ff fe5e 	bl	8000828 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000b6c:	2111      	movs	r1, #17
 8000b6e:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <collectSystemInfo+0x44>)
 8000b70:	f7ff fe26 	bl	80007c0 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8000b74:	f7ff feee 	bl	8000954 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000b78:	2113      	movs	r1, #19
 8000b7a:	480a      	ldr	r0, [pc, #40]	; (8000ba4 <collectSystemInfo+0x48>)
 8000b7c:	f7ff fe20 	bl	80007c0 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000b80:	f7ff ff5a 	bl	8000a38 <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8000b84:	2113      	movs	r1, #19
 8000b86:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <collectSystemInfo+0x4c>)
 8000b88:	f7ff fe1a 	bl	80007c0 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8000b8c:	f7ff ffa8 	bl	8000ae0 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 8000b90:	2103      	movs	r1, #3
 8000b92:	4806      	ldr	r0, [pc, #24]	; (8000bac <collectSystemInfo+0x50>)
 8000b94:	f7ff fe14 	bl	80007c0 <uartTransmit>
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	08008018 	.word	0x08008018
 8000ba0:	0800802c 	.word	0x0800802c
 8000ba4:	08008040 	.word	0x08008040
 8000ba8:	08008054 	.word	0x08008054
 8000bac:	08008068 	.word	0x08008068

08000bb0 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000bba:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <readResetSource+0xa0>)
 8000bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d002      	beq.n	8000bcc <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000bcc:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <readResetSource+0xa0>)
 8000bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d002      	beq.n	8000bde <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	3302      	adds	r3, #2
 8000bdc:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <readResetSource+0xa0>)
 8000be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	da02      	bge.n	8000bec <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	3304      	adds	r3, #4
 8000bea:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000bec:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <readResetSource+0xa0>)
 8000bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d002      	beq.n	8000bfe <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	3308      	adds	r3, #8
 8000bfc:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8000bfe:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <readResetSource+0xa0>)
 8000c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d002      	beq.n	8000c10 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	3310      	adds	r3, #16
 8000c0e:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <readResetSource+0xa0>)
 8000c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d002      	beq.n	8000c22 <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	3320      	adds	r3, #32
 8000c20:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <readResetSource+0xa0>)
 8000c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d002      	beq.n	8000c34 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	3340      	adds	r3, #64	; 0x40
 8000c32:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <readResetSource+0xa0>)
 8000c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c38:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <readResetSource+0xa0>)
 8000c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c3e:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8000c40:	79fb      	ldrb	r3, [r7, #7]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800

08000c54 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8000c5e:	2106      	movs	r1, #6
 8000c60:	482a      	ldr	r0, [pc, #168]	; (8000d0c <printResetSource+0xb8>)
 8000c62:	f7ff fdad 	bl	80007c0 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d104      	bne.n	8000c76 <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8000c6c:	210f      	movs	r1, #15
 8000c6e:	4828      	ldr	r0, [pc, #160]	; (8000d10 <printResetSource+0xbc>)
 8000c70:	f7ff fda6 	bl	80007c0 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8000c74:	e046      	b.n	8000d04 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d003      	beq.n	8000c88 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000c80:	2118      	movs	r1, #24
 8000c82:	4824      	ldr	r0, [pc, #144]	; (8000d14 <printResetSource+0xc0>)
 8000c84:	f7ff fd9c 	bl	80007c0 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000c92:	2116      	movs	r1, #22
 8000c94:	4820      	ldr	r0, [pc, #128]	; (8000d18 <printResetSource+0xc4>)
 8000c96:	f7ff fd93 	bl	80007c0 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d003      	beq.n	8000cac <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8000ca4:	210a      	movs	r1, #10
 8000ca6:	481d      	ldr	r0, [pc, #116]	; (8000d1c <printResetSource+0xc8>)
 8000ca8:	f7ff fd8a 	bl	80007c0 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 0308 	and.w	r3, r3, #8
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8000cb6:	2110      	movs	r1, #16
 8000cb8:	4819      	ldr	r0, [pc, #100]	; (8000d20 <printResetSource+0xcc>)
 8000cba:	f7ff fd81 	bl	80007c0 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	f003 0310 	and.w	r3, r3, #16
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d003      	beq.n	8000cd0 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000cc8:	210f      	movs	r1, #15
 8000cca:	4816      	ldr	r0, [pc, #88]	; (8000d24 <printResetSource+0xd0>)
 8000ccc:	f7ff fd78 	bl	80007c0 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	f003 0320 	and.w	r3, r3, #32
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d003      	beq.n	8000ce2 <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000cda:	210f      	movs	r1, #15
 8000cdc:	4812      	ldr	r0, [pc, #72]	; (8000d28 <printResetSource+0xd4>)
 8000cde:	f7ff fd6f 	bl	80007c0 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d003      	beq.n	8000cf4 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000cec:	210a      	movs	r1, #10
 8000cee:	480f      	ldr	r0, [pc, #60]	; (8000d2c <printResetSource+0xd8>)
 8000cf0:	f7ff fd66 	bl	80007c0 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	da03      	bge.n	8000d04 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000cfc:	2105      	movs	r1, #5
 8000cfe:	480c      	ldr	r0, [pc, #48]	; (8000d30 <printResetSource+0xdc>)
 8000d00:	f7ff fd5e 	bl	80007c0 <uartTransmit>
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	0800806c 	.word	0x0800806c
 8000d10:	08008074 	.word	0x08008074
 8000d14:	08008084 	.word	0x08008084
 8000d18:	080080a0 	.word	0x080080a0
 8000d1c:	080080b8 	.word	0x080080b8
 8000d20:	080080c4 	.word	0x080080c4
 8000d24:	080080d8 	.word	0x080080d8
 8000d28:	080080e8 	.word	0x080080e8
 8000d2c:	080080f8 	.word	0x080080f8
 8000d30:	08008104 	.word	0x08008104

08000d34 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d40:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d013      	beq.n	8000d74 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d50:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d54:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d00b      	beq.n	8000d74 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d5c:	e000      	b.n	8000d60 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d5e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d0f9      	beq.n	8000d5e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d6a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d74:	687b      	ldr	r3, [r7, #4]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <ADC_Gaspedal>:
//----------------------------------------------------------------------

// Gaspedal einlesen
//----------------------------------------------------------------------
uint16_t ADC_Gaspedal(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC von Gaspedal einlesen\n");
 8000d8a:	4820      	ldr	r0, [pc, #128]	; (8000e0c <ADC_Gaspedal+0x88>)
 8000d8c:	f000 fafe 	bl	800138c <ITM_SendString>
#endif

	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_6;
 8000da0:	2306      	movs	r3, #6
 8000da2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000da4:	2301      	movs	r3, #1
 8000da6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000da8:	2301      	movs	r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	4619      	mov	r1, r3
 8000db0:	4817      	ldr	r0, [pc, #92]	; (8000e10 <ADC_Gaspedal+0x8c>)
 8000db2:	f002 fb7f 	bl	80034b4 <HAL_ADC_ConfigChannel>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <ADC_Gaspedal+0x3c>
	{
		Error_Handler();
 8000dbc:	f001 ff08 	bl	8002bd0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);
 8000dc0:	4813      	ldr	r0, [pc, #76]	; (8000e10 <ADC_Gaspedal+0x8c>)
 8000dc2:	f002 f9dd 	bl	8003180 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000dc6:	2164      	movs	r1, #100	; 0x64
 8000dc8:	4811      	ldr	r0, [pc, #68]	; (8000e10 <ADC_Gaspedal+0x8c>)
 8000dca:	f002 fadb 	bl	8003384 <HAL_ADC_PollForConversion>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d105      	bne.n	8000de0 <ADC_Gaspedal+0x5c>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000dd4:	480e      	ldr	r0, [pc, #56]	; (8000e10 <ADC_Gaspedal+0x8c>)
 8000dd6:	f002 fb60 	bl	800349a <HAL_ADC_GetValue>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	82fb      	strh	r3, [r7, #22]
 8000dde:	e002      	b.n	8000de6 <ADC_Gaspedal+0x62>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000de0:	2004      	movs	r0, #4
 8000de2:	f000 fa31 	bl	8001248 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000de6:	480a      	ldr	r0, [pc, #40]	; (8000e10 <ADC_Gaspedal+0x8c>)
 8000de8:	f002 fa98 	bl	800331c <HAL_ADC_Stop>

#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC-Wert Gaspedal:\t");
 8000dec:	4809      	ldr	r0, [pc, #36]	; (8000e14 <ADC_Gaspedal+0x90>)
 8000dee:	f000 facd 	bl	800138c <ITM_SendString>
	ITM_SendNumber(ADC_Data);
 8000df2:	8afb      	ldrh	r3, [r7, #22]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 fad3 	bl	80013a0 <ITM_SendNumber>
	ITM_SendChar('\n');
 8000dfa:	200a      	movs	r0, #10
 8000dfc:	f7ff ff9a 	bl	8000d34 <ITM_SendChar>
#endif

	//ADC Wert zurueck geben
	return ADC_Data;
 8000e00:	8afb      	ldrh	r3, [r7, #22]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	0800810c 	.word	0x0800810c
 8000e10:	20000058 	.word	0x20000058
 8000e14:	08008128 	.word	0x08008128

08000e18 <ADC_Bremsdruck>:
//----------------------------------------------------------------------

// Bremsdruck einlesen
//----------------------------------------------------------------------
uint16_t ADC_Bremsdruck(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC von Bremsdruck einlesen\n");
 8000e1e:	4820      	ldr	r0, [pc, #128]	; (8000ea0 <ADC_Bremsdruck+0x88>)
 8000e20:	f000 fab4 	bl	800138c <ITM_SendString>
#endif

	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_14;
 8000e34:	230e      	movs	r3, #14
 8000e36:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	4619      	mov	r1, r3
 8000e44:	4817      	ldr	r0, [pc, #92]	; (8000ea4 <ADC_Bremsdruck+0x8c>)
 8000e46:	f002 fb35 	bl	80034b4 <HAL_ADC_ConfigChannel>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <ADC_Bremsdruck+0x3c>
	{
		Error_Handler();
 8000e50:	f001 febe 	bl	8002bd0 <Error_Handler>
	}
	
	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000e54:	4813      	ldr	r0, [pc, #76]	; (8000ea4 <ADC_Bremsdruck+0x8c>)
 8000e56:	f002 f993 	bl	8003180 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000e5a:	2164      	movs	r1, #100	; 0x64
 8000e5c:	4811      	ldr	r0, [pc, #68]	; (8000ea4 <ADC_Bremsdruck+0x8c>)
 8000e5e:	f002 fa91 	bl	8003384 <HAL_ADC_PollForConversion>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d105      	bne.n	8000e74 <ADC_Bremsdruck+0x5c>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000e68:	480e      	ldr	r0, [pc, #56]	; (8000ea4 <ADC_Bremsdruck+0x8c>)
 8000e6a:	f002 fb16 	bl	800349a <HAL_ADC_GetValue>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	82fb      	strh	r3, [r7, #22]
 8000e72:	e002      	b.n	8000e7a <ADC_Bremsdruck+0x62>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000e74:	2004      	movs	r0, #4
 8000e76:	f000 f9e7 	bl	8001248 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000e7a:	480a      	ldr	r0, [pc, #40]	; (8000ea4 <ADC_Bremsdruck+0x8c>)
 8000e7c:	f002 fa4e 	bl	800331c <HAL_ADC_Stop>

#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC-Wert Bremsdruck:\t");
 8000e80:	4809      	ldr	r0, [pc, #36]	; (8000ea8 <ADC_Bremsdruck+0x90>)
 8000e82:	f000 fa83 	bl	800138c <ITM_SendString>
	ITM_SendNumber(ADC_Data);
 8000e86:	8afb      	ldrh	r3, [r7, #22]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 fa89 	bl	80013a0 <ITM_SendNumber>
	ITM_SendChar('\n');
 8000e8e:	200a      	movs	r0, #10
 8000e90:	f7ff ff50 	bl	8000d34 <ITM_SendChar>
#endif

	//ADC Wert zurueck geben
	return ADC_Data;
 8000e94:	8afb      	ldrh	r3, [r7, #22]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	0800813c 	.word	0x0800813c
 8000ea4:	20000058 	.word	0x20000058
 8000ea8:	0800815c 	.word	0x0800815c

08000eac <ADC_KL15>:
//----------------------------------------------------------------------

// Spannung KL15 einlesen
//----------------------------------------------------------------------
uint16_t ADC_KL15 (void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_3;										// ADC Kanal einstellen
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8000eca:	2301      	movs	r3, #1
 8000ecc:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4811      	ldr	r0, [pc, #68]	; (8000f18 <ADC_KL15+0x6c>)
 8000ed4:	f002 faee 	bl	80034b4 <HAL_ADC_ConfigChannel>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <ADC_KL15+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000ede:	f001 fe77 	bl	8002bd0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000ee2:	480d      	ldr	r0, [pc, #52]	; (8000f18 <ADC_KL15+0x6c>)
 8000ee4:	f002 f94c 	bl	8003180 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000ee8:	2164      	movs	r1, #100	; 0x64
 8000eea:	480b      	ldr	r0, [pc, #44]	; (8000f18 <ADC_KL15+0x6c>)
 8000eec:	f002 fa4a 	bl	8003384 <HAL_ADC_PollForConversion>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d105      	bne.n	8000f02 <ADC_KL15+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000ef6:	4808      	ldr	r0, [pc, #32]	; (8000f18 <ADC_KL15+0x6c>)
 8000ef8:	f002 facf 	bl	800349a <HAL_ADC_GetValue>
 8000efc:	4603      	mov	r3, r0
 8000efe:	82fb      	strh	r3, [r7, #22]
 8000f00:	e002      	b.n	8000f08 <ADC_KL15+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000f02:	2004      	movs	r0, #4
 8000f04:	f000 f9a0 	bl	8001248 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000f08:	4803      	ldr	r0, [pc, #12]	; (8000f18 <ADC_KL15+0x6c>)
 8000f0a:	f002 fa07 	bl	800331c <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000f0e:	8afb      	ldrh	r3, [r7, #22]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000058 	.word	0x20000058

08000f1c <ADC_Kuhlwassertemperatur>:
//----------------------------------------------------------------------

// Kuehlwassertemperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_Kuhlwassertemperatur (void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_4;										// ADC Kanal einstellen
 8000f32:	2304      	movs	r3, #4
 8000f34:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000f36:	2301      	movs	r3, #1
 8000f38:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	4619      	mov	r1, r3
 8000f42:	4811      	ldr	r0, [pc, #68]	; (8000f88 <ADC_Kuhlwassertemperatur+0x6c>)
 8000f44:	f002 fab6 	bl	80034b4 <HAL_ADC_ConfigChannel>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <ADC_Kuhlwassertemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000f4e:	f001 fe3f 	bl	8002bd0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000f52:	480d      	ldr	r0, [pc, #52]	; (8000f88 <ADC_Kuhlwassertemperatur+0x6c>)
 8000f54:	f002 f914 	bl	8003180 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000f58:	2164      	movs	r1, #100	; 0x64
 8000f5a:	480b      	ldr	r0, [pc, #44]	; (8000f88 <ADC_Kuhlwassertemperatur+0x6c>)
 8000f5c:	f002 fa12 	bl	8003384 <HAL_ADC_PollForConversion>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d105      	bne.n	8000f72 <ADC_Kuhlwassertemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000f66:	4808      	ldr	r0, [pc, #32]	; (8000f88 <ADC_Kuhlwassertemperatur+0x6c>)
 8000f68:	f002 fa97 	bl	800349a <HAL_ADC_GetValue>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	82fb      	strh	r3, [r7, #22]
 8000f70:	e002      	b.n	8000f78 <ADC_Kuhlwassertemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000f72:	2004      	movs	r0, #4
 8000f74:	f000 f968 	bl	8001248 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <ADC_Kuhlwassertemperatur+0x6c>)
 8000f7a:	f002 f9cf 	bl	800331c <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000f7e:	8afb      	ldrh	r3, [r7, #22]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000058 	.word	0x20000058

08000f8c <ADC_Klimaflap>:
//----------------------------------------------------------------------

// Klimaflapstellung einlesen (Position ueber Poti)
//----------------------------------------------------------------------
uint16_t ADC_Klimaflap (void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_5;										// ADC Kanal einstellen
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8000faa:	2301      	movs	r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4811      	ldr	r0, [pc, #68]	; (8000ff8 <ADC_Klimaflap+0x6c>)
 8000fb4:	f002 fa7e 	bl	80034b4 <HAL_ADC_ConfigChannel>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <ADC_Klimaflap+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000fbe:	f001 fe07 	bl	8002bd0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000fc2:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <ADC_Klimaflap+0x6c>)
 8000fc4:	f002 f8dc 	bl	8003180 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000fc8:	2164      	movs	r1, #100	; 0x64
 8000fca:	480b      	ldr	r0, [pc, #44]	; (8000ff8 <ADC_Klimaflap+0x6c>)
 8000fcc:	f002 f9da 	bl	8003384 <HAL_ADC_PollForConversion>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d105      	bne.n	8000fe2 <ADC_Klimaflap+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000fd6:	4808      	ldr	r0, [pc, #32]	; (8000ff8 <ADC_Klimaflap+0x6c>)
 8000fd8:	f002 fa5f 	bl	800349a <HAL_ADC_GetValue>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	82fb      	strh	r3, [r7, #22]
 8000fe0:	e002      	b.n	8000fe8 <ADC_Klimaflap+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000fe2:	2004      	movs	r0, #4
 8000fe4:	f000 f930 	bl	8001248 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000fe8:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <ADC_Klimaflap+0x6c>)
 8000fea:	f002 f997 	bl	800331c <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000fee:	8afb      	ldrh	r3, [r7, #22]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000058 	.word	0x20000058

08000ffc <ADC_PCBTemperatur>:
//----------------------------------------------------------------------

// PCB Temperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_PCBTemperatur (void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_7;										// ADC Kanal einstellen
 8001012:	2307      	movs	r3, #7
 8001014:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8001016:	2301      	movs	r3, #1
 8001018:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 800101a:	2301      	movs	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	4619      	mov	r1, r3
 8001022:	4811      	ldr	r0, [pc, #68]	; (8001068 <ADC_PCBTemperatur+0x6c>)
 8001024:	f002 fa46 	bl	80034b4 <HAL_ADC_ConfigChannel>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <ADC_PCBTemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 800102e:	f001 fdcf 	bl	8002bd0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8001032:	480d      	ldr	r0, [pc, #52]	; (8001068 <ADC_PCBTemperatur+0x6c>)
 8001034:	f002 f8a4 	bl	8003180 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8001038:	2164      	movs	r1, #100	; 0x64
 800103a:	480b      	ldr	r0, [pc, #44]	; (8001068 <ADC_PCBTemperatur+0x6c>)
 800103c:	f002 f9a2 	bl	8003384 <HAL_ADC_PollForConversion>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d105      	bne.n	8001052 <ADC_PCBTemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8001046:	4808      	ldr	r0, [pc, #32]	; (8001068 <ADC_PCBTemperatur+0x6c>)
 8001048:	f002 fa27 	bl	800349a <HAL_ADC_GetValue>
 800104c:	4603      	mov	r3, r0
 800104e:	82fb      	strh	r3, [r7, #22]
 8001050:	e002      	b.n	8001058 <ADC_PCBTemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8001052:	2004      	movs	r0, #4
 8001054:	f000 f8f8 	bl	8001248 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8001058:	4803      	ldr	r0, [pc, #12]	; (8001068 <ADC_PCBTemperatur+0x6c>)
 800105a:	f002 f95f 	bl	800331c <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 800105e:	8afb      	ldrh	r3, [r7, #22]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000058 	.word	0x20000058

0800106c <ADC_Return>:
//----------------------------------------------------------------------

// Navibedienelement Return einlesen (2 Schalter mit unterschiedlichen Widerstaenden)
//----------------------------------------------------------------------
uint16_t ADC_Return (void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_8;										// ADC Kanal einstellen
 8001082:	2308      	movs	r3, #8
 8001084:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8001086:	2301      	movs	r3, #1
 8001088:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 800108a:	2301      	movs	r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	4619      	mov	r1, r3
 8001092:	4811      	ldr	r0, [pc, #68]	; (80010d8 <ADC_Return+0x6c>)
 8001094:	f002 fa0e 	bl	80034b4 <HAL_ADC_ConfigChannel>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <ADC_Return+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 800109e:	f001 fd97 	bl	8002bd0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 80010a2:	480d      	ldr	r0, [pc, #52]	; (80010d8 <ADC_Return+0x6c>)
 80010a4:	f002 f86c 	bl	8003180 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 80010a8:	2164      	movs	r1, #100	; 0x64
 80010aa:	480b      	ldr	r0, [pc, #44]	; (80010d8 <ADC_Return+0x6c>)
 80010ac:	f002 f96a 	bl	8003384 <HAL_ADC_PollForConversion>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d105      	bne.n	80010c2 <ADC_Return+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 80010b6:	4808      	ldr	r0, [pc, #32]	; (80010d8 <ADC_Return+0x6c>)
 80010b8:	f002 f9ef 	bl	800349a <HAL_ADC_GetValue>
 80010bc:	4603      	mov	r3, r0
 80010be:	82fb      	strh	r3, [r7, #22]
 80010c0:	e002      	b.n	80010c8 <ADC_Return+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 80010c2:	2004      	movs	r0, #4
 80010c4:	f000 f8c0 	bl	8001248 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 80010c8:	4803      	ldr	r0, [pc, #12]	; (80010d8 <ADC_Return+0x6c>)
 80010ca:	f002 f927 	bl	800331c <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 80010ce:	8afb      	ldrh	r3, [r7, #22]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000058 	.word	0x20000058

080010dc <ADC_Info>:
//----------------------------------------------------------------------

// Navibedienelement Info einlesen (2 Schalter mit unterschiedlichen Widerstaenden)
//----------------------------------------------------------------------
uint16_t ADC_Info (void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_9;										// ADC Kanal einstellen
 80010f2:	2309      	movs	r3, #9
 80010f4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 80010f6:	2301      	movs	r3, #1
 80010f8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 80010fa:	2301      	movs	r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4811      	ldr	r0, [pc, #68]	; (8001148 <ADC_Info+0x6c>)
 8001104:	f002 f9d6 	bl	80034b4 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <ADC_Info+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 800110e:	f001 fd5f 	bl	8002bd0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8001112:	480d      	ldr	r0, [pc, #52]	; (8001148 <ADC_Info+0x6c>)
 8001114:	f002 f834 	bl	8003180 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8001118:	2164      	movs	r1, #100	; 0x64
 800111a:	480b      	ldr	r0, [pc, #44]	; (8001148 <ADC_Info+0x6c>)
 800111c:	f002 f932 	bl	8003384 <HAL_ADC_PollForConversion>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d105      	bne.n	8001132 <ADC_Info+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8001126:	4808      	ldr	r0, [pc, #32]	; (8001148 <ADC_Info+0x6c>)
 8001128:	f002 f9b7 	bl	800349a <HAL_ADC_GetValue>
 800112c:	4603      	mov	r3, r0
 800112e:	82fb      	strh	r3, [r7, #22]
 8001130:	e002      	b.n	8001138 <ADC_Info+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8001132:	2004      	movs	r0, #4
 8001134:	f000 f888 	bl	8001248 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8001138:	4803      	ldr	r0, [pc, #12]	; (8001148 <ADC_Info+0x6c>)
 800113a:	f002 f8ef 	bl	800331c <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 800113e:	8afb      	ldrh	r3, [r7, #22]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000058 	.word	0x20000058

0800114c <ADC_Bremsdrucktemperatur>:
//----------------------------------------------------------------------

// Bremsdrucktemperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_Bremsdrucktemperatur (void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_15;										// ADC Kanal einstellen
 8001162:	230f      	movs	r3, #15
 8001164:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8001166:	2301      	movs	r3, #1
 8001168:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 800116a:	2301      	movs	r3, #1
 800116c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	4619      	mov	r1, r3
 8001172:	4811      	ldr	r0, [pc, #68]	; (80011b8 <ADC_Bremsdrucktemperatur+0x6c>)
 8001174:	f002 f99e 	bl	80034b4 <HAL_ADC_ConfigChannel>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <ADC_Bremsdrucktemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 800117e:	f001 fd27 	bl	8002bd0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8001182:	480d      	ldr	r0, [pc, #52]	; (80011b8 <ADC_Bremsdrucktemperatur+0x6c>)
 8001184:	f001 fffc 	bl	8003180 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8001188:	2164      	movs	r1, #100	; 0x64
 800118a:	480b      	ldr	r0, [pc, #44]	; (80011b8 <ADC_Bremsdrucktemperatur+0x6c>)
 800118c:	f002 f8fa 	bl	8003384 <HAL_ADC_PollForConversion>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d105      	bne.n	80011a2 <ADC_Bremsdrucktemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8001196:	4808      	ldr	r0, [pc, #32]	; (80011b8 <ADC_Bremsdrucktemperatur+0x6c>)
 8001198:	f002 f97f 	bl	800349a <HAL_ADC_GetValue>
 800119c:	4603      	mov	r3, r0
 800119e:	82fb      	strh	r3, [r7, #22]
 80011a0:	e002      	b.n	80011a8 <ADC_Bremsdrucktemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 80011a2:	2004      	movs	r0, #4
 80011a4:	f000 f850 	bl	8001248 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 80011a8:	4803      	ldr	r0, [pc, #12]	; (80011b8 <ADC_Bremsdrucktemperatur+0x6c>)
 80011aa:	f002 f8b7 	bl	800331c <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 80011ae:	8afb      	ldrh	r3, [r7, #22]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000058 	.word	0x20000058

080011bc <ADC_STMTemperatur>:
//----------------------------------------------------------------------

// STM32 Temperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_STMTemperatur (void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;								// ADC Kanal einstellen
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <ADC_STMTemperatur+0x6c>)
 80011d4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 80011d6:	2301      	movs	r3, #1
 80011d8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 80011da:	2301      	movs	r3, #1
 80011dc:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	4619      	mov	r1, r3
 80011e2:	4812      	ldr	r0, [pc, #72]	; (800122c <ADC_STMTemperatur+0x70>)
 80011e4:	f002 f966 	bl	80034b4 <HAL_ADC_ConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <ADC_STMTemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 80011ee:	f001 fcef 	bl	8002bd0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 80011f2:	480e      	ldr	r0, [pc, #56]	; (800122c <ADC_STMTemperatur+0x70>)
 80011f4:	f001 ffc4 	bl	8003180 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 80011f8:	2164      	movs	r1, #100	; 0x64
 80011fa:	480c      	ldr	r0, [pc, #48]	; (800122c <ADC_STMTemperatur+0x70>)
 80011fc:	f002 f8c2 	bl	8003384 <HAL_ADC_PollForConversion>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d105      	bne.n	8001212 <ADC_STMTemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8001206:	4809      	ldr	r0, [pc, #36]	; (800122c <ADC_STMTemperatur+0x70>)
 8001208:	f002 f947 	bl	800349a <HAL_ADC_GetValue>
 800120c:	4603      	mov	r3, r0
 800120e:	82fb      	strh	r3, [r7, #22]
 8001210:	e002      	b.n	8001218 <ADC_STMTemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8001212:	2004      	movs	r0, #4
 8001214:	f000 f818 	bl	8001248 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <ADC_STMTemperatur+0x70>)
 800121a:	f002 f87f 	bl	800331c <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 800121e:	8afb      	ldrh	r3, [r7, #22]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	10000012 	.word	0x10000012
 800122c:	20000058 	.word	0x20000058

08001230 <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <software_error>:
//----------------------------------------------------------------------

// Diagnose Funktion falls ein Fehler auftritt
//----------------------------------------------------------------------
void software_error(uint8_t errorcode)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001252:	b672      	cpsid	i
}
 8001254:	bf00      	nop
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8001256:	4a1e      	ldr	r2, [pc, #120]	; (80012d0 <software_error+0x88>)
 8001258:	7853      	ldrb	r3, [r2, #1]
 800125a:	f043 0308 	orr.w	r3, r3, #8
 800125e:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <software_error+0x88>)
 8001262:	785b      	ldrb	r3, [r3, #1]
 8001264:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001268:	b2db      	uxtb	r3, r3
 800126a:	461a      	mov	r2, r3
 800126c:	2104      	movs	r1, #4
 800126e:	4819      	ldr	r0, [pc, #100]	; (80012d4 <software_error+0x8c>)
 8001270:	f003 fd32 	bl	8004cd8 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8001274:	4a16      	ldr	r2, [pc, #88]	; (80012d0 <software_error+0x88>)
 8001276:	7853      	ldrb	r3, [r2, #1]
 8001278:	f36f 1304 	bfc	r3, #4, #1
 800127c:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// OK LED ausschalten
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <software_error+0x88>)
 8001280:	785b      	ldrb	r3, [r3, #1]
 8001282:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001286:	b2db      	uxtb	r3, r3
 8001288:	461a      	mov	r2, r3
 800128a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800128e:	4811      	ldr	r0, [pc, #68]	; (80012d4 <software_error+0x8c>)
 8001290:	f003 fd22 	bl	8004cd8 <HAL_GPIO_WritePin>

	// Schalte SDC_Motor aus
	system_out.MotorSDC = 0;												// Zuruecksetzen Variable
 8001294:	4a10      	ldr	r2, [pc, #64]	; (80012d8 <software_error+0x90>)
 8001296:	7813      	ldrb	r3, [r2, #0]
 8001298:	f36f 1345 	bfc	r3, #5, #1
 800129c:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, system_out.MotorSDC);// SDC oeffnen
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <software_error+0x90>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	461a      	mov	r2, r3
 80012aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ae:	480b      	ldr	r0, [pc, #44]	; (80012dc <software_error+0x94>)
 80012b0:	f003 fd12 	bl	8004cd8 <HAL_GPIO_WritePin>
#ifdef DEBUG																// Serielle Kommunukation nur waehrend Debugging
#define SOFTERRORMESSAGE			"\nSoftware Error Handler ausgeloest\n"	// Ausgabe das Fehler aufgetreten ist
	uartTransmit(SOFTERRORMESSAGE,sizeof(SOFTERRORMESSAGE));
 80012b4:	2124      	movs	r1, #36	; 0x24
 80012b6:	480a      	ldr	r0, [pc, #40]	; (80012e0 <software_error+0x98>)
 80012b8:	f7ff fa82 	bl	80007c0 <uartTransmit>

#define ERRORCODE					"Error Code:\t"							// Ausgabe des Fehlers anhand von Fehlercode
	uartTransmit(ERRORCODE,sizeof(ERRORCODE));
 80012bc:	210d      	movs	r1, #13
 80012be:	4809      	ldr	r0, [pc, #36]	; (80012e4 <software_error+0x9c>)
 80012c0:	f7ff fa7e 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(errorcode, 10);										// Fehlercode ausgeben
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	210a      	movs	r1, #10
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fa8d 	bl	80007e8 <uartTransmitNumber>
#endif
	while (1);																// Endlosschleife
 80012ce:	e7fe      	b.n	80012ce <software_error+0x86>
 80012d0:	20000050 	.word	0x20000050
 80012d4:	40020400 	.word	0x40020400
 80012d8:	20000048 	.word	0x20000048
 80012dc:	40021000 	.word	0x40021000
 80012e0:	08008174 	.word	0x08008174
 80012e4:	08008198 	.word	0x08008198

080012e8 <software_error_debug>:
//----------------------------------------------------------------------

// Diagnose Funktion falls ein Fehler auftritt (Nur Debugzwecke)
//----------------------------------------------------------------------
void software_error_debug(uint8_t errorcode)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 80012f2:	4a20      	ldr	r2, [pc, #128]	; (8001374 <software_error_debug+0x8c>)
 80012f4:	7853      	ldrb	r3, [r2, #1]
 80012f6:	f043 0308 	orr.w	r3, r3, #8
 80012fa:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <software_error_debug+0x8c>)
 80012fe:	785b      	ldrb	r3, [r3, #1]
 8001300:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001304:	b2db      	uxtb	r3, r3
 8001306:	461a      	mov	r2, r3
 8001308:	2104      	movs	r1, #4
 800130a:	481b      	ldr	r0, [pc, #108]	; (8001378 <software_error_debug+0x90>)
 800130c:	f003 fce4 	bl	8004cd8 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8001310:	4a18      	ldr	r2, [pc, #96]	; (8001374 <software_error_debug+0x8c>)
 8001312:	7853      	ldrb	r3, [r2, #1]
 8001314:	f36f 1304 	bfc	r3, #4, #1
 8001318:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// OK LED ausschalten
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <software_error_debug+0x8c>)
 800131c:	785b      	ldrb	r3, [r3, #1]
 800131e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001322:	b2db      	uxtb	r3, r3
 8001324:	461a      	mov	r2, r3
 8001326:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800132a:	4813      	ldr	r0, [pc, #76]	; (8001378 <software_error_debug+0x90>)
 800132c:	f003 fcd4 	bl	8004cd8 <HAL_GPIO_WritePin>

	// Schalte SDC_Motor aus
	system_out.MotorSDC = 0;												// Zuruecksetzen Variable
 8001330:	4a12      	ldr	r2, [pc, #72]	; (800137c <software_error_debug+0x94>)
 8001332:	7813      	ldrb	r3, [r2, #0]
 8001334:	f36f 1345 	bfc	r3, #5, #1
 8001338:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, system_out.MotorSDC);// SDC oeffnen
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <software_error_debug+0x94>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001342:	b2db      	uxtb	r3, r3
 8001344:	461a      	mov	r2, r3
 8001346:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800134a:	480d      	ldr	r0, [pc, #52]	; (8001380 <software_error_debug+0x98>)
 800134c:	f003 fcc4 	bl	8004cd8 <HAL_GPIO_WritePin>
#ifdef DEBUG																// Serielle Kommunukation nur waehrend Debugging
#define SOFTERRORMESSAGE			"\nSoftware Error Handler ausgeloest\n"	// Ausgabe das Fehler aufgetreten ist
	uartTransmit(SOFTERRORMESSAGE,sizeof(SOFTERRORMESSAGE));
 8001350:	2124      	movs	r1, #36	; 0x24
 8001352:	480c      	ldr	r0, [pc, #48]	; (8001384 <software_error_debug+0x9c>)
 8001354:	f7ff fa34 	bl	80007c0 <uartTransmit>

#define ERRORCODE					"Error Code:\t"							// Ausgabe des Fehlers anhand von Fehlercode
	uartTransmit(ERRORCODE,sizeof(ERRORCODE));
 8001358:	210d      	movs	r1, #13
 800135a:	480b      	ldr	r0, [pc, #44]	; (8001388 <software_error_debug+0xa0>)
 800135c:	f7ff fa30 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(errorcode, 10);										// Fehlercode ausgeben
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	210a      	movs	r1, #10
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fa3f 	bl	80007e8 <uartTransmitNumber>
#endif
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000050 	.word	0x20000050
 8001378:	40020400 	.word	0x40020400
 800137c:	20000048 	.word	0x20000048
 8001380:	40021000 	.word	0x40021000
 8001384:	08008174 	.word	0x08008174
 8001388:	08008198 	.word	0x08008198

0800138c <ITM_SendString>:
// Nachricht SWO ITM Data Console
// Core Clock := Maximalfrequenz ; HCLK fuer Serial Wire Viewer
// Im String #GRN# oder #RED# oder #ORG# erscheint die Nachricht in einer Farbe
//----------------------------------------------------------------------
void ITM_SendString(char *text)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	{
		ITM_SendChar(*text);												// Sende ITM Zeichen
		text++;																// Pointer hochzaehlen
	}
#endif
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <ITM_SendNumber>:
//----------------------------------------------------------------------

// Debug Nummer ueber SWO senden
//----------------------------------------------------------------------
void ITM_SendNumber(long number)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	for(; i > 0; i--)
	{
		ITM_SendChar('0' + buf[i-1]);
	}
#endif
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <ITM_SendChar>:
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d013      	beq.n	80013f4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80013cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80013d4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d00b      	beq.n	80013f4 <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 80013dc:	e000      	b.n	80013e0 <ITM_SendChar+0x2c>
      __NOP();
 80013de:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80013e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f9      	beq.n	80013de <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80013ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	701a      	strb	r2, [r3, #0]
  return (ch);
 80013f4:	687b      	ldr	r3, [r7, #4]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <readall_inputs>:
//----------------------------------------------------------------------

// Alle Eingaenge einlesen und speichern
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
#ifdef DEBUG_INPUT
	ITM_SendString("Lese Inputs ein\n");
 8001408:	48cf      	ldr	r0, [pc, #828]	; (8001748 <readall_inputs+0x344>)
 800140a:	f7ff ffbf 	bl	800138c <ITM_SendString>
#endif

	// Systemeingaenge einlesen
	system_in.Kickdown = HAL_GPIO_ReadPin(KICKDOWN_GPIO_Port, KICKDOWN_Pin);					// Eingang Gaspedal getreten
 800140e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001412:	48ce      	ldr	r0, [pc, #824]	; (800174c <readall_inputs+0x348>)
 8001414:	f003 fc48 	bl	8004ca8 <HAL_GPIO_ReadPin>
 8001418:	4603      	mov	r3, r0
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	b2d9      	uxtb	r1, r3
 8001420:	4acb      	ldr	r2, [pc, #812]	; (8001750 <readall_inputs+0x34c>)
 8001422:	7813      	ldrb	r3, [r2, #0]
 8001424:	f361 0300 	bfi	r3, r1, #0, #1
 8001428:	7013      	strb	r3, [r2, #0]
	system_in.Leerlauf = HAL_GPIO_ReadPin(LEERLAUF_GPIO_Port, LEERLAUF_Pin);					// Eingang Gaspedal nicht getreten
 800142a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800142e:	48c7      	ldr	r0, [pc, #796]	; (800174c <readall_inputs+0x348>)
 8001430:	f003 fc3a 	bl	8004ca8 <HAL_GPIO_ReadPin>
 8001434:	4603      	mov	r3, r0
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	b2d9      	uxtb	r1, r3
 800143c:	4ac4      	ldr	r2, [pc, #784]	; (8001750 <readall_inputs+0x34c>)
 800143e:	7813      	ldrb	r3, [r2, #0]
 8001440:	f361 0341 	bfi	r3, r1, #1, #1
 8001444:	7013      	strb	r3, [r2, #0]
	system_in.BremseNO = HAL_GPIO_ReadPin(BREMSE_NO_GPIO_Port, BREMSE_NO_Pin);					// Eingang Bremse nicht getreten
 8001446:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800144a:	48c0      	ldr	r0, [pc, #768]	; (800174c <readall_inputs+0x348>)
 800144c:	f003 fc2c 	bl	8004ca8 <HAL_GPIO_ReadPin>
 8001450:	4603      	mov	r3, r0
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	b2d9      	uxtb	r1, r3
 8001458:	4abd      	ldr	r2, [pc, #756]	; (8001750 <readall_inputs+0x34c>)
 800145a:	7813      	ldrb	r3, [r2, #0]
 800145c:	f361 0382 	bfi	r3, r1, #2, #1
 8001460:	7013      	strb	r3, [r2, #0]
	system_in.BremseNC = HAL_GPIO_ReadPin(BREMSE_NC_GPIO_Port, BREMSE_NC_Pin);					// Eingang Bremse getreten
 8001462:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001466:	48b9      	ldr	r0, [pc, #740]	; (800174c <readall_inputs+0x348>)
 8001468:	f003 fc1e 	bl	8004ca8 <HAL_GPIO_ReadPin>
 800146c:	4603      	mov	r3, r0
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	b2d9      	uxtb	r1, r3
 8001474:	4ab6      	ldr	r2, [pc, #728]	; (8001750 <readall_inputs+0x34c>)
 8001476:	7813      	ldrb	r3, [r2, #0]
 8001478:	f361 03c3 	bfi	r3, r1, #3, #1
 800147c:	7013      	strb	r3, [r2, #0]
	system_in.Kupplung = HAL_GPIO_ReadPin(KUPPLUNG_NO_GPIO_Port, KUPPLUNG_NO_Pin);				// Eingang Kupplung nicht getreten
 800147e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001482:	48b2      	ldr	r0, [pc, #712]	; (800174c <readall_inputs+0x348>)
 8001484:	f003 fc10 	bl	8004ca8 <HAL_GPIO_ReadPin>
 8001488:	4603      	mov	r3, r0
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	b2d9      	uxtb	r1, r3
 8001490:	4aaf      	ldr	r2, [pc, #700]	; (8001750 <readall_inputs+0x34c>)
 8001492:	7813      	ldrb	r3, [r2, #0]
 8001494:	f361 1304 	bfi	r3, r1, #4, #1
 8001498:	7013      	strb	r3, [r2, #0]
	system_in.Recuperation = HAL_GPIO_ReadPin(RECUPERATION_GPIO_Port, RECUPERATION_Pin);		// Eingang Recuperation
 800149a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800149e:	48ad      	ldr	r0, [pc, #692]	; (8001754 <readall_inputs+0x350>)
 80014a0:	f003 fc02 	bl	8004ca8 <HAL_GPIO_ReadPin>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	b2d9      	uxtb	r1, r3
 80014ac:	4aa8      	ldr	r2, [pc, #672]	; (8001750 <readall_inputs+0x34c>)
 80014ae:	7813      	ldrb	r3, [r2, #0]
 80014b0:	f361 1345 	bfi	r3, r1, #5, #1
 80014b4:	7013      	strb	r3, [r2, #0]
	system_in.ECON = HAL_GPIO_ReadPin(ECON_GPIO_Port, ECON_Pin);								// Eingang Klima
 80014b6:	2102      	movs	r1, #2
 80014b8:	48a6      	ldr	r0, [pc, #664]	; (8001754 <readall_inputs+0x350>)
 80014ba:	f003 fbf5 	bl	8004ca8 <HAL_GPIO_ReadPin>
 80014be:	4603      	mov	r3, r0
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	b2d9      	uxtb	r1, r3
 80014c6:	4aa2      	ldr	r2, [pc, #648]	; (8001750 <readall_inputs+0x34c>)
 80014c8:	7813      	ldrb	r3, [r2, #0]
 80014ca:	f361 1386 	bfi	r3, r1, #6, #1
 80014ce:	7013      	strb	r3, [r2, #0]
	// FIXME: Anlasser Zuordnung neu gestallten
	system_in.Anlasser = HAL_GPIO_ReadPin(BAMOCAR_IN2_GPIO_Port, BAMOCAR_IN2_Pin);					// Eingang Zuendschloss, Motor starten
 80014d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014d4:	48a0      	ldr	r0, [pc, #640]	; (8001758 <readall_inputs+0x354>)
 80014d6:	f003 fbe7 	bl	8004ca8 <HAL_GPIO_ReadPin>
 80014da:	4603      	mov	r3, r0
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	b2d9      	uxtb	r1, r3
 80014e2:	4a9b      	ldr	r2, [pc, #620]	; (8001750 <readall_inputs+0x34c>)
 80014e4:	7813      	ldrb	r3, [r2, #0]
 80014e6:	f361 13c7 	bfi	r3, r1, #7, #1
 80014ea:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 80014ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f0:	4899      	ldr	r0, [pc, #612]	; (8001758 <readall_inputs+0x354>)
 80014f2:	f003 fbd9 	bl	8004ca8 <HAL_GPIO_ReadPin>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	b2d9      	uxtb	r1, r3
 80014fe:	4a94      	ldr	r2, [pc, #592]	; (8001750 <readall_inputs+0x34c>)
 8001500:	7853      	ldrb	r3, [r2, #1]
 8001502:	f361 0300 	bfi	r3, r1, #0, #1
 8001506:	7053      	strb	r3, [r2, #1]
	system_in.DCDC_Inst = HAL_GPIO_ReadPin(DCDC_INSTRUCTION_GPIO_Port, DCDC_INSTRUCTION_Pin);	// DCDC Wandler funktioniert einwandfrei
 8001508:	2101      	movs	r1, #1
 800150a:	4894      	ldr	r0, [pc, #592]	; (800175c <readall_inputs+0x358>)
 800150c:	f003 fbcc 	bl	8004ca8 <HAL_GPIO_ReadPin>
 8001510:	4603      	mov	r3, r0
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	b2d9      	uxtb	r1, r3
 8001518:	4a8d      	ldr	r2, [pc, #564]	; (8001750 <readall_inputs+0x34c>)
 800151a:	7853      	ldrb	r3, [r2, #1]
 800151c:	f361 0341 	bfi	r3, r1, #1, #1
 8001520:	7053      	strb	r3, [r2, #1]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8001522:	2101      	movs	r1, #1
 8001524:	488b      	ldr	r0, [pc, #556]	; (8001754 <readall_inputs+0x350>)
 8001526:	f003 fbbf 	bl	8004ca8 <HAL_GPIO_ReadPin>
 800152a:	4603      	mov	r3, r0
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	b2d9      	uxtb	r1, r3
 8001532:	4a87      	ldr	r2, [pc, #540]	; (8001750 <readall_inputs+0x34c>)
 8001534:	7853      	ldrb	r3, [r2, #1]
 8001536:	f361 0382 	bfi	r3, r1, #2, #1
 800153a:	7053      	strb	r3, [r2, #1]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 800153c:	2140      	movs	r1, #64	; 0x40
 800153e:	4883      	ldr	r0, [pc, #524]	; (800174c <readall_inputs+0x348>)
 8001540:	f003 fbb2 	bl	8004ca8 <HAL_GPIO_ReadPin>
 8001544:	4603      	mov	r3, r0
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	b2d9      	uxtb	r1, r3
 800154c:	4a80      	ldr	r2, [pc, #512]	; (8001750 <readall_inputs+0x34c>)
 800154e:	7853      	ldrb	r3, [r2, #1]
 8001550:	f361 03c3 	bfi	r3, r1, #3, #1
 8001554:	7053      	strb	r3, [r2, #1]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8001556:	2101      	movs	r1, #1
 8001558:	4881      	ldr	r0, [pc, #516]	; (8001760 <readall_inputs+0x35c>)
 800155a:	f003 fba5 	bl	8004ca8 <HAL_GPIO_ReadPin>
 800155e:	4603      	mov	r3, r0
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	b2d9      	uxtb	r1, r3
 8001566:	4a7a      	ldr	r2, [pc, #488]	; (8001750 <readall_inputs+0x34c>)
 8001568:	7853      	ldrb	r3, [r2, #1]
 800156a:	f361 1304 	bfi	r3, r1, #4, #1
 800156e:	7053      	strb	r3, [r2, #1]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8001570:	2104      	movs	r1, #4
 8001572:	487b      	ldr	r0, [pc, #492]	; (8001760 <readall_inputs+0x35c>)
 8001574:	f003 fb98 	bl	8004ca8 <HAL_GPIO_ReadPin>
 8001578:	4603      	mov	r3, r0
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	b2d9      	uxtb	r1, r3
 8001580:	4a73      	ldr	r2, [pc, #460]	; (8001750 <readall_inputs+0x34c>)
 8001582:	7853      	ldrb	r3, [r2, #1]
 8001584:	f361 1345 	bfi	r3, r1, #5, #1
 8001588:	7053      	strb	r3, [r2, #1]
//	system_in.Bremsdruck_NO = HAL_GPIO_ReadPin(Bremsdruck_NO_GPIO_Port, Bremsdruck_NO_Pin);		// Bremsdruck nicht zu hoch
//	system_in.Bremsdruck_NC = HAL_GPIO_ReadPin(Bremsdruck_NC_GPIO_Port, Bremsdruck_NC_Pin);		// Bremsdruck zu hoch

	// SDC-Eingaenge einlesen
	sdc_in.EmergencyRun = HAL_GPIO_ReadPin(EMERGENCY_RUN_GPIO_Port, EMERGENCY_RUN_Pin);			// Emergency Run, Akku
 800158a:	2102      	movs	r1, #2
 800158c:	4874      	ldr	r0, [pc, #464]	; (8001760 <readall_inputs+0x35c>)
 800158e:	f003 fb8b 	bl	8004ca8 <HAL_GPIO_ReadPin>
 8001592:	4603      	mov	r3, r0
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	b2d9      	uxtb	r1, r3
 800159a:	4a72      	ldr	r2, [pc, #456]	; (8001764 <readall_inputs+0x360>)
 800159c:	7813      	ldrb	r3, [r2, #0]
 800159e:	f361 0300 	bfi	r3, r1, #0, #1
 80015a2:	7013      	strb	r3, [r2, #0]
	sdc_in.SDC0 = HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin);						// Shutdown-Circuit, OK
 80015a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015a8:	4868      	ldr	r0, [pc, #416]	; (800174c <readall_inputs+0x348>)
 80015aa:	f003 fb7d 	bl	8004ca8 <HAL_GPIO_ReadPin>
 80015ae:	4603      	mov	r3, r0
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	b2d9      	uxtb	r1, r3
 80015b6:	4a6b      	ldr	r2, [pc, #428]	; (8001764 <readall_inputs+0x360>)
 80015b8:	7813      	ldrb	r3, [r2, #0]
 80015ba:	f361 0341 	bfi	r3, r1, #1, #1
 80015be:	7013      	strb	r3, [r2, #0]
	sdc_in.Akku1SDC = HAL_GPIO_ReadPin(SENSE_SDC_AKKU_GPIO_Port, SENSE_SDC_AKKU_Pin);			// Shutdown-Circuit Akku, OK
 80015c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015c4:	4861      	ldr	r0, [pc, #388]	; (800174c <readall_inputs+0x348>)
 80015c6:	f003 fb6f 	bl	8004ca8 <HAL_GPIO_ReadPin>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	b2d9      	uxtb	r1, r3
 80015d2:	4a64      	ldr	r2, [pc, #400]	; (8001764 <readall_inputs+0x360>)
 80015d4:	7813      	ldrb	r3, [r2, #0]
 80015d6:	f361 0382 	bfi	r3, r1, #2, #1
 80015da:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 80015dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015e0:	4861      	ldr	r0, [pc, #388]	; (8001768 <readall_inputs+0x364>)
 80015e2:	f003 fb61 	bl	8004ca8 <HAL_GPIO_ReadPin>
 80015e6:	4603      	mov	r3, r0
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	b2d9      	uxtb	r1, r3
 80015ee:	4a5d      	ldr	r2, [pc, #372]	; (8001764 <readall_inputs+0x360>)
 80015f0:	7813      	ldrb	r3, [r2, #0]
 80015f2:	f361 03c3 	bfi	r3, r1, #3, #1
 80015f6:	7013      	strb	r3, [r2, #0]
	sdc_in.DCDC_Fault = HAL_GPIO_ReadPin(DCDC_FAULT_GPIO_Port, DCDC_FAULT_Pin);					// DCDC Wandler funktioniert nicht richtig
 80015f8:	2102      	movs	r1, #2
 80015fa:	4858      	ldr	r0, [pc, #352]	; (800175c <readall_inputs+0x358>)
 80015fc:	f003 fb54 	bl	8004ca8 <HAL_GPIO_ReadPin>
 8001600:	4603      	mov	r3, r0
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	b2d9      	uxtb	r1, r3
 8001608:	4a56      	ldr	r2, [pc, #344]	; (8001764 <readall_inputs+0x360>)
 800160a:	7813      	ldrb	r3, [r2, #0]
 800160c:	f361 1304 	bfi	r3, r1, #4, #1
 8001610:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.ASR1 = HAL_GPIO_ReadPin(ASR_IN1_GPIO_Port, ASR_IN1_Pin);							// ASR Eingang Mittelkonsole
 8001612:	2110      	movs	r1, #16
 8001614:	4851      	ldr	r0, [pc, #324]	; (800175c <readall_inputs+0x358>)
 8001616:	f003 fb47 	bl	8004ca8 <HAL_GPIO_ReadPin>
 800161a:	4603      	mov	r3, r0
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	b2d9      	uxtb	r1, r3
 8001622:	4a52      	ldr	r2, [pc, #328]	; (800176c <readall_inputs+0x368>)
 8001624:	7813      	ldrb	r3, [r2, #0]
 8001626:	f361 0300 	bfi	r3, r1, #0, #1
 800162a:	7013      	strb	r3, [r2, #0]
	komfort_in.ASR2 = HAL_GPIO_ReadPin(ASR_IN2_GPIO_Port, ASR_IN2_Pin);							// ASR Eingang Mittelkonsole
 800162c:	2110      	movs	r1, #16
 800162e:	484a      	ldr	r0, [pc, #296]	; (8001758 <readall_inputs+0x354>)
 8001630:	f003 fb3a 	bl	8004ca8 <HAL_GPIO_ReadPin>
 8001634:	4603      	mov	r3, r0
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	b2d9      	uxtb	r1, r3
 800163c:	4a4b      	ldr	r2, [pc, #300]	; (800176c <readall_inputs+0x368>)
 800163e:	7813      	ldrb	r3, [r2, #0]
 8001640:	f361 0341 	bfi	r3, r1, #1, #1
 8001644:	7013      	strb	r3, [r2, #0]
	komfort_in.ECO = HAL_GPIO_ReadPin(ECO_GPIO_Port, ECO_Pin);									// ECO Eingang Mittelkonsole
 8001646:	2108      	movs	r1, #8
 8001648:	4840      	ldr	r0, [pc, #256]	; (800174c <readall_inputs+0x348>)
 800164a:	f003 fb2d 	bl	8004ca8 <HAL_GPIO_ReadPin>
 800164e:	4603      	mov	r3, r0
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	b2d9      	uxtb	r1, r3
 8001656:	4a45      	ldr	r2, [pc, #276]	; (800176c <readall_inputs+0x368>)
 8001658:	7813      	ldrb	r3, [r2, #0]
 800165a:	f361 0382 	bfi	r3, r1, #2, #1
 800165e:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Rst_In = HAL_GPIO_ReadPin(BC_RESET_IN_GPIO_Port, BC_RESET_IN_Pin);			// Boardcomputer Reset Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8001660:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001664:	483d      	ldr	r0, [pc, #244]	; (800175c <readall_inputs+0x358>)
 8001666:	f003 fb1f 	bl	8004ca8 <HAL_GPIO_ReadPin>
 800166a:	4603      	mov	r3, r0
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	b2d9      	uxtb	r1, r3
 8001672:	4a3e      	ldr	r2, [pc, #248]	; (800176c <readall_inputs+0x368>)
 8001674:	7813      	ldrb	r3, [r2, #0]
 8001676:	f361 03c3 	bfi	r3, r1, #3, #1
 800167a:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Up_In = HAL_GPIO_ReadPin(BC_UP_IN_GPIO_Port, BC_UP_IN_Pin);					// Boardcomputer Rauf Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 800167c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001680:	4837      	ldr	r0, [pc, #220]	; (8001760 <readall_inputs+0x35c>)
 8001682:	f003 fb11 	bl	8004ca8 <HAL_GPIO_ReadPin>
 8001686:	4603      	mov	r3, r0
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	b2d9      	uxtb	r1, r3
 800168e:	4a37      	ldr	r2, [pc, #220]	; (800176c <readall_inputs+0x368>)
 8001690:	7813      	ldrb	r3, [r2, #0]
 8001692:	f361 1304 	bfi	r3, r1, #4, #1
 8001696:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Down_In = HAL_GPIO_ReadPin(BC_DOWN_IN_GPIO_Port, BC_DOWN_IN_Pin);				// Boardcomputer Runter Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8001698:	2110      	movs	r1, #16
 800169a:	482c      	ldr	r0, [pc, #176]	; (800174c <readall_inputs+0x348>)
 800169c:	f003 fb04 	bl	8004ca8 <HAL_GPIO_ReadPin>
 80016a0:	4603      	mov	r3, r0
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	b2d9      	uxtb	r1, r3
 80016a8:	4a30      	ldr	r2, [pc, #192]	; (800176c <readall_inputs+0x368>)
 80016aa:	7813      	ldrb	r3, [r2, #0]
 80016ac:	f361 1345 	bfi	r3, r1, #5, #1
 80016b0:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn1 = HAL_GPIO_ReadPin(BAMOCAR_IN1_GPIO_Port, BAMOCAR_IN1_Pin);				// Eingang Bamocar 1
 80016b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016b6:	4828      	ldr	r0, [pc, #160]	; (8001758 <readall_inputs+0x354>)
 80016b8:	f003 faf6 	bl	8004ca8 <HAL_GPIO_ReadPin>
 80016bc:	4603      	mov	r3, r0
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	b2d9      	uxtb	r1, r3
 80016c4:	4a29      	ldr	r2, [pc, #164]	; (800176c <readall_inputs+0x368>)
 80016c6:	7813      	ldrb	r3, [r2, #0]
 80016c8:	f361 1386 	bfi	r3, r1, #6, #1
 80016cc:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn2 = HAL_GPIO_ReadPin(BAMOCAR_IN2_GPIO_Port, BAMOCAR_IN2_Pin);				// Eingang Bamocar 2
 80016ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016d2:	4821      	ldr	r0, [pc, #132]	; (8001758 <readall_inputs+0x354>)
 80016d4:	f003 fae8 	bl	8004ca8 <HAL_GPIO_ReadPin>
 80016d8:	4603      	mov	r3, r0
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	b2d9      	uxtb	r1, r3
 80016e0:	4a22      	ldr	r2, [pc, #136]	; (800176c <readall_inputs+0x368>)
 80016e2:	7813      	ldrb	r3, [r2, #0]
 80016e4:	f361 13c7 	bfi	r3, r1, #7, #1
 80016e8:	7013      	strb	r3, [r2, #0]
	komfort_in.Enter = HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin);							// Encoder Taster Enter Eingang Mittelconsole
 80016ea:	2180      	movs	r1, #128	; 0x80
 80016ec:	4820      	ldr	r0, [pc, #128]	; (8001770 <readall_inputs+0x36c>)
 80016ee:	f003 fadb 	bl	8004ca8 <HAL_GPIO_ReadPin>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	b2d9      	uxtb	r1, r3
 80016fa:	4a1c      	ldr	r2, [pc, #112]	; (800176c <readall_inputs+0x368>)
 80016fc:	7853      	ldrb	r3, [r2, #1]
 80016fe:	f361 0300 	bfi	r3, r1, #0, #1
 8001702:	7053      	strb	r3, [r2, #1]
	komfort_in.OutA = HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTA_Pin);								// Encoder OUTA Eingang Mittelconsole
 8001704:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001708:	4815      	ldr	r0, [pc, #84]	; (8001760 <readall_inputs+0x35c>)
 800170a:	f003 facd 	bl	8004ca8 <HAL_GPIO_ReadPin>
 800170e:	4603      	mov	r3, r0
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	b2d9      	uxtb	r1, r3
 8001716:	4a15      	ldr	r2, [pc, #84]	; (800176c <readall_inputs+0x368>)
 8001718:	7853      	ldrb	r3, [r2, #1]
 800171a:	f361 0341 	bfi	r3, r1, #1, #1
 800171e:	7053      	strb	r3, [r2, #1]
	komfort_in.OutB = HAL_GPIO_ReadPin(OUTB_GPIO_Port, OUTB_Pin);								// Encoder OUTB Eingang Mittelconsole
 8001720:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001724:	480e      	ldr	r0, [pc, #56]	; (8001760 <readall_inputs+0x35c>)
 8001726:	f003 fabf 	bl	8004ca8 <HAL_GPIO_ReadPin>
 800172a:	4603      	mov	r3, r0
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	b2d9      	uxtb	r1, r3
 8001732:	4a0e      	ldr	r2, [pc, #56]	; (800176c <readall_inputs+0x368>)
 8001734:	7853      	ldrb	r3, [r2, #1]
 8001736:	f361 0382 	bfi	r3, r1, #2, #1
 800173a:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA1 = HAL_GPIO_ReadPin(GRA1_GPIO_Port, GRA1_Pin);								// Tempomat 1 Eingang
 800173c:	2120      	movs	r1, #32
 800173e:	4807      	ldr	r0, [pc, #28]	; (800175c <readall_inputs+0x358>)
 8001740:	f003 fab2 	bl	8004ca8 <HAL_GPIO_ReadPin>
 8001744:	4603      	mov	r3, r0
 8001746:	e015      	b.n	8001774 <readall_inputs+0x370>
 8001748:	080081a8 	.word	0x080081a8
 800174c:	40021000 	.word	0x40021000
 8001750:	2000003c 	.word	0x2000003c
 8001754:	40021400 	.word	0x40021400
 8001758:	40020c00 	.word	0x40020c00
 800175c:	40021800 	.word	0x40021800
 8001760:	40020000 	.word	0x40020000
 8001764:	20000040 	.word	0x20000040
 8001768:	40020400 	.word	0x40020400
 800176c:	20000044 	.word	0x20000044
 8001770:	40020800 	.word	0x40020800
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	b2d9      	uxtb	r1, r3
 800177a:	4a30      	ldr	r2, [pc, #192]	; (800183c <readall_inputs+0x438>)
 800177c:	7853      	ldrb	r3, [r2, #1]
 800177e:	f361 03c3 	bfi	r3, r1, #3, #1
 8001782:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA2 = HAL_GPIO_ReadPin(GRA2_GPIO_Port, GRA2_Pin);								// Tempomat 2 Eingang
 8001784:	2140      	movs	r1, #64	; 0x40
 8001786:	482e      	ldr	r0, [pc, #184]	; (8001840 <readall_inputs+0x43c>)
 8001788:	f003 fa8e 	bl	8004ca8 <HAL_GPIO_ReadPin>
 800178c:	4603      	mov	r3, r0
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	b2d9      	uxtb	r1, r3
 8001794:	4a29      	ldr	r2, [pc, #164]	; (800183c <readall_inputs+0x438>)
 8001796:	7853      	ldrb	r3, [r2, #1]
 8001798:	f361 1304 	bfi	r3, r1, #4, #1
 800179c:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA3 = HAL_GPIO_ReadPin(GRA3_GPIO_Port, GRA3_Pin);								// Tempomat 3 Eingang
 800179e:	2180      	movs	r1, #128	; 0x80
 80017a0:	4827      	ldr	r0, [pc, #156]	; (8001840 <readall_inputs+0x43c>)
 80017a2:	f003 fa81 	bl	8004ca8 <HAL_GPIO_ReadPin>
 80017a6:	4603      	mov	r3, r0
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	b2d9      	uxtb	r1, r3
 80017ae:	4a23      	ldr	r2, [pc, #140]	; (800183c <readall_inputs+0x438>)
 80017b0:	7853      	ldrb	r3, [r2, #1]
 80017b2:	f361 1345 	bfi	r3, r1, #5, #1
 80017b6:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA4 = HAL_GPIO_ReadPin(GRA4_GPIO_Port, GRA4_Pin);								// Tempomat 4 Eingang
 80017b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017bc:	4820      	ldr	r0, [pc, #128]	; (8001840 <readall_inputs+0x43c>)
 80017be:	f003 fa73 	bl	8004ca8 <HAL_GPIO_ReadPin>
 80017c2:	4603      	mov	r3, r0
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	b2d9      	uxtb	r1, r3
 80017ca:	4a1c      	ldr	r2, [pc, #112]	; (800183c <readall_inputs+0x438>)
 80017cc:	7853      	ldrb	r3, [r2, #1]
 80017ce:	f361 1386 	bfi	r3, r1, #6, #1
 80017d2:	7053      	strb	r3, [r2, #1]
	komfort_in.Durchfluss = HAL_GPIO_ReadPin(DURCHFLUSS_GPIO_Port, DURCHFLUSS_Pin);				// Durchflusssensor Eingang
 80017d4:	2120      	movs	r1, #32
 80017d6:	481b      	ldr	r0, [pc, #108]	; (8001844 <readall_inputs+0x440>)
 80017d8:	f003 fa66 	bl	8004ca8 <HAL_GPIO_ReadPin>
 80017dc:	4603      	mov	r3, r0
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	b2d9      	uxtb	r1, r3
 80017e4:	4a15      	ldr	r2, [pc, #84]	; (800183c <readall_inputs+0x438>)
 80017e6:	7853      	ldrb	r3, [r2, #1]
 80017e8:	f361 13c7 	bfi	r3, r1, #7, #1
 80017ec:	7053      	strb	r3, [r2, #1]

#ifdef DEBUG_INPUT
	ITM_SendString("Eingaenge gelesen.\n");
 80017ee:	4816      	ldr	r0, [pc, #88]	; (8001848 <readall_inputs+0x444>)
 80017f0:	f7ff fdcc 	bl	800138c <ITM_SendString>
	ITM_SendString("system_in:\t");
 80017f4:	4815      	ldr	r0, [pc, #84]	; (800184c <readall_inputs+0x448>)
 80017f6:	f7ff fdc9 	bl	800138c <ITM_SendString>
	ITM_SendNumber(system_in.systeminput);
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <readall_inputs+0x44c>)
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fdce 	bl	80013a0 <ITM_SendNumber>
	ITM_SendChar('\n');
 8001804:	200a      	movs	r0, #10
 8001806:	f7ff fdd5 	bl	80013b4 <ITM_SendChar>
	ITM_SendString("sdc_in:\t");
 800180a:	4812      	ldr	r0, [pc, #72]	; (8001854 <readall_inputs+0x450>)
 800180c:	f7ff fdbe 	bl	800138c <ITM_SendString>
	ITM_SendNumber(sdc_in.sdcinput);
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <readall_inputs+0x454>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fdc3 	bl	80013a0 <ITM_SendNumber>
	ITM_SendChar('\n');
 800181a:	200a      	movs	r0, #10
 800181c:	f7ff fdca 	bl	80013b4 <ITM_SendChar>
	ITM_SendString("komfort_in:\t");
 8001820:	480e      	ldr	r0, [pc, #56]	; (800185c <readall_inputs+0x458>)
 8001822:	f7ff fdb3 	bl	800138c <ITM_SendString>
	ITM_SendNumber(komfort_in.komfortinput);
 8001826:	4b05      	ldr	r3, [pc, #20]	; (800183c <readall_inputs+0x438>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fdb8 	bl	80013a0 <ITM_SendNumber>
	ITM_SendChar('\n');
 8001830:	200a      	movs	r0, #10
 8001832:	f7ff fdbf 	bl	80013b4 <ITM_SendChar>
#endif
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000044 	.word	0x20000044
 8001840:	40021800 	.word	0x40021800
 8001844:	40021000 	.word	0x40021000
 8001848:	080081bc 	.word	0x080081bc
 800184c:	080081d0 	.word	0x080081d0
 8001850:	2000003c 	.word	0x2000003c
 8001854:	080081dc 	.word	0x080081dc
 8001858:	20000040 	.word	0x20000040
 800185c:	080081e8 	.word	0x080081e8

08001860 <readAnlasser>:
//----------------------------------------------------------------------

// Anlasser einlesen, Wert in Variable speichern, bis KL15 abfaellt
//----------------------------------------------------------------------
void readAnlasser(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
	if (system_in.Anlasser != 1)
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <readAnlasser+0x50>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d105      	bne.n	800187e <readAnlasser+0x1e>
	{
		sdc_in.Anlasser = 1;
 8001872:	4a10      	ldr	r2, [pc, #64]	; (80018b4 <readAnlasser+0x54>)
 8001874:	7813      	ldrb	r3, [r2, #0]
 8001876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800187a:	7013      	strb	r3, [r2, #0]
	}
	else if ((sdc_in.Anlasser == 1) && (system_in.KL15 == 1))
	{
		sdc_in.Anlasser = 0;
	}
}
 800187c:	e012      	b.n	80018a4 <readAnlasser+0x44>
	else if ((sdc_in.Anlasser == 1) && (system_in.KL15 == 1))
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <readAnlasser+0x54>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00b      	beq.n	80018a4 <readAnlasser+0x44>
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <readAnlasser+0x50>)
 800188e:	785b      	ldrb	r3, [r3, #1]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d004      	beq.n	80018a4 <readAnlasser+0x44>
		sdc_in.Anlasser = 0;
 800189a:	4a06      	ldr	r2, [pc, #24]	; (80018b4 <readAnlasser+0x54>)
 800189c:	7813      	ldrb	r3, [r2, #0]
 800189e:	f36f 1386 	bfc	r3, #6, #1
 80018a2:	7013      	strb	r3, [r2, #0]
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	2000003c 	.word	0x2000003c
 80018b4:	20000040 	.word	0x20000040

080018b8 <millis>:
//----------------------------------------------------------------------
#include "millis.h"
//----------------------------------------------------------------------

uint32_t millis(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80018bc:	f001 fba4 	bl	8003008 <HAL_GetTick>
 80018c0:	4603      	mov	r3, r0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);							// Teste Green LED, an
 80018cc:	2201      	movs	r2, #1
 80018ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018d2:	481b      	ldr	r0, [pc, #108]	; (8001940 <testPCB_Leds+0x78>)
 80018d4:	f003 fa00 	bl	8004cd8 <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 80018d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018dc:	f001 fba0 	bl	8003020 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);							// Teste Green LED, aus
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018e6:	4816      	ldr	r0, [pc, #88]	; (8001940 <testPCB_Leds+0x78>)
 80018e8:	f003 f9f6 	bl	8004cd8 <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 80018ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018f0:	f001 fb96 	bl	8003020 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);								// Teste Blue LED, an
 80018f4:	2201      	movs	r2, #1
 80018f6:	2180      	movs	r1, #128	; 0x80
 80018f8:	4811      	ldr	r0, [pc, #68]	; (8001940 <testPCB_Leds+0x78>)
 80018fa:	f003 f9ed 	bl	8004cd8 <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 80018fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001902:	f001 fb8d 	bl	8003020 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);							// Teste Blue LED, aus
 8001906:	2200      	movs	r2, #0
 8001908:	2180      	movs	r1, #128	; 0x80
 800190a:	480d      	ldr	r0, [pc, #52]	; (8001940 <testPCB_Leds+0x78>)
 800190c:	f003 f9e4 	bl	8004cd8 <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 8001910:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001914:	f001 fb84 	bl	8003020 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);								// Teste Red LED, an
 8001918:	2201      	movs	r2, #1
 800191a:	2104      	movs	r1, #4
 800191c:	4808      	ldr	r0, [pc, #32]	; (8001940 <testPCB_Leds+0x78>)
 800191e:	f003 f9db 	bl	8004cd8 <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 8001922:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001926:	f001 fb7b 	bl	8003020 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);								// Teste Red LED, aus
 800192a:	2200      	movs	r2, #0
 800192c:	2104      	movs	r1, #4
 800192e:	4804      	ldr	r0, [pc, #16]	; (8001940 <testPCB_Leds+0x78>)
 8001930:	f003 f9d2 	bl	8004cd8 <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 8001934:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001938:	f001 fb72 	bl	8003020 <HAL_Delay>
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40020400 	.word	0x40020400

08001944 <testCockpit_Leds>:
//----------------------------------------------------------------------

// Teste Cockpit LEDs
//----------------------------------------------------------------------
void testCockpit_Leds(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(ANHAENGER_GPIO_Port, ANHAENGER_Pin, GPIO_PIN_SET);							// Teste Anhaenger LED, an (Cockpit ECO)
 8001948:	2201      	movs	r2, #1
 800194a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800194e:	4813      	ldr	r0, [pc, #76]	; (800199c <testCockpit_Leds+0x58>)
 8001950:	f003 f9c2 	bl	8004cd8 <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 8001954:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001958:	f001 fb62 	bl	8003020 <HAL_Delay>
    HAL_GPIO_WritePin(ANHAENGER_GPIO_Port, ANHAENGER_Pin, GPIO_PIN_RESET);							// Teste Anhaenger LED, aus (Cockpit ECO)
 800195c:	2200      	movs	r2, #0
 800195e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001962:	480e      	ldr	r0, [pc, #56]	; (800199c <testCockpit_Leds+0x58>)
 8001964:	f003 f9b8 	bl	8004cd8 <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 8001968:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800196c:	f001 fb58 	bl	8003020 <HAL_Delay>
    HAL_GPIO_WritePin(RESERVE_OUT_GPIO_Port, RESERVE_OUT_Pin, GPIO_PIN_SET);						// Teste Reserve LED, an (Cockpit Niveauregulierung)
 8001970:	2201      	movs	r2, #1
 8001972:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001976:	4809      	ldr	r0, [pc, #36]	; (800199c <testCockpit_Leds+0x58>)
 8001978:	f003 f9ae 	bl	8004cd8 <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 800197c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001980:	f001 fb4e 	bl	8003020 <HAL_Delay>
    HAL_GPIO_WritePin(RESERVE_OUT_GPIO_Port, RESERVE_OUT_Pin, GPIO_PIN_RESET);						// Teste Reserve LED, aus (Cockpit Niveauregulierung)
 8001984:	2200      	movs	r2, #0
 8001986:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800198a:	4804      	ldr	r0, [pc, #16]	; (800199c <testCockpit_Leds+0x58>)
 800198c:	f003 f9a4 	bl	8004cd8 <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 8001990:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001994:	f001 fb44 	bl	8003020 <HAL_Delay>
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40020c00 	.word	0x40020c00

080019a0 <pwm_oelstand>:
//----------------------------------------------------------------------

// PWM fuer Oelstandsensor am Kombiinstrument
//----------------------------------------------------------------------
void pwm_oelstand(uint16_t time)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	80fb      	strh	r3, [r7, #6]
	// Auswahl wie viele Sekunden vergangen
	switch (time)																					// Zeit wird uebergeben
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	2b4b      	cmp	r3, #75	; 0x4b
 80019ae:	d01c      	beq.n	80019ea <pwm_oelstand+0x4a>
 80019b0:	2b4b      	cmp	r3, #75	; 0x4b
 80019b2:	dc20      	bgt.n	80019f6 <pwm_oelstand+0x56>
 80019b4:	2b2d      	cmp	r3, #45	; 0x2d
 80019b6:	d012      	beq.n	80019de <pwm_oelstand+0x3e>
 80019b8:	2b2d      	cmp	r3, #45	; 0x2d
 80019ba:	dc1c      	bgt.n	80019f6 <pwm_oelstand+0x56>
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d002      	beq.n	80019c6 <pwm_oelstand+0x26>
 80019c0:	2b0f      	cmp	r3, #15
 80019c2:	d006      	beq.n	80019d2 <pwm_oelstand+0x32>
			break;
		case 75: // 5x15 ms = 75 ms
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 75ms Oelstandsensor Ausgang high
			break;
		default:
			break;
 80019c4:	e017      	b.n	80019f6 <pwm_oelstand+0x56>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_RESET);			// Bei 0ms Oelstandsensor Ausgang low
 80019c6:	2200      	movs	r2, #0
 80019c8:	2180      	movs	r1, #128	; 0x80
 80019ca:	480d      	ldr	r0, [pc, #52]	; (8001a00 <pwm_oelstand+0x60>)
 80019cc:	f003 f984 	bl	8004cd8 <HAL_GPIO_WritePin>
			break;
 80019d0:	e012      	b.n	80019f8 <pwm_oelstand+0x58>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 15ms Oelstandsensor Ausgang high
 80019d2:	2201      	movs	r2, #1
 80019d4:	2180      	movs	r1, #128	; 0x80
 80019d6:	480a      	ldr	r0, [pc, #40]	; (8001a00 <pwm_oelstand+0x60>)
 80019d8:	f003 f97e 	bl	8004cd8 <HAL_GPIO_WritePin>
			break;
 80019dc:	e00c      	b.n	80019f8 <pwm_oelstand+0x58>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_RESET);			// Bei 45ms Oelstandsensor Ausgang low
 80019de:	2200      	movs	r2, #0
 80019e0:	2180      	movs	r1, #128	; 0x80
 80019e2:	4807      	ldr	r0, [pc, #28]	; (8001a00 <pwm_oelstand+0x60>)
 80019e4:	f003 f978 	bl	8004cd8 <HAL_GPIO_WritePin>
			break;
 80019e8:	e006      	b.n	80019f8 <pwm_oelstand+0x58>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 75ms Oelstandsensor Ausgang high
 80019ea:	2201      	movs	r2, #1
 80019ec:	2180      	movs	r1, #128	; 0x80
 80019ee:	4804      	ldr	r0, [pc, #16]	; (8001a00 <pwm_oelstand+0x60>)
 80019f0:	f003 f972 	bl	8004cd8 <HAL_GPIO_WritePin>
			break;
 80019f4:	e000      	b.n	80019f8 <pwm_oelstand+0x58>
			break;
 80019f6:	bf00      	nop
	}
	// Nach 405ms wird das ganze wiederholt
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40020c00 	.word	0x40020c00

08001a04 <testSDC>:
//----------------------------------------------------------------------

// Testen der Spannung am Shutdown-Circuit, Signal 1 = offen, Signal = 0 geschlossen
//----------------------------------------------------------------------
void testSDC(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, GPIO_PIN_SET);					// Einschalten von Shutdown-Circuit zum testen
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a0e:	4811      	ldr	r0, [pc, #68]	; (8001a54 <testSDC+0x50>)
 8001a10:	f003 f962 	bl	8004cd8 <HAL_GPIO_WritePin>
	HAL_Delay(100);																					// Wartezeit zum setzen
 8001a14:	2064      	movs	r0, #100	; 0x64
 8001a16:	f001 fb03 	bl	8003020 <HAL_Delay>
	if (HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin) == 1)								// Einlesen von SDC0 Eingang
 8001a1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a1e:	480d      	ldr	r0, [pc, #52]	; (8001a54 <testSDC+0x50>)
 8001a20:	f003 f942 	bl	8004ca8 <HAL_GPIO_ReadPin>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d103      	bne.n	8001a32 <testSDC+0x2e>
	{
#ifndef DEBUG_SDC
		software_error(ERROR_SDC_SPANNUNG);															// Sollte Sicherung kaputt oder Kurzschluss, dann Fehlerausgeben
#else
#warning Das Abschalten des Softwarefehlers kann unter Umstaenden zu Beschaedigung der HW fuehren.
		software_error_debug(ERROR_SDC_SPANNUNG);													// Errorfunktion stoppt Programm nicht
 8001a2a:	2003      	movs	r0, #3
 8001a2c:	f7ff fc5c 	bl	80012e8 <software_error_debug>
 8001a30:	e004      	b.n	8001a3c <testSDC+0x38>
#endif
	}
	else
	{
	  	sdc_in.SDC12V = 1;																			// SDC Spannungsversorgung OK
 8001a32:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <testSDC+0x54>)
 8001a34:	7813      	ldrb	r3, [r2, #0]
 8001a36:	f043 0320 	orr.w	r3, r3, #32
 8001a3a:	7013      	strb	r3, [r2, #0]
	}
	HAL_Delay(100);																					// Wartezeit zum setzen
 8001a3c:	2064      	movs	r0, #100	; 0x64
 8001a3e:	f001 faef 	bl	8003020 <HAL_Delay>
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, GPIO_PIN_RESET);					// Auschalten von Shutdown-Circuit
 8001a42:	2200      	movs	r2, #0
 8001a44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <testSDC+0x50>)
 8001a4a:	f003 f945 	bl	8004cd8 <HAL_GPIO_WritePin>
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000
 8001a58:	20000040 	.word	0x20000040

08001a5c <readTrottle>:
//----------------------------------------------------------------------

// Gaspedal auswerten
//----------------------------------------------------------------------
uint16_t readTrottle(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
	// Variablen anlegen
	uint16_t ADC_Gas = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	80fb      	strh	r3, [r7, #6]

	// Pruefen ob Variable Anlasser aktiv ist
	if (sdc_in.Anlasser == 1)												// Nur aktiv, wenn KL15 an und Anlasser einmal betaetigt.
 8001a66:	4b34      	ldr	r3, [pc, #208]	; (8001b38 <readTrottle+0xdc>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d05c      	beq.n	8001b2e <readTrottle+0xd2>
	{
		// Gaspedal einlesen
		ADC_Gas = ADC_Gaspedal();
 8001a74:	f7ff f986 	bl	8000d84 <ADC_Gaspedal>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	80fb      	strh	r3, [r7, #6]

		// Pruefen ob Kupplung getreten wurde
		if (system_in.Kupplung == 1)										// Wenn Kupplung nicht getreten wurde == 1
 8001a7c:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <readTrottle+0xe0>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d04f      	beq.n	8001b2a <readTrottle+0xce>
		{
			// Wenn Leerlauf und Kickdown aktiv Plausibilitaetsfehler
			if ((system_in.Leerlauf == 1) && (system_in.Kickdown == 1))
 8001a8a:	4b2c      	ldr	r3, [pc, #176]	; (8001b3c <readTrottle+0xe0>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00e      	beq.n	8001ab6 <readTrottle+0x5a>
 8001a98:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <readTrottle+0xe0>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d007      	beq.n	8001ab6 <readTrottle+0x5a>
			{
				// Fehlermeldung auf Uart ausgeben
#define TROTTLE_INVALID				"Error_Gaspedal_1 Plausibilitaetsfehler: Kickdown und Leerlauf"
				uartTransmit(TROTTLE_INVALID, sizeof(TROTTLE_INVALID));
 8001aa6:	213e      	movs	r1, #62	; 0x3e
 8001aa8:	4825      	ldr	r0, [pc, #148]	; (8001b40 <readTrottle+0xe4>)
 8001aaa:	f7fe fe89 	bl	80007c0 <uartTransmit>
				// Gaspedal invalide
				software_error(ERROR_GASPEDAL);
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f7ff fbca 	bl	8001248 <software_error>
 8001ab4:	e03b      	b.n	8001b2e <readTrottle+0xd2>
			}
			// Threshold Wert vergleichen / Threshold Wert >= THRESHOLD und Leerlauf aktiv
			else if ((system_in.Leerlauf == 1) && (ADC_Gas >= GAS_THRESHOLD))
 8001ab6:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <readTrottle+0xe0>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d008      	beq.n	8001ad6 <readTrottle+0x7a>
 8001ac4:	88fb      	ldrh	r3, [r7, #6]
 8001ac6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001aca:	d304      	bcc.n	8001ad6 <readTrottle+0x7a>
			{
				// Wenn Wert groesser THRESHOLD ist, dann THRESHOLD vom ADC-Wert abziehen
				ADC_Gas -= GAS_THRESHOLD;
 8001acc:	88fb      	ldrh	r3, [r7, #6]
 8001ace:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ad2:	80fb      	strh	r3, [r7, #6]
 8001ad4:	e02b      	b.n	8001b2e <readTrottle+0xd2>
			}
			// Threshold Wert vergleichen / Threshold Wert < THRESHOLD und Leerlauf aktiv
			else if ((system_in.Leerlauf == 1) && (ADC_Gas < GAS_THRESHOLD))
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <readTrottle+0xe0>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d006      	beq.n	8001af2 <readTrottle+0x96>
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001aea:	d202      	bcs.n	8001af2 <readTrottle+0x96>
			{
				// Wenn der Wert kleine als THRESHOLD ist, dann ADC ignorieren, alle Werte sind 0
				ADC_Gas = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	80fb      	strh	r3, [r7, #6]
 8001af0:	e01d      	b.n	8001b2e <readTrottle+0xd2>
			}
			// Threshold Wert vergleichen / Threshold Wert < THRESHOLD und Kickdown aktiv
			else if ((system_in.Kickdown == 1) && (ADC_Gas < (GAS_MAX_ADC - GAS_THRESHOLD)))
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <readTrottle+0xe0>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d004      	beq.n	8001b0a <readTrottle+0xae>
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	f640 62d2 	movw	r2, #3794	; 0xed2
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d911      	bls.n	8001b2e <readTrottle+0xd2>
			{
				// Wenn Wert kleiner THRESHOLD ist

			}
			// Threshold Wert vergleichen / Threshold Wert > THRESHOLD und Kickdown aktiv
			else if ((system_in.Kickdown == 1) && (ADC_Gas >= (GAS_MAX_ADC - GAS_THRESHOLD)))
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <readTrottle+0xe0>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00a      	beq.n	8001b2e <readTrottle+0xd2>
 8001b18:	88fb      	ldrh	r3, [r7, #6]
 8001b1a:	f640 62d2 	movw	r2, #3794	; 0xed2
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d905      	bls.n	8001b2e <readTrottle+0xd2>
			{
				// Wenn Wert gleich THRESHOLD ist
				ADC_Gas = GAS_MAX_ADC;
 8001b22:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001b26:	80fb      	strh	r3, [r7, #6]
 8001b28:	e001      	b.n	8001b2e <readTrottle+0xd2>
		}
		// Wenn Kupplung getreten == 0
		else
		{
			// Wenn Kupplung oder Bremse getreten
			ADC_Gas = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	80fb      	strh	r3, [r7, #6]
		}
	}

	return ADC_Gas;
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000040 	.word	0x20000040
 8001b3c:	2000003c 	.word	0x2000003c
 8001b40:	080081f8 	.word	0x080081f8

08001b44 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b56:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <MX_ADC1_Init+0x98>)
 8001b58:	4a21      	ldr	r2, [pc, #132]	; (8001be0 <MX_ADC1_Init+0x9c>)
 8001b5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <MX_ADC1_Init+0x98>)
 8001b5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b64:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <MX_ADC1_Init+0x98>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <MX_ADC1_Init+0x98>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b70:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <MX_ADC1_Init+0x98>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b76:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <MX_ADC1_Init+0x98>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b7e:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <MX_ADC1_Init+0x98>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b84:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <MX_ADC1_Init+0x98>)
 8001b86:	4a17      	ldr	r2, [pc, #92]	; (8001be4 <MX_ADC1_Init+0xa0>)
 8001b88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b8a:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <MX_ADC1_Init+0x98>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <MX_ADC1_Init+0x98>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <MX_ADC1_Init+0x98>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <MX_ADC1_Init+0x98>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ba4:	480d      	ldr	r0, [pc, #52]	; (8001bdc <MX_ADC1_Init+0x98>)
 8001ba6:	f001 faa7 	bl	80030f8 <HAL_ADC_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001bb0:	f001 f80e 	bl	8002bd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001bb4:	230e      	movs	r3, #14
 8001bb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bc0:	463b      	mov	r3, r7
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4805      	ldr	r0, [pc, #20]	; (8001bdc <MX_ADC1_Init+0x98>)
 8001bc6:	f001 fc75 	bl	80034b4 <HAL_ADC_ConfigChannel>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001bd0:	f000 fffe 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000058 	.word	0x20000058
 8001be0:	40012000 	.word	0x40012000
 8001be4:	0f000001 	.word	0x0f000001

08001be8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08c      	sub	sp, #48	; 0x30
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 031c 	add.w	r3, r7, #28
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a2d      	ldr	r2, [pc, #180]	; (8001cbc <HAL_ADC_MspInit+0xd4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d153      	bne.n	8001cb2 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c0a:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <HAL_ADC_MspInit+0xd8>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	4a2c      	ldr	r2, [pc, #176]	; (8001cc0 <HAL_ADC_MspInit+0xd8>)
 8001c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c14:	6453      	str	r3, [r2, #68]	; 0x44
 8001c16:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <HAL_ADC_MspInit+0xd8>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <HAL_ADC_MspInit+0xd8>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a26      	ldr	r2, [pc, #152]	; (8001cc0 <HAL_ADC_MspInit+0xd8>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <HAL_ADC_MspInit+0xd8>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3a:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <HAL_ADC_MspInit+0xd8>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a20      	ldr	r2, [pc, #128]	; (8001cc0 <HAL_ADC_MspInit+0xd8>)
 8001c40:	f043 0304 	orr.w	r3, r3, #4
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <HAL_ADC_MspInit+0xd8>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c52:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <HAL_ADC_MspInit+0xd8>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a1a      	ldr	r2, [pc, #104]	; (8001cc0 <HAL_ADC_MspInit+0xd8>)
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <HAL_ADC_MspInit+0xd8>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SENSE_KL15_Pin|SENSE_KUEHLWASSER_Pin|SENSE_KLIMA_FLAP_Pin|SENSE_GAS_Pin
 8001c6a:	23f8      	movs	r3, #248	; 0xf8
 8001c6c:	61fb      	str	r3, [r7, #28]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c76:	f107 031c 	add.w	r3, r7, #28
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4811      	ldr	r0, [pc, #68]	; (8001cc4 <HAL_ADC_MspInit+0xdc>)
 8001c7e:	f002 fe67 	bl	8004950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_DRUCK_Pin|SENSE_DRUCK_TEMP_Pin;
 8001c82:	2330      	movs	r3, #48	; 0x30
 8001c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c86:	2303      	movs	r3, #3
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8e:	f107 031c 	add.w	r3, r7, #28
 8001c92:	4619      	mov	r1, r3
 8001c94:	480c      	ldr	r0, [pc, #48]	; (8001cc8 <HAL_ADC_MspInit+0xe0>)
 8001c96:	f002 fe5b 	bl	8004950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_RETURN_Pin|SENSE_INFO_Pin;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca6:	f107 031c 	add.w	r3, r7, #28
 8001caa:	4619      	mov	r1, r3
 8001cac:	4807      	ldr	r0, [pc, #28]	; (8001ccc <HAL_ADC_MspInit+0xe4>)
 8001cae:	f002 fe4f 	bl	8004950 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	3730      	adds	r7, #48	; 0x30
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40012000 	.word	0x40012000
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40020000 	.word	0x40020000
 8001cc8:	40020800 	.word	0x40020800
 8001ccc:	40020400 	.word	0x40020400

08001cd0 <MX_CAN3_Init>:

CAN_HandleTypeDef hcan3;

/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001cd4:	4b33      	ldr	r3, [pc, #204]	; (8001da4 <MX_CAN3_Init+0xd4>)
 8001cd6:	4a34      	ldr	r2, [pc, #208]	; (8001da8 <MX_CAN3_Init+0xd8>)
 8001cd8:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001cda:	4b32      	ldr	r3, [pc, #200]	; (8001da4 <MX_CAN3_Init+0xd4>)
 8001cdc:	2206      	movs	r2, #6
 8001cde:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001ce0:	4b30      	ldr	r3, [pc, #192]	; (8001da4 <MX_CAN3_Init+0xd4>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001ce6:	4b2f      	ldr	r3, [pc, #188]	; (8001da4 <MX_CAN3_Init+0xd4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001cec:	4b2d      	ldr	r3, [pc, #180]	; (8001da4 <MX_CAN3_Init+0xd4>)
 8001cee:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001cf2:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001cf4:	4b2b      	ldr	r3, [pc, #172]	; (8001da4 <MX_CAN3_Init+0xd4>)
 8001cf6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cfa:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001cfc:	4b29      	ldr	r3, [pc, #164]	; (8001da4 <MX_CAN3_Init+0xd4>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001d02:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <MX_CAN3_Init+0xd4>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001d08:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <MX_CAN3_Init+0xd4>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001d0e:	4b25      	ldr	r3, [pc, #148]	; (8001da4 <MX_CAN3_Init+0xd4>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001d14:	4b23      	ldr	r3, [pc, #140]	; (8001da4 <MX_CAN3_Init+0xd4>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001d1a:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <MX_CAN3_Init+0xd4>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001d20:	4820      	ldr	r0, [pc, #128]	; (8001da4 <MX_CAN3_Init+0xd4>)
 8001d22:	f001 fe17 	bl	8003954 <HAL_CAN_Init>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001d2c:	f000 ff50 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */
	// Starte CAN Bus
	if((HAL_CAN_Start(&hcan3)) != HAL_OK)
 8001d30:	481c      	ldr	r0, [pc, #112]	; (8001da4 <MX_CAN3_Init+0xd4>)
 8001d32:	f001 fff7 	bl	8003d24 <HAL_CAN_Start>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_CAN3_Init+0x70>
	{
		// Fehler beim Starten des CAN-Busses
		Error_Handler();
 8001d3c:	f000 ff48 	bl	8002bd0 <Error_Handler>
	}

	// Aktiviere Interrupts fuer CAN Bus
	if((HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_FULL)) != HAL_OK)
 8001d40:	2104      	movs	r1, #4
 8001d42:	4818      	ldr	r0, [pc, #96]	; (8001da4 <MX_CAN3_Init+0xd4>)
 8001d44:	f002 fa14 	bl	8004170 <HAL_CAN_ActivateNotification>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_CAN3_Init+0x82>
	{
		// Fehler in der Initialisierung des CAN Interrupts
		Error_Handler();
 8001d4e:	f000 ff3f 	bl	8002bd0 <Error_Handler>
	}

	// Filter Bank initialisieren um Daten zu empfangen
	// Akzeptiere alle CAN-Pakete
	sFilterConfig.FilterBank = 0;
 8001d52:	4b16      	ldr	r3, [pc, #88]	; (8001dac <MX_CAN3_Init+0xdc>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001d58:	4b14      	ldr	r3, [pc, #80]	; (8001dac <MX_CAN3_Init+0xdc>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001d5e:	4b13      	ldr	r3, [pc, #76]	; (8001dac <MX_CAN3_Init+0xdc>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0111 << 5;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <MX_CAN3_Init+0xdc>)
 8001d66:	f242 2220 	movw	r2, #8736	; 0x2220
 8001d6a:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0;
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <MX_CAN3_Init+0xdc>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0111 << 5;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <MX_CAN3_Init+0xdc>)
 8001d74:	f242 2220 	movw	r2, #8736	; 0x2220
 8001d78:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0;
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <MX_CAN3_Init+0xdc>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = 0;
 8001d80:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <MX_CAN3_Init+0xdc>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <MX_CAN3_Init+0xdc>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	621a      	str	r2, [r3, #32]

	// Filter Bank schreiben
	if((HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 8001d8c:	4907      	ldr	r1, [pc, #28]	; (8001dac <MX_CAN3_Init+0xdc>)
 8001d8e:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_CAN3_Init+0xd4>)
 8001d90:	f001 fedc 	bl	8003b4c <HAL_CAN_ConfigFilter>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_CAN3_Init+0xce>
	{
		// Fehler beim konfigurieren der Filterbank fuer den CAN-Bus
		Error_Handler();
 8001d9a:	f000 ff19 	bl	8002bd0 <Error_Handler>
	}

  /* USER CODE END CAN3_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200000c8 	.word	0x200000c8
 8001da8:	40003400 	.word	0x40003400
 8001dac:	200000a0 	.word	0x200000a0

08001db0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN3)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a1b      	ldr	r2, [pc, #108]	; (8001e3c <HAL_CAN_MspInit+0x8c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d130      	bne.n	8001e34 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN3_MspInit 0 */

  /* USER CODE END CAN3_MspInit 0 */
    /* CAN3 clock enable */
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <HAL_CAN_MspInit+0x90>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	4a1a      	ldr	r2, [pc, #104]	; (8001e40 <HAL_CAN_MspInit+0x90>)
 8001dd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <HAL_CAN_MspInit+0x90>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <HAL_CAN_MspInit+0x90>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a14      	ldr	r2, [pc, #80]	; (8001e40 <HAL_CAN_MspInit+0x90>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_CAN_MspInit+0x90>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
    /**CAN3 GPIO Configuration
    PA8     ------> CAN3_RX
    PA15     ------> CAN3_TX
    */
    GPIO_InitStruct.Pin = ACAN_RX_Pin|ACAN_TX_Pin;
 8001e02:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001e14:	230b      	movs	r3, #11
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4809      	ldr	r0, [pc, #36]	; (8001e44 <HAL_CAN_MspInit+0x94>)
 8001e20:	f002 fd96 	bl	8004950 <HAL_GPIO_Init>

    /* CAN3 interrupt Init */
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2100      	movs	r1, #0
 8001e28:	2069      	movs	r0, #105	; 0x69
 8001e2a:	f002 fcc8 	bl	80047be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 8001e2e:	2069      	movs	r0, #105	; 0x69
 8001e30:	f002 fce1 	bl	80047f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001e34:	bf00      	nop
 8001e36:	3728      	adds	r7, #40	; 0x28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40003400 	.word	0x40003400
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40020000 	.word	0x40020000

08001e48 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08e      	sub	sp, #56	; 0x38
 8001e4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
 8001e5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e5e:	4bb6      	ldr	r3, [pc, #728]	; (8002138 <MX_GPIO_Init+0x2f0>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4ab5      	ldr	r2, [pc, #724]	; (8002138 <MX_GPIO_Init+0x2f0>)
 8001e64:	f043 0310 	orr.w	r3, r3, #16
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4bb3      	ldr	r3, [pc, #716]	; (8002138 <MX_GPIO_Init+0x2f0>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	623b      	str	r3, [r7, #32]
 8001e74:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e76:	4bb0      	ldr	r3, [pc, #704]	; (8002138 <MX_GPIO_Init+0x2f0>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	4aaf      	ldr	r2, [pc, #700]	; (8002138 <MX_GPIO_Init+0x2f0>)
 8001e7c:	f043 0304 	orr.w	r3, r3, #4
 8001e80:	6313      	str	r3, [r2, #48]	; 0x30
 8001e82:	4bad      	ldr	r3, [pc, #692]	; (8002138 <MX_GPIO_Init+0x2f0>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	61fb      	str	r3, [r7, #28]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e8e:	4baa      	ldr	r3, [pc, #680]	; (8002138 <MX_GPIO_Init+0x2f0>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4aa9      	ldr	r2, [pc, #676]	; (8002138 <MX_GPIO_Init+0x2f0>)
 8001e94:	f043 0320 	orr.w	r3, r3, #32
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4ba7      	ldr	r3, [pc, #668]	; (8002138 <MX_GPIO_Init+0x2f0>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ea6:	4ba4      	ldr	r3, [pc, #656]	; (8002138 <MX_GPIO_Init+0x2f0>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4aa3      	ldr	r2, [pc, #652]	; (8002138 <MX_GPIO_Init+0x2f0>)
 8001eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4ba1      	ldr	r3, [pc, #644]	; (8002138 <MX_GPIO_Init+0x2f0>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebe:	4b9e      	ldr	r3, [pc, #632]	; (8002138 <MX_GPIO_Init+0x2f0>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a9d      	ldr	r2, [pc, #628]	; (8002138 <MX_GPIO_Init+0x2f0>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b9b      	ldr	r3, [pc, #620]	; (8002138 <MX_GPIO_Init+0x2f0>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed6:	4b98      	ldr	r3, [pc, #608]	; (8002138 <MX_GPIO_Init+0x2f0>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a97      	ldr	r2, [pc, #604]	; (8002138 <MX_GPIO_Init+0x2f0>)
 8001edc:	f043 0302 	orr.w	r3, r3, #2
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b95      	ldr	r3, [pc, #596]	; (8002138 <MX_GPIO_Init+0x2f0>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001eee:	4b92      	ldr	r3, [pc, #584]	; (8002138 <MX_GPIO_Init+0x2f0>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a91      	ldr	r2, [pc, #580]	; (8002138 <MX_GPIO_Init+0x2f0>)
 8001ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b8f      	ldr	r3, [pc, #572]	; (8002138 <MX_GPIO_Init+0x2f0>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f06:	4b8c      	ldr	r3, [pc, #560]	; (8002138 <MX_GPIO_Init+0x2f0>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a8b      	ldr	r2, [pc, #556]	; (8002138 <MX_GPIO_Init+0x2f0>)
 8001f0c:	f043 0308 	orr.w	r3, r3, #8
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b89      	ldr	r3, [pc, #548]	; (8002138 <MX_GPIO_Init+0x2f0>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f248 0187 	movw	r1, #32903	; 0x8087
 8001f24:	4885      	ldr	r0, [pc, #532]	; (800213c <MX_GPIO_Init+0x2f4>)
 8001f26:	f002 fed7 	bl	8004cd8 <HAL_GPIO_WritePin>
                          |DIGITAL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_ON_Pin|WS2812_Pin, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f242 0108 	movw	r1, #8200	; 0x2008
 8001f30:	4883      	ldr	r0, [pc, #524]	; (8002140 <MX_GPIO_Init+0x2f8>)
 8001f32:	f002 fed1 	bl	8004cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 8001f36:	2200      	movs	r2, #0
 8001f38:	f24f 013c 	movw	r1, #61500	; 0xf03c
 8001f3c:	4881      	ldr	r0, [pc, #516]	; (8002144 <MX_GPIO_Init+0x2fc>)
 8001f3e:	f002 fecb 	bl	8004cd8 <HAL_GPIO_WritePin>
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 8001f42:	2200      	movs	r2, #0
 8001f44:	f647 0194 	movw	r1, #30868	; 0x7894
 8001f48:	487f      	ldr	r0, [pc, #508]	; (8002148 <MX_GPIO_Init+0x300>)
 8001f4a:	f002 fec5 	bl	8004cd8 <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f64e 2188 	movw	r1, #60040	; 0xea88
 8001f54:	487d      	ldr	r0, [pc, #500]	; (800214c <MX_GPIO_Init+0x304>)
 8001f56:	f002 febf 	bl	8004cd8 <HAL_GPIO_WritePin>
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f64e 610c 	movw	r1, #60940	; 0xee0c
 8001f60:	487b      	ldr	r0, [pc, #492]	; (8002150 <MX_GPIO_Init+0x308>)
 8001f62:	f002 feb9 	bl	8004cd8 <HAL_GPIO_WritePin>
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, GPIO_PIN_RESET);
 8001f66:	2200      	movs	r2, #0
 8001f68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f6c:	4879      	ldr	r0, [pc, #484]	; (8002154 <MX_GPIO_Init+0x30c>)
 8001f6e:	f002 feb3 	bl	8004cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 8001f72:	f248 0387 	movw	r3, #32903	; 0x8087
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
                          |DIGITAL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f88:	4619      	mov	r1, r3
 8001f8a:	486c      	ldr	r0, [pc, #432]	; (800213c <MX_GPIO_Init+0x2f4>)
 8001f8c:	f002 fce0 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ECO_Pin|BC_DOWN_IN_Pin|DURCHFLUSS_Pin|BUTTON2_Pin
 8001f90:	f647 7378 	movw	r3, #32632	; 0x7f78
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
                          |KICKDOWN_Pin|LEERLAUF_Pin|KUPPLUNG_NO_Pin|BREMSE_NC_Pin
                          |BREMSE_NO_Pin|SENSE_SDC_AKKU_Pin|SENSE_SDC_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f96:	2300      	movs	r3, #0
 8001f98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4865      	ldr	r0, [pc, #404]	; (800213c <MX_GPIO_Init+0x2f4>)
 8001fa6:	f002 fcd3 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 8001faa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8001fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	485f      	ldr	r0, [pc, #380]	; (8002140 <MX_GPIO_Init+0x2f8>)
 8001fc4:	f002 fcc4 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001fc8:	f64d 7347 	movw	r3, #57159	; 0xdf47
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|SD_SW_Pin|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4858      	ldr	r0, [pc, #352]	; (8002140 <MX_GPIO_Init+0x2f8>)
 8001fde:	f002 fcb7 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|ECON_Pin|RECUPERATION_Pin;
 8001fe2:	f640 0303 	movw	r3, #2051	; 0x803
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4853      	ldr	r0, [pc, #332]	; (8002144 <MX_GPIO_Init+0x2fc>)
 8001ff8:	f002 fcaa 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 8001ffc:	f24f 033c 	movw	r3, #61500	; 0xf03c
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002002:	2301      	movs	r3, #1
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	2300      	movs	r3, #0
 800200c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800200e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002012:	4619      	mov	r1, r3
 8002014:	484b      	ldr	r0, [pc, #300]	; (8002144 <MX_GPIO_Init+0x2fc>)
 8002016:	f002 fc9b 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PF10 */
  GPIO_InitStruct.Pin = SPI5_CS_Pin|SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin
 800201a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002020:	2303      	movs	r3, #3
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800202c:	4619      	mov	r1, r3
 800202e:	4845      	ldr	r0, [pc, #276]	; (8002144 <MX_GPIO_Init+0x2fc>)
 8002030:	f002 fc8e 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS2812_Pin;
 8002034:	2308      	movs	r3, #8
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002038:	2301      	movs	r3, #1
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002040:	2302      	movs	r3, #2
 8002042:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 8002044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002048:	4619      	mov	r1, r3
 800204a:	483d      	ldr	r0, [pc, #244]	; (8002140 <MX_GPIO_Init+0x2f8>)
 800204c:	f002 fc80 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|EMERGENCY_RUN_Pin|HW_WAKE_Pin|OUTA_Pin
 8002050:	f640 6307 	movw	r3, #3591	; 0xe07
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTB_Pin|BC_UP_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002056:	2300      	movs	r3, #0
 8002058:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002062:	4619      	mov	r1, r3
 8002064:	483b      	ldr	r0, [pc, #236]	; (8002154 <MX_GPIO_Init+0x30c>)
 8002066:	f002 fc73 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 800206a:	f647 0394 	movw	r3, #30868	; 0x7894
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002070:	2301      	movs	r3, #1
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002078:	2300      	movs	r3, #0
 800207a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002080:	4619      	mov	r1, r3
 8002082:	4831      	ldr	r0, [pc, #196]	; (8002148 <MX_GPIO_Init+0x300>)
 8002084:	f002 fc64 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DCDC_INSTRUCTION_Pin|DCDC_FAULT_Pin|ASR_IN1_Pin|GRA1_Pin
 8002088:	f241 13f3 	movw	r3, #4595	; 0x11f3
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GRA2_Pin|GRA3_Pin|GRA4_Pin|BC_RESET_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800208e:	2300      	movs	r3, #0
 8002090:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209a:	4619      	mov	r1, r3
 800209c:	482c      	ldr	r0, [pc, #176]	; (8002150 <MX_GPIO_Init+0x308>)
 800209e:	f002 fc57 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSE_SDC_BTB_Pin|ANLASSER_Pin;
 80020a2:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b4:	4619      	mov	r1, r3
 80020b6:	4824      	ldr	r0, [pc, #144]	; (8002148 <MX_GPIO_Init+0x300>)
 80020b8:	f002 fc4a 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KL15_Pin|BAMOCAR_IN2_Pin|BAMOCAR_IN1_Pin|ASR_IN2_Pin;
 80020bc:	f241 5310 	movw	r3, #5392	; 0x1510
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c2:	2300      	movs	r3, #0
 80020c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ce:	4619      	mov	r1, r3
 80020d0:	481e      	ldr	r0, [pc, #120]	; (800214c <MX_GPIO_Init+0x304>)
 80020d2:	f002 fc3d 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 80020d6:	f64e 2388 	movw	r3, #60040	; 0xea88
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020dc:	2301      	movs	r3, #1
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e4:	2300      	movs	r3, #0
 80020e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ec:	4619      	mov	r1, r3
 80020ee:	4817      	ldr	r0, [pc, #92]	; (800214c <MX_GPIO_Init+0x304>)
 80020f0:	f002 fc2e 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 80020f4:	f64e 630c 	movw	r3, #60940	; 0xee0c
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fa:	2301      	movs	r3, #1
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210a:	4619      	mov	r1, r3
 800210c:	4810      	ldr	r0, [pc, #64]	; (8002150 <MX_GPIO_Init+0x308>)
 800210e:	f002 fc1f 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 8002112:	2380      	movs	r3, #128	; 0x80
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002116:	2300      	movs	r3, #0
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 800211e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002122:	4619      	mov	r1, r3
 8002124:	4806      	ldr	r0, [pc, #24]	; (8002140 <MX_GPIO_Init+0x2f8>)
 8002126:	f002 fc13 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RUECKWARNUNG_Pin;
 800212a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002130:	2301      	movs	r3, #1
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	e00f      	b.n	8002158 <MX_GPIO_Init+0x310>
 8002138:	40023800 	.word	0x40023800
 800213c:	40021000 	.word	0x40021000
 8002140:	40020800 	.word	0x40020800
 8002144:	40021400 	.word	0x40021400
 8002148:	40020400 	.word	0x40020400
 800214c:	40020c00 	.word	0x40020c00
 8002150:	40021800 	.word	0x40021800
 8002154:	40020000 	.word	0x40020000
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RUECKWARNUNG_GPIO_Port, &GPIO_InitStruct);
 800215e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002162:	4619      	mov	r1, r3
 8002164:	480f      	ldr	r0, [pc, #60]	; (80021a4 <MX_GPIO_Init+0x35c>)
 8002166:	f002 fbf3 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_TX_Pin|CAN1_RX_Pin|SD_CMD_Pin;
 800216a:	2307      	movs	r3, #7
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800216e:	2303      	movs	r3, #3
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217a:	4619      	mov	r1, r3
 800217c:	480a      	ldr	r0, [pc, #40]	; (80021a8 <MX_GPIO_Init+0x360>)
 800217e:	f002 fbe7 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CAN2_TX_Pin|CAN2_RX_Pin|I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002182:	f44f 7358 	mov.w	r3, #864	; 0x360
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002188:	2303      	movs	r3, #3
 800218a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002194:	4619      	mov	r1, r3
 8002196:	4805      	ldr	r0, [pc, #20]	; (80021ac <MX_GPIO_Init+0x364>)
 8002198:	f002 fbda 	bl	8004950 <HAL_GPIO_Init>

}
 800219c:	bf00      	nop
 800219e:	3738      	adds	r7, #56	; 0x38
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40020000 	.word	0x40020000
 80021a8:	40020c00 	.word	0x40020c00
 80021ac:	40020400 	.word	0x40020400

080021b0 <__NVIC_SystemReset>:
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80021b4:	f3bf 8f4f 	dsb	sy
}
 80021b8:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <__NVIC_SystemReset+0x24>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80021c2:	4904      	ldr	r1, [pc, #16]	; (80021d4 <__NVIC_SystemReset+0x24>)
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <__NVIC_SystemReset+0x28>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80021ca:	f3bf 8f4f 	dsb	sy
}
 80021ce:	bf00      	nop
    __NOP();
 80021d0:	bf00      	nop
 80021d2:	e7fd      	b.n	80021d0 <__NVIC_SystemReset+0x20>
 80021d4:	e000ed00 	.word	0xe000ed00
 80021d8:	05fa0004 	.word	0x05fa0004

080021dc <ITM_SendChar>:
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80021e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80021e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d013      	beq.n	800221c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80021f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80021f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80021fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00b      	beq.n	800221c <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 8002204:	e000      	b.n	8002208 <ITM_SendChar+0x2c>
      __NOP();
 8002206:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002208:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f9      	beq.n	8002206 <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002212:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	701a      	strb	r2, [r3, #0]
  return (ch);
 800221c:	687b      	ldr	r3, [r7, #4]
}
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800222c:	b5b0      	push	{r4, r5, r7, lr}
 800222e:	b0c0      	sub	sp, #256	; 0x100
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t ADC_VAL[10] = {0};
 8002232:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	60da      	str	r2, [r3, #12]
 8002240:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002242:	f000 fe90 	bl	8002f66 <HAL_Init>

  /* USER CODE BEGIN Init */

	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[6] = {0}, InData[6] = {0}, AnalogData[8] = {0}, TempData[8] = {0};
 8002246:	2300      	movs	r3, #0
 8002248:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800224c:	2300      	movs	r3, #0
 800224e:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 8002252:	2300      	movs	r3, #0
 8002254:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002258:	2300      	movs	r3, #0
 800225a:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 800225e:	2300      	movs	r3, #0
 8002260:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002264:	2300      	movs	r3, #0
 8002266:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	uint8_t status, tmp[4], task = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	uint16_t count = 0, gas_adc = 0, gas_mean = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
 8002282:	2300      	movs	r3, #0
 8002284:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 8002288:	2300      	movs	r3, #0
 800228a:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
  	uint32_t lastcan = 0, lastsendcan = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002294:	2300      	movs	r3, #0
 8002296:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

  	// Erstelle Can-Nachrichten
    // Sendenachricht erstellen
  	CAN_TxHeaderTypeDef TxMessage = {0x123, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 800229a:	4b93      	ldr	r3, [pc, #588]	; (80024e8 <main+0x2bc>)
 800229c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80022a0:	461d      	mov	r5, r3
 80022a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022aa:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet digitale Ausgaenge erstellen
  	CAN_TxHeaderTypeDef TxOutput = {MOTOR_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 6, DISABLE};
 80022ae:	4b8f      	ldr	r3, [pc, #572]	; (80024ec <main+0x2c0>)
 80022b0:	f107 0478 	add.w	r4, r7, #120	; 0x78
 80022b4:	461d      	mov	r5, r3
 80022b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022be:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet digitale Eingaenge erstellen
  	CAN_TxHeaderTypeDef TxInput = {MOTOR_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 6, DISABLE};
 80022c2:	4b8b      	ldr	r3, [pc, #556]	; (80024f0 <main+0x2c4>)
 80022c4:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80022c8:	461d      	mov	r5, r3
 80022ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022d2:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet Motor1 erstellen
  	CAN_TxHeaderTypeDef TxMotor1 = {MOTOR_CAN_DREHZAHL, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 80022d6:	4b87      	ldr	r3, [pc, #540]	; (80024f4 <main+0x2c8>)
 80022d8:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80022dc:	461d      	mov	r5, r3
 80022de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022e6:	e884 0003 	stmia.w	r4, {r0, r1}
  	// Sendenachricht Motorsteuergeraet an Bamocar erstellen
  	CAN_TxHeaderTypeDef TxBamocar = {BAMOCAR_TX_ID, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 80022ea:	4b83      	ldr	r3, [pc, #524]	; (80024f8 <main+0x2cc>)
 80022ec:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80022f0:	461d      	mov	r5, r3
 80022f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022fa:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet analoge Eingaenge erstellen
  	CAN_TxHeaderTypeDef TxAnalog = {MOTOR_CAN_ANALOG_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 80022fe:	4b7f      	ldr	r3, [pc, #508]	; (80024fc <main+0x2d0>)
 8002300:	f107 0418 	add.w	r4, r7, #24
 8002304:	461d      	mov	r5, r3
 8002306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800230a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800230e:	e884 0003 	stmia.w	r4, {r0, r1}
  	// Sendenachricht Motorsteuergeraet Temperatur Eingaenge erstellen
  	CAN_TxHeaderTypeDef TxTemperatur = {MOTOR_CAN_TEMPERATUR, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8002312:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002316:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800231a:	4a79      	ldr	r2, [pc, #484]	; (8002500 <main+0x2d4>)
 800231c:	461c      	mov	r4, r3
 800231e:	4615      	mov	r5, r2
 8002320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002324:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002328:	e884 0003 	stmia.w	r4, {r0, r1}

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800232c:	f000 fb12 	bl	8002954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002330:	f7ff fd8a 	bl	8001e48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002334:	f000 fd58 	bl	8002de8 <MX_USART2_UART_Init>
  MX_CAN3_Init();
 8002338:	f7ff fcca 	bl	8001cd0 <MX_CAN3_Init>
  MX_ADC1_Init();
 800233c:	f7ff fc02 	bl	8001b44 <MX_ADC1_Init>
  MX_TIM6_Init();
 8002340:	f000 fcf6 	bl	8002d30 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // ITM HCLK
  ITM_SendChar('H');
 8002344:	2048      	movs	r0, #72	; 0x48
 8002346:	f7ff ff49 	bl	80021dc <ITM_SendChar>
  ITM_SendChar('a');
 800234a:	2061      	movs	r0, #97	; 0x61
 800234c:	f7ff ff46 	bl	80021dc <ITM_SendChar>
  ITM_SendChar('l');
 8002350:	206c      	movs	r0, #108	; 0x6c
 8002352:	f7ff ff43 	bl	80021dc <ITM_SendChar>
  ITM_SendChar('l');
 8002356:	206c      	movs	r0, #108	; 0x6c
 8002358:	f7ff ff40 	bl	80021dc <ITM_SendChar>
  ITM_SendChar('o');
 800235c:	206f      	movs	r0, #111	; 0x6f
 800235e:	f7ff ff3d 	bl	80021dc <ITM_SendChar>
  ITM_SendChar(' ');
 8002362:	2020      	movs	r0, #32
 8002364:	f7ff ff3a 	bl	80021dc <ITM_SendChar>
  	// Start Timer 6 Interrupt
  	HAL_TIM_Base_Start_IT(&htim6);
 8002368:	4866      	ldr	r0, [pc, #408]	; (8002504 <main+0x2d8>)
 800236a:	f003 fe4d 	bl	8006008 <HAL_TIM_Base_Start_IT>
  	HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer[uart_count], 1);
 800236e:	4b66      	ldr	r3, [pc, #408]	; (8002508 <main+0x2dc>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	4b65      	ldr	r3, [pc, #404]	; (800250c <main+0x2e0>)
 8002376:	4413      	add	r3, r2
 8002378:	2201      	movs	r2, #1
 800237a:	4619      	mov	r1, r3
 800237c:	4864      	ldr	r0, [pc, #400]	; (8002510 <main+0x2e4>)
 800237e:	f004 fa20 	bl	80067c2 <HAL_UART_Receive_IT>

  	// Schreibe Resetquelle auf die Konsole
#ifdef DEBUG
	printResetSource(readResetSource());
 8002382:	f7fe fc15 	bl	8000bb0 <readResetSource>
 8002386:	4603      	mov	r3, r0
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe fc63 	bl	8000c54 <printResetSource>

  	// Teste serielle Schnittstelle
  	#define TEST_STRING_UART	"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
  	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 800238e:	213a      	movs	r1, #58	; 0x3a
 8002390:	4860      	ldr	r0, [pc, #384]	; (8002514 <main+0x2e8>)
 8002392:	f7fe fa15 	bl	80007c0 <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 8002396:	f7fe fbe1 	bl	8000b5c <collectSystemInfo>
#endif

	// Leds Testen
  	testPCB_Leds();
 800239a:	f7ff fa95 	bl	80018c8 <testPCB_Leds>
	testCockpit_Leds();
 800239e:	f7ff fad1 	bl	8001944 <testCockpit_Leds>

  	// Testen der Versorgungsspannung am Shutdown-Circuit
  	testSDC();
 80023a2:	f7ff fb2f 	bl	8001a04 <testSDC>

  	// Alle Fehler Cockpit loeschen
  	//cockpit_default();
  	// Setze LED Green
  	leuchten_out.GreenLed = 1;
 80023a6:	4a5c      	ldr	r2, [pc, #368]	; (8002518 <main+0x2ec>)
 80023a8:	7853      	ldrb	r3, [r2, #1]
 80023aa:	f043 0310 	orr.w	r3, r3, #16
 80023ae:	7053      	strb	r3, [r2, #1]
  	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 80023b0:	4b59      	ldr	r3, [pc, #356]	; (8002518 <main+0x2ec>)
 80023b2:	785b      	ldrb	r3, [r3, #1]
 80023b4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023c0:	4856      	ldr	r0, [pc, #344]	; (800251c <main+0x2f0>)
 80023c2:	f002 fc89 	bl	8004cd8 <HAL_GPIO_WritePin>

  	// Lese alle Eingaenge
  	readall_inputs();
 80023c6:	f7ff f81d 	bl	8001404 <readall_inputs>

    // Sendenachricht 0x123 mit Dummy-Daten fuellen
  	for (uint8_t j = 0; j < 8; j++)
 80023ca:	2300      	movs	r3, #0
 80023cc:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80023d0:	e00f      	b.n	80023f2 <main+0x1c6>
  		TxData[j] = (j + 1);
 80023d2:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80023d6:	f897 20ef 	ldrb.w	r2, [r7, #239]	; 0xef
 80023da:	3201      	adds	r2, #1
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80023e2:	443b      	add	r3, r7
 80023e4:	f803 2c34 	strb.w	r2, [r3, #-52]
  	for (uint8_t j = 0; j < 8; j++)
 80023e8:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80023ec:	3301      	adds	r3, #1
 80023ee:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80023f2:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80023f6:	2b07      	cmp	r3, #7
 80023f8:	d9eb      	bls.n	80023d2 <main+0x1a6>

  	// Starte While-Schleife
#define MAINWHILE				"\nStarte While Schleife\n"
  	uartTransmit(MAINWHILE, sizeof(MAINWHILE));
 80023fa:	2118      	movs	r1, #24
 80023fc:	4848      	ldr	r0, [pc, #288]	; (8002520 <main+0x2f4>)
 80023fe:	f7fe f9df 	bl	80007c0 <uartTransmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (UART2_msg[0] == 1)
 8002402:	4b48      	ldr	r3, [pc, #288]	; (8002524 <main+0x2f8>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d107      	bne.n	800241a <main+0x1ee>
	  {
		  HAL_UART_Transmit(&huart2, (uint8_t*)"\nSystem Reset\r\n", 15, 100);
 800240a:	2364      	movs	r3, #100	; 0x64
 800240c:	220f      	movs	r2, #15
 800240e:	4946      	ldr	r1, [pc, #280]	; (8002528 <main+0x2fc>)
 8002410:	483f      	ldr	r0, [pc, #252]	; (8002510 <main+0x2e4>)
 8002412:	f004 f953 	bl	80066bc <HAL_UART_Transmit>
		  NVIC_SystemReset();
 8002416:	f7ff fecb 	bl	80021b0 <__NVIC_SystemReset>
	  }

    /* USER CODE BEGIN 3 */
	  	// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 800241a:	4b44      	ldr	r3, [pc, #272]	; (800252c <main+0x300>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b01      	cmp	r3, #1
 8002422:	d10a      	bne.n	800243a <main+0x20e>
		{
			count++;																	// Zaehler count hochzaehlen
 8002424:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8002428:	3301      	adds	r3, #1
 800242a:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
			millisekunden_flag_1 = 0;													// Setze Millisekunden-Flag zurueck
 800242e:	4b3f      	ldr	r3, [pc, #252]	; (800252c <main+0x300>)
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]

			// Setze Flag start, nur wenn millisekunden Flag gesetzt war
			task = 1;
 8002434:	2301      	movs	r3, #1
 8002436:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
		}

		// PWM Oelstandsensor Kombiinstrument ausgeben
		pwm_oelstand(count);
 800243a:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff faae 	bl	80019a0 <pwm_oelstand>

		// Task wird alle 20 Millisekunden ausgefuehrt
		if (((count % 20) == 0) && (task == 1))
 8002444:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 8002448:	4b39      	ldr	r3, [pc, #228]	; (8002530 <main+0x304>)
 800244a:	fba3 1302 	umull	r1, r3, r3, r2
 800244e:	0919      	lsrs	r1, r3, #4
 8002450:	460b      	mov	r3, r1
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	b29b      	uxth	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d112      	bne.n	8002486 <main+0x25a>
 8002460:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8002464:	2b01      	cmp	r3, #1
 8002466:	d10e      	bne.n	8002486 <main+0x25a>
		{
			// Sende Nachricht Motor1
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMotor1, motor1.output, (uint32_t *)CAN_TX_MAILBOX0);
 8002468:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800246c:	2301      	movs	r3, #1
 800246e:	4a31      	ldr	r2, [pc, #196]	; (8002534 <main+0x308>)
 8002470:	4831      	ldr	r0, [pc, #196]	; (8002538 <main+0x30c>)
 8002472:	f001 fc9b 	bl	8003dac <HAL_CAN_AddTxMessage>
 8002476:	4603      	mov	r3, r0
 8002478:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
			hal_error(status);
 800247c:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe fed5 	bl	8001230 <hal_error>
		}

		// Task wird alle 100 Millisekunden ausgefuehrt
		if (((count % 100) == 0) && (task == 1))
 8002486:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 800248a:	4a2c      	ldr	r2, [pc, #176]	; (800253c <main+0x310>)
 800248c:	fba2 1203 	umull	r1, r2, r2, r3
 8002490:	0952      	lsrs	r2, r2, #5
 8002492:	2164      	movs	r1, #100	; 0x64
 8002494:	fb01 f202 	mul.w	r2, r1, r2
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	b29b      	uxth	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d16e      	bne.n	800257e <main+0x352>
 80024a0:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d16a      	bne.n	800257e <main+0x352>
		{
			// alle Inputs einlesen
			readall_inputs();
 80024a8:	f7fe ffac 	bl	8001404 <readall_inputs>

			// Anlasser abfragen
			readAnlasser();
 80024ac:	f7ff f9d8 	bl	8001860 <readAnlasser>

			// Bremse pruefen
			//readBrake();

			// Gaspedal pruefen
			gas_adc = readTrottle();
 80024b0:	f7ff fad4 	bl	8001a5c <readTrottle>
 80024b4:	4603      	mov	r3, r0
 80024b6:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec

			// Abfrage ob Mittelwertbildung
			if (gas_adc > 0)															// Wenn Gaspedal Plausible dann Mittelwertbildung
 80024ba:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d040      	beq.n	8002544 <main+0x318>
			{
				// Mittelwert bilden (https://nestedsoftware.com/2018/03/20/calculating-a-moving-average-on-streaming-data-5a7k.22879.html)
				// Mittelwertbildung aus 10 Werten (Weniger die 10 verkleineren, Mehr die 10 vergroeßern)
				gas_mean = (gas_mean + ((gas_adc - gas_mean)/10));
 80024c2:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	; 0xec
 80024c6:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	4a1c      	ldr	r2, [pc, #112]	; (8002540 <main+0x314>)
 80024ce:	fb82 1203 	smull	r1, r2, r2, r3
 80024d2:	1092      	asrs	r2, r2, #2
 80024d4:	17db      	asrs	r3, r3, #31
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	b29a      	uxth	r2, r3
 80024da:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 80024de:	4413      	add	r3, r2
 80024e0:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
 80024e4:	e031      	b.n	800254a <main+0x31e>
 80024e6:	bf00      	nop
 80024e8:	080082d8 	.word	0x080082d8
 80024ec:	080082f0 	.word	0x080082f0
 80024f0:	08008308 	.word	0x08008308
 80024f4:	08008320 	.word	0x08008320
 80024f8:	08008338 	.word	0x08008338
 80024fc:	08008350 	.word	0x08008350
 8002500:	08008368 	.word	0x08008368
 8002504:	2000013c 	.word	0x2000013c
 8002508:	20000124 	.word	0x20000124
 800250c:	2000010c 	.word	0x2000010c
 8002510:	20000188 	.word	0x20000188
 8002514:	08008238 	.word	0x08008238
 8002518:	20000050 	.word	0x20000050
 800251c:	40020400 	.word	0x40020400
 8002520:	08008274 	.word	0x08008274
 8002524:	20000118 	.word	0x20000118
 8002528:	0800828c 	.word	0x0800828c
 800252c:	20000130 	.word	0x20000130
 8002530:	cccccccd 	.word	0xcccccccd
 8002534:	20000134 	.word	0x20000134
 8002538:	200000c8 	.word	0x200000c8
 800253c:	51eb851f 	.word	0x51eb851f
 8002540:	66666667 	.word	0x66666667
			}
			else																		// Wenn Gaspedal unplausible oder Kupplung getreten
			{
				gas_mean = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
			}

			// Daten in Bamocarformat umwandeln
			tmp[0] = 0x90;
 800254a:	2390      	movs	r3, #144	; 0x90
 800254c:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
			tmp[1] = (gas_mean);
 8002550:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8002554:	b2db      	uxtb	r3, r3
 8002556:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			tmp[2] = ((gas_mean) >> 8);
 800255a:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	b29b      	uxth	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa

			// Drehmoment an Bamocar senden
			status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
 8002568:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800256c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002570:	2301      	movs	r3, #1
 8002572:	48c8      	ldr	r0, [pc, #800]	; (8002894 <main+0x668>)
 8002574:	f001 fc1a 	bl	8003dac <HAL_CAN_AddTxMessage>
 8002578:	4603      	mov	r3, r0
 800257a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
			//hal_error(status);
		}

		// Task wird alle 200 Millisekunden ausgefuehrt
		if (((count % 200) == 0) && (task == 1))
 800257e:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8002582:	4ac5      	ldr	r2, [pc, #788]	; (8002898 <main+0x66c>)
 8002584:	fba2 1203 	umull	r1, r2, r2, r3
 8002588:	0992      	lsrs	r2, r2, #6
 800258a:	21c8      	movs	r1, #200	; 0xc8
 800258c:	fb01 f202 	mul.w	r2, r1, r2
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	b29b      	uxth	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	f040 812e 	bne.w	80027f6 <main+0x5ca>
 800259a:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800259e:	2b01      	cmp	r3, #1
 80025a0:	f040 8129 	bne.w	80027f6 <main+0x5ca>
		{
			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 80025a4:	4bbd      	ldr	r3, [pc, #756]	; (800289c <main+0x670>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
			OutData[1] = highcurrent_out.high_out;
 80025ac:	4bbc      	ldr	r3, [pc, #752]	; (80028a0 <main+0x674>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
			OutData[2] = (leuchten_out.ledoutput >> 8);
 80025b4:	4bbb      	ldr	r3, [pc, #748]	; (80028a4 <main+0x678>)
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	0a1b      	lsrs	r3, r3, #8
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
			OutData[3] = leuchten_out.ledoutput;
 80025c2:	4bb8      	ldr	r3, [pc, #736]	; (80028a4 <main+0x678>)
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
			OutData[4] = komfort_out.komfortoutput;
 80025cc:	4bb6      	ldr	r3, [pc, #728]	; (80028a8 <main+0x67c>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
			OutData[5] ++;
 80025d4:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 80025d8:	3301      	adds	r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9

			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX2);
 80025e0:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80025e4:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80025e8:	2304      	movs	r3, #4
 80025ea:	48aa      	ldr	r0, [pc, #680]	; (8002894 <main+0x668>)
 80025ec:	f001 fbde 	bl	8003dac <HAL_CAN_AddTxMessage>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
			//hal_error(status);

			// ADC-Werte einlesen Bremse und Temperaturen
			ADC_VAL[0] = ADC_Bremsdruck();
 80025f6:	f7fe fc0f 	bl	8000e18 <ADC_Bremsdruck>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
			ADC_VAL[1] = ADC_Bremsdrucktemperatur();
 8002600:	f7fe fda4 	bl	800114c <ADC_Bremsdrucktemperatur>
 8002604:	4603      	mov	r3, r0
 8002606:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
			ADC_VAL[2] = ADC_STMTemperatur();
 800260a:	f7fe fdd7 	bl	80011bc <ADC_STMTemperatur>
 800260e:	4603      	mov	r3, r0
 8002610:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
			ADC_VAL[3] = ADC_PCBTemperatur();
 8002614:	f7fe fcf2 	bl	8000ffc <ADC_PCBTemperatur>
 8002618:	4603      	mov	r3, r0
 800261a:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] ++;
 800261e:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8002622:	3301      	adds	r3, #1
 8002624:	b2db      	uxtb	r3, r3
 8002626:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
			InData[1] = (system_in.systeminput >> 8);
 800262a:	4ba0      	ldr	r3, [pc, #640]	; (80028ac <main+0x680>)
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	0a1b      	lsrs	r3, r3, #8
 8002630:	b29b      	uxth	r3, r3
 8002632:	b2db      	uxtb	r3, r3
 8002634:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
			InData[2] = system_in.systeminput;
 8002638:	4b9c      	ldr	r3, [pc, #624]	; (80028ac <main+0x680>)
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
			InData[3] = sdc_in.sdcinput;
 8002642:	4b9b      	ldr	r3, [pc, #620]	; (80028b0 <main+0x684>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
			InData[4] = (komfort_in.komfortinput >> 8);
 800264a:	4b9a      	ldr	r3, [pc, #616]	; (80028b4 <main+0x688>)
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	0a1b      	lsrs	r3, r3, #8
 8002650:	b29b      	uxth	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
			InData[5] = komfort_in.komfortinput;
 8002658:	4b96      	ldr	r3, [pc, #600]	; (80028b4 <main+0x688>)
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1

			HAL_Delay(5);
 8002662:	2005      	movs	r0, #5
 8002664:	f000 fcdc 	bl	8003020 <HAL_Delay>
			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX1);
 8002668:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800266c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002670:	2302      	movs	r3, #2
 8002672:	4888      	ldr	r0, [pc, #544]	; (8002894 <main+0x668>)
 8002674:	f001 fb9a 	bl	8003dac <HAL_CAN_AddTxMessage>
 8002678:	4603      	mov	r3, r0
 800267a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
			//hal_error(status);

			// ADC-Werte einlesen Navi, Klima, KL15
			ADC_VAL[4] = ADC_KL15();
 800267e:	f7fe fc15 	bl	8000eac <ADC_KL15>
 8002682:	4603      	mov	r3, r0
 8002684:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
			ADC_VAL[5] = ADC_Klimaflap();
 8002688:	f7fe fc80 	bl	8000f8c <ADC_Klimaflap>
 800268c:	4603      	mov	r3, r0
 800268e:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
			ADC_VAL[6] = ADC_Info();
 8002692:	f7fe fd23 	bl	80010dc <ADC_Info>
 8002696:	4603      	mov	r3, r0
 8002698:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
			ADC_VAL[7] = ADC_Return();
 800269c:	f7fe fce6 	bl	800106c <ADC_Return>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2

			// ADC-Werte umwandeln
			AnalogData[0] = ADC_VAL[4];
 80026a6:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
			AnalogData[1] = (ADC_VAL[4] >> 8) | (ADC_VAL[0] << 4);
 80026b0:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	b25a      	sxtb	r2, r3
 80026ba:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	b25b      	sxtb	r3, r3
 80026c2:	4313      	orrs	r3, r2
 80026c4:	b25b      	sxtb	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
			AnalogData[2] = (ADC_VAL[0] >> 4);
 80026cc:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80026d0:	091b      	lsrs	r3, r3, #4
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
			AnalogData[3] = ADC_VAL[6];
 80026da:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			AnalogData[4] = (ADC_VAL[6] >> 8) | (ADC_VAL[7] << 4);
 80026e4:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 80026e8:	0a1b      	lsrs	r3, r3, #8
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	b25a      	sxtb	r2, r3
 80026ee:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	b25b      	sxtb	r3, r3
 80026f6:	4313      	orrs	r3, r2
 80026f8:	b25b      	sxtb	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
			AnalogData[5] = (ADC_VAL[7] >> 4);
 8002700:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	b29b      	uxth	r3, r3
 8002708:	b2db      	uxtb	r3, r3
 800270a:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
			AnalogData[6] = ADC_VAL[5];
 800270e:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8002712:	b2db      	uxtb	r3, r3
 8002714:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
			AnalogData[7] = (ADC_VAL[5] >> 8);
 8002718:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	b29b      	uxth	r3, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb

			// Bamocar Fehler auslesen
			tmp[0] = 0x3D;
 8002726:	233d      	movs	r3, #61	; 0x3d
 8002728:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
			tmp[1] = 0x8F;
 800272c:	238f      	movs	r3, #143	; 0x8f
 800272e:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			tmp[2] = 0x00;
 8002732:	2300      	movs	r3, #0
 8002734:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa

			// Befehl Fehler auslesen an Bamocar senden
			status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
 8002738:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800273c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002740:	2301      	movs	r3, #1
 8002742:	4854      	ldr	r0, [pc, #336]	; (8002894 <main+0x668>)
 8002744:	f001 fb32 	bl	8003dac <HAL_CAN_AddTxMessage>
 8002748:	4603      	mov	r3, r0
 800274a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
			//hal_error(status);

			// ADC-Werte einlesen Kuehlwassertemperatur
			ADC_VAL[8] = ADC_Kuhlwassertemperatur();
 800274e:	f7fe fbe5 	bl	8000f1c <ADC_Kuhlwassertemperatur>
 8002752:	4603      	mov	r3, r0
 8002754:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4

			// ADC-Werte umwandeln
			TempData[0] = ADC_VAL[2];
 8002758:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800275c:	b2db      	uxtb	r3, r3
 800275e:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
			TempData[1] = (ADC_VAL[2] >> 8) | (ADC_VAL[3] << 4);
 8002762:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8002766:	0a1b      	lsrs	r3, r3, #8
 8002768:	b29b      	uxth	r3, r3
 800276a:	b25a      	sxtb	r2, r3
 800276c:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	b25b      	sxtb	r3, r3
 8002774:	4313      	orrs	r3, r2
 8002776:	b25b      	sxtb	r3, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
			TempData[2] = (ADC_VAL[3] >> 4);
 800277e:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8002782:	091b      	lsrs	r3, r3, #4
 8002784:	b29b      	uxth	r3, r3
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
			TempData[3] = ADC_VAL[8];
 800278c:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002790:	b2db      	uxtb	r3, r3
 8002792:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			TempData[4] = (ADC_VAL[8] >> 8) | (ADC_VAL[1] << 4);
 8002796:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	b29b      	uxth	r3, r3
 800279e:	b25a      	sxtb	r2, r3
 80027a0:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	b25b      	sxtb	r3, r3
 80027a8:	4313      	orrs	r3, r2
 80027aa:	b25b      	sxtb	r3, r3
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			TempData[5] = (ADC_VAL[1] >> 4);
 80027b2:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80027b6:	091b      	lsrs	r3, r3, #4
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

			HAL_Delay(5);
 80027c0:	2005      	movs	r0, #5
 80027c2:	f000 fc2d 	bl	8003020 <HAL_Delay>

			// Befehl Fehler auslesen an Bamocar senden
			status = HAL_CAN_AddTxMessage(&hcan3, &TxTemperatur, TempData, (uint32_t *)CAN_TX_MAILBOX0);
 80027c6:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80027ca:	4639      	mov	r1, r7
 80027cc:	2301      	movs	r3, #1
 80027ce:	4831      	ldr	r0, [pc, #196]	; (8002894 <main+0x668>)
 80027d0:	f001 faec 	bl	8003dac <HAL_CAN_AddTxMessage>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
			status = HAL_CAN_AddTxMessage(&hcan3, &TxAnalog, AnalogData, (uint32_t *)CAN_TX_MAILBOX1);
 80027da:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80027de:	f107 0118 	add.w	r1, r7, #24
 80027e2:	2302      	movs	r3, #2
 80027e4:	482b      	ldr	r0, [pc, #172]	; (8002894 <main+0x668>)
 80027e6:	f001 fae1 	bl	8003dac <HAL_CAN_AddTxMessage>
 80027ea:	4603      	mov	r3, r0
 80027ec:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb

			// Variable count auf 0 zuruecksetzen
			count = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
		}

		// Zuruecksetzen Flag start
		task = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff


	  	// Task wird alle 5 Millisekunden ausgefuehrt
	  	if (millis() - lastcan >= 5)
 80027fc:	f7ff f85c 	bl	80018b8 <millis>
 8002800:	4602      	mov	r2, r0
 8002802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b04      	cmp	r3, #4
 800280a:	d978      	bls.n	80028fe <main+0x6d2>
		{
	  		HAL_CAN_GetRxMessage(&hcan3, CAN_RX_FIFO0, &RxMessage, TxData);
 800280c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002810:	4a29      	ldr	r2, [pc, #164]	; (80028b8 <main+0x68c>)
 8002812:	2100      	movs	r1, #0
 8002814:	481f      	ldr	r0, [pc, #124]	; (8002894 <main+0x668>)
 8002816:	f001 fb99 	bl	8003f4c <HAL_CAN_GetRxMessage>

			// Wenn Nachricht ueber den CAN-Bus empfangen wurden
			if (can_change == 1)
 800281a:	4b28      	ldr	r3, [pc, #160]	; (80028bc <main+0x690>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b01      	cmp	r3, #1
 8002822:	d16c      	bne.n	80028fe <main+0x6d2>
			{
				// Nachricht ID ueber UART ausgeben
				uartTransmitNumber(RxMessage.StdId, 16);
 8002824:	4b24      	ldr	r3, [pc, #144]	; (80028b8 <main+0x68c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2110      	movs	r1, #16
 800282a:	4618      	mov	r0, r3
 800282c:	f7fd ffdc 	bl	80007e8 <uartTransmitNumber>
				uartTransmit("\t", 1);
 8002830:	2101      	movs	r1, #1
 8002832:	4823      	ldr	r0, [pc, #140]	; (80028c0 <main+0x694>)
 8002834:	f7fd ffc4 	bl	80007c0 <uartTransmit>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 8002838:	2300      	movs	r3, #0
 800283a:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
 800283e:	e00c      	b.n	800285a <main+0x62e>
				{
					uartTransmitNumber(RxData[i], 16);
 8002840:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8002844:	4a1f      	ldr	r2, [pc, #124]	; (80028c4 <main+0x698>)
 8002846:	5cd3      	ldrb	r3, [r2, r3]
 8002848:	2110      	movs	r1, #16
 800284a:	4618      	mov	r0, r3
 800284c:	f7fd ffcc 	bl	80007e8 <uartTransmitNumber>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 8002850:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8002854:	3301      	adds	r3, #1
 8002856:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
 800285a:	f897 20ee 	ldrb.w	r2, [r7, #238]	; 0xee
 800285e:	4b16      	ldr	r3, [pc, #88]	; (80028b8 <main+0x68c>)
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	429a      	cmp	r2, r3
 8002864:	d3ec      	bcc.n	8002840 <main+0x614>
				}
				uartTransmit("\n", 1);
 8002866:	2101      	movs	r1, #1
 8002868:	4817      	ldr	r0, [pc, #92]	; (80028c8 <main+0x69c>)
 800286a:	f7fd ffa9 	bl	80007c0 <uartTransmit>

				// Sortieren der IDs nach Geraeten
				switch (RxMessage.StdId)
 800286e:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <main+0x68c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f240 1211 	movw	r2, #273	; 0x111
 8002876:	4293      	cmp	r3, r2
 8002878:	d028      	beq.n	80028cc <main+0x6a0>
 800287a:	f240 1281 	movw	r2, #385	; 0x181
 800287e:	4293      	cmp	r3, r2
 8002880:	d129      	bne.n	80028d6 <main+0x6aa>
				{
					case BAMOCAR_RX_ID:
						BAMOCAN_ID(&RxData[0], RxMessage.DLC);
 8002882:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <main+0x68c>)
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	4619      	mov	r1, r3
 800288a:	480e      	ldr	r0, [pc, #56]	; (80028c4 <main+0x698>)
 800288c:	f7fd fe5e 	bl	800054c <BAMOCAN_ID>
						break;
 8002890:	e026      	b.n	80028e0 <main+0x6b4>
 8002892:	bf00      	nop
 8002894:	200000c8 	.word	0x200000c8
 8002898:	51eb851f 	.word	0x51eb851f
 800289c:	20000048 	.word	0x20000048
 80028a0:	2000004c 	.word	0x2000004c
 80028a4:	20000050 	.word	0x20000050
 80028a8:	20000054 	.word	0x20000054
 80028ac:	2000003c 	.word	0x2000003c
 80028b0:	20000040 	.word	0x20000040
 80028b4:	20000044 	.word	0x20000044
 80028b8:	200000f0 	.word	0x200000f0
 80028bc:	20000131 	.word	0x20000131
 80028c0:	0800829c 	.word	0x0800829c
 80028c4:	20000128 	.word	0x20000128
 80028c8:	080082a0 	.word	0x080082a0
					case 0x111:
						uartTransmit("CAN-ID Computer config\n", 23);
 80028cc:	2117      	movs	r1, #23
 80028ce:	481b      	ldr	r0, [pc, #108]	; (800293c <main+0x710>)
 80028d0:	f7fd ff76 	bl	80007c0 <uartTransmit>
						break;
 80028d4:	e004      	b.n	80028e0 <main+0x6b4>
					default:
						uartTransmit("CAN-ID nicht verfuegbar\n", 24);
 80028d6:	2118      	movs	r1, #24
 80028d8:	4819      	ldr	r0, [pc, #100]	; (8002940 <main+0x714>)
 80028da:	f7fd ff71 	bl	80007c0 <uartTransmit>
						break;
 80028de:	bf00      	nop
				}

				// Drehzahl ausgeben
				TxData[2] = motor1.output[2];
 80028e0:	4b18      	ldr	r3, [pc, #96]	; (8002944 <main+0x718>)
 80028e2:	789b      	ldrb	r3, [r3, #2]
 80028e4:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
				TxData[3] = motor1.output[3];
 80028e8:	4b16      	ldr	r3, [pc, #88]	; (8002944 <main+0x718>)
 80028ea:	78db      	ldrb	r3, [r3, #3]
 80028ec:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				lastcan = millis();
 80028f0:	f7fe ffe2 	bl	80018b8 <millis>
 80028f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4

				can_change = 0;
 80028f8:	4b13      	ldr	r3, [pc, #76]	; (8002948 <main+0x71c>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]
			}
		}

#ifdef DEBUG
		// Sende CAN Nachricht auf CAN-Bus / Teste CAN-BUS
		if (millis() - lastsendcan >= 1000)
 80028fe:	f7fe ffdb 	bl	80018b8 <millis>
 8002902:	4602      	mov	r2, r0
 8002904:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800290e:	f4ff ad78 	bcc.w	8002402 <main+0x1d6>
		{
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 8002912:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8002916:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800291a:	2301      	movs	r3, #1
 800291c:	480b      	ldr	r0, [pc, #44]	; (800294c <main+0x720>)
 800291e:	f001 fa45 	bl	8003dac <HAL_CAN_AddTxMessage>
 8002922:	4603      	mov	r3, r0
 8002924:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
			//hal_error(status);
			lastsendcan = millis();
 8002928:	f7fe ffc6 	bl	80018b8 <millis>
 800292c:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

			HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8002930:	2180      	movs	r1, #128	; 0x80
 8002932:	4807      	ldr	r0, [pc, #28]	; (8002950 <main+0x724>)
 8002934:	f002 f9e9 	bl	8004d0a <HAL_GPIO_TogglePin>
	  if (UART2_msg[0] == 1)
 8002938:	e563      	b.n	8002402 <main+0x1d6>
 800293a:	bf00      	nop
 800293c:	080082a4 	.word	0x080082a4
 8002940:	080082bc 	.word	0x080082bc
 8002944:	20000134 	.word	0x20000134
 8002948:	20000131 	.word	0x20000131
 800294c:	200000c8 	.word	0x200000c8
 8002950:	40020400 	.word	0x40020400

08002954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b094      	sub	sp, #80	; 0x50
 8002958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800295a:	f107 031c 	add.w	r3, r7, #28
 800295e:	2234      	movs	r2, #52	; 0x34
 8002960:	2100      	movs	r1, #0
 8002962:	4618      	mov	r0, r3
 8002964:	f005 f992 	bl	8007c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002968:	f107 0308 	add.w	r3, r7, #8
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
 8002976:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002978:	4b2c      	ldr	r3, [pc, #176]	; (8002a2c <SystemClock_Config+0xd8>)
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	4a2b      	ldr	r2, [pc, #172]	; (8002a2c <SystemClock_Config+0xd8>)
 800297e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002982:	6413      	str	r3, [r2, #64]	; 0x40
 8002984:	4b29      	ldr	r3, [pc, #164]	; (8002a2c <SystemClock_Config+0xd8>)
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298c:	607b      	str	r3, [r7, #4]
 800298e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002990:	4b27      	ldr	r3, [pc, #156]	; (8002a30 <SystemClock_Config+0xdc>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a26      	ldr	r2, [pc, #152]	; (8002a30 <SystemClock_Config+0xdc>)
 8002996:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	4b24      	ldr	r3, [pc, #144]	; (8002a30 <SystemClock_Config+0xdc>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029a4:	603b      	str	r3, [r7, #0]
 80029a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029a8:	2301      	movs	r3, #1
 80029aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029b2:	2302      	movs	r3, #2
 80029b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80029bc:	2319      	movs	r3, #25
 80029be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 80029c0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80029c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029c6:	2302      	movs	r3, #2
 80029c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80029ca:	2302      	movs	r3, #2
 80029cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80029ce:	2302      	movs	r3, #2
 80029d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029d2:	f107 031c 	add.w	r3, r7, #28
 80029d6:	4618      	mov	r0, r3
 80029d8:	f002 fa02 	bl	8004de0 <HAL_RCC_OscConfig>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80029e2:	f000 f8f5 	bl	8002bd0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80029e6:	f002 f9ab 	bl	8004d40 <HAL_PWREx_EnableOverDrive>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80029f0:	f000 f8ee 	bl	8002bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029f4:	230f      	movs	r3, #15
 80029f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029f8:	2302      	movs	r3, #2
 80029fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029fc:	2300      	movs	r3, #0
 80029fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a0a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002a0c:	f107 0308 	add.w	r3, r7, #8
 8002a10:	2107      	movs	r1, #7
 8002a12:	4618      	mov	r0, r3
 8002a14:	f002 fc92 	bl	800533c <HAL_RCC_ClockConfig>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002a1e:	f000 f8d7 	bl	8002bd0 <Error_Handler>
  }
}
 8002a22:	bf00      	nop
 8002a24:	3750      	adds	r7, #80	; 0x50
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40007000 	.word	0x40007000

08002a34 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Interrupts
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &UART2_rxBuffer[uart_count], 1, 100);
 8002a3c:	4b3c      	ldr	r3, [pc, #240]	; (8002b30 <HAL_UART_RxCpltCallback+0xfc>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	461a      	mov	r2, r3
 8002a42:	4b3c      	ldr	r3, [pc, #240]	; (8002b34 <HAL_UART_RxCpltCallback+0x100>)
 8002a44:	18d1      	adds	r1, r2, r3
 8002a46:	2364      	movs	r3, #100	; 0x64
 8002a48:	2201      	movs	r2, #1
 8002a4a:	483b      	ldr	r0, [pc, #236]	; (8002b38 <HAL_UART_RxCpltCallback+0x104>)
 8002a4c:	f003 fe36 	bl	80066bc <HAL_UART_Transmit>

	if (UART2_rxBuffer[uart_count] == 0x7F)
 8002a50:	4b37      	ldr	r3, [pc, #220]	; (8002b30 <HAL_UART_RxCpltCallback+0xfc>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	461a      	mov	r2, r3
 8002a56:	4b37      	ldr	r3, [pc, #220]	; (8002b34 <HAL_UART_RxCpltCallback+0x100>)
 8002a58:	5c9b      	ldrb	r3, [r3, r2]
 8002a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8002a5c:	d106      	bne.n	8002a6c <HAL_UART_RxCpltCallback+0x38>
	{
		uart_count--;
 8002a5e:	4b34      	ldr	r3, [pc, #208]	; (8002b30 <HAL_UART_RxCpltCallback+0xfc>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	4b32      	ldr	r3, [pc, #200]	; (8002b30 <HAL_UART_RxCpltCallback+0xfc>)
 8002a68:	701a      	strb	r2, [r3, #0]
 8002a6a:	e005      	b.n	8002a78 <HAL_UART_RxCpltCallback+0x44>
	}
	else
	{
		uart_count++;
 8002a6c:	4b30      	ldr	r3, [pc, #192]	; (8002b30 <HAL_UART_RxCpltCallback+0xfc>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	3301      	adds	r3, #1
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	4b2e      	ldr	r3, [pc, #184]	; (8002b30 <HAL_UART_RxCpltCallback+0xfc>)
 8002a76:	701a      	strb	r2, [r3, #0]
	}

	if (UART2_rxBuffer[uart_count-1] == '\r')
 8002a78:	4b2d      	ldr	r3, [pc, #180]	; (8002b30 <HAL_UART_RxCpltCallback+0xfc>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	4a2d      	ldr	r2, [pc, #180]	; (8002b34 <HAL_UART_RxCpltCallback+0x100>)
 8002a80:	5cd3      	ldrb	r3, [r2, r3]
 8002a82:	2b0d      	cmp	r3, #13
 8002a84:	d12a      	bne.n	8002adc <HAL_UART_RxCpltCallback+0xa8>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)"\nEingabe OK\r\n", 13, 100);
 8002a86:	2364      	movs	r3, #100	; 0x64
 8002a88:	220d      	movs	r2, #13
 8002a8a:	492c      	ldr	r1, [pc, #176]	; (8002b3c <HAL_UART_RxCpltCallback+0x108>)
 8002a8c:	482a      	ldr	r0, [pc, #168]	; (8002b38 <HAL_UART_RxCpltCallback+0x104>)
 8002a8e:	f003 fe15 	bl	80066bc <HAL_UART_Transmit>
		if (UART2_rxBuffer[0] == 'R' && UART2_rxBuffer[1] == 'E' && UART2_rxBuffer[2] == 'S')
 8002a92:	4b28      	ldr	r3, [pc, #160]	; (8002b34 <HAL_UART_RxCpltCallback+0x100>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b52      	cmp	r3, #82	; 0x52
 8002a98:	d11d      	bne.n	8002ad6 <HAL_UART_RxCpltCallback+0xa2>
 8002a9a:	4b26      	ldr	r3, [pc, #152]	; (8002b34 <HAL_UART_RxCpltCallback+0x100>)
 8002a9c:	785b      	ldrb	r3, [r3, #1]
 8002a9e:	2b45      	cmp	r3, #69	; 0x45
 8002aa0:	d119      	bne.n	8002ad6 <HAL_UART_RxCpltCallback+0xa2>
 8002aa2:	4b24      	ldr	r3, [pc, #144]	; (8002b34 <HAL_UART_RxCpltCallback+0x100>)
 8002aa4:	789b      	ldrb	r3, [r3, #2]
 8002aa6:	2b53      	cmp	r3, #83	; 0x53
 8002aa8:	d115      	bne.n	8002ad6 <HAL_UART_RxCpltCallback+0xa2>
		{
			uint8_t c[10] = {204, 205, 205, 205, 205, 205, 205, 205, 205, 185};
 8002aaa:	4a25      	ldr	r2, [pc, #148]	; (8002b40 <HAL_UART_RxCpltCallback+0x10c>)
 8002aac:	f107 030c 	add.w	r3, r7, #12
 8002ab0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ab2:	c303      	stmia	r3!, {r0, r1}
 8002ab4:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)"\a", 1, 100);
 8002ab6:	2364      	movs	r3, #100	; 0x64
 8002ab8:	2201      	movs	r2, #1
 8002aba:	4922      	ldr	r1, [pc, #136]	; (8002b44 <HAL_UART_RxCpltCallback+0x110>)
 8002abc:	481e      	ldr	r0, [pc, #120]	; (8002b38 <HAL_UART_RxCpltCallback+0x104>)
 8002abe:	f003 fdfd 	bl	80066bc <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, c, 10, 100);
 8002ac2:	f107 010c 	add.w	r1, r7, #12
 8002ac6:	2364      	movs	r3, #100	; 0x64
 8002ac8:	220a      	movs	r2, #10
 8002aca:	481b      	ldr	r0, [pc, #108]	; (8002b38 <HAL_UART_RxCpltCallback+0x104>)
 8002acc:	f003 fdf6 	bl	80066bc <HAL_UART_Transmit>
			UART2_msg[0] = 1;
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <HAL_UART_RxCpltCallback+0x114>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	701a      	strb	r2, [r3, #0]
		}
		uart_count = 0;
 8002ad6:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <HAL_UART_RxCpltCallback+0xfc>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
	}

	if (uart_count == 12)
 8002adc:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <HAL_UART_RxCpltCallback+0xfc>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b0c      	cmp	r3, #12
 8002ae2:	d117      	bne.n	8002b14 <HAL_UART_RxCpltCallback+0xe0>
	{
		uint8_t tmp = 0x81;
 8002ae4:	2381      	movs	r3, #129	; 0x81
 8002ae6:	72fb      	strb	r3, [r7, #11]
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r\nEingabe Ung", 13, 100);
 8002ae8:	2364      	movs	r3, #100	; 0x64
 8002aea:	220d      	movs	r2, #13
 8002aec:	4917      	ldr	r1, [pc, #92]	; (8002b4c <HAL_UART_RxCpltCallback+0x118>)
 8002aee:	4812      	ldr	r0, [pc, #72]	; (8002b38 <HAL_UART_RxCpltCallback+0x104>)
 8002af0:	f003 fde4 	bl	80066bc <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, &tmp, 1, 100);
 8002af4:	f107 010b 	add.w	r1, r7, #11
 8002af8:	2364      	movs	r3, #100	; 0x64
 8002afa:	2201      	movs	r2, #1
 8002afc:	480e      	ldr	r0, [pc, #56]	; (8002b38 <HAL_UART_RxCpltCallback+0x104>)
 8002afe:	f003 fddd 	bl	80066bc <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) "ltig\r\n", 6, 100);
 8002b02:	2364      	movs	r3, #100	; 0x64
 8002b04:	2206      	movs	r2, #6
 8002b06:	4912      	ldr	r1, [pc, #72]	; (8002b50 <HAL_UART_RxCpltCallback+0x11c>)
 8002b08:	480b      	ldr	r0, [pc, #44]	; (8002b38 <HAL_UART_RxCpltCallback+0x104>)
 8002b0a:	f003 fdd7 	bl	80066bc <HAL_UART_Transmit>
		uart_count = 0;
 8002b0e:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <HAL_UART_RxCpltCallback+0xfc>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	701a      	strb	r2, [r3, #0]
	}
    HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer[uart_count], 1);
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_UART_RxCpltCallback+0xfc>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <HAL_UART_RxCpltCallback+0x100>)
 8002b1c:	4413      	add	r3, r2
 8002b1e:	2201      	movs	r2, #1
 8002b20:	4619      	mov	r1, r3
 8002b22:	4805      	ldr	r0, [pc, #20]	; (8002b38 <HAL_UART_RxCpltCallback+0x104>)
 8002b24:	f003 fe4d 	bl	80067c2 <HAL_UART_Receive_IT>
}
 8002b28:	bf00      	nop
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20000124 	.word	0x20000124
 8002b34:	2000010c 	.word	0x2000010c
 8002b38:	20000188 	.word	0x20000188
 8002b3c:	08008380 	.word	0x08008380
 8002b40:	080083ac 	.word	0x080083ac
 8002b44:	08008390 	.word	0x08008390
 8002b48:	20000118 	.word	0x20000118
 8002b4c:	08008394 	.word	0x08008394
 8002b50:	080083a4 	.word	0x080083a4

08002b54 <HAL_CAN_RxFifo0MsgPendingCallback>:

// Can-Interrupt: Nachricht wartet
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
	// Nachricht aus Speicher auslesen
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8002b5e:	4a07      	ldr	r2, [pc, #28]	; (8002b7c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8002b60:	2100      	movs	r1, #0
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f001 f9f2 	bl	8003f4c <HAL_CAN_GetRxMessage>
	can_change = 1;
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000128 	.word	0x20000128
 8002b7c:	200000f0 	.word	0x200000f0
 8002b80:	20000131 	.word	0x20000131

08002b84 <HAL_CAN_RxFifo0FullCallback>:

// Can-Interrupt: Fifo0 ist voll
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	// Fifo0 voll
	uartTransmit("Fifo0 von CAN3 ist voll\n", 24);
 8002b8c:	2118      	movs	r1, #24
 8002b8e:	4804      	ldr	r0, [pc, #16]	; (8002ba0 <HAL_CAN_RxFifo0FullCallback+0x1c>)
 8002b90:	f7fd fe16 	bl	80007c0 <uartTransmit>

	Error_Handler();
 8002b94:	f000 f81c 	bl	8002bd0 <Error_Handler>
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	080083b8 	.word	0x080083b8

08002ba4 <HAL_TIM_PeriodElapsedCallback>:

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)																	// Wenn Timer 6 den ueberlauf ausgeloest hat
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a06      	ldr	r2, [pc, #24]	; (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d102      	bne.n	8002bba <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;														// Setze Millisekunden Flag
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	701a      	strb	r2, [r3, #0]
	}
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	2000013c 	.word	0x2000013c
 8002bcc:	20000130 	.word	0x20000130

08002bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd4:	b672      	cpsid	i
}
 8002bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8002bd8:	4a11      	ldr	r2, [pc, #68]	; (8002c20 <Error_Handler+0x50>)
 8002bda:	7853      	ldrb	r3, [r2, #1]
 8002bdc:	f043 0308 	orr.w	r3, r3, #8
 8002be0:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8002be2:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <Error_Handler+0x50>)
 8002be4:	785b      	ldrb	r3, [r3, #1]
 8002be6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	461a      	mov	r2, r3
 8002bee:	2104      	movs	r1, #4
 8002bf0:	480c      	ldr	r0, [pc, #48]	; (8002c24 <Error_Handler+0x54>)
 8002bf2:	f002 f871 	bl	8004cd8 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8002bf6:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <Error_Handler+0x50>)
 8002bf8:	7853      	ldrb	r3, [r2, #1]
 8002bfa:	f36f 1304 	bfc	r3, #4, #1
 8002bfe:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 8002c00:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <Error_Handler+0x50>)
 8002c02:	785b      	ldrb	r3, [r3, #1]
 8002c04:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c10:	4804      	ldr	r0, [pc, #16]	; (8002c24 <Error_Handler+0x54>)
 8002c12:	f002 f861 	bl	8004cd8 <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 8002c16:	2122      	movs	r1, #34	; 0x22
 8002c18:	4803      	ldr	r0, [pc, #12]	; (8002c28 <Error_Handler+0x58>)
 8002c1a:	f7fd fdd1 	bl	80007c0 <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1);
 8002c1e:	e7fe      	b.n	8002c1e <Error_Handler+0x4e>
 8002c20:	20000050 	.word	0x20000050
 8002c24:	40020400 	.word	0x40020400
 8002c28:	080083d4 	.word	0x080083d4

08002c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c32:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <HAL_MspInit+0x44>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	4a0e      	ldr	r2, [pc, #56]	; (8002c70 <HAL_MspInit+0x44>)
 8002c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3e:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <HAL_MspInit+0x44>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c46:	607b      	str	r3, [r7, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c4a:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <HAL_MspInit+0x44>)
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	4a08      	ldr	r2, [pc, #32]	; (8002c70 <HAL_MspInit+0x44>)
 8002c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c54:	6453      	str	r3, [r2, #68]	; 0x44
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_MspInit+0x44>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800

08002c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c78:	e7fe      	b.n	8002c78 <NMI_Handler+0x4>

08002c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c7e:	e7fe      	b.n	8002c7e <HardFault_Handler+0x4>

08002c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c84:	e7fe      	b.n	8002c84 <MemManage_Handler+0x4>

08002c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c86:	b480      	push	{r7}
 8002c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c8a:	e7fe      	b.n	8002c8a <BusFault_Handler+0x4>

08002c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c90:	e7fe      	b.n	8002c90 <UsageFault_Handler+0x4>

08002c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cc0:	f000 f98e 	bl	8002fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cc4:	bf00      	nop
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ccc:	4802      	ldr	r0, [pc, #8]	; (8002cd8 <USART2_IRQHandler+0x10>)
 8002cce:	f003 fdbd 	bl	800684c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000188 	.word	0x20000188

08002cdc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ce0:	4802      	ldr	r0, [pc, #8]	; (8002cec <TIM6_DAC_IRQHandler+0x10>)
 8002ce2:	f003 fa09 	bl	80060f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	2000013c 	.word	0x2000013c

08002cf0 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8002cf4:	4802      	ldr	r0, [pc, #8]	; (8002d00 <CAN3_RX0_IRQHandler+0x10>)
 8002cf6:	f001 fa61 	bl	80041bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	200000c8 	.word	0x200000c8

08002d04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d08:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <SystemInit+0x28>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0e:	4a07      	ldr	r2, [pc, #28]	; (8002d2c <SystemInit+0x28>)
 8002d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d18:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <SystemInit+0x28>)
 8002d1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d1e:	609a      	str	r2, [r3, #8]
#endif
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d36:	1d3b      	adds	r3, r7, #4
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002d40:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <MX_TIM6_Init+0x64>)
 8002d42:	4a15      	ldr	r2, [pc, #84]	; (8002d98 <MX_TIM6_Init+0x68>)
 8002d44:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27-1;
 8002d46:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <MX_TIM6_Init+0x64>)
 8002d48:	221a      	movs	r2, #26
 8002d4a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d4c:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <MX_TIM6_Init+0x64>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000-1;
 8002d52:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <MX_TIM6_Init+0x64>)
 8002d54:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002d58:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d5a:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <MX_TIM6_Init+0x64>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002d60:	480c      	ldr	r0, [pc, #48]	; (8002d94 <MX_TIM6_Init+0x64>)
 8002d62:	f003 f8f9 	bl	8005f58 <HAL_TIM_Base_Init>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002d6c:	f7ff ff30 	bl	8002bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d70:	2300      	movs	r3, #0
 8002d72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002d78:	1d3b      	adds	r3, r7, #4
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4805      	ldr	r0, [pc, #20]	; (8002d94 <MX_TIM6_Init+0x64>)
 8002d7e:	f003 fba3 	bl	80064c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002d88:	f7ff ff22 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002d8c:	bf00      	nop
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	2000013c 	.word	0x2000013c
 8002d98:	40001000 	.word	0x40001000

08002d9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a0d      	ldr	r2, [pc, #52]	; (8002de0 <HAL_TIM_Base_MspInit+0x44>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d113      	bne.n	8002dd6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <HAL_TIM_Base_MspInit+0x48>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	4a0c      	ldr	r2, [pc, #48]	; (8002de4 <HAL_TIM_Base_MspInit+0x48>)
 8002db4:	f043 0310 	orr.w	r3, r3, #16
 8002db8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dba:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <HAL_TIM_Base_MspInit+0x48>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2100      	movs	r1, #0
 8002dca:	2036      	movs	r0, #54	; 0x36
 8002dcc:	f001 fcf7 	bl	80047be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002dd0:	2036      	movs	r0, #54	; 0x36
 8002dd2:	f001 fd10 	bl	80047f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002dd6:	bf00      	nop
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40001000 	.word	0x40001000
 8002de4:	40023800 	.word	0x40023800

08002de8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002dec:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <MX_USART2_UART_Init+0x58>)
 8002dee:	4a15      	ldr	r2, [pc, #84]	; (8002e44 <MX_USART2_UART_Init+0x5c>)
 8002df0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002df2:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <MX_USART2_UART_Init+0x58>)
 8002df4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002df8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dfa:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <MX_USART2_UART_Init+0x58>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e00:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <MX_USART2_UART_Init+0x58>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e06:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <MX_USART2_UART_Init+0x58>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <MX_USART2_UART_Init+0x58>)
 8002e0e:	220c      	movs	r2, #12
 8002e10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e12:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <MX_USART2_UART_Init+0x58>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <MX_USART2_UART_Init+0x58>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e1e:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <MX_USART2_UART_Init+0x58>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <MX_USART2_UART_Init+0x58>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e2a:	4805      	ldr	r0, [pc, #20]	; (8002e40 <MX_USART2_UART_Init+0x58>)
 8002e2c:	f003 fbf8 	bl	8006620 <HAL_UART_Init>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002e36:	f7ff fecb 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000188 	.word	0x20000188
 8002e44:	40004400 	.word	0x40004400

08002e48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b0ae      	sub	sp, #184	; 0xb8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e60:	f107 0314 	add.w	r3, r7, #20
 8002e64:	2290      	movs	r2, #144	; 0x90
 8002e66:	2100      	movs	r1, #0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f004 ff0f 	bl	8007c8c <memset>
  if(uartHandle->Instance==USART2)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a25      	ldr	r2, [pc, #148]	; (8002f08 <HAL_UART_MspInit+0xc0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d142      	bne.n	8002efe <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e78:	2380      	movs	r3, #128	; 0x80
 8002e7a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e80:	f107 0314 	add.w	r3, r7, #20
 8002e84:	4618      	mov	r0, r3
 8002e86:	f002 fc3f 	bl	8005708 <HAL_RCCEx_PeriphCLKConfig>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e90:	f7ff fe9e 	bl	8002bd0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e94:	4b1d      	ldr	r3, [pc, #116]	; (8002f0c <HAL_UART_MspInit+0xc4>)
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	4a1c      	ldr	r2, [pc, #112]	; (8002f0c <HAL_UART_MspInit+0xc4>)
 8002e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea0:	4b1a      	ldr	r3, [pc, #104]	; (8002f0c <HAL_UART_MspInit+0xc4>)
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eac:	4b17      	ldr	r3, [pc, #92]	; (8002f0c <HAL_UART_MspInit+0xc4>)
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	4a16      	ldr	r2, [pc, #88]	; (8002f0c <HAL_UART_MspInit+0xc4>)
 8002eb2:	f043 0308 	orr.w	r3, r3, #8
 8002eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb8:	4b14      	ldr	r3, [pc, #80]	; (8002f0c <HAL_UART_MspInit+0xc4>)
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART2TX_Pin|DEBUG_UART2RX_Pin;
 8002ec4:	2360      	movs	r3, #96	; 0x60
 8002ec6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002edc:	2307      	movs	r3, #7
 8002ede:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ee2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4809      	ldr	r0, [pc, #36]	; (8002f10 <HAL_UART_MspInit+0xc8>)
 8002eea:	f001 fd31 	bl	8004950 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	2026      	movs	r0, #38	; 0x26
 8002ef4:	f001 fc63 	bl	80047be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ef8:	2026      	movs	r0, #38	; 0x26
 8002efa:	f001 fc7c 	bl	80047f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002efe:	bf00      	nop
 8002f00:	37b8      	adds	r7, #184	; 0xb8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40004400 	.word	0x40004400
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40020c00 	.word	0x40020c00

08002f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f1a:	e003      	b.n	8002f24 <LoopCopyDataInit>

08002f1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f22:	3104      	adds	r1, #4

08002f24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f24:	480b      	ldr	r0, [pc, #44]	; (8002f54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f26:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f2c:	d3f6      	bcc.n	8002f1c <CopyDataInit>
  ldr  r2, =_sbss
 8002f2e:	4a0b      	ldr	r2, [pc, #44]	; (8002f5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f30:	e002      	b.n	8002f38 <LoopFillZerobss>

08002f32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f34:	f842 3b04 	str.w	r3, [r2], #4

08002f38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f38:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f3c:	d3f9      	bcc.n	8002f32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f3e:	f7ff fee1 	bl	8002d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f42:	f004 fe7f 	bl	8007c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f46:	f7ff f971 	bl	800222c <main>
  bx  lr    
 8002f4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f4c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002f50:	08008448 	.word	0x08008448
  ldr  r0, =_sdata
 8002f54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f58:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002f5c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002f60:	20000214 	.word	0x20000214

08002f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f64:	e7fe      	b.n	8002f64 <ADC_IRQHandler>

08002f66 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f6a:	2003      	movs	r0, #3
 8002f6c:	f001 fc1c 	bl	80047a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f70:	2000      	movs	r0, #0
 8002f72:	f000 f805 	bl	8002f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f76:	f7ff fe59 	bl	8002c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f88:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <HAL_InitTick+0x54>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4b12      	ldr	r3, [pc, #72]	; (8002fd8 <HAL_InitTick+0x58>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	4619      	mov	r1, r3
 8002f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f001 fc37 	bl	8004812 <HAL_SYSTICK_Config>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e00e      	b.n	8002fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b0f      	cmp	r3, #15
 8002fb2:	d80a      	bhi.n	8002fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fbc:	f001 fbff 	bl	80047be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fc0:	4a06      	ldr	r2, [pc, #24]	; (8002fdc <HAL_InitTick+0x5c>)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e000      	b.n	8002fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20000000 	.word	0x20000000
 8002fd8:	20000008 	.word	0x20000008
 8002fdc:	20000004 	.word	0x20000004

08002fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fe4:	4b06      	ldr	r3, [pc, #24]	; (8003000 <HAL_IncTick+0x20>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_IncTick+0x24>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4413      	add	r3, r2
 8002ff0:	4a04      	ldr	r2, [pc, #16]	; (8003004 <HAL_IncTick+0x24>)
 8002ff2:	6013      	str	r3, [r2, #0]
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20000008 	.word	0x20000008
 8003004:	20000210 	.word	0x20000210

08003008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  return uwTick;
 800300c:	4b03      	ldr	r3, [pc, #12]	; (800301c <HAL_GetTick+0x14>)
 800300e:	681b      	ldr	r3, [r3, #0]
}
 8003010:	4618      	mov	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	20000210 	.word	0x20000210

08003020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003028:	f7ff ffee 	bl	8003008 <HAL_GetTick>
 800302c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003038:	d005      	beq.n	8003046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <HAL_Delay+0x44>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003046:	bf00      	nop
 8003048:	f7ff ffde 	bl	8003008 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	429a      	cmp	r2, r3
 8003056:	d8f7      	bhi.n	8003048 <HAL_Delay+0x28>
  {
  }
}
 8003058:	bf00      	nop
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000008 	.word	0x20000008

08003068 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 800306c:	4b02      	ldr	r3, [pc, #8]	; (8003078 <HAL_GetHalVersion+0x10>)
}
 800306e:	4618      	mov	r0, r3
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	01030000 	.word	0x01030000

0800307c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8003080:	4b03      	ldr	r3, [pc, #12]	; (8003090 <HAL_GetREVID+0x14>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	0c1b      	lsrs	r3, r3, #16
}
 8003086:	4618      	mov	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	e0042000 	.word	0xe0042000

08003094 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8003098:	4b04      	ldr	r3, [pc, #16]	; (80030ac <HAL_GetDEVID+0x18>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	e0042000 	.word	0xe0042000

080030b0 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80030b4:	4b03      	ldr	r3, [pc, #12]	; (80030c4 <HAL_GetUIDw0+0x14>)
 80030b6:	681b      	ldr	r3, [r3, #0]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	1ff0f420 	.word	0x1ff0f420

080030c8 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80030cc:	4b03      	ldr	r3, [pc, #12]	; (80030dc <HAL_GetUIDw1+0x14>)
 80030ce:	681b      	ldr	r3, [r3, #0]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	1ff0f424 	.word	0x1ff0f424

080030e0 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80030e4:	4b03      	ldr	r3, [pc, #12]	; (80030f4 <HAL_GetUIDw2+0x14>)
 80030e6:	681b      	ldr	r3, [r3, #0]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	1ff0f428 	.word	0x1ff0f428

080030f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e031      	b.n	8003172 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fe fd66 	bl	8001be8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f003 0310 	and.w	r3, r3, #16
 8003132:	2b00      	cmp	r3, #0
 8003134:	d116      	bne.n	8003164 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800313a:	4b10      	ldr	r3, [pc, #64]	; (800317c <HAL_ADC_Init+0x84>)
 800313c:	4013      	ands	r3, r2
 800313e:	f043 0202 	orr.w	r2, r3, #2
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fb0a 	bl	8003760 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f023 0303 	bic.w	r3, r3, #3
 800315a:	f043 0201 	orr.w	r2, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	641a      	str	r2, [r3, #64]	; 0x40
 8003162:	e001      	b.n	8003168 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003170:	7bfb      	ldrb	r3, [r7, #15]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	ffffeefd 	.word	0xffffeefd

08003180 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_ADC_Start+0x1a>
 8003196:	2302      	movs	r3, #2
 8003198:	e0ad      	b.n	80032f6 <HAL_ADC_Start+0x176>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d018      	beq.n	80031e2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0201 	orr.w	r2, r2, #1
 80031be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80031c0:	4b50      	ldr	r3, [pc, #320]	; (8003304 <HAL_ADC_Start+0x184>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a50      	ldr	r2, [pc, #320]	; (8003308 <HAL_ADC_Start+0x188>)
 80031c6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ca:	0c9a      	lsrs	r2, r3, #18
 80031cc:	4613      	mov	r3, r2
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	4413      	add	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80031d4:	e002      	b.n	80031dc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	3b01      	subs	r3, #1
 80031da:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f9      	bne.n	80031d6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d175      	bne.n	80032dc <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f4:	4b45      	ldr	r3, [pc, #276]	; (800330c <HAL_ADC_Start+0x18c>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320a:	2b00      	cmp	r3, #0
 800320c:	d007      	beq.n	800321e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003216:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800322a:	d106      	bne.n	800323a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003230:	f023 0206 	bic.w	r2, r3, #6
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	645a      	str	r2, [r3, #68]	; 0x44
 8003238:	e002      	b.n	8003240 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003250:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003252:	4b2f      	ldr	r3, [pc, #188]	; (8003310 <HAL_ADC_Start+0x190>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 031f 	and.w	r3, r3, #31
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10f      	bne.n	800327e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d143      	bne.n	80032f4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	e03a      	b.n	80032f4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a24      	ldr	r2, [pc, #144]	; (8003314 <HAL_ADC_Start+0x194>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d10e      	bne.n	80032a6 <HAL_ADC_Start+0x126>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d107      	bne.n	80032a6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032a4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80032a6:	4b1a      	ldr	r3, [pc, #104]	; (8003310 <HAL_ADC_Start+0x190>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f003 0310 	and.w	r3, r3, #16
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d120      	bne.n	80032f4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a18      	ldr	r2, [pc, #96]	; (8003318 <HAL_ADC_Start+0x198>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d11b      	bne.n	80032f4 <HAL_ADC_Start+0x174>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d114      	bne.n	80032f4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032d8:	609a      	str	r2, [r3, #8]
 80032da:	e00b      	b.n	80032f4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	f043 0210 	orr.w	r2, r3, #16
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ec:	f043 0201 	orr.w	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	20000000 	.word	0x20000000
 8003308:	431bde83 	.word	0x431bde83
 800330c:	fffff8fe 	.word	0xfffff8fe
 8003310:	40012300 	.word	0x40012300
 8003314:	40012000 	.word	0x40012000
 8003318:	40012200 	.word	0x40012200

0800331c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_ADC_Stop+0x16>
 800332e:	2302      	movs	r3, #2
 8003330:	e01f      	b.n	8003372 <HAL_ADC_Stop+0x56>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d107      	bne.n	8003368 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800335c:	4b08      	ldr	r3, [pc, #32]	; (8003380 <HAL_ADC_Stop+0x64>)
 800335e:	4013      	ands	r3, r2
 8003360:	f043 0201 	orr.w	r2, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	ffffeefe 	.word	0xffffeefe

08003384 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a0:	d113      	bne.n	80033ca <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033b0:	d10b      	bne.n	80033ca <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f043 0220 	orr.w	r2, r3, #32
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e063      	b.n	8003492 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80033ca:	f7ff fe1d 	bl	8003008 <HAL_GetTick>
 80033ce:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80033d0:	e021      	b.n	8003416 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d8:	d01d      	beq.n	8003416 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d007      	beq.n	80033f0 <HAL_ADC_PollForConversion+0x6c>
 80033e0:	f7ff fe12 	bl	8003008 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d212      	bcs.n	8003416 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d00b      	beq.n	8003416 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f043 0204 	orr.w	r2, r3, #4
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e03d      	b.n	8003492 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b02      	cmp	r3, #2
 8003422:	d1d6      	bne.n	80033d2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0212 	mvn.w	r2, #18
 800342c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d123      	bne.n	8003490 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800344c:	2b00      	cmp	r3, #0
 800344e:	d11f      	bne.n	8003490 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003456:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800345a:	2b00      	cmp	r3, #0
 800345c:	d006      	beq.n	800346c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003468:	2b00      	cmp	r3, #0
 800346a:	d111      	bne.n	8003490 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d105      	bne.n	8003490 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	f043 0201 	orr.w	r2, r3, #1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x1c>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e136      	b.n	800373e <HAL_ADC_ConfigChannel+0x28a>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b09      	cmp	r3, #9
 80034de:	d93a      	bls.n	8003556 <HAL_ADC_ConfigChannel+0xa2>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034e8:	d035      	beq.n	8003556 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68d9      	ldr	r1, [r3, #12]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	4613      	mov	r3, r2
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	4413      	add	r3, r2
 80034fe:	3b1e      	subs	r3, #30
 8003500:	2207      	movs	r2, #7
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43da      	mvns	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	400a      	ands	r2, r1
 800350e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a8d      	ldr	r2, [pc, #564]	; (800374c <HAL_ADC_ConfigChannel+0x298>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d10a      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68d9      	ldr	r1, [r3, #12]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	061a      	lsls	r2, r3, #24
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800352e:	e035      	b.n	800359c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68d9      	ldr	r1, [r3, #12]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	4618      	mov	r0, r3
 8003542:	4603      	mov	r3, r0
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4403      	add	r3, r0
 8003548:	3b1e      	subs	r3, #30
 800354a:	409a      	lsls	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003554:	e022      	b.n	800359c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6919      	ldr	r1, [r3, #16]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	b29b      	uxth	r3, r3
 8003562:	461a      	mov	r2, r3
 8003564:	4613      	mov	r3, r2
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	4413      	add	r3, r2
 800356a:	2207      	movs	r2, #7
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43da      	mvns	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	400a      	ands	r2, r1
 8003578:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6919      	ldr	r1, [r3, #16]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	b29b      	uxth	r3, r3
 800358a:	4618      	mov	r0, r3
 800358c:	4603      	mov	r3, r0
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	4403      	add	r3, r0
 8003592:	409a      	lsls	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b06      	cmp	r3, #6
 80035a2:	d824      	bhi.n	80035ee <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	3b05      	subs	r3, #5
 80035b6:	221f      	movs	r2, #31
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43da      	mvns	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	400a      	ands	r2, r1
 80035c4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	4618      	mov	r0, r3
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	3b05      	subs	r3, #5
 80035e0:	fa00 f203 	lsl.w	r2, r0, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	635a      	str	r2, [r3, #52]	; 0x34
 80035ec:	e04c      	b.n	8003688 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b0c      	cmp	r3, #12
 80035f4:	d824      	bhi.n	8003640 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	3b23      	subs	r3, #35	; 0x23
 8003608:	221f      	movs	r2, #31
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43da      	mvns	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	400a      	ands	r2, r1
 8003616:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	b29b      	uxth	r3, r3
 8003624:	4618      	mov	r0, r3
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	3b23      	subs	r3, #35	; 0x23
 8003632:	fa00 f203 	lsl.w	r2, r0, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	631a      	str	r2, [r3, #48]	; 0x30
 800363e:	e023      	b.n	8003688 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	3b41      	subs	r3, #65	; 0x41
 8003652:	221f      	movs	r2, #31
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	43da      	mvns	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	400a      	ands	r2, r1
 8003660:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	b29b      	uxth	r3, r3
 800366e:	4618      	mov	r0, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	3b41      	subs	r3, #65	; 0x41
 800367c:	fa00 f203 	lsl.w	r2, r0, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a30      	ldr	r2, [pc, #192]	; (8003750 <HAL_ADC_ConfigChannel+0x29c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d10a      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x1f4>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800369a:	d105      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800369c:	4b2d      	ldr	r3, [pc, #180]	; (8003754 <HAL_ADC_ConfigChannel+0x2a0>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	4a2c      	ldr	r2, [pc, #176]	; (8003754 <HAL_ADC_ConfigChannel+0x2a0>)
 80036a2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80036a6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a28      	ldr	r2, [pc, #160]	; (8003750 <HAL_ADC_ConfigChannel+0x29c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d10f      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x21e>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b12      	cmp	r3, #18
 80036b8:	d10b      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80036ba:	4b26      	ldr	r3, [pc, #152]	; (8003754 <HAL_ADC_ConfigChannel+0x2a0>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	4a25      	ldr	r2, [pc, #148]	; (8003754 <HAL_ADC_ConfigChannel+0x2a0>)
 80036c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80036c4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80036c6:	4b23      	ldr	r3, [pc, #140]	; (8003754 <HAL_ADC_ConfigChannel+0x2a0>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	4a22      	ldr	r2, [pc, #136]	; (8003754 <HAL_ADC_ConfigChannel+0x2a0>)
 80036cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036d0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1e      	ldr	r2, [pc, #120]	; (8003750 <HAL_ADC_ConfigChannel+0x29c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d12b      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x280>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1a      	ldr	r2, [pc, #104]	; (800374c <HAL_ADC_ConfigChannel+0x298>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d003      	beq.n	80036ee <HAL_ADC_ConfigChannel+0x23a>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b11      	cmp	r3, #17
 80036ec:	d122      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80036ee:	4b19      	ldr	r3, [pc, #100]	; (8003754 <HAL_ADC_ConfigChannel+0x2a0>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	4a18      	ldr	r2, [pc, #96]	; (8003754 <HAL_ADC_ConfigChannel+0x2a0>)
 80036f4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80036f8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80036fa:	4b16      	ldr	r3, [pc, #88]	; (8003754 <HAL_ADC_ConfigChannel+0x2a0>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	4a15      	ldr	r2, [pc, #84]	; (8003754 <HAL_ADC_ConfigChannel+0x2a0>)
 8003700:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003704:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a10      	ldr	r2, [pc, #64]	; (800374c <HAL_ADC_ConfigChannel+0x298>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d111      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003710:	4b11      	ldr	r3, [pc, #68]	; (8003758 <HAL_ADC_ConfigChannel+0x2a4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a11      	ldr	r2, [pc, #68]	; (800375c <HAL_ADC_ConfigChannel+0x2a8>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	0c9a      	lsrs	r2, r3, #18
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003726:	e002      	b.n	800372e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3b01      	subs	r3, #1
 800372c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1f9      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	10000012 	.word	0x10000012
 8003750:	40012000 	.word	0x40012000
 8003754:	40012300 	.word	0x40012300
 8003758:	20000000 	.word	0x20000000
 800375c:	431bde83 	.word	0x431bde83

08003760 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003768:	4b78      	ldr	r3, [pc, #480]	; (800394c <ADC_Init+0x1ec>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	4a77      	ldr	r2, [pc, #476]	; (800394c <ADC_Init+0x1ec>)
 800376e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003772:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003774:	4b75      	ldr	r3, [pc, #468]	; (800394c <ADC_Init+0x1ec>)
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	4973      	ldr	r1, [pc, #460]	; (800394c <ADC_Init+0x1ec>)
 800377e:	4313      	orrs	r3, r2
 8003780:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003790:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6859      	ldr	r1, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	021a      	lsls	r2, r3, #8
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80037b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6899      	ldr	r1, [r3, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ee:	4a58      	ldr	r2, [pc, #352]	; (8003950 <ADC_Init+0x1f0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d022      	beq.n	800383a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003802:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6899      	ldr	r1, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003824:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6899      	ldr	r1, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	609a      	str	r2, [r3, #8]
 8003838:	e00f      	b.n	800385a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003848:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003858:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0202 	bic.w	r2, r2, #2
 8003868:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6899      	ldr	r1, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	005a      	lsls	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d01b      	beq.n	80038c0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003896:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80038a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6859      	ldr	r1, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	3b01      	subs	r3, #1
 80038b4:	035a      	lsls	r2, r3, #13
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
 80038be:	e007      	b.n	80038d0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	051a      	lsls	r2, r3, #20
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003904:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6899      	ldr	r1, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003912:	025a      	lsls	r2, r3, #9
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800392a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6899      	ldr	r1, [r3, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	029a      	lsls	r2, r3, #10
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	609a      	str	r2, [r3, #8]
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	40012300 	.word	0x40012300
 8003950:	0f000001 	.word	0x0f000001

08003954 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e0ed      	b.n	8003b42 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d102      	bne.n	8003978 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7fe fa1c 	bl	8001db0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003988:	f7ff fb3e 	bl	8003008 <HAL_GetTick>
 800398c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800398e:	e012      	b.n	80039b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003990:	f7ff fb3a 	bl	8003008 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b0a      	cmp	r3, #10
 800399c:	d90b      	bls.n	80039b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2205      	movs	r2, #5
 80039ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e0c5      	b.n	8003b42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0e5      	beq.n	8003990 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0202 	bic.w	r2, r2, #2
 80039d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039d4:	f7ff fb18 	bl	8003008 <HAL_GetTick>
 80039d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80039da:	e012      	b.n	8003a02 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80039dc:	f7ff fb14 	bl	8003008 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b0a      	cmp	r3, #10
 80039e8:	d90b      	bls.n	8003a02 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2205      	movs	r2, #5
 80039fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e09f      	b.n	8003b42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e5      	bne.n	80039dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	7e1b      	ldrb	r3, [r3, #24]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d108      	bne.n	8003a2a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	e007      	b.n	8003a3a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	7e5b      	ldrb	r3, [r3, #25]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d108      	bne.n	8003a54 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	e007      	b.n	8003a64 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	7e9b      	ldrb	r3, [r3, #26]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d108      	bne.n	8003a7e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0220 	orr.w	r2, r2, #32
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	e007      	b.n	8003a8e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0220 	bic.w	r2, r2, #32
 8003a8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	7edb      	ldrb	r3, [r3, #27]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d108      	bne.n	8003aa8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0210 	bic.w	r2, r2, #16
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	e007      	b.n	8003ab8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0210 	orr.w	r2, r2, #16
 8003ab6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	7f1b      	ldrb	r3, [r3, #28]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d108      	bne.n	8003ad2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0208 	orr.w	r2, r2, #8
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	e007      	b.n	8003ae2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0208 	bic.w	r2, r2, #8
 8003ae0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	7f5b      	ldrb	r3, [r3, #29]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d108      	bne.n	8003afc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0204 	orr.w	r2, r2, #4
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	e007      	b.n	8003b0c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0204 	bic.w	r2, r2, #4
 8003b0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	ea42 0103 	orr.w	r1, r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	1e5a      	subs	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b62:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003b64:	7cfb      	ldrb	r3, [r7, #19]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d003      	beq.n	8003b72 <HAL_CAN_ConfigFilter+0x26>
 8003b6a:	7cfb      	ldrb	r3, [r7, #19]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	f040 80c7 	bne.w	8003d00 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a69      	ldr	r2, [pc, #420]	; (8003d1c <HAL_CAN_ConfigFilter+0x1d0>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d001      	beq.n	8003b80 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8003b7c:	4b68      	ldr	r3, [pc, #416]	; (8003d20 <HAL_CAN_ConfigFilter+0x1d4>)
 8003b7e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b86:	f043 0201 	orr.w	r2, r3, #1
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	4a63      	ldr	r2, [pc, #396]	; (8003d20 <HAL_CAN_ConfigFilter+0x1d4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d111      	bne.n	8003bbc <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b9e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	021b      	lsls	r3, r3, #8
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	f003 031f 	and.w	r3, r3, #31
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	401a      	ands	r2, r3
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d123      	bne.n	8003c2e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	401a      	ands	r2, r3
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003c08:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	3248      	adds	r2, #72	; 0x48
 8003c0e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c22:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c24:	6979      	ldr	r1, [r7, #20]
 8003c26:	3348      	adds	r3, #72	; 0x48
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	440b      	add	r3, r1
 8003c2c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d122      	bne.n	8003c7c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003c56:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	3248      	adds	r2, #72	; 0x48
 8003c5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c70:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c72:	6979      	ldr	r1, [r7, #20]
 8003c74:	3348      	adds	r3, #72	; 0x48
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	440b      	add	r3, r1
 8003c7a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d109      	bne.n	8003c98 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	401a      	ands	r2, r3
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003c96:	e007      	b.n	8003ca8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d109      	bne.n	8003cc4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	401a      	ands	r2, r3
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003cc2:	e007      	b.n	8003cd4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d107      	bne.n	8003cec <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003cf2:	f023 0201 	bic.w	r2, r3, #1
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	e006      	b.n	8003d0e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
  }
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40003400 	.word	0x40003400
 8003d20:	40006400 	.word	0x40006400

08003d24 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d12e      	bne.n	8003d96 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0201 	bic.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d50:	f7ff f95a 	bl	8003008 <HAL_GetTick>
 8003d54:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003d56:	e012      	b.n	8003d7e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d58:	f7ff f956 	bl	8003008 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b0a      	cmp	r3, #10
 8003d64:	d90b      	bls.n	8003d7e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2205      	movs	r2, #5
 8003d76:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e012      	b.n	8003da4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1e5      	bne.n	8003d58 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	e006      	b.n	8003da4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
  }
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b089      	sub	sp, #36	; 0x24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
 8003db8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dc0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003dca:	7ffb      	ldrb	r3, [r7, #31]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d003      	beq.n	8003dd8 <HAL_CAN_AddTxMessage+0x2c>
 8003dd0:	7ffb      	ldrb	r3, [r7, #31]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	f040 80ad 	bne.w	8003f32 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d105      	bne.n	8003df8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 8095 	beq.w	8003f22 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	0e1b      	lsrs	r3, r3, #24
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003e02:	2201      	movs	r2, #1
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	409a      	lsls	r2, r3
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10d      	bne.n	8003e30 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003e1e:	68f9      	ldr	r1, [r7, #12]
 8003e20:	6809      	ldr	r1, [r1, #0]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	3318      	adds	r3, #24
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	440b      	add	r3, r1
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	e00f      	b.n	8003e50 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e3a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e40:	68f9      	ldr	r1, [r7, #12]
 8003e42:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003e44:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	3318      	adds	r3, #24
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	440b      	add	r3, r1
 8003e4e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6819      	ldr	r1, [r3, #0]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	3318      	adds	r3, #24
 8003e5c:	011b      	lsls	r3, r3, #4
 8003e5e:	440b      	add	r3, r1
 8003e60:	3304      	adds	r3, #4
 8003e62:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	7d1b      	ldrb	r3, [r3, #20]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d111      	bne.n	8003e90 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	3318      	adds	r3, #24
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	4413      	add	r3, r2
 8003e78:	3304      	adds	r3, #4
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	6811      	ldr	r1, [r2, #0]
 8003e80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	3318      	adds	r3, #24
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	440b      	add	r3, r1
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3307      	adds	r3, #7
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	061a      	lsls	r2, r3, #24
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3306      	adds	r3, #6
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	041b      	lsls	r3, r3, #16
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3305      	adds	r3, #5
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	021b      	lsls	r3, r3, #8
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	3204      	adds	r2, #4
 8003eb0:	7812      	ldrb	r2, [r2, #0]
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	6811      	ldr	r1, [r2, #0]
 8003eb8:	ea43 0200 	orr.w	r2, r3, r0
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	440b      	add	r3, r1
 8003ec2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003ec6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3303      	adds	r3, #3
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	061a      	lsls	r2, r3, #24
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3302      	adds	r3, #2
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	041b      	lsls	r3, r3, #16
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3301      	adds	r3, #1
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	021b      	lsls	r3, r3, #8
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	7812      	ldrb	r2, [r2, #0]
 8003ee8:	4610      	mov	r0, r2
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	6811      	ldr	r1, [r2, #0]
 8003eee:	ea43 0200 	orr.w	r2, r3, r0
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	440b      	add	r3, r1
 8003ef8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003efc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	3318      	adds	r3, #24
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	4413      	add	r3, r2
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	6811      	ldr	r1, [r2, #0]
 8003f10:	f043 0201 	orr.w	r2, r3, #1
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	3318      	adds	r3, #24
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	440b      	add	r3, r1
 8003f1c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	e00e      	b.n	8003f40 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e006      	b.n	8003f40 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
  }
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3724      	adds	r7, #36	; 0x24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f60:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f62:	7dfb      	ldrb	r3, [r7, #23]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d003      	beq.n	8003f70 <HAL_CAN_GetRxMessage+0x24>
 8003f68:	7dfb      	ldrb	r3, [r7, #23]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	f040 80f3 	bne.w	8004156 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10e      	bne.n	8003f94 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f003 0303 	and.w	r3, r3, #3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d116      	bne.n	8003fb2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0e7      	b.n	8004164 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d107      	bne.n	8003fb2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e0d8      	b.n	8004164 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	331b      	adds	r3, #27
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	4413      	add	r3, r2
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0204 	and.w	r2, r3, #4
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10c      	bne.n	8003fea <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	331b      	adds	r3, #27
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	4413      	add	r3, r2
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	0d5b      	lsrs	r3, r3, #21
 8003fe0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	e00b      	b.n	8004002 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	331b      	adds	r3, #27
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	4413      	add	r3, r2
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	08db      	lsrs	r3, r3, #3
 8003ffa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	331b      	adds	r3, #27
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	4413      	add	r3, r2
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0202 	and.w	r2, r3, #2
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	331b      	adds	r3, #27
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	4413      	add	r3, r2
 8004024:	3304      	adds	r3, #4
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 020f 	and.w	r2, r3, #15
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	331b      	adds	r3, #27
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	4413      	add	r3, r2
 800403c:	3304      	adds	r3, #4
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	0a1b      	lsrs	r3, r3, #8
 8004042:	b2da      	uxtb	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	331b      	adds	r3, #27
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	4413      	add	r3, r2
 8004054:	3304      	adds	r3, #4
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	0c1b      	lsrs	r3, r3, #16
 800405a:	b29a      	uxth	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	4413      	add	r3, r2
 800406a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	b2da      	uxtb	r2, r3
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	4413      	add	r3, r2
 8004080:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	0a1a      	lsrs	r2, r3, #8
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	3301      	adds	r3, #1
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	4413      	add	r3, r2
 800409a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	0c1a      	lsrs	r2, r3, #16
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	3302      	adds	r3, #2
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	0e1a      	lsrs	r2, r3, #24
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	3303      	adds	r3, #3
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	3304      	adds	r3, #4
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	0a1a      	lsrs	r2, r3, #8
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	3305      	adds	r3, #5
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	4413      	add	r3, r2
 8004100:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	0c1a      	lsrs	r2, r3, #16
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	3306      	adds	r3, #6
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	4413      	add	r3, r2
 800411a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	0e1a      	lsrs	r2, r3, #24
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	3307      	adds	r3, #7
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d108      	bne.n	8004142 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0220 	orr.w	r2, r2, #32
 800413e:	60da      	str	r2, [r3, #12]
 8004140:	e007      	b.n	8004152 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0220 	orr.w	r2, r2, #32
 8004150:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	e006      	b.n	8004164 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
  }
}
 8004164:	4618      	mov	r0, r3
 8004166:	371c      	adds	r7, #28
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004180:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d002      	beq.n	800418e <HAL_CAN_ActivateNotification+0x1e>
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d109      	bne.n	80041a2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6959      	ldr	r1, [r3, #20]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	e006      	b.n	80041b0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
  }
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08a      	sub	sp, #40	; 0x28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80041c4:	2300      	movs	r3, #0
 80041c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d07c      	beq.n	80042fc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d023      	beq.n	8004254 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2201      	movs	r2, #1
 8004212:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f983 	bl	800452a <HAL_CAN_TxMailbox0CompleteCallback>
 8004224:	e016      	b.n	8004254 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b00      	cmp	r3, #0
 800422e:	d004      	beq.n	800423a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004236:	627b      	str	r3, [r7, #36]	; 0x24
 8004238:	e00c      	b.n	8004254 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b00      	cmp	r3, #0
 8004242:	d004      	beq.n	800424e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800424a:	627b      	str	r3, [r7, #36]	; 0x24
 800424c:	e002      	b.n	8004254 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f989 	bl	8004566 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425a:	2b00      	cmp	r3, #0
 800425c:	d024      	beq.n	80042a8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004266:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f963 	bl	800453e <HAL_CAN_TxMailbox1CompleteCallback>
 8004278:	e016      	b.n	80042a8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004280:	2b00      	cmp	r3, #0
 8004282:	d004      	beq.n	800428e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800428a:	627b      	str	r3, [r7, #36]	; 0x24
 800428c:	e00c      	b.n	80042a8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004294:	2b00      	cmp	r3, #0
 8004296:	d004      	beq.n	80042a2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
 80042a0:	e002      	b.n	80042a8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f969 	bl	800457a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d024      	beq.n	80042fc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80042ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f943 	bl	8004552 <HAL_CAN_TxMailbox2CompleteCallback>
 80042cc:	e016      	b.n	80042fc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d004      	beq.n	80042e2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
 80042e0:	e00c      	b.n	80042fc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d004      	beq.n	80042f6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24
 80042f4:	e002      	b.n	80042fc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f949 	bl	800458e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00c      	beq.n	8004320 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	2b00      	cmp	r3, #0
 800430e:	d007      	beq.n	8004320 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004316:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2210      	movs	r2, #16
 800431e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00b      	beq.n	8004342 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b00      	cmp	r3, #0
 8004332:	d006      	beq.n	8004342 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2208      	movs	r2, #8
 800433a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7fe fc21 	bl	8002b84 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d009      	beq.n	8004360 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fe fbfa 	bl	8002b54 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00c      	beq.n	8004384 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f003 0310 	and.w	r3, r3, #16
 8004370:	2b00      	cmp	r3, #0
 8004372:	d007      	beq.n	8004384 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800437a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2210      	movs	r2, #16
 8004382:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	f003 0320 	and.w	r3, r3, #32
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00b      	beq.n	80043a6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b00      	cmp	r3, #0
 8004396:	d006      	beq.n	80043a6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2208      	movs	r2, #8
 800439e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f908 	bl	80045b6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	f003 0310 	and.w	r3, r3, #16
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d009      	beq.n	80043c4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f8ef 	bl	80045a2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00b      	beq.n	80043e6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d006      	beq.n	80043e6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2210      	movs	r2, #16
 80043de:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f8f2 	bl	80045ca <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00b      	beq.n	8004408 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d006      	beq.n	8004408 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2208      	movs	r2, #8
 8004400:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f8eb 	bl	80045de <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d07b      	beq.n	800450a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	d072      	beq.n	8004502 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004422:	2b00      	cmp	r3, #0
 8004424:	d008      	beq.n	8004438 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	f043 0301 	orr.w	r3, r3, #1
 8004436:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800443e:	2b00      	cmp	r3, #0
 8004440:	d008      	beq.n	8004454 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	f043 0302 	orr.w	r3, r3, #2
 8004452:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800445a:	2b00      	cmp	r3, #0
 800445c:	d008      	beq.n	8004470 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	f043 0304 	orr.w	r3, r3, #4
 800446e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004476:	2b00      	cmp	r3, #0
 8004478:	d043      	beq.n	8004502 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004480:	2b00      	cmp	r3, #0
 8004482:	d03e      	beq.n	8004502 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800448a:	2b60      	cmp	r3, #96	; 0x60
 800448c:	d02b      	beq.n	80044e6 <HAL_CAN_IRQHandler+0x32a>
 800448e:	2b60      	cmp	r3, #96	; 0x60
 8004490:	d82e      	bhi.n	80044f0 <HAL_CAN_IRQHandler+0x334>
 8004492:	2b50      	cmp	r3, #80	; 0x50
 8004494:	d022      	beq.n	80044dc <HAL_CAN_IRQHandler+0x320>
 8004496:	2b50      	cmp	r3, #80	; 0x50
 8004498:	d82a      	bhi.n	80044f0 <HAL_CAN_IRQHandler+0x334>
 800449a:	2b40      	cmp	r3, #64	; 0x40
 800449c:	d019      	beq.n	80044d2 <HAL_CAN_IRQHandler+0x316>
 800449e:	2b40      	cmp	r3, #64	; 0x40
 80044a0:	d826      	bhi.n	80044f0 <HAL_CAN_IRQHandler+0x334>
 80044a2:	2b30      	cmp	r3, #48	; 0x30
 80044a4:	d010      	beq.n	80044c8 <HAL_CAN_IRQHandler+0x30c>
 80044a6:	2b30      	cmp	r3, #48	; 0x30
 80044a8:	d822      	bhi.n	80044f0 <HAL_CAN_IRQHandler+0x334>
 80044aa:	2b10      	cmp	r3, #16
 80044ac:	d002      	beq.n	80044b4 <HAL_CAN_IRQHandler+0x2f8>
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d005      	beq.n	80044be <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80044b2:	e01d      	b.n	80044f0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	f043 0308 	orr.w	r3, r3, #8
 80044ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044bc:	e019      	b.n	80044f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	f043 0310 	orr.w	r3, r3, #16
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044c6:	e014      	b.n	80044f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	f043 0320 	orr.w	r3, r3, #32
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044d0:	e00f      	b.n	80044f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044da:	e00a      	b.n	80044f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044e4:	e005      	b.n	80044f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044ee:	e000      	b.n	80044f2 <HAL_CAN_IRQHandler+0x336>
            break;
 80044f0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699a      	ldr	r2, [r3, #24]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004500:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2204      	movs	r2, #4
 8004508:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	2b00      	cmp	r3, #0
 800450e:	d008      	beq.n	8004522 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f868 	bl	80045f2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004522:	bf00      	nop
 8004524:	3728      	adds	r7, #40	; 0x28
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004552:	b480      	push	{r7}
 8004554:	b083      	sub	sp, #12
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
	...

08004608 <__NVIC_SetPriorityGrouping>:
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004618:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <__NVIC_SetPriorityGrouping+0x40>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004624:	4013      	ands	r3, r2
 8004626:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004630:	4b06      	ldr	r3, [pc, #24]	; (800464c <__NVIC_SetPriorityGrouping+0x44>)
 8004632:	4313      	orrs	r3, r2
 8004634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004636:	4a04      	ldr	r2, [pc, #16]	; (8004648 <__NVIC_SetPriorityGrouping+0x40>)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	60d3      	str	r3, [r2, #12]
}
 800463c:	bf00      	nop
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	e000ed00 	.word	0xe000ed00
 800464c:	05fa0000 	.word	0x05fa0000

08004650 <__NVIC_GetPriorityGrouping>:
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004654:	4b04      	ldr	r3, [pc, #16]	; (8004668 <__NVIC_GetPriorityGrouping+0x18>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	0a1b      	lsrs	r3, r3, #8
 800465a:	f003 0307 	and.w	r3, r3, #7
}
 800465e:	4618      	mov	r0, r3
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	e000ed00 	.word	0xe000ed00

0800466c <__NVIC_EnableIRQ>:
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467a:	2b00      	cmp	r3, #0
 800467c:	db0b      	blt.n	8004696 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	f003 021f 	and.w	r2, r3, #31
 8004684:	4907      	ldr	r1, [pc, #28]	; (80046a4 <__NVIC_EnableIRQ+0x38>)
 8004686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	2001      	movs	r0, #1
 800468e:	fa00 f202 	lsl.w	r2, r0, r2
 8004692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	e000e100 	.word	0xe000e100

080046a8 <__NVIC_SetPriority>:
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	4603      	mov	r3, r0
 80046b0:	6039      	str	r1, [r7, #0]
 80046b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	db0a      	blt.n	80046d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	490c      	ldr	r1, [pc, #48]	; (80046f4 <__NVIC_SetPriority+0x4c>)
 80046c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c6:	0112      	lsls	r2, r2, #4
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	440b      	add	r3, r1
 80046cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80046d0:	e00a      	b.n	80046e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	4908      	ldr	r1, [pc, #32]	; (80046f8 <__NVIC_SetPriority+0x50>)
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	3b04      	subs	r3, #4
 80046e0:	0112      	lsls	r2, r2, #4
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	440b      	add	r3, r1
 80046e6:	761a      	strb	r2, [r3, #24]
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	e000e100 	.word	0xe000e100
 80046f8:	e000ed00 	.word	0xe000ed00

080046fc <NVIC_EncodePriority>:
{
 80046fc:	b480      	push	{r7}
 80046fe:	b089      	sub	sp, #36	; 0x24
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f1c3 0307 	rsb	r3, r3, #7
 8004716:	2b04      	cmp	r3, #4
 8004718:	bf28      	it	cs
 800471a:	2304      	movcs	r3, #4
 800471c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	3304      	adds	r3, #4
 8004722:	2b06      	cmp	r3, #6
 8004724:	d902      	bls.n	800472c <NVIC_EncodePriority+0x30>
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	3b03      	subs	r3, #3
 800472a:	e000      	b.n	800472e <NVIC_EncodePriority+0x32>
 800472c:	2300      	movs	r3, #0
 800472e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004730:	f04f 32ff 	mov.w	r2, #4294967295
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43da      	mvns	r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	401a      	ands	r2, r3
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004744:	f04f 31ff 	mov.w	r1, #4294967295
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	fa01 f303 	lsl.w	r3, r1, r3
 800474e:	43d9      	mvns	r1, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004754:	4313      	orrs	r3, r2
}
 8004756:	4618      	mov	r0, r3
 8004758:	3724      	adds	r7, #36	; 0x24
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
	...

08004764 <SysTick_Config>:
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3b01      	subs	r3, #1
 8004770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004774:	d301      	bcc.n	800477a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004776:	2301      	movs	r3, #1
 8004778:	e00f      	b.n	800479a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800477a:	4a0a      	ldr	r2, [pc, #40]	; (80047a4 <SysTick_Config+0x40>)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3b01      	subs	r3, #1
 8004780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004782:	210f      	movs	r1, #15
 8004784:	f04f 30ff 	mov.w	r0, #4294967295
 8004788:	f7ff ff8e 	bl	80046a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800478c:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <SysTick_Config+0x40>)
 800478e:	2200      	movs	r2, #0
 8004790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004792:	4b04      	ldr	r3, [pc, #16]	; (80047a4 <SysTick_Config+0x40>)
 8004794:	2207      	movs	r2, #7
 8004796:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	e000e010 	.word	0xe000e010

080047a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff ff29 	bl	8004608 <__NVIC_SetPriorityGrouping>
}
 80047b6:	bf00      	nop
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047be:	b580      	push	{r7, lr}
 80047c0:	b086      	sub	sp, #24
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	4603      	mov	r3, r0
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	607a      	str	r2, [r7, #4]
 80047ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80047cc:	2300      	movs	r3, #0
 80047ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047d0:	f7ff ff3e 	bl	8004650 <__NVIC_GetPriorityGrouping>
 80047d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	6978      	ldr	r0, [r7, #20]
 80047dc:	f7ff ff8e 	bl	80046fc <NVIC_EncodePriority>
 80047e0:	4602      	mov	r2, r0
 80047e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047e6:	4611      	mov	r1, r2
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff ff5d 	bl	80046a8 <__NVIC_SetPriority>
}
 80047ee:	bf00      	nop
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b082      	sub	sp, #8
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	4603      	mov	r3, r0
 80047fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff ff31 	bl	800466c <__NVIC_EnableIRQ>
}
 800480a:	bf00      	nop
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b082      	sub	sp, #8
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff ffa2 	bl	8004764 <SysTick_Config>
 8004820:	4603      	mov	r3, r0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b084      	sub	sp, #16
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004836:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004838:	f7fe fbe6 	bl	8003008 <HAL_GetTick>
 800483c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d008      	beq.n	800485c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2280      	movs	r2, #128	; 0x80
 800484e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e052      	b.n	8004902 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0216 	bic.w	r2, r2, #22
 800486a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695a      	ldr	r2, [r3, #20]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800487a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	2b00      	cmp	r3, #0
 8004882:	d103      	bne.n	800488c <HAL_DMA_Abort+0x62>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004888:	2b00      	cmp	r3, #0
 800488a:	d007      	beq.n	800489c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0208 	bic.w	r2, r2, #8
 800489a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0201 	bic.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048ac:	e013      	b.n	80048d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048ae:	f7fe fbab 	bl	8003008 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b05      	cmp	r3, #5
 80048ba:	d90c      	bls.n	80048d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2220      	movs	r2, #32
 80048c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2203      	movs	r2, #3
 80048c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e015      	b.n	8004902 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1e4      	bne.n	80048ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e8:	223f      	movs	r2, #63	; 0x3f
 80048ea:	409a      	lsls	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d004      	beq.n	8004928 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2280      	movs	r2, #128	; 0x80
 8004922:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e00c      	b.n	8004942 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2205      	movs	r2, #5
 800492c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0201 	bic.w	r2, r2, #1
 800493e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
	...

08004950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004950:	b480      	push	{r7}
 8004952:	b089      	sub	sp, #36	; 0x24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800495a:	2300      	movs	r3, #0
 800495c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800495e:	2300      	movs	r3, #0
 8004960:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004962:	2300      	movs	r3, #0
 8004964:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004966:	2300      	movs	r3, #0
 8004968:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800496a:	2300      	movs	r3, #0
 800496c:	61fb      	str	r3, [r7, #28]
 800496e:	e175      	b.n	8004c5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004970:	2201      	movs	r2, #1
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	fa02 f303 	lsl.w	r3, r2, r3
 8004978:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4013      	ands	r3, r2
 8004982:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	429a      	cmp	r2, r3
 800498a:	f040 8164 	bne.w	8004c56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	2b01      	cmp	r3, #1
 8004998:	d005      	beq.n	80049a6 <HAL_GPIO_Init+0x56>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d130      	bne.n	8004a08 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	2203      	movs	r2, #3
 80049b2:	fa02 f303 	lsl.w	r3, r2, r3
 80049b6:	43db      	mvns	r3, r3
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	4013      	ands	r3, r2
 80049bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049dc:	2201      	movs	r2, #1
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
 80049e4:	43db      	mvns	r3, r3
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	4013      	ands	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	091b      	lsrs	r3, r3, #4
 80049f2:	f003 0201 	and.w	r2, r3, #1
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f003 0303 	and.w	r3, r3, #3
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d017      	beq.n	8004a44 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	2203      	movs	r2, #3
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	43db      	mvns	r3, r3
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d123      	bne.n	8004a98 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	08da      	lsrs	r2, r3, #3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3208      	adds	r2, #8
 8004a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	220f      	movs	r2, #15
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	4013      	ands	r3, r2
 8004a72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	fa02 f303 	lsl.w	r3, r2, r3
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	08da      	lsrs	r2, r3, #3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3208      	adds	r2, #8
 8004a92:	69b9      	ldr	r1, [r7, #24]
 8004a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	2203      	movs	r2, #3
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	4013      	ands	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f003 0203 	and.w	r2, r3, #3
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 80be 	beq.w	8004c56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ada:	4b66      	ldr	r3, [pc, #408]	; (8004c74 <HAL_GPIO_Init+0x324>)
 8004adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ade:	4a65      	ldr	r2, [pc, #404]	; (8004c74 <HAL_GPIO_Init+0x324>)
 8004ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ae6:	4b63      	ldr	r3, [pc, #396]	; (8004c74 <HAL_GPIO_Init+0x324>)
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004af2:	4a61      	ldr	r2, [pc, #388]	; (8004c78 <HAL_GPIO_Init+0x328>)
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	089b      	lsrs	r3, r3, #2
 8004af8:	3302      	adds	r3, #2
 8004afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	220f      	movs	r2, #15
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	4013      	ands	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a58      	ldr	r2, [pc, #352]	; (8004c7c <HAL_GPIO_Init+0x32c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d037      	beq.n	8004b8e <HAL_GPIO_Init+0x23e>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a57      	ldr	r2, [pc, #348]	; (8004c80 <HAL_GPIO_Init+0x330>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d031      	beq.n	8004b8a <HAL_GPIO_Init+0x23a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a56      	ldr	r2, [pc, #344]	; (8004c84 <HAL_GPIO_Init+0x334>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d02b      	beq.n	8004b86 <HAL_GPIO_Init+0x236>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a55      	ldr	r2, [pc, #340]	; (8004c88 <HAL_GPIO_Init+0x338>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d025      	beq.n	8004b82 <HAL_GPIO_Init+0x232>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a54      	ldr	r2, [pc, #336]	; (8004c8c <HAL_GPIO_Init+0x33c>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d01f      	beq.n	8004b7e <HAL_GPIO_Init+0x22e>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a53      	ldr	r2, [pc, #332]	; (8004c90 <HAL_GPIO_Init+0x340>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d019      	beq.n	8004b7a <HAL_GPIO_Init+0x22a>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a52      	ldr	r2, [pc, #328]	; (8004c94 <HAL_GPIO_Init+0x344>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d013      	beq.n	8004b76 <HAL_GPIO_Init+0x226>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a51      	ldr	r2, [pc, #324]	; (8004c98 <HAL_GPIO_Init+0x348>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d00d      	beq.n	8004b72 <HAL_GPIO_Init+0x222>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a50      	ldr	r2, [pc, #320]	; (8004c9c <HAL_GPIO_Init+0x34c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d007      	beq.n	8004b6e <HAL_GPIO_Init+0x21e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a4f      	ldr	r2, [pc, #316]	; (8004ca0 <HAL_GPIO_Init+0x350>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d101      	bne.n	8004b6a <HAL_GPIO_Init+0x21a>
 8004b66:	2309      	movs	r3, #9
 8004b68:	e012      	b.n	8004b90 <HAL_GPIO_Init+0x240>
 8004b6a:	230a      	movs	r3, #10
 8004b6c:	e010      	b.n	8004b90 <HAL_GPIO_Init+0x240>
 8004b6e:	2308      	movs	r3, #8
 8004b70:	e00e      	b.n	8004b90 <HAL_GPIO_Init+0x240>
 8004b72:	2307      	movs	r3, #7
 8004b74:	e00c      	b.n	8004b90 <HAL_GPIO_Init+0x240>
 8004b76:	2306      	movs	r3, #6
 8004b78:	e00a      	b.n	8004b90 <HAL_GPIO_Init+0x240>
 8004b7a:	2305      	movs	r3, #5
 8004b7c:	e008      	b.n	8004b90 <HAL_GPIO_Init+0x240>
 8004b7e:	2304      	movs	r3, #4
 8004b80:	e006      	b.n	8004b90 <HAL_GPIO_Init+0x240>
 8004b82:	2303      	movs	r3, #3
 8004b84:	e004      	b.n	8004b90 <HAL_GPIO_Init+0x240>
 8004b86:	2302      	movs	r3, #2
 8004b88:	e002      	b.n	8004b90 <HAL_GPIO_Init+0x240>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <HAL_GPIO_Init+0x240>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	69fa      	ldr	r2, [r7, #28]
 8004b92:	f002 0203 	and.w	r2, r2, #3
 8004b96:	0092      	lsls	r2, r2, #2
 8004b98:	4093      	lsls	r3, r2
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004ba0:	4935      	ldr	r1, [pc, #212]	; (8004c78 <HAL_GPIO_Init+0x328>)
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	089b      	lsrs	r3, r3, #2
 8004ba6:	3302      	adds	r3, #2
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bae:	4b3d      	ldr	r3, [pc, #244]	; (8004ca4 <HAL_GPIO_Init+0x354>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	43db      	mvns	r3, r3
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bd2:	4a34      	ldr	r2, [pc, #208]	; (8004ca4 <HAL_GPIO_Init+0x354>)
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bd8:	4b32      	ldr	r3, [pc, #200]	; (8004ca4 <HAL_GPIO_Init+0x354>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	43db      	mvns	r3, r3
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	4013      	ands	r3, r2
 8004be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bfc:	4a29      	ldr	r2, [pc, #164]	; (8004ca4 <HAL_GPIO_Init+0x354>)
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c02:	4b28      	ldr	r3, [pc, #160]	; (8004ca4 <HAL_GPIO_Init+0x354>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c26:	4a1f      	ldr	r2, [pc, #124]	; (8004ca4 <HAL_GPIO_Init+0x354>)
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ca4 <HAL_GPIO_Init+0x354>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	43db      	mvns	r3, r3
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c50:	4a14      	ldr	r2, [pc, #80]	; (8004ca4 <HAL_GPIO_Init+0x354>)
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	61fb      	str	r3, [r7, #28]
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	2b0f      	cmp	r3, #15
 8004c60:	f67f ae86 	bls.w	8004970 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop
 8004c68:	3724      	adds	r7, #36	; 0x24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40023800 	.word	0x40023800
 8004c78:	40013800 	.word	0x40013800
 8004c7c:	40020000 	.word	0x40020000
 8004c80:	40020400 	.word	0x40020400
 8004c84:	40020800 	.word	0x40020800
 8004c88:	40020c00 	.word	0x40020c00
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	40021400 	.word	0x40021400
 8004c94:	40021800 	.word	0x40021800
 8004c98:	40021c00 	.word	0x40021c00
 8004c9c:	40022000 	.word	0x40022000
 8004ca0:	40022400 	.word	0x40022400
 8004ca4:	40013c00 	.word	0x40013c00

08004ca8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691a      	ldr	r2, [r3, #16]
 8004cb8:	887b      	ldrh	r3, [r7, #2]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	73fb      	strb	r3, [r7, #15]
 8004cc4:	e001      	b.n	8004cca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	807b      	strh	r3, [r7, #2]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ce8:	787b      	ldrb	r3, [r7, #1]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cee:	887a      	ldrh	r2, [r7, #2]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004cf4:	e003      	b.n	8004cfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004cf6:	887b      	ldrh	r3, [r7, #2]
 8004cf8:	041a      	lsls	r2, r3, #16
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	619a      	str	r2, [r3, #24]
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b085      	sub	sp, #20
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	460b      	mov	r3, r1
 8004d14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d1c:	887a      	ldrh	r2, [r7, #2]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4013      	ands	r3, r2
 8004d22:	041a      	lsls	r2, r3, #16
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	43d9      	mvns	r1, r3
 8004d28:	887b      	ldrh	r3, [r7, #2]
 8004d2a:	400b      	ands	r3, r1
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	619a      	str	r2, [r3, #24]
}
 8004d32:	bf00      	nop
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
	...

08004d40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004d46:	2300      	movs	r3, #0
 8004d48:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d4a:	4b23      	ldr	r3, [pc, #140]	; (8004dd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	4a22      	ldr	r2, [pc, #136]	; (8004dd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d54:	6413      	str	r3, [r2, #64]	; 0x40
 8004d56:	4b20      	ldr	r3, [pc, #128]	; (8004dd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004d62:	4b1e      	ldr	r3, [pc, #120]	; (8004ddc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a1d      	ldr	r2, [pc, #116]	; (8004ddc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d6c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d6e:	f7fe f94b 	bl	8003008 <HAL_GetTick>
 8004d72:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d74:	e009      	b.n	8004d8a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d76:	f7fe f947 	bl	8003008 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d84:	d901      	bls.n	8004d8a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e022      	b.n	8004dd0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d8a:	4b14      	ldr	r3, [pc, #80]	; (8004ddc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d96:	d1ee      	bne.n	8004d76 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004d98:	4b10      	ldr	r3, [pc, #64]	; (8004ddc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a0f      	ldr	r2, [pc, #60]	; (8004ddc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004da2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004da4:	f7fe f930 	bl	8003008 <HAL_GetTick>
 8004da8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004daa:	e009      	b.n	8004dc0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004dac:	f7fe f92c 	bl	8003008 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dba:	d901      	bls.n	8004dc0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e007      	b.n	8004dd0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004dc0:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dcc:	d1ee      	bne.n	8004dac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	40007000 	.word	0x40007000

08004de0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004de8:	2300      	movs	r3, #0
 8004dea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e29b      	b.n	800532e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 8087 	beq.w	8004f12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e04:	4b96      	ldr	r3, [pc, #600]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f003 030c 	and.w	r3, r3, #12
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d00c      	beq.n	8004e2a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e10:	4b93      	ldr	r3, [pc, #588]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 030c 	and.w	r3, r3, #12
 8004e18:	2b08      	cmp	r3, #8
 8004e1a:	d112      	bne.n	8004e42 <HAL_RCC_OscConfig+0x62>
 8004e1c:	4b90      	ldr	r3, [pc, #576]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e28:	d10b      	bne.n	8004e42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e2a:	4b8d      	ldr	r3, [pc, #564]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d06c      	beq.n	8004f10 <HAL_RCC_OscConfig+0x130>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d168      	bne.n	8004f10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e275      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e4a:	d106      	bne.n	8004e5a <HAL_RCC_OscConfig+0x7a>
 8004e4c:	4b84      	ldr	r3, [pc, #528]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a83      	ldr	r2, [pc, #524]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	e02e      	b.n	8004eb8 <HAL_RCC_OscConfig+0xd8>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10c      	bne.n	8004e7c <HAL_RCC_OscConfig+0x9c>
 8004e62:	4b7f      	ldr	r3, [pc, #508]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a7e      	ldr	r2, [pc, #504]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	4b7c      	ldr	r3, [pc, #496]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a7b      	ldr	r2, [pc, #492]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	e01d      	b.n	8004eb8 <HAL_RCC_OscConfig+0xd8>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e84:	d10c      	bne.n	8004ea0 <HAL_RCC_OscConfig+0xc0>
 8004e86:	4b76      	ldr	r3, [pc, #472]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a75      	ldr	r2, [pc, #468]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	4b73      	ldr	r3, [pc, #460]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a72      	ldr	r2, [pc, #456]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	e00b      	b.n	8004eb8 <HAL_RCC_OscConfig+0xd8>
 8004ea0:	4b6f      	ldr	r3, [pc, #444]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a6e      	ldr	r2, [pc, #440]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eaa:	6013      	str	r3, [r2, #0]
 8004eac:	4b6c      	ldr	r3, [pc, #432]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a6b      	ldr	r2, [pc, #428]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d013      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec0:	f7fe f8a2 	bl	8003008 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ec8:	f7fe f89e 	bl	8003008 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b64      	cmp	r3, #100	; 0x64
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e229      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eda:	4b61      	ldr	r3, [pc, #388]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0f0      	beq.n	8004ec8 <HAL_RCC_OscConfig+0xe8>
 8004ee6:	e014      	b.n	8004f12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee8:	f7fe f88e 	bl	8003008 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ef0:	f7fe f88a 	bl	8003008 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b64      	cmp	r3, #100	; 0x64
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e215      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f02:	4b57      	ldr	r3, [pc, #348]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f0      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x110>
 8004f0e:	e000      	b.n	8004f12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d069      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f1e:	4b50      	ldr	r3, [pc, #320]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 030c 	and.w	r3, r3, #12
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00b      	beq.n	8004f42 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f2a:	4b4d      	ldr	r3, [pc, #308]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 030c 	and.w	r3, r3, #12
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d11c      	bne.n	8004f70 <HAL_RCC_OscConfig+0x190>
 8004f36:	4b4a      	ldr	r3, [pc, #296]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d116      	bne.n	8004f70 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f42:	4b47      	ldr	r3, [pc, #284]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d005      	beq.n	8004f5a <HAL_RCC_OscConfig+0x17a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d001      	beq.n	8004f5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e1e9      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f5a:	4b41      	ldr	r3, [pc, #260]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	493d      	ldr	r1, [pc, #244]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f6e:	e040      	b.n	8004ff2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d023      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f78:	4b39      	ldr	r3, [pc, #228]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a38      	ldr	r2, [pc, #224]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004f7e:	f043 0301 	orr.w	r3, r3, #1
 8004f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f84:	f7fe f840 	bl	8003008 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f8c:	f7fe f83c 	bl	8003008 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e1c7      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f9e:	4b30      	ldr	r3, [pc, #192]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0f0      	beq.n	8004f8c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004faa:	4b2d      	ldr	r3, [pc, #180]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	4929      	ldr	r1, [pc, #164]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	600b      	str	r3, [r1, #0]
 8004fbe:	e018      	b.n	8004ff2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fc0:	4b27      	ldr	r3, [pc, #156]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a26      	ldr	r2, [pc, #152]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004fc6:	f023 0301 	bic.w	r3, r3, #1
 8004fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fcc:	f7fe f81c 	bl	8003008 <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fd4:	f7fe f818 	bl	8003008 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e1a3      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fe6:	4b1e      	ldr	r3, [pc, #120]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d038      	beq.n	8005070 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d019      	beq.n	800503a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005006:	4b16      	ldr	r3, [pc, #88]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8005008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800500a:	4a15      	ldr	r2, [pc, #84]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 800500c:	f043 0301 	orr.w	r3, r3, #1
 8005010:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005012:	f7fd fff9 	bl	8003008 <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800501a:	f7fd fff5 	bl	8003008 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e180      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800502c:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 800502e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0f0      	beq.n	800501a <HAL_RCC_OscConfig+0x23a>
 8005038:	e01a      	b.n	8005070 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800503a:	4b09      	ldr	r3, [pc, #36]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 800503c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800503e:	4a08      	ldr	r2, [pc, #32]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8005040:	f023 0301 	bic.w	r3, r3, #1
 8005044:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005046:	f7fd ffdf 	bl	8003008 <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800504c:	e00a      	b.n	8005064 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800504e:	f7fd ffdb 	bl	8003008 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d903      	bls.n	8005064 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e166      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
 8005060:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005064:	4b92      	ldr	r3, [pc, #584]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1ee      	bne.n	800504e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 80a4 	beq.w	80051c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800507e:	4b8c      	ldr	r3, [pc, #560]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10d      	bne.n	80050a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800508a:	4b89      	ldr	r3, [pc, #548]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	4a88      	ldr	r2, [pc, #544]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005094:	6413      	str	r3, [r2, #64]	; 0x40
 8005096:	4b86      	ldr	r3, [pc, #536]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800509e:	60bb      	str	r3, [r7, #8]
 80050a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050a2:	2301      	movs	r3, #1
 80050a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050a6:	4b83      	ldr	r3, [pc, #524]	; (80052b4 <HAL_RCC_OscConfig+0x4d4>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d118      	bne.n	80050e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80050b2:	4b80      	ldr	r3, [pc, #512]	; (80052b4 <HAL_RCC_OscConfig+0x4d4>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a7f      	ldr	r2, [pc, #508]	; (80052b4 <HAL_RCC_OscConfig+0x4d4>)
 80050b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050be:	f7fd ffa3 	bl	8003008 <HAL_GetTick>
 80050c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050c4:	e008      	b.n	80050d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c6:	f7fd ff9f 	bl	8003008 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b64      	cmp	r3, #100	; 0x64
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e12a      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050d8:	4b76      	ldr	r3, [pc, #472]	; (80052b4 <HAL_RCC_OscConfig+0x4d4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0f0      	beq.n	80050c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d106      	bne.n	80050fa <HAL_RCC_OscConfig+0x31a>
 80050ec:	4b70      	ldr	r3, [pc, #448]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 80050ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f0:	4a6f      	ldr	r2, [pc, #444]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 80050f2:	f043 0301 	orr.w	r3, r3, #1
 80050f6:	6713      	str	r3, [r2, #112]	; 0x70
 80050f8:	e02d      	b.n	8005156 <HAL_RCC_OscConfig+0x376>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10c      	bne.n	800511c <HAL_RCC_OscConfig+0x33c>
 8005102:	4b6b      	ldr	r3, [pc, #428]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005106:	4a6a      	ldr	r2, [pc, #424]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005108:	f023 0301 	bic.w	r3, r3, #1
 800510c:	6713      	str	r3, [r2, #112]	; 0x70
 800510e:	4b68      	ldr	r3, [pc, #416]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005112:	4a67      	ldr	r2, [pc, #412]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005114:	f023 0304 	bic.w	r3, r3, #4
 8005118:	6713      	str	r3, [r2, #112]	; 0x70
 800511a:	e01c      	b.n	8005156 <HAL_RCC_OscConfig+0x376>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b05      	cmp	r3, #5
 8005122:	d10c      	bne.n	800513e <HAL_RCC_OscConfig+0x35e>
 8005124:	4b62      	ldr	r3, [pc, #392]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005128:	4a61      	ldr	r2, [pc, #388]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 800512a:	f043 0304 	orr.w	r3, r3, #4
 800512e:	6713      	str	r3, [r2, #112]	; 0x70
 8005130:	4b5f      	ldr	r3, [pc, #380]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005134:	4a5e      	ldr	r2, [pc, #376]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005136:	f043 0301 	orr.w	r3, r3, #1
 800513a:	6713      	str	r3, [r2, #112]	; 0x70
 800513c:	e00b      	b.n	8005156 <HAL_RCC_OscConfig+0x376>
 800513e:	4b5c      	ldr	r3, [pc, #368]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005142:	4a5b      	ldr	r2, [pc, #364]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005144:	f023 0301 	bic.w	r3, r3, #1
 8005148:	6713      	str	r3, [r2, #112]	; 0x70
 800514a:	4b59      	ldr	r3, [pc, #356]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 800514c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514e:	4a58      	ldr	r2, [pc, #352]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005150:	f023 0304 	bic.w	r3, r3, #4
 8005154:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d015      	beq.n	800518a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515e:	f7fd ff53 	bl	8003008 <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005164:	e00a      	b.n	800517c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005166:	f7fd ff4f 	bl	8003008 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	f241 3288 	movw	r2, #5000	; 0x1388
 8005174:	4293      	cmp	r3, r2
 8005176:	d901      	bls.n	800517c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e0d8      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800517c:	4b4c      	ldr	r3, [pc, #304]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 800517e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d0ee      	beq.n	8005166 <HAL_RCC_OscConfig+0x386>
 8005188:	e014      	b.n	80051b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518a:	f7fd ff3d 	bl	8003008 <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005190:	e00a      	b.n	80051a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005192:	f7fd ff39 	bl	8003008 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d901      	bls.n	80051a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e0c2      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051a8:	4b41      	ldr	r3, [pc, #260]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 80051aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1ee      	bne.n	8005192 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051b4:	7dfb      	ldrb	r3, [r7, #23]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d105      	bne.n	80051c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ba:	4b3d      	ldr	r3, [pc, #244]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	4a3c      	ldr	r2, [pc, #240]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 80051c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 80ae 	beq.w	800532c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051d0:	4b37      	ldr	r3, [pc, #220]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 030c 	and.w	r3, r3, #12
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d06d      	beq.n	80052b8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d14b      	bne.n	800527c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e4:	4b32      	ldr	r3, [pc, #200]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a31      	ldr	r2, [pc, #196]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 80051ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f0:	f7fd ff0a 	bl	8003008 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f8:	f7fd ff06 	bl	8003008 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e091      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800520a:	4b29      	ldr	r3, [pc, #164]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f0      	bne.n	80051f8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	69da      	ldr	r2, [r3, #28]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	019b      	lsls	r3, r3, #6
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522c:	085b      	lsrs	r3, r3, #1
 800522e:	3b01      	subs	r3, #1
 8005230:	041b      	lsls	r3, r3, #16
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005238:	061b      	lsls	r3, r3, #24
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005240:	071b      	lsls	r3, r3, #28
 8005242:	491b      	ldr	r1, [pc, #108]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005244:	4313      	orrs	r3, r2
 8005246:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005248:	4b19      	ldr	r3, [pc, #100]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a18      	ldr	r2, [pc, #96]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 800524e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005254:	f7fd fed8 	bl	8003008 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800525c:	f7fd fed4 	bl	8003008 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e05f      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800526e:	4b10      	ldr	r3, [pc, #64]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0f0      	beq.n	800525c <HAL_RCC_OscConfig+0x47c>
 800527a:	e057      	b.n	800532c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800527c:	4b0c      	ldr	r3, [pc, #48]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a0b      	ldr	r2, [pc, #44]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005288:	f7fd febe 	bl	8003008 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005290:	f7fd feba 	bl	8003008 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e045      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052a2:	4b03      	ldr	r3, [pc, #12]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f0      	bne.n	8005290 <HAL_RCC_OscConfig+0x4b0>
 80052ae:	e03d      	b.n	800532c <HAL_RCC_OscConfig+0x54c>
 80052b0:	40023800 	.word	0x40023800
 80052b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80052b8:	4b1f      	ldr	r3, [pc, #124]	; (8005338 <HAL_RCC_OscConfig+0x558>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d030      	beq.n	8005328 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d129      	bne.n	8005328 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052de:	429a      	cmp	r2, r3
 80052e0:	d122      	bne.n	8005328 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052e8:	4013      	ands	r3, r2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d119      	bne.n	8005328 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	085b      	lsrs	r3, r3, #1
 8005300:	3b01      	subs	r3, #1
 8005302:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005304:	429a      	cmp	r2, r3
 8005306:	d10f      	bne.n	8005328 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005314:	429a      	cmp	r2, r3
 8005316:	d107      	bne.n	8005328 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005324:	429a      	cmp	r2, r3
 8005326:	d001      	beq.n	800532c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e000      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40023800 	.word	0x40023800

0800533c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005346:	2300      	movs	r3, #0
 8005348:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e0d0      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005354:	4b6a      	ldr	r3, [pc, #424]	; (8005500 <HAL_RCC_ClockConfig+0x1c4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 030f 	and.w	r3, r3, #15
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d910      	bls.n	8005384 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005362:	4b67      	ldr	r3, [pc, #412]	; (8005500 <HAL_RCC_ClockConfig+0x1c4>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f023 020f 	bic.w	r2, r3, #15
 800536a:	4965      	ldr	r1, [pc, #404]	; (8005500 <HAL_RCC_ClockConfig+0x1c4>)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	4313      	orrs	r3, r2
 8005370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005372:	4b63      	ldr	r3, [pc, #396]	; (8005500 <HAL_RCC_ClockConfig+0x1c4>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	429a      	cmp	r2, r3
 800537e:	d001      	beq.n	8005384 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e0b8      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d020      	beq.n	80053d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0304 	and.w	r3, r3, #4
 8005398:	2b00      	cmp	r3, #0
 800539a:	d005      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800539c:	4b59      	ldr	r3, [pc, #356]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	4a58      	ldr	r2, [pc, #352]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 80053a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0308 	and.w	r3, r3, #8
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053b4:	4b53      	ldr	r3, [pc, #332]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	4a52      	ldr	r2, [pc, #328]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 80053ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053c0:	4b50      	ldr	r3, [pc, #320]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	494d      	ldr	r1, [pc, #308]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d040      	beq.n	8005460 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d107      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053e6:	4b47      	ldr	r3, [pc, #284]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d115      	bne.n	800541e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e07f      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d107      	bne.n	800540e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053fe:	4b41      	ldr	r3, [pc, #260]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d109      	bne.n	800541e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e073      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800540e:	4b3d      	ldr	r3, [pc, #244]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e06b      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800541e:	4b39      	ldr	r3, [pc, #228]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f023 0203 	bic.w	r2, r3, #3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	4936      	ldr	r1, [pc, #216]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 800542c:	4313      	orrs	r3, r2
 800542e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005430:	f7fd fdea 	bl	8003008 <HAL_GetTick>
 8005434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005436:	e00a      	b.n	800544e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005438:	f7fd fde6 	bl	8003008 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	f241 3288 	movw	r2, #5000	; 0x1388
 8005446:	4293      	cmp	r3, r2
 8005448:	d901      	bls.n	800544e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e053      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544e:	4b2d      	ldr	r3, [pc, #180]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 020c 	and.w	r2, r3, #12
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	429a      	cmp	r2, r3
 800545e:	d1eb      	bne.n	8005438 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005460:	4b27      	ldr	r3, [pc, #156]	; (8005500 <HAL_RCC_ClockConfig+0x1c4>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 030f 	and.w	r3, r3, #15
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	429a      	cmp	r2, r3
 800546c:	d210      	bcs.n	8005490 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800546e:	4b24      	ldr	r3, [pc, #144]	; (8005500 <HAL_RCC_ClockConfig+0x1c4>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f023 020f 	bic.w	r2, r3, #15
 8005476:	4922      	ldr	r1, [pc, #136]	; (8005500 <HAL_RCC_ClockConfig+0x1c4>)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	4313      	orrs	r3, r2
 800547c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800547e:	4b20      	ldr	r3, [pc, #128]	; (8005500 <HAL_RCC_ClockConfig+0x1c4>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d001      	beq.n	8005490 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e032      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d008      	beq.n	80054ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800549c:	4b19      	ldr	r3, [pc, #100]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	4916      	ldr	r1, [pc, #88]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0308 	and.w	r3, r3, #8
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d009      	beq.n	80054ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054ba:	4b12      	ldr	r3, [pc, #72]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	490e      	ldr	r1, [pc, #56]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054ce:	f000 f821 	bl	8005514 <HAL_RCC_GetSysClockFreq>
 80054d2:	4602      	mov	r2, r0
 80054d4:	4b0b      	ldr	r3, [pc, #44]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	091b      	lsrs	r3, r3, #4
 80054da:	f003 030f 	and.w	r3, r3, #15
 80054de:	490a      	ldr	r1, [pc, #40]	; (8005508 <HAL_RCC_ClockConfig+0x1cc>)
 80054e0:	5ccb      	ldrb	r3, [r1, r3]
 80054e2:	fa22 f303 	lsr.w	r3, r2, r3
 80054e6:	4a09      	ldr	r2, [pc, #36]	; (800550c <HAL_RCC_ClockConfig+0x1d0>)
 80054e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054ea:	4b09      	ldr	r3, [pc, #36]	; (8005510 <HAL_RCC_ClockConfig+0x1d4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fd fd46 	bl	8002f80 <HAL_InitTick>

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	40023c00 	.word	0x40023c00
 8005504:	40023800 	.word	0x40023800
 8005508:	080083f8 	.word	0x080083f8
 800550c:	20000000 	.word	0x20000000
 8005510:	20000004 	.word	0x20000004

08005514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005518:	b090      	sub	sp, #64	; 0x40
 800551a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800551c:	2300      	movs	r3, #0
 800551e:	637b      	str	r3, [r7, #52]	; 0x34
 8005520:	2300      	movs	r3, #0
 8005522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005524:	2300      	movs	r3, #0
 8005526:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8005528:	2300      	movs	r3, #0
 800552a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800552c:	4b59      	ldr	r3, [pc, #356]	; (8005694 <HAL_RCC_GetSysClockFreq+0x180>)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f003 030c 	and.w	r3, r3, #12
 8005534:	2b08      	cmp	r3, #8
 8005536:	d00d      	beq.n	8005554 <HAL_RCC_GetSysClockFreq+0x40>
 8005538:	2b08      	cmp	r3, #8
 800553a:	f200 80a1 	bhi.w	8005680 <HAL_RCC_GetSysClockFreq+0x16c>
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <HAL_RCC_GetSysClockFreq+0x34>
 8005542:	2b04      	cmp	r3, #4
 8005544:	d003      	beq.n	800554e <HAL_RCC_GetSysClockFreq+0x3a>
 8005546:	e09b      	b.n	8005680 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005548:	4b53      	ldr	r3, [pc, #332]	; (8005698 <HAL_RCC_GetSysClockFreq+0x184>)
 800554a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800554c:	e09b      	b.n	8005686 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800554e:	4b53      	ldr	r3, [pc, #332]	; (800569c <HAL_RCC_GetSysClockFreq+0x188>)
 8005550:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005552:	e098      	b.n	8005686 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005554:	4b4f      	ldr	r3, [pc, #316]	; (8005694 <HAL_RCC_GetSysClockFreq+0x180>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800555c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800555e:	4b4d      	ldr	r3, [pc, #308]	; (8005694 <HAL_RCC_GetSysClockFreq+0x180>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d028      	beq.n	80055bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800556a:	4b4a      	ldr	r3, [pc, #296]	; (8005694 <HAL_RCC_GetSysClockFreq+0x180>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	099b      	lsrs	r3, r3, #6
 8005570:	2200      	movs	r2, #0
 8005572:	623b      	str	r3, [r7, #32]
 8005574:	627a      	str	r2, [r7, #36]	; 0x24
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800557c:	2100      	movs	r1, #0
 800557e:	4b47      	ldr	r3, [pc, #284]	; (800569c <HAL_RCC_GetSysClockFreq+0x188>)
 8005580:	fb03 f201 	mul.w	r2, r3, r1
 8005584:	2300      	movs	r3, #0
 8005586:	fb00 f303 	mul.w	r3, r0, r3
 800558a:	4413      	add	r3, r2
 800558c:	4a43      	ldr	r2, [pc, #268]	; (800569c <HAL_RCC_GetSysClockFreq+0x188>)
 800558e:	fba0 1202 	umull	r1, r2, r0, r2
 8005592:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005594:	460a      	mov	r2, r1
 8005596:	62ba      	str	r2, [r7, #40]	; 0x28
 8005598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800559a:	4413      	add	r3, r2
 800559c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800559e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a0:	2200      	movs	r2, #0
 80055a2:	61bb      	str	r3, [r7, #24]
 80055a4:	61fa      	str	r2, [r7, #28]
 80055a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80055ae:	f7fa fe4b 	bl	8000248 <__aeabi_uldivmod>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4613      	mov	r3, r2
 80055b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ba:	e053      	b.n	8005664 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055bc:	4b35      	ldr	r3, [pc, #212]	; (8005694 <HAL_RCC_GetSysClockFreq+0x180>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	099b      	lsrs	r3, r3, #6
 80055c2:	2200      	movs	r2, #0
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	617a      	str	r2, [r7, #20]
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80055ce:	f04f 0b00 	mov.w	fp, #0
 80055d2:	4652      	mov	r2, sl
 80055d4:	465b      	mov	r3, fp
 80055d6:	f04f 0000 	mov.w	r0, #0
 80055da:	f04f 0100 	mov.w	r1, #0
 80055de:	0159      	lsls	r1, r3, #5
 80055e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055e4:	0150      	lsls	r0, r2, #5
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	ebb2 080a 	subs.w	r8, r2, sl
 80055ee:	eb63 090b 	sbc.w	r9, r3, fp
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	f04f 0300 	mov.w	r3, #0
 80055fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80055fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005602:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005606:	ebb2 0408 	subs.w	r4, r2, r8
 800560a:	eb63 0509 	sbc.w	r5, r3, r9
 800560e:	f04f 0200 	mov.w	r2, #0
 8005612:	f04f 0300 	mov.w	r3, #0
 8005616:	00eb      	lsls	r3, r5, #3
 8005618:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800561c:	00e2      	lsls	r2, r4, #3
 800561e:	4614      	mov	r4, r2
 8005620:	461d      	mov	r5, r3
 8005622:	eb14 030a 	adds.w	r3, r4, sl
 8005626:	603b      	str	r3, [r7, #0]
 8005628:	eb45 030b 	adc.w	r3, r5, fp
 800562c:	607b      	str	r3, [r7, #4]
 800562e:	f04f 0200 	mov.w	r2, #0
 8005632:	f04f 0300 	mov.w	r3, #0
 8005636:	e9d7 4500 	ldrd	r4, r5, [r7]
 800563a:	4629      	mov	r1, r5
 800563c:	028b      	lsls	r3, r1, #10
 800563e:	4621      	mov	r1, r4
 8005640:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005644:	4621      	mov	r1, r4
 8005646:	028a      	lsls	r2, r1, #10
 8005648:	4610      	mov	r0, r2
 800564a:	4619      	mov	r1, r3
 800564c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564e:	2200      	movs	r2, #0
 8005650:	60bb      	str	r3, [r7, #8]
 8005652:	60fa      	str	r2, [r7, #12]
 8005654:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005658:	f7fa fdf6 	bl	8000248 <__aeabi_uldivmod>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4613      	mov	r3, r2
 8005662:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005664:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <HAL_RCC_GetSysClockFreq+0x180>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	0c1b      	lsrs	r3, r3, #16
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	3301      	adds	r3, #1
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8005674:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	fbb2 f3f3 	udiv	r3, r2, r3
 800567c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800567e:	e002      	b.n	8005686 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005680:	4b05      	ldr	r3, [pc, #20]	; (8005698 <HAL_RCC_GetSysClockFreq+0x184>)
 8005682:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005684:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005688:	4618      	mov	r0, r3
 800568a:	3740      	adds	r7, #64	; 0x40
 800568c:	46bd      	mov	sp, r7
 800568e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005692:	bf00      	nop
 8005694:	40023800 	.word	0x40023800
 8005698:	00f42400 	.word	0x00f42400
 800569c:	017d7840 	.word	0x017d7840

080056a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056a0:	b480      	push	{r7}
 80056a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056a4:	4b03      	ldr	r3, [pc, #12]	; (80056b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80056a6:	681b      	ldr	r3, [r3, #0]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	20000000 	.word	0x20000000

080056b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056bc:	f7ff fff0 	bl	80056a0 <HAL_RCC_GetHCLKFreq>
 80056c0:	4602      	mov	r2, r0
 80056c2:	4b05      	ldr	r3, [pc, #20]	; (80056d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	0a9b      	lsrs	r3, r3, #10
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	4903      	ldr	r1, [pc, #12]	; (80056dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80056ce:	5ccb      	ldrb	r3, [r1, r3]
 80056d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	40023800 	.word	0x40023800
 80056dc:	08008408 	.word	0x08008408

080056e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80056e4:	f7ff ffdc 	bl	80056a0 <HAL_RCC_GetHCLKFreq>
 80056e8:	4602      	mov	r2, r0
 80056ea:	4b05      	ldr	r3, [pc, #20]	; (8005700 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	0b5b      	lsrs	r3, r3, #13
 80056f0:	f003 0307 	and.w	r3, r3, #7
 80056f4:	4903      	ldr	r1, [pc, #12]	; (8005704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056f6:	5ccb      	ldrb	r3, [r1, r3]
 80056f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	40023800 	.word	0x40023800
 8005704:	08008408 	.word	0x08008408

08005708 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b088      	sub	sp, #32
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005710:	2300      	movs	r3, #0
 8005712:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005714:	2300      	movs	r3, #0
 8005716:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800571c:	2300      	movs	r3, #0
 800571e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005720:	2300      	movs	r3, #0
 8005722:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d012      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005730:	4b69      	ldr	r3, [pc, #420]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	4a68      	ldr	r2, [pc, #416]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005736:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800573a:	6093      	str	r3, [r2, #8]
 800573c:	4b66      	ldr	r3, [pc, #408]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005744:	4964      	ldr	r1, [pc, #400]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005746:	4313      	orrs	r3, r2
 8005748:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005752:	2301      	movs	r3, #1
 8005754:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d017      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005762:	4b5d      	ldr	r3, [pc, #372]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005768:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005770:	4959      	ldr	r1, [pc, #356]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005772:	4313      	orrs	r3, r2
 8005774:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005780:	d101      	bne.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005782:	2301      	movs	r3, #1
 8005784:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800578e:	2301      	movs	r3, #1
 8005790:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d017      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800579e:	4b4e      	ldr	r3, [pc, #312]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	494a      	ldr	r1, [pc, #296]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057bc:	d101      	bne.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80057be:	2301      	movs	r3, #1
 80057c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80057ca:	2301      	movs	r3, #1
 80057cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80057da:	2301      	movs	r3, #1
 80057dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 808b 	beq.w	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80057ec:	4b3a      	ldr	r3, [pc, #232]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f0:	4a39      	ldr	r2, [pc, #228]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057f6:	6413      	str	r3, [r2, #64]	; 0x40
 80057f8:	4b37      	ldr	r3, [pc, #220]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005800:	60bb      	str	r3, [r7, #8]
 8005802:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005804:	4b35      	ldr	r3, [pc, #212]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a34      	ldr	r2, [pc, #208]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800580a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800580e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005810:	f7fd fbfa 	bl	8003008 <HAL_GetTick>
 8005814:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005816:	e008      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005818:	f7fd fbf6 	bl	8003008 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b64      	cmp	r3, #100	; 0x64
 8005824:	d901      	bls.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e38f      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800582a:	4b2c      	ldr	r3, [pc, #176]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0f0      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005836:	4b28      	ldr	r3, [pc, #160]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800583e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d035      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	429a      	cmp	r2, r3
 8005852:	d02e      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005854:	4b20      	ldr	r3, [pc, #128]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800585c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800585e:	4b1e      	ldr	r3, [pc, #120]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005862:	4a1d      	ldr	r2, [pc, #116]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005868:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800586a:	4b1b      	ldr	r3, [pc, #108]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800586c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586e:	4a1a      	ldr	r2, [pc, #104]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005874:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005876:	4a18      	ldr	r2, [pc, #96]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800587c:	4b16      	ldr	r3, [pc, #88]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800587e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b01      	cmp	r3, #1
 8005886:	d114      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005888:	f7fd fbbe 	bl	8003008 <HAL_GetTick>
 800588c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800588e:	e00a      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005890:	f7fd fbba 	bl	8003008 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	f241 3288 	movw	r2, #5000	; 0x1388
 800589e:	4293      	cmp	r3, r2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e351      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058a6:	4b0c      	ldr	r3, [pc, #48]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0ee      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058be:	d111      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80058c0:	4b05      	ldr	r3, [pc, #20]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80058cc:	4b04      	ldr	r3, [pc, #16]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80058ce:	400b      	ands	r3, r1
 80058d0:	4901      	ldr	r1, [pc, #4]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	608b      	str	r3, [r1, #8]
 80058d6:	e00b      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80058d8:	40023800 	.word	0x40023800
 80058dc:	40007000 	.word	0x40007000
 80058e0:	0ffffcff 	.word	0x0ffffcff
 80058e4:	4bac      	ldr	r3, [pc, #688]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	4aab      	ldr	r2, [pc, #684]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80058ee:	6093      	str	r3, [r2, #8]
 80058f0:	4ba9      	ldr	r3, [pc, #676]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058fc:	49a6      	ldr	r1, [pc, #664]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0310 	and.w	r3, r3, #16
 800590a:	2b00      	cmp	r3, #0
 800590c:	d010      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800590e:	4ba2      	ldr	r3, [pc, #648]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005914:	4aa0      	ldr	r2, [pc, #640]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800591a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800591e:	4b9e      	ldr	r3, [pc, #632]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005920:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005928:	499b      	ldr	r1, [pc, #620]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800592a:	4313      	orrs	r3, r2
 800592c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00a      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800593c:	4b96      	ldr	r3, [pc, #600]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800593e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005942:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800594a:	4993      	ldr	r1, [pc, #588]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800594c:	4313      	orrs	r3, r2
 800594e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00a      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800595e:	4b8e      	ldr	r3, [pc, #568]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005964:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800596c:	498a      	ldr	r1, [pc, #552]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800596e:	4313      	orrs	r3, r2
 8005970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00a      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005980:	4b85      	ldr	r3, [pc, #532]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005986:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800598e:	4982      	ldr	r1, [pc, #520]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005990:	4313      	orrs	r3, r2
 8005992:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00a      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059a2:	4b7d      	ldr	r3, [pc, #500]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b0:	4979      	ldr	r1, [pc, #484]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00a      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059c4:	4b74      	ldr	r3, [pc, #464]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ca:	f023 0203 	bic.w	r2, r3, #3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d2:	4971      	ldr	r1, [pc, #452]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059e6:	4b6c      	ldr	r3, [pc, #432]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ec:	f023 020c 	bic.w	r2, r3, #12
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059f4:	4968      	ldr	r1, [pc, #416]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00a      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a08:	4b63      	ldr	r3, [pc, #396]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a16:	4960      	ldr	r1, [pc, #384]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a2a:	4b5b      	ldr	r3, [pc, #364]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a38:	4957      	ldr	r1, [pc, #348]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00a      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a4c:	4b52      	ldr	r3, [pc, #328]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5a:	494f      	ldr	r1, [pc, #316]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005a6e:	4b4a      	ldr	r3, [pc, #296]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a7c:	4946      	ldr	r1, [pc, #280]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00a      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005a90:	4b41      	ldr	r3, [pc, #260]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a9e:	493e      	ldr	r1, [pc, #248]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00a      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005ab2:	4b39      	ldr	r3, [pc, #228]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac0:	4935      	ldr	r1, [pc, #212]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00a      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ad4:	4b30      	ldr	r3, [pc, #192]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ada:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ae2:	492d      	ldr	r1, [pc, #180]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d011      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005af6:	4b28      	ldr	r3, [pc, #160]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b04:	4924      	ldr	r1, [pc, #144]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b14:	d101      	bne.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005b16:	2301      	movs	r3, #1
 8005b18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0308 	and.w	r3, r3, #8
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005b26:	2301      	movs	r3, #1
 8005b28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00a      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b36:	4b18      	ldr	r3, [pc, #96]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b44:	4914      	ldr	r1, [pc, #80]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00b      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b58:	4b0f      	ldr	r3, [pc, #60]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b68:	490b      	ldr	r1, [pc, #44]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00f      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005b7c:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b8c:	4902      	ldr	r1, [pc, #8]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005b94:	e002      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005b96:	bf00      	nop
 8005b98:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00b      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ba8:	4b8a      	ldr	r3, [pc, #552]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb8:	4986      	ldr	r1, [pc, #536]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00b      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005bcc:	4b81      	ldr	r3, [pc, #516]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bd2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bdc:	497d      	ldr	r1, [pc, #500]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d006      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 80d6 	beq.w	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005bf8:	4b76      	ldr	r3, [pc, #472]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a75      	ldr	r2, [pc, #468]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bfe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c04:	f7fd fa00 	bl	8003008 <HAL_GetTick>
 8005c08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c0a:	e008      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c0c:	f7fd f9fc 	bl	8003008 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b64      	cmp	r3, #100	; 0x64
 8005c18:	d901      	bls.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e195      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c1e:	4b6d      	ldr	r3, [pc, #436]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1f0      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d021      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d11d      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005c3e:	4b65      	ldr	r3, [pc, #404]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c44:	0c1b      	lsrs	r3, r3, #16
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005c4c:	4b61      	ldr	r3, [pc, #388]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c52:	0e1b      	lsrs	r3, r3, #24
 8005c54:	f003 030f 	and.w	r3, r3, #15
 8005c58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	019a      	lsls	r2, r3, #6
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	041b      	lsls	r3, r3, #16
 8005c64:	431a      	orrs	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	061b      	lsls	r3, r3, #24
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	071b      	lsls	r3, r3, #28
 8005c72:	4958      	ldr	r1, [pc, #352]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d004      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c8e:	d00a      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d02e      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ca4:	d129      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005ca6:	4b4b      	ldr	r3, [pc, #300]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cac:	0c1b      	lsrs	r3, r3, #16
 8005cae:	f003 0303 	and.w	r3, r3, #3
 8005cb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005cb4:	4b47      	ldr	r3, [pc, #284]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cba:	0f1b      	lsrs	r3, r3, #28
 8005cbc:	f003 0307 	and.w	r3, r3, #7
 8005cc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	019a      	lsls	r2, r3, #6
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	041b      	lsls	r3, r3, #16
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	061b      	lsls	r3, r3, #24
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	071b      	lsls	r3, r3, #28
 8005cda:	493e      	ldr	r1, [pc, #248]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005ce2:	4b3c      	ldr	r3, [pc, #240]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ce8:	f023 021f 	bic.w	r2, r3, #31
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	4938      	ldr	r1, [pc, #224]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d01d      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d06:	4b33      	ldr	r3, [pc, #204]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d0c:	0e1b      	lsrs	r3, r3, #24
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d14:	4b2f      	ldr	r3, [pc, #188]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d1a:	0f1b      	lsrs	r3, r3, #28
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	019a      	lsls	r2, r3, #6
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	041b      	lsls	r3, r3, #16
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	061b      	lsls	r3, r3, #24
 8005d34:	431a      	orrs	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	071b      	lsls	r3, r3, #28
 8005d3a:	4926      	ldr	r1, [pc, #152]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d011      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	019a      	lsls	r2, r3, #6
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	041b      	lsls	r3, r3, #16
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	061b      	lsls	r3, r3, #24
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	071b      	lsls	r3, r3, #28
 8005d6a:	491a      	ldr	r1, [pc, #104]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d72:	4b18      	ldr	r3, [pc, #96]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a17      	ldr	r2, [pc, #92]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d7e:	f7fd f943 	bl	8003008 <HAL_GetTick>
 8005d82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d84:	e008      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d86:	f7fd f93f 	bl	8003008 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	2b64      	cmp	r3, #100	; 0x64
 8005d92:	d901      	bls.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e0d8      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d98:	4b0e      	ldr	r3, [pc, #56]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0f0      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	f040 80ce 	bne.w	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005dac:	4b09      	ldr	r3, [pc, #36]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a08      	ldr	r2, [pc, #32]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005db2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005db6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005db8:	f7fd f926 	bl	8003008 <HAL_GetTick>
 8005dbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005dbe:	e00b      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005dc0:	f7fd f922 	bl	8003008 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b64      	cmp	r3, #100	; 0x64
 8005dcc:	d904      	bls.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e0bb      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005dd2:	bf00      	nop
 8005dd4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005dd8:	4b5e      	ldr	r3, [pc, #376]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005de4:	d0ec      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d009      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d02e      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d12a      	bne.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005e0e:	4b51      	ldr	r3, [pc, #324]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e14:	0c1b      	lsrs	r3, r3, #16
 8005e16:	f003 0303 	and.w	r3, r3, #3
 8005e1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e1c:	4b4d      	ldr	r3, [pc, #308]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e22:	0f1b      	lsrs	r3, r3, #28
 8005e24:	f003 0307 	and.w	r3, r3, #7
 8005e28:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	019a      	lsls	r2, r3, #6
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	041b      	lsls	r3, r3, #16
 8005e34:	431a      	orrs	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	061b      	lsls	r3, r3, #24
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	071b      	lsls	r3, r3, #28
 8005e42:	4944      	ldr	r1, [pc, #272]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005e4a:	4b42      	ldr	r3, [pc, #264]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e50:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	021b      	lsls	r3, r3, #8
 8005e5c:	493d      	ldr	r1, [pc, #244]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d022      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e78:	d11d      	bne.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e7a:	4b36      	ldr	r3, [pc, #216]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e80:	0e1b      	lsrs	r3, r3, #24
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e88:	4b32      	ldr	r3, [pc, #200]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8e:	0f1b      	lsrs	r3, r3, #28
 8005e90:	f003 0307 	and.w	r3, r3, #7
 8005e94:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	019a      	lsls	r2, r3, #6
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	041b      	lsls	r3, r3, #16
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	061b      	lsls	r3, r3, #24
 8005ea8:	431a      	orrs	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	071b      	lsls	r3, r3, #28
 8005eae:	4929      	ldr	r1, [pc, #164]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0308 	and.w	r3, r3, #8
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d028      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ec2:	4b24      	ldr	r3, [pc, #144]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec8:	0e1b      	lsrs	r3, r3, #24
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005ed0:	4b20      	ldr	r3, [pc, #128]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed6:	0c1b      	lsrs	r3, r3, #16
 8005ed8:	f003 0303 	and.w	r3, r3, #3
 8005edc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	019a      	lsls	r2, r3, #6
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	041b      	lsls	r3, r3, #16
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	061b      	lsls	r3, r3, #24
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	071b      	lsls	r3, r3, #28
 8005ef6:	4917      	ldr	r1, [pc, #92]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005efe:	4b15      	ldr	r3, [pc, #84]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0c:	4911      	ldr	r1, [pc, #68]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005f14:	4b0f      	ldr	r3, [pc, #60]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a0e      	ldr	r2, [pc, #56]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f20:	f7fd f872 	bl	8003008 <HAL_GetTick>
 8005f24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f26:	e008      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f28:	f7fd f86e 	bl	8003008 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b64      	cmp	r3, #100	; 0x64
 8005f34:	d901      	bls.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e007      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f3a:	4b06      	ldr	r3, [pc, #24]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f46:	d1ef      	bne.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3720      	adds	r7, #32
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	40023800 	.word	0x40023800

08005f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e049      	b.n	8005ffe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7fc ff0c 	bl	8002d9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	3304      	adds	r3, #4
 8005f94:	4619      	mov	r1, r3
 8005f96:	4610      	mov	r0, r2
 8005f98:	f000 f9f6 	bl	8006388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
	...

08006008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b01      	cmp	r3, #1
 800601a:	d001      	beq.n	8006020 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e054      	b.n	80060ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0201 	orr.w	r2, r2, #1
 8006036:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a26      	ldr	r2, [pc, #152]	; (80060d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d022      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604a:	d01d      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a22      	ldr	r2, [pc, #136]	; (80060dc <HAL_TIM_Base_Start_IT+0xd4>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d018      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a21      	ldr	r2, [pc, #132]	; (80060e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d013      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a1f      	ldr	r2, [pc, #124]	; (80060e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00e      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a1e      	ldr	r2, [pc, #120]	; (80060e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d009      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a1c      	ldr	r2, [pc, #112]	; (80060ec <HAL_TIM_Base_Start_IT+0xe4>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d004      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a1b      	ldr	r2, [pc, #108]	; (80060f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d115      	bne.n	80060b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	4b19      	ldr	r3, [pc, #100]	; (80060f4 <HAL_TIM_Base_Start_IT+0xec>)
 8006090:	4013      	ands	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2b06      	cmp	r3, #6
 8006098:	d015      	beq.n	80060c6 <HAL_TIM_Base_Start_IT+0xbe>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060a0:	d011      	beq.n	80060c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f042 0201 	orr.w	r2, r2, #1
 80060b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b2:	e008      	b.n	80060c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0201 	orr.w	r2, r2, #1
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	e000      	b.n	80060c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	40010000 	.word	0x40010000
 80060dc:	40000400 	.word	0x40000400
 80060e0:	40000800 	.word	0x40000800
 80060e4:	40000c00 	.word	0x40000c00
 80060e8:	40010400 	.word	0x40010400
 80060ec:	40014000 	.word	0x40014000
 80060f0:	40001800 	.word	0x40001800
 80060f4:	00010007 	.word	0x00010007

080060f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b02      	cmp	r3, #2
 800610c:	d122      	bne.n	8006154 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b02      	cmp	r3, #2
 800611a:	d11b      	bne.n	8006154 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f06f 0202 	mvn.w	r2, #2
 8006124:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	f003 0303 	and.w	r3, r3, #3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f905 	bl	800634a <HAL_TIM_IC_CaptureCallback>
 8006140:	e005      	b.n	800614e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f8f7 	bl	8006336 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 f908 	bl	800635e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f003 0304 	and.w	r3, r3, #4
 800615e:	2b04      	cmp	r3, #4
 8006160:	d122      	bne.n	80061a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b04      	cmp	r3, #4
 800616e:	d11b      	bne.n	80061a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f06f 0204 	mvn.w	r2, #4
 8006178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2202      	movs	r2, #2
 800617e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f8db 	bl	800634a <HAL_TIM_IC_CaptureCallback>
 8006194:	e005      	b.n	80061a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f8cd 	bl	8006336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f8de 	bl	800635e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	f003 0308 	and.w	r3, r3, #8
 80061b2:	2b08      	cmp	r3, #8
 80061b4:	d122      	bne.n	80061fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f003 0308 	and.w	r3, r3, #8
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	d11b      	bne.n	80061fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f06f 0208 	mvn.w	r2, #8
 80061cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2204      	movs	r2, #4
 80061d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f8b1 	bl	800634a <HAL_TIM_IC_CaptureCallback>
 80061e8:	e005      	b.n	80061f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f8a3 	bl	8006336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f8b4 	bl	800635e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	f003 0310 	and.w	r3, r3, #16
 8006206:	2b10      	cmp	r3, #16
 8006208:	d122      	bne.n	8006250 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	f003 0310 	and.w	r3, r3, #16
 8006214:	2b10      	cmp	r3, #16
 8006216:	d11b      	bne.n	8006250 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f06f 0210 	mvn.w	r2, #16
 8006220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2208      	movs	r2, #8
 8006226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f887 	bl	800634a <HAL_TIM_IC_CaptureCallback>
 800623c:	e005      	b.n	800624a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f879 	bl	8006336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f88a 	bl	800635e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b01      	cmp	r3, #1
 800625c:	d10e      	bne.n	800627c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b01      	cmp	r3, #1
 800626a:	d107      	bne.n	800627c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f06f 0201 	mvn.w	r2, #1
 8006274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7fc fc94 	bl	8002ba4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006286:	2b80      	cmp	r3, #128	; 0x80
 8006288:	d10e      	bne.n	80062a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006294:	2b80      	cmp	r3, #128	; 0x80
 8006296:	d107      	bne.n	80062a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f9a8 	bl	80065f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062b6:	d10e      	bne.n	80062d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c2:	2b80      	cmp	r3, #128	; 0x80
 80062c4:	d107      	bne.n	80062d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f99b 	bl	800660c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e0:	2b40      	cmp	r3, #64	; 0x40
 80062e2:	d10e      	bne.n	8006302 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ee:	2b40      	cmp	r3, #64	; 0x40
 80062f0:	d107      	bne.n	8006302 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f838 	bl	8006372 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	f003 0320 	and.w	r3, r3, #32
 800630c:	2b20      	cmp	r3, #32
 800630e:	d10e      	bne.n	800632e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b20      	cmp	r3, #32
 800631c:	d107      	bne.n	800632e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f06f 0220 	mvn.w	r2, #32
 8006326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f95b 	bl	80065e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800632e:	bf00      	nop
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006336:	b480      	push	{r7}
 8006338:	b083      	sub	sp, #12
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800633e:	bf00      	nop
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800634a:	b480      	push	{r7}
 800634c:	b083      	sub	sp, #12
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006352:	bf00      	nop
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800635e:	b480      	push	{r7}
 8006360:	b083      	sub	sp, #12
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006366:	bf00      	nop
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006372:	b480      	push	{r7}
 8006374:	b083      	sub	sp, #12
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800637a:	bf00      	nop
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
	...

08006388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a40      	ldr	r2, [pc, #256]	; (800649c <TIM_Base_SetConfig+0x114>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d013      	beq.n	80063c8 <TIM_Base_SetConfig+0x40>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a6:	d00f      	beq.n	80063c8 <TIM_Base_SetConfig+0x40>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a3d      	ldr	r2, [pc, #244]	; (80064a0 <TIM_Base_SetConfig+0x118>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d00b      	beq.n	80063c8 <TIM_Base_SetConfig+0x40>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a3c      	ldr	r2, [pc, #240]	; (80064a4 <TIM_Base_SetConfig+0x11c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d007      	beq.n	80063c8 <TIM_Base_SetConfig+0x40>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a3b      	ldr	r2, [pc, #236]	; (80064a8 <TIM_Base_SetConfig+0x120>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d003      	beq.n	80063c8 <TIM_Base_SetConfig+0x40>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a3a      	ldr	r2, [pc, #232]	; (80064ac <TIM_Base_SetConfig+0x124>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d108      	bne.n	80063da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a2f      	ldr	r2, [pc, #188]	; (800649c <TIM_Base_SetConfig+0x114>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d02b      	beq.n	800643a <TIM_Base_SetConfig+0xb2>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e8:	d027      	beq.n	800643a <TIM_Base_SetConfig+0xb2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a2c      	ldr	r2, [pc, #176]	; (80064a0 <TIM_Base_SetConfig+0x118>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d023      	beq.n	800643a <TIM_Base_SetConfig+0xb2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a2b      	ldr	r2, [pc, #172]	; (80064a4 <TIM_Base_SetConfig+0x11c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d01f      	beq.n	800643a <TIM_Base_SetConfig+0xb2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a2a      	ldr	r2, [pc, #168]	; (80064a8 <TIM_Base_SetConfig+0x120>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d01b      	beq.n	800643a <TIM_Base_SetConfig+0xb2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a29      	ldr	r2, [pc, #164]	; (80064ac <TIM_Base_SetConfig+0x124>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d017      	beq.n	800643a <TIM_Base_SetConfig+0xb2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a28      	ldr	r2, [pc, #160]	; (80064b0 <TIM_Base_SetConfig+0x128>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d013      	beq.n	800643a <TIM_Base_SetConfig+0xb2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a27      	ldr	r2, [pc, #156]	; (80064b4 <TIM_Base_SetConfig+0x12c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d00f      	beq.n	800643a <TIM_Base_SetConfig+0xb2>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a26      	ldr	r2, [pc, #152]	; (80064b8 <TIM_Base_SetConfig+0x130>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d00b      	beq.n	800643a <TIM_Base_SetConfig+0xb2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a25      	ldr	r2, [pc, #148]	; (80064bc <TIM_Base_SetConfig+0x134>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d007      	beq.n	800643a <TIM_Base_SetConfig+0xb2>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a24      	ldr	r2, [pc, #144]	; (80064c0 <TIM_Base_SetConfig+0x138>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d003      	beq.n	800643a <TIM_Base_SetConfig+0xb2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a23      	ldr	r2, [pc, #140]	; (80064c4 <TIM_Base_SetConfig+0x13c>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d108      	bne.n	800644c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	4313      	orrs	r3, r2
 800644a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	4313      	orrs	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	689a      	ldr	r2, [r3, #8]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a0a      	ldr	r2, [pc, #40]	; (800649c <TIM_Base_SetConfig+0x114>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d003      	beq.n	8006480 <TIM_Base_SetConfig+0xf8>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a0c      	ldr	r2, [pc, #48]	; (80064ac <TIM_Base_SetConfig+0x124>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d103      	bne.n	8006488 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	691a      	ldr	r2, [r3, #16]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	615a      	str	r2, [r3, #20]
}
 800648e:	bf00      	nop
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	40010000 	.word	0x40010000
 80064a0:	40000400 	.word	0x40000400
 80064a4:	40000800 	.word	0x40000800
 80064a8:	40000c00 	.word	0x40000c00
 80064ac:	40010400 	.word	0x40010400
 80064b0:	40014000 	.word	0x40014000
 80064b4:	40014400 	.word	0x40014400
 80064b8:	40014800 	.word	0x40014800
 80064bc:	40001800 	.word	0x40001800
 80064c0:	40001c00 	.word	0x40001c00
 80064c4:	40002000 	.word	0x40002000

080064c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d101      	bne.n	80064e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064dc:	2302      	movs	r3, #2
 80064de:	e06d      	b.n	80065bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a30      	ldr	r2, [pc, #192]	; (80065c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d004      	beq.n	8006514 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a2f      	ldr	r2, [pc, #188]	; (80065cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d108      	bne.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800651a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4313      	orrs	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a20      	ldr	r2, [pc, #128]	; (80065c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d022      	beq.n	8006590 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006552:	d01d      	beq.n	8006590 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a1d      	ldr	r2, [pc, #116]	; (80065d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d018      	beq.n	8006590 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a1c      	ldr	r2, [pc, #112]	; (80065d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d013      	beq.n	8006590 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a1a      	ldr	r2, [pc, #104]	; (80065d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d00e      	beq.n	8006590 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a15      	ldr	r2, [pc, #84]	; (80065cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d009      	beq.n	8006590 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a16      	ldr	r2, [pc, #88]	; (80065dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d004      	beq.n	8006590 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a15      	ldr	r2, [pc, #84]	; (80065e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d10c      	bne.n	80065aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006596:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr
 80065c8:	40010000 	.word	0x40010000
 80065cc:	40010400 	.word	0x40010400
 80065d0:	40000400 	.word	0x40000400
 80065d4:	40000800 	.word	0x40000800
 80065d8:	40000c00 	.word	0x40000c00
 80065dc:	40014000 	.word	0x40014000
 80065e0:	40001800 	.word	0x40001800

080065e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e040      	b.n	80066b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006636:	2b00      	cmp	r3, #0
 8006638:	d106      	bne.n	8006648 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7fc fc00 	bl	8002e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2224      	movs	r2, #36	; 0x24
 800664c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 0201 	bic.w	r2, r2, #1
 800665c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fc06 	bl	8006e70 <UART_SetConfig>
 8006664:	4603      	mov	r3, r0
 8006666:	2b01      	cmp	r3, #1
 8006668:	d101      	bne.n	800666e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e022      	b.n	80066b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fe5e 	bl	8007338 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800668a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689a      	ldr	r2, [r3, #8]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800669a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0201 	orr.w	r2, r2, #1
 80066aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fee5 	bl	800747c <UART_CheckIdleState>
 80066b2:	4603      	mov	r3, r0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08a      	sub	sp, #40	; 0x28
 80066c0:	af02      	add	r7, sp, #8
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	603b      	str	r3, [r7, #0]
 80066c8:	4613      	mov	r3, r2
 80066ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066d0:	2b20      	cmp	r3, #32
 80066d2:	d171      	bne.n	80067b8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d002      	beq.n	80066e0 <HAL_UART_Transmit+0x24>
 80066da:	88fb      	ldrh	r3, [r7, #6]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e06a      	b.n	80067ba <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2221      	movs	r2, #33	; 0x21
 80066f0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066f2:	f7fc fc89 	bl	8003008 <HAL_GetTick>
 80066f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	88fa      	ldrh	r2, [r7, #6]
 80066fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	88fa      	ldrh	r2, [r7, #6]
 8006704:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006710:	d108      	bne.n	8006724 <HAL_UART_Transmit+0x68>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d104      	bne.n	8006724 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800671a:	2300      	movs	r3, #0
 800671c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	61bb      	str	r3, [r7, #24]
 8006722:	e003      	b.n	800672c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006728:	2300      	movs	r3, #0
 800672a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800672c:	e02c      	b.n	8006788 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	2200      	movs	r2, #0
 8006736:	2180      	movs	r1, #128	; 0x80
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 feec 	bl	8007516 <UART_WaitOnFlagUntilTimeout>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e038      	b.n	80067ba <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10b      	bne.n	8006766 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800675c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	3302      	adds	r3, #2
 8006762:	61bb      	str	r3, [r7, #24]
 8006764:	e007      	b.n	8006776 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	781a      	ldrb	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	3301      	adds	r3, #1
 8006774:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800677c:	b29b      	uxth	r3, r3
 800677e:	3b01      	subs	r3, #1
 8006780:	b29a      	uxth	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800678e:	b29b      	uxth	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1cc      	bne.n	800672e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	2200      	movs	r2, #0
 800679c:	2140      	movs	r1, #64	; 0x40
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 feb9 	bl	8007516 <UART_WaitOnFlagUntilTimeout>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e005      	b.n	80067ba <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2220      	movs	r2, #32
 80067b2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80067b4:	2300      	movs	r3, #0
 80067b6:	e000      	b.n	80067ba <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80067b8:	2302      	movs	r3, #2
  }
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3720      	adds	r7, #32
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b08a      	sub	sp, #40	; 0x28
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	60f8      	str	r0, [r7, #12]
 80067ca:	60b9      	str	r1, [r7, #8]
 80067cc:	4613      	mov	r3, r2
 80067ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067d6:	2b20      	cmp	r3, #32
 80067d8:	d132      	bne.n	8006840 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <HAL_UART_Receive_IT+0x24>
 80067e0:	88fb      	ldrh	r3, [r7, #6]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e02b      	b.n	8006842 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d018      	beq.n	8006830 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	e853 3f00 	ldrex	r3, [r3]
 800680a:	613b      	str	r3, [r7, #16]
   return(result);
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006812:	627b      	str	r3, [r7, #36]	; 0x24
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	461a      	mov	r2, r3
 800681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681c:	623b      	str	r3, [r7, #32]
 800681e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006820:	69f9      	ldr	r1, [r7, #28]
 8006822:	6a3a      	ldr	r2, [r7, #32]
 8006824:	e841 2300 	strex	r3, r2, [r1]
 8006828:	61bb      	str	r3, [r7, #24]
   return(result);
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1e6      	bne.n	80067fe <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006830:	88fb      	ldrh	r3, [r7, #6]
 8006832:	461a      	mov	r2, r3
 8006834:	68b9      	ldr	r1, [r7, #8]
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f000 ff34 	bl	80076a4 <UART_Start_Receive_IT>
 800683c:	4603      	mov	r3, r0
 800683e:	e000      	b.n	8006842 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006840:	2302      	movs	r3, #2
  }
}
 8006842:	4618      	mov	r0, r3
 8006844:	3728      	adds	r7, #40	; 0x28
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
	...

0800684c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b0ba      	sub	sp, #232	; 0xe8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006872:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006876:	f640 030f 	movw	r3, #2063	; 0x80f
 800687a:	4013      	ands	r3, r2
 800687c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006880:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006884:	2b00      	cmp	r3, #0
 8006886:	d115      	bne.n	80068b4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800688c:	f003 0320 	and.w	r3, r3, #32
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00f      	beq.n	80068b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006898:	f003 0320 	and.w	r3, r3, #32
 800689c:	2b00      	cmp	r3, #0
 800689e:	d009      	beq.n	80068b4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 82ac 	beq.w	8006e02 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	4798      	blx	r3
      }
      return;
 80068b2:	e2a6      	b.n	8006e02 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80068b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 8117 	beq.w	8006aec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80068be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d106      	bne.n	80068d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80068ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80068ce:	4b85      	ldr	r3, [pc, #532]	; (8006ae4 <HAL_UART_IRQHandler+0x298>)
 80068d0:	4013      	ands	r3, r2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 810a 	beq.w	8006aec <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80068d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d011      	beq.n	8006908 <HAL_UART_IRQHandler+0xbc>
 80068e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00b      	beq.n	8006908 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2201      	movs	r2, #1
 80068f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068fe:	f043 0201 	orr.w	r2, r3, #1
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d011      	beq.n	8006938 <HAL_UART_IRQHandler+0xec>
 8006914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00b      	beq.n	8006938 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2202      	movs	r2, #2
 8006926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800692e:	f043 0204 	orr.w	r2, r3, #4
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800693c:	f003 0304 	and.w	r3, r3, #4
 8006940:	2b00      	cmp	r3, #0
 8006942:	d011      	beq.n	8006968 <HAL_UART_IRQHandler+0x11c>
 8006944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00b      	beq.n	8006968 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2204      	movs	r2, #4
 8006956:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800695e:	f043 0202 	orr.w	r2, r3, #2
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800696c:	f003 0308 	and.w	r3, r3, #8
 8006970:	2b00      	cmp	r3, #0
 8006972:	d017      	beq.n	80069a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006978:	f003 0320 	and.w	r3, r3, #32
 800697c:	2b00      	cmp	r3, #0
 800697e:	d105      	bne.n	800698c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006984:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00b      	beq.n	80069a4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2208      	movs	r2, #8
 8006992:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800699a:	f043 0208 	orr.w	r2, r3, #8
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80069a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d012      	beq.n	80069d6 <HAL_UART_IRQHandler+0x18a>
 80069b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00c      	beq.n	80069d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069cc:	f043 0220 	orr.w	r2, r3, #32
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 8212 	beq.w	8006e06 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80069e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00d      	beq.n	8006a0a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80069ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f2:	f003 0320 	and.w	r3, r3, #32
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d007      	beq.n	8006a0a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1e:	2b40      	cmp	r3, #64	; 0x40
 8006a20:	d005      	beq.n	8006a2e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a26:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d04f      	beq.n	8006ace <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fefe 	bl	8007830 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3e:	2b40      	cmp	r3, #64	; 0x40
 8006a40:	d141      	bne.n	8006ac6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3308      	adds	r3, #8
 8006a48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a50:	e853 3f00 	ldrex	r3, [r3]
 8006a54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3308      	adds	r3, #8
 8006a6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1d9      	bne.n	8006a42 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d013      	beq.n	8006abe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a9a:	4a13      	ldr	r2, [pc, #76]	; (8006ae8 <HAL_UART_IRQHandler+0x29c>)
 8006a9c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fd ff31 	bl	800490a <HAL_DMA_Abort_IT>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d017      	beq.n	8006ade <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ab8:	4610      	mov	r0, r2
 8006aba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006abc:	e00f      	b.n	8006ade <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f9b6 	bl	8006e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac4:	e00b      	b.n	8006ade <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f9b2 	bl	8006e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006acc:	e007      	b.n	8006ade <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f9ae 	bl	8006e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006adc:	e193      	b.n	8006e06 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ade:	bf00      	nop
    return;
 8006ae0:	e191      	b.n	8006e06 <HAL_UART_IRQHandler+0x5ba>
 8006ae2:	bf00      	nop
 8006ae4:	04000120 	.word	0x04000120
 8006ae8:	080078f9 	.word	0x080078f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	f040 814c 	bne.w	8006d8e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006afa:	f003 0310 	and.w	r3, r3, #16
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 8145 	beq.w	8006d8e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b08:	f003 0310 	and.w	r3, r3, #16
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 813e 	beq.w	8006d8e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2210      	movs	r2, #16
 8006b18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b24:	2b40      	cmp	r3, #64	; 0x40
 8006b26:	f040 80b6 	bne.w	8006c96 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b36:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 8165 	beq.w	8006e0a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	f080 815d 	bcs.w	8006e0a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b64:	f000 8086 	beq.w	8006c74 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b74:	e853 3f00 	ldrex	r3, [r3]
 8006b78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006b96:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ba2:	e841 2300 	strex	r3, r2, [r1]
 8006ba6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006baa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1da      	bne.n	8006b68 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3308      	adds	r3, #8
 8006bb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bbc:	e853 3f00 	ldrex	r3, [r3]
 8006bc0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bc4:	f023 0301 	bic.w	r3, r3, #1
 8006bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	3308      	adds	r3, #8
 8006bd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006bd6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006bda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bdc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006bde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006be8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e1      	bne.n	8006bb2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	3308      	adds	r3, #8
 8006c0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c1a:	e841 2300 	strex	r3, r2, [r1]
 8006c1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1e3      	bne.n	8006bee <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c3c:	e853 3f00 	ldrex	r3, [r3]
 8006c40:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c44:	f023 0310 	bic.w	r3, r3, #16
 8006c48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	461a      	mov	r2, r3
 8006c52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c56:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c58:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c5e:	e841 2300 	strex	r3, r2, [r1]
 8006c62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1e4      	bne.n	8006c34 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fd fddb 	bl	800482a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2202      	movs	r2, #2
 8006c78:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f8d8 	bl	8006e44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c94:	e0b9      	b.n	8006e0a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f000 80ab 	beq.w	8006e0e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006cb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 80a6 	beq.w	8006e0e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cca:	e853 3f00 	ldrex	r3, [r3]
 8006cce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ce4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ce6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cec:	e841 2300 	strex	r3, r2, [r1]
 8006cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e4      	bne.n	8006cc2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3308      	adds	r3, #8
 8006cfe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	e853 3f00 	ldrex	r3, [r3]
 8006d06:	623b      	str	r3, [r7, #32]
   return(result);
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	f023 0301 	bic.w	r3, r3, #1
 8006d0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3308      	adds	r3, #8
 8006d18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d1c:	633a      	str	r2, [r7, #48]	; 0x30
 8006d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d24:	e841 2300 	strex	r3, r2, [r1]
 8006d28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1e3      	bne.n	8006cf8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2220      	movs	r2, #32
 8006d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	e853 3f00 	ldrex	r3, [r3]
 8006d50:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f023 0310 	bic.w	r3, r3, #16
 8006d58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	461a      	mov	r2, r3
 8006d62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006d66:	61fb      	str	r3, [r7, #28]
 8006d68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6a:	69b9      	ldr	r1, [r7, #24]
 8006d6c:	69fa      	ldr	r2, [r7, #28]
 8006d6e:	e841 2300 	strex	r3, r2, [r1]
 8006d72:	617b      	str	r3, [r7, #20]
   return(result);
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1e4      	bne.n	8006d44 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f85c 	bl	8006e44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d8c:	e03f      	b.n	8006e0e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00e      	beq.n	8006db8 <HAL_UART_IRQHandler+0x56c>
 8006d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d008      	beq.n	8006db8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006dae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 f853 	bl	8006e5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006db6:	e02d      	b.n	8006e14 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00e      	beq.n	8006de2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d008      	beq.n	8006de2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d01c      	beq.n	8006e12 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	4798      	blx	r3
    }
    return;
 8006de0:	e017      	b.n	8006e12 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d012      	beq.n	8006e14 <HAL_UART_IRQHandler+0x5c8>
 8006dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00c      	beq.n	8006e14 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fd92 	bl	8007924 <UART_EndTransmit_IT>
    return;
 8006e00:	e008      	b.n	8006e14 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006e02:	bf00      	nop
 8006e04:	e006      	b.n	8006e14 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006e06:	bf00      	nop
 8006e08:	e004      	b.n	8006e14 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006e0a:	bf00      	nop
 8006e0c:	e002      	b.n	8006e14 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006e0e:	bf00      	nop
 8006e10:	e000      	b.n	8006e14 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006e12:	bf00      	nop
  }

}
 8006e14:	37e8      	adds	r7, #232	; 0xe8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop

08006e1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b088      	sub	sp, #32
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	431a      	orrs	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	4ba6      	ldr	r3, [pc, #664]	; (8007134 <UART_SetConfig+0x2c4>)
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	6812      	ldr	r2, [r2, #0]
 8006ea2:	6979      	ldr	r1, [r7, #20]
 8006ea4:	430b      	orrs	r3, r1
 8006ea6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68da      	ldr	r2, [r3, #12]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a1b      	ldr	r3, [r3, #32]
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a94      	ldr	r2, [pc, #592]	; (8007138 <UART_SetConfig+0x2c8>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d120      	bne.n	8006f2e <UART_SetConfig+0xbe>
 8006eec:	4b93      	ldr	r3, [pc, #588]	; (800713c <UART_SetConfig+0x2cc>)
 8006eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ef2:	f003 0303 	and.w	r3, r3, #3
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d816      	bhi.n	8006f28 <UART_SetConfig+0xb8>
 8006efa:	a201      	add	r2, pc, #4	; (adr r2, 8006f00 <UART_SetConfig+0x90>)
 8006efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f00:	08006f11 	.word	0x08006f11
 8006f04:	08006f1d 	.word	0x08006f1d
 8006f08:	08006f17 	.word	0x08006f17
 8006f0c:	08006f23 	.word	0x08006f23
 8006f10:	2301      	movs	r3, #1
 8006f12:	77fb      	strb	r3, [r7, #31]
 8006f14:	e150      	b.n	80071b8 <UART_SetConfig+0x348>
 8006f16:	2302      	movs	r3, #2
 8006f18:	77fb      	strb	r3, [r7, #31]
 8006f1a:	e14d      	b.n	80071b8 <UART_SetConfig+0x348>
 8006f1c:	2304      	movs	r3, #4
 8006f1e:	77fb      	strb	r3, [r7, #31]
 8006f20:	e14a      	b.n	80071b8 <UART_SetConfig+0x348>
 8006f22:	2308      	movs	r3, #8
 8006f24:	77fb      	strb	r3, [r7, #31]
 8006f26:	e147      	b.n	80071b8 <UART_SetConfig+0x348>
 8006f28:	2310      	movs	r3, #16
 8006f2a:	77fb      	strb	r3, [r7, #31]
 8006f2c:	e144      	b.n	80071b8 <UART_SetConfig+0x348>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a83      	ldr	r2, [pc, #524]	; (8007140 <UART_SetConfig+0x2d0>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d132      	bne.n	8006f9e <UART_SetConfig+0x12e>
 8006f38:	4b80      	ldr	r3, [pc, #512]	; (800713c <UART_SetConfig+0x2cc>)
 8006f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f3e:	f003 030c 	and.w	r3, r3, #12
 8006f42:	2b0c      	cmp	r3, #12
 8006f44:	d828      	bhi.n	8006f98 <UART_SetConfig+0x128>
 8006f46:	a201      	add	r2, pc, #4	; (adr r2, 8006f4c <UART_SetConfig+0xdc>)
 8006f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4c:	08006f81 	.word	0x08006f81
 8006f50:	08006f99 	.word	0x08006f99
 8006f54:	08006f99 	.word	0x08006f99
 8006f58:	08006f99 	.word	0x08006f99
 8006f5c:	08006f8d 	.word	0x08006f8d
 8006f60:	08006f99 	.word	0x08006f99
 8006f64:	08006f99 	.word	0x08006f99
 8006f68:	08006f99 	.word	0x08006f99
 8006f6c:	08006f87 	.word	0x08006f87
 8006f70:	08006f99 	.word	0x08006f99
 8006f74:	08006f99 	.word	0x08006f99
 8006f78:	08006f99 	.word	0x08006f99
 8006f7c:	08006f93 	.word	0x08006f93
 8006f80:	2300      	movs	r3, #0
 8006f82:	77fb      	strb	r3, [r7, #31]
 8006f84:	e118      	b.n	80071b8 <UART_SetConfig+0x348>
 8006f86:	2302      	movs	r3, #2
 8006f88:	77fb      	strb	r3, [r7, #31]
 8006f8a:	e115      	b.n	80071b8 <UART_SetConfig+0x348>
 8006f8c:	2304      	movs	r3, #4
 8006f8e:	77fb      	strb	r3, [r7, #31]
 8006f90:	e112      	b.n	80071b8 <UART_SetConfig+0x348>
 8006f92:	2308      	movs	r3, #8
 8006f94:	77fb      	strb	r3, [r7, #31]
 8006f96:	e10f      	b.n	80071b8 <UART_SetConfig+0x348>
 8006f98:	2310      	movs	r3, #16
 8006f9a:	77fb      	strb	r3, [r7, #31]
 8006f9c:	e10c      	b.n	80071b8 <UART_SetConfig+0x348>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a68      	ldr	r2, [pc, #416]	; (8007144 <UART_SetConfig+0x2d4>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d120      	bne.n	8006fea <UART_SetConfig+0x17a>
 8006fa8:	4b64      	ldr	r3, [pc, #400]	; (800713c <UART_SetConfig+0x2cc>)
 8006faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006fb2:	2b30      	cmp	r3, #48	; 0x30
 8006fb4:	d013      	beq.n	8006fde <UART_SetConfig+0x16e>
 8006fb6:	2b30      	cmp	r3, #48	; 0x30
 8006fb8:	d814      	bhi.n	8006fe4 <UART_SetConfig+0x174>
 8006fba:	2b20      	cmp	r3, #32
 8006fbc:	d009      	beq.n	8006fd2 <UART_SetConfig+0x162>
 8006fbe:	2b20      	cmp	r3, #32
 8006fc0:	d810      	bhi.n	8006fe4 <UART_SetConfig+0x174>
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d002      	beq.n	8006fcc <UART_SetConfig+0x15c>
 8006fc6:	2b10      	cmp	r3, #16
 8006fc8:	d006      	beq.n	8006fd8 <UART_SetConfig+0x168>
 8006fca:	e00b      	b.n	8006fe4 <UART_SetConfig+0x174>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	77fb      	strb	r3, [r7, #31]
 8006fd0:	e0f2      	b.n	80071b8 <UART_SetConfig+0x348>
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	77fb      	strb	r3, [r7, #31]
 8006fd6:	e0ef      	b.n	80071b8 <UART_SetConfig+0x348>
 8006fd8:	2304      	movs	r3, #4
 8006fda:	77fb      	strb	r3, [r7, #31]
 8006fdc:	e0ec      	b.n	80071b8 <UART_SetConfig+0x348>
 8006fde:	2308      	movs	r3, #8
 8006fe0:	77fb      	strb	r3, [r7, #31]
 8006fe2:	e0e9      	b.n	80071b8 <UART_SetConfig+0x348>
 8006fe4:	2310      	movs	r3, #16
 8006fe6:	77fb      	strb	r3, [r7, #31]
 8006fe8:	e0e6      	b.n	80071b8 <UART_SetConfig+0x348>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a56      	ldr	r2, [pc, #344]	; (8007148 <UART_SetConfig+0x2d8>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d120      	bne.n	8007036 <UART_SetConfig+0x1c6>
 8006ff4:	4b51      	ldr	r3, [pc, #324]	; (800713c <UART_SetConfig+0x2cc>)
 8006ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ffa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ffe:	2bc0      	cmp	r3, #192	; 0xc0
 8007000:	d013      	beq.n	800702a <UART_SetConfig+0x1ba>
 8007002:	2bc0      	cmp	r3, #192	; 0xc0
 8007004:	d814      	bhi.n	8007030 <UART_SetConfig+0x1c0>
 8007006:	2b80      	cmp	r3, #128	; 0x80
 8007008:	d009      	beq.n	800701e <UART_SetConfig+0x1ae>
 800700a:	2b80      	cmp	r3, #128	; 0x80
 800700c:	d810      	bhi.n	8007030 <UART_SetConfig+0x1c0>
 800700e:	2b00      	cmp	r3, #0
 8007010:	d002      	beq.n	8007018 <UART_SetConfig+0x1a8>
 8007012:	2b40      	cmp	r3, #64	; 0x40
 8007014:	d006      	beq.n	8007024 <UART_SetConfig+0x1b4>
 8007016:	e00b      	b.n	8007030 <UART_SetConfig+0x1c0>
 8007018:	2300      	movs	r3, #0
 800701a:	77fb      	strb	r3, [r7, #31]
 800701c:	e0cc      	b.n	80071b8 <UART_SetConfig+0x348>
 800701e:	2302      	movs	r3, #2
 8007020:	77fb      	strb	r3, [r7, #31]
 8007022:	e0c9      	b.n	80071b8 <UART_SetConfig+0x348>
 8007024:	2304      	movs	r3, #4
 8007026:	77fb      	strb	r3, [r7, #31]
 8007028:	e0c6      	b.n	80071b8 <UART_SetConfig+0x348>
 800702a:	2308      	movs	r3, #8
 800702c:	77fb      	strb	r3, [r7, #31]
 800702e:	e0c3      	b.n	80071b8 <UART_SetConfig+0x348>
 8007030:	2310      	movs	r3, #16
 8007032:	77fb      	strb	r3, [r7, #31]
 8007034:	e0c0      	b.n	80071b8 <UART_SetConfig+0x348>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a44      	ldr	r2, [pc, #272]	; (800714c <UART_SetConfig+0x2dc>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d125      	bne.n	800708c <UART_SetConfig+0x21c>
 8007040:	4b3e      	ldr	r3, [pc, #248]	; (800713c <UART_SetConfig+0x2cc>)
 8007042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800704a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800704e:	d017      	beq.n	8007080 <UART_SetConfig+0x210>
 8007050:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007054:	d817      	bhi.n	8007086 <UART_SetConfig+0x216>
 8007056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800705a:	d00b      	beq.n	8007074 <UART_SetConfig+0x204>
 800705c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007060:	d811      	bhi.n	8007086 <UART_SetConfig+0x216>
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <UART_SetConfig+0x1fe>
 8007066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800706a:	d006      	beq.n	800707a <UART_SetConfig+0x20a>
 800706c:	e00b      	b.n	8007086 <UART_SetConfig+0x216>
 800706e:	2300      	movs	r3, #0
 8007070:	77fb      	strb	r3, [r7, #31]
 8007072:	e0a1      	b.n	80071b8 <UART_SetConfig+0x348>
 8007074:	2302      	movs	r3, #2
 8007076:	77fb      	strb	r3, [r7, #31]
 8007078:	e09e      	b.n	80071b8 <UART_SetConfig+0x348>
 800707a:	2304      	movs	r3, #4
 800707c:	77fb      	strb	r3, [r7, #31]
 800707e:	e09b      	b.n	80071b8 <UART_SetConfig+0x348>
 8007080:	2308      	movs	r3, #8
 8007082:	77fb      	strb	r3, [r7, #31]
 8007084:	e098      	b.n	80071b8 <UART_SetConfig+0x348>
 8007086:	2310      	movs	r3, #16
 8007088:	77fb      	strb	r3, [r7, #31]
 800708a:	e095      	b.n	80071b8 <UART_SetConfig+0x348>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a2f      	ldr	r2, [pc, #188]	; (8007150 <UART_SetConfig+0x2e0>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d125      	bne.n	80070e2 <UART_SetConfig+0x272>
 8007096:	4b29      	ldr	r3, [pc, #164]	; (800713c <UART_SetConfig+0x2cc>)
 8007098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800709c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80070a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070a4:	d017      	beq.n	80070d6 <UART_SetConfig+0x266>
 80070a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070aa:	d817      	bhi.n	80070dc <UART_SetConfig+0x26c>
 80070ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070b0:	d00b      	beq.n	80070ca <UART_SetConfig+0x25a>
 80070b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070b6:	d811      	bhi.n	80070dc <UART_SetConfig+0x26c>
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d003      	beq.n	80070c4 <UART_SetConfig+0x254>
 80070bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070c0:	d006      	beq.n	80070d0 <UART_SetConfig+0x260>
 80070c2:	e00b      	b.n	80070dc <UART_SetConfig+0x26c>
 80070c4:	2301      	movs	r3, #1
 80070c6:	77fb      	strb	r3, [r7, #31]
 80070c8:	e076      	b.n	80071b8 <UART_SetConfig+0x348>
 80070ca:	2302      	movs	r3, #2
 80070cc:	77fb      	strb	r3, [r7, #31]
 80070ce:	e073      	b.n	80071b8 <UART_SetConfig+0x348>
 80070d0:	2304      	movs	r3, #4
 80070d2:	77fb      	strb	r3, [r7, #31]
 80070d4:	e070      	b.n	80071b8 <UART_SetConfig+0x348>
 80070d6:	2308      	movs	r3, #8
 80070d8:	77fb      	strb	r3, [r7, #31]
 80070da:	e06d      	b.n	80071b8 <UART_SetConfig+0x348>
 80070dc:	2310      	movs	r3, #16
 80070de:	77fb      	strb	r3, [r7, #31]
 80070e0:	e06a      	b.n	80071b8 <UART_SetConfig+0x348>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a1b      	ldr	r2, [pc, #108]	; (8007154 <UART_SetConfig+0x2e4>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d138      	bne.n	800715e <UART_SetConfig+0x2ee>
 80070ec:	4b13      	ldr	r3, [pc, #76]	; (800713c <UART_SetConfig+0x2cc>)
 80070ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80070f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070fa:	d017      	beq.n	800712c <UART_SetConfig+0x2bc>
 80070fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007100:	d82a      	bhi.n	8007158 <UART_SetConfig+0x2e8>
 8007102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007106:	d00b      	beq.n	8007120 <UART_SetConfig+0x2b0>
 8007108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800710c:	d824      	bhi.n	8007158 <UART_SetConfig+0x2e8>
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <UART_SetConfig+0x2aa>
 8007112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007116:	d006      	beq.n	8007126 <UART_SetConfig+0x2b6>
 8007118:	e01e      	b.n	8007158 <UART_SetConfig+0x2e8>
 800711a:	2300      	movs	r3, #0
 800711c:	77fb      	strb	r3, [r7, #31]
 800711e:	e04b      	b.n	80071b8 <UART_SetConfig+0x348>
 8007120:	2302      	movs	r3, #2
 8007122:	77fb      	strb	r3, [r7, #31]
 8007124:	e048      	b.n	80071b8 <UART_SetConfig+0x348>
 8007126:	2304      	movs	r3, #4
 8007128:	77fb      	strb	r3, [r7, #31]
 800712a:	e045      	b.n	80071b8 <UART_SetConfig+0x348>
 800712c:	2308      	movs	r3, #8
 800712e:	77fb      	strb	r3, [r7, #31]
 8007130:	e042      	b.n	80071b8 <UART_SetConfig+0x348>
 8007132:	bf00      	nop
 8007134:	efff69f3 	.word	0xefff69f3
 8007138:	40011000 	.word	0x40011000
 800713c:	40023800 	.word	0x40023800
 8007140:	40004400 	.word	0x40004400
 8007144:	40004800 	.word	0x40004800
 8007148:	40004c00 	.word	0x40004c00
 800714c:	40005000 	.word	0x40005000
 8007150:	40011400 	.word	0x40011400
 8007154:	40007800 	.word	0x40007800
 8007158:	2310      	movs	r3, #16
 800715a:	77fb      	strb	r3, [r7, #31]
 800715c:	e02c      	b.n	80071b8 <UART_SetConfig+0x348>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a72      	ldr	r2, [pc, #456]	; (800732c <UART_SetConfig+0x4bc>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d125      	bne.n	80071b4 <UART_SetConfig+0x344>
 8007168:	4b71      	ldr	r3, [pc, #452]	; (8007330 <UART_SetConfig+0x4c0>)
 800716a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800716e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007172:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007176:	d017      	beq.n	80071a8 <UART_SetConfig+0x338>
 8007178:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800717c:	d817      	bhi.n	80071ae <UART_SetConfig+0x33e>
 800717e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007182:	d00b      	beq.n	800719c <UART_SetConfig+0x32c>
 8007184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007188:	d811      	bhi.n	80071ae <UART_SetConfig+0x33e>
 800718a:	2b00      	cmp	r3, #0
 800718c:	d003      	beq.n	8007196 <UART_SetConfig+0x326>
 800718e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007192:	d006      	beq.n	80071a2 <UART_SetConfig+0x332>
 8007194:	e00b      	b.n	80071ae <UART_SetConfig+0x33e>
 8007196:	2300      	movs	r3, #0
 8007198:	77fb      	strb	r3, [r7, #31]
 800719a:	e00d      	b.n	80071b8 <UART_SetConfig+0x348>
 800719c:	2302      	movs	r3, #2
 800719e:	77fb      	strb	r3, [r7, #31]
 80071a0:	e00a      	b.n	80071b8 <UART_SetConfig+0x348>
 80071a2:	2304      	movs	r3, #4
 80071a4:	77fb      	strb	r3, [r7, #31]
 80071a6:	e007      	b.n	80071b8 <UART_SetConfig+0x348>
 80071a8:	2308      	movs	r3, #8
 80071aa:	77fb      	strb	r3, [r7, #31]
 80071ac:	e004      	b.n	80071b8 <UART_SetConfig+0x348>
 80071ae:	2310      	movs	r3, #16
 80071b0:	77fb      	strb	r3, [r7, #31]
 80071b2:	e001      	b.n	80071b8 <UART_SetConfig+0x348>
 80071b4:	2310      	movs	r3, #16
 80071b6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071c0:	d15b      	bne.n	800727a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80071c2:	7ffb      	ldrb	r3, [r7, #31]
 80071c4:	2b08      	cmp	r3, #8
 80071c6:	d828      	bhi.n	800721a <UART_SetConfig+0x3aa>
 80071c8:	a201      	add	r2, pc, #4	; (adr r2, 80071d0 <UART_SetConfig+0x360>)
 80071ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ce:	bf00      	nop
 80071d0:	080071f5 	.word	0x080071f5
 80071d4:	080071fd 	.word	0x080071fd
 80071d8:	08007205 	.word	0x08007205
 80071dc:	0800721b 	.word	0x0800721b
 80071e0:	0800720b 	.word	0x0800720b
 80071e4:	0800721b 	.word	0x0800721b
 80071e8:	0800721b 	.word	0x0800721b
 80071ec:	0800721b 	.word	0x0800721b
 80071f0:	08007213 	.word	0x08007213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071f4:	f7fe fa60 	bl	80056b8 <HAL_RCC_GetPCLK1Freq>
 80071f8:	61b8      	str	r0, [r7, #24]
        break;
 80071fa:	e013      	b.n	8007224 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071fc:	f7fe fa70 	bl	80056e0 <HAL_RCC_GetPCLK2Freq>
 8007200:	61b8      	str	r0, [r7, #24]
        break;
 8007202:	e00f      	b.n	8007224 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007204:	4b4b      	ldr	r3, [pc, #300]	; (8007334 <UART_SetConfig+0x4c4>)
 8007206:	61bb      	str	r3, [r7, #24]
        break;
 8007208:	e00c      	b.n	8007224 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800720a:	f7fe f983 	bl	8005514 <HAL_RCC_GetSysClockFreq>
 800720e:	61b8      	str	r0, [r7, #24]
        break;
 8007210:	e008      	b.n	8007224 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007216:	61bb      	str	r3, [r7, #24]
        break;
 8007218:	e004      	b.n	8007224 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800721a:	2300      	movs	r3, #0
 800721c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	77bb      	strb	r3, [r7, #30]
        break;
 8007222:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d074      	beq.n	8007314 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	005a      	lsls	r2, r3, #1
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	085b      	lsrs	r3, r3, #1
 8007234:	441a      	add	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	fbb2 f3f3 	udiv	r3, r2, r3
 800723e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	2b0f      	cmp	r3, #15
 8007244:	d916      	bls.n	8007274 <UART_SetConfig+0x404>
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800724c:	d212      	bcs.n	8007274 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	b29b      	uxth	r3, r3
 8007252:	f023 030f 	bic.w	r3, r3, #15
 8007256:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	085b      	lsrs	r3, r3, #1
 800725c:	b29b      	uxth	r3, r3
 800725e:	f003 0307 	and.w	r3, r3, #7
 8007262:	b29a      	uxth	r2, r3
 8007264:	89fb      	ldrh	r3, [r7, #14]
 8007266:	4313      	orrs	r3, r2
 8007268:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	89fa      	ldrh	r2, [r7, #14]
 8007270:	60da      	str	r2, [r3, #12]
 8007272:	e04f      	b.n	8007314 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	77bb      	strb	r3, [r7, #30]
 8007278:	e04c      	b.n	8007314 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800727a:	7ffb      	ldrb	r3, [r7, #31]
 800727c:	2b08      	cmp	r3, #8
 800727e:	d828      	bhi.n	80072d2 <UART_SetConfig+0x462>
 8007280:	a201      	add	r2, pc, #4	; (adr r2, 8007288 <UART_SetConfig+0x418>)
 8007282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007286:	bf00      	nop
 8007288:	080072ad 	.word	0x080072ad
 800728c:	080072b5 	.word	0x080072b5
 8007290:	080072bd 	.word	0x080072bd
 8007294:	080072d3 	.word	0x080072d3
 8007298:	080072c3 	.word	0x080072c3
 800729c:	080072d3 	.word	0x080072d3
 80072a0:	080072d3 	.word	0x080072d3
 80072a4:	080072d3 	.word	0x080072d3
 80072a8:	080072cb 	.word	0x080072cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072ac:	f7fe fa04 	bl	80056b8 <HAL_RCC_GetPCLK1Freq>
 80072b0:	61b8      	str	r0, [r7, #24]
        break;
 80072b2:	e013      	b.n	80072dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072b4:	f7fe fa14 	bl	80056e0 <HAL_RCC_GetPCLK2Freq>
 80072b8:	61b8      	str	r0, [r7, #24]
        break;
 80072ba:	e00f      	b.n	80072dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072bc:	4b1d      	ldr	r3, [pc, #116]	; (8007334 <UART_SetConfig+0x4c4>)
 80072be:	61bb      	str	r3, [r7, #24]
        break;
 80072c0:	e00c      	b.n	80072dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072c2:	f7fe f927 	bl	8005514 <HAL_RCC_GetSysClockFreq>
 80072c6:	61b8      	str	r0, [r7, #24]
        break;
 80072c8:	e008      	b.n	80072dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072ce:	61bb      	str	r3, [r7, #24]
        break;
 80072d0:	e004      	b.n	80072dc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80072d2:	2300      	movs	r3, #0
 80072d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	77bb      	strb	r3, [r7, #30]
        break;
 80072da:	bf00      	nop
    }

    if (pclk != 0U)
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d018      	beq.n	8007314 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	085a      	lsrs	r2, r3, #1
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	441a      	add	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	2b0f      	cmp	r3, #15
 80072fa:	d909      	bls.n	8007310 <UART_SetConfig+0x4a0>
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007302:	d205      	bcs.n	8007310 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	b29a      	uxth	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	60da      	str	r2, [r3, #12]
 800730e:	e001      	b.n	8007314 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007320:	7fbb      	ldrb	r3, [r7, #30]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3720      	adds	r7, #32
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	40007c00 	.word	0x40007c00
 8007330:	40023800 	.word	0x40023800
 8007334:	00f42400 	.word	0x00f42400

08007338 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00a      	beq.n	8007362 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	430a      	orrs	r2, r1
 8007360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007366:	f003 0302 	and.w	r3, r3, #2
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00a      	beq.n	8007384 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	430a      	orrs	r2, r1
 8007382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007388:	f003 0304 	and.w	r3, r3, #4
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00a      	beq.n	80073a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073aa:	f003 0308 	and.w	r3, r3, #8
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00a      	beq.n	80073c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	f003 0310 	and.w	r3, r3, #16
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00a      	beq.n	80073ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ee:	f003 0320 	and.w	r3, r3, #32
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00a      	beq.n	800740c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	430a      	orrs	r2, r1
 800740a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007414:	2b00      	cmp	r3, #0
 8007416:	d01a      	beq.n	800744e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007436:	d10a      	bne.n	800744e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	430a      	orrs	r2, r1
 800744c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	430a      	orrs	r2, r1
 800746e:	605a      	str	r2, [r3, #4]
  }
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af02      	add	r7, sp, #8
 8007482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800748c:	f7fb fdbc 	bl	8003008 <HAL_GetTick>
 8007490:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0308 	and.w	r3, r3, #8
 800749c:	2b08      	cmp	r3, #8
 800749e:	d10e      	bne.n	80074be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f831 	bl	8007516 <UART_WaitOnFlagUntilTimeout>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e027      	b.n	800750e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0304 	and.w	r3, r3, #4
 80074c8:	2b04      	cmp	r3, #4
 80074ca:	d10e      	bne.n	80074ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f81b 	bl	8007516 <UART_WaitOnFlagUntilTimeout>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e011      	b.n	800750e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2220      	movs	r2, #32
 80074ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2220      	movs	r2, #32
 80074f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b09c      	sub	sp, #112	; 0x70
 800751a:	af00      	add	r7, sp, #0
 800751c:	60f8      	str	r0, [r7, #12]
 800751e:	60b9      	str	r1, [r7, #8]
 8007520:	603b      	str	r3, [r7, #0]
 8007522:	4613      	mov	r3, r2
 8007524:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007526:	e0a7      	b.n	8007678 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007528:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800752a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752e:	f000 80a3 	beq.w	8007678 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007532:	f7fb fd69 	bl	8003008 <HAL_GetTick>
 8007536:	4602      	mov	r2, r0
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800753e:	429a      	cmp	r2, r3
 8007540:	d302      	bcc.n	8007548 <UART_WaitOnFlagUntilTimeout+0x32>
 8007542:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007544:	2b00      	cmp	r3, #0
 8007546:	d13f      	bne.n	80075c8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007550:	e853 3f00 	ldrex	r3, [r3]
 8007554:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007558:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800755c:	667b      	str	r3, [r7, #100]	; 0x64
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	461a      	mov	r2, r3
 8007564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007566:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007568:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800756c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800756e:	e841 2300 	strex	r3, r2, [r1]
 8007572:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1e6      	bne.n	8007548 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3308      	adds	r3, #8
 8007580:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007584:	e853 3f00 	ldrex	r3, [r3]
 8007588:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800758a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758c:	f023 0301 	bic.w	r3, r3, #1
 8007590:	663b      	str	r3, [r7, #96]	; 0x60
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3308      	adds	r3, #8
 8007598:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800759a:	64ba      	str	r2, [r7, #72]	; 0x48
 800759c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80075a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075a2:	e841 2300 	strex	r3, r2, [r1]
 80075a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80075a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1e5      	bne.n	800757a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2220      	movs	r2, #32
 80075b2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2220      	movs	r2, #32
 80075b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e068      	b.n	800769a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0304 	and.w	r3, r3, #4
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d050      	beq.n	8007678 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	69db      	ldr	r3, [r3, #28]
 80075dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075e4:	d148      	bne.n	8007678 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f8:	e853 3f00 	ldrex	r3, [r3]
 80075fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007600:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007604:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800760e:	637b      	str	r3, [r7, #52]	; 0x34
 8007610:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007612:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007616:	e841 2300 	strex	r3, r2, [r1]
 800761a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800761c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1e6      	bne.n	80075f0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3308      	adds	r3, #8
 8007628:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	e853 3f00 	ldrex	r3, [r3]
 8007630:	613b      	str	r3, [r7, #16]
   return(result);
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	f023 0301 	bic.w	r3, r3, #1
 8007638:	66bb      	str	r3, [r7, #104]	; 0x68
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	3308      	adds	r3, #8
 8007640:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007642:	623a      	str	r2, [r7, #32]
 8007644:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007646:	69f9      	ldr	r1, [r7, #28]
 8007648:	6a3a      	ldr	r2, [r7, #32]
 800764a:	e841 2300 	strex	r3, r2, [r1]
 800764e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1e5      	bne.n	8007622 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2220      	movs	r2, #32
 800765a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2220      	movs	r2, #32
 8007660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2220      	movs	r2, #32
 8007668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e010      	b.n	800769a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	69da      	ldr	r2, [r3, #28]
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	4013      	ands	r3, r2
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	429a      	cmp	r2, r3
 8007686:	bf0c      	ite	eq
 8007688:	2301      	moveq	r3, #1
 800768a:	2300      	movne	r3, #0
 800768c:	b2db      	uxtb	r3, r3
 800768e:	461a      	mov	r2, r3
 8007690:	79fb      	ldrb	r3, [r7, #7]
 8007692:	429a      	cmp	r2, r3
 8007694:	f43f af48 	beq.w	8007528 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3770      	adds	r7, #112	; 0x70
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
	...

080076a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b097      	sub	sp, #92	; 0x5c
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	4613      	mov	r3, r2
 80076b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	88fa      	ldrh	r2, [r7, #6]
 80076bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	88fa      	ldrh	r2, [r7, #6]
 80076c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d6:	d10e      	bne.n	80076f6 <UART_Start_Receive_IT+0x52>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d105      	bne.n	80076ec <UART_Start_Receive_IT+0x48>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80076e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076ea:	e02d      	b.n	8007748 <UART_Start_Receive_IT+0xa4>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	22ff      	movs	r2, #255	; 0xff
 80076f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076f4:	e028      	b.n	8007748 <UART_Start_Receive_IT+0xa4>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10d      	bne.n	800771a <UART_Start_Receive_IT+0x76>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d104      	bne.n	8007710 <UART_Start_Receive_IT+0x6c>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	22ff      	movs	r2, #255	; 0xff
 800770a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800770e:	e01b      	b.n	8007748 <UART_Start_Receive_IT+0xa4>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	227f      	movs	r2, #127	; 0x7f
 8007714:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007718:	e016      	b.n	8007748 <UART_Start_Receive_IT+0xa4>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007722:	d10d      	bne.n	8007740 <UART_Start_Receive_IT+0x9c>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d104      	bne.n	8007736 <UART_Start_Receive_IT+0x92>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	227f      	movs	r2, #127	; 0x7f
 8007730:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007734:	e008      	b.n	8007748 <UART_Start_Receive_IT+0xa4>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	223f      	movs	r2, #63	; 0x3f
 800773a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800773e:	e003      	b.n	8007748 <UART_Start_Receive_IT+0xa4>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2222      	movs	r2, #34	; 0x22
 8007754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	3308      	adds	r3, #8
 800775e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007762:	e853 3f00 	ldrex	r3, [r3]
 8007766:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776a:	f043 0301 	orr.w	r3, r3, #1
 800776e:	657b      	str	r3, [r7, #84]	; 0x54
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	3308      	adds	r3, #8
 8007776:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007778:	64ba      	str	r2, [r7, #72]	; 0x48
 800777a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800777e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007780:	e841 2300 	strex	r3, r2, [r1]
 8007784:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1e5      	bne.n	8007758 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007794:	d107      	bne.n	80077a6 <UART_Start_Receive_IT+0x102>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d103      	bne.n	80077a6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	4a21      	ldr	r2, [pc, #132]	; (8007828 <UART_Start_Receive_IT+0x184>)
 80077a2:	669a      	str	r2, [r3, #104]	; 0x68
 80077a4:	e002      	b.n	80077ac <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	4a20      	ldr	r2, [pc, #128]	; (800782c <UART_Start_Receive_IT+0x188>)
 80077aa:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d019      	beq.n	80077e8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077bc:	e853 3f00 	ldrex	r3, [r3]
 80077c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80077c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077d2:	637b      	str	r3, [r7, #52]	; 0x34
 80077d4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077da:	e841 2300 	strex	r3, r2, [r1]
 80077de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1e6      	bne.n	80077b4 <UART_Start_Receive_IT+0x110>
 80077e6:	e018      	b.n	800781a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	613b      	str	r3, [r7, #16]
   return(result);
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	f043 0320 	orr.w	r3, r3, #32
 80077fc:	653b      	str	r3, [r7, #80]	; 0x50
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	461a      	mov	r2, r3
 8007804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007806:	623b      	str	r3, [r7, #32]
 8007808:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780a:	69f9      	ldr	r1, [r7, #28]
 800780c:	6a3a      	ldr	r2, [r7, #32]
 800780e:	e841 2300 	strex	r3, r2, [r1]
 8007812:	61bb      	str	r3, [r7, #24]
   return(result);
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e6      	bne.n	80077e8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	375c      	adds	r7, #92	; 0x5c
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	08007adf 	.word	0x08007adf
 800782c:	08007979 	.word	0x08007979

08007830 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007830:	b480      	push	{r7}
 8007832:	b095      	sub	sp, #84	; 0x54
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007840:	e853 3f00 	ldrex	r3, [r3]
 8007844:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007848:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800784c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	461a      	mov	r2, r3
 8007854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007856:	643b      	str	r3, [r7, #64]	; 0x40
 8007858:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800785c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800785e:	e841 2300 	strex	r3, r2, [r1]
 8007862:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1e6      	bne.n	8007838 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	3308      	adds	r3, #8
 8007870:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007872:	6a3b      	ldr	r3, [r7, #32]
 8007874:	e853 3f00 	ldrex	r3, [r3]
 8007878:	61fb      	str	r3, [r7, #28]
   return(result);
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	f023 0301 	bic.w	r3, r3, #1
 8007880:	64bb      	str	r3, [r7, #72]	; 0x48
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	3308      	adds	r3, #8
 8007888:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800788a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800788c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007892:	e841 2300 	strex	r3, r2, [r1]
 8007896:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1e5      	bne.n	800786a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d118      	bne.n	80078d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	e853 3f00 	ldrex	r3, [r3]
 80078b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	f023 0310 	bic.w	r3, r3, #16
 80078ba:	647b      	str	r3, [r7, #68]	; 0x44
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	461a      	mov	r2, r3
 80078c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078c4:	61bb      	str	r3, [r7, #24]
 80078c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c8:	6979      	ldr	r1, [r7, #20]
 80078ca:	69ba      	ldr	r2, [r7, #24]
 80078cc:	e841 2300 	strex	r3, r2, [r1]
 80078d0:	613b      	str	r3, [r7, #16]
   return(result);
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1e6      	bne.n	80078a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2220      	movs	r2, #32
 80078dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	669a      	str	r2, [r3, #104]	; 0x68
}
 80078ec:	bf00      	nop
 80078ee:	3754      	adds	r7, #84	; 0x54
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007904:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f7ff fa8a 	bl	8006e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800791c:	bf00      	nop
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b088      	sub	sp, #32
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	e853 3f00 	ldrex	r3, [r3]
 8007938:	60bb      	str	r3, [r7, #8]
   return(result);
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007940:	61fb      	str	r3, [r7, #28]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	461a      	mov	r2, r3
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	61bb      	str	r3, [r7, #24]
 800794c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794e:	6979      	ldr	r1, [r7, #20]
 8007950:	69ba      	ldr	r2, [r7, #24]
 8007952:	e841 2300 	strex	r3, r2, [r1]
 8007956:	613b      	str	r3, [r7, #16]
   return(result);
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1e6      	bne.n	800792c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2220      	movs	r2, #32
 8007962:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f7ff fa56 	bl	8006e1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007970:	bf00      	nop
 8007972:	3720      	adds	r7, #32
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b096      	sub	sp, #88	; 0x58
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007986:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007990:	2b22      	cmp	r3, #34	; 0x22
 8007992:	f040 8098 	bne.w	8007ac6 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80079a0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80079a4:	b2d9      	uxtb	r1, r3
 80079a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b0:	400a      	ands	r2, r1
 80079b2:	b2d2      	uxtb	r2, r2
 80079b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ba:	1c5a      	adds	r2, r3, #1
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	3b01      	subs	r3, #1
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079d8:	b29b      	uxth	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d17b      	bne.n	8007ad6 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e6:	e853 3f00 	ldrex	r3, [r3]
 80079ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079f2:	653b      	str	r3, [r7, #80]	; 0x50
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	461a      	mov	r2, r3
 80079fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079fc:	647b      	str	r3, [r7, #68]	; 0x44
 80079fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a04:	e841 2300 	strex	r3, r2, [r1]
 8007a08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1e6      	bne.n	80079de <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	3308      	adds	r3, #8
 8007a16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1a:	e853 3f00 	ldrex	r3, [r3]
 8007a1e:	623b      	str	r3, [r7, #32]
   return(result);
 8007a20:	6a3b      	ldr	r3, [r7, #32]
 8007a22:	f023 0301 	bic.w	r3, r3, #1
 8007a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a30:	633a      	str	r2, [r7, #48]	; 0x30
 8007a32:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a38:	e841 2300 	strex	r3, r2, [r1]
 8007a3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1e5      	bne.n	8007a10 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2220      	movs	r2, #32
 8007a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d12e      	bne.n	8007abe <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	e853 3f00 	ldrex	r3, [r3]
 8007a72:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f023 0310 	bic.w	r3, r3, #16
 8007a7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	461a      	mov	r2, r3
 8007a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a84:	61fb      	str	r3, [r7, #28]
 8007a86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	69b9      	ldr	r1, [r7, #24]
 8007a8a:	69fa      	ldr	r2, [r7, #28]
 8007a8c:	e841 2300 	strex	r3, r2, [r1]
 8007a90:	617b      	str	r3, [r7, #20]
   return(result);
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1e6      	bne.n	8007a66 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	f003 0310 	and.w	r3, r3, #16
 8007aa2:	2b10      	cmp	r3, #16
 8007aa4:	d103      	bne.n	8007aae <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2210      	movs	r2, #16
 8007aac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f7ff f9c4 	bl	8006e44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007abc:	e00b      	b.n	8007ad6 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7fa ffb8 	bl	8002a34 <HAL_UART_RxCpltCallback>
}
 8007ac4:	e007      	b.n	8007ad6 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	699a      	ldr	r2, [r3, #24]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f042 0208 	orr.w	r2, r2, #8
 8007ad4:	619a      	str	r2, [r3, #24]
}
 8007ad6:	bf00      	nop
 8007ad8:	3758      	adds	r7, #88	; 0x58
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b096      	sub	sp, #88	; 0x58
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007aec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007af6:	2b22      	cmp	r3, #34	; 0x22
 8007af8:	f040 8098 	bne.w	8007c2c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b02:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007b0c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007b10:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007b14:	4013      	ands	r3, r2
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b1a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b20:	1c9a      	adds	r2, r3, #2
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d17b      	bne.n	8007c3c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4c:	e853 3f00 	ldrex	r3, [r3]
 8007b50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b62:	643b      	str	r3, [r7, #64]	; 0x40
 8007b64:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b6a:	e841 2300 	strex	r3, r2, [r1]
 8007b6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1e6      	bne.n	8007b44 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3308      	adds	r3, #8
 8007b7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	e853 3f00 	ldrex	r3, [r3]
 8007b84:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	f023 0301 	bic.w	r3, r3, #1
 8007b8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3308      	adds	r3, #8
 8007b94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b9e:	e841 2300 	strex	r3, r2, [r1]
 8007ba2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1e5      	bne.n	8007b76 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2220      	movs	r2, #32
 8007bae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d12e      	bne.n	8007c24 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	e853 3f00 	ldrex	r3, [r3]
 8007bd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	f023 0310 	bic.w	r3, r3, #16
 8007be0:	647b      	str	r3, [r7, #68]	; 0x44
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bea:	61bb      	str	r3, [r7, #24]
 8007bec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bee:	6979      	ldr	r1, [r7, #20]
 8007bf0:	69ba      	ldr	r2, [r7, #24]
 8007bf2:	e841 2300 	strex	r3, r2, [r1]
 8007bf6:	613b      	str	r3, [r7, #16]
   return(result);
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1e6      	bne.n	8007bcc <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	69db      	ldr	r3, [r3, #28]
 8007c04:	f003 0310 	and.w	r3, r3, #16
 8007c08:	2b10      	cmp	r3, #16
 8007c0a:	d103      	bne.n	8007c14 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2210      	movs	r2, #16
 8007c12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7ff f911 	bl	8006e44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c22:	e00b      	b.n	8007c3c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f7fa ff05 	bl	8002a34 <HAL_UART_RxCpltCallback>
}
 8007c2a:	e007      	b.n	8007c3c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	699a      	ldr	r2, [r3, #24]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f042 0208 	orr.w	r2, r2, #8
 8007c3a:	619a      	str	r2, [r3, #24]
}
 8007c3c:	bf00      	nop
 8007c3e:	3758      	adds	r7, #88	; 0x58
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <__libc_init_array>:
 8007c44:	b570      	push	{r4, r5, r6, lr}
 8007c46:	4d0d      	ldr	r5, [pc, #52]	; (8007c7c <__libc_init_array+0x38>)
 8007c48:	4c0d      	ldr	r4, [pc, #52]	; (8007c80 <__libc_init_array+0x3c>)
 8007c4a:	1b64      	subs	r4, r4, r5
 8007c4c:	10a4      	asrs	r4, r4, #2
 8007c4e:	2600      	movs	r6, #0
 8007c50:	42a6      	cmp	r6, r4
 8007c52:	d109      	bne.n	8007c68 <__libc_init_array+0x24>
 8007c54:	4d0b      	ldr	r5, [pc, #44]	; (8007c84 <__libc_init_array+0x40>)
 8007c56:	4c0c      	ldr	r4, [pc, #48]	; (8007c88 <__libc_init_array+0x44>)
 8007c58:	f000 f864 	bl	8007d24 <_init>
 8007c5c:	1b64      	subs	r4, r4, r5
 8007c5e:	10a4      	asrs	r4, r4, #2
 8007c60:	2600      	movs	r6, #0
 8007c62:	42a6      	cmp	r6, r4
 8007c64:	d105      	bne.n	8007c72 <__libc_init_array+0x2e>
 8007c66:	bd70      	pop	{r4, r5, r6, pc}
 8007c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c6c:	4798      	blx	r3
 8007c6e:	3601      	adds	r6, #1
 8007c70:	e7ee      	b.n	8007c50 <__libc_init_array+0xc>
 8007c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c76:	4798      	blx	r3
 8007c78:	3601      	adds	r6, #1
 8007c7a:	e7f2      	b.n	8007c62 <__libc_init_array+0x1e>
 8007c7c:	08008440 	.word	0x08008440
 8007c80:	08008440 	.word	0x08008440
 8007c84:	08008440 	.word	0x08008440
 8007c88:	08008444 	.word	0x08008444

08007c8c <memset>:
 8007c8c:	4402      	add	r2, r0
 8007c8e:	4603      	mov	r3, r0
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d100      	bne.n	8007c96 <memset+0xa>
 8007c94:	4770      	bx	lr
 8007c96:	f803 1b01 	strb.w	r1, [r3], #1
 8007c9a:	e7f9      	b.n	8007c90 <memset+0x4>

08007c9c <__utoa>:
 8007c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c9e:	4c1f      	ldr	r4, [pc, #124]	; (8007d1c <__utoa+0x80>)
 8007ca0:	b08b      	sub	sp, #44	; 0x2c
 8007ca2:	4605      	mov	r5, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	466e      	mov	r6, sp
 8007ca8:	f104 0c20 	add.w	ip, r4, #32
 8007cac:	6820      	ldr	r0, [r4, #0]
 8007cae:	6861      	ldr	r1, [r4, #4]
 8007cb0:	4637      	mov	r7, r6
 8007cb2:	c703      	stmia	r7!, {r0, r1}
 8007cb4:	3408      	adds	r4, #8
 8007cb6:	4564      	cmp	r4, ip
 8007cb8:	463e      	mov	r6, r7
 8007cba:	d1f7      	bne.n	8007cac <__utoa+0x10>
 8007cbc:	7921      	ldrb	r1, [r4, #4]
 8007cbe:	7139      	strb	r1, [r7, #4]
 8007cc0:	1e91      	subs	r1, r2, #2
 8007cc2:	6820      	ldr	r0, [r4, #0]
 8007cc4:	6038      	str	r0, [r7, #0]
 8007cc6:	2922      	cmp	r1, #34	; 0x22
 8007cc8:	f04f 0100 	mov.w	r1, #0
 8007ccc:	d904      	bls.n	8007cd8 <__utoa+0x3c>
 8007cce:	7019      	strb	r1, [r3, #0]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	b00b      	add	sp, #44	; 0x2c
 8007cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cd8:	1e58      	subs	r0, r3, #1
 8007cda:	4684      	mov	ip, r0
 8007cdc:	fbb5 f7f2 	udiv	r7, r5, r2
 8007ce0:	fb02 5617 	mls	r6, r2, r7, r5
 8007ce4:	3628      	adds	r6, #40	; 0x28
 8007ce6:	446e      	add	r6, sp
 8007ce8:	460c      	mov	r4, r1
 8007cea:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007cee:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007cf2:	462e      	mov	r6, r5
 8007cf4:	42b2      	cmp	r2, r6
 8007cf6:	f101 0101 	add.w	r1, r1, #1
 8007cfa:	463d      	mov	r5, r7
 8007cfc:	d9ee      	bls.n	8007cdc <__utoa+0x40>
 8007cfe:	2200      	movs	r2, #0
 8007d00:	545a      	strb	r2, [r3, r1]
 8007d02:	1919      	adds	r1, r3, r4
 8007d04:	1aa5      	subs	r5, r4, r2
 8007d06:	42aa      	cmp	r2, r5
 8007d08:	dae3      	bge.n	8007cd2 <__utoa+0x36>
 8007d0a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007d0e:	780e      	ldrb	r6, [r1, #0]
 8007d10:	7006      	strb	r6, [r0, #0]
 8007d12:	3201      	adds	r2, #1
 8007d14:	f801 5901 	strb.w	r5, [r1], #-1
 8007d18:	e7f4      	b.n	8007d04 <__utoa+0x68>
 8007d1a:	bf00      	nop
 8007d1c:	08008410 	.word	0x08008410

08007d20 <utoa>:
 8007d20:	f7ff bfbc 	b.w	8007c9c <__utoa>

08007d24 <_init>:
 8007d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d26:	bf00      	nop
 8007d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d2a:	bc08      	pop	{r3}
 8007d2c:	469e      	mov	lr, r3
 8007d2e:	4770      	bx	lr

08007d30 <_fini>:
 8007d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d32:	bf00      	nop
 8007d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d36:	bc08      	pop	{r3}
 8007d38:	469e      	mov	lr, r3
 8007d3a:	4770      	bx	lr
