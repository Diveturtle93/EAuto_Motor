
Motorsteuergeraet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004840  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  08004a38  08004a38  00014a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dfc  08004dfc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004dfc  08004dfc  00014dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e04  08004e04  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e04  08004e04  00014e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  08004e18  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08004e18  00020128  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e90b  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000269f  00000000  00000000  0002e945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  00030fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  00031ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f67  00000000  00000000  00032480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105c3  00000000  00000000  0005c3e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbbf8  00000000  00000000  0006c9aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001685a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a3c  00000000  00000000  001685f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004a20 	.word	0x08004a20

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08004a20 	.word	0x08004a20

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	b29a      	uxth	r2, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	6879      	ldr	r1, [r7, #4]
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <uartTransmit+0x24>)
 8000562:	f003 fd37 	bl	8003fd4 <HAL_UART_Transmit>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	2000009c 	.word	0x2000009c

08000574 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
	char str[11];

	itoa(number, str, base);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	683a      	ldr	r2, [r7, #0]
 8000582:	f107 010c 	add.w	r1, r7, #12
 8000586:	4618      	mov	r0, r3
 8000588:	f004 f9fe 	bl	8004988 <itoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff fe51 	bl	8000238 <strlen>
 8000596:	4603      	mov	r3, r0
 8000598:	b29a      	uxth	r2, r3
 800059a:	f107 010c 	add.w	r1, r7, #12
 800059e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <uartTransmitNumber+0x3c>)
 80005a4:	f003 fd16 	bl	8003fd4 <HAL_UART_Transmit>
}
 80005a8:	bf00      	nop
 80005aa:	3718      	adds	r7, #24
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	2000009c 	.word	0x2000009c

080005b4 <collectMiddlewareInfo>:


// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION		"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION			"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION	"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION			"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 80005b8:	2112      	movs	r1, #18
 80005ba:	4822      	ldr	r0, [pc, #136]	; (8000644 <collectMiddlewareInfo+0x90>)
 80005bc:	f7ff ffc6 	bl	800054c <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);					// CMSIS Version anzeigen
 80005c0:	210a      	movs	r1, #10
 80005c2:	2005      	movs	r0, #5
 80005c4:	f7ff ffd6 	bl	8000574 <uartTransmitNumber>
	uartTransmit(".", 1);
 80005c8:	2101      	movs	r1, #1
 80005ca:	481f      	ldr	r0, [pc, #124]	; (8000648 <collectMiddlewareInfo+0x94>)
 80005cc:	f7ff ffbe 	bl	800054c <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);					// CMSIS Version anzeigen
 80005d0:	210a      	movs	r1, #10
 80005d2:	2001      	movs	r0, #1
 80005d4:	f7ff ffce 	bl	8000574 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));		// Hal Version anzeigen
 80005d8:	2110      	movs	r1, #16
 80005da:	481c      	ldr	r0, [pc, #112]	; (800064c <collectMiddlewareInfo+0x98>)
 80005dc:	f7ff ffb6 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 80005e0:	f001 fb80 	bl	8001ce4 <HAL_GetHalVersion>
 80005e4:	4603      	mov	r3, r0
 80005e6:	0e1b      	lsrs	r3, r3, #24
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	210a      	movs	r1, #10
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ffc1 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);												// Hal Version anzeigen
 80005f2:	2101      	movs	r1, #1
 80005f4:	4814      	ldr	r0, [pc, #80]	; (8000648 <collectMiddlewareInfo+0x94>)
 80005f6:	f7ff ffa9 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 80005fa:	f001 fb73 	bl	8001ce4 <HAL_GetHalVersion>
 80005fe:	4603      	mov	r3, r0
 8000600:	0c1b      	lsrs	r3, r3, #16
 8000602:	b2db      	uxtb	r3, r3
 8000604:	210a      	movs	r1, #10
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ffb4 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);												// Hal Version anzeigen
 800060c:	2101      	movs	r1, #1
 800060e:	480e      	ldr	r0, [pc, #56]	; (8000648 <collectMiddlewareInfo+0x94>)
 8000610:	f7ff ff9c 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000614:	f001 fb66 	bl	8001ce4 <HAL_GetHalVersion>
 8000618:	4603      	mov	r3, r0
 800061a:	0a1b      	lsrs	r3, r3, #8
 800061c:	b2db      	uxtb	r3, r3
 800061e:	210a      	movs	r1, #10
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ffa7 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);												// Hal Version anzeigen
 8000626:	2101      	movs	r1, #1
 8000628:	4807      	ldr	r0, [pc, #28]	; (8000648 <collectMiddlewareInfo+0x94>)
 800062a:	f7ff ff8f 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 800062e:	f001 fb59 	bl	8001ce4 <HAL_GetHalVersion>
 8000632:	4603      	mov	r3, r0
 8000634:	b2db      	uxtb	r3, r3
 8000636:	210a      	movs	r1, #10
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff9b 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);					// FreeRTOS Kernel Version anzeigen

	uartTransmit("\n", 1);*/
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	08004a38 	.word	0x08004a38
 8000648:	08004a4c 	.word	0x08004a4c
 800064c:	08004a50 	.word	0x08004a50

08000650 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	#define STRING_GIT_BRANCH			"\nGit Branch:\t\t"
	#define STRING_GIT_HASH				"\nGit Hash:\t\t"
	#define STRING_BUILD_DATE			"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME			"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_VERSION, sizeof(STRING_GIT_VERSION));
 8000654:	2110      	movs	r1, #16
 8000656:	4816      	ldr	r0, [pc, #88]	; (80006b0 <collectSoftwareInfo+0x60>)
 8000658:	f7ff ff78 	bl	800054c <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));						// Git Commit anzeigen
 800065c:	2108      	movs	r1, #8
 800065e:	4815      	ldr	r0, [pc, #84]	; (80006b4 <collectSoftwareInfo+0x64>)
 8000660:	f7ff ff74 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000664:	210f      	movs	r1, #15
 8000666:	4814      	ldr	r0, [pc, #80]	; (80006b8 <collectSoftwareInfo+0x68>)
 8000668:	f7ff ff70 	bl	800054c <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));						// Git Branch anzeigen
 800066c:	210c      	movs	r1, #12
 800066e:	4813      	ldr	r0, [pc, #76]	; (80006bc <collectSoftwareInfo+0x6c>)
 8000670:	f7ff ff6c 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000674:	210d      	movs	r1, #13
 8000676:	4812      	ldr	r0, [pc, #72]	; (80006c0 <collectSoftwareInfo+0x70>)
 8000678:	f7ff ff68 	bl	800054c <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));							// Git Hash anzeigen
 800067c:	2129      	movs	r1, #41	; 0x29
 800067e:	4811      	ldr	r0, [pc, #68]	; (80006c4 <collectSoftwareInfo+0x74>)
 8000680:	f7ff ff64 	bl	800054c <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 8000684:	210f      	movs	r1, #15
 8000686:	4810      	ldr	r0, [pc, #64]	; (80006c8 <collectSoftwareInfo+0x78>)
 8000688:	f7ff ff60 	bl	800054c <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));						// Kompilierdatum anzeigen
 800068c:	210c      	movs	r1, #12
 800068e:	480f      	ldr	r0, [pc, #60]	; (80006cc <collectSoftwareInfo+0x7c>)
 8000690:	f7ff ff5c 	bl	800054c <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 8000694:	210f      	movs	r1, #15
 8000696:	480e      	ldr	r0, [pc, #56]	; (80006d0 <collectSoftwareInfo+0x80>)
 8000698:	f7ff ff58 	bl	800054c <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));						// Kompilierzeit anzeigen
 800069c:	2109      	movs	r1, #9
 800069e:	480d      	ldr	r0, [pc, #52]	; (80006d4 <collectSoftwareInfo+0x84>)
 80006a0:	f7ff ff54 	bl	800054c <uartTransmit>

	uartTransmit("\n", 1);
 80006a4:	2101      	movs	r1, #1
 80006a6:	480c      	ldr	r0, [pc, #48]	; (80006d8 <collectSoftwareInfo+0x88>)
 80006a8:	f7ff ff50 	bl	800054c <uartTransmit>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	08004a60 	.word	0x08004a60
 80006b4:	08004a70 	.word	0x08004a70
 80006b8:	08004a78 	.word	0x08004a78
 80006bc:	08004a88 	.word	0x08004a88
 80006c0:	08004a94 	.word	0x08004a94
 80006c4:	08004aa4 	.word	0x08004aa4
 80006c8:	08004ad0 	.word	0x08004ad0
 80006cc:	08004ae0 	.word	0x08004ae0
 80006d0:	08004aec 	.word	0x08004aec
 80006d4:	08004afc 	.word	0x08004afc
 80006d8:	08004b08 	.word	0x08004b08

080006dc <collectHardwareInfo>:
//----------------------------------------------------------------------

// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID		"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION			"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ				"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID				"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 80006e2:	2113      	movs	r1, #19
 80006e4:	483b      	ldr	r0, [pc, #236]	; (80007d4 <collectHardwareInfo+0xf8>)
 80006e6:	f7ff ff31 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);								// Mikrocontroller Typ
 80006ea:	f001 fb11 	bl	8001d10 <HAL_GetDEVID>
 80006ee:	4603      	mov	r3, r0
 80006f0:	210a      	movs	r1, #10
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff3e 	bl	8000574 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 80006f8:	2115      	movs	r1, #21
 80006fa:	4837      	ldr	r0, [pc, #220]	; (80007d8 <collectHardwareInfo+0xfc>)
 80006fc:	f7ff ff26 	bl	800054c <uartTransmit>
	
	switch(HAL_GetREVID())												// Mikrocontroller Revision
 8000700:	f001 fafa 	bl	8001cf8 <HAL_GetREVID>
 8000704:	4603      	mov	r3, r0
 8000706:	f242 0201 	movw	r2, #8193	; 0x2001
 800070a:	4293      	cmp	r3, r2
 800070c:	d016      	beq.n	800073c <collectHardwareInfo+0x60>
 800070e:	f242 0201 	movw	r2, #8193	; 0x2001
 8000712:	4293      	cmp	r3, r2
 8000714:	d817      	bhi.n	8000746 <collectHardwareInfo+0x6a>
 8000716:	f241 0201 	movw	r2, #4097	; 0x1001
 800071a:	4293      	cmp	r3, r2
 800071c:	d004      	beq.n	8000728 <collectHardwareInfo+0x4c>
 800071e:	f241 0203 	movw	r2, #4099	; 0x1003
 8000722:	4293      	cmp	r3, r2
 8000724:	d005      	beq.n	8000732 <collectHardwareInfo+0x56>
 8000726:	e00e      	b.n	8000746 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8000728:	2101      	movs	r1, #1
 800072a:	482c      	ldr	r0, [pc, #176]	; (80007dc <collectHardwareInfo+0x100>)
 800072c:	f7ff ff0e 	bl	800054c <uartTransmit>
			break;
 8000730:	e011      	b.n	8000756 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 8000732:	2101      	movs	r1, #1
 8000734:	482a      	ldr	r0, [pc, #168]	; (80007e0 <collectHardwareInfo+0x104>)
 8000736:	f7ff ff09 	bl	800054c <uartTransmit>
			break;
 800073a:	e00c      	b.n	8000756 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 800073c:	2101      	movs	r1, #1
 800073e:	4829      	ldr	r0, [pc, #164]	; (80007e4 <collectHardwareInfo+0x108>)
 8000740:	f7ff ff04 	bl	800054c <uartTransmit>
			break;
 8000744:	e007      	b.n	8000756 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 8000746:	f001 fad7 	bl	8001cf8 <HAL_GetREVID>
 800074a:	4603      	mov	r3, r0
 800074c:	210a      	movs	r1, #10
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff10 	bl	8000574 <uartTransmitNumber>
			break;
 8000754:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 8000756:	2113      	movs	r1, #19
 8000758:	4823      	ldr	r0, [pc, #140]	; (80007e8 <collectHardwareInfo+0x10c>)
 800075a:	f7ff fef7 	bl	800054c <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();					// Systemfrequenz ausgeben
 800075e:	f002 fec9 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 8000762:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4a21      	ldr	r2, [pc, #132]	; (80007ec <collectHardwareInfo+0x110>)
 8000768:	fba2 2303 	umull	r2, r3, r2, r3
 800076c:	0c9b      	lsrs	r3, r3, #18
 800076e:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 8000770:	210a      	movs	r1, #10
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff fefe 	bl	8000574 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 8000778:	2104      	movs	r1, #4
 800077a:	481d      	ldr	r0, [pc, #116]	; (80007f0 <collectHardwareInfo+0x114>)
 800077c:	f7ff fee6 	bl	800054c <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 8000780:	210f      	movs	r1, #15
 8000782:	481c      	ldr	r0, [pc, #112]	; (80007f4 <collectHardwareInfo+0x118>)
 8000784:	f7ff fee2 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);								// UID0 ausgeben
 8000788:	f001 fad0 	bl	8001d2c <HAL_GetUIDw0>
 800078c:	4603      	mov	r3, r0
 800078e:	2110      	movs	r1, #16
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff feef 	bl	8000574 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000796:	2101      	movs	r1, #1
 8000798:	4817      	ldr	r0, [pc, #92]	; (80007f8 <collectHardwareInfo+0x11c>)
 800079a:	f7ff fed7 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);								// UID1 ausgeben
 800079e:	f001 fad1 	bl	8001d44 <HAL_GetUIDw1>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2110      	movs	r1, #16
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fee4 	bl	8000574 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80007ac:	2101      	movs	r1, #1
 80007ae:	4812      	ldr	r0, [pc, #72]	; (80007f8 <collectHardwareInfo+0x11c>)
 80007b0:	f7ff fecc 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);								// UID2 ausgeben
 80007b4:	f001 fad2 	bl	8001d5c <HAL_GetUIDw2>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2110      	movs	r1, #16
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fed9 	bl	8000574 <uartTransmitNumber>

	uartTransmit("\n", 1);
 80007c2:	2101      	movs	r1, #1
 80007c4:	480d      	ldr	r0, [pc, #52]	; (80007fc <collectHardwareInfo+0x120>)
 80007c6:	f7ff fec1 	bl	800054c <uartTransmit>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	08004b0c 	.word	0x08004b0c
 80007d8:	08004b20 	.word	0x08004b20
 80007dc:	08004b38 	.word	0x08004b38
 80007e0:	08004b3c 	.word	0x08004b3c
 80007e4:	08004b40 	.word	0x08004b40
 80007e8:	08004b44 	.word	0x08004b44
 80007ec:	431bde83 	.word	0x431bde83
 80007f0:	08004b58 	.word	0x08004b58
 80007f4:	08004b60 	.word	0x08004b60
 80007f8:	08004b70 	.word	0x08004b70
 80007fc:	08004b08 	.word	0x08004b08

08000800 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL "\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL "\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL "\n\t --Software--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000804:	2111      	movs	r1, #17
 8000806:	480b      	ldr	r0, [pc, #44]	; (8000834 <collectSystemInfo+0x34>)
 8000808:	f7ff fea0 	bl	800054c <uartTransmit>
	collectHardwareInfo();												// Sammelt Hardware Informationen und gibt diese über Uart aus
 800080c:	f7ff ff66 	bl	80006dc <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000810:	2111      	movs	r1, #17
 8000812:	4809      	ldr	r0, [pc, #36]	; (8000838 <collectSystemInfo+0x38>)
 8000814:	f7ff fe9a 	bl	800054c <uartTransmit>
	collectSoftwareInfo();												// Sammelt Software Informationen und gibt diese über Uart aus
 8000818:	f7ff ff1a 	bl	8000650 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 800081c:	2113      	movs	r1, #19
 800081e:	4807      	ldr	r0, [pc, #28]	; (800083c <collectSystemInfo+0x3c>)
 8000820:	f7ff fe94 	bl	800054c <uartTransmit>
	collectMiddlewareInfo();											// Sammelt Middleware Informationen und gibt diese über Uart aus
 8000824:	f7ff fec6 	bl	80005b4 <collectMiddlewareInfo>

	uartTransmit("\n\n\n", 3);
 8000828:	2103      	movs	r1, #3
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <collectSystemInfo+0x40>)
 800082c:	f7ff fe8e 	bl	800054c <uartTransmit>
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	08004b74 	.word	0x08004b74
 8000838:	08004b88 	.word	0x08004b88
 800083c:	08004b9c 	.word	0x08004b9c
 8000840:	08004bb0 	.word	0x08004bb0

08000844 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 800084a:	2300      	movs	r3, #0
 800084c:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 800084e:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <readResetSource+0xa0>)
 8000850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000852:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000856:	2b00      	cmp	r3, #0
 8000858:	d002      	beq.n	8000860 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	3301      	adds	r3, #1
 800085e:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000860:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <readResetSource+0xa0>)
 8000862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000864:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000868:	2b00      	cmp	r3, #0
 800086a:	d002      	beq.n	8000872 <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	3302      	adds	r3, #2
 8000870:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <readResetSource+0xa0>)
 8000874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000876:	2b00      	cmp	r3, #0
 8000878:	da02      	bge.n	8000880 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	3304      	adds	r3, #4
 800087e:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <readResetSource+0xa0>)
 8000882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000888:	2b00      	cmp	r3, #0
 800088a:	d002      	beq.n	8000892 <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	3308      	adds	r3, #8
 8000890:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <readResetSource+0xa0>)
 8000894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000896:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800089a:	2b00      	cmp	r3, #0
 800089c:	d002      	beq.n	80008a4 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	3310      	adds	r3, #16
 80008a2:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <readResetSource+0xa0>)
 80008a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d002      	beq.n	80008b6 <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	3320      	adds	r3, #32
 80008b4:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <readResetSource+0xa0>)
 80008b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d002      	beq.n	80008c8 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	3340      	adds	r3, #64	; 0x40
 80008c6:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <readResetSource+0xa0>)
 80008ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008cc:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <readResetSource+0xa0>)
 80008ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008d2:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 80008d4:	79fb      	ldrb	r3, [r7, #7]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800

080008e8 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
	if (reset_flags == STARTUP)											// Regulaerer Start
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d104      	bne.n	8000902 <printResetSource+0x1a>
	{
		uartTransmit("Regular Start\r\n", 15);
 80008f8:	210f      	movs	r1, #15
 80008fa:	4827      	ldr	r0, [pc, #156]	; (8000998 <printResetSource+0xb0>)
 80008fc:	f7ff fe26 	bl	800054c <uartTransmit>
		if (reset_flags & RMVF1)										//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8000900:	e046      	b.n	8000990 <printResetSource+0xa8>
		if (reset_flags & IWDG1)										// Interner watchdog Reset
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	2b00      	cmp	r3, #0
 800090a:	d003      	beq.n	8000914 <printResetSource+0x2c>
			uartTransmit("Interner Watchdog Reset\n", 24);
 800090c:	2118      	movs	r1, #24
 800090e:	4823      	ldr	r0, [pc, #140]	; (800099c <printResetSource+0xb4>)
 8000910:	f7ff fe1c 	bl	800054c <uartTransmit>
		if (reset_flags & WWDG1)										// Window watchdog Reset
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	2b00      	cmp	r3, #0
 800091c:	d003      	beq.n	8000926 <printResetSource+0x3e>
			uartTransmit("Window Watchdog Reset\n", 22);
 800091e:	2116      	movs	r1, #22
 8000920:	481f      	ldr	r0, [pc, #124]	; (80009a0 <printResetSource+0xb8>)
 8000922:	f7ff fe13 	bl	800054c <uartTransmit>
		if (reset_flags & CPURST1)										// CPU Reset
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	f003 0304 	and.w	r3, r3, #4
 800092c:	2b00      	cmp	r3, #0
 800092e:	d003      	beq.n	8000938 <printResetSource+0x50>
			uartTransmit("CPU Reset\n", 10);
 8000930:	210a      	movs	r1, #10
 8000932:	481c      	ldr	r0, [pc, #112]	; (80009a4 <printResetSource+0xbc>)
 8000934:	f7ff fe0a 	bl	800054c <uartTransmit>
		if (reset_flags & BORST1)										// Brown out Reset
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	f003 0308 	and.w	r3, r3, #8
 800093e:	2b00      	cmp	r3, #0
 8000940:	d003      	beq.n	800094a <printResetSource+0x62>
			uartTransmit("Brown Out Reset\n", 16);
 8000942:	2110      	movs	r1, #16
 8000944:	4818      	ldr	r0, [pc, #96]	; (80009a8 <printResetSource+0xc0>)
 8000946:	f7ff fe01 	bl	800054c <uartTransmit>
		if (reset_flags & PORST1)										//Power on Reset / Power down Reser
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	f003 0310 	and.w	r3, r3, #16
 8000950:	2b00      	cmp	r3, #0
 8000952:	d003      	beq.n	800095c <printResetSource+0x74>
			uartTransmit("Power On Reset\n", 15);
 8000954:	210f      	movs	r1, #15
 8000956:	4815      	ldr	r0, [pc, #84]	; (80009ac <printResetSource+0xc4>)
 8000958:	f7ff fdf8 	bl	800054c <uartTransmit>
		if (reset_flags & SFTRST1)										// Software Reset
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	f003 0320 	and.w	r3, r3, #32
 8000962:	2b00      	cmp	r3, #0
 8000964:	d003      	beq.n	800096e <printResetSource+0x86>
			uartTransmit("Software Reset\n", 15);
 8000966:	210f      	movs	r1, #15
 8000968:	4811      	ldr	r0, [pc, #68]	; (80009b0 <printResetSource+0xc8>)
 800096a:	f7ff fdef 	bl	800054c <uartTransmit>
		if (reset_flags & PINRST1)										//NRST pin
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000974:	2b00      	cmp	r3, #0
 8000976:	d003      	beq.n	8000980 <printResetSource+0x98>
			uartTransmit("PIN Reset\n", 10);
 8000978:	210a      	movs	r1, #10
 800097a:	480e      	ldr	r0, [pc, #56]	; (80009b4 <printResetSource+0xcc>)
 800097c:	f7ff fde6 	bl	800054c <uartTransmit>
		if (reset_flags & RMVF1)										//NRST pin
 8000980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000984:	2b00      	cmp	r3, #0
 8000986:	da03      	bge.n	8000990 <printResetSource+0xa8>
			uartTransmit("RMVF\n", 5);
 8000988:	2105      	movs	r1, #5
 800098a:	480b      	ldr	r0, [pc, #44]	; (80009b8 <printResetSource+0xd0>)
 800098c:	f7ff fdde 	bl	800054c <uartTransmit>
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	08004bb4 	.word	0x08004bb4
 800099c:	08004bc4 	.word	0x08004bc4
 80009a0:	08004be0 	.word	0x08004be0
 80009a4:	08004bf8 	.word	0x08004bf8
 80009a8:	08004c04 	.word	0x08004c04
 80009ac:	08004c18 	.word	0x08004c18
 80009b0:	08004c28 	.word	0x08004c28
 80009b4:	08004c38 	.word	0x08004c38
 80009b8:	08004c44 	.word	0x08004c44

080009bc <ADC_Gaspedal>:
//----------------------------------------------------------------------

// Gaspedal einlesen
//----------------------------------------------------------------------
uint16_t ADC_Gaspedal(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_6;										// ADC Kanal einstellen
 80009d2:	2306      	movs	r3, #6
 80009d4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 80009d6:	2301      	movs	r3, #1
 80009d8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;							// ADC Sampletime einstellen
 80009da:	2307      	movs	r3, #7
 80009dc:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	4619      	mov	r1, r3
 80009e2:	4811      	ldr	r0, [pc, #68]	; (8000a28 <ADC_Gaspedal+0x6c>)
 80009e4:	f001 fba4 	bl	8002130 <HAL_ADC_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <ADC_Gaspedal+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 80009ee:	f000 ffd7 	bl	80019a0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 80009f2:	480d      	ldr	r0, [pc, #52]	; (8000a28 <ADC_Gaspedal+0x6c>)
 80009f4:	f001 fa02 	bl	8001dfc <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 80009f8:	2164      	movs	r1, #100	; 0x64
 80009fa:	480b      	ldr	r0, [pc, #44]	; (8000a28 <ADC_Gaspedal+0x6c>)
 80009fc:	f001 fb00 	bl	8002000 <HAL_ADC_PollForConversion>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d105      	bne.n	8000a12 <ADC_Gaspedal+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000a06:	4808      	ldr	r0, [pc, #32]	; (8000a28 <ADC_Gaspedal+0x6c>)
 8000a08:	f001 fb85 	bl	8002116 <HAL_ADC_GetValue>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	82fb      	strh	r3, [r7, #22]
 8000a10:	e002      	b.n	8000a18 <ADC_Gaspedal+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000a12:	2003      	movs	r0, #3
 8000a14:	f000 fa04 	bl	8000e20 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000a18:	4803      	ldr	r0, [pc, #12]	; (8000a28 <ADC_Gaspedal+0x6c>)
 8000a1a:	f001 fabd 	bl	8001f98 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000a1e:	8afb      	ldrh	r3, [r7, #22]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000028 	.word	0x20000028

08000a2c <ADC_Bremsdruck>:
//----------------------------------------------------------------------

// Bremsdruck einlesen
//----------------------------------------------------------------------
uint16_t ADC_Bremsdruck(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_14;										// ADC Kanal einstellen
 8000a42:	230e      	movs	r3, #14
 8000a44:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000a46:	2301      	movs	r3, #1
 8000a48:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;							// ADC Sampletime einstellen
 8000a4a:	2307      	movs	r3, #7
 8000a4c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	4619      	mov	r1, r3
 8000a52:	4811      	ldr	r0, [pc, #68]	; (8000a98 <ADC_Bremsdruck+0x6c>)
 8000a54:	f001 fb6c 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <ADC_Bremsdruck+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000a5e:	f000 ff9f 	bl	80019a0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000a62:	480d      	ldr	r0, [pc, #52]	; (8000a98 <ADC_Bremsdruck+0x6c>)
 8000a64:	f001 f9ca 	bl	8001dfc <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000a68:	2164      	movs	r1, #100	; 0x64
 8000a6a:	480b      	ldr	r0, [pc, #44]	; (8000a98 <ADC_Bremsdruck+0x6c>)
 8000a6c:	f001 fac8 	bl	8002000 <HAL_ADC_PollForConversion>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d105      	bne.n	8000a82 <ADC_Bremsdruck+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000a76:	4808      	ldr	r0, [pc, #32]	; (8000a98 <ADC_Bremsdruck+0x6c>)
 8000a78:	f001 fb4d 	bl	8002116 <HAL_ADC_GetValue>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	82fb      	strh	r3, [r7, #22]
 8000a80:	e002      	b.n	8000a88 <ADC_Bremsdruck+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000a82:	2003      	movs	r0, #3
 8000a84:	f000 f9cc 	bl	8000e20 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000a88:	4803      	ldr	r0, [pc, #12]	; (8000a98 <ADC_Bremsdruck+0x6c>)
 8000a8a:	f001 fa85 	bl	8001f98 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000a8e:	8afb      	ldrh	r3, [r7, #22]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3718      	adds	r7, #24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000028 	.word	0x20000028

08000a9c <ADC_KL15>:
//----------------------------------------------------------------------

// Spannung KL15 einlesen
//----------------------------------------------------------------------
uint16_t ADC_KL15 (void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_3;										// ADC Kanal einstellen
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;							// ADC Sampletime einstellen
 8000aba:	2307      	movs	r3, #7
 8000abc:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4811      	ldr	r0, [pc, #68]	; (8000b08 <ADC_KL15+0x6c>)
 8000ac4:	f001 fb34 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <ADC_KL15+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000ace:	f000 ff67 	bl	80019a0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000ad2:	480d      	ldr	r0, [pc, #52]	; (8000b08 <ADC_KL15+0x6c>)
 8000ad4:	f001 f992 	bl	8001dfc <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000ad8:	2164      	movs	r1, #100	; 0x64
 8000ada:	480b      	ldr	r0, [pc, #44]	; (8000b08 <ADC_KL15+0x6c>)
 8000adc:	f001 fa90 	bl	8002000 <HAL_ADC_PollForConversion>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d105      	bne.n	8000af2 <ADC_KL15+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000ae6:	4808      	ldr	r0, [pc, #32]	; (8000b08 <ADC_KL15+0x6c>)
 8000ae8:	f001 fb15 	bl	8002116 <HAL_ADC_GetValue>
 8000aec:	4603      	mov	r3, r0
 8000aee:	82fb      	strh	r3, [r7, #22]
 8000af0:	e002      	b.n	8000af8 <ADC_KL15+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000af2:	2003      	movs	r0, #3
 8000af4:	f000 f994 	bl	8000e20 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000af8:	4803      	ldr	r0, [pc, #12]	; (8000b08 <ADC_KL15+0x6c>)
 8000afa:	f001 fa4d 	bl	8001f98 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000afe:	8afb      	ldrh	r3, [r7, #22]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000028 	.word	0x20000028

08000b0c <ADC_Kuhlwassertemperatur>:
//----------------------------------------------------------------------

// Kuehlwassertemperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_Kuhlwassertemperatur (void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_4;										// ADC Kanal einstellen
 8000b22:	2304      	movs	r3, #4
 8000b24:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000b26:	2301      	movs	r3, #1
 8000b28:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;							// ADC Sampletime einstellen
 8000b2a:	2307      	movs	r3, #7
 8000b2c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	4619      	mov	r1, r3
 8000b32:	4811      	ldr	r0, [pc, #68]	; (8000b78 <ADC_Kuhlwassertemperatur+0x6c>)
 8000b34:	f001 fafc 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <ADC_Kuhlwassertemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000b3e:	f000 ff2f 	bl	80019a0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000b42:	480d      	ldr	r0, [pc, #52]	; (8000b78 <ADC_Kuhlwassertemperatur+0x6c>)
 8000b44:	f001 f95a 	bl	8001dfc <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000b48:	2164      	movs	r1, #100	; 0x64
 8000b4a:	480b      	ldr	r0, [pc, #44]	; (8000b78 <ADC_Kuhlwassertemperatur+0x6c>)
 8000b4c:	f001 fa58 	bl	8002000 <HAL_ADC_PollForConversion>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d105      	bne.n	8000b62 <ADC_Kuhlwassertemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000b56:	4808      	ldr	r0, [pc, #32]	; (8000b78 <ADC_Kuhlwassertemperatur+0x6c>)
 8000b58:	f001 fadd 	bl	8002116 <HAL_ADC_GetValue>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	82fb      	strh	r3, [r7, #22]
 8000b60:	e002      	b.n	8000b68 <ADC_Kuhlwassertemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000b62:	2003      	movs	r0, #3
 8000b64:	f000 f95c 	bl	8000e20 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000b68:	4803      	ldr	r0, [pc, #12]	; (8000b78 <ADC_Kuhlwassertemperatur+0x6c>)
 8000b6a:	f001 fa15 	bl	8001f98 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000b6e:	8afb      	ldrh	r3, [r7, #22]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000028 	.word	0x20000028

08000b7c <ADC_Klimaflap>:
//----------------------------------------------------------------------

// Klimaflapstellung einlesen (Position ueber Poti)
//----------------------------------------------------------------------
uint16_t ADC_Klimaflap (void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_5;										// ADC Kanal einstellen
 8000b92:	2305      	movs	r3, #5
 8000b94:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000b96:	2301      	movs	r3, #1
 8000b98:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;							// ADC Sampletime einstellen
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4811      	ldr	r0, [pc, #68]	; (8000be8 <ADC_Klimaflap+0x6c>)
 8000ba4:	f001 fac4 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <ADC_Klimaflap+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000bae:	f000 fef7 	bl	80019a0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000bb2:	480d      	ldr	r0, [pc, #52]	; (8000be8 <ADC_Klimaflap+0x6c>)
 8000bb4:	f001 f922 	bl	8001dfc <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000bb8:	2164      	movs	r1, #100	; 0x64
 8000bba:	480b      	ldr	r0, [pc, #44]	; (8000be8 <ADC_Klimaflap+0x6c>)
 8000bbc:	f001 fa20 	bl	8002000 <HAL_ADC_PollForConversion>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d105      	bne.n	8000bd2 <ADC_Klimaflap+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000bc6:	4808      	ldr	r0, [pc, #32]	; (8000be8 <ADC_Klimaflap+0x6c>)
 8000bc8:	f001 faa5 	bl	8002116 <HAL_ADC_GetValue>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	82fb      	strh	r3, [r7, #22]
 8000bd0:	e002      	b.n	8000bd8 <ADC_Klimaflap+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000bd2:	2003      	movs	r0, #3
 8000bd4:	f000 f924 	bl	8000e20 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000bd8:	4803      	ldr	r0, [pc, #12]	; (8000be8 <ADC_Klimaflap+0x6c>)
 8000bda:	f001 f9dd 	bl	8001f98 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000bde:	8afb      	ldrh	r3, [r7, #22]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000028 	.word	0x20000028

08000bec <ADC_PCBTemperatur>:
//----------------------------------------------------------------------

// PCB Temperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_PCBTemperatur (void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_7;										// ADC Kanal einstellen
 8000c02:	2307      	movs	r3, #7
 8000c04:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000c06:	2301      	movs	r3, #1
 8000c08:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;							// ADC Sampletime einstellen
 8000c0a:	2307      	movs	r3, #7
 8000c0c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	4619      	mov	r1, r3
 8000c12:	4811      	ldr	r0, [pc, #68]	; (8000c58 <ADC_PCBTemperatur+0x6c>)
 8000c14:	f001 fa8c 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <ADC_PCBTemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000c1e:	f000 febf 	bl	80019a0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000c22:	480d      	ldr	r0, [pc, #52]	; (8000c58 <ADC_PCBTemperatur+0x6c>)
 8000c24:	f001 f8ea 	bl	8001dfc <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000c28:	2164      	movs	r1, #100	; 0x64
 8000c2a:	480b      	ldr	r0, [pc, #44]	; (8000c58 <ADC_PCBTemperatur+0x6c>)
 8000c2c:	f001 f9e8 	bl	8002000 <HAL_ADC_PollForConversion>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d105      	bne.n	8000c42 <ADC_PCBTemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000c36:	4808      	ldr	r0, [pc, #32]	; (8000c58 <ADC_PCBTemperatur+0x6c>)
 8000c38:	f001 fa6d 	bl	8002116 <HAL_ADC_GetValue>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	82fb      	strh	r3, [r7, #22]
 8000c40:	e002      	b.n	8000c48 <ADC_PCBTemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000c42:	2003      	movs	r0, #3
 8000c44:	f000 f8ec 	bl	8000e20 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000c48:	4803      	ldr	r0, [pc, #12]	; (8000c58 <ADC_PCBTemperatur+0x6c>)
 8000c4a:	f001 f9a5 	bl	8001f98 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000c4e:	8afb      	ldrh	r3, [r7, #22]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000028 	.word	0x20000028

08000c5c <ADC_Return>:
//----------------------------------------------------------------------

// Navibedienelement Return einlesen (2 Schalter mit unterschiedlichen Widerstaenden)
//----------------------------------------------------------------------
uint16_t ADC_Return (void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_8;										// ADC Kanal einstellen
 8000c72:	2308      	movs	r3, #8
 8000c74:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000c76:	2301      	movs	r3, #1
 8000c78:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;							// ADC Sampletime einstellen
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	4619      	mov	r1, r3
 8000c82:	4811      	ldr	r0, [pc, #68]	; (8000cc8 <ADC_Return+0x6c>)
 8000c84:	f001 fa54 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <ADC_Return+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000c8e:	f000 fe87 	bl	80019a0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000c92:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <ADC_Return+0x6c>)
 8000c94:	f001 f8b2 	bl	8001dfc <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000c98:	2164      	movs	r1, #100	; 0x64
 8000c9a:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <ADC_Return+0x6c>)
 8000c9c:	f001 f9b0 	bl	8002000 <HAL_ADC_PollForConversion>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d105      	bne.n	8000cb2 <ADC_Return+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000ca6:	4808      	ldr	r0, [pc, #32]	; (8000cc8 <ADC_Return+0x6c>)
 8000ca8:	f001 fa35 	bl	8002116 <HAL_ADC_GetValue>
 8000cac:	4603      	mov	r3, r0
 8000cae:	82fb      	strh	r3, [r7, #22]
 8000cb0:	e002      	b.n	8000cb8 <ADC_Return+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000cb2:	2003      	movs	r0, #3
 8000cb4:	f000 f8b4 	bl	8000e20 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000cb8:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <ADC_Return+0x6c>)
 8000cba:	f001 f96d 	bl	8001f98 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000cbe:	8afb      	ldrh	r3, [r7, #22]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000028 	.word	0x20000028

08000ccc <ADC_Info>:
//----------------------------------------------------------------------

// Navibedienelement Info einlesen (2 Schalter mit unterschiedlichen Widerstaenden)
//----------------------------------------------------------------------
uint16_t ADC_Info (void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_9;										// ADC Kanal einstellen
 8000ce2:	2309      	movs	r3, #9
 8000ce4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;							// ADC Sampletime einstellen
 8000cea:	2307      	movs	r3, #7
 8000cec:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4811      	ldr	r0, [pc, #68]	; (8000d38 <ADC_Info+0x6c>)
 8000cf4:	f001 fa1c 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <ADC_Info+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000cfe:	f000 fe4f 	bl	80019a0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000d02:	480d      	ldr	r0, [pc, #52]	; (8000d38 <ADC_Info+0x6c>)
 8000d04:	f001 f87a 	bl	8001dfc <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000d08:	2164      	movs	r1, #100	; 0x64
 8000d0a:	480b      	ldr	r0, [pc, #44]	; (8000d38 <ADC_Info+0x6c>)
 8000d0c:	f001 f978 	bl	8002000 <HAL_ADC_PollForConversion>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d105      	bne.n	8000d22 <ADC_Info+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000d16:	4808      	ldr	r0, [pc, #32]	; (8000d38 <ADC_Info+0x6c>)
 8000d18:	f001 f9fd 	bl	8002116 <HAL_ADC_GetValue>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	82fb      	strh	r3, [r7, #22]
 8000d20:	e002      	b.n	8000d28 <ADC_Info+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000d22:	2003      	movs	r0, #3
 8000d24:	f000 f87c 	bl	8000e20 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000d28:	4803      	ldr	r0, [pc, #12]	; (8000d38 <ADC_Info+0x6c>)
 8000d2a:	f001 f935 	bl	8001f98 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000d2e:	8afb      	ldrh	r3, [r7, #22]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000028 	.word	0x20000028

08000d3c <ADC_Bremsdrucktemperatur>:
//----------------------------------------------------------------------

// Bremsdrucktemperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_Bremsdrucktemperatur (void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_15;										// ADC Kanal einstellen
 8000d52:	230f      	movs	r3, #15
 8000d54:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000d56:	2301      	movs	r3, #1
 8000d58:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;							// ADC Sampletime einstellen
 8000d5a:	2307      	movs	r3, #7
 8000d5c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	4619      	mov	r1, r3
 8000d62:	4811      	ldr	r0, [pc, #68]	; (8000da8 <ADC_Bremsdrucktemperatur+0x6c>)
 8000d64:	f001 f9e4 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <ADC_Bremsdrucktemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000d6e:	f000 fe17 	bl	80019a0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000d72:	480d      	ldr	r0, [pc, #52]	; (8000da8 <ADC_Bremsdrucktemperatur+0x6c>)
 8000d74:	f001 f842 	bl	8001dfc <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000d78:	2164      	movs	r1, #100	; 0x64
 8000d7a:	480b      	ldr	r0, [pc, #44]	; (8000da8 <ADC_Bremsdrucktemperatur+0x6c>)
 8000d7c:	f001 f940 	bl	8002000 <HAL_ADC_PollForConversion>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d105      	bne.n	8000d92 <ADC_Bremsdrucktemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000d86:	4808      	ldr	r0, [pc, #32]	; (8000da8 <ADC_Bremsdrucktemperatur+0x6c>)
 8000d88:	f001 f9c5 	bl	8002116 <HAL_ADC_GetValue>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	82fb      	strh	r3, [r7, #22]
 8000d90:	e002      	b.n	8000d98 <ADC_Bremsdrucktemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000d92:	2003      	movs	r0, #3
 8000d94:	f000 f844 	bl	8000e20 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000d98:	4803      	ldr	r0, [pc, #12]	; (8000da8 <ADC_Bremsdrucktemperatur+0x6c>)
 8000d9a:	f001 f8fd 	bl	8001f98 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000d9e:	8afb      	ldrh	r3, [r7, #22]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000028 	.word	0x20000028

08000dac <ADC_STMTemperatur>:
//----------------------------------------------------------------------

// STM32 Temperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_STMTemperatur (void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;								// ADC Kanal einstellen
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <ADC_STMTemperatur+0x6c>)
 8000dc4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;							// ADC Sampletime einstellen
 8000dca:	2307      	movs	r3, #7
 8000dcc:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4812      	ldr	r0, [pc, #72]	; (8000e1c <ADC_STMTemperatur+0x70>)
 8000dd4:	f001 f9ac 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <ADC_STMTemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000dde:	f000 fddf 	bl	80019a0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000de2:	480e      	ldr	r0, [pc, #56]	; (8000e1c <ADC_STMTemperatur+0x70>)
 8000de4:	f001 f80a 	bl	8001dfc <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000de8:	2164      	movs	r1, #100	; 0x64
 8000dea:	480c      	ldr	r0, [pc, #48]	; (8000e1c <ADC_STMTemperatur+0x70>)
 8000dec:	f001 f908 	bl	8002000 <HAL_ADC_PollForConversion>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d105      	bne.n	8000e02 <ADC_STMTemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000df6:	4809      	ldr	r0, [pc, #36]	; (8000e1c <ADC_STMTemperatur+0x70>)
 8000df8:	f001 f98d 	bl	8002116 <HAL_ADC_GetValue>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	82fb      	strh	r3, [r7, #22]
 8000e00:	e002      	b.n	8000e08 <ADC_STMTemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000e02:	2003      	movs	r0, #3
 8000e04:	f000 f80c 	bl	8000e20 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000e08:	4804      	ldr	r0, [pc, #16]	; (8000e1c <ADC_STMTemperatur+0x70>)
 8000e0a:	f001 f8c5 	bl	8001f98 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000e0e:	8afb      	ldrh	r3, [r7, #22]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	10000012 	.word	0x10000012
 8000e1c:	20000028 	.word	0x20000028

08000e20 <software_error>:
//----------------------------------------------------------------------

// Diagnose Funktion falls ein Fehler auftritt
//----------------------------------------------------------------------
void software_error(uint8_t errorcode)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2a:	b672      	cpsid	i
}
 8000e2c:	bf00      	nop
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	//leuchten_out.RedLed = 1;												// Setze Variable
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);		// Fehler LED einschalten
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2104      	movs	r1, #4
 8000e32:	480b      	ldr	r0, [pc, #44]	; (8000e60 <software_error+0x40>)
 8000e34:	f001 ff5a 	bl	8002cec <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	//leuchten_out.GreenLed = 0;											// Zuruechsetzen Variable
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);	// Fehler LED ausschalten
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e3e:	4808      	ldr	r0, [pc, #32]	; (8000e60 <software_error+0x40>)
 8000e40:	f001 ff54 	bl	8002cec <HAL_GPIO_WritePin>

#ifdef DEBUG																// Serielle Kommunukation nur waehrend Debugging
#define SOFTERRORMESSAGE			"\nSoftware Error Handler ausgeloest\n"	// Ausgabe das Fehler aufgetreten ist
	uartTransmit(SOFTERRORMESSAGE,sizeof(SOFTERRORMESSAGE));
 8000e44:	2124      	movs	r1, #36	; 0x24
 8000e46:	4807      	ldr	r0, [pc, #28]	; (8000e64 <software_error+0x44>)
 8000e48:	f7ff fb80 	bl	800054c <uartTransmit>

#define ERRORCODE					"Error Code:\t"							// Ausgabe des Fehlers anhand von Fehlercode
	uartTransmit(ERRORCODE,sizeof(ERRORCODE));
 8000e4c:	210d      	movs	r1, #13
 8000e4e:	4806      	ldr	r0, [pc, #24]	; (8000e68 <software_error+0x48>)
 8000e50:	f7ff fb7c 	bl	800054c <uartTransmit>
	uartTransmitNumber(errorcode, 10);										// Fehlercode ausgeben
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	210a      	movs	r1, #10
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fb8b 	bl	8000574 <uartTransmitNumber>
#endif
	while (1);																// Endlosschleife
 8000e5e:	e7fe      	b.n	8000e5e <software_error+0x3e>
 8000e60:	40020400 	.word	0x40020400
 8000e64:	08004c7c 	.word	0x08004c7c
 8000e68:	08004ca0 	.word	0x08004ca0

08000e6c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e72:	463b      	mov	r3, r7
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e7e:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000e80:	4a21      	ldr	r2, [pc, #132]	; (8000f08 <MX_ADC1_Init+0x9c>)
 8000e82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e84:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000e86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e92:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e98:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eac:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000eae:	4a17      	ldr	r2, [pc, #92]	; (8000f0c <MX_ADC1_Init+0xa0>)
 8000eb0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000ece:	f000 ff51 	bl	8001d74 <HAL_ADC_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ed8:	f000 fd62 	bl	80019a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000edc:	230e      	movs	r3, #14
 8000ede:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000ee4:	2307      	movs	r3, #7
 8000ee6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee8:	463b      	mov	r3, r7
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000eee:	f001 f91f 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ef8:	f000 fd52 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000028 	.word	0x20000028
 8000f08:	40012000 	.word	0x40012000
 8000f0c:	0f000001 	.word	0x0f000001

08000f10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08c      	sub	sp, #48	; 0x30
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a2d      	ldr	r2, [pc, #180]	; (8000fe4 <HAL_ADC_MspInit+0xd4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d153      	bne.n	8000fda <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f32:	4b2d      	ldr	r3, [pc, #180]	; (8000fe8 <HAL_ADC_MspInit+0xd8>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	4a2c      	ldr	r2, [pc, #176]	; (8000fe8 <HAL_ADC_MspInit+0xd8>)
 8000f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3e:	4b2a      	ldr	r3, [pc, #168]	; (8000fe8 <HAL_ADC_MspInit+0xd8>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f46:	61bb      	str	r3, [r7, #24]
 8000f48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	4b27      	ldr	r3, [pc, #156]	; (8000fe8 <HAL_ADC_MspInit+0xd8>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a26      	ldr	r2, [pc, #152]	; (8000fe8 <HAL_ADC_MspInit+0xd8>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <HAL_ADC_MspInit+0xd8>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <HAL_ADC_MspInit+0xd8>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a20      	ldr	r2, [pc, #128]	; (8000fe8 <HAL_ADC_MspInit+0xd8>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <HAL_ADC_MspInit+0xd8>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <HAL_ADC_MspInit+0xd8>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a1a      	ldr	r2, [pc, #104]	; (8000fe8 <HAL_ADC_MspInit+0xd8>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <HAL_ADC_MspInit+0xd8>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SENSE_KL15_Pin|SENSE_KUEHLWASSER_Pin|SENSE_KLIMA_FLAP_Pin|SENSE_GAS_Pin
 8000f92:	23f8      	movs	r3, #248	; 0xf8
 8000f94:	61fb      	str	r3, [r7, #28]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f96:	2303      	movs	r3, #3
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4811      	ldr	r0, [pc, #68]	; (8000fec <HAL_ADC_MspInit+0xdc>)
 8000fa6:	f001 fcf5 	bl	8002994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_DRUCK_Pin|SENSE_DRUCK_TEMP_Pin;
 8000faa:	2330      	movs	r3, #48	; 0x30
 8000fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <HAL_ADC_MspInit+0xe0>)
 8000fbe:	f001 fce9 	bl	8002994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_RETURN_Pin|SENSE_INFO_Pin;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <HAL_ADC_MspInit+0xe4>)
 8000fd6:	f001 fcdd 	bl	8002994 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fda:	bf00      	nop
 8000fdc:	3730      	adds	r7, #48	; 0x30
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40012000 	.word	0x40012000
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	40020800 	.word	0x40020800
 8000ff4:	40020400 	.word	0x40020400

08000ff8 <MX_CAN3_Init>:

CAN_HandleTypeDef hcan3;

/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <MX_CAN3_Init+0x64>)
 8000ffe:	4a18      	ldr	r2, [pc, #96]	; (8001060 <MX_CAN3_Init+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <MX_CAN3_Init+0x64>)
 8001004:	2206      	movs	r2, #6
 8001006:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <MX_CAN3_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <MX_CAN3_Init+0x64>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_CAN3_Init+0x64>)
 8001016:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800101a:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_CAN3_Init+0x64>)
 800101e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001022:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <MX_CAN3_Init+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_CAN3_Init+0x64>)
 800102c:	2200      	movs	r2, #0
 800102e:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <MX_CAN3_Init+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_CAN3_Init+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <MX_CAN3_Init+0x64>)
 800103e:	2200      	movs	r2, #0
 8001040:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_CAN3_Init+0x64>)
 8001044:	2200      	movs	r2, #0
 8001046:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <MX_CAN3_Init+0x64>)
 800104a:	f001 fac1 	bl	80025d0 <HAL_CAN_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001054:	f000 fca4 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000070 	.word	0x20000070
 8001060:	40003400 	.word	0x40003400

08001064 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN3)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a17      	ldr	r2, [pc, #92]	; (80010e0 <HAL_CAN_MspInit+0x7c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d128      	bne.n	80010d8 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN3_MspInit 0 */

  /* USER CODE END CAN3_MspInit 0 */
    /* CAN3 clock enable */
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_CAN_MspInit+0x80>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <HAL_CAN_MspInit+0x80>)
 800108c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001090:	6413      	str	r3, [r2, #64]	; 0x40
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_CAN_MspInit+0x80>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_CAN_MspInit+0x80>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <HAL_CAN_MspInit+0x80>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_CAN_MspInit+0x80>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN3 GPIO Configuration
    PA8     ------> CAN3_RX
    PA15     ------> CAN3_TX
    */
    GPIO_InitStruct.Pin = ACAN_RX_Pin|ACAN_TX_Pin;
 80010b6:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80010ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80010c8:	230b      	movs	r3, #11
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <HAL_CAN_MspInit+0x84>)
 80010d4:	f001 fc5e 	bl	8002994 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 80010d8:	bf00      	nop
 80010da:	3728      	adds	r7, #40	; 0x28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40003400 	.word	0x40003400
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020000 	.word	0x40020000

080010ec <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08e      	sub	sp, #56	; 0x38
 80010f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001102:	4bb6      	ldr	r3, [pc, #728]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4ab5      	ldr	r2, [pc, #724]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001108:	f043 0310 	orr.w	r3, r3, #16
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4bb3      	ldr	r3, [pc, #716]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	623b      	str	r3, [r7, #32]
 8001118:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111a:	4bb0      	ldr	r3, [pc, #704]	; (80013dc <MX_GPIO_Init+0x2f0>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4aaf      	ldr	r2, [pc, #700]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4bad      	ldr	r3, [pc, #692]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001132:	4baa      	ldr	r3, [pc, #680]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4aa9      	ldr	r2, [pc, #676]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001138:	f043 0320 	orr.w	r3, r3, #32
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4ba7      	ldr	r3, [pc, #668]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0320 	and.w	r3, r3, #32
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114a:	4ba4      	ldr	r3, [pc, #656]	; (80013dc <MX_GPIO_Init+0x2f0>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4aa3      	ldr	r2, [pc, #652]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4ba1      	ldr	r3, [pc, #644]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	4b9e      	ldr	r3, [pc, #632]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a9d      	ldr	r2, [pc, #628]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b9b      	ldr	r3, [pc, #620]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	4b98      	ldr	r3, [pc, #608]	; (80013dc <MX_GPIO_Init+0x2f0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a97      	ldr	r2, [pc, #604]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b95      	ldr	r3, [pc, #596]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001192:	4b92      	ldr	r3, [pc, #584]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a91      	ldr	r2, [pc, #580]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b8f      	ldr	r3, [pc, #572]	; (80013dc <MX_GPIO_Init+0x2f0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011aa:	4b8c      	ldr	r3, [pc, #560]	; (80013dc <MX_GPIO_Init+0x2f0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a8b      	ldr	r2, [pc, #556]	; (80013dc <MX_GPIO_Init+0x2f0>)
 80011b0:	f043 0308 	orr.w	r3, r3, #8
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b89      	ldr	r3, [pc, #548]	; (80013dc <MX_GPIO_Init+0x2f0>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 80011c2:	2200      	movs	r2, #0
 80011c4:	f248 0187 	movw	r1, #32903	; 0x8087
 80011c8:	4885      	ldr	r0, [pc, #532]	; (80013e0 <MX_GPIO_Init+0x2f4>)
 80011ca:	f001 fd8f 	bl	8002cec <HAL_GPIO_WritePin>
                          |DIGITAL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_ON_Pin|WS2812_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	f242 0108 	movw	r1, #8200	; 0x2008
 80011d4:	4883      	ldr	r0, [pc, #524]	; (80013e4 <MX_GPIO_Init+0x2f8>)
 80011d6:	f001 fd89 	bl	8002cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 80011da:	2200      	movs	r2, #0
 80011dc:	f24f 013c 	movw	r1, #61500	; 0xf03c
 80011e0:	4881      	ldr	r0, [pc, #516]	; (80013e8 <MX_GPIO_Init+0x2fc>)
 80011e2:	f001 fd83 	bl	8002cec <HAL_GPIO_WritePin>
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 80011e6:	2200      	movs	r2, #0
 80011e8:	f647 0194 	movw	r1, #30868	; 0x7894
 80011ec:	487f      	ldr	r0, [pc, #508]	; (80013ec <MX_GPIO_Init+0x300>)
 80011ee:	f001 fd7d 	bl	8002cec <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 80011f2:	2200      	movs	r2, #0
 80011f4:	f64e 2188 	movw	r1, #60040	; 0xea88
 80011f8:	487d      	ldr	r0, [pc, #500]	; (80013f0 <MX_GPIO_Init+0x304>)
 80011fa:	f001 fd77 	bl	8002cec <HAL_GPIO_WritePin>
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 80011fe:	2200      	movs	r2, #0
 8001200:	f64e 610c 	movw	r1, #60940	; 0xee0c
 8001204:	487b      	ldr	r0, [pc, #492]	; (80013f4 <MX_GPIO_Init+0x308>)
 8001206:	f001 fd71 	bl	8002cec <HAL_GPIO_WritePin>
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001210:	4879      	ldr	r0, [pc, #484]	; (80013f8 <MX_GPIO_Init+0x30c>)
 8001212:	f001 fd6b 	bl	8002cec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 8001216:	f248 0387 	movw	r3, #32903	; 0x8087
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DIGITAL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121c:	2301      	movs	r3, #1
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122c:	4619      	mov	r1, r3
 800122e:	486c      	ldr	r0, [pc, #432]	; (80013e0 <MX_GPIO_Init+0x2f4>)
 8001230:	f001 fbb0 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ECO_Pin|BC_DOWN_IN_Pin|DURCHFLUSS_Pin|BUTTON2_Pin
 8001234:	f647 7378 	movw	r3, #32632	; 0x7f78
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
                          |KICKDOWN_Pin|LEERLAUF_Pin|KUPPLUNG_NO_Pin|BREMSE_NC_Pin
                          |BREMSE_NO_Pin|SENSE_SDC_AKKU_Pin|SENSE_SDC_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123a:	2300      	movs	r3, #0
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001246:	4619      	mov	r1, r3
 8001248:	4865      	ldr	r0, [pc, #404]	; (80013e0 <MX_GPIO_Init+0x2f4>)
 800124a:	f001 fba3 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 800124e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001264:	4619      	mov	r1, r3
 8001266:	485f      	ldr	r0, [pc, #380]	; (80013e4 <MX_GPIO_Init+0x2f8>)
 8001268:	f001 fb94 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 800126c:	f64d 7347 	movw	r3, #57159	; 0xdf47
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|SD_SW_Pin|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001272:	2303      	movs	r3, #3
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127e:	4619      	mov	r1, r3
 8001280:	4858      	ldr	r0, [pc, #352]	; (80013e4 <MX_GPIO_Init+0x2f8>)
 8001282:	f001 fb87 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|ECON_Pin|RECUPERATION_Pin;
 8001286:	f640 0303 	movw	r3, #2051	; 0x803
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128c:	2300      	movs	r3, #0
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001298:	4619      	mov	r1, r3
 800129a:	4853      	ldr	r0, [pc, #332]	; (80013e8 <MX_GPIO_Init+0x2fc>)
 800129c:	f001 fb7a 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 80012a0:	f24f 033c 	movw	r3, #61500	; 0xf03c
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b6:	4619      	mov	r1, r3
 80012b8:	484b      	ldr	r0, [pc, #300]	; (80013e8 <MX_GPIO_Init+0x2fc>)
 80012ba:	f001 fb6b 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PF10 */
  GPIO_InitStruct.Pin = SPI5_CS_Pin|SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin
 80012be:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c4:	2303      	movs	r3, #3
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d0:	4619      	mov	r1, r3
 80012d2:	4845      	ldr	r0, [pc, #276]	; (80013e8 <MX_GPIO_Init+0x2fc>)
 80012d4:	f001 fb5e 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS2812_Pin;
 80012d8:	2308      	movs	r3, #8
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e4:	2302      	movs	r3, #2
 80012e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ec:	4619      	mov	r1, r3
 80012ee:	483d      	ldr	r0, [pc, #244]	; (80013e4 <MX_GPIO_Init+0x2f8>)
 80012f0:	f001 fb50 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|EMERGENCY_RUN_Pin|HW_WAKE_Pin|OUTA_Pin
 80012f4:	f640 6307 	movw	r3, #3591	; 0xe07
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTB_Pin|BC_UP_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001306:	4619      	mov	r1, r3
 8001308:	483b      	ldr	r0, [pc, #236]	; (80013f8 <MX_GPIO_Init+0x30c>)
 800130a:	f001 fb43 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 800130e:	f647 0394 	movw	r3, #30868	; 0x7894
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001324:	4619      	mov	r1, r3
 8001326:	4831      	ldr	r0, [pc, #196]	; (80013ec <MX_GPIO_Init+0x300>)
 8001328:	f001 fb34 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DCDC_INSTRUCTION_Pin|DCCDC_FAULT_Pin|ASR_IN1_Pin|GRA1_Pin
 800132c:	f241 13f3 	movw	r3, #4595	; 0x11f3
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
                          |GRA2_Pin|GRA3_Pin|GRA4_Pin|BC_RESET_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001332:	2300      	movs	r3, #0
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800133a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133e:	4619      	mov	r1, r3
 8001340:	482c      	ldr	r0, [pc, #176]	; (80013f4 <MX_GPIO_Init+0x308>)
 8001342:	f001 fb27 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSE_SDC_BTB_Pin|ANLASSER_Pin;
 8001346:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134c:	2300      	movs	r3, #0
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001358:	4619      	mov	r1, r3
 800135a:	4824      	ldr	r0, [pc, #144]	; (80013ec <MX_GPIO_Init+0x300>)
 800135c:	f001 fb1a 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KL15_Pin|BAMOCAR_IN2_Pin|BAMOCAR_IN1_Pin|ASR_IN2_Pin;
 8001360:	f241 5310 	movw	r3, #5392	; 0x1510
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001366:	2300      	movs	r3, #0
 8001368:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001372:	4619      	mov	r1, r3
 8001374:	481e      	ldr	r0, [pc, #120]	; (80013f0 <MX_GPIO_Init+0x304>)
 8001376:	f001 fb0d 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 800137a:	f64e 2388 	movw	r3, #60040	; 0xea88
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800138c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001390:	4619      	mov	r1, r3
 8001392:	4817      	ldr	r0, [pc, #92]	; (80013f0 <MX_GPIO_Init+0x304>)
 8001394:	f001 fafe 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 8001398:	f64e 630c 	movw	r3, #60940	; 0xee0c
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139e:	2301      	movs	r3, #1
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ae:	4619      	mov	r1, r3
 80013b0:	4810      	ldr	r0, [pc, #64]	; (80013f4 <MX_GPIO_Init+0x308>)
 80013b2:	f001 faef 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	4619      	mov	r1, r3
 80013c8:	4806      	ldr	r0, [pc, #24]	; (80013e4 <MX_GPIO_Init+0x2f8>)
 80013ca:	f001 fae3 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RUECKWARNUNG_Pin;
 80013ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	e00f      	b.n	80013fc <MX_GPIO_Init+0x310>
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40020800 	.word	0x40020800
 80013e8:	40021400 	.word	0x40021400
 80013ec:	40020400 	.word	0x40020400
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	40021800 	.word	0x40021800
 80013f8:	40020000 	.word	0x40020000
 80013fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RUECKWARNUNG_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001406:	4619      	mov	r1, r3
 8001408:	480f      	ldr	r0, [pc, #60]	; (8001448 <MX_GPIO_Init+0x35c>)
 800140a:	f001 fac3 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_TX_Pin|CAN1_RX_Pin|SD_CMD_Pin;
 800140e:	2307      	movs	r3, #7
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001412:	2303      	movs	r3, #3
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800141a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141e:	4619      	mov	r1, r3
 8001420:	480a      	ldr	r0, [pc, #40]	; (800144c <MX_GPIO_Init+0x360>)
 8001422:	f001 fab7 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CAN2_TX_Pin|CAN2_RX_Pin|I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001426:	f44f 7358 	mov.w	r3, #864	; 0x360
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142c:	2303      	movs	r3, #3
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001438:	4619      	mov	r1, r3
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_GPIO_Init+0x364>)
 800143c:	f001 faaa 	bl	8002994 <HAL_GPIO_Init>

}
 8001440:	bf00      	nop
 8001442:	3738      	adds	r7, #56	; 0x38
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40020000 	.word	0x40020000
 800144c:	40020c00 	.word	0x40020c00
 8001450:	40020400 	.word	0x40020400

08001454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t ADC_VAL[10] = {0};
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001468:	f000 fbbb 	bl	8001be2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800146c:	f000 fa28 	bl	80018c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001470:	f7ff fe3c 	bl	80010ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001474:	f000 fafe 	bl	8001a74 <MX_USART2_UART_Init>
  MX_CAN3_Init();
 8001478:	f7ff fdbe 	bl	8000ff8 <MX_CAN3_Init>
  MX_ADC1_Init();
 800147c:	f7ff fcf6 	bl	8000e6c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 8001480:	f7ff f9e0 	bl	8000844 <readResetSource>
 8001484:	4603      	mov	r3, r0
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fa2e 	bl	80008e8 <printResetSource>

  	/* Teste serielle Schnittstelle*/
  	#define TEST_STRING_UART  "\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
  	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 800148c:	213a      	movs	r1, #58	; 0x3a
 800148e:	48bc      	ldr	r0, [pc, #752]	; (8001780 <main+0x32c>)
 8001490:	f7ff f85c 	bl	800054c <uartTransmit>

  	/* Sammel Systeminformationen */
  	collectSystemInfo();
 8001494:	f7ff f9b4 	bl	8000800 <collectSystemInfo>
#endif

    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8001498:	2201      	movs	r2, #1
 800149a:	2180      	movs	r1, #128	; 0x80
 800149c:	48b9      	ldr	r0, [pc, #740]	; (8001784 <main+0x330>)
 800149e:	f001 fc25 	bl	8002cec <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80014a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a6:	f000 fbf9 	bl	8001c9c <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2180      	movs	r1, #128	; 0x80
 80014ae:	48b5      	ldr	r0, [pc, #724]	; (8001784 <main+0x330>)
 80014b0:	f001 fc1c 	bl	8002cec <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80014b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014b8:	f000 fbf0 	bl	8001c9c <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 80014bc:	2201      	movs	r2, #1
 80014be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014c2:	48b0      	ldr	r0, [pc, #704]	; (8001784 <main+0x330>)
 80014c4:	f001 fc12 	bl	8002cec <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80014c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014cc:	f000 fbe6 	bl	8001c9c <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014d6:	48ab      	ldr	r0, [pc, #684]	; (8001784 <main+0x330>)
 80014d8:	f001 fc08 	bl	8002cec <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80014dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014e0:	f000 fbdc 	bl	8001c9c <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 80014e4:	2201      	movs	r2, #1
 80014e6:	2104      	movs	r1, #4
 80014e8:	48a6      	ldr	r0, [pc, #664]	; (8001784 <main+0x330>)
 80014ea:	f001 fbff 	bl	8002cec <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80014ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014f2:	f000 fbd3 	bl	8001c9c <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2104      	movs	r1, #4
 80014fa:	48a2      	ldr	r0, [pc, #648]	; (8001784 <main+0x330>)
 80014fc:	f001 fbf6 	bl	8002cec <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001500:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001504:	f000 fbca 	bl	8001c9c <HAL_Delay>

  	/* Lese alle Eingaenge */
  	//readall_inputs();

  	// Lese Temperatur
  	uartTransmit("Temperatur messen\n", 18);
 8001508:	2112      	movs	r1, #18
 800150a:	489f      	ldr	r0, [pc, #636]	; (8001788 <main+0x334>)
 800150c:	f7ff f81e 	bl	800054c <uartTransmit>
	uartTransmitNumber(*TEMP30_CAL_VALUE, 10);
 8001510:	4b9e      	ldr	r3, [pc, #632]	; (800178c <main+0x338>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	210a      	movs	r1, #10
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f82c 	bl	8000574 <uartTransmitNumber>
	uartTransmit("\n", 1);
 800151c:	2101      	movs	r1, #1
 800151e:	489c      	ldr	r0, [pc, #624]	; (8001790 <main+0x33c>)
 8001520:	f7ff f814 	bl	800054c <uartTransmit>
	uartTransmitNumber(*TEMP110_CAL_VALUE, 10);
 8001524:	4b9b      	ldr	r3, [pc, #620]	; (8001794 <main+0x340>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	210a      	movs	r1, #10
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff f822 	bl	8000574 <uartTransmitNumber>
	uartTransmit("\n", 1);
 8001530:	2101      	movs	r1, #1
 8001532:	4897      	ldr	r0, [pc, #604]	; (8001790 <main+0x33c>)
 8001534:	f7ff f80a 	bl	800054c <uartTransmit>

	ADC_VAL[4] = ADC_STMTemperatur();
 8001538:	f7ff fc38 	bl	8000dac <ADC_STMTemperatur>
 800153c:	4603      	mov	r3, r0
 800153e:	81bb      	strh	r3, [r7, #12]
	if(ADC_VAL[4] > 900 && ADC_VAL[4] < 1100)
 8001540:	89bb      	ldrh	r3, [r7, #12]
 8001542:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001546:	d930      	bls.n	80015aa <main+0x156>
 8001548:	89bb      	ldrh	r3, [r7, #12]
 800154a:	f240 424b 	movw	r2, #1099	; 0x44b
 800154e:	4293      	cmp	r3, r2
 8001550:	d82b      	bhi.n	80015aa <main+0x156>
	{
		temperature = (int32_t)((TEMP110 - TEMP30) / ((float)(*TEMP110_CAL_VALUE) - (float)(*TEMP30_CAL_VALUE)) * (ADC_VAL[4] - (float)(*TEMP30_CAL_VALUE)) + TEMP30);
 8001552:	4b90      	ldr	r3, [pc, #576]	; (8001794 <main+0x340>)
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800155e:	4b8b      	ldr	r3, [pc, #556]	; (800178c <main+0x338>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	ee07 3a90 	vmov	s15, r3
 8001566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800156a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800156e:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8001798 <main+0x344>
 8001572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001576:	89bb      	ldrh	r3, [r7, #12]
 8001578:	ee07 3a90 	vmov	s15, r3
 800157c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001580:	4b82      	ldr	r3, [pc, #520]	; (800178c <main+0x338>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	ee07 3a90 	vmov	s15, r3
 8001588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800158c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001594:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001598:	ee77 7a87 	vadd.f32	s15, s15, s14
 800159c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a0:	ee17 2a90 	vmov	r2, s15
 80015a4:	4b7d      	ldr	r3, [pc, #500]	; (800179c <main+0x348>)
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	e003      	b.n	80015b2 <main+0x15e>
	}
	else
	{
		temperature = -273;
 80015aa:	4b7c      	ldr	r3, [pc, #496]	; (800179c <main+0x348>)
 80015ac:	f46f 7288 	mvn.w	r2, #272	; 0x110
 80015b0:	601a      	str	r2, [r3, #0]
	}
	uartTransmitNumber(temperature, 10);
 80015b2:	4b7a      	ldr	r3, [pc, #488]	; (800179c <main+0x348>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	210a      	movs	r1, #10
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ffdb 	bl	8000574 <uartTransmitNumber>
	uartTransmit("\n", 1);
 80015be:	2101      	movs	r1, #1
 80015c0:	4873      	ldr	r0, [pc, #460]	; (8001790 <main+0x33c>)
 80015c2:	f7fe ffc3 	bl	800054c <uartTransmit>

	// Lese alle ADC-Eingaenge
	ADC_VAL[0] = ADC_KL15();
 80015c6:	f7ff fa69 	bl	8000a9c <ADC_KL15>
 80015ca:	4603      	mov	r3, r0
 80015cc:	80bb      	strh	r3, [r7, #4]
	ADC_VAL[1] = ADC_Kuhlwassertemperatur();
 80015ce:	f7ff fa9d 	bl	8000b0c <ADC_Kuhlwassertemperatur>
 80015d2:	4603      	mov	r3, r0
 80015d4:	80fb      	strh	r3, [r7, #6]
	ADC_VAL[2] = ADC_Klimaflap();
 80015d6:	f7ff fad1 	bl	8000b7c <ADC_Klimaflap>
 80015da:	4603      	mov	r3, r0
 80015dc:	813b      	strh	r3, [r7, #8]
	ADC_VAL[3] = ADC_Gaspedal();
 80015de:	f7ff f9ed 	bl	80009bc <ADC_Gaspedal>
 80015e2:	4603      	mov	r3, r0
 80015e4:	817b      	strh	r3, [r7, #10]
	ADC_VAL[4] = ADC_PCBTemperatur();
 80015e6:	f7ff fb01 	bl	8000bec <ADC_PCBTemperatur>
 80015ea:	4603      	mov	r3, r0
 80015ec:	81bb      	strh	r3, [r7, #12]
	ADC_VAL[5] = ADC_Return();
 80015ee:	f7ff fb35 	bl	8000c5c <ADC_Return>
 80015f2:	4603      	mov	r3, r0
 80015f4:	81fb      	strh	r3, [r7, #14]
	ADC_VAL[6] = ADC_Info();
 80015f6:	f7ff fb69 	bl	8000ccc <ADC_Info>
 80015fa:	4603      	mov	r3, r0
 80015fc:	823b      	strh	r3, [r7, #16]
	ADC_VAL[7] = ADC_Bremsdruck();
 80015fe:	f7ff fa15 	bl	8000a2c <ADC_Bremsdruck>
 8001602:	4603      	mov	r3, r0
 8001604:	827b      	strh	r3, [r7, #18]
	ADC_VAL[8] = ADC_Bremsdrucktemperatur();
 8001606:	f7ff fb99 	bl	8000d3c <ADC_Bremsdrucktemperatur>
 800160a:	4603      	mov	r3, r0
 800160c:	82bb      	strh	r3, [r7, #20]
	ADC_VAL[9] = ADC_STMTemperatur();
 800160e:	f7ff fbcd 	bl	8000dac <ADC_STMTemperatur>
 8001612:	4603      	mov	r3, r0
 8001614:	82fb      	strh	r3, [r7, #22]

	// Auswertung
	#define ADC_OK				"\nADC Value ist in Ordnung\n"
	#define ADC_NOK				"\nADC Value ist nicht in Ordnung\n"

	uartTransmit("KL15: ", 6);
 8001616:	2106      	movs	r1, #6
 8001618:	4861      	ldr	r0, [pc, #388]	; (80017a0 <main+0x34c>)
 800161a:	f7fe ff97 	bl	800054c <uartTransmit>
	uartTransmitNumber(ADC_VAL[0], 10);
 800161e:	88bb      	ldrh	r3, [r7, #4]
 8001620:	210a      	movs	r1, #10
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe ffa6 	bl	8000574 <uartTransmitNumber>
	if (ADC_VAL[0] > 3030 || ADC_VAL[1] < 2980)						// @12V Versorgungsspannung
 8001628:	88bb      	ldrh	r3, [r7, #4]
 800162a:	f640 32d6 	movw	r2, #3030	; 0xbd6
 800162e:	4293      	cmp	r3, r2
 8001630:	d804      	bhi.n	800163c <main+0x1e8>
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	f640 32a3 	movw	r2, #2979	; 0xba3
 8001638:	4293      	cmp	r3, r2
 800163a:	d804      	bhi.n	8001646 <main+0x1f2>
		uartTransmit(ADC_NOK, sizeof(ADC_NOK));
 800163c:	2121      	movs	r1, #33	; 0x21
 800163e:	4859      	ldr	r0, [pc, #356]	; (80017a4 <main+0x350>)
 8001640:	f7fe ff84 	bl	800054c <uartTransmit>
 8001644:	e003      	b.n	800164e <main+0x1fa>
	else
		uartTransmit(ADC_OK, sizeof(ADC_OK));
 8001646:	211b      	movs	r1, #27
 8001648:	4857      	ldr	r0, [pc, #348]	; (80017a8 <main+0x354>)
 800164a:	f7fe ff7f 	bl	800054c <uartTransmit>

	uartTransmit("\nKühlwasser: ", 14);
 800164e:	210e      	movs	r1, #14
 8001650:	4856      	ldr	r0, [pc, #344]	; (80017ac <main+0x358>)
 8001652:	f7fe ff7b 	bl	800054c <uartTransmit>
	uartTransmitNumber(ADC_VAL[1], 10);
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	210a      	movs	r1, #10
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe ff8a 	bl	8000574 <uartTransmitNumber>
	if (ADC_VAL[1] > 3480 || ADC_VAL[1] < 3455)
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	f640 5298 	movw	r2, #3480	; 0xd98
 8001666:	4293      	cmp	r3, r2
 8001668:	d804      	bhi.n	8001674 <main+0x220>
 800166a:	88fb      	ldrh	r3, [r7, #6]
 800166c:	f640 527e 	movw	r2, #3454	; 0xd7e
 8001670:	4293      	cmp	r3, r2
 8001672:	d804      	bhi.n	800167e <main+0x22a>
		uartTransmit(ADC_NOK, sizeof(ADC_NOK));
 8001674:	2121      	movs	r1, #33	; 0x21
 8001676:	484b      	ldr	r0, [pc, #300]	; (80017a4 <main+0x350>)
 8001678:	f7fe ff68 	bl	800054c <uartTransmit>
 800167c:	e003      	b.n	8001686 <main+0x232>
	else
		uartTransmit(ADC_OK, sizeof(ADC_OK));
 800167e:	211b      	movs	r1, #27
 8001680:	4849      	ldr	r0, [pc, #292]	; (80017a8 <main+0x354>)
 8001682:	f7fe ff63 	bl	800054c <uartTransmit>

	uartTransmit("\nKlimaFlap: ", 12);
 8001686:	210c      	movs	r1, #12
 8001688:	4849      	ldr	r0, [pc, #292]	; (80017b0 <main+0x35c>)
 800168a:	f7fe ff5f 	bl	800054c <uartTransmit>
	uartTransmitNumber(ADC_VAL[2], 10);
 800168e:	893b      	ldrh	r3, [r7, #8]
 8001690:	210a      	movs	r1, #10
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe ff6e 	bl	8000574 <uartTransmitNumber>
	if (ADC_VAL[2] > 20)
 8001698:	893b      	ldrh	r3, [r7, #8]
 800169a:	2b14      	cmp	r3, #20
 800169c:	d904      	bls.n	80016a8 <main+0x254>
		uartTransmit(ADC_NOK, sizeof(ADC_NOK));
 800169e:	2121      	movs	r1, #33	; 0x21
 80016a0:	4840      	ldr	r0, [pc, #256]	; (80017a4 <main+0x350>)
 80016a2:	f7fe ff53 	bl	800054c <uartTransmit>
 80016a6:	e003      	b.n	80016b0 <main+0x25c>
	else
		uartTransmit(ADC_OK, sizeof(ADC_OK));
 80016a8:	211b      	movs	r1, #27
 80016aa:	483f      	ldr	r0, [pc, #252]	; (80017a8 <main+0x354>)
 80016ac:	f7fe ff4e 	bl	800054c <uartTransmit>

	uartTransmit("\nGas: ", 6);
 80016b0:	2106      	movs	r1, #6
 80016b2:	4840      	ldr	r0, [pc, #256]	; (80017b4 <main+0x360>)
 80016b4:	f7fe ff4a 	bl	800054c <uartTransmit>
	uartTransmitNumber(ADC_VAL[3], 10);
 80016b8:	897b      	ldrh	r3, [r7, #10]
 80016ba:	210a      	movs	r1, #10
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe ff59 	bl	8000574 <uartTransmitNumber>
	if (ADC_VAL[3] > 250 || ADC_VAL[3] < 200)
 80016c2:	897b      	ldrh	r3, [r7, #10]
 80016c4:	2bfa      	cmp	r3, #250	; 0xfa
 80016c6:	d802      	bhi.n	80016ce <main+0x27a>
 80016c8:	897b      	ldrh	r3, [r7, #10]
 80016ca:	2bc7      	cmp	r3, #199	; 0xc7
 80016cc:	d804      	bhi.n	80016d8 <main+0x284>
		uartTransmit(ADC_NOK, sizeof(ADC_NOK));
 80016ce:	2121      	movs	r1, #33	; 0x21
 80016d0:	4834      	ldr	r0, [pc, #208]	; (80017a4 <main+0x350>)
 80016d2:	f7fe ff3b 	bl	800054c <uartTransmit>
 80016d6:	e003      	b.n	80016e0 <main+0x28c>
	else
		uartTransmit(ADC_OK, sizeof(ADC_OK));
 80016d8:	211b      	movs	r1, #27
 80016da:	4833      	ldr	r0, [pc, #204]	; (80017a8 <main+0x354>)
 80016dc:	f7fe ff36 	bl	800054c <uartTransmit>

	uartTransmit("\nPCB: ", 6);
 80016e0:	2106      	movs	r1, #6
 80016e2:	4835      	ldr	r0, [pc, #212]	; (80017b8 <main+0x364>)
 80016e4:	f7fe ff32 	bl	800054c <uartTransmit>
	uartTransmitNumber(ADC_VAL[4], 10);
 80016e8:	89bb      	ldrh	r3, [r7, #12]
 80016ea:	210a      	movs	r1, #10
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe ff41 	bl	8000574 <uartTransmitNumber>
	if (ADC_VAL[4] > 2000 || ADC_VAL[4] < 1970)
 80016f2:	89bb      	ldrh	r3, [r7, #12]
 80016f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016f8:	d804      	bhi.n	8001704 <main+0x2b0>
 80016fa:	89bb      	ldrh	r3, [r7, #12]
 80016fc:	f240 72b1 	movw	r2, #1969	; 0x7b1
 8001700:	4293      	cmp	r3, r2
 8001702:	d804      	bhi.n	800170e <main+0x2ba>
		uartTransmit(ADC_NOK, sizeof(ADC_NOK));
 8001704:	2121      	movs	r1, #33	; 0x21
 8001706:	4827      	ldr	r0, [pc, #156]	; (80017a4 <main+0x350>)
 8001708:	f7fe ff20 	bl	800054c <uartTransmit>
 800170c:	e003      	b.n	8001716 <main+0x2c2>
	else
		uartTransmit(ADC_OK, sizeof(ADC_OK));
 800170e:	211b      	movs	r1, #27
 8001710:	4825      	ldr	r0, [pc, #148]	; (80017a8 <main+0x354>)
 8001712:	f7fe ff1b 	bl	800054c <uartTransmit>

	uartTransmit("\nReturn: ", 9);
 8001716:	2109      	movs	r1, #9
 8001718:	4828      	ldr	r0, [pc, #160]	; (80017bc <main+0x368>)
 800171a:	f7fe ff17 	bl	800054c <uartTransmit>
	uartTransmitNumber(ADC_VAL[5], 10);
 800171e:	89fb      	ldrh	r3, [r7, #14]
 8001720:	210a      	movs	r1, #10
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe ff26 	bl	8000574 <uartTransmitNumber>
	if (ADC_VAL[5] > 3070 || ADC_VAL[5] < 3000)						// Mit Konsolenelement
 8001728:	89fb      	ldrh	r3, [r7, #14]
 800172a:	f640 32fe 	movw	r2, #3070	; 0xbfe
 800172e:	4293      	cmp	r3, r2
 8001730:	d804      	bhi.n	800173c <main+0x2e8>
 8001732:	89fb      	ldrh	r3, [r7, #14]
 8001734:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001738:	4293      	cmp	r3, r2
 800173a:	d804      	bhi.n	8001746 <main+0x2f2>
		uartTransmit(ADC_NOK, sizeof(ADC_NOK));
 800173c:	2121      	movs	r1, #33	; 0x21
 800173e:	4819      	ldr	r0, [pc, #100]	; (80017a4 <main+0x350>)
 8001740:	f7fe ff04 	bl	800054c <uartTransmit>
 8001744:	e003      	b.n	800174e <main+0x2fa>
	else
		uartTransmit(ADC_OK, sizeof(ADC_OK));
 8001746:	211b      	movs	r1, #27
 8001748:	4817      	ldr	r0, [pc, #92]	; (80017a8 <main+0x354>)
 800174a:	f7fe feff 	bl	800054c <uartTransmit>

	uartTransmit("\nInfo: ", 7);
 800174e:	2107      	movs	r1, #7
 8001750:	481b      	ldr	r0, [pc, #108]	; (80017c0 <main+0x36c>)
 8001752:	f7fe fefb 	bl	800054c <uartTransmit>
	uartTransmitNumber(ADC_VAL[6], 10);
 8001756:	8a3b      	ldrh	r3, [r7, #16]
 8001758:	210a      	movs	r1, #10
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe ff0a 	bl	8000574 <uartTransmitNumber>
	if (ADC_VAL[6] > 3070 || ADC_VAL[6] < 3000)						// Mit Konsolenelement
 8001760:	8a3b      	ldrh	r3, [r7, #16]
 8001762:	f640 32fe 	movw	r2, #3070	; 0xbfe
 8001766:	4293      	cmp	r3, r2
 8001768:	d804      	bhi.n	8001774 <main+0x320>
 800176a:	8a3b      	ldrh	r3, [r7, #16]
 800176c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001770:	4293      	cmp	r3, r2
 8001772:	d827      	bhi.n	80017c4 <main+0x370>
		uartTransmit(ADC_NOK, sizeof(ADC_NOK));
 8001774:	2121      	movs	r1, #33	; 0x21
 8001776:	480b      	ldr	r0, [pc, #44]	; (80017a4 <main+0x350>)
 8001778:	f7fe fee8 	bl	800054c <uartTransmit>
 800177c:	e026      	b.n	80017cc <main+0x378>
 800177e:	bf00      	nop
 8001780:	08004cb0 	.word	0x08004cb0
 8001784:	40020400 	.word	0x40020400
 8001788:	08004cec 	.word	0x08004cec
 800178c:	1ff0f44c 	.word	0x1ff0f44c
 8001790:	08004d00 	.word	0x08004d00
 8001794:	1ff0f44e 	.word	0x1ff0f44e
 8001798:	42a00000 	.word	0x42a00000
 800179c:	20000098 	.word	0x20000098
 80017a0:	08004d04 	.word	0x08004d04
 80017a4:	08004d0c 	.word	0x08004d0c
 80017a8:	08004d30 	.word	0x08004d30
 80017ac:	08004d4c 	.word	0x08004d4c
 80017b0:	08004d5c 	.word	0x08004d5c
 80017b4:	08004d6c 	.word	0x08004d6c
 80017b8:	08004d74 	.word	0x08004d74
 80017bc:	08004d7c 	.word	0x08004d7c
 80017c0:	08004d88 	.word	0x08004d88
	else
		uartTransmit(ADC_OK, sizeof(ADC_OK));
 80017c4:	211b      	movs	r1, #27
 80017c6:	4838      	ldr	r0, [pc, #224]	; (80018a8 <main+0x454>)
 80017c8:	f7fe fec0 	bl	800054c <uartTransmit>

	uartTransmit("\nBremsdruck: ", 13);
 80017cc:	210d      	movs	r1, #13
 80017ce:	4837      	ldr	r0, [pc, #220]	; (80018ac <main+0x458>)
 80017d0:	f7fe febc 	bl	800054c <uartTransmit>
	uartTransmitNumber(ADC_VAL[7], 10);
 80017d4:	8a7b      	ldrh	r3, [r7, #18]
 80017d6:	210a      	movs	r1, #10
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fecb 	bl	8000574 <uartTransmitNumber>
	if (ADC_VAL[7] > 1500 || ADC_VAL[7] < 1450)						// @Umgebungsdruck
 80017de:	8a7b      	ldrh	r3, [r7, #18]
 80017e0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d804      	bhi.n	80017f2 <main+0x39e>
 80017e8:	8a7b      	ldrh	r3, [r7, #18]
 80017ea:	f240 52a9 	movw	r2, #1449	; 0x5a9
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d804      	bhi.n	80017fc <main+0x3a8>
		uartTransmit(ADC_NOK, sizeof(ADC_NOK));
 80017f2:	2121      	movs	r1, #33	; 0x21
 80017f4:	482e      	ldr	r0, [pc, #184]	; (80018b0 <main+0x45c>)
 80017f6:	f7fe fea9 	bl	800054c <uartTransmit>
 80017fa:	e003      	b.n	8001804 <main+0x3b0>
	else
		uartTransmit(ADC_OK, sizeof(ADC_OK));
 80017fc:	211b      	movs	r1, #27
 80017fe:	482a      	ldr	r0, [pc, #168]	; (80018a8 <main+0x454>)
 8001800:	f7fe fea4 	bl	800054c <uartTransmit>

	uartTransmit("\nBremstemp: ", 12);
 8001804:	210c      	movs	r1, #12
 8001806:	482b      	ldr	r0, [pc, #172]	; (80018b4 <main+0x460>)
 8001808:	f7fe fea0 	bl	800054c <uartTransmit>
	uartTransmitNumber(ADC_VAL[8], 10);
 800180c:	8abb      	ldrh	r3, [r7, #20]
 800180e:	210a      	movs	r1, #10
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe feaf 	bl	8000574 <uartTransmitNumber>
	if (ADC_VAL[8] > 2300 || ADC_VAL[8] < 2250)						// @Zimmertemperatur
 8001816:	8abb      	ldrh	r3, [r7, #20]
 8001818:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800181c:	4293      	cmp	r3, r2
 800181e:	d804      	bhi.n	800182a <main+0x3d6>
 8001820:	8abb      	ldrh	r3, [r7, #20]
 8001822:	f640 02c9 	movw	r2, #2249	; 0x8c9
 8001826:	4293      	cmp	r3, r2
 8001828:	d804      	bhi.n	8001834 <main+0x3e0>
		uartTransmit(ADC_NOK, sizeof(ADC_NOK));
 800182a:	2121      	movs	r1, #33	; 0x21
 800182c:	4820      	ldr	r0, [pc, #128]	; (80018b0 <main+0x45c>)
 800182e:	f7fe fe8d 	bl	800054c <uartTransmit>
 8001832:	e003      	b.n	800183c <main+0x3e8>
	else
		uartTransmit(ADC_OK, sizeof(ADC_OK));
 8001834:	211b      	movs	r1, #27
 8001836:	481c      	ldr	r0, [pc, #112]	; (80018a8 <main+0x454>)
 8001838:	f7fe fe88 	bl	800054c <uartTransmit>

	uartTransmit("\nSTM Temp: ", 11);
 800183c:	210b      	movs	r1, #11
 800183e:	481e      	ldr	r0, [pc, #120]	; (80018b8 <main+0x464>)
 8001840:	f7fe fe84 	bl	800054c <uartTransmit>
	uartTransmitNumber(ADC_VAL[9], 10);
 8001844:	8afb      	ldrh	r3, [r7, #22]
 8001846:	210a      	movs	r1, #10
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe93 	bl	8000574 <uartTransmitNumber>
	if (ADC_VAL[9] > 955 || ADC_VAL[9] < 935)						// Nach 2h Betrieb
 800184e:	8afb      	ldrh	r3, [r7, #22]
 8001850:	f5b3 7f6f 	cmp.w	r3, #956	; 0x3bc
 8001854:	d204      	bcs.n	8001860 <main+0x40c>
 8001856:	8afb      	ldrh	r3, [r7, #22]
 8001858:	f240 32a6 	movw	r2, #934	; 0x3a6
 800185c:	4293      	cmp	r3, r2
 800185e:	d804      	bhi.n	800186a <main+0x416>
		uartTransmit(ADC_NOK, sizeof(ADC_NOK));
 8001860:	2121      	movs	r1, #33	; 0x21
 8001862:	4813      	ldr	r0, [pc, #76]	; (80018b0 <main+0x45c>)
 8001864:	f7fe fe72 	bl	800054c <uartTransmit>
 8001868:	e003      	b.n	8001872 <main+0x41e>
	else
		uartTransmit(ADC_OK, sizeof(ADC_OK));
 800186a:	211b      	movs	r1, #27
 800186c:	480e      	ldr	r0, [pc, #56]	; (80018a8 <main+0x454>)
 800186e:	f7fe fe6d 	bl	800054c <uartTransmit>

	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8001872:	2201      	movs	r2, #1
 8001874:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001878:	4810      	ldr	r0, [pc, #64]	; (80018bc <main+0x468>)
 800187a:	f001 fa37 	bl	8002cec <HAL_GPIO_WritePin>
	HAL_Delay(4500);
 800187e:	f241 1094 	movw	r0, #4500	; 0x1194
 8001882:	f000 fa0b 	bl	8001c9c <HAL_Delay>
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800188c:	480b      	ldr	r0, [pc, #44]	; (80018bc <main+0x468>)
 800188e:	f001 fa2d 	bl	8002cec <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001892:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001896:	f000 fa01 	bl	8001c9c <HAL_Delay>
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 800189a:	2201      	movs	r2, #1
 800189c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018a0:	4806      	ldr	r0, [pc, #24]	; (80018bc <main+0x468>)
 80018a2:	f001 fa23 	bl	8002cec <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <main+0x452>
 80018a8:	08004d30 	.word	0x08004d30
 80018ac:	08004d90 	.word	0x08004d90
 80018b0:	08004d0c 	.word	0x08004d0c
 80018b4:	08004da0 	.word	0x08004da0
 80018b8:	08004db0 	.word	0x08004db0
 80018bc:	40020400 	.word	0x40020400

080018c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b094      	sub	sp, #80	; 0x50
 80018c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018c6:	f107 031c 	add.w	r3, r7, #28
 80018ca:	2234      	movs	r2, #52	; 0x34
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f003 f85c 	bl	800498c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018d4:	f107 0308 	add.w	r3, r7, #8
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e4:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <SystemClock_Config+0xd8>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	4a2b      	ldr	r2, [pc, #172]	; (8001998 <SystemClock_Config+0xd8>)
 80018ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ee:	6413      	str	r3, [r2, #64]	; 0x40
 80018f0:	4b29      	ldr	r3, [pc, #164]	; (8001998 <SystemClock_Config+0xd8>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018fc:	4b27      	ldr	r3, [pc, #156]	; (800199c <SystemClock_Config+0xdc>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001904:	4a25      	ldr	r2, [pc, #148]	; (800199c <SystemClock_Config+0xdc>)
 8001906:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4b23      	ldr	r3, [pc, #140]	; (800199c <SystemClock_Config+0xdc>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001914:	603b      	str	r3, [r7, #0]
 8001916:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001918:	2301      	movs	r3, #1
 800191a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800191c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001920:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001922:	2302      	movs	r3, #2
 8001924:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001926:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800192a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 800192c:	2319      	movs	r3, #25
 800192e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001930:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001934:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001936:	2302      	movs	r3, #2
 8001938:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800193a:	2302      	movs	r3, #2
 800193c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800193e:	2302      	movs	r3, #2
 8001940:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001942:	f107 031c 	add.w	r3, r7, #28
 8001946:	4618      	mov	r0, r3
 8001948:	f001 fa3a 	bl	8002dc0 <HAL_RCC_OscConfig>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001952:	f000 f825 	bl	80019a0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001956:	f001 f9e3 	bl	8002d20 <HAL_PWREx_EnableOverDrive>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001960:	f000 f81e 	bl	80019a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001964:	230f      	movs	r3, #15
 8001966:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001968:	2302      	movs	r3, #2
 800196a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001974:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800197a:	f107 0308 	add.w	r3, r7, #8
 800197e:	2103      	movs	r1, #3
 8001980:	4618      	mov	r0, r3
 8001982:	f001 fccb 	bl	800331c <HAL_RCC_ClockConfig>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800198c:	f000 f808 	bl	80019a0 <Error_Handler>
  }
}
 8001990:	bf00      	nop
 8001992:	3750      	adds	r7, #80	; 0x50
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40023800 	.word	0x40023800
 800199c:	40007000 	.word	0x40007000

080019a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019a4:	b672      	cpsid	i
}
 80019a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <Error_Handler+0x8>
	...

080019ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <HAL_MspInit+0x44>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <HAL_MspInit+0x44>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <HAL_MspInit+0x44>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_MspInit+0x44>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <HAL_MspInit+0x44>)
 80019d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d4:	6453      	str	r3, [r2, #68]	; 0x44
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_MspInit+0x44>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800

080019f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <NMI_Handler+0x4>

080019fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <HardFault_Handler+0x4>

08001a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <MemManage_Handler+0x4>

08001a06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a0a:	e7fe      	b.n	8001a0a <BusFault_Handler+0x4>

08001a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <UsageFault_Handler+0x4>

08001a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a40:	f000 f90c 	bl	8001c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <SystemInit+0x28>)
 8001a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a52:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <SystemInit+0x28>)
 8001a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a5c:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <SystemInit+0x28>)
 8001a5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a62:	609a      	str	r2, [r3, #8]
#endif
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <MX_USART2_UART_Init+0x58>)
 8001a7a:	4a15      	ldr	r2, [pc, #84]	; (8001ad0 <MX_USART2_UART_Init+0x5c>)
 8001a7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001a7e:	4b13      	ldr	r3, [pc, #76]	; (8001acc <MX_USART2_UART_Init+0x58>)
 8001a80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_USART2_UART_Init+0x58>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <MX_USART2_UART_Init+0x58>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <MX_USART2_UART_Init+0x58>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <MX_USART2_UART_Init+0x58>)
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <MX_USART2_UART_Init+0x58>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <MX_USART2_UART_Init+0x58>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <MX_USART2_UART_Init+0x58>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <MX_USART2_UART_Init+0x58>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_USART2_UART_Init+0x58>)
 8001ab8:	f002 fa3e 	bl	8003f38 <HAL_UART_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ac2:	f7ff ff6d 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	2000009c 	.word	0x2000009c
 8001ad0:	40004400 	.word	0x40004400

08001ad4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b0ae      	sub	sp, #184	; 0xb8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2290      	movs	r2, #144	; 0x90
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f002 ff49 	bl	800498c <memset>
  if(uartHandle->Instance==USART2)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a21      	ldr	r2, [pc, #132]	; (8001b84 <HAL_UART_MspInit+0xb0>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d13a      	bne.n	8001b7a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4618      	mov	r0, r3
 8001b12:	f001 fde9 	bl	80036e8 <HAL_RCCEx_PeriphCLKConfig>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b1c:	f7ff ff40 	bl	80019a0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b20:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <HAL_UART_MspInit+0xb4>)
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	4a18      	ldr	r2, [pc, #96]	; (8001b88 <HAL_UART_MspInit+0xb4>)
 8001b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2c:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <HAL_UART_MspInit+0xb4>)
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <HAL_UART_MspInit+0xb4>)
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <HAL_UART_MspInit+0xb4>)
 8001b3e:	f043 0308 	orr.w	r3, r3, #8
 8001b42:	6313      	str	r3, [r2, #48]	; 0x30
 8001b44:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <HAL_UART_MspInit+0xb4>)
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART2TX_Pin|DEBUG_UART2RX_Pin;
 8001b50:	2360      	movs	r3, #96	; 0x60
 8001b52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b62:	2303      	movs	r3, #3
 8001b64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b68:	2307      	movs	r3, #7
 8001b6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b6e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b72:	4619      	mov	r1, r3
 8001b74:	4805      	ldr	r0, [pc, #20]	; (8001b8c <HAL_UART_MspInit+0xb8>)
 8001b76:	f000 ff0d 	bl	8002994 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	37b8      	adds	r7, #184	; 0xb8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40004400 	.word	0x40004400
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40020c00 	.word	0x40020c00

08001b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b96:	e003      	b.n	8001ba0 <LoopCopyDataInit>

08001b98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b9e:	3104      	adds	r1, #4

08001ba0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ba0:	480b      	ldr	r0, [pc, #44]	; (8001bd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ba4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ba6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ba8:	d3f6      	bcc.n	8001b98 <CopyDataInit>
  ldr  r2, =_sbss
 8001baa:	4a0b      	ldr	r2, [pc, #44]	; (8001bd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bac:	e002      	b.n	8001bb4 <LoopFillZerobss>

08001bae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bb0:	f842 3b04 	str.w	r3, [r2], #4

08001bb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bb8:	d3f9      	bcc.n	8001bae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bba:	f7ff ff45 	bl	8001a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bbe:	f002 fea7 	bl	8004910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc2:	f7ff fc47 	bl	8001454 <main>
  bx  lr    
 8001bc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bc8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001bcc:	08004e0c 	.word	0x08004e0c
  ldr  r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bd4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001bd8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001bdc:	20000128 	.word	0x20000128

08001be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be0:	e7fe      	b.n	8001be0 <ADC_IRQHandler>

08001be2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be6:	2003      	movs	r0, #3
 8001be8:	f000 fea0 	bl	800292c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bec:	2000      	movs	r0, #0
 8001bee:	f000 f805 	bl	8001bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf2:	f7ff fedb 	bl	80019ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_InitTick+0x54>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_InitTick+0x58>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 fead 	bl	800297a <HAL_SYSTICK_Config>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00e      	b.n	8001c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b0f      	cmp	r3, #15
 8001c2e:	d80a      	bhi.n	8001c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c30:	2200      	movs	r2, #0
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f000 fe83 	bl	8002942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c3c:	4a06      	ldr	r2, [pc, #24]	; (8001c58 <HAL_InitTick+0x5c>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e000      	b.n	8001c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000000 	.word	0x20000000
 8001c54:	20000008 	.word	0x20000008
 8001c58:	20000004 	.word	0x20000004

08001c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_IncTick+0x20>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_IncTick+0x24>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <HAL_IncTick+0x24>)
 8001c6e:	6013      	str	r3, [r2, #0]
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000008 	.word	0x20000008
 8001c80:	20000124 	.word	0x20000124

08001c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return uwTick;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <HAL_GetTick+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000124 	.word	0x20000124

08001c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca4:	f7ff ffee 	bl	8001c84 <HAL_GetTick>
 8001ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d005      	beq.n	8001cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <HAL_Delay+0x44>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cc2:	bf00      	nop
 8001cc4:	f7ff ffde 	bl	8001c84 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d8f7      	bhi.n	8001cc4 <HAL_Delay+0x28>
  {
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000008 	.word	0x20000008

08001ce4 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 8001ce8:	4b02      	ldr	r3, [pc, #8]	; (8001cf4 <HAL_GetHalVersion+0x10>)
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	01030000 	.word	0x01030000

08001cf8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <HAL_GetREVID+0x14>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	0c1b      	lsrs	r3, r3, #16
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e0042000 	.word	0xe0042000

08001d10 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <HAL_GetDEVID+0x18>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e0042000 	.word	0xe0042000

08001d2c <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <HAL_GetUIDw0+0x14>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	1ff0f420 	.word	0x1ff0f420

08001d44 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <HAL_GetUIDw1+0x14>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	1ff0f424 	.word	0x1ff0f424

08001d5c <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8001d60:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <HAL_GetUIDw2+0x14>)
 8001d62:	681b      	ldr	r3, [r3, #0]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	1ff0f428 	.word	0x1ff0f428

08001d74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e031      	b.n	8001dee <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff f8bc 	bl	8000f10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d116      	bne.n	8001de0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <HAL_ADC_Init+0x84>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	f043 0202 	orr.w	r2, r3, #2
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 fb0a 	bl	80023dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f023 0303 	bic.w	r3, r3, #3
 8001dd6:	f043 0201 	orr.w	r2, r3, #1
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	641a      	str	r2, [r3, #64]	; 0x40
 8001dde:	e001      	b.n	8001de4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	ffffeefd 	.word	0xffffeefd

08001dfc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d101      	bne.n	8001e16 <HAL_ADC_Start+0x1a>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e0ad      	b.n	8001f72 <HAL_ADC_Start+0x176>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d018      	beq.n	8001e5e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001e3c:	4b50      	ldr	r3, [pc, #320]	; (8001f80 <HAL_ADC_Start+0x184>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a50      	ldr	r2, [pc, #320]	; (8001f84 <HAL_ADC_Start+0x188>)
 8001e42:	fba2 2303 	umull	r2, r3, r2, r3
 8001e46:	0c9a      	lsrs	r2, r3, #18
 8001e48:	4613      	mov	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001e50:	e002      	b.n	8001e58 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	3b01      	subs	r3, #1
 8001e56:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f9      	bne.n	8001e52 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d175      	bne.n	8001f58 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e70:	4b45      	ldr	r3, [pc, #276]	; (8001f88 <HAL_ADC_Start+0x18c>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d007      	beq.n	8001e9a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea6:	d106      	bne.n	8001eb6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eac:	f023 0206 	bic.w	r2, r3, #6
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	645a      	str	r2, [r3, #68]	; 0x44
 8001eb4:	e002      	b.n	8001ebc <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ecc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001ece:	4b2f      	ldr	r3, [pc, #188]	; (8001f8c <HAL_ADC_Start+0x190>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10f      	bne.n	8001efa <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d143      	bne.n	8001f70 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	e03a      	b.n	8001f70 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a24      	ldr	r2, [pc, #144]	; (8001f90 <HAL_ADC_Start+0x194>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d10e      	bne.n	8001f22 <HAL_ADC_Start+0x126>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d107      	bne.n	8001f22 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f20:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001f22:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <HAL_ADC_Start+0x190>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d120      	bne.n	8001f70 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a18      	ldr	r2, [pc, #96]	; (8001f94 <HAL_ADC_Start+0x198>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d11b      	bne.n	8001f70 <HAL_ADC_Start+0x174>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d114      	bne.n	8001f70 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	e00b      	b.n	8001f70 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	f043 0210 	orr.w	r2, r3, #16
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f68:	f043 0201 	orr.w	r2, r3, #1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000000 	.word	0x20000000
 8001f84:	431bde83 	.word	0x431bde83
 8001f88:	fffff8fe 	.word	0xfffff8fe
 8001f8c:	40012300 	.word	0x40012300
 8001f90:	40012000 	.word	0x40012000
 8001f94:	40012200 	.word	0x40012200

08001f98 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d101      	bne.n	8001fae <HAL_ADC_Stop+0x16>
 8001faa:	2302      	movs	r3, #2
 8001fac:	e01f      	b.n	8001fee <HAL_ADC_Stop+0x56>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0201 	bic.w	r2, r2, #1
 8001fc4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d107      	bne.n	8001fe4 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <HAL_ADC_Stop+0x64>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	f043 0201 	orr.w	r2, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	ffffeefe 	.word	0xffffeefe

08002000 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800201c:	d113      	bne.n	8002046 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800202c:	d10b      	bne.n	8002046 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f043 0220 	orr.w	r2, r3, #32
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e063      	b.n	800210e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002046:	f7ff fe1d 	bl	8001c84 <HAL_GetTick>
 800204a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800204c:	e021      	b.n	8002092 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002054:	d01d      	beq.n	8002092 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d007      	beq.n	800206c <HAL_ADC_PollForConversion+0x6c>
 800205c:	f7ff fe12 	bl	8001c84 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d212      	bcs.n	8002092 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b02      	cmp	r3, #2
 8002078:	d00b      	beq.n	8002092 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f043 0204 	orr.w	r2, r3, #4
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e03d      	b.n	800210e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b02      	cmp	r3, #2
 800209e:	d1d6      	bne.n	800204e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0212 	mvn.w	r2, #18
 80020a8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d123      	bne.n	800210c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d11f      	bne.n	800210c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d006      	beq.n	80020e8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d111      	bne.n	800210c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d105      	bne.n	800210c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f043 0201 	orr.w	r2, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_ADC_ConfigChannel+0x1c>
 8002148:	2302      	movs	r3, #2
 800214a:	e136      	b.n	80023ba <HAL_ADC_ConfigChannel+0x28a>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b09      	cmp	r3, #9
 800215a:	d93a      	bls.n	80021d2 <HAL_ADC_ConfigChannel+0xa2>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002164:	d035      	beq.n	80021d2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68d9      	ldr	r1, [r3, #12]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	b29b      	uxth	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	4613      	mov	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	3b1e      	subs	r3, #30
 800217c:	2207      	movs	r2, #7
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43da      	mvns	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	400a      	ands	r2, r1
 800218a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a8d      	ldr	r2, [pc, #564]	; (80023c8 <HAL_ADC_ConfigChannel+0x298>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d10a      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68d9      	ldr	r1, [r3, #12]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	061a      	lsls	r2, r3, #24
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021aa:	e035      	b.n	8002218 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68d9      	ldr	r1, [r3, #12]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	4618      	mov	r0, r3
 80021be:	4603      	mov	r3, r0
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4403      	add	r3, r0
 80021c4:	3b1e      	subs	r3, #30
 80021c6:	409a      	lsls	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021d0:	e022      	b.n	8002218 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6919      	ldr	r1, [r3, #16]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	461a      	mov	r2, r3
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	2207      	movs	r2, #7
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43da      	mvns	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	400a      	ands	r2, r1
 80021f4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6919      	ldr	r1, [r3, #16]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	b29b      	uxth	r3, r3
 8002206:	4618      	mov	r0, r3
 8002208:	4603      	mov	r3, r0
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4403      	add	r3, r0
 800220e:	409a      	lsls	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b06      	cmp	r3, #6
 800221e:	d824      	bhi.n	800226a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	3b05      	subs	r3, #5
 8002232:	221f      	movs	r2, #31
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43da      	mvns	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	400a      	ands	r2, r1
 8002240:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	b29b      	uxth	r3, r3
 800224e:	4618      	mov	r0, r3
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	3b05      	subs	r3, #5
 800225c:	fa00 f203 	lsl.w	r2, r0, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	635a      	str	r2, [r3, #52]	; 0x34
 8002268:	e04c      	b.n	8002304 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b0c      	cmp	r3, #12
 8002270:	d824      	bhi.n	80022bc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	3b23      	subs	r3, #35	; 0x23
 8002284:	221f      	movs	r2, #31
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43da      	mvns	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	400a      	ands	r2, r1
 8002292:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	4618      	mov	r0, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	3b23      	subs	r3, #35	; 0x23
 80022ae:	fa00 f203 	lsl.w	r2, r0, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30
 80022ba:	e023      	b.n	8002304 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	3b41      	subs	r3, #65	; 0x41
 80022ce:	221f      	movs	r2, #31
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43da      	mvns	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	400a      	ands	r2, r1
 80022dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	4618      	mov	r0, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	3b41      	subs	r3, #65	; 0x41
 80022f8:	fa00 f203 	lsl.w	r2, r0, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a30      	ldr	r2, [pc, #192]	; (80023cc <HAL_ADC_ConfigChannel+0x29c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d10a      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x1f4>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002316:	d105      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002318:	4b2d      	ldr	r3, [pc, #180]	; (80023d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	4a2c      	ldr	r2, [pc, #176]	; (80023d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800231e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002322:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a28      	ldr	r2, [pc, #160]	; (80023cc <HAL_ADC_ConfigChannel+0x29c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d10f      	bne.n	800234e <HAL_ADC_ConfigChannel+0x21e>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2b12      	cmp	r3, #18
 8002334:	d10b      	bne.n	800234e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002336:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	4a25      	ldr	r2, [pc, #148]	; (80023d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800233c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002340:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002342:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4a22      	ldr	r2, [pc, #136]	; (80023d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002348:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800234c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a1e      	ldr	r2, [pc, #120]	; (80023cc <HAL_ADC_ConfigChannel+0x29c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d12b      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x280>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a1a      	ldr	r2, [pc, #104]	; (80023c8 <HAL_ADC_ConfigChannel+0x298>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d003      	beq.n	800236a <HAL_ADC_ConfigChannel+0x23a>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b11      	cmp	r3, #17
 8002368:	d122      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800236a:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4a18      	ldr	r2, [pc, #96]	; (80023d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002370:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002374:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002376:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4a15      	ldr	r2, [pc, #84]	; (80023d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800237c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002380:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a10      	ldr	r2, [pc, #64]	; (80023c8 <HAL_ADC_ConfigChannel+0x298>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d111      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <HAL_ADC_ConfigChannel+0x2a4>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a11      	ldr	r2, [pc, #68]	; (80023d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	0c9a      	lsrs	r2, r3, #18
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80023a2:	e002      	b.n	80023aa <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f9      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	10000012 	.word	0x10000012
 80023cc:	40012000 	.word	0x40012000
 80023d0:	40012300 	.word	0x40012300
 80023d4:	20000000 	.word	0x20000000
 80023d8:	431bde83 	.word	0x431bde83

080023dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80023e4:	4b78      	ldr	r3, [pc, #480]	; (80025c8 <ADC_Init+0x1ec>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4a77      	ldr	r2, [pc, #476]	; (80025c8 <ADC_Init+0x1ec>)
 80023ea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80023ee:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80023f0:	4b75      	ldr	r3, [pc, #468]	; (80025c8 <ADC_Init+0x1ec>)
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4973      	ldr	r1, [pc, #460]	; (80025c8 <ADC_Init+0x1ec>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800240c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	021a      	lsls	r2, r3, #8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002430:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6859      	ldr	r1, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002452:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6899      	ldr	r1, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	4a58      	ldr	r2, [pc, #352]	; (80025cc <ADC_Init+0x1f0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d022      	beq.n	80024b6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800247e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6899      	ldr	r1, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6899      	ldr	r1, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	e00f      	b.n	80024d6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0202 	bic.w	r2, r2, #2
 80024e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6899      	ldr	r1, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	005a      	lsls	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01b      	beq.n	800253c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002512:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002522:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	3b01      	subs	r3, #1
 8002530:	035a      	lsls	r2, r3, #13
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	e007      	b.n	800254c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800254a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800255a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	3b01      	subs	r3, #1
 8002568:	051a      	lsls	r2, r3, #20
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002580:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6899      	ldr	r1, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800258e:	025a      	lsls	r2, r3, #9
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6899      	ldr	r1, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	029a      	lsls	r2, r3, #10
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	609a      	str	r2, [r3, #8]
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	40012300 	.word	0x40012300
 80025cc:	0f000001 	.word	0x0f000001

080025d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e0ed      	b.n	80027be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d102      	bne.n	80025f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7fe fd38 	bl	8001064 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0201 	orr.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002604:	f7ff fb3e 	bl	8001c84 <HAL_GetTick>
 8002608:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800260a:	e012      	b.n	8002632 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800260c:	f7ff fb3a 	bl	8001c84 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b0a      	cmp	r3, #10
 8002618:	d90b      	bls.n	8002632 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2205      	movs	r2, #5
 800262a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e0c5      	b.n	80027be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0e5      	beq.n	800260c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0202 	bic.w	r2, r2, #2
 800264e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002650:	f7ff fb18 	bl	8001c84 <HAL_GetTick>
 8002654:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002656:	e012      	b.n	800267e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002658:	f7ff fb14 	bl	8001c84 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b0a      	cmp	r3, #10
 8002664:	d90b      	bls.n	800267e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2205      	movs	r2, #5
 8002676:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e09f      	b.n	80027be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1e5      	bne.n	8002658 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	7e1b      	ldrb	r3, [r3, #24]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d108      	bne.n	80026a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	e007      	b.n	80026b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	7e5b      	ldrb	r3, [r3, #25]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d108      	bne.n	80026d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	e007      	b.n	80026e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	7e9b      	ldrb	r3, [r3, #26]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d108      	bne.n	80026fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0220 	orr.w	r2, r2, #32
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	e007      	b.n	800270a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0220 	bic.w	r2, r2, #32
 8002708:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	7edb      	ldrb	r3, [r3, #27]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d108      	bne.n	8002724 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0210 	bic.w	r2, r2, #16
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	e007      	b.n	8002734 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0210 	orr.w	r2, r2, #16
 8002732:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	7f1b      	ldrb	r3, [r3, #28]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d108      	bne.n	800274e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0208 	orr.w	r2, r2, #8
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	e007      	b.n	800275e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0208 	bic.w	r2, r2, #8
 800275c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	7f5b      	ldrb	r3, [r3, #29]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d108      	bne.n	8002778 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f042 0204 	orr.w	r2, r2, #4
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	e007      	b.n	8002788 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0204 	bic.w	r2, r2, #4
 8002786:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	ea42 0103 	orr.w	r1, r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	1e5a      	subs	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <__NVIC_SetPriorityGrouping+0x40>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027e4:	4013      	ands	r3, r2
 80027e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <__NVIC_SetPriorityGrouping+0x44>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027f6:	4a04      	ldr	r2, [pc, #16]	; (8002808 <__NVIC_SetPriorityGrouping+0x40>)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	60d3      	str	r3, [r2, #12]
}
 80027fc:	bf00      	nop
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000ed00 	.word	0xe000ed00
 800280c:	05fa0000 	.word	0x05fa0000

08002810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002814:	4b04      	ldr	r3, [pc, #16]	; (8002828 <__NVIC_GetPriorityGrouping+0x18>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	0a1b      	lsrs	r3, r3, #8
 800281a:	f003 0307 	and.w	r3, r3, #7
}
 800281e:	4618      	mov	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	6039      	str	r1, [r7, #0]
 8002836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283c:	2b00      	cmp	r3, #0
 800283e:	db0a      	blt.n	8002856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	b2da      	uxtb	r2, r3
 8002844:	490c      	ldr	r1, [pc, #48]	; (8002878 <__NVIC_SetPriority+0x4c>)
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	0112      	lsls	r2, r2, #4
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	440b      	add	r3, r1
 8002850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002854:	e00a      	b.n	800286c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4908      	ldr	r1, [pc, #32]	; (800287c <__NVIC_SetPriority+0x50>)
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	3b04      	subs	r3, #4
 8002864:	0112      	lsls	r2, r2, #4
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	440b      	add	r3, r1
 800286a:	761a      	strb	r2, [r3, #24]
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000e100 	.word	0xe000e100
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f1c3 0307 	rsb	r3, r3, #7
 800289a:	2b04      	cmp	r3, #4
 800289c:	bf28      	it	cs
 800289e:	2304      	movcs	r3, #4
 80028a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3304      	adds	r3, #4
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d902      	bls.n	80028b0 <NVIC_EncodePriority+0x30>
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3b03      	subs	r3, #3
 80028ae:	e000      	b.n	80028b2 <NVIC_EncodePriority+0x32>
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	f04f 32ff 	mov.w	r2, #4294967295
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43da      	mvns	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	401a      	ands	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c8:	f04f 31ff 	mov.w	r1, #4294967295
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	43d9      	mvns	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	4313      	orrs	r3, r2
         );
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3724      	adds	r7, #36	; 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
	...

080028e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f8:	d301      	bcc.n	80028fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028fa:	2301      	movs	r3, #1
 80028fc:	e00f      	b.n	800291e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028fe:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <SysTick_Config+0x40>)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3b01      	subs	r3, #1
 8002904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002906:	210f      	movs	r1, #15
 8002908:	f04f 30ff 	mov.w	r0, #4294967295
 800290c:	f7ff ff8e 	bl	800282c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <SysTick_Config+0x40>)
 8002912:	2200      	movs	r2, #0
 8002914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002916:	4b04      	ldr	r3, [pc, #16]	; (8002928 <SysTick_Config+0x40>)
 8002918:	2207      	movs	r2, #7
 800291a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	e000e010 	.word	0xe000e010

0800292c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff ff47 	bl	80027c8 <__NVIC_SetPriorityGrouping>
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	4603      	mov	r3, r0
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002954:	f7ff ff5c 	bl	8002810 <__NVIC_GetPriorityGrouping>
 8002958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	68b9      	ldr	r1, [r7, #8]
 800295e:	6978      	ldr	r0, [r7, #20]
 8002960:	f7ff ff8e 	bl	8002880 <NVIC_EncodePriority>
 8002964:	4602      	mov	r2, r0
 8002966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff5d 	bl	800282c <__NVIC_SetPriority>
}
 8002972:	bf00      	nop
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff ffb0 	bl	80028e8 <SysTick_Config>
 8002988:	4603      	mov	r3, r0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002994:	b480      	push	{r7}
 8002996:	b089      	sub	sp, #36	; 0x24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
 80029b2:	e175      	b.n	8002ca0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80029b4:	2201      	movs	r2, #1
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	f040 8164 	bne.w	8002c9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d005      	beq.n	80029ea <HAL_GPIO_Init+0x56>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d130      	bne.n	8002a4c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	2203      	movs	r2, #3
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43db      	mvns	r3, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4013      	ands	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a20:	2201      	movs	r2, #1
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 0201 	and.w	r2, r3, #1
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d017      	beq.n	8002a88 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	2203      	movs	r2, #3
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d123      	bne.n	8002adc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	08da      	lsrs	r2, r3, #3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3208      	adds	r2, #8
 8002a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	220f      	movs	r2, #15
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	691a      	ldr	r2, [r3, #16]
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	08da      	lsrs	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3208      	adds	r2, #8
 8002ad6:	69b9      	ldr	r1, [r7, #24]
 8002ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 0203 	and.w	r2, r3, #3
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 80be 	beq.w	8002c9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1e:	4b66      	ldr	r3, [pc, #408]	; (8002cb8 <HAL_GPIO_Init+0x324>)
 8002b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b22:	4a65      	ldr	r2, [pc, #404]	; (8002cb8 <HAL_GPIO_Init+0x324>)
 8002b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b28:	6453      	str	r3, [r2, #68]	; 0x44
 8002b2a:	4b63      	ldr	r3, [pc, #396]	; (8002cb8 <HAL_GPIO_Init+0x324>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b36:	4a61      	ldr	r2, [pc, #388]	; (8002cbc <HAL_GPIO_Init+0x328>)
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	089b      	lsrs	r3, r3, #2
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	220f      	movs	r2, #15
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4013      	ands	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a58      	ldr	r2, [pc, #352]	; (8002cc0 <HAL_GPIO_Init+0x32c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d037      	beq.n	8002bd2 <HAL_GPIO_Init+0x23e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a57      	ldr	r2, [pc, #348]	; (8002cc4 <HAL_GPIO_Init+0x330>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d031      	beq.n	8002bce <HAL_GPIO_Init+0x23a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a56      	ldr	r2, [pc, #344]	; (8002cc8 <HAL_GPIO_Init+0x334>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d02b      	beq.n	8002bca <HAL_GPIO_Init+0x236>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a55      	ldr	r2, [pc, #340]	; (8002ccc <HAL_GPIO_Init+0x338>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d025      	beq.n	8002bc6 <HAL_GPIO_Init+0x232>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a54      	ldr	r2, [pc, #336]	; (8002cd0 <HAL_GPIO_Init+0x33c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d01f      	beq.n	8002bc2 <HAL_GPIO_Init+0x22e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a53      	ldr	r2, [pc, #332]	; (8002cd4 <HAL_GPIO_Init+0x340>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d019      	beq.n	8002bbe <HAL_GPIO_Init+0x22a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a52      	ldr	r2, [pc, #328]	; (8002cd8 <HAL_GPIO_Init+0x344>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d013      	beq.n	8002bba <HAL_GPIO_Init+0x226>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a51      	ldr	r2, [pc, #324]	; (8002cdc <HAL_GPIO_Init+0x348>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d00d      	beq.n	8002bb6 <HAL_GPIO_Init+0x222>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a50      	ldr	r2, [pc, #320]	; (8002ce0 <HAL_GPIO_Init+0x34c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d007      	beq.n	8002bb2 <HAL_GPIO_Init+0x21e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a4f      	ldr	r2, [pc, #316]	; (8002ce4 <HAL_GPIO_Init+0x350>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d101      	bne.n	8002bae <HAL_GPIO_Init+0x21a>
 8002baa:	2309      	movs	r3, #9
 8002bac:	e012      	b.n	8002bd4 <HAL_GPIO_Init+0x240>
 8002bae:	230a      	movs	r3, #10
 8002bb0:	e010      	b.n	8002bd4 <HAL_GPIO_Init+0x240>
 8002bb2:	2308      	movs	r3, #8
 8002bb4:	e00e      	b.n	8002bd4 <HAL_GPIO_Init+0x240>
 8002bb6:	2307      	movs	r3, #7
 8002bb8:	e00c      	b.n	8002bd4 <HAL_GPIO_Init+0x240>
 8002bba:	2306      	movs	r3, #6
 8002bbc:	e00a      	b.n	8002bd4 <HAL_GPIO_Init+0x240>
 8002bbe:	2305      	movs	r3, #5
 8002bc0:	e008      	b.n	8002bd4 <HAL_GPIO_Init+0x240>
 8002bc2:	2304      	movs	r3, #4
 8002bc4:	e006      	b.n	8002bd4 <HAL_GPIO_Init+0x240>
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e004      	b.n	8002bd4 <HAL_GPIO_Init+0x240>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e002      	b.n	8002bd4 <HAL_GPIO_Init+0x240>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <HAL_GPIO_Init+0x240>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	69fa      	ldr	r2, [r7, #28]
 8002bd6:	f002 0203 	and.w	r2, r2, #3
 8002bda:	0092      	lsls	r2, r2, #2
 8002bdc:	4093      	lsls	r3, r2
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002be4:	4935      	ldr	r1, [pc, #212]	; (8002cbc <HAL_GPIO_Init+0x328>)
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	089b      	lsrs	r3, r3, #2
 8002bea:	3302      	adds	r3, #2
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bf2:	4b3d      	ldr	r3, [pc, #244]	; (8002ce8 <HAL_GPIO_Init+0x354>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c16:	4a34      	ldr	r2, [pc, #208]	; (8002ce8 <HAL_GPIO_Init+0x354>)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c1c:	4b32      	ldr	r3, [pc, #200]	; (8002ce8 <HAL_GPIO_Init+0x354>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c40:	4a29      	ldr	r2, [pc, #164]	; (8002ce8 <HAL_GPIO_Init+0x354>)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c46:	4b28      	ldr	r3, [pc, #160]	; (8002ce8 <HAL_GPIO_Init+0x354>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c6a:	4a1f      	ldr	r2, [pc, #124]	; (8002ce8 <HAL_GPIO_Init+0x354>)
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c70:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <HAL_GPIO_Init+0x354>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c94:	4a14      	ldr	r2, [pc, #80]	; (8002ce8 <HAL_GPIO_Init+0x354>)
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	61fb      	str	r3, [r7, #28]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	2b0f      	cmp	r3, #15
 8002ca4:	f67f ae86 	bls.w	80029b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ca8:	bf00      	nop
 8002caa:	bf00      	nop
 8002cac:	3724      	adds	r7, #36	; 0x24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40013800 	.word	0x40013800
 8002cc0:	40020000 	.word	0x40020000
 8002cc4:	40020400 	.word	0x40020400
 8002cc8:	40020800 	.word	0x40020800
 8002ccc:	40020c00 	.word	0x40020c00
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40021400 	.word	0x40021400
 8002cd8:	40021800 	.word	0x40021800
 8002cdc:	40021c00 	.word	0x40021c00
 8002ce0:	40022000 	.word	0x40022000
 8002ce4:	40022400 	.word	0x40022400
 8002ce8:	40013c00 	.word	0x40013c00

08002cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	807b      	strh	r3, [r7, #2]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cfc:	787b      	ldrb	r3, [r7, #1]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d02:	887a      	ldrh	r2, [r7, #2]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d08:	e003      	b.n	8002d12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d0a:	887b      	ldrh	r3, [r7, #2]
 8002d0c:	041a      	lsls	r2, r3, #16
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	619a      	str	r2, [r3, #24]
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d2a:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	4a22      	ldr	r2, [pc, #136]	; (8002db8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d34:	6413      	str	r3, [r2, #64]	; 0x40
 8002d36:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002d42:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1d      	ldr	r2, [pc, #116]	; (8002dbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d4e:	f7fe ff99 	bl	8001c84 <HAL_GetTick>
 8002d52:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d54:	e009      	b.n	8002d6a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d56:	f7fe ff95 	bl	8001c84 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d64:	d901      	bls.n	8002d6a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e022      	b.n	8002db0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d6a:	4b14      	ldr	r3, [pc, #80]	; (8002dbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d76:	d1ee      	bne.n	8002d56 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d78:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a0f      	ldr	r2, [pc, #60]	; (8002dbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d82:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d84:	f7fe ff7e 	bl	8001c84 <HAL_GetTick>
 8002d88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d8a:	e009      	b.n	8002da0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d8c:	f7fe ff7a 	bl	8001c84 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d9a:	d901      	bls.n	8002da0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e007      	b.n	8002db0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dac:	d1ee      	bne.n	8002d8c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40007000 	.word	0x40007000

08002dc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e29b      	b.n	800330e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 8087 	beq.w	8002ef2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002de4:	4b96      	ldr	r3, [pc, #600]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 030c 	and.w	r3, r3, #12
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d00c      	beq.n	8002e0a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002df0:	4b93      	ldr	r3, [pc, #588]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d112      	bne.n	8002e22 <HAL_RCC_OscConfig+0x62>
 8002dfc:	4b90      	ldr	r3, [pc, #576]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e08:	d10b      	bne.n	8002e22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0a:	4b8d      	ldr	r3, [pc, #564]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d06c      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x130>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d168      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e275      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e2a:	d106      	bne.n	8002e3a <HAL_RCC_OscConfig+0x7a>
 8002e2c:	4b84      	ldr	r3, [pc, #528]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a83      	ldr	r2, [pc, #524]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e36:	6013      	str	r3, [r2, #0]
 8002e38:	e02e      	b.n	8002e98 <HAL_RCC_OscConfig+0xd8>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10c      	bne.n	8002e5c <HAL_RCC_OscConfig+0x9c>
 8002e42:	4b7f      	ldr	r3, [pc, #508]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a7e      	ldr	r2, [pc, #504]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	4b7c      	ldr	r3, [pc, #496]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a7b      	ldr	r2, [pc, #492]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	e01d      	b.n	8002e98 <HAL_RCC_OscConfig+0xd8>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e64:	d10c      	bne.n	8002e80 <HAL_RCC_OscConfig+0xc0>
 8002e66:	4b76      	ldr	r3, [pc, #472]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a75      	ldr	r2, [pc, #468]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	4b73      	ldr	r3, [pc, #460]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a72      	ldr	r2, [pc, #456]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e00b      	b.n	8002e98 <HAL_RCC_OscConfig+0xd8>
 8002e80:	4b6f      	ldr	r3, [pc, #444]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a6e      	ldr	r2, [pc, #440]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	4b6c      	ldr	r3, [pc, #432]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a6b      	ldr	r2, [pc, #428]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d013      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea0:	f7fe fef0 	bl	8001c84 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea8:	f7fe feec 	bl	8001c84 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b64      	cmp	r3, #100	; 0x64
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e229      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eba:	4b61      	ldr	r3, [pc, #388]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0xe8>
 8002ec6:	e014      	b.n	8002ef2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fedc 	bl	8001c84 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed0:	f7fe fed8 	bl	8001c84 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	; 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e215      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee2:	4b57      	ldr	r3, [pc, #348]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x110>
 8002eee:	e000      	b.n	8002ef2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d069      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002efe:	4b50      	ldr	r3, [pc, #320]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f0a:	4b4d      	ldr	r3, [pc, #308]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d11c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x190>
 8002f16:	4b4a      	ldr	r3, [pc, #296]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d116      	bne.n	8002f50 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f22:	4b47      	ldr	r3, [pc, #284]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <HAL_RCC_OscConfig+0x17a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d001      	beq.n	8002f3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e1e9      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3a:	4b41      	ldr	r3, [pc, #260]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	493d      	ldr	r1, [pc, #244]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4e:	e040      	b.n	8002fd2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d023      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f58:	4b39      	ldr	r3, [pc, #228]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a38      	ldr	r2, [pc, #224]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7fe fe8e 	bl	8001c84 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f6c:	f7fe fe8a 	bl	8001c84 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e1c7      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7e:	4b30      	ldr	r3, [pc, #192]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8a:	4b2d      	ldr	r3, [pc, #180]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	4929      	ldr	r1, [pc, #164]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	600b      	str	r3, [r1, #0]
 8002f9e:	e018      	b.n	8002fd2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fa0:	4b27      	ldr	r3, [pc, #156]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a26      	ldr	r2, [pc, #152]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002fa6:	f023 0301 	bic.w	r3, r3, #1
 8002faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7fe fe6a 	bl	8001c84 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb4:	f7fe fe66 	bl	8001c84 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e1a3      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc6:	4b1e      	ldr	r3, [pc, #120]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d038      	beq.n	8003050 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d019      	beq.n	800301a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fe6:	4b16      	ldr	r3, [pc, #88]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fea:	4a15      	ldr	r2, [pc, #84]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff2:	f7fe fe47 	bl	8001c84 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ffa:	f7fe fe43 	bl	8001c84 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e180      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300c:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 800300e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x23a>
 8003018:	e01a      	b.n	8003050 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 800301c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800301e:	4a08      	ldr	r2, [pc, #32]	; (8003040 <HAL_RCC_OscConfig+0x280>)
 8003020:	f023 0301 	bic.w	r3, r3, #1
 8003024:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003026:	f7fe fe2d 	bl	8001c84 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800302c:	e00a      	b.n	8003044 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800302e:	f7fe fe29 	bl	8001c84 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d903      	bls.n	8003044 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e166      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
 8003040:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003044:	4b92      	ldr	r3, [pc, #584]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1ee      	bne.n	800302e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80a4 	beq.w	80031a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800305e:	4b8c      	ldr	r3, [pc, #560]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10d      	bne.n	8003086 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800306a:	4b89      	ldr	r3, [pc, #548]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	4a88      	ldr	r2, [pc, #544]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003074:	6413      	str	r3, [r2, #64]	; 0x40
 8003076:	4b86      	ldr	r3, [pc, #536]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003082:	2301      	movs	r3, #1
 8003084:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003086:	4b83      	ldr	r3, [pc, #524]	; (8003294 <HAL_RCC_OscConfig+0x4d4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308e:	2b00      	cmp	r3, #0
 8003090:	d118      	bne.n	80030c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003092:	4b80      	ldr	r3, [pc, #512]	; (8003294 <HAL_RCC_OscConfig+0x4d4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a7f      	ldr	r2, [pc, #508]	; (8003294 <HAL_RCC_OscConfig+0x4d4>)
 8003098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309e:	f7fe fdf1 	bl	8001c84 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a6:	f7fe fded 	bl	8001c84 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b64      	cmp	r3, #100	; 0x64
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e12a      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030b8:	4b76      	ldr	r3, [pc, #472]	; (8003294 <HAL_RCC_OscConfig+0x4d4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d106      	bne.n	80030da <HAL_RCC_OscConfig+0x31a>
 80030cc:	4b70      	ldr	r3, [pc, #448]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 80030ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d0:	4a6f      	ldr	r2, [pc, #444]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	6713      	str	r3, [r2, #112]	; 0x70
 80030d8:	e02d      	b.n	8003136 <HAL_RCC_OscConfig+0x376>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10c      	bne.n	80030fc <HAL_RCC_OscConfig+0x33c>
 80030e2:	4b6b      	ldr	r3, [pc, #428]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 80030e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e6:	4a6a      	ldr	r2, [pc, #424]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	6713      	str	r3, [r2, #112]	; 0x70
 80030ee:	4b68      	ldr	r3, [pc, #416]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 80030f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f2:	4a67      	ldr	r2, [pc, #412]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 80030f4:	f023 0304 	bic.w	r3, r3, #4
 80030f8:	6713      	str	r3, [r2, #112]	; 0x70
 80030fa:	e01c      	b.n	8003136 <HAL_RCC_OscConfig+0x376>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2b05      	cmp	r3, #5
 8003102:	d10c      	bne.n	800311e <HAL_RCC_OscConfig+0x35e>
 8003104:	4b62      	ldr	r3, [pc, #392]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003108:	4a61      	ldr	r2, [pc, #388]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 800310a:	f043 0304 	orr.w	r3, r3, #4
 800310e:	6713      	str	r3, [r2, #112]	; 0x70
 8003110:	4b5f      	ldr	r3, [pc, #380]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003114:	4a5e      	ldr	r2, [pc, #376]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	6713      	str	r3, [r2, #112]	; 0x70
 800311c:	e00b      	b.n	8003136 <HAL_RCC_OscConfig+0x376>
 800311e:	4b5c      	ldr	r3, [pc, #368]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003122:	4a5b      	ldr	r2, [pc, #364]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003124:	f023 0301 	bic.w	r3, r3, #1
 8003128:	6713      	str	r3, [r2, #112]	; 0x70
 800312a:	4b59      	ldr	r3, [pc, #356]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312e:	4a58      	ldr	r2, [pc, #352]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003130:	f023 0304 	bic.w	r3, r3, #4
 8003134:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d015      	beq.n	800316a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313e:	f7fe fda1 	bl	8001c84 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003144:	e00a      	b.n	800315c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003146:	f7fe fd9d 	bl	8001c84 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	f241 3288 	movw	r2, #5000	; 0x1388
 8003154:	4293      	cmp	r3, r2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e0d8      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800315c:	4b4c      	ldr	r3, [pc, #304]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 800315e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0ee      	beq.n	8003146 <HAL_RCC_OscConfig+0x386>
 8003168:	e014      	b.n	8003194 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316a:	f7fe fd8b 	bl	8001c84 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003170:	e00a      	b.n	8003188 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003172:	f7fe fd87 	bl	8001c84 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003180:	4293      	cmp	r3, r2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e0c2      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003188:	4b41      	ldr	r3, [pc, #260]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1ee      	bne.n	8003172 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003194:	7dfb      	ldrb	r3, [r7, #23]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d105      	bne.n	80031a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800319a:	4b3d      	ldr	r3, [pc, #244]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	4a3c      	ldr	r2, [pc, #240]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 80031a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 80ae 	beq.w	800330c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031b0:	4b37      	ldr	r3, [pc, #220]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 030c 	and.w	r3, r3, #12
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d06d      	beq.n	8003298 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d14b      	bne.n	800325c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c4:	4b32      	ldr	r3, [pc, #200]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a31      	ldr	r2, [pc, #196]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 80031ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fe fd58 	bl	8001c84 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d8:	f7fe fd54 	bl	8001c84 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e091      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ea:	4b29      	ldr	r3, [pc, #164]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69da      	ldr	r2, [r3, #28]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	019b      	lsls	r3, r3, #6
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320c:	085b      	lsrs	r3, r3, #1
 800320e:	3b01      	subs	r3, #1
 8003210:	041b      	lsls	r3, r3, #16
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	061b      	lsls	r3, r3, #24
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	071b      	lsls	r3, r3, #28
 8003222:	491b      	ldr	r1, [pc, #108]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003224:	4313      	orrs	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003228:	4b19      	ldr	r3, [pc, #100]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a18      	ldr	r2, [pc, #96]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 800322e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003232:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003234:	f7fe fd26 	bl	8001c84 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323c:	f7fe fd22 	bl	8001c84 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e05f      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324e:	4b10      	ldr	r3, [pc, #64]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f0      	beq.n	800323c <HAL_RCC_OscConfig+0x47c>
 800325a:	e057      	b.n	800330c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325c:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0b      	ldr	r2, [pc, #44]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003268:	f7fe fd0c 	bl	8001c84 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003270:	f7fe fd08 	bl	8001c84 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e045      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003282:	4b03      	ldr	r3, [pc, #12]	; (8003290 <HAL_RCC_OscConfig+0x4d0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0x4b0>
 800328e:	e03d      	b.n	800330c <HAL_RCC_OscConfig+0x54c>
 8003290:	40023800 	.word	0x40023800
 8003294:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003298:	4b1f      	ldr	r3, [pc, #124]	; (8003318 <HAL_RCC_OscConfig+0x558>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d030      	beq.n	8003308 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d129      	bne.n	8003308 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	429a      	cmp	r2, r3
 80032c0:	d122      	bne.n	8003308 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032c8:	4013      	ands	r3, r2
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d119      	bne.n	8003308 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032de:	085b      	lsrs	r3, r3, #1
 80032e0:	3b01      	subs	r3, #1
 80032e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d10f      	bne.n	8003308 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d107      	bne.n	8003308 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003304:	429a      	cmp	r2, r3
 8003306:	d001      	beq.n	800330c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e000      	b.n	800330e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40023800 	.word	0x40023800

0800331c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0d0      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003334:	4b6a      	ldr	r3, [pc, #424]	; (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d910      	bls.n	8003364 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003342:	4b67      	ldr	r3, [pc, #412]	; (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 020f 	bic.w	r2, r3, #15
 800334a:	4965      	ldr	r1, [pc, #404]	; (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	4313      	orrs	r3, r2
 8003350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003352:	4b63      	ldr	r3, [pc, #396]	; (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0b8      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d020      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800337c:	4b59      	ldr	r3, [pc, #356]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4a58      	ldr	r2, [pc, #352]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003382:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003386:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003394:	4b53      	ldr	r3, [pc, #332]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	4a52      	ldr	r2, [pc, #328]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 800339a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800339e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a0:	4b50      	ldr	r3, [pc, #320]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	494d      	ldr	r1, [pc, #308]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d040      	beq.n	8003440 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d107      	bne.n	80033d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	4b47      	ldr	r3, [pc, #284]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d115      	bne.n	80033fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e07f      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d107      	bne.n	80033ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033de:	4b41      	ldr	r3, [pc, #260]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d109      	bne.n	80033fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e073      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ee:	4b3d      	ldr	r3, [pc, #244]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e06b      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033fe:	4b39      	ldr	r3, [pc, #228]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f023 0203 	bic.w	r2, r3, #3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	4936      	ldr	r1, [pc, #216]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 800340c:	4313      	orrs	r3, r2
 800340e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003410:	f7fe fc38 	bl	8001c84 <HAL_GetTick>
 8003414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003416:	e00a      	b.n	800342e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003418:	f7fe fc34 	bl	8001c84 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	f241 3288 	movw	r2, #5000	; 0x1388
 8003426:	4293      	cmp	r3, r2
 8003428:	d901      	bls.n	800342e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e053      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342e:	4b2d      	ldr	r3, [pc, #180]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 020c 	and.w	r2, r3, #12
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	429a      	cmp	r2, r3
 800343e:	d1eb      	bne.n	8003418 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003440:	4b27      	ldr	r3, [pc, #156]	; (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 030f 	and.w	r3, r3, #15
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d210      	bcs.n	8003470 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344e:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 020f 	bic.w	r2, r3, #15
 8003456:	4922      	ldr	r1, [pc, #136]	; (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	4313      	orrs	r3, r2
 800345c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800345e:	4b20      	ldr	r3, [pc, #128]	; (80034e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d001      	beq.n	8003470 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e032      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800347c:	4b19      	ldr	r3, [pc, #100]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4916      	ldr	r1, [pc, #88]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 800348a:	4313      	orrs	r3, r2
 800348c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800349a:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	490e      	ldr	r1, [pc, #56]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034ae:	f000 f821 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 80034b2:	4602      	mov	r2, r0
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_RCC_ClockConfig+0x1c8>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	091b      	lsrs	r3, r3, #4
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	490a      	ldr	r1, [pc, #40]	; (80034e8 <HAL_RCC_ClockConfig+0x1cc>)
 80034c0:	5ccb      	ldrb	r3, [r1, r3]
 80034c2:	fa22 f303 	lsr.w	r3, r2, r3
 80034c6:	4a09      	ldr	r2, [pc, #36]	; (80034ec <HAL_RCC_ClockConfig+0x1d0>)
 80034c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034ca:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <HAL_RCC_ClockConfig+0x1d4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe fb94 	bl	8001bfc <HAL_InitTick>

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40023c00 	.word	0x40023c00
 80034e4:	40023800 	.word	0x40023800
 80034e8:	08004dbc 	.word	0x08004dbc
 80034ec:	20000000 	.word	0x20000000
 80034f0:	20000004 	.word	0x20000004

080034f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f8:	b090      	sub	sp, #64	; 0x40
 80034fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003500:	2300      	movs	r3, #0
 8003502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003504:	2300      	movs	r3, #0
 8003506:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003508:	2300      	movs	r3, #0
 800350a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800350c:	4b59      	ldr	r3, [pc, #356]	; (8003674 <HAL_RCC_GetSysClockFreq+0x180>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 030c 	and.w	r3, r3, #12
 8003514:	2b08      	cmp	r3, #8
 8003516:	d00d      	beq.n	8003534 <HAL_RCC_GetSysClockFreq+0x40>
 8003518:	2b08      	cmp	r3, #8
 800351a:	f200 80a1 	bhi.w	8003660 <HAL_RCC_GetSysClockFreq+0x16c>
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <HAL_RCC_GetSysClockFreq+0x34>
 8003522:	2b04      	cmp	r3, #4
 8003524:	d003      	beq.n	800352e <HAL_RCC_GetSysClockFreq+0x3a>
 8003526:	e09b      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003528:	4b53      	ldr	r3, [pc, #332]	; (8003678 <HAL_RCC_GetSysClockFreq+0x184>)
 800352a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800352c:	e09b      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800352e:	4b53      	ldr	r3, [pc, #332]	; (800367c <HAL_RCC_GetSysClockFreq+0x188>)
 8003530:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003532:	e098      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003534:	4b4f      	ldr	r3, [pc, #316]	; (8003674 <HAL_RCC_GetSysClockFreq+0x180>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800353c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800353e:	4b4d      	ldr	r3, [pc, #308]	; (8003674 <HAL_RCC_GetSysClockFreq+0x180>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d028      	beq.n	800359c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800354a:	4b4a      	ldr	r3, [pc, #296]	; (8003674 <HAL_RCC_GetSysClockFreq+0x180>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	099b      	lsrs	r3, r3, #6
 8003550:	2200      	movs	r2, #0
 8003552:	623b      	str	r3, [r7, #32]
 8003554:	627a      	str	r2, [r7, #36]	; 0x24
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800355c:	2100      	movs	r1, #0
 800355e:	4b47      	ldr	r3, [pc, #284]	; (800367c <HAL_RCC_GetSysClockFreq+0x188>)
 8003560:	fb03 f201 	mul.w	r2, r3, r1
 8003564:	2300      	movs	r3, #0
 8003566:	fb00 f303 	mul.w	r3, r0, r3
 800356a:	4413      	add	r3, r2
 800356c:	4a43      	ldr	r2, [pc, #268]	; (800367c <HAL_RCC_GetSysClockFreq+0x188>)
 800356e:	fba0 1202 	umull	r1, r2, r0, r2
 8003572:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003574:	460a      	mov	r2, r1
 8003576:	62ba      	str	r2, [r7, #40]	; 0x28
 8003578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800357a:	4413      	add	r3, r2
 800357c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800357e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003580:	2200      	movs	r2, #0
 8003582:	61bb      	str	r3, [r7, #24]
 8003584:	61fa      	str	r2, [r7, #28]
 8003586:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800358a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800358e:	f7fc fe5b 	bl	8000248 <__aeabi_uldivmod>
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	4613      	mov	r3, r2
 8003598:	63fb      	str	r3, [r7, #60]	; 0x3c
 800359a:	e053      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800359c:	4b35      	ldr	r3, [pc, #212]	; (8003674 <HAL_RCC_GetSysClockFreq+0x180>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	099b      	lsrs	r3, r3, #6
 80035a2:	2200      	movs	r2, #0
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	617a      	str	r2, [r7, #20]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035ae:	f04f 0b00 	mov.w	fp, #0
 80035b2:	4652      	mov	r2, sl
 80035b4:	465b      	mov	r3, fp
 80035b6:	f04f 0000 	mov.w	r0, #0
 80035ba:	f04f 0100 	mov.w	r1, #0
 80035be:	0159      	lsls	r1, r3, #5
 80035c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035c4:	0150      	lsls	r0, r2, #5
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	ebb2 080a 	subs.w	r8, r2, sl
 80035ce:	eb63 090b 	sbc.w	r9, r3, fp
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035e6:	ebb2 0408 	subs.w	r4, r2, r8
 80035ea:	eb63 0509 	sbc.w	r5, r3, r9
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	00eb      	lsls	r3, r5, #3
 80035f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035fc:	00e2      	lsls	r2, r4, #3
 80035fe:	4614      	mov	r4, r2
 8003600:	461d      	mov	r5, r3
 8003602:	eb14 030a 	adds.w	r3, r4, sl
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	eb45 030b 	adc.w	r3, r5, fp
 800360c:	607b      	str	r3, [r7, #4]
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	e9d7 4500 	ldrd	r4, r5, [r7]
 800361a:	4629      	mov	r1, r5
 800361c:	028b      	lsls	r3, r1, #10
 800361e:	4621      	mov	r1, r4
 8003620:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003624:	4621      	mov	r1, r4
 8003626:	028a      	lsls	r2, r1, #10
 8003628:	4610      	mov	r0, r2
 800362a:	4619      	mov	r1, r3
 800362c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362e:	2200      	movs	r2, #0
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	60fa      	str	r2, [r7, #12]
 8003634:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003638:	f7fc fe06 	bl	8000248 <__aeabi_uldivmod>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4613      	mov	r3, r2
 8003642:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003644:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_RCC_GetSysClockFreq+0x180>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	0c1b      	lsrs	r3, r3, #16
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	3301      	adds	r3, #1
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003654:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	fbb2 f3f3 	udiv	r3, r2, r3
 800365c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800365e:	e002      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <HAL_RCC_GetSysClockFreq+0x184>)
 8003662:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003668:	4618      	mov	r0, r3
 800366a:	3740      	adds	r7, #64	; 0x40
 800366c:	46bd      	mov	sp, r7
 800366e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003672:	bf00      	nop
 8003674:	40023800 	.word	0x40023800
 8003678:	00f42400 	.word	0x00f42400
 800367c:	017d7840 	.word	0x017d7840

08003680 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003684:	4b03      	ldr	r3, [pc, #12]	; (8003694 <HAL_RCC_GetHCLKFreq+0x14>)
 8003686:	681b      	ldr	r3, [r3, #0]
}
 8003688:	4618      	mov	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	20000000 	.word	0x20000000

08003698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800369c:	f7ff fff0 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 80036a0:	4602      	mov	r2, r0
 80036a2:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	0a9b      	lsrs	r3, r3, #10
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	4903      	ldr	r1, [pc, #12]	; (80036bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ae:	5ccb      	ldrb	r3, [r1, r3]
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40023800 	.word	0x40023800
 80036bc:	08004dcc 	.word	0x08004dcc

080036c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036c4:	f7ff ffdc 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	0b5b      	lsrs	r3, r3, #13
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	4903      	ldr	r1, [pc, #12]	; (80036e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036dc:	4618      	mov	r0, r3
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40023800 	.word	0x40023800
 80036e4:	08004dcc 	.word	0x08004dcc

080036e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003700:	2300      	movs	r3, #0
 8003702:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d012      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003710:	4b69      	ldr	r3, [pc, #420]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4a68      	ldr	r2, [pc, #416]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003716:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800371a:	6093      	str	r3, [r2, #8]
 800371c:	4b66      	ldr	r3, [pc, #408]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003724:	4964      	ldr	r1, [pc, #400]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003726:	4313      	orrs	r3, r2
 8003728:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003732:	2301      	movs	r3, #1
 8003734:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d017      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003742:	4b5d      	ldr	r3, [pc, #372]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003748:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003750:	4959      	ldr	r1, [pc, #356]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003760:	d101      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003762:	2301      	movs	r3, #1
 8003764:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800376e:	2301      	movs	r3, #1
 8003770:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d017      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800377e:	4b4e      	ldr	r3, [pc, #312]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003784:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	494a      	ldr	r1, [pc, #296]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800379c:	d101      	bne.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800379e:	2301      	movs	r3, #1
 80037a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80037aa:	2301      	movs	r3, #1
 80037ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80037ba:	2301      	movs	r3, #1
 80037bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 808b 	beq.w	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037cc:	4b3a      	ldr	r3, [pc, #232]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	4a39      	ldr	r2, [pc, #228]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d6:	6413      	str	r3, [r2, #64]	; 0x40
 80037d8:	4b37      	ldr	r3, [pc, #220]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037e4:	4b35      	ldr	r3, [pc, #212]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a34      	ldr	r2, [pc, #208]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f0:	f7fe fa48 	bl	8001c84 <HAL_GetTick>
 80037f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f8:	f7fe fa44 	bl	8001c84 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	; 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e38f      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800380a:	4b2c      	ldr	r3, [pc, #176]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003816:	4b28      	ldr	r3, [pc, #160]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d035      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	429a      	cmp	r2, r3
 8003832:	d02e      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003834:	4b20      	ldr	r3, [pc, #128]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800383c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800383e:	4b1e      	ldr	r3, [pc, #120]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003842:	4a1d      	ldr	r2, [pc, #116]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003848:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800384a:	4b1b      	ldr	r3, [pc, #108]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	4a1a      	ldr	r2, [pc, #104]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003854:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003856:	4a18      	ldr	r2, [pc, #96]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800385c:	4b16      	ldr	r3, [pc, #88]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b01      	cmp	r3, #1
 8003866:	d114      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003868:	f7fe fa0c 	bl	8001c84 <HAL_GetTick>
 800386c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800386e:	e00a      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003870:	f7fe fa08 	bl	8001c84 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	f241 3288 	movw	r2, #5000	; 0x1388
 800387e:	4293      	cmp	r3, r2
 8003880:	d901      	bls.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e351      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003886:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0ee      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800389e:	d111      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038ac:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038ae:	400b      	ands	r3, r1
 80038b0:	4901      	ldr	r1, [pc, #4]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	608b      	str	r3, [r1, #8]
 80038b6:	e00b      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80038b8:	40023800 	.word	0x40023800
 80038bc:	40007000 	.word	0x40007000
 80038c0:	0ffffcff 	.word	0x0ffffcff
 80038c4:	4bac      	ldr	r3, [pc, #688]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4aab      	ldr	r2, [pc, #684]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80038ce:	6093      	str	r3, [r2, #8]
 80038d0:	4ba9      	ldr	r3, [pc, #676]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038dc:	49a6      	ldr	r1, [pc, #664]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d010      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038ee:	4ba2      	ldr	r3, [pc, #648]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f4:	4aa0      	ldr	r2, [pc, #640]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80038fe:	4b9e      	ldr	r3, [pc, #632]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003900:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003908:	499b      	ldr	r1, [pc, #620]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800391c:	4b96      	ldr	r3, [pc, #600]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800391e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003922:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800392a:	4993      	ldr	r1, [pc, #588]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800393e:	4b8e      	ldr	r3, [pc, #568]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003944:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800394c:	498a      	ldr	r1, [pc, #552]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003960:	4b85      	ldr	r3, [pc, #532]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003966:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800396e:	4982      	ldr	r1, [pc, #520]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003982:	4b7d      	ldr	r3, [pc, #500]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003988:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	4979      	ldr	r1, [pc, #484]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039a4:	4b74      	ldr	r3, [pc, #464]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039aa:	f023 0203 	bic.w	r2, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b2:	4971      	ldr	r1, [pc, #452]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039c6:	4b6c      	ldr	r3, [pc, #432]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039cc:	f023 020c 	bic.w	r2, r3, #12
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d4:	4968      	ldr	r1, [pc, #416]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039e8:	4b63      	ldr	r3, [pc, #396]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f6:	4960      	ldr	r1, [pc, #384]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a0a:	4b5b      	ldr	r3, [pc, #364]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a10:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a18:	4957      	ldr	r1, [pc, #348]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a2c:	4b52      	ldr	r3, [pc, #328]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3a:	494f      	ldr	r1, [pc, #316]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003a4e:	4b4a      	ldr	r3, [pc, #296]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5c:	4946      	ldr	r1, [pc, #280]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00a      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a70:	4b41      	ldr	r3, [pc, #260]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7e:	493e      	ldr	r1, [pc, #248]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a92:	4b39      	ldr	r3, [pc, #228]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa0:	4935      	ldr	r1, [pc, #212]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00a      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ab4:	4b30      	ldr	r3, [pc, #192]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ac2:	492d      	ldr	r1, [pc, #180]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d011      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ad6:	4b28      	ldr	r3, [pc, #160]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003adc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ae4:	4924      	ldr	r1, [pc, #144]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003af0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003af4:	d101      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003af6:	2301      	movs	r3, #1
 8003af8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003b06:	2301      	movs	r3, #1
 8003b08:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b16:	4b18      	ldr	r3, [pc, #96]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b24:	4914      	ldr	r1, [pc, #80]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00b      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b38:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b48:	490b      	ldr	r1, [pc, #44]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00f      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003b5c:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b62:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b6c:	4902      	ldr	r1, [pc, #8]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b74:	e002      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003b76:	bf00      	nop
 8003b78:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00b      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b88:	4b8a      	ldr	r3, [pc, #552]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b98:	4986      	ldr	r1, [pc, #536]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00b      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003bac:	4b81      	ldr	r3, [pc, #516]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bb2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bbc:	497d      	ldr	r1, [pc, #500]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d006      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 80d6 	beq.w	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003bd8:	4b76      	ldr	r3, [pc, #472]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a75      	ldr	r2, [pc, #468]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003be2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be4:	f7fe f84e 	bl	8001c84 <HAL_GetTick>
 8003be8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bec:	f7fe f84a 	bl	8001c84 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b64      	cmp	r3, #100	; 0x64
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e195      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bfe:	4b6d      	ldr	r3, [pc, #436]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d021      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d11d      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c1e:	4b65      	ldr	r3, [pc, #404]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c24:	0c1b      	lsrs	r3, r3, #16
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c2c:	4b61      	ldr	r3, [pc, #388]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c32:	0e1b      	lsrs	r3, r3, #24
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	019a      	lsls	r2, r3, #6
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	041b      	lsls	r3, r3, #16
 8003c44:	431a      	orrs	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	061b      	lsls	r3, r3, #24
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	071b      	lsls	r3, r3, #28
 8003c52:	4958      	ldr	r1, [pc, #352]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d004      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d02e      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c84:	d129      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c86:	4b4b      	ldr	r3, [pc, #300]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c8c:	0c1b      	lsrs	r3, r3, #16
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c94:	4b47      	ldr	r3, [pc, #284]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c9a:	0f1b      	lsrs	r3, r3, #28
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	019a      	lsls	r2, r3, #6
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	041b      	lsls	r3, r3, #16
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	061b      	lsls	r3, r3, #24
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	071b      	lsls	r3, r3, #28
 8003cba:	493e      	ldr	r1, [pc, #248]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003cc2:	4b3c      	ldr	r3, [pc, #240]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc8:	f023 021f 	bic.w	r2, r3, #31
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	4938      	ldr	r1, [pc, #224]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d01d      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ce6:	4b33      	ldr	r3, [pc, #204]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cec:	0e1b      	lsrs	r3, r3, #24
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cf4:	4b2f      	ldr	r3, [pc, #188]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cfa:	0f1b      	lsrs	r3, r3, #28
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	019a      	lsls	r2, r3, #6
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	041b      	lsls	r3, r3, #16
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	061b      	lsls	r3, r3, #24
 8003d14:	431a      	orrs	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	071b      	lsls	r3, r3, #28
 8003d1a:	4926      	ldr	r1, [pc, #152]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d011      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	019a      	lsls	r2, r3, #6
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	041b      	lsls	r3, r3, #16
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	061b      	lsls	r3, r3, #24
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	071b      	lsls	r3, r3, #28
 8003d4a:	491a      	ldr	r1, [pc, #104]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d52:	4b18      	ldr	r3, [pc, #96]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a17      	ldr	r2, [pc, #92]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d5e:	f7fd ff91 	bl	8001c84 <HAL_GetTick>
 8003d62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d64:	e008      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d66:	f7fd ff8d 	bl	8001c84 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b64      	cmp	r3, #100	; 0x64
 8003d72:	d901      	bls.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e0d8      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d78:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0f0      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	f040 80ce 	bne.w	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d8c:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a08      	ldr	r2, [pc, #32]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d98:	f7fd ff74 	bl	8001c84 <HAL_GetTick>
 8003d9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d9e:	e00b      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003da0:	f7fd ff70 	bl	8001c84 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b64      	cmp	r3, #100	; 0x64
 8003dac:	d904      	bls.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e0bb      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003db2:	bf00      	nop
 8003db4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003db8:	4b5e      	ldr	r3, [pc, #376]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc4:	d0ec      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d02e      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d12a      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003dee:	4b51      	ldr	r3, [pc, #324]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df4:	0c1b      	lsrs	r3, r3, #16
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003dfc:	4b4d      	ldr	r3, [pc, #308]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e02:	0f1b      	lsrs	r3, r3, #28
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	019a      	lsls	r2, r3, #6
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	041b      	lsls	r3, r3, #16
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	061b      	lsls	r3, r3, #24
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	071b      	lsls	r3, r3, #28
 8003e22:	4944      	ldr	r1, [pc, #272]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e2a:	4b42      	ldr	r3, [pc, #264]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	021b      	lsls	r3, r3, #8
 8003e3c:	493d      	ldr	r1, [pc, #244]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d022      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e58:	d11d      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e5a:	4b36      	ldr	r3, [pc, #216]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e60:	0e1b      	lsrs	r3, r3, #24
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e68:	4b32      	ldr	r3, [pc, #200]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6e:	0f1b      	lsrs	r3, r3, #28
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	019a      	lsls	r2, r3, #6
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	041b      	lsls	r3, r3, #16
 8003e82:	431a      	orrs	r2, r3
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	061b      	lsls	r3, r3, #24
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	071b      	lsls	r3, r3, #28
 8003e8e:	4929      	ldr	r1, [pc, #164]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d028      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ea2:	4b24      	ldr	r3, [pc, #144]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea8:	0e1b      	lsrs	r3, r3, #24
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003eb0:	4b20      	ldr	r3, [pc, #128]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb6:	0c1b      	lsrs	r3, r3, #16
 8003eb8:	f003 0303 	and.w	r3, r3, #3
 8003ebc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	019a      	lsls	r2, r3, #6
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	041b      	lsls	r3, r3, #16
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	061b      	lsls	r3, r3, #24
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	071b      	lsls	r3, r3, #28
 8003ed6:	4917      	ldr	r1, [pc, #92]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ede:	4b15      	ldr	r3, [pc, #84]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ee4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	4911      	ldr	r1, [pc, #68]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ef4:	4b0f      	ldr	r3, [pc, #60]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a0e      	ldr	r2, [pc, #56]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f00:	f7fd fec0 	bl	8001c84 <HAL_GetTick>
 8003f04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f08:	f7fd febc 	bl	8001c84 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b64      	cmp	r3, #100	; 0x64
 8003f14:	d901      	bls.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e007      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f26:	d1ef      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3720      	adds	r7, #32
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40023800 	.word	0x40023800

08003f38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e040      	b.n	8003fcc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fd fdba 	bl	8001ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2224      	movs	r2, #36	; 0x24
 8003f64:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f8b0 	bl	80040dc <UART_SetConfig>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d101      	bne.n	8003f86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e022      	b.n	8003fcc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fb08 	bl	80045a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 fb8f 	bl	80046e8 <UART_CheckIdleState>
 8003fca:	4603      	mov	r3, r0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08a      	sub	sp, #40	; 0x28
 8003fd8:	af02      	add	r7, sp, #8
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	603b      	str	r3, [r7, #0]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	d171      	bne.n	80040d0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <HAL_UART_Transmit+0x24>
 8003ff2:	88fb      	ldrh	r3, [r7, #6]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e06a      	b.n	80040d2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2221      	movs	r2, #33	; 0x21
 8004008:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800400a:	f7fd fe3b 	bl	8001c84 <HAL_GetTick>
 800400e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	88fa      	ldrh	r2, [r7, #6]
 8004014:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	88fa      	ldrh	r2, [r7, #6]
 800401c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004028:	d108      	bne.n	800403c <HAL_UART_Transmit+0x68>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d104      	bne.n	800403c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004032:	2300      	movs	r3, #0
 8004034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	61bb      	str	r3, [r7, #24]
 800403a:	e003      	b.n	8004044 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004040:	2300      	movs	r3, #0
 8004042:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004044:	e02c      	b.n	80040a0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2200      	movs	r2, #0
 800404e:	2180      	movs	r1, #128	; 0x80
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 fb96 	bl	8004782 <UART_WaitOnFlagUntilTimeout>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e038      	b.n	80040d2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10b      	bne.n	800407e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	461a      	mov	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004074:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	3302      	adds	r3, #2
 800407a:	61bb      	str	r3, [r7, #24]
 800407c:	e007      	b.n	800408e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	781a      	ldrb	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	3301      	adds	r3, #1
 800408c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1cc      	bne.n	8004046 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2200      	movs	r2, #0
 80040b4:	2140      	movs	r1, #64	; 0x40
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 fb63 	bl	8004782 <UART_WaitOnFlagUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e005      	b.n	80040d2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80040cc:	2300      	movs	r3, #0
 80040ce:	e000      	b.n	80040d2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80040d0:	2302      	movs	r3, #2
  }
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3720      	adds	r7, #32
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	4ba6      	ldr	r3, [pc, #664]	; (80043a0 <UART_SetConfig+0x2c4>)
 8004108:	4013      	ands	r3, r2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6812      	ldr	r2, [r2, #0]
 800410e:	6979      	ldr	r1, [r7, #20]
 8004110:	430b      	orrs	r3, r1
 8004112:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	4313      	orrs	r3, r2
 8004138:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	430a      	orrs	r2, r1
 800414c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a94      	ldr	r2, [pc, #592]	; (80043a4 <UART_SetConfig+0x2c8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d120      	bne.n	800419a <UART_SetConfig+0xbe>
 8004158:	4b93      	ldr	r3, [pc, #588]	; (80043a8 <UART_SetConfig+0x2cc>)
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	2b03      	cmp	r3, #3
 8004164:	d816      	bhi.n	8004194 <UART_SetConfig+0xb8>
 8004166:	a201      	add	r2, pc, #4	; (adr r2, 800416c <UART_SetConfig+0x90>)
 8004168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416c:	0800417d 	.word	0x0800417d
 8004170:	08004189 	.word	0x08004189
 8004174:	08004183 	.word	0x08004183
 8004178:	0800418f 	.word	0x0800418f
 800417c:	2301      	movs	r3, #1
 800417e:	77fb      	strb	r3, [r7, #31]
 8004180:	e150      	b.n	8004424 <UART_SetConfig+0x348>
 8004182:	2302      	movs	r3, #2
 8004184:	77fb      	strb	r3, [r7, #31]
 8004186:	e14d      	b.n	8004424 <UART_SetConfig+0x348>
 8004188:	2304      	movs	r3, #4
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e14a      	b.n	8004424 <UART_SetConfig+0x348>
 800418e:	2308      	movs	r3, #8
 8004190:	77fb      	strb	r3, [r7, #31]
 8004192:	e147      	b.n	8004424 <UART_SetConfig+0x348>
 8004194:	2310      	movs	r3, #16
 8004196:	77fb      	strb	r3, [r7, #31]
 8004198:	e144      	b.n	8004424 <UART_SetConfig+0x348>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a83      	ldr	r2, [pc, #524]	; (80043ac <UART_SetConfig+0x2d0>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d132      	bne.n	800420a <UART_SetConfig+0x12e>
 80041a4:	4b80      	ldr	r3, [pc, #512]	; (80043a8 <UART_SetConfig+0x2cc>)
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041aa:	f003 030c 	and.w	r3, r3, #12
 80041ae:	2b0c      	cmp	r3, #12
 80041b0:	d828      	bhi.n	8004204 <UART_SetConfig+0x128>
 80041b2:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <UART_SetConfig+0xdc>)
 80041b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b8:	080041ed 	.word	0x080041ed
 80041bc:	08004205 	.word	0x08004205
 80041c0:	08004205 	.word	0x08004205
 80041c4:	08004205 	.word	0x08004205
 80041c8:	080041f9 	.word	0x080041f9
 80041cc:	08004205 	.word	0x08004205
 80041d0:	08004205 	.word	0x08004205
 80041d4:	08004205 	.word	0x08004205
 80041d8:	080041f3 	.word	0x080041f3
 80041dc:	08004205 	.word	0x08004205
 80041e0:	08004205 	.word	0x08004205
 80041e4:	08004205 	.word	0x08004205
 80041e8:	080041ff 	.word	0x080041ff
 80041ec:	2300      	movs	r3, #0
 80041ee:	77fb      	strb	r3, [r7, #31]
 80041f0:	e118      	b.n	8004424 <UART_SetConfig+0x348>
 80041f2:	2302      	movs	r3, #2
 80041f4:	77fb      	strb	r3, [r7, #31]
 80041f6:	e115      	b.n	8004424 <UART_SetConfig+0x348>
 80041f8:	2304      	movs	r3, #4
 80041fa:	77fb      	strb	r3, [r7, #31]
 80041fc:	e112      	b.n	8004424 <UART_SetConfig+0x348>
 80041fe:	2308      	movs	r3, #8
 8004200:	77fb      	strb	r3, [r7, #31]
 8004202:	e10f      	b.n	8004424 <UART_SetConfig+0x348>
 8004204:	2310      	movs	r3, #16
 8004206:	77fb      	strb	r3, [r7, #31]
 8004208:	e10c      	b.n	8004424 <UART_SetConfig+0x348>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a68      	ldr	r2, [pc, #416]	; (80043b0 <UART_SetConfig+0x2d4>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d120      	bne.n	8004256 <UART_SetConfig+0x17a>
 8004214:	4b64      	ldr	r3, [pc, #400]	; (80043a8 <UART_SetConfig+0x2cc>)
 8004216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800421e:	2b30      	cmp	r3, #48	; 0x30
 8004220:	d013      	beq.n	800424a <UART_SetConfig+0x16e>
 8004222:	2b30      	cmp	r3, #48	; 0x30
 8004224:	d814      	bhi.n	8004250 <UART_SetConfig+0x174>
 8004226:	2b20      	cmp	r3, #32
 8004228:	d009      	beq.n	800423e <UART_SetConfig+0x162>
 800422a:	2b20      	cmp	r3, #32
 800422c:	d810      	bhi.n	8004250 <UART_SetConfig+0x174>
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <UART_SetConfig+0x15c>
 8004232:	2b10      	cmp	r3, #16
 8004234:	d006      	beq.n	8004244 <UART_SetConfig+0x168>
 8004236:	e00b      	b.n	8004250 <UART_SetConfig+0x174>
 8004238:	2300      	movs	r3, #0
 800423a:	77fb      	strb	r3, [r7, #31]
 800423c:	e0f2      	b.n	8004424 <UART_SetConfig+0x348>
 800423e:	2302      	movs	r3, #2
 8004240:	77fb      	strb	r3, [r7, #31]
 8004242:	e0ef      	b.n	8004424 <UART_SetConfig+0x348>
 8004244:	2304      	movs	r3, #4
 8004246:	77fb      	strb	r3, [r7, #31]
 8004248:	e0ec      	b.n	8004424 <UART_SetConfig+0x348>
 800424a:	2308      	movs	r3, #8
 800424c:	77fb      	strb	r3, [r7, #31]
 800424e:	e0e9      	b.n	8004424 <UART_SetConfig+0x348>
 8004250:	2310      	movs	r3, #16
 8004252:	77fb      	strb	r3, [r7, #31]
 8004254:	e0e6      	b.n	8004424 <UART_SetConfig+0x348>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a56      	ldr	r2, [pc, #344]	; (80043b4 <UART_SetConfig+0x2d8>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d120      	bne.n	80042a2 <UART_SetConfig+0x1c6>
 8004260:	4b51      	ldr	r3, [pc, #324]	; (80043a8 <UART_SetConfig+0x2cc>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800426a:	2bc0      	cmp	r3, #192	; 0xc0
 800426c:	d013      	beq.n	8004296 <UART_SetConfig+0x1ba>
 800426e:	2bc0      	cmp	r3, #192	; 0xc0
 8004270:	d814      	bhi.n	800429c <UART_SetConfig+0x1c0>
 8004272:	2b80      	cmp	r3, #128	; 0x80
 8004274:	d009      	beq.n	800428a <UART_SetConfig+0x1ae>
 8004276:	2b80      	cmp	r3, #128	; 0x80
 8004278:	d810      	bhi.n	800429c <UART_SetConfig+0x1c0>
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <UART_SetConfig+0x1a8>
 800427e:	2b40      	cmp	r3, #64	; 0x40
 8004280:	d006      	beq.n	8004290 <UART_SetConfig+0x1b4>
 8004282:	e00b      	b.n	800429c <UART_SetConfig+0x1c0>
 8004284:	2300      	movs	r3, #0
 8004286:	77fb      	strb	r3, [r7, #31]
 8004288:	e0cc      	b.n	8004424 <UART_SetConfig+0x348>
 800428a:	2302      	movs	r3, #2
 800428c:	77fb      	strb	r3, [r7, #31]
 800428e:	e0c9      	b.n	8004424 <UART_SetConfig+0x348>
 8004290:	2304      	movs	r3, #4
 8004292:	77fb      	strb	r3, [r7, #31]
 8004294:	e0c6      	b.n	8004424 <UART_SetConfig+0x348>
 8004296:	2308      	movs	r3, #8
 8004298:	77fb      	strb	r3, [r7, #31]
 800429a:	e0c3      	b.n	8004424 <UART_SetConfig+0x348>
 800429c:	2310      	movs	r3, #16
 800429e:	77fb      	strb	r3, [r7, #31]
 80042a0:	e0c0      	b.n	8004424 <UART_SetConfig+0x348>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a44      	ldr	r2, [pc, #272]	; (80043b8 <UART_SetConfig+0x2dc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d125      	bne.n	80042f8 <UART_SetConfig+0x21c>
 80042ac:	4b3e      	ldr	r3, [pc, #248]	; (80043a8 <UART_SetConfig+0x2cc>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ba:	d017      	beq.n	80042ec <UART_SetConfig+0x210>
 80042bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042c0:	d817      	bhi.n	80042f2 <UART_SetConfig+0x216>
 80042c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c6:	d00b      	beq.n	80042e0 <UART_SetConfig+0x204>
 80042c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042cc:	d811      	bhi.n	80042f2 <UART_SetConfig+0x216>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <UART_SetConfig+0x1fe>
 80042d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042d6:	d006      	beq.n	80042e6 <UART_SetConfig+0x20a>
 80042d8:	e00b      	b.n	80042f2 <UART_SetConfig+0x216>
 80042da:	2300      	movs	r3, #0
 80042dc:	77fb      	strb	r3, [r7, #31]
 80042de:	e0a1      	b.n	8004424 <UART_SetConfig+0x348>
 80042e0:	2302      	movs	r3, #2
 80042e2:	77fb      	strb	r3, [r7, #31]
 80042e4:	e09e      	b.n	8004424 <UART_SetConfig+0x348>
 80042e6:	2304      	movs	r3, #4
 80042e8:	77fb      	strb	r3, [r7, #31]
 80042ea:	e09b      	b.n	8004424 <UART_SetConfig+0x348>
 80042ec:	2308      	movs	r3, #8
 80042ee:	77fb      	strb	r3, [r7, #31]
 80042f0:	e098      	b.n	8004424 <UART_SetConfig+0x348>
 80042f2:	2310      	movs	r3, #16
 80042f4:	77fb      	strb	r3, [r7, #31]
 80042f6:	e095      	b.n	8004424 <UART_SetConfig+0x348>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a2f      	ldr	r2, [pc, #188]	; (80043bc <UART_SetConfig+0x2e0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d125      	bne.n	800434e <UART_SetConfig+0x272>
 8004302:	4b29      	ldr	r3, [pc, #164]	; (80043a8 <UART_SetConfig+0x2cc>)
 8004304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004308:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800430c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004310:	d017      	beq.n	8004342 <UART_SetConfig+0x266>
 8004312:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004316:	d817      	bhi.n	8004348 <UART_SetConfig+0x26c>
 8004318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800431c:	d00b      	beq.n	8004336 <UART_SetConfig+0x25a>
 800431e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004322:	d811      	bhi.n	8004348 <UART_SetConfig+0x26c>
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <UART_SetConfig+0x254>
 8004328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800432c:	d006      	beq.n	800433c <UART_SetConfig+0x260>
 800432e:	e00b      	b.n	8004348 <UART_SetConfig+0x26c>
 8004330:	2301      	movs	r3, #1
 8004332:	77fb      	strb	r3, [r7, #31]
 8004334:	e076      	b.n	8004424 <UART_SetConfig+0x348>
 8004336:	2302      	movs	r3, #2
 8004338:	77fb      	strb	r3, [r7, #31]
 800433a:	e073      	b.n	8004424 <UART_SetConfig+0x348>
 800433c:	2304      	movs	r3, #4
 800433e:	77fb      	strb	r3, [r7, #31]
 8004340:	e070      	b.n	8004424 <UART_SetConfig+0x348>
 8004342:	2308      	movs	r3, #8
 8004344:	77fb      	strb	r3, [r7, #31]
 8004346:	e06d      	b.n	8004424 <UART_SetConfig+0x348>
 8004348:	2310      	movs	r3, #16
 800434a:	77fb      	strb	r3, [r7, #31]
 800434c:	e06a      	b.n	8004424 <UART_SetConfig+0x348>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a1b      	ldr	r2, [pc, #108]	; (80043c0 <UART_SetConfig+0x2e4>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d138      	bne.n	80043ca <UART_SetConfig+0x2ee>
 8004358:	4b13      	ldr	r3, [pc, #76]	; (80043a8 <UART_SetConfig+0x2cc>)
 800435a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004362:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004366:	d017      	beq.n	8004398 <UART_SetConfig+0x2bc>
 8004368:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800436c:	d82a      	bhi.n	80043c4 <UART_SetConfig+0x2e8>
 800436e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004372:	d00b      	beq.n	800438c <UART_SetConfig+0x2b0>
 8004374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004378:	d824      	bhi.n	80043c4 <UART_SetConfig+0x2e8>
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <UART_SetConfig+0x2aa>
 800437e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004382:	d006      	beq.n	8004392 <UART_SetConfig+0x2b6>
 8004384:	e01e      	b.n	80043c4 <UART_SetConfig+0x2e8>
 8004386:	2300      	movs	r3, #0
 8004388:	77fb      	strb	r3, [r7, #31]
 800438a:	e04b      	b.n	8004424 <UART_SetConfig+0x348>
 800438c:	2302      	movs	r3, #2
 800438e:	77fb      	strb	r3, [r7, #31]
 8004390:	e048      	b.n	8004424 <UART_SetConfig+0x348>
 8004392:	2304      	movs	r3, #4
 8004394:	77fb      	strb	r3, [r7, #31]
 8004396:	e045      	b.n	8004424 <UART_SetConfig+0x348>
 8004398:	2308      	movs	r3, #8
 800439a:	77fb      	strb	r3, [r7, #31]
 800439c:	e042      	b.n	8004424 <UART_SetConfig+0x348>
 800439e:	bf00      	nop
 80043a0:	efff69f3 	.word	0xefff69f3
 80043a4:	40011000 	.word	0x40011000
 80043a8:	40023800 	.word	0x40023800
 80043ac:	40004400 	.word	0x40004400
 80043b0:	40004800 	.word	0x40004800
 80043b4:	40004c00 	.word	0x40004c00
 80043b8:	40005000 	.word	0x40005000
 80043bc:	40011400 	.word	0x40011400
 80043c0:	40007800 	.word	0x40007800
 80043c4:	2310      	movs	r3, #16
 80043c6:	77fb      	strb	r3, [r7, #31]
 80043c8:	e02c      	b.n	8004424 <UART_SetConfig+0x348>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a72      	ldr	r2, [pc, #456]	; (8004598 <UART_SetConfig+0x4bc>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d125      	bne.n	8004420 <UART_SetConfig+0x344>
 80043d4:	4b71      	ldr	r3, [pc, #452]	; (800459c <UART_SetConfig+0x4c0>)
 80043d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80043de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80043e2:	d017      	beq.n	8004414 <UART_SetConfig+0x338>
 80043e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80043e8:	d817      	bhi.n	800441a <UART_SetConfig+0x33e>
 80043ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ee:	d00b      	beq.n	8004408 <UART_SetConfig+0x32c>
 80043f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043f4:	d811      	bhi.n	800441a <UART_SetConfig+0x33e>
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <UART_SetConfig+0x326>
 80043fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043fe:	d006      	beq.n	800440e <UART_SetConfig+0x332>
 8004400:	e00b      	b.n	800441a <UART_SetConfig+0x33e>
 8004402:	2300      	movs	r3, #0
 8004404:	77fb      	strb	r3, [r7, #31]
 8004406:	e00d      	b.n	8004424 <UART_SetConfig+0x348>
 8004408:	2302      	movs	r3, #2
 800440a:	77fb      	strb	r3, [r7, #31]
 800440c:	e00a      	b.n	8004424 <UART_SetConfig+0x348>
 800440e:	2304      	movs	r3, #4
 8004410:	77fb      	strb	r3, [r7, #31]
 8004412:	e007      	b.n	8004424 <UART_SetConfig+0x348>
 8004414:	2308      	movs	r3, #8
 8004416:	77fb      	strb	r3, [r7, #31]
 8004418:	e004      	b.n	8004424 <UART_SetConfig+0x348>
 800441a:	2310      	movs	r3, #16
 800441c:	77fb      	strb	r3, [r7, #31]
 800441e:	e001      	b.n	8004424 <UART_SetConfig+0x348>
 8004420:	2310      	movs	r3, #16
 8004422:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	69db      	ldr	r3, [r3, #28]
 8004428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800442c:	d15b      	bne.n	80044e6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800442e:	7ffb      	ldrb	r3, [r7, #31]
 8004430:	2b08      	cmp	r3, #8
 8004432:	d828      	bhi.n	8004486 <UART_SetConfig+0x3aa>
 8004434:	a201      	add	r2, pc, #4	; (adr r2, 800443c <UART_SetConfig+0x360>)
 8004436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443a:	bf00      	nop
 800443c:	08004461 	.word	0x08004461
 8004440:	08004469 	.word	0x08004469
 8004444:	08004471 	.word	0x08004471
 8004448:	08004487 	.word	0x08004487
 800444c:	08004477 	.word	0x08004477
 8004450:	08004487 	.word	0x08004487
 8004454:	08004487 	.word	0x08004487
 8004458:	08004487 	.word	0x08004487
 800445c:	0800447f 	.word	0x0800447f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004460:	f7ff f91a 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 8004464:	61b8      	str	r0, [r7, #24]
        break;
 8004466:	e013      	b.n	8004490 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004468:	f7ff f92a 	bl	80036c0 <HAL_RCC_GetPCLK2Freq>
 800446c:	61b8      	str	r0, [r7, #24]
        break;
 800446e:	e00f      	b.n	8004490 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004470:	4b4b      	ldr	r3, [pc, #300]	; (80045a0 <UART_SetConfig+0x4c4>)
 8004472:	61bb      	str	r3, [r7, #24]
        break;
 8004474:	e00c      	b.n	8004490 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004476:	f7ff f83d 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 800447a:	61b8      	str	r0, [r7, #24]
        break;
 800447c:	e008      	b.n	8004490 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800447e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004482:	61bb      	str	r3, [r7, #24]
        break;
 8004484:	e004      	b.n	8004490 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	77bb      	strb	r3, [r7, #30]
        break;
 800448e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d074      	beq.n	8004580 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	005a      	lsls	r2, r3, #1
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	085b      	lsrs	r3, r3, #1
 80044a0:	441a      	add	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	2b0f      	cmp	r3, #15
 80044b0:	d916      	bls.n	80044e0 <UART_SetConfig+0x404>
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b8:	d212      	bcs.n	80044e0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	f023 030f 	bic.w	r3, r3, #15
 80044c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	085b      	lsrs	r3, r3, #1
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	89fb      	ldrh	r3, [r7, #14]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	89fa      	ldrh	r2, [r7, #14]
 80044dc:	60da      	str	r2, [r3, #12]
 80044de:	e04f      	b.n	8004580 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	77bb      	strb	r3, [r7, #30]
 80044e4:	e04c      	b.n	8004580 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044e6:	7ffb      	ldrb	r3, [r7, #31]
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d828      	bhi.n	800453e <UART_SetConfig+0x462>
 80044ec:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <UART_SetConfig+0x418>)
 80044ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f2:	bf00      	nop
 80044f4:	08004519 	.word	0x08004519
 80044f8:	08004521 	.word	0x08004521
 80044fc:	08004529 	.word	0x08004529
 8004500:	0800453f 	.word	0x0800453f
 8004504:	0800452f 	.word	0x0800452f
 8004508:	0800453f 	.word	0x0800453f
 800450c:	0800453f 	.word	0x0800453f
 8004510:	0800453f 	.word	0x0800453f
 8004514:	08004537 	.word	0x08004537
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004518:	f7ff f8be 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 800451c:	61b8      	str	r0, [r7, #24]
        break;
 800451e:	e013      	b.n	8004548 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004520:	f7ff f8ce 	bl	80036c0 <HAL_RCC_GetPCLK2Freq>
 8004524:	61b8      	str	r0, [r7, #24]
        break;
 8004526:	e00f      	b.n	8004548 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004528:	4b1d      	ldr	r3, [pc, #116]	; (80045a0 <UART_SetConfig+0x4c4>)
 800452a:	61bb      	str	r3, [r7, #24]
        break;
 800452c:	e00c      	b.n	8004548 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800452e:	f7fe ffe1 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 8004532:	61b8      	str	r0, [r7, #24]
        break;
 8004534:	e008      	b.n	8004548 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800453a:	61bb      	str	r3, [r7, #24]
        break;
 800453c:	e004      	b.n	8004548 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	77bb      	strb	r3, [r7, #30]
        break;
 8004546:	bf00      	nop
    }

    if (pclk != 0U)
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d018      	beq.n	8004580 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	085a      	lsrs	r2, r3, #1
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	441a      	add	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004560:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2b0f      	cmp	r3, #15
 8004566:	d909      	bls.n	800457c <UART_SetConfig+0x4a0>
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800456e:	d205      	bcs.n	800457c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	b29a      	uxth	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	60da      	str	r2, [r3, #12]
 800457a:	e001      	b.n	8004580 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800458c:	7fbb      	ldrb	r3, [r7, #30]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3720      	adds	r7, #32
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40007c00 	.word	0x40007c00
 800459c:	40023800 	.word	0x40023800
 80045a0:	00f42400 	.word	0x00f42400

080045a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	f003 0310 	and.w	r3, r3, #16
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	f003 0320 	and.w	r3, r3, #32
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01a      	beq.n	80046ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046a2:	d10a      	bne.n	80046ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	605a      	str	r2, [r3, #4]
  }
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046f8:	f7fd fac4 	bl	8001c84 <HAL_GetTick>
 80046fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0308 	and.w	r3, r3, #8
 8004708:	2b08      	cmp	r3, #8
 800470a:	d10e      	bne.n	800472a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800470c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f831 	bl	8004782 <UART_WaitOnFlagUntilTimeout>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e027      	b.n	800477a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b04      	cmp	r3, #4
 8004736:	d10e      	bne.n	8004756 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004738:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f81b 	bl	8004782 <UART_WaitOnFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e011      	b.n	800477a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2220      	movs	r2, #32
 800475a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b09c      	sub	sp, #112	; 0x70
 8004786:	af00      	add	r7, sp, #0
 8004788:	60f8      	str	r0, [r7, #12]
 800478a:	60b9      	str	r1, [r7, #8]
 800478c:	603b      	str	r3, [r7, #0]
 800478e:	4613      	mov	r3, r2
 8004790:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004792:	e0a7      	b.n	80048e4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479a:	f000 80a3 	beq.w	80048e4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800479e:	f7fd fa71 	bl	8001c84 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d302      	bcc.n	80047b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80047ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d13f      	bne.n	8004834 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047bc:	e853 3f00 	ldrex	r3, [r3]
 80047c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047c8:	667b      	str	r3, [r7, #100]	; 0x64
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047da:	e841 2300 	strex	r3, r2, [r1]
 80047de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80047e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1e6      	bne.n	80047b4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3308      	adds	r3, #8
 80047ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f0:	e853 3f00 	ldrex	r3, [r3]
 80047f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f8:	f023 0301 	bic.w	r3, r3, #1
 80047fc:	663b      	str	r3, [r7, #96]	; 0x60
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3308      	adds	r3, #8
 8004804:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004806:	64ba      	str	r2, [r7, #72]	; 0x48
 8004808:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800480c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1e5      	bne.n	80047e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2220      	movs	r2, #32
 800481e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2220      	movs	r2, #32
 8004824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e068      	b.n	8004906 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b00      	cmp	r3, #0
 8004840:	d050      	beq.n	80048e4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800484c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004850:	d148      	bne.n	80048e4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800485a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004864:	e853 3f00 	ldrex	r3, [r3]
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004870:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800487a:	637b      	str	r3, [r7, #52]	; 0x34
 800487c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004880:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004882:	e841 2300 	strex	r3, r2, [r1]
 8004886:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1e6      	bne.n	800485c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3308      	adds	r3, #8
 8004894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	613b      	str	r3, [r7, #16]
   return(result);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f023 0301 	bic.w	r3, r3, #1
 80048a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3308      	adds	r3, #8
 80048ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048ae:	623a      	str	r2, [r7, #32]
 80048b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b2:	69f9      	ldr	r1, [r7, #28]
 80048b4:	6a3a      	ldr	r2, [r7, #32]
 80048b6:	e841 2300 	strex	r3, r2, [r1]
 80048ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1e5      	bne.n	800488e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2220      	movs	r2, #32
 80048c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e010      	b.n	8004906 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	69da      	ldr	r2, [r3, #28]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	4013      	ands	r3, r2
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	bf0c      	ite	eq
 80048f4:	2301      	moveq	r3, #1
 80048f6:	2300      	movne	r3, #0
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	461a      	mov	r2, r3
 80048fc:	79fb      	ldrb	r3, [r7, #7]
 80048fe:	429a      	cmp	r2, r3
 8004900:	f43f af48 	beq.w	8004794 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3770      	adds	r7, #112	; 0x70
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
	...

08004910 <__libc_init_array>:
 8004910:	b570      	push	{r4, r5, r6, lr}
 8004912:	4d0d      	ldr	r5, [pc, #52]	; (8004948 <__libc_init_array+0x38>)
 8004914:	4c0d      	ldr	r4, [pc, #52]	; (800494c <__libc_init_array+0x3c>)
 8004916:	1b64      	subs	r4, r4, r5
 8004918:	10a4      	asrs	r4, r4, #2
 800491a:	2600      	movs	r6, #0
 800491c:	42a6      	cmp	r6, r4
 800491e:	d109      	bne.n	8004934 <__libc_init_array+0x24>
 8004920:	4d0b      	ldr	r5, [pc, #44]	; (8004950 <__libc_init_array+0x40>)
 8004922:	4c0c      	ldr	r4, [pc, #48]	; (8004954 <__libc_init_array+0x44>)
 8004924:	f000 f87c 	bl	8004a20 <_init>
 8004928:	1b64      	subs	r4, r4, r5
 800492a:	10a4      	asrs	r4, r4, #2
 800492c:	2600      	movs	r6, #0
 800492e:	42a6      	cmp	r6, r4
 8004930:	d105      	bne.n	800493e <__libc_init_array+0x2e>
 8004932:	bd70      	pop	{r4, r5, r6, pc}
 8004934:	f855 3b04 	ldr.w	r3, [r5], #4
 8004938:	4798      	blx	r3
 800493a:	3601      	adds	r6, #1
 800493c:	e7ee      	b.n	800491c <__libc_init_array+0xc>
 800493e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004942:	4798      	blx	r3
 8004944:	3601      	adds	r6, #1
 8004946:	e7f2      	b.n	800492e <__libc_init_array+0x1e>
 8004948:	08004e04 	.word	0x08004e04
 800494c:	08004e04 	.word	0x08004e04
 8004950:	08004e04 	.word	0x08004e04
 8004954:	08004e08 	.word	0x08004e08

08004958 <__itoa>:
 8004958:	1e93      	subs	r3, r2, #2
 800495a:	2b22      	cmp	r3, #34	; 0x22
 800495c:	b510      	push	{r4, lr}
 800495e:	460c      	mov	r4, r1
 8004960:	d904      	bls.n	800496c <__itoa+0x14>
 8004962:	2300      	movs	r3, #0
 8004964:	700b      	strb	r3, [r1, #0]
 8004966:	461c      	mov	r4, r3
 8004968:	4620      	mov	r0, r4
 800496a:	bd10      	pop	{r4, pc}
 800496c:	2a0a      	cmp	r2, #10
 800496e:	d109      	bne.n	8004984 <__itoa+0x2c>
 8004970:	2800      	cmp	r0, #0
 8004972:	da07      	bge.n	8004984 <__itoa+0x2c>
 8004974:	232d      	movs	r3, #45	; 0x2d
 8004976:	700b      	strb	r3, [r1, #0]
 8004978:	4240      	negs	r0, r0
 800497a:	2101      	movs	r1, #1
 800497c:	4421      	add	r1, r4
 800497e:	f000 f80d 	bl	800499c <__utoa>
 8004982:	e7f1      	b.n	8004968 <__itoa+0x10>
 8004984:	2100      	movs	r1, #0
 8004986:	e7f9      	b.n	800497c <__itoa+0x24>

08004988 <itoa>:
 8004988:	f7ff bfe6 	b.w	8004958 <__itoa>

0800498c <memset>:
 800498c:	4402      	add	r2, r0
 800498e:	4603      	mov	r3, r0
 8004990:	4293      	cmp	r3, r2
 8004992:	d100      	bne.n	8004996 <memset+0xa>
 8004994:	4770      	bx	lr
 8004996:	f803 1b01 	strb.w	r1, [r3], #1
 800499a:	e7f9      	b.n	8004990 <memset+0x4>

0800499c <__utoa>:
 800499c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800499e:	4c1f      	ldr	r4, [pc, #124]	; (8004a1c <__utoa+0x80>)
 80049a0:	b08b      	sub	sp, #44	; 0x2c
 80049a2:	4605      	mov	r5, r0
 80049a4:	460b      	mov	r3, r1
 80049a6:	466e      	mov	r6, sp
 80049a8:	f104 0c20 	add.w	ip, r4, #32
 80049ac:	6820      	ldr	r0, [r4, #0]
 80049ae:	6861      	ldr	r1, [r4, #4]
 80049b0:	4637      	mov	r7, r6
 80049b2:	c703      	stmia	r7!, {r0, r1}
 80049b4:	3408      	adds	r4, #8
 80049b6:	4564      	cmp	r4, ip
 80049b8:	463e      	mov	r6, r7
 80049ba:	d1f7      	bne.n	80049ac <__utoa+0x10>
 80049bc:	7921      	ldrb	r1, [r4, #4]
 80049be:	7139      	strb	r1, [r7, #4]
 80049c0:	1e91      	subs	r1, r2, #2
 80049c2:	6820      	ldr	r0, [r4, #0]
 80049c4:	6038      	str	r0, [r7, #0]
 80049c6:	2922      	cmp	r1, #34	; 0x22
 80049c8:	f04f 0100 	mov.w	r1, #0
 80049cc:	d904      	bls.n	80049d8 <__utoa+0x3c>
 80049ce:	7019      	strb	r1, [r3, #0]
 80049d0:	460b      	mov	r3, r1
 80049d2:	4618      	mov	r0, r3
 80049d4:	b00b      	add	sp, #44	; 0x2c
 80049d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049d8:	1e58      	subs	r0, r3, #1
 80049da:	4684      	mov	ip, r0
 80049dc:	fbb5 f7f2 	udiv	r7, r5, r2
 80049e0:	fb02 5617 	mls	r6, r2, r7, r5
 80049e4:	3628      	adds	r6, #40	; 0x28
 80049e6:	446e      	add	r6, sp
 80049e8:	460c      	mov	r4, r1
 80049ea:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80049ee:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80049f2:	462e      	mov	r6, r5
 80049f4:	42b2      	cmp	r2, r6
 80049f6:	f101 0101 	add.w	r1, r1, #1
 80049fa:	463d      	mov	r5, r7
 80049fc:	d9ee      	bls.n	80049dc <__utoa+0x40>
 80049fe:	2200      	movs	r2, #0
 8004a00:	545a      	strb	r2, [r3, r1]
 8004a02:	1919      	adds	r1, r3, r4
 8004a04:	1aa5      	subs	r5, r4, r2
 8004a06:	42aa      	cmp	r2, r5
 8004a08:	dae3      	bge.n	80049d2 <__utoa+0x36>
 8004a0a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004a0e:	780e      	ldrb	r6, [r1, #0]
 8004a10:	7006      	strb	r6, [r0, #0]
 8004a12:	3201      	adds	r2, #1
 8004a14:	f801 5901 	strb.w	r5, [r1], #-1
 8004a18:	e7f4      	b.n	8004a04 <__utoa+0x68>
 8004a1a:	bf00      	nop
 8004a1c:	08004dd4 	.word	0x08004dd4

08004a20 <_init>:
 8004a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a22:	bf00      	nop
 8004a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a26:	bc08      	pop	{r3}
 8004a28:	469e      	mov	lr, r3
 8004a2a:	4770      	bx	lr

08004a2c <_fini>:
 8004a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2e:	bf00      	nop
 8004a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a32:	bc08      	pop	{r3}
 8004a34:	469e      	mov	lr, r3
 8004a36:	4770      	bx	lr
