
Motorsteuergeraet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d98  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  08007f90  08007f90  00017f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086e0  080086e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080086e0  080086e0  000186e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086e8  080086e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086e8  080086e8  000186e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086ec  080086ec  000186ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080086f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  2000000c  080086fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  080086fc  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018e49  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f04  00000000  00000000  00038ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001290  00000000  00000000  0003cdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e3f  00000000  00000000  0003e060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c887  00000000  00000000  0003ee9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c15f  00000000  00000000  0006b726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001088a2  00000000  00000000  00087885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a88  00000000  00000000  00190128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00194bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08007f78 	.word	0x08007f78

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08007f78 	.word	0x08007f78

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b970 	b.w	8000540 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9e08      	ldr	r6, [sp, #32]
 800027e:	460d      	mov	r5, r1
 8000280:	4604      	mov	r4, r0
 8000282:	460f      	mov	r7, r1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d14a      	bne.n	800031e <__udivmoddi4+0xa6>
 8000288:	428a      	cmp	r2, r1
 800028a:	4694      	mov	ip, r2
 800028c:	d965      	bls.n	800035a <__udivmoddi4+0xe2>
 800028e:	fab2 f382 	clz	r3, r2
 8000292:	b143      	cbz	r3, 80002a6 <__udivmoddi4+0x2e>
 8000294:	fa02 fc03 	lsl.w	ip, r2, r3
 8000298:	f1c3 0220 	rsb	r2, r3, #32
 800029c:	409f      	lsls	r7, r3
 800029e:	fa20 f202 	lsr.w	r2, r0, r2
 80002a2:	4317      	orrs	r7, r2
 80002a4:	409c      	lsls	r4, r3
 80002a6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002aa:	fa1f f58c 	uxth.w	r5, ip
 80002ae:	fbb7 f1fe 	udiv	r1, r7, lr
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002bc:	fb01 f005 	mul.w	r0, r1, r5
 80002c0:	4290      	cmp	r0, r2
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x62>
 80002c4:	eb1c 0202 	adds.w	r2, ip, r2
 80002c8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002cc:	f080 811c 	bcs.w	8000508 <__udivmoddi4+0x290>
 80002d0:	4290      	cmp	r0, r2
 80002d2:	f240 8119 	bls.w	8000508 <__udivmoddi4+0x290>
 80002d6:	3902      	subs	r1, #2
 80002d8:	4462      	add	r2, ip
 80002da:	1a12      	subs	r2, r2, r0
 80002dc:	b2a4      	uxth	r4, r4
 80002de:	fbb2 f0fe 	udiv	r0, r2, lr
 80002e2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ea:	fb00 f505 	mul.w	r5, r0, r5
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x90>
 80002f2:	eb1c 0404 	adds.w	r4, ip, r4
 80002f6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002fa:	f080 8107 	bcs.w	800050c <__udivmoddi4+0x294>
 80002fe:	42a5      	cmp	r5, r4
 8000300:	f240 8104 	bls.w	800050c <__udivmoddi4+0x294>
 8000304:	4464      	add	r4, ip
 8000306:	3802      	subs	r0, #2
 8000308:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	2100      	movs	r1, #0
 8000310:	b11e      	cbz	r6, 800031a <__udivmoddi4+0xa2>
 8000312:	40dc      	lsrs	r4, r3
 8000314:	2300      	movs	r3, #0
 8000316:	e9c6 4300 	strd	r4, r3, [r6]
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0xbc>
 8000322:	2e00      	cmp	r6, #0
 8000324:	f000 80ed 	beq.w	8000502 <__udivmoddi4+0x28a>
 8000328:	2100      	movs	r1, #0
 800032a:	e9c6 0500 	strd	r0, r5, [r6]
 800032e:	4608      	mov	r0, r1
 8000330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000334:	fab3 f183 	clz	r1, r3
 8000338:	2900      	cmp	r1, #0
 800033a:	d149      	bne.n	80003d0 <__udivmoddi4+0x158>
 800033c:	42ab      	cmp	r3, r5
 800033e:	d302      	bcc.n	8000346 <__udivmoddi4+0xce>
 8000340:	4282      	cmp	r2, r0
 8000342:	f200 80f8 	bhi.w	8000536 <__udivmoddi4+0x2be>
 8000346:	1a84      	subs	r4, r0, r2
 8000348:	eb65 0203 	sbc.w	r2, r5, r3
 800034c:	2001      	movs	r0, #1
 800034e:	4617      	mov	r7, r2
 8000350:	2e00      	cmp	r6, #0
 8000352:	d0e2      	beq.n	800031a <__udivmoddi4+0xa2>
 8000354:	e9c6 4700 	strd	r4, r7, [r6]
 8000358:	e7df      	b.n	800031a <__udivmoddi4+0xa2>
 800035a:	b902      	cbnz	r2, 800035e <__udivmoddi4+0xe6>
 800035c:	deff      	udf	#255	; 0xff
 800035e:	fab2 f382 	clz	r3, r2
 8000362:	2b00      	cmp	r3, #0
 8000364:	f040 8090 	bne.w	8000488 <__udivmoddi4+0x210>
 8000368:	1a8a      	subs	r2, r1, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2101      	movs	r1, #1
 8000374:	fbb2 f5f7 	udiv	r5, r2, r7
 8000378:	fb07 2015 	mls	r0, r7, r5, r2
 800037c:	0c22      	lsrs	r2, r4, #16
 800037e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000382:	fb0e f005 	mul.w	r0, lr, r5
 8000386:	4290      	cmp	r0, r2
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x124>
 800038a:	eb1c 0202 	adds.w	r2, ip, r2
 800038e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x122>
 8000394:	4290      	cmp	r0, r2
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2b8>
 800039a:	4645      	mov	r5, r8
 800039c:	1a12      	subs	r2, r2, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003a4:	fb07 2210 	mls	r2, r7, r0, r2
 80003a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x14e>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x14c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2c2>
 80003c4:	4610      	mov	r0, r2
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ce:	e79f      	b.n	8000310 <__udivmoddi4+0x98>
 80003d0:	f1c1 0720 	rsb	r7, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa05 f401 	lsl.w	r4, r5, r1
 80003e2:	fa20 f307 	lsr.w	r3, r0, r7
 80003e6:	40fd      	lsrs	r5, r7
 80003e8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ec:	4323      	orrs	r3, r4
 80003ee:	fbb5 f8f9 	udiv	r8, r5, r9
 80003f2:	fa1f fe8c 	uxth.w	lr, ip
 80003f6:	fb09 5518 	mls	r5, r9, r8, r5
 80003fa:	0c1c      	lsrs	r4, r3, #16
 80003fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000400:	fb08 f50e 	mul.w	r5, r8, lr
 8000404:	42a5      	cmp	r5, r4
 8000406:	fa02 f201 	lsl.w	r2, r2, r1
 800040a:	fa00 f001 	lsl.w	r0, r0, r1
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b0>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2b4>
 800041c:	42a5      	cmp	r5, r4
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2b4>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4464      	add	r4, ip
 8000428:	1b64      	subs	r4, r4, r5
 800042a:	b29d      	uxth	r5, r3
 800042c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000430:	fb09 4413 	mls	r4, r9, r3, r4
 8000434:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000438:	fb03 fe0e 	mul.w	lr, r3, lr
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1da>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f103 35ff 	add.w	r5, r3, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2ac>
 800044a:	45a6      	cmp	lr, r4
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2ac>
 800044e:	3b02      	subs	r3, #2
 8000450:	4464      	add	r4, ip
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fba3 9502 	umull	r9, r5, r3, r2
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	42ac      	cmp	r4, r5
 8000460:	46c8      	mov	r8, r9
 8000462:	46ae      	mov	lr, r5
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x29c>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x298>
 8000468:	b156      	cbz	r6, 8000480 <__udivmoddi4+0x208>
 800046a:	ebb0 0208 	subs.w	r2, r0, r8
 800046e:	eb64 040e 	sbc.w	r4, r4, lr
 8000472:	fa04 f707 	lsl.w	r7, r4, r7
 8000476:	40ca      	lsrs	r2, r1
 8000478:	40cc      	lsrs	r4, r1
 800047a:	4317      	orrs	r7, r2
 800047c:	e9c6 7400 	strd	r7, r4, [r6]
 8000480:	4618      	mov	r0, r3
 8000482:	2100      	movs	r1, #0
 8000484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000488:	f1c3 0120 	rsb	r1, r3, #32
 800048c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000490:	fa20 f201 	lsr.w	r2, r0, r1
 8000494:	fa25 f101 	lsr.w	r1, r5, r1
 8000498:	409d      	lsls	r5, r3
 800049a:	432a      	orrs	r2, r5
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a8:	fb07 1510 	mls	r5, r7, r0, r1
 80004ac:	0c11      	lsrs	r1, r2, #16
 80004ae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004b2:	fb00 f50e 	mul.w	r5, r0, lr
 80004b6:	428d      	cmp	r5, r1
 80004b8:	fa04 f403 	lsl.w	r4, r4, r3
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x258>
 80004be:	eb1c 0101 	adds.w	r1, ip, r1
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1b49      	subs	r1, r1, r5
 80004d2:	b292      	uxth	r2, r2
 80004d4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d8:	fb07 1115 	mls	r1, r7, r5, r1
 80004dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e0:	fb05 f10e 	mul.w	r1, r5, lr
 80004e4:	4291      	cmp	r1, r2
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x282>
 80004e8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ec:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 80004f2:	4291      	cmp	r1, r2
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2a8>
 80004f6:	3d02      	subs	r5, #2
 80004f8:	4462      	add	r2, ip
 80004fa:	1a52      	subs	r2, r2, r1
 80004fc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0xfc>
 8000502:	4631      	mov	r1, r6
 8000504:	4630      	mov	r0, r6
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xa2>
 8000508:	4639      	mov	r1, r7
 800050a:	e6e6      	b.n	80002da <__udivmoddi4+0x62>
 800050c:	4610      	mov	r0, r2
 800050e:	e6fb      	b.n	8000308 <__udivmoddi4+0x90>
 8000510:	4548      	cmp	r0, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f0>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb65 0e0c 	sbc.w	lr, r5, ip
 800051c:	3b01      	subs	r3, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f0>
 8000520:	4645      	mov	r5, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x282>
 8000524:	462b      	mov	r3, r5
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1da>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x258>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b0>
 8000530:	3d02      	subs	r5, #2
 8000532:	4462      	add	r2, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x124>
 8000536:	4608      	mov	r0, r1
 8000538:	e70a      	b.n	8000350 <__udivmoddi4+0xd8>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x14e>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <BAMOCAN_ID>:
//----------------------------------------------------------------------

// Ermittle Register nach Empfang Bamocar CAN-ID
//----------------------------------------------------------------------
void BAMOCAN_ID(uint8_t* data, uint8_t dlc)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	70fb      	strb	r3, [r7, #3]
	uint8_t Reg = data[0];
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	733b      	strb	r3, [r7, #12]
	uint16_t speed = 0, strom;
 8000556:	2300      	movs	r3, #0
 8000558:	817b      	strh	r3, [r7, #10]

	// Waehlen welches Register gesendet wurde
	switch (Reg)
 800055a:	7b3b      	ldrb	r3, [r7, #12]
 800055c:	2bd8      	cmp	r3, #216	; 0xd8
 800055e:	f000 80be 	beq.w	80006de <BAMOCAN_ID+0x19a>
 8000562:	2bd8      	cmp	r3, #216	; 0xd8
 8000564:	f300 8100 	bgt.w	8000768 <BAMOCAN_ID+0x224>
 8000568:	2ba8      	cmp	r3, #168	; 0xa8
 800056a:	d012      	beq.n	8000592 <BAMOCAN_ID+0x4e>
 800056c:	2ba8      	cmp	r3, #168	; 0xa8
 800056e:	f300 80fb 	bgt.w	8000768 <BAMOCAN_ID+0x224>
 8000572:	2b8f      	cmp	r3, #143	; 0x8f
 8000574:	d077      	beq.n	8000666 <BAMOCAN_ID+0x122>
 8000576:	2b8f      	cmp	r3, #143	; 0x8f
 8000578:	f300 80f6 	bgt.w	8000768 <BAMOCAN_ID+0x224>
 800057c:	2b5f      	cmp	r3, #95	; 0x5f
 800057e:	d025      	beq.n	80005cc <BAMOCAN_ID+0x88>
 8000580:	2b5f      	cmp	r3, #95	; 0x5f
 8000582:	f300 80f1 	bgt.w	8000768 <BAMOCAN_ID+0x224>
 8000586:	2b1b      	cmp	r3, #27
 8000588:	f000 80d4 	beq.w	8000734 <BAMOCAN_ID+0x1f0>
 800058c:	2b40      	cmp	r3, #64	; 0x40
 800058e:	d037      	beq.n	8000600 <BAMOCAN_ID+0xbc>
 8000590:	e0ea      	b.n	8000768 <BAMOCAN_ID+0x224>
	{
		// Drehzahl vom Bamocar bekommen
		case BAMOCAR_REG_N_ACT_FILTER:
			speed = ((data[2]<<8) + data[1]);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3302      	adds	r3, #2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	b29b      	uxth	r3, r3
 800059a:	021b      	lsls	r3, r3, #8
 800059c:	b29a      	uxth	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3301      	adds	r3, #1
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	4413      	add	r3, r2
 80005a8:	817b      	strh	r3, [r7, #10]
			motor280.Drehzahl = speed;
 80005aa:	4a74      	ldr	r2, [pc, #464]	; (800077c <BAMOCAN_ID+0x238>)
 80005ac:	897b      	ldrh	r3, [r7, #10]
 80005ae:	8053      	strh	r3, [r2, #2]
// Uart Ausgabe
#ifdef DEBUG_BAMOCAR
			uartTransmit("Motordrehzahl\n", 14);
 80005b0:	210e      	movs	r1, #14
 80005b2:	4873      	ldr	r0, [pc, #460]	; (8000780 <BAMOCAN_ID+0x23c>)
 80005b4:	f000 f900 	bl	80007b8 <uartTransmit>
			uartTransmitNumber(speed, 10);
 80005b8:	897b      	ldrh	r3, [r7, #10]
 80005ba:	210a      	movs	r1, #10
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 f90f 	bl	80007e0 <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005c2:	2101      	movs	r1, #1
 80005c4:	486f      	ldr	r0, [pc, #444]	; (8000784 <BAMOCAN_ID+0x240>)
 80005c6:	f000 f8f7 	bl	80007b8 <uartTransmit>
#endif
			break;
 80005ca:	e0d2      	b.n	8000772 <BAMOCAN_ID+0x22e>

		// Stromwert von Bamocar bekommen
		case BAMOCAR_REG_I_ACT_FILTER:
			strom = ((data[2]<<8) + data[1]);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3302      	adds	r3, #2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	021b      	lsls	r3, r3, #8
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	3301      	adds	r3, #1
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	b29b      	uxth	r3, r3
 80005e0:	4413      	add	r3, r2
 80005e2:	813b      	strh	r3, [r7, #8]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Motorstrom\n", 11);
 80005e4:	210b      	movs	r1, #11
 80005e6:	4868      	ldr	r0, [pc, #416]	; (8000788 <BAMOCAN_ID+0x244>)
 80005e8:	f000 f8e6 	bl	80007b8 <uartTransmit>
			uartTransmitNumber(strom, 10);
 80005ec:	893b      	ldrh	r3, [r7, #8]
 80005ee:	210a      	movs	r1, #10
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 f8f5 	bl	80007e0 <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005f6:	2101      	movs	r1, #1
 80005f8:	4862      	ldr	r0, [pc, #392]	; (8000784 <BAMOCAN_ID+0x240>)
 80005fa:	f000 f8dd 	bl	80007b8 <uartTransmit>
#endif

			break;
 80005fe:	e0b8      	b.n	8000772 <BAMOCAN_ID+0x22e>

		// Statusregister von Bamocar bekommen
		case BAMOCAR_REG_STATUS:
			bamocar_stat.status1 = ((data[4] << 24) + (data[3] << 16) + (data[2] << 8) + data[1]);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3304      	adds	r3, #4
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	061a      	lsls	r2, r3, #24
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3303      	adds	r3, #3
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	041b      	lsls	r3, r3, #16
 8000610:	441a      	add	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	3302      	adds	r3, #2
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	021b      	lsls	r3, r3, #8
 800061a:	4413      	add	r3, r2
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	3201      	adds	r2, #1
 8000620:	7812      	ldrb	r2, [r2, #0]
 8000622:	4413      	add	r3, r2
 8000624:	461a      	mov	r2, r3
 8000626:	4b59      	ldr	r3, [pc, #356]	; (800078c <BAMOCAN_ID+0x248>)
 8000628:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Status\n", 15);
 800062a:	210f      	movs	r1, #15
 800062c:	4858      	ldr	r0, [pc, #352]	; (8000790 <BAMOCAN_ID+0x24c>)
 800062e:	f000 f8c3 	bl	80007b8 <uartTransmit>
			for (uint8_t i = 4; i > 0; i--)
 8000632:	2304      	movs	r3, #4
 8000634:	73fb      	strb	r3, [r7, #15]
 8000636:	e00e      	b.n	8000656 <BAMOCAN_ID+0x112>
			{
				uartTransmitNumber(bamocar_stat.status[i-1], 16);
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	3b01      	subs	r3, #1
 800063c:	4a53      	ldr	r2, [pc, #332]	; (800078c <BAMOCAN_ID+0x248>)
 800063e:	5cd3      	ldrb	r3, [r2, r3]
 8000640:	2110      	movs	r1, #16
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f8cc 	bl	80007e0 <uartTransmitNumber>
				uartTransmit(" ", 1);
 8000648:	2101      	movs	r1, #1
 800064a:	4852      	ldr	r0, [pc, #328]	; (8000794 <BAMOCAN_ID+0x250>)
 800064c:	f000 f8b4 	bl	80007b8 <uartTransmit>
			for (uint8_t i = 4; i > 0; i--)
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	3b01      	subs	r3, #1
 8000654:	73fb      	strb	r3, [r7, #15]
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1ed      	bne.n	8000638 <BAMOCAN_ID+0xf4>
			}
			uartTransmit("\n", 1);
 800065c:	2101      	movs	r1, #1
 800065e:	4849      	ldr	r0, [pc, #292]	; (8000784 <BAMOCAN_ID+0x240>)
 8000660:	f000 f8aa 	bl	80007b8 <uartTransmit>
#endif

			break;
 8000664:	e085      	b.n	8000772 <BAMOCAN_ID+0x22e>

		// Errorregister von Bamocar bekommen
		case BAMOCAR_REG_ERROR:
			bamocar_error.error1 = ((data[2] << 8) + data[1]);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3302      	adds	r3, #2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b29b      	uxth	r3, r3
 800066e:	021b      	lsls	r3, r3, #8
 8000670:	b29a      	uxth	r2, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	3301      	adds	r3, #1
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	b29b      	uxth	r3, r3
 800067a:	4413      	add	r3, r2
 800067c:	b29a      	uxth	r2, r3
 800067e:	4b46      	ldr	r3, [pc, #280]	; (8000798 <BAMOCAN_ID+0x254>)
 8000680:	801a      	strh	r2, [r3, #0]
			bamocar_warnung.warnung1 = ((data[4] << 8) + data[3]);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	3304      	adds	r3, #4
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b29b      	uxth	r3, r3
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	b29a      	uxth	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	3303      	adds	r3, #3
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	b29b      	uxth	r3, r3
 8000696:	4413      	add	r3, r2
 8000698:	b29a      	uxth	r2, r3
 800069a:	4b40      	ldr	r3, [pc, #256]	; (800079c <BAMOCAN_ID+0x258>)
 800069c:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Error\n", 14);
 800069e:	210e      	movs	r1, #14
 80006a0:	483f      	ldr	r0, [pc, #252]	; (80007a0 <BAMOCAN_ID+0x25c>)
 80006a2:	f000 f889 	bl	80007b8 <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006a6:	2300      	movs	r3, #0
 80006a8:	73bb      	strb	r3, [r7, #14]
 80006aa:	e010      	b.n	80006ce <BAMOCAN_ID+0x18a>
			{
				uartTransmitNumber(data[1+i], 16);
 80006ac:	7bbb      	ldrb	r3, [r7, #14]
 80006ae:	3301      	adds	r3, #1
 80006b0:	461a      	mov	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4413      	add	r3, r2
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2110      	movs	r1, #16
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f890 	bl	80007e0 <uartTransmitNumber>
				uartTransmit(" ", 1);
 80006c0:	2101      	movs	r1, #1
 80006c2:	4834      	ldr	r0, [pc, #208]	; (8000794 <BAMOCAN_ID+0x250>)
 80006c4:	f000 f878 	bl	80007b8 <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006c8:	7bbb      	ldrb	r3, [r7, #14]
 80006ca:	3301      	adds	r3, #1
 80006cc:	73bb      	strb	r3, [r7, #14]
 80006ce:	7bbb      	ldrb	r3, [r7, #14]
 80006d0:	2b03      	cmp	r3, #3
 80006d2:	d9eb      	bls.n	80006ac <BAMOCAN_ID+0x168>
			}
			uartTransmit("\n", 1);
 80006d4:	2101      	movs	r1, #1
 80006d6:	482b      	ldr	r0, [pc, #172]	; (8000784 <BAMOCAN_ID+0x240>)
 80006d8:	f000 f86e 	bl	80007b8 <uartTransmit>
#endif

			break;
 80006dc:	e049      	b.n	8000772 <BAMOCAN_ID+0x22e>

		// Status IO Register von Bamocar bekommen
		case BAMOCAR_REG_STATUS_IO:
			bamocar_IOstatus.status1 = ((data[2] << 8) + data[1]);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	3302      	adds	r3, #2
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	021b      	lsls	r3, r3, #8
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	3301      	adds	r3, #1
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	4413      	add	r3, r2
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <BAMOCAN_ID+0x260>)
 80006f8:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar IO Status\n", 18);
 80006fa:	2112      	movs	r1, #18
 80006fc:	482a      	ldr	r0, [pc, #168]	; (80007a8 <BAMOCAN_ID+0x264>)
 80006fe:	f000 f85b 	bl	80007b8 <uartTransmit>
			for (uint8_t i = 0; i < 2; i++)
 8000702:	2300      	movs	r3, #0
 8000704:	737b      	strb	r3, [r7, #13]
 8000706:	e00d      	b.n	8000724 <BAMOCAN_ID+0x1e0>
			{
				uartTransmitNumber(bamocar_IOstatus.status[i], 16);
 8000708:	7b7b      	ldrb	r3, [r7, #13]
 800070a:	4a26      	ldr	r2, [pc, #152]	; (80007a4 <BAMOCAN_ID+0x260>)
 800070c:	5cd3      	ldrb	r3, [r2, r3]
 800070e:	2110      	movs	r1, #16
 8000710:	4618      	mov	r0, r3
 8000712:	f000 f865 	bl	80007e0 <uartTransmitNumber>
				uartTransmit(" ", 1);
 8000716:	2101      	movs	r1, #1
 8000718:	481e      	ldr	r0, [pc, #120]	; (8000794 <BAMOCAN_ID+0x250>)
 800071a:	f000 f84d 	bl	80007b8 <uartTransmit>
			for (uint8_t i = 0; i < 2; i++)
 800071e:	7b7b      	ldrb	r3, [r7, #13]
 8000720:	3301      	adds	r3, #1
 8000722:	737b      	strb	r3, [r7, #13]
 8000724:	7b7b      	ldrb	r3, [r7, #13]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d9ee      	bls.n	8000708 <BAMOCAN_ID+0x1c4>
			}
			uartTransmit("\n", 1);
 800072a:	2101      	movs	r1, #1
 800072c:	4815      	ldr	r0, [pc, #84]	; (8000784 <BAMOCAN_ID+0x240>)
 800072e:	f000 f843 	bl	80007b8 <uartTransmit>
#endif

			break;
 8000732:	e01e      	b.n	8000772 <BAMOCAN_ID+0x22e>

		// Firmware von Bamocar ausgelesen
		case BAMOCAR_REG_FIRMWARE:
			bamocar_data.data = ((data[2]<<8) + data[1]);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3302      	adds	r3, #2
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	021b      	lsls	r3, r3, #8
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	3201      	adds	r2, #1
 8000740:	7812      	ldrb	r2, [r2, #0]
 8000742:	4413      	add	r3, r2
 8000744:	461a      	mov	r2, r3
 8000746:	4b19      	ldr	r3, [pc, #100]	; (80007ac <BAMOCAN_ID+0x268>)
 8000748:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Firmware\n", 9);
 800074a:	2109      	movs	r1, #9
 800074c:	4818      	ldr	r0, [pc, #96]	; (80007b0 <BAMOCAN_ID+0x26c>)
 800074e:	f000 f833 	bl	80007b8 <uartTransmit>
			uartTransmitNumber(bamocar_data.data, 16);
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <BAMOCAN_ID+0x268>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2110      	movs	r1, #16
 8000758:	4618      	mov	r0, r3
 800075a:	f000 f841 	bl	80007e0 <uartTransmitNumber>
			uartTransmit("\n", 1);
 800075e:	2101      	movs	r1, #1
 8000760:	4808      	ldr	r0, [pc, #32]	; (8000784 <BAMOCAN_ID+0x240>)
 8000762:	f000 f829 	bl	80007b8 <uartTransmit>
#endif

			break;
 8000766:	e004      	b.n	8000772 <BAMOCAN_ID+0x22e>

		// Register fuer Bamocar nicht definiert, Fehler
		default:
			uartTransmit("Bamocar Register nicht definiert\n", 33);
 8000768:	2121      	movs	r1, #33	; 0x21
 800076a:	4812      	ldr	r0, [pc, #72]	; (80007b4 <BAMOCAN_ID+0x270>)
 800076c:	f000 f824 	bl	80007b8 <uartTransmit>
			break;
 8000770:	bf00      	nop
	}
}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	2000015c 	.word	0x2000015c
 8000780:	08007f90 	.word	0x08007f90
 8000784:	08007fa0 	.word	0x08007fa0
 8000788:	08007fa4 	.word	0x08007fa4
 800078c:	2000002c 	.word	0x2000002c
 8000790:	08007fb0 	.word	0x08007fb0
 8000794:	08007fc0 	.word	0x08007fc0
 8000798:	20000030 	.word	0x20000030
 800079c:	20000034 	.word	0x20000034
 80007a0:	08007fc4 	.word	0x08007fc4
 80007a4:	20000028 	.word	0x20000028
 80007a8:	08007fd4 	.word	0x08007fd4
 80007ac:	20000038 	.word	0x20000038
 80007b0:	08007fe8 	.word	0x08007fe8
 80007b4:	08007ff4 	.word	0x08007ff4

080007b8 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	4803      	ldr	r0, [pc, #12]	; (80007dc <uartTransmit+0x24>)
 80007ce:	f006 f89f 	bl	8006910 <HAL_UART_Transmit>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200001b0 	.word	0x200001b0

080007e0 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 80007ea:	683a      	ldr	r2, [r7, #0]
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	4619      	mov	r1, r3
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f007 fb92 	bl	8007f1c <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fd1b 	bl	8000238 <strlen>
 8000802:	4603      	mov	r3, r0
 8000804:	b29a      	uxth	r2, r3
 8000806:	f107 010c 	add.w	r1, r7, #12
 800080a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080e:	4803      	ldr	r0, [pc, #12]	; (800081c <uartTransmitNumber+0x3c>)
 8000810:	f006 f87e 	bl	8006910 <HAL_UART_Transmit>
}
 8000814:	bf00      	nop
 8000816:	3718      	adds	r7, #24
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200001b0 	.word	0x200001b0

08000820 <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 8000826:	2114      	movs	r1, #20
 8000828:	483d      	ldr	r0, [pc, #244]	; (8000920 <collectHardwareInfo+0x100>)
 800082a:	f7ff ffc5 	bl	80007b8 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 800082e:	f002 fd37 	bl	80032a0 <HAL_GetDEVID>
 8000832:	4603      	mov	r3, r0
 8000834:	210a      	movs	r1, #10
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ffd2 	bl	80007e0 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 800083c:	2116      	movs	r1, #22
 800083e:	4839      	ldr	r0, [pc, #228]	; (8000924 <collectHardwareInfo+0x104>)
 8000840:	f7ff ffba 	bl	80007b8 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 8000844:	f002 fd20 	bl	8003288 <HAL_GetREVID>
 8000848:	4603      	mov	r3, r0
 800084a:	f242 0201 	movw	r2, #8193	; 0x2001
 800084e:	4293      	cmp	r3, r2
 8000850:	d016      	beq.n	8000880 <collectHardwareInfo+0x60>
 8000852:	f242 0201 	movw	r2, #8193	; 0x2001
 8000856:	4293      	cmp	r3, r2
 8000858:	d817      	bhi.n	800088a <collectHardwareInfo+0x6a>
 800085a:	f241 0201 	movw	r2, #4097	; 0x1001
 800085e:	4293      	cmp	r3, r2
 8000860:	d004      	beq.n	800086c <collectHardwareInfo+0x4c>
 8000862:	f241 0203 	movw	r2, #4099	; 0x1003
 8000866:	4293      	cmp	r3, r2
 8000868:	d005      	beq.n	8000876 <collectHardwareInfo+0x56>
 800086a:	e00e      	b.n	800088a <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 800086c:	2101      	movs	r1, #1
 800086e:	482e      	ldr	r0, [pc, #184]	; (8000928 <collectHardwareInfo+0x108>)
 8000870:	f7ff ffa2 	bl	80007b8 <uartTransmit>
			break;
 8000874:	e011      	b.n	800089a <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 8000876:	2101      	movs	r1, #1
 8000878:	482c      	ldr	r0, [pc, #176]	; (800092c <collectHardwareInfo+0x10c>)
 800087a:	f7ff ff9d 	bl	80007b8 <uartTransmit>
			break;
 800087e:	e00c      	b.n	800089a <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000880:	2101      	movs	r1, #1
 8000882:	482b      	ldr	r0, [pc, #172]	; (8000930 <collectHardwareInfo+0x110>)
 8000884:	f7ff ff98 	bl	80007b8 <uartTransmit>
			break;
 8000888:	e007      	b.n	800089a <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 800088a:	f002 fcfd 	bl	8003288 <HAL_GetREVID>
 800088e:	4603      	mov	r3, r0
 8000890:	210a      	movs	r1, #10
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ffa4 	bl	80007e0 <uartTransmitNumber>
			break;
 8000898:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 800089a:	2114      	movs	r1, #20
 800089c:	4825      	ldr	r0, [pc, #148]	; (8000934 <collectHardwareInfo+0x114>)
 800089e:	f7ff ff8b 	bl	80007b8 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 80008a2:	f004 ff61 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 80008a6:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a23      	ldr	r2, [pc, #140]	; (8000938 <collectHardwareInfo+0x118>)
 80008ac:	fba2 2303 	umull	r2, r3, r2, r3
 80008b0:	0c9b      	lsrs	r3, r3, #18
 80008b2:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 80008b4:	210a      	movs	r1, #10
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff ff92 	bl	80007e0 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80008bc:	2104      	movs	r1, #4
 80008be:	481f      	ldr	r0, [pc, #124]	; (800093c <collectHardwareInfo+0x11c>)
 80008c0:	f7ff ff7a 	bl	80007b8 <uartTransmit>


	uartTransmit("\n", 1);
 80008c4:	2101      	movs	r1, #1
 80008c6:	481e      	ldr	r0, [pc, #120]	; (8000940 <collectHardwareInfo+0x120>)
 80008c8:	f7ff ff76 	bl	80007b8 <uartTransmit>
	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80008cc:	2110      	movs	r1, #16
 80008ce:	481d      	ldr	r0, [pc, #116]	; (8000944 <collectHardwareInfo+0x124>)
 80008d0:	f7ff ff72 	bl	80007b8 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 80008d4:	f002 fcf2 	bl	80032bc <HAL_GetUIDw0>
 80008d8:	4603      	mov	r3, r0
 80008da:	2110      	movs	r1, #16
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff7f 	bl	80007e0 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80008e2:	2101      	movs	r1, #1
 80008e4:	4818      	ldr	r0, [pc, #96]	; (8000948 <collectHardwareInfo+0x128>)
 80008e6:	f7ff ff67 	bl	80007b8 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 80008ea:	f002 fcf3 	bl	80032d4 <HAL_GetUIDw1>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2110      	movs	r1, #16
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff74 	bl	80007e0 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80008f8:	2101      	movs	r1, #1
 80008fa:	4813      	ldr	r0, [pc, #76]	; (8000948 <collectHardwareInfo+0x128>)
 80008fc:	f7ff ff5c 	bl	80007b8 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000900:	f002 fcf4 	bl	80032ec <HAL_GetUIDw2>
 8000904:	4603      	mov	r3, r0
 8000906:	2110      	movs	r1, #16
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff69 	bl	80007e0 <uartTransmitNumber>

	uartTransmit("\n", 1);
 800090e:	2101      	movs	r1, #1
 8000910:	480b      	ldr	r0, [pc, #44]	; (8000940 <collectHardwareInfo+0x120>)
 8000912:	f7ff ff51 	bl	80007b8 <uartTransmit>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	08008070 	.word	0x08008070
 8000924:	08008084 	.word	0x08008084
 8000928:	0800809c 	.word	0x0800809c
 800092c:	080080a0 	.word	0x080080a0
 8000930:	080080a4 	.word	0x080080a4
 8000934:	080080a8 	.word	0x080080a8
 8000938:	431bde83 	.word	0x431bde83
 800093c:	080080bc 	.word	0x080080bc
 8000940:	080080c4 	.word	0x080080c4
 8000944:	080080c8 	.word	0x080080c8
 8000948:	080080d8 	.word	0x080080d8

0800094c <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 8000950:	2110      	movs	r1, #16
 8000952:	4826      	ldr	r0, [pc, #152]	; (80009ec <collectSoftwareInfo+0xa0>)
 8000954:	f7ff ff30 	bl	80007b8 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000958:	2108      	movs	r1, #8
 800095a:	4825      	ldr	r0, [pc, #148]	; (80009f0 <collectSoftwareInfo+0xa4>)
 800095c:	f7ff ff2c 	bl	80007b8 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000960:	2110      	movs	r1, #16
 8000962:	4824      	ldr	r0, [pc, #144]	; (80009f4 <collectSoftwareInfo+0xa8>)
 8000964:	f7ff ff28 	bl	80007b8 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000968:	2108      	movs	r1, #8
 800096a:	4823      	ldr	r0, [pc, #140]	; (80009f8 <collectSoftwareInfo+0xac>)
 800096c:	f7ff ff24 	bl	80007b8 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000970:	210e      	movs	r1, #14
 8000972:	4822      	ldr	r0, [pc, #136]	; (80009fc <collectSoftwareInfo+0xb0>)
 8000974:	f7ff ff20 	bl	80007b8 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 8000978:	2129      	movs	r1, #41	; 0x29
 800097a:	4821      	ldr	r0, [pc, #132]	; (8000a00 <collectSoftwareInfo+0xb4>)
 800097c:	f7ff ff1c 	bl	80007b8 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000980:	2101      	movs	r1, #1
 8000982:	4820      	ldr	r0, [pc, #128]	; (8000a04 <collectSoftwareInfo+0xb8>)
 8000984:	f7ff ff18 	bl	80007b8 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000988:	2115      	movs	r1, #21
 800098a:	481f      	ldr	r0, [pc, #124]	; (8000a08 <collectSoftwareInfo+0xbc>)
 800098c:	f7ff ff14 	bl	80007b8 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 8000990:	210e      	movs	r1, #14
 8000992:	481e      	ldr	r0, [pc, #120]	; (8000a0c <collectSoftwareInfo+0xc0>)
 8000994:	f7ff ff10 	bl	80007b8 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000998:	2114      	movs	r1, #20
 800099a:	481d      	ldr	r0, [pc, #116]	; (8000a10 <collectSoftwareInfo+0xc4>)
 800099c:	f7ff ff0c 	bl	80007b8 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 80009a0:	2129      	movs	r1, #41	; 0x29
 80009a2:	481c      	ldr	r0, [pc, #112]	; (8000a14 <collectSoftwareInfo+0xc8>)
 80009a4:	f7ff ff08 	bl	80007b8 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 80009a8:	2115      	movs	r1, #21
 80009aa:	481b      	ldr	r0, [pc, #108]	; (8000a18 <collectSoftwareInfo+0xcc>)
 80009ac:	f7ff ff04 	bl	80007b8 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 80009b0:	2115      	movs	r1, #21
 80009b2:	481a      	ldr	r0, [pc, #104]	; (8000a1c <collectSoftwareInfo+0xd0>)
 80009b4:	f7ff ff00 	bl	80007b8 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80009b8:	2101      	movs	r1, #1
 80009ba:	4812      	ldr	r0, [pc, #72]	; (8000a04 <collectSoftwareInfo+0xb8>)
 80009bc:	f7ff fefc 	bl	80007b8 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80009c0:	2110      	movs	r1, #16
 80009c2:	4817      	ldr	r0, [pc, #92]	; (8000a20 <collectSoftwareInfo+0xd4>)
 80009c4:	f7ff fef8 	bl	80007b8 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 80009c8:	210b      	movs	r1, #11
 80009ca:	4816      	ldr	r0, [pc, #88]	; (8000a24 <collectSoftwareInfo+0xd8>)
 80009cc:	f7ff fef4 	bl	80007b8 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80009d0:	2110      	movs	r1, #16
 80009d2:	4815      	ldr	r0, [pc, #84]	; (8000a28 <collectSoftwareInfo+0xdc>)
 80009d4:	f7ff fef0 	bl	80007b8 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 80009d8:	2109      	movs	r1, #9
 80009da:	4814      	ldr	r0, [pc, #80]	; (8000a2c <collectSoftwareInfo+0xe0>)
 80009dc:	f7ff feec 	bl	80007b8 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80009e0:	2101      	movs	r1, #1
 80009e2:	4808      	ldr	r0, [pc, #32]	; (8000a04 <collectSoftwareInfo+0xb8>)
 80009e4:	f7ff fee8 	bl	80007b8 <uartTransmit>
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	080080dc 	.word	0x080080dc
 80009f0:	080080ec 	.word	0x080080ec
 80009f4:	080080f4 	.word	0x080080f4
 80009f8:	08008104 	.word	0x08008104
 80009fc:	0800810c 	.word	0x0800810c
 8000a00:	0800811c 	.word	0x0800811c
 8000a04:	080080c4 	.word	0x080080c4
 8000a08:	08008148 	.word	0x08008148
 8000a0c:	08008160 	.word	0x08008160
 8000a10:	08008170 	.word	0x08008170
 8000a14:	08008184 	.word	0x08008184
 8000a18:	080081b0 	.word	0x080081b0
 8000a1c:	080081c8 	.word	0x080081c8
 8000a20:	080081e0 	.word	0x080081e0
 8000a24:	080081f0 	.word	0x080081f0
 8000a28:	080081fc 	.word	0x080081fc
 8000a2c:	0800820c 	.word	0x0800820c

08000a30 <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8000a34:	2113      	movs	r1, #19
 8000a36:	4824      	ldr	r0, [pc, #144]	; (8000ac8 <collectMiddlewareInfo+0x98>)
 8000a38:	f7ff febe 	bl	80007b8 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8000a3c:	210a      	movs	r1, #10
 8000a3e:	2005      	movs	r0, #5
 8000a40:	f7ff fece 	bl	80007e0 <uartTransmitNumber>
	uartTransmit(".", 1);
 8000a44:	2101      	movs	r1, #1
 8000a46:	4821      	ldr	r0, [pc, #132]	; (8000acc <collectMiddlewareInfo+0x9c>)
 8000a48:	f7ff feb6 	bl	80007b8 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8000a4c:	210a      	movs	r1, #10
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f7ff fec6 	bl	80007e0 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8000a54:	2111      	movs	r1, #17
 8000a56:	481e      	ldr	r0, [pc, #120]	; (8000ad0 <collectMiddlewareInfo+0xa0>)
 8000a58:	f7ff feae 	bl	80007b8 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8000a5c:	f002 fc0a 	bl	8003274 <HAL_GetHalVersion>
 8000a60:	4603      	mov	r3, r0
 8000a62:	0e1b      	lsrs	r3, r3, #24
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	210a      	movs	r1, #10
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff feb9 	bl	80007e0 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000a6e:	2101      	movs	r1, #1
 8000a70:	4816      	ldr	r0, [pc, #88]	; (8000acc <collectMiddlewareInfo+0x9c>)
 8000a72:	f7ff fea1 	bl	80007b8 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000a76:	f002 fbfd 	bl	8003274 <HAL_GetHalVersion>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	0c1b      	lsrs	r3, r3, #16
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	210a      	movs	r1, #10
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff feac 	bl	80007e0 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000a88:	2101      	movs	r1, #1
 8000a8a:	4810      	ldr	r0, [pc, #64]	; (8000acc <collectMiddlewareInfo+0x9c>)
 8000a8c:	f7ff fe94 	bl	80007b8 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000a90:	f002 fbf0 	bl	8003274 <HAL_GetHalVersion>
 8000a94:	4603      	mov	r3, r0
 8000a96:	0a1b      	lsrs	r3, r3, #8
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	210a      	movs	r1, #10
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fe9f 	bl	80007e0 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4809      	ldr	r0, [pc, #36]	; (8000acc <collectMiddlewareInfo+0x9c>)
 8000aa6:	f7ff fe87 	bl	80007b8 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000aaa:	f002 fbe3 	bl	8003274 <HAL_GetHalVersion>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	210a      	movs	r1, #10
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fe93 	bl	80007e0 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 8000aba:	2101      	movs	r1, #1
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <collectMiddlewareInfo+0xa4>)
 8000abe:	f7ff fe7b 	bl	80007b8 <uartTransmit>
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	08008218 	.word	0x08008218
 8000acc:	0800822c 	.word	0x0800822c
 8000ad0:	08008230 	.word	0x08008230
 8000ad4:	080080c4 	.word	0x080080c4

08000ad8 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 8000adc:	2114      	movs	r1, #20
 8000ade:	4814      	ldr	r0, [pc, #80]	; (8000b30 <collectGitcounts+0x58>)
 8000ae0:	f7ff fe6a 	bl	80007b8 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8000ae4:	2103      	movs	r1, #3
 8000ae6:	4813      	ldr	r0, [pc, #76]	; (8000b34 <collectGitcounts+0x5c>)
 8000ae8:	f7ff fe66 	bl	80007b8 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 8000aec:	2116      	movs	r1, #22
 8000aee:	4812      	ldr	r0, [pc, #72]	; (8000b38 <collectGitcounts+0x60>)
 8000af0:	f7ff fe62 	bl	80007b8 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8000af4:	2103      	movs	r1, #3
 8000af6:	4811      	ldr	r0, [pc, #68]	; (8000b3c <collectGitcounts+0x64>)
 8000af8:	f7ff fe5e 	bl	80007b8 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 8000afc:	211b      	movs	r1, #27
 8000afe:	4810      	ldr	r0, [pc, #64]	; (8000b40 <collectGitcounts+0x68>)
 8000b00:	f7ff fe5a 	bl	80007b8 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8000b04:	2103      	movs	r1, #3
 8000b06:	480f      	ldr	r0, [pc, #60]	; (8000b44 <collectGitcounts+0x6c>)
 8000b08:	f7ff fe56 	bl	80007b8 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000b0c:	2115      	movs	r1, #21
 8000b0e:	480e      	ldr	r0, [pc, #56]	; (8000b48 <collectGitcounts+0x70>)
 8000b10:	f7ff fe52 	bl	80007b8 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8000b14:	2102      	movs	r1, #2
 8000b16:	480d      	ldr	r0, [pc, #52]	; (8000b4c <collectGitcounts+0x74>)
 8000b18:	f7ff fe4e 	bl	80007b8 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000b1c:	2114      	movs	r1, #20
 8000b1e:	480c      	ldr	r0, [pc, #48]	; (8000b50 <collectGitcounts+0x78>)
 8000b20:	f7ff fe4a 	bl	80007b8 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 8000b24:	2103      	movs	r1, #3
 8000b26:	480b      	ldr	r0, [pc, #44]	; (8000b54 <collectGitcounts+0x7c>)
 8000b28:	f7ff fe46 	bl	80007b8 <uartTransmit>
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	08008244 	.word	0x08008244
 8000b34:	08008258 	.word	0x08008258
 8000b38:	0800825c 	.word	0x0800825c
 8000b3c:	08008274 	.word	0x08008274
 8000b40:	08008278 	.word	0x08008278
 8000b44:	08008294 	.word	0x08008294
 8000b48:	08008148 	.word	0x08008148
 8000b4c:	08008298 	.word	0x08008298
 8000b50:	08008170 	.word	0x08008170
 8000b54:	0800829c 	.word	0x0800829c

08000b58 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000b5c:	2111      	movs	r1, #17
 8000b5e:	480e      	ldr	r0, [pc, #56]	; (8000b98 <collectSystemInfo+0x40>)
 8000b60:	f7ff fe2a 	bl	80007b8 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000b64:	f7ff fe5c 	bl	8000820 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000b68:	2111      	movs	r1, #17
 8000b6a:	480c      	ldr	r0, [pc, #48]	; (8000b9c <collectSystemInfo+0x44>)
 8000b6c:	f7ff fe24 	bl	80007b8 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8000b70:	f7ff feec 	bl	800094c <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000b74:	2113      	movs	r1, #19
 8000b76:	480a      	ldr	r0, [pc, #40]	; (8000ba0 <collectSystemInfo+0x48>)
 8000b78:	f7ff fe1e 	bl	80007b8 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000b7c:	f7ff ff58 	bl	8000a30 <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8000b80:	2113      	movs	r1, #19
 8000b82:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <collectSystemInfo+0x4c>)
 8000b84:	f7ff fe18 	bl	80007b8 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8000b88:	f7ff ffa6 	bl	8000ad8 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 8000b8c:	2103      	movs	r1, #3
 8000b8e:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <collectSystemInfo+0x50>)
 8000b90:	f7ff fe12 	bl	80007b8 <uartTransmit>
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	080082a0 	.word	0x080082a0
 8000b9c:	080082b4 	.word	0x080082b4
 8000ba0:	080082c8 	.word	0x080082c8
 8000ba4:	080082dc 	.word	0x080082dc
 8000ba8:	080082f0 	.word	0x080082f0

08000bac <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000bb6:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <readResetSource+0xa0>)
 8000bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d002      	beq.n	8000bc8 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000bc8:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <readResetSource+0xa0>)
 8000bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d002      	beq.n	8000bda <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	3302      	adds	r3, #2
 8000bd8:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8000bda:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <readResetSource+0xa0>)
 8000bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	da02      	bge.n	8000be8 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	3304      	adds	r3, #4
 8000be6:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000be8:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <readResetSource+0xa0>)
 8000bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d002      	beq.n	8000bfa <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	3308      	adds	r3, #8
 8000bf8:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8000bfa:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <readResetSource+0xa0>)
 8000bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d002      	beq.n	8000c0c <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	3310      	adds	r3, #16
 8000c0a:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <readResetSource+0xa0>)
 8000c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d002      	beq.n	8000c1e <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	3320      	adds	r3, #32
 8000c1c:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <readResetSource+0xa0>)
 8000c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d002      	beq.n	8000c30 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	3340      	adds	r3, #64	; 0x40
 8000c2e:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <readResetSource+0xa0>)
 8000c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c34:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <readResetSource+0xa0>)
 8000c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c3a:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800

08000c50 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8000c5a:	2106      	movs	r1, #6
 8000c5c:	482a      	ldr	r0, [pc, #168]	; (8000d08 <printResetSource+0xb8>)
 8000c5e:	f7ff fdab 	bl	80007b8 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d104      	bne.n	8000c72 <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8000c68:	210f      	movs	r1, #15
 8000c6a:	4828      	ldr	r0, [pc, #160]	; (8000d0c <printResetSource+0xbc>)
 8000c6c:	f7ff fda4 	bl	80007b8 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8000c70:	e046      	b.n	8000d00 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d003      	beq.n	8000c84 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000c7c:	2118      	movs	r1, #24
 8000c7e:	4824      	ldr	r0, [pc, #144]	; (8000d10 <printResetSource+0xc0>)
 8000c80:	f7ff fd9a 	bl	80007b8 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000c8e:	2116      	movs	r1, #22
 8000c90:	4820      	ldr	r0, [pc, #128]	; (8000d14 <printResetSource+0xc4>)
 8000c92:	f7ff fd91 	bl	80007b8 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d003      	beq.n	8000ca8 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8000ca0:	210a      	movs	r1, #10
 8000ca2:	481d      	ldr	r0, [pc, #116]	; (8000d18 <printResetSource+0xc8>)
 8000ca4:	f7ff fd88 	bl	80007b8 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	f003 0308 	and.w	r3, r3, #8
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8000cb2:	2110      	movs	r1, #16
 8000cb4:	4819      	ldr	r0, [pc, #100]	; (8000d1c <printResetSource+0xcc>)
 8000cb6:	f7ff fd7f 	bl	80007b8 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f003 0310 	and.w	r3, r3, #16
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d003      	beq.n	8000ccc <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000cc4:	210f      	movs	r1, #15
 8000cc6:	4816      	ldr	r0, [pc, #88]	; (8000d20 <printResetSource+0xd0>)
 8000cc8:	f7ff fd76 	bl	80007b8 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f003 0320 	and.w	r3, r3, #32
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	4812      	ldr	r0, [pc, #72]	; (8000d24 <printResetSource+0xd4>)
 8000cda:	f7ff fd6d 	bl	80007b8 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d003      	beq.n	8000cf0 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000ce8:	210a      	movs	r1, #10
 8000cea:	480f      	ldr	r0, [pc, #60]	; (8000d28 <printResetSource+0xd8>)
 8000cec:	f7ff fd64 	bl	80007b8 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	da03      	bge.n	8000d00 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000cf8:	2105      	movs	r1, #5
 8000cfa:	480c      	ldr	r0, [pc, #48]	; (8000d2c <printResetSource+0xdc>)
 8000cfc:	f7ff fd5c 	bl	80007b8 <uartTransmit>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	080082f4 	.word	0x080082f4
 8000d0c:	080082fc 	.word	0x080082fc
 8000d10:	0800830c 	.word	0x0800830c
 8000d14:	08008328 	.word	0x08008328
 8000d18:	08008340 	.word	0x08008340
 8000d1c:	0800834c 	.word	0x0800834c
 8000d20:	08008360 	.word	0x08008360
 8000d24:	08008370 	.word	0x08008370
 8000d28:	08008380 	.word	0x08008380
 8000d2c:	0800838c 	.word	0x0800838c

08000d30 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d38:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d013      	beq.n	8000d70 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d48:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d4c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d50:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d00b      	beq.n	8000d70 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d58:	e000      	b.n	8000d5c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d5a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d0f9      	beq.n	8000d5a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d66:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d70:	687b      	ldr	r3, [r7, #4]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <ADC_Gaspedal>:
//----------------------------------------------------------------------

// Gaspedal einlesen
//----------------------------------------------------------------------
uint16_t ADC_Gaspedal(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC von Gaspedal einlesen\n");
 8000d86:	4820      	ldr	r0, [pc, #128]	; (8000e08 <ADC_Gaspedal+0x88>)
 8000d88:	f000 fafe 	bl	8001388 <ITM_SendString>
#endif

	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_6;
 8000d9c:	2306      	movs	r3, #6
 8000d9e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000da0:	2301      	movs	r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000da4:	2301      	movs	r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	4619      	mov	r1, r3
 8000dac:	4817      	ldr	r0, [pc, #92]	; (8000e0c <ADC_Gaspedal+0x8c>)
 8000dae:	f002 fc87 	bl	80036c0 <HAL_ADC_ConfigChannel>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <ADC_Gaspedal+0x3c>
	{
		Error_Handler();
 8000db8:	f002 f810 	bl	8002ddc <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);
 8000dbc:	4813      	ldr	r0, [pc, #76]	; (8000e0c <ADC_Gaspedal+0x8c>)
 8000dbe:	f002 fae5 	bl	800338c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000dc2:	2164      	movs	r1, #100	; 0x64
 8000dc4:	4811      	ldr	r0, [pc, #68]	; (8000e0c <ADC_Gaspedal+0x8c>)
 8000dc6:	f002 fbe3 	bl	8003590 <HAL_ADC_PollForConversion>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d105      	bne.n	8000ddc <ADC_Gaspedal+0x5c>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000dd0:	480e      	ldr	r0, [pc, #56]	; (8000e0c <ADC_Gaspedal+0x8c>)
 8000dd2:	f002 fc68 	bl	80036a6 <HAL_ADC_GetValue>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	82fb      	strh	r3, [r7, #22]
 8000dda:	e002      	b.n	8000de2 <ADC_Gaspedal+0x62>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000ddc:	2004      	movs	r0, #4
 8000dde:	f000 fa31 	bl	8001244 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000de2:	480a      	ldr	r0, [pc, #40]	; (8000e0c <ADC_Gaspedal+0x8c>)
 8000de4:	f002 fba0 	bl	8003528 <HAL_ADC_Stop>

#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC-Wert Gaspedal:\t");
 8000de8:	4809      	ldr	r0, [pc, #36]	; (8000e10 <ADC_Gaspedal+0x90>)
 8000dea:	f000 facd 	bl	8001388 <ITM_SendString>
	ITM_SendNumber(ADC_Data);
 8000dee:	8afb      	ldrh	r3, [r7, #22]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 fad3 	bl	800139c <ITM_SendNumber>
	ITM_SendChar('\n');
 8000df6:	200a      	movs	r0, #10
 8000df8:	f7ff ff9a 	bl	8000d30 <ITM_SendChar>
#endif

	//ADC Wert zurueck geben
	return ADC_Data;
 8000dfc:	8afb      	ldrh	r3, [r7, #22]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	08008394 	.word	0x08008394
 8000e0c:	20000058 	.word	0x20000058
 8000e10:	080083b0 	.word	0x080083b0

08000e14 <ADC_Bremsdruck>:
//----------------------------------------------------------------------

// Bremsdruck einlesen
//----------------------------------------------------------------------
uint16_t ADC_Bremsdruck(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC von Bremsdruck einlesen\n");
 8000e1a:	4820      	ldr	r0, [pc, #128]	; (8000e9c <ADC_Bremsdruck+0x88>)
 8000e1c:	f000 fab4 	bl	8001388 <ITM_SendString>
#endif

	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_14;
 8000e30:	230e      	movs	r3, #14
 8000e32:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000e34:	2301      	movs	r3, #1
 8000e36:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4817      	ldr	r0, [pc, #92]	; (8000ea0 <ADC_Bremsdruck+0x8c>)
 8000e42:	f002 fc3d 	bl	80036c0 <HAL_ADC_ConfigChannel>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <ADC_Bremsdruck+0x3c>
	{
		Error_Handler();
 8000e4c:	f001 ffc6 	bl	8002ddc <Error_Handler>
	}
	
	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000e50:	4813      	ldr	r0, [pc, #76]	; (8000ea0 <ADC_Bremsdruck+0x8c>)
 8000e52:	f002 fa9b 	bl	800338c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000e56:	2164      	movs	r1, #100	; 0x64
 8000e58:	4811      	ldr	r0, [pc, #68]	; (8000ea0 <ADC_Bremsdruck+0x8c>)
 8000e5a:	f002 fb99 	bl	8003590 <HAL_ADC_PollForConversion>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d105      	bne.n	8000e70 <ADC_Bremsdruck+0x5c>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000e64:	480e      	ldr	r0, [pc, #56]	; (8000ea0 <ADC_Bremsdruck+0x8c>)
 8000e66:	f002 fc1e 	bl	80036a6 <HAL_ADC_GetValue>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	82fb      	strh	r3, [r7, #22]
 8000e6e:	e002      	b.n	8000e76 <ADC_Bremsdruck+0x62>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000e70:	2004      	movs	r0, #4
 8000e72:	f000 f9e7 	bl	8001244 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000e76:	480a      	ldr	r0, [pc, #40]	; (8000ea0 <ADC_Bremsdruck+0x8c>)
 8000e78:	f002 fb56 	bl	8003528 <HAL_ADC_Stop>

#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC-Wert Bremsdruck:\t");
 8000e7c:	4809      	ldr	r0, [pc, #36]	; (8000ea4 <ADC_Bremsdruck+0x90>)
 8000e7e:	f000 fa83 	bl	8001388 <ITM_SendString>
	ITM_SendNumber(ADC_Data);
 8000e82:	8afb      	ldrh	r3, [r7, #22]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 fa89 	bl	800139c <ITM_SendNumber>
	ITM_SendChar('\n');
 8000e8a:	200a      	movs	r0, #10
 8000e8c:	f7ff ff50 	bl	8000d30 <ITM_SendChar>
#endif

	//ADC Wert zurueck geben
	return ADC_Data;
 8000e90:	8afb      	ldrh	r3, [r7, #22]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	080083c4 	.word	0x080083c4
 8000ea0:	20000058 	.word	0x20000058
 8000ea4:	080083e4 	.word	0x080083e4

08000ea8 <ADC_KL15>:
//----------------------------------------------------------------------

// Spannung KL15 einlesen
//----------------------------------------------------------------------
uint16_t ADC_KL15 (void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_3;										// ADC Kanal einstellen
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4811      	ldr	r0, [pc, #68]	; (8000f14 <ADC_KL15+0x6c>)
 8000ed0:	f002 fbf6 	bl	80036c0 <HAL_ADC_ConfigChannel>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <ADC_KL15+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000eda:	f001 ff7f 	bl	8002ddc <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000ede:	480d      	ldr	r0, [pc, #52]	; (8000f14 <ADC_KL15+0x6c>)
 8000ee0:	f002 fa54 	bl	800338c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000ee4:	2164      	movs	r1, #100	; 0x64
 8000ee6:	480b      	ldr	r0, [pc, #44]	; (8000f14 <ADC_KL15+0x6c>)
 8000ee8:	f002 fb52 	bl	8003590 <HAL_ADC_PollForConversion>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d105      	bne.n	8000efe <ADC_KL15+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000ef2:	4808      	ldr	r0, [pc, #32]	; (8000f14 <ADC_KL15+0x6c>)
 8000ef4:	f002 fbd7 	bl	80036a6 <HAL_ADC_GetValue>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	82fb      	strh	r3, [r7, #22]
 8000efc:	e002      	b.n	8000f04 <ADC_KL15+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000efe:	2004      	movs	r0, #4
 8000f00:	f000 f9a0 	bl	8001244 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000f04:	4803      	ldr	r0, [pc, #12]	; (8000f14 <ADC_KL15+0x6c>)
 8000f06:	f002 fb0f 	bl	8003528 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000f0a:	8afb      	ldrh	r3, [r7, #22]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000058 	.word	0x20000058

08000f18 <ADC_Kuhlwassertemperatur>:
//----------------------------------------------------------------------

// Kuehlwassertemperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_Kuhlwassertemperatur (void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_4;										// ADC Kanal einstellen
 8000f2e:	2304      	movs	r3, #4
 8000f30:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000f32:	2301      	movs	r3, #1
 8000f34:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8000f36:	2301      	movs	r3, #1
 8000f38:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4811      	ldr	r0, [pc, #68]	; (8000f84 <ADC_Kuhlwassertemperatur+0x6c>)
 8000f40:	f002 fbbe 	bl	80036c0 <HAL_ADC_ConfigChannel>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <ADC_Kuhlwassertemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000f4a:	f001 ff47 	bl	8002ddc <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000f4e:	480d      	ldr	r0, [pc, #52]	; (8000f84 <ADC_Kuhlwassertemperatur+0x6c>)
 8000f50:	f002 fa1c 	bl	800338c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000f54:	2164      	movs	r1, #100	; 0x64
 8000f56:	480b      	ldr	r0, [pc, #44]	; (8000f84 <ADC_Kuhlwassertemperatur+0x6c>)
 8000f58:	f002 fb1a 	bl	8003590 <HAL_ADC_PollForConversion>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d105      	bne.n	8000f6e <ADC_Kuhlwassertemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000f62:	4808      	ldr	r0, [pc, #32]	; (8000f84 <ADC_Kuhlwassertemperatur+0x6c>)
 8000f64:	f002 fb9f 	bl	80036a6 <HAL_ADC_GetValue>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	82fb      	strh	r3, [r7, #22]
 8000f6c:	e002      	b.n	8000f74 <ADC_Kuhlwassertemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000f6e:	2004      	movs	r0, #4
 8000f70:	f000 f968 	bl	8001244 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000f74:	4803      	ldr	r0, [pc, #12]	; (8000f84 <ADC_Kuhlwassertemperatur+0x6c>)
 8000f76:	f002 fad7 	bl	8003528 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000f7a:	8afb      	ldrh	r3, [r7, #22]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000058 	.word	0x20000058

08000f88 <ADC_Klimaflap>:
//----------------------------------------------------------------------

// Klimaflapstellung einlesen (Position ueber Poti)
//----------------------------------------------------------------------
uint16_t ADC_Klimaflap (void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_5;										// ADC Kanal einstellen
 8000f9e:	2305      	movs	r3, #5
 8000fa0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	4619      	mov	r1, r3
 8000fae:	4811      	ldr	r0, [pc, #68]	; (8000ff4 <ADC_Klimaflap+0x6c>)
 8000fb0:	f002 fb86 	bl	80036c0 <HAL_ADC_ConfigChannel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <ADC_Klimaflap+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000fba:	f001 ff0f 	bl	8002ddc <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000fbe:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <ADC_Klimaflap+0x6c>)
 8000fc0:	f002 f9e4 	bl	800338c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000fc4:	2164      	movs	r1, #100	; 0x64
 8000fc6:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <ADC_Klimaflap+0x6c>)
 8000fc8:	f002 fae2 	bl	8003590 <HAL_ADC_PollForConversion>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d105      	bne.n	8000fde <ADC_Klimaflap+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000fd2:	4808      	ldr	r0, [pc, #32]	; (8000ff4 <ADC_Klimaflap+0x6c>)
 8000fd4:	f002 fb67 	bl	80036a6 <HAL_ADC_GetValue>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	82fb      	strh	r3, [r7, #22]
 8000fdc:	e002      	b.n	8000fe4 <ADC_Klimaflap+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000fde:	2004      	movs	r0, #4
 8000fe0:	f000 f930 	bl	8001244 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <ADC_Klimaflap+0x6c>)
 8000fe6:	f002 fa9f 	bl	8003528 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000fea:	8afb      	ldrh	r3, [r7, #22]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000058 	.word	0x20000058

08000ff8 <ADC_PCBTemperatur>:
//----------------------------------------------------------------------

// PCB Temperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_PCBTemperatur (void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_7;										// ADC Kanal einstellen
 800100e:	2307      	movs	r3, #7
 8001010:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8001012:	2301      	movs	r3, #1
 8001014:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8001016:	2301      	movs	r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	4619      	mov	r1, r3
 800101e:	4811      	ldr	r0, [pc, #68]	; (8001064 <ADC_PCBTemperatur+0x6c>)
 8001020:	f002 fb4e 	bl	80036c0 <HAL_ADC_ConfigChannel>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <ADC_PCBTemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 800102a:	f001 fed7 	bl	8002ddc <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 800102e:	480d      	ldr	r0, [pc, #52]	; (8001064 <ADC_PCBTemperatur+0x6c>)
 8001030:	f002 f9ac 	bl	800338c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8001034:	2164      	movs	r1, #100	; 0x64
 8001036:	480b      	ldr	r0, [pc, #44]	; (8001064 <ADC_PCBTemperatur+0x6c>)
 8001038:	f002 faaa 	bl	8003590 <HAL_ADC_PollForConversion>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d105      	bne.n	800104e <ADC_PCBTemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8001042:	4808      	ldr	r0, [pc, #32]	; (8001064 <ADC_PCBTemperatur+0x6c>)
 8001044:	f002 fb2f 	bl	80036a6 <HAL_ADC_GetValue>
 8001048:	4603      	mov	r3, r0
 800104a:	82fb      	strh	r3, [r7, #22]
 800104c:	e002      	b.n	8001054 <ADC_PCBTemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 800104e:	2004      	movs	r0, #4
 8001050:	f000 f8f8 	bl	8001244 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <ADC_PCBTemperatur+0x6c>)
 8001056:	f002 fa67 	bl	8003528 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 800105a:	8afb      	ldrh	r3, [r7, #22]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000058 	.word	0x20000058

08001068 <ADC_Return>:
//----------------------------------------------------------------------

// Navibedienelement Return einlesen (2 Schalter mit unterschiedlichen Widerstaenden)
//----------------------------------------------------------------------
uint16_t ADC_Return (void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_8;										// ADC Kanal einstellen
 800107e:	2308      	movs	r3, #8
 8001080:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8001082:	2301      	movs	r3, #1
 8001084:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8001086:	2301      	movs	r3, #1
 8001088:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	4619      	mov	r1, r3
 800108e:	4811      	ldr	r0, [pc, #68]	; (80010d4 <ADC_Return+0x6c>)
 8001090:	f002 fb16 	bl	80036c0 <HAL_ADC_ConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <ADC_Return+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 800109a:	f001 fe9f 	bl	8002ddc <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 800109e:	480d      	ldr	r0, [pc, #52]	; (80010d4 <ADC_Return+0x6c>)
 80010a0:	f002 f974 	bl	800338c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 80010a4:	2164      	movs	r1, #100	; 0x64
 80010a6:	480b      	ldr	r0, [pc, #44]	; (80010d4 <ADC_Return+0x6c>)
 80010a8:	f002 fa72 	bl	8003590 <HAL_ADC_PollForConversion>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d105      	bne.n	80010be <ADC_Return+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 80010b2:	4808      	ldr	r0, [pc, #32]	; (80010d4 <ADC_Return+0x6c>)
 80010b4:	f002 faf7 	bl	80036a6 <HAL_ADC_GetValue>
 80010b8:	4603      	mov	r3, r0
 80010ba:	82fb      	strh	r3, [r7, #22]
 80010bc:	e002      	b.n	80010c4 <ADC_Return+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 80010be:	2004      	movs	r0, #4
 80010c0:	f000 f8c0 	bl	8001244 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 80010c4:	4803      	ldr	r0, [pc, #12]	; (80010d4 <ADC_Return+0x6c>)
 80010c6:	f002 fa2f 	bl	8003528 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 80010ca:	8afb      	ldrh	r3, [r7, #22]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000058 	.word	0x20000058

080010d8 <ADC_Info>:
//----------------------------------------------------------------------

// Navibedienelement Info einlesen (2 Schalter mit unterschiedlichen Widerstaenden)
//----------------------------------------------------------------------
uint16_t ADC_Info (void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_9;										// ADC Kanal einstellen
 80010ee:	2309      	movs	r3, #9
 80010f0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 80010f2:	2301      	movs	r3, #1
 80010f4:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 80010f6:	2301      	movs	r3, #1
 80010f8:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	4811      	ldr	r0, [pc, #68]	; (8001144 <ADC_Info+0x6c>)
 8001100:	f002 fade 	bl	80036c0 <HAL_ADC_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <ADC_Info+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 800110a:	f001 fe67 	bl	8002ddc <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 800110e:	480d      	ldr	r0, [pc, #52]	; (8001144 <ADC_Info+0x6c>)
 8001110:	f002 f93c 	bl	800338c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8001114:	2164      	movs	r1, #100	; 0x64
 8001116:	480b      	ldr	r0, [pc, #44]	; (8001144 <ADC_Info+0x6c>)
 8001118:	f002 fa3a 	bl	8003590 <HAL_ADC_PollForConversion>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d105      	bne.n	800112e <ADC_Info+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8001122:	4808      	ldr	r0, [pc, #32]	; (8001144 <ADC_Info+0x6c>)
 8001124:	f002 fabf 	bl	80036a6 <HAL_ADC_GetValue>
 8001128:	4603      	mov	r3, r0
 800112a:	82fb      	strh	r3, [r7, #22]
 800112c:	e002      	b.n	8001134 <ADC_Info+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 800112e:	2004      	movs	r0, #4
 8001130:	f000 f888 	bl	8001244 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8001134:	4803      	ldr	r0, [pc, #12]	; (8001144 <ADC_Info+0x6c>)
 8001136:	f002 f9f7 	bl	8003528 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 800113a:	8afb      	ldrh	r3, [r7, #22]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000058 	.word	0x20000058

08001148 <ADC_Bremsdrucktemperatur>:
//----------------------------------------------------------------------

// Bremsdrucktemperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_Bremsdrucktemperatur (void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_15;										// ADC Kanal einstellen
 800115e:	230f      	movs	r3, #15
 8001160:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8001162:	2301      	movs	r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8001166:	2301      	movs	r3, #1
 8001168:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4619      	mov	r1, r3
 800116e:	4811      	ldr	r0, [pc, #68]	; (80011b4 <ADC_Bremsdrucktemperatur+0x6c>)
 8001170:	f002 faa6 	bl	80036c0 <HAL_ADC_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <ADC_Bremsdrucktemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 800117a:	f001 fe2f 	bl	8002ddc <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 800117e:	480d      	ldr	r0, [pc, #52]	; (80011b4 <ADC_Bremsdrucktemperatur+0x6c>)
 8001180:	f002 f904 	bl	800338c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8001184:	2164      	movs	r1, #100	; 0x64
 8001186:	480b      	ldr	r0, [pc, #44]	; (80011b4 <ADC_Bremsdrucktemperatur+0x6c>)
 8001188:	f002 fa02 	bl	8003590 <HAL_ADC_PollForConversion>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d105      	bne.n	800119e <ADC_Bremsdrucktemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8001192:	4808      	ldr	r0, [pc, #32]	; (80011b4 <ADC_Bremsdrucktemperatur+0x6c>)
 8001194:	f002 fa87 	bl	80036a6 <HAL_ADC_GetValue>
 8001198:	4603      	mov	r3, r0
 800119a:	82fb      	strh	r3, [r7, #22]
 800119c:	e002      	b.n	80011a4 <ADC_Bremsdrucktemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 800119e:	2004      	movs	r0, #4
 80011a0:	f000 f850 	bl	8001244 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 80011a4:	4803      	ldr	r0, [pc, #12]	; (80011b4 <ADC_Bremsdrucktemperatur+0x6c>)
 80011a6:	f002 f9bf 	bl	8003528 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 80011aa:	8afb      	ldrh	r3, [r7, #22]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000058 	.word	0x20000058

080011b8 <ADC_STMTemperatur>:
//----------------------------------------------------------------------

// STM32 Temperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_STMTemperatur (void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;								// ADC Kanal einstellen
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <ADC_STMTemperatur+0x6c>)
 80011d0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 80011d2:	2301      	movs	r3, #1
 80011d4:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 80011d6:	2301      	movs	r3, #1
 80011d8:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	4619      	mov	r1, r3
 80011de:	4812      	ldr	r0, [pc, #72]	; (8001228 <ADC_STMTemperatur+0x70>)
 80011e0:	f002 fa6e 	bl	80036c0 <HAL_ADC_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <ADC_STMTemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 80011ea:	f001 fdf7 	bl	8002ddc <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 80011ee:	480e      	ldr	r0, [pc, #56]	; (8001228 <ADC_STMTemperatur+0x70>)
 80011f0:	f002 f8cc 	bl	800338c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 80011f4:	2164      	movs	r1, #100	; 0x64
 80011f6:	480c      	ldr	r0, [pc, #48]	; (8001228 <ADC_STMTemperatur+0x70>)
 80011f8:	f002 f9ca 	bl	8003590 <HAL_ADC_PollForConversion>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d105      	bne.n	800120e <ADC_STMTemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8001202:	4809      	ldr	r0, [pc, #36]	; (8001228 <ADC_STMTemperatur+0x70>)
 8001204:	f002 fa4f 	bl	80036a6 <HAL_ADC_GetValue>
 8001208:	4603      	mov	r3, r0
 800120a:	82fb      	strh	r3, [r7, #22]
 800120c:	e002      	b.n	8001214 <ADC_STMTemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 800120e:	2004      	movs	r0, #4
 8001210:	f000 f818 	bl	8001244 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <ADC_STMTemperatur+0x70>)
 8001216:	f002 f987 	bl	8003528 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 800121a:	8afb      	ldrh	r3, [r7, #22]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	10000012 	.word	0x10000012
 8001228:	20000058 	.word	0x20000058

0800122c <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <software_error>:
//----------------------------------------------------------------------

// Diagnose Funktion falls ein Fehler auftritt
//----------------------------------------------------------------------
void software_error(uint8_t errorcode)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124e:	b672      	cpsid	i
}
 8001250:	bf00      	nop
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8001252:	4a1e      	ldr	r2, [pc, #120]	; (80012cc <software_error+0x88>)
 8001254:	7853      	ldrb	r3, [r2, #1]
 8001256:	f043 0308 	orr.w	r3, r3, #8
 800125a:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <software_error+0x88>)
 800125e:	785b      	ldrb	r3, [r3, #1]
 8001260:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001264:	b2db      	uxtb	r3, r3
 8001266:	461a      	mov	r2, r3
 8001268:	2104      	movs	r1, #4
 800126a:	4819      	ldr	r0, [pc, #100]	; (80012d0 <software_error+0x8c>)
 800126c:	f003 fe5e 	bl	8004f2c <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8001270:	4a16      	ldr	r2, [pc, #88]	; (80012cc <software_error+0x88>)
 8001272:	7853      	ldrb	r3, [r2, #1]
 8001274:	f36f 1304 	bfc	r3, #4, #1
 8001278:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// OK LED ausschalten
 800127a:	4b14      	ldr	r3, [pc, #80]	; (80012cc <software_error+0x88>)
 800127c:	785b      	ldrb	r3, [r3, #1]
 800127e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001282:	b2db      	uxtb	r3, r3
 8001284:	461a      	mov	r2, r3
 8001286:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800128a:	4811      	ldr	r0, [pc, #68]	; (80012d0 <software_error+0x8c>)
 800128c:	f003 fe4e 	bl	8004f2c <HAL_GPIO_WritePin>

	// Schalte SDC_Motor aus
	system_out.MotorSDC = 0;												// Zuruecksetzen Variable
 8001290:	4a10      	ldr	r2, [pc, #64]	; (80012d4 <software_error+0x90>)
 8001292:	7813      	ldrb	r3, [r2, #0]
 8001294:	f36f 1345 	bfc	r3, #5, #1
 8001298:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, system_out.MotorSDC);// SDC oeffnen
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <software_error+0x90>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	461a      	mov	r2, r3
 80012a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012aa:	480b      	ldr	r0, [pc, #44]	; (80012d8 <software_error+0x94>)
 80012ac:	f003 fe3e 	bl	8004f2c <HAL_GPIO_WritePin>
#ifdef DEBUG																// Serielle Kommunukation nur waehrend Debugging
#define SOFTERRORMESSAGE			"\nSoftware Error Handler ausgeloest\n"	// Ausgabe das Fehler aufgetreten ist
	uartTransmit(SOFTERRORMESSAGE,sizeof(SOFTERRORMESSAGE));
 80012b0:	2124      	movs	r1, #36	; 0x24
 80012b2:	480a      	ldr	r0, [pc, #40]	; (80012dc <software_error+0x98>)
 80012b4:	f7ff fa80 	bl	80007b8 <uartTransmit>

#define ERRORCODE					"Error Code:\t"							// Ausgabe des Fehlers anhand von Fehlercode
	uartTransmit(ERRORCODE,sizeof(ERRORCODE));
 80012b8:	210d      	movs	r1, #13
 80012ba:	4809      	ldr	r0, [pc, #36]	; (80012e0 <software_error+0x9c>)
 80012bc:	f7ff fa7c 	bl	80007b8 <uartTransmit>
	uartTransmitNumber(errorcode, 10);										// Fehlercode ausgeben
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	210a      	movs	r1, #10
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fa8b 	bl	80007e0 <uartTransmitNumber>
#endif
	while (1);																// Endlosschleife
 80012ca:	e7fe      	b.n	80012ca <software_error+0x86>
 80012cc:	20000050 	.word	0x20000050
 80012d0:	40020400 	.word	0x40020400
 80012d4:	20000048 	.word	0x20000048
 80012d8:	40021000 	.word	0x40021000
 80012dc:	080083fc 	.word	0x080083fc
 80012e0:	08008420 	.word	0x08008420

080012e4 <software_error_debug>:
//----------------------------------------------------------------------

// Diagnose Funktion falls ein Fehler auftritt (Nur Debugzwecke)
//----------------------------------------------------------------------
void software_error_debug(uint8_t errorcode)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 80012ee:	4a20      	ldr	r2, [pc, #128]	; (8001370 <software_error_debug+0x8c>)
 80012f0:	7853      	ldrb	r3, [r2, #1]
 80012f2:	f043 0308 	orr.w	r3, r3, #8
 80012f6:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <software_error_debug+0x8c>)
 80012fa:	785b      	ldrb	r3, [r3, #1]
 80012fc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001300:	b2db      	uxtb	r3, r3
 8001302:	461a      	mov	r2, r3
 8001304:	2104      	movs	r1, #4
 8001306:	481b      	ldr	r0, [pc, #108]	; (8001374 <software_error_debug+0x90>)
 8001308:	f003 fe10 	bl	8004f2c <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 800130c:	4a18      	ldr	r2, [pc, #96]	; (8001370 <software_error_debug+0x8c>)
 800130e:	7853      	ldrb	r3, [r2, #1]
 8001310:	f36f 1304 	bfc	r3, #4, #1
 8001314:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// OK LED ausschalten
 8001316:	4b16      	ldr	r3, [pc, #88]	; (8001370 <software_error_debug+0x8c>)
 8001318:	785b      	ldrb	r3, [r3, #1]
 800131a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800131e:	b2db      	uxtb	r3, r3
 8001320:	461a      	mov	r2, r3
 8001322:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001326:	4813      	ldr	r0, [pc, #76]	; (8001374 <software_error_debug+0x90>)
 8001328:	f003 fe00 	bl	8004f2c <HAL_GPIO_WritePin>

	// Schalte SDC_Motor aus
	system_out.MotorSDC = 0;												// Zuruecksetzen Variable
 800132c:	4a12      	ldr	r2, [pc, #72]	; (8001378 <software_error_debug+0x94>)
 800132e:	7813      	ldrb	r3, [r2, #0]
 8001330:	f36f 1345 	bfc	r3, #5, #1
 8001334:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, system_out.MotorSDC);// SDC oeffnen
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <software_error_debug+0x94>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001346:	480d      	ldr	r0, [pc, #52]	; (800137c <software_error_debug+0x98>)
 8001348:	f003 fdf0 	bl	8004f2c <HAL_GPIO_WritePin>
#ifdef DEBUG																// Serielle Kommunukation nur waehrend Debugging
#define SOFTERRORMESSAGE			"\nSoftware Error Handler ausgeloest\n"	// Ausgabe das Fehler aufgetreten ist
	uartTransmit(SOFTERRORMESSAGE,sizeof(SOFTERRORMESSAGE));
 800134c:	2124      	movs	r1, #36	; 0x24
 800134e:	480c      	ldr	r0, [pc, #48]	; (8001380 <software_error_debug+0x9c>)
 8001350:	f7ff fa32 	bl	80007b8 <uartTransmit>

#define ERRORCODE					"Error Code:\t"							// Ausgabe des Fehlers anhand von Fehlercode
	uartTransmit(ERRORCODE,sizeof(ERRORCODE));
 8001354:	210d      	movs	r1, #13
 8001356:	480b      	ldr	r0, [pc, #44]	; (8001384 <software_error_debug+0xa0>)
 8001358:	f7ff fa2e 	bl	80007b8 <uartTransmit>
	uartTransmitNumber(errorcode, 10);										// Fehlercode ausgeben
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	210a      	movs	r1, #10
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fa3d 	bl	80007e0 <uartTransmitNumber>
#endif
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000050 	.word	0x20000050
 8001374:	40020400 	.word	0x40020400
 8001378:	20000048 	.word	0x20000048
 800137c:	40021000 	.word	0x40021000
 8001380:	080083fc 	.word	0x080083fc
 8001384:	08008420 	.word	0x08008420

08001388 <ITM_SendString>:
// Nachricht SWO ITM Data Console
// Core Clock := Maximalfrequenz ; HCLK fuer Serial Wire Viewer
// Im String #GRN# oder #RED# oder #ORG# erscheint die Nachricht in einer Farbe
//----------------------------------------------------------------------
void ITM_SendString(char *text)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	{
		ITM_SendChar(*text);												// Sende ITM Zeichen
		text++;																// Pointer hochzaehlen
	}
#endif
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <ITM_SendNumber>:
//----------------------------------------------------------------------

// Debug Nummer ueber SWO senden
//----------------------------------------------------------------------
void ITM_SendNumber(long number)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	for(; i > 0; i--)
	{
		ITM_SendChar('0' + buf[i-1]);
	}
#endif
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <ITM_SendChar>:
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d013      	beq.n	80013f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80013c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80013d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00b      	beq.n	80013f0 <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 80013d8:	e000      	b.n	80013dc <ITM_SendChar+0x2c>
      __NOP();
 80013da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80013dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f9      	beq.n	80013da <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80013e6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	701a      	strb	r2, [r3, #0]
  return (ch);
 80013f0:	687b      	ldr	r3, [r7, #4]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <readall_inputs>:
//----------------------------------------------------------------------

// Alle Eingaenge einlesen und speichern
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
#ifdef DEBUG_INPUT
	ITM_SendString("Lese Inputs ein\n");
 8001404:	48ce      	ldr	r0, [pc, #824]	; (8001740 <readall_inputs+0x340>)
 8001406:	f7ff ffbf 	bl	8001388 <ITM_SendString>
#endif

	// Systemeingaenge einlesen
	system_in.Kickdown = HAL_GPIO_ReadPin(KICKDOWN_GPIO_Port, KICKDOWN_Pin);					// Eingang Gaspedal getreten
 800140a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800140e:	48cd      	ldr	r0, [pc, #820]	; (8001744 <readall_inputs+0x344>)
 8001410:	f003 fd74 	bl	8004efc <HAL_GPIO_ReadPin>
 8001414:	4603      	mov	r3, r0
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	b2d9      	uxtb	r1, r3
 800141c:	4aca      	ldr	r2, [pc, #808]	; (8001748 <readall_inputs+0x348>)
 800141e:	7813      	ldrb	r3, [r2, #0]
 8001420:	f361 0300 	bfi	r3, r1, #0, #1
 8001424:	7013      	strb	r3, [r2, #0]
	system_in.Leerlauf = HAL_GPIO_ReadPin(LEERLAUF_GPIO_Port, LEERLAUF_Pin);					// Eingang Gaspedal nicht getreten
 8001426:	f44f 7100 	mov.w	r1, #512	; 0x200
 800142a:	48c6      	ldr	r0, [pc, #792]	; (8001744 <readall_inputs+0x344>)
 800142c:	f003 fd66 	bl	8004efc <HAL_GPIO_ReadPin>
 8001430:	4603      	mov	r3, r0
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	b2d9      	uxtb	r1, r3
 8001438:	4ac3      	ldr	r2, [pc, #780]	; (8001748 <readall_inputs+0x348>)
 800143a:	7813      	ldrb	r3, [r2, #0]
 800143c:	f361 0341 	bfi	r3, r1, #1, #1
 8001440:	7013      	strb	r3, [r2, #0]

#if TISCHAUFBAU == 1
	system_in.BremseNO = false;																	// Eingang Bremse nicht getreten
 8001442:	4ac1      	ldr	r2, [pc, #772]	; (8001748 <readall_inputs+0x348>)
 8001444:	7813      	ldrb	r3, [r2, #0]
 8001446:	f36f 0382 	bfc	r3, #2, #1
 800144a:	7013      	strb	r3, [r2, #0]
	system_in.BremseNC = true;																	// Eingang Bremse getreten
 800144c:	4abe      	ldr	r2, [pc, #760]	; (8001748 <readall_inputs+0x348>)
 800144e:	7813      	ldrb	r3, [r2, #0]
 8001450:	f043 0308 	orr.w	r3, r3, #8
 8001454:	7013      	strb	r3, [r2, #0]
#else
	system_in.BremseNO = HAL_GPIO_ReadPin(BREMSE_NO_GPIO_Port, BREMSE_NO_Pin);					// Eingang Bremse nicht getreten
	system_in.BremseNC = HAL_GPIO_ReadPin(BREMSE_NC_GPIO_Port, BREMSE_NC_Pin);					// Eingang Bremse getreten
#endif

	system_in.Kupplung = HAL_GPIO_ReadPin(KUPPLUNG_NO_GPIO_Port, KUPPLUNG_NO_Pin);				// Eingang Kupplung nicht getreten
 8001456:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800145a:	48ba      	ldr	r0, [pc, #744]	; (8001744 <readall_inputs+0x344>)
 800145c:	f003 fd4e 	bl	8004efc <HAL_GPIO_ReadPin>
 8001460:	4603      	mov	r3, r0
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	b2d9      	uxtb	r1, r3
 8001468:	4ab7      	ldr	r2, [pc, #732]	; (8001748 <readall_inputs+0x348>)
 800146a:	7813      	ldrb	r3, [r2, #0]
 800146c:	f361 1304 	bfi	r3, r1, #4, #1
 8001470:	7013      	strb	r3, [r2, #0]
	system_in.Recuperation = HAL_GPIO_ReadPin(RECUPERATION_GPIO_Port, RECUPERATION_Pin);		// Eingang Recuperation
 8001472:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001476:	48b5      	ldr	r0, [pc, #724]	; (800174c <readall_inputs+0x34c>)
 8001478:	f003 fd40 	bl	8004efc <HAL_GPIO_ReadPin>
 800147c:	4603      	mov	r3, r0
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	b2d9      	uxtb	r1, r3
 8001484:	4ab0      	ldr	r2, [pc, #704]	; (8001748 <readall_inputs+0x348>)
 8001486:	7813      	ldrb	r3, [r2, #0]
 8001488:	f361 1345 	bfi	r3, r1, #5, #1
 800148c:	7013      	strb	r3, [r2, #0]
	system_in.ECON = HAL_GPIO_ReadPin(ECON_GPIO_Port, ECON_Pin);								// Eingang Klima
 800148e:	2102      	movs	r1, #2
 8001490:	48ae      	ldr	r0, [pc, #696]	; (800174c <readall_inputs+0x34c>)
 8001492:	f003 fd33 	bl	8004efc <HAL_GPIO_ReadPin>
 8001496:	4603      	mov	r3, r0
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	b2d9      	uxtb	r1, r3
 800149e:	4aaa      	ldr	r2, [pc, #680]	; (8001748 <readall_inputs+0x348>)
 80014a0:	7813      	ldrb	r3, [r2, #0]
 80014a2:	f361 1386 	bfi	r3, r1, #6, #1
 80014a6:	7013      	strb	r3, [r2, #0]
	system_in.Anlasser = HAL_GPIO_ReadPin(ANLASSER_GPIO_Port, ANLASSER_Pin);					// Eingang Zuendschloss, Motor starten
 80014a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ac:	48a8      	ldr	r0, [pc, #672]	; (8001750 <readall_inputs+0x350>)
 80014ae:	f003 fd25 	bl	8004efc <HAL_GPIO_ReadPin>
 80014b2:	4603      	mov	r3, r0
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	b2d9      	uxtb	r1, r3
 80014ba:	4aa3      	ldr	r2, [pc, #652]	; (8001748 <readall_inputs+0x348>)
 80014bc:	7813      	ldrb	r3, [r2, #0]
 80014be:	f361 13c7 	bfi	r3, r1, #7, #1
 80014c2:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 80014c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014c8:	48a1      	ldr	r0, [pc, #644]	; (8001750 <readall_inputs+0x350>)
 80014ca:	f003 fd17 	bl	8004efc <HAL_GPIO_ReadPin>
 80014ce:	4603      	mov	r3, r0
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	b2d9      	uxtb	r1, r3
 80014d6:	4a9c      	ldr	r2, [pc, #624]	; (8001748 <readall_inputs+0x348>)
 80014d8:	7853      	ldrb	r3, [r2, #1]
 80014da:	f361 0300 	bfi	r3, r1, #0, #1
 80014de:	7053      	strb	r3, [r2, #1]
	system_in.DCDC_Inst = HAL_GPIO_ReadPin(DCDC_INSTRUCTION_GPIO_Port, DCDC_INSTRUCTION_Pin);	// DCDC Wandler funktioniert einwandfrei
 80014e0:	2101      	movs	r1, #1
 80014e2:	489c      	ldr	r0, [pc, #624]	; (8001754 <readall_inputs+0x354>)
 80014e4:	f003 fd0a 	bl	8004efc <HAL_GPIO_ReadPin>
 80014e8:	4603      	mov	r3, r0
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	b2d9      	uxtb	r1, r3
 80014f0:	4a95      	ldr	r2, [pc, #596]	; (8001748 <readall_inputs+0x348>)
 80014f2:	7853      	ldrb	r3, [r2, #1]
 80014f4:	f361 0341 	bfi	r3, r1, #1, #1
 80014f8:	7053      	strb	r3, [r2, #1]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 80014fa:	2101      	movs	r1, #1
 80014fc:	4893      	ldr	r0, [pc, #588]	; (800174c <readall_inputs+0x34c>)
 80014fe:	f003 fcfd 	bl	8004efc <HAL_GPIO_ReadPin>
 8001502:	4603      	mov	r3, r0
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	b2d9      	uxtb	r1, r3
 800150a:	4a8f      	ldr	r2, [pc, #572]	; (8001748 <readall_inputs+0x348>)
 800150c:	7853      	ldrb	r3, [r2, #1]
 800150e:	f361 0382 	bfi	r3, r1, #2, #1
 8001512:	7053      	strb	r3, [r2, #1]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8001514:	2140      	movs	r1, #64	; 0x40
 8001516:	488b      	ldr	r0, [pc, #556]	; (8001744 <readall_inputs+0x344>)
 8001518:	f003 fcf0 	bl	8004efc <HAL_GPIO_ReadPin>
 800151c:	4603      	mov	r3, r0
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	b2d9      	uxtb	r1, r3
 8001524:	4a88      	ldr	r2, [pc, #544]	; (8001748 <readall_inputs+0x348>)
 8001526:	7853      	ldrb	r3, [r2, #1]
 8001528:	f361 03c3 	bfi	r3, r1, #3, #1
 800152c:	7053      	strb	r3, [r2, #1]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 800152e:	2101      	movs	r1, #1
 8001530:	4889      	ldr	r0, [pc, #548]	; (8001758 <readall_inputs+0x358>)
 8001532:	f003 fce3 	bl	8004efc <HAL_GPIO_ReadPin>
 8001536:	4603      	mov	r3, r0
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	b2d9      	uxtb	r1, r3
 800153e:	4a82      	ldr	r2, [pc, #520]	; (8001748 <readall_inputs+0x348>)
 8001540:	7853      	ldrb	r3, [r2, #1]
 8001542:	f361 1304 	bfi	r3, r1, #4, #1
 8001546:	7053      	strb	r3, [r2, #1]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8001548:	2104      	movs	r1, #4
 800154a:	4883      	ldr	r0, [pc, #524]	; (8001758 <readall_inputs+0x358>)
 800154c:	f003 fcd6 	bl	8004efc <HAL_GPIO_ReadPin>
 8001550:	4603      	mov	r3, r0
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	b2d9      	uxtb	r1, r3
 8001558:	4a7b      	ldr	r2, [pc, #492]	; (8001748 <readall_inputs+0x348>)
 800155a:	7853      	ldrb	r3, [r2, #1]
 800155c:	f361 1345 	bfi	r3, r1, #5, #1
 8001560:	7053      	strb	r3, [r2, #1]
//	system_in.Bremsdruck_NO = HAL_GPIO_ReadPin(Bremsdruck_NO_GPIO_Port, Bremsdruck_NO_Pin);		// Bremsdruck nicht zu hoch
//	system_in.Bremsdruck_NC = HAL_GPIO_ReadPin(Bremsdruck_NC_GPIO_Port, Bremsdruck_NC_Pin);		// Bremsdruck zu hoch

	// SDC-Eingaenge einlesen
	sdc_in.EmergencyRun = HAL_GPIO_ReadPin(EMERGENCY_RUN_GPIO_Port, EMERGENCY_RUN_Pin);			// Emergency Run, Akku
 8001562:	2102      	movs	r1, #2
 8001564:	487c      	ldr	r0, [pc, #496]	; (8001758 <readall_inputs+0x358>)
 8001566:	f003 fcc9 	bl	8004efc <HAL_GPIO_ReadPin>
 800156a:	4603      	mov	r3, r0
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	b2d9      	uxtb	r1, r3
 8001572:	4a7a      	ldr	r2, [pc, #488]	; (800175c <readall_inputs+0x35c>)
 8001574:	7813      	ldrb	r3, [r2, #0]
 8001576:	f361 0300 	bfi	r3, r1, #0, #1
 800157a:	7013      	strb	r3, [r2, #0]
	sdc_in.SDC0 = HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin);						// Shutdown-Circuit, OK
 800157c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001580:	4870      	ldr	r0, [pc, #448]	; (8001744 <readall_inputs+0x344>)
 8001582:	f003 fcbb 	bl	8004efc <HAL_GPIO_ReadPin>
 8001586:	4603      	mov	r3, r0
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	b2d9      	uxtb	r1, r3
 800158e:	4a73      	ldr	r2, [pc, #460]	; (800175c <readall_inputs+0x35c>)
 8001590:	7813      	ldrb	r3, [r2, #0]
 8001592:	f361 0341 	bfi	r3, r1, #1, #1
 8001596:	7013      	strb	r3, [r2, #0]
	sdc_in.Akku1SDC = HAL_GPIO_ReadPin(SENSE_SDC_AKKU_GPIO_Port, SENSE_SDC_AKKU_Pin);			// Shutdown-Circuit Akku, OK
 8001598:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800159c:	4869      	ldr	r0, [pc, #420]	; (8001744 <readall_inputs+0x344>)
 800159e:	f003 fcad 	bl	8004efc <HAL_GPIO_ReadPin>
 80015a2:	4603      	mov	r3, r0
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	b2d9      	uxtb	r1, r3
 80015aa:	4a6c      	ldr	r2, [pc, #432]	; (800175c <readall_inputs+0x35c>)
 80015ac:	7813      	ldrb	r3, [r2, #0]
 80015ae:	f361 0382 	bfi	r3, r1, #2, #1
 80015b2:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 80015b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b8:	4869      	ldr	r0, [pc, #420]	; (8001760 <readall_inputs+0x360>)
 80015ba:	f003 fc9f 	bl	8004efc <HAL_GPIO_ReadPin>
 80015be:	4603      	mov	r3, r0
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	b2d9      	uxtb	r1, r3
 80015c6:	4a65      	ldr	r2, [pc, #404]	; (800175c <readall_inputs+0x35c>)
 80015c8:	7813      	ldrb	r3, [r2, #0]
 80015ca:	f361 03c3 	bfi	r3, r1, #3, #1
 80015ce:	7013      	strb	r3, [r2, #0]
	sdc_in.DCDC_Fault = HAL_GPIO_ReadPin(DCDC_FAULT_GPIO_Port, DCDC_FAULT_Pin);					// DCDC Wandler funktioniert nicht richtig
 80015d0:	2102      	movs	r1, #2
 80015d2:	4860      	ldr	r0, [pc, #384]	; (8001754 <readall_inputs+0x354>)
 80015d4:	f003 fc92 	bl	8004efc <HAL_GPIO_ReadPin>
 80015d8:	4603      	mov	r3, r0
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	b2d9      	uxtb	r1, r3
 80015e0:	4a5e      	ldr	r2, [pc, #376]	; (800175c <readall_inputs+0x35c>)
 80015e2:	7813      	ldrb	r3, [r2, #0]
 80015e4:	f361 1304 	bfi	r3, r1, #4, #1
 80015e8:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.ASR1 = HAL_GPIO_ReadPin(ASR_IN1_GPIO_Port, ASR_IN1_Pin);							// ASR Eingang Mittelkonsole
 80015ea:	2110      	movs	r1, #16
 80015ec:	4859      	ldr	r0, [pc, #356]	; (8001754 <readall_inputs+0x354>)
 80015ee:	f003 fc85 	bl	8004efc <HAL_GPIO_ReadPin>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	b2d9      	uxtb	r1, r3
 80015fa:	4a5a      	ldr	r2, [pc, #360]	; (8001764 <readall_inputs+0x364>)
 80015fc:	7813      	ldrb	r3, [r2, #0]
 80015fe:	f361 0300 	bfi	r3, r1, #0, #1
 8001602:	7013      	strb	r3, [r2, #0]
	komfort_in.ASR2 = HAL_GPIO_ReadPin(ASR_IN2_GPIO_Port, ASR_IN2_Pin);							// ASR Eingang Mittelkonsole
 8001604:	2110      	movs	r1, #16
 8001606:	4852      	ldr	r0, [pc, #328]	; (8001750 <readall_inputs+0x350>)
 8001608:	f003 fc78 	bl	8004efc <HAL_GPIO_ReadPin>
 800160c:	4603      	mov	r3, r0
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	b2d9      	uxtb	r1, r3
 8001614:	4a53      	ldr	r2, [pc, #332]	; (8001764 <readall_inputs+0x364>)
 8001616:	7813      	ldrb	r3, [r2, #0]
 8001618:	f361 0341 	bfi	r3, r1, #1, #1
 800161c:	7013      	strb	r3, [r2, #0]
	komfort_in.ECO = HAL_GPIO_ReadPin(ECO_GPIO_Port, ECO_Pin);									// ECO Eingang Mittelkonsole
 800161e:	2108      	movs	r1, #8
 8001620:	4848      	ldr	r0, [pc, #288]	; (8001744 <readall_inputs+0x344>)
 8001622:	f003 fc6b 	bl	8004efc <HAL_GPIO_ReadPin>
 8001626:	4603      	mov	r3, r0
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	b2d9      	uxtb	r1, r3
 800162e:	4a4d      	ldr	r2, [pc, #308]	; (8001764 <readall_inputs+0x364>)
 8001630:	7813      	ldrb	r3, [r2, #0]
 8001632:	f361 0382 	bfi	r3, r1, #2, #1
 8001636:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Rst_In = HAL_GPIO_ReadPin(BC_RESET_IN_GPIO_Port, BC_RESET_IN_Pin);			// Boardcomputer Reset Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8001638:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800163c:	4845      	ldr	r0, [pc, #276]	; (8001754 <readall_inputs+0x354>)
 800163e:	f003 fc5d 	bl	8004efc <HAL_GPIO_ReadPin>
 8001642:	4603      	mov	r3, r0
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	b2d9      	uxtb	r1, r3
 800164a:	4a46      	ldr	r2, [pc, #280]	; (8001764 <readall_inputs+0x364>)
 800164c:	7813      	ldrb	r3, [r2, #0]
 800164e:	f361 03c3 	bfi	r3, r1, #3, #1
 8001652:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Up_In = HAL_GPIO_ReadPin(BC_UP_IN_GPIO_Port, BC_UP_IN_Pin);					// Boardcomputer Rauf Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8001654:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001658:	483f      	ldr	r0, [pc, #252]	; (8001758 <readall_inputs+0x358>)
 800165a:	f003 fc4f 	bl	8004efc <HAL_GPIO_ReadPin>
 800165e:	4603      	mov	r3, r0
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	b2d9      	uxtb	r1, r3
 8001666:	4a3f      	ldr	r2, [pc, #252]	; (8001764 <readall_inputs+0x364>)
 8001668:	7813      	ldrb	r3, [r2, #0]
 800166a:	f361 1304 	bfi	r3, r1, #4, #1
 800166e:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Down_In = HAL_GPIO_ReadPin(BC_DOWN_IN_GPIO_Port, BC_DOWN_IN_Pin);				// Boardcomputer Runter Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8001670:	2110      	movs	r1, #16
 8001672:	4834      	ldr	r0, [pc, #208]	; (8001744 <readall_inputs+0x344>)
 8001674:	f003 fc42 	bl	8004efc <HAL_GPIO_ReadPin>
 8001678:	4603      	mov	r3, r0
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	b2d9      	uxtb	r1, r3
 8001680:	4a38      	ldr	r2, [pc, #224]	; (8001764 <readall_inputs+0x364>)
 8001682:	7813      	ldrb	r3, [r2, #0]
 8001684:	f361 1345 	bfi	r3, r1, #5, #1
 8001688:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn1 = HAL_GPIO_ReadPin(BAMOCAR_IN1_GPIO_Port, BAMOCAR_IN1_Pin);				// Eingang Bamocar 1
 800168a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800168e:	4830      	ldr	r0, [pc, #192]	; (8001750 <readall_inputs+0x350>)
 8001690:	f003 fc34 	bl	8004efc <HAL_GPIO_ReadPin>
 8001694:	4603      	mov	r3, r0
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	b2d9      	uxtb	r1, r3
 800169c:	4a31      	ldr	r2, [pc, #196]	; (8001764 <readall_inputs+0x364>)
 800169e:	7813      	ldrb	r3, [r2, #0]
 80016a0:	f361 1386 	bfi	r3, r1, #6, #1
 80016a4:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn2 = HAL_GPIO_ReadPin(BAMOCAR_IN2_GPIO_Port, BAMOCAR_IN2_Pin);				// Eingang Bamocar 2
 80016a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016aa:	482d      	ldr	r0, [pc, #180]	; (8001760 <readall_inputs+0x360>)
 80016ac:	f003 fc26 	bl	8004efc <HAL_GPIO_ReadPin>
 80016b0:	4603      	mov	r3, r0
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	b2d9      	uxtb	r1, r3
 80016b8:	4a2a      	ldr	r2, [pc, #168]	; (8001764 <readall_inputs+0x364>)
 80016ba:	7813      	ldrb	r3, [r2, #0]
 80016bc:	f361 13c7 	bfi	r3, r1, #7, #1
 80016c0:	7013      	strb	r3, [r2, #0]
	komfort_in.Enter = HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin);							// Encoder Taster Enter Eingang Mittelconsole
 80016c2:	2180      	movs	r1, #128	; 0x80
 80016c4:	4828      	ldr	r0, [pc, #160]	; (8001768 <readall_inputs+0x368>)
 80016c6:	f003 fc19 	bl	8004efc <HAL_GPIO_ReadPin>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	b2d9      	uxtb	r1, r3
 80016d2:	4a24      	ldr	r2, [pc, #144]	; (8001764 <readall_inputs+0x364>)
 80016d4:	7853      	ldrb	r3, [r2, #1]
 80016d6:	f361 0300 	bfi	r3, r1, #0, #1
 80016da:	7053      	strb	r3, [r2, #1]
	komfort_in.OutA = HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTA_Pin);								// Encoder OUTA Eingang Mittelconsole
 80016dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016e0:	481d      	ldr	r0, [pc, #116]	; (8001758 <readall_inputs+0x358>)
 80016e2:	f003 fc0b 	bl	8004efc <HAL_GPIO_ReadPin>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	b2d9      	uxtb	r1, r3
 80016ee:	4a1d      	ldr	r2, [pc, #116]	; (8001764 <readall_inputs+0x364>)
 80016f0:	7853      	ldrb	r3, [r2, #1]
 80016f2:	f361 0341 	bfi	r3, r1, #1, #1
 80016f6:	7053      	strb	r3, [r2, #1]
	komfort_in.OutB = HAL_GPIO_ReadPin(OUTB_GPIO_Port, OUTB_Pin);								// Encoder OUTB Eingang Mittelconsole
 80016f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016fc:	4816      	ldr	r0, [pc, #88]	; (8001758 <readall_inputs+0x358>)
 80016fe:	f003 fbfd 	bl	8004efc <HAL_GPIO_ReadPin>
 8001702:	4603      	mov	r3, r0
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	b2d9      	uxtb	r1, r3
 800170a:	4a16      	ldr	r2, [pc, #88]	; (8001764 <readall_inputs+0x364>)
 800170c:	7853      	ldrb	r3, [r2, #1]
 800170e:	f361 0382 	bfi	r3, r1, #2, #1
 8001712:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA1 = HAL_GPIO_ReadPin(GRA1_GPIO_Port, GRA1_Pin);								// Tempomat 1 Eingang
 8001714:	2120      	movs	r1, #32
 8001716:	480f      	ldr	r0, [pc, #60]	; (8001754 <readall_inputs+0x354>)
 8001718:	f003 fbf0 	bl	8004efc <HAL_GPIO_ReadPin>
 800171c:	4603      	mov	r3, r0
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	b2d9      	uxtb	r1, r3
 8001724:	4a0f      	ldr	r2, [pc, #60]	; (8001764 <readall_inputs+0x364>)
 8001726:	7853      	ldrb	r3, [r2, #1]
 8001728:	f361 03c3 	bfi	r3, r1, #3, #1
 800172c:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA2 = HAL_GPIO_ReadPin(GRA2_GPIO_Port, GRA2_Pin);								// Tempomat 2 Eingang
 800172e:	2140      	movs	r1, #64	; 0x40
 8001730:	4808      	ldr	r0, [pc, #32]	; (8001754 <readall_inputs+0x354>)
 8001732:	f003 fbe3 	bl	8004efc <HAL_GPIO_ReadPin>
 8001736:	4603      	mov	r3, r0
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	b2d9      	uxtb	r1, r3
 800173e:	e015      	b.n	800176c <readall_inputs+0x36c>
 8001740:	08008430 	.word	0x08008430
 8001744:	40021000 	.word	0x40021000
 8001748:	2000003c 	.word	0x2000003c
 800174c:	40021400 	.word	0x40021400
 8001750:	40020c00 	.word	0x40020c00
 8001754:	40021800 	.word	0x40021800
 8001758:	40020000 	.word	0x40020000
 800175c:	20000040 	.word	0x20000040
 8001760:	40020400 	.word	0x40020400
 8001764:	20000044 	.word	0x20000044
 8001768:	40020800 	.word	0x40020800
 800176c:	4a29      	ldr	r2, [pc, #164]	; (8001814 <readall_inputs+0x414>)
 800176e:	7853      	ldrb	r3, [r2, #1]
 8001770:	f361 1304 	bfi	r3, r1, #4, #1
 8001774:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA3 = HAL_GPIO_ReadPin(GRA3_GPIO_Port, GRA3_Pin);								// Tempomat 3 Eingang
 8001776:	2180      	movs	r1, #128	; 0x80
 8001778:	4827      	ldr	r0, [pc, #156]	; (8001818 <readall_inputs+0x418>)
 800177a:	f003 fbbf 	bl	8004efc <HAL_GPIO_ReadPin>
 800177e:	4603      	mov	r3, r0
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	b2d9      	uxtb	r1, r3
 8001786:	4a23      	ldr	r2, [pc, #140]	; (8001814 <readall_inputs+0x414>)
 8001788:	7853      	ldrb	r3, [r2, #1]
 800178a:	f361 1345 	bfi	r3, r1, #5, #1
 800178e:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA4 = HAL_GPIO_ReadPin(GRA4_GPIO_Port, GRA4_Pin);								// Tempomat 4 Eingang
 8001790:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001794:	4820      	ldr	r0, [pc, #128]	; (8001818 <readall_inputs+0x418>)
 8001796:	f003 fbb1 	bl	8004efc <HAL_GPIO_ReadPin>
 800179a:	4603      	mov	r3, r0
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	b2d9      	uxtb	r1, r3
 80017a2:	4a1c      	ldr	r2, [pc, #112]	; (8001814 <readall_inputs+0x414>)
 80017a4:	7853      	ldrb	r3, [r2, #1]
 80017a6:	f361 1386 	bfi	r3, r1, #6, #1
 80017aa:	7053      	strb	r3, [r2, #1]
	komfort_in.Durchfluss = HAL_GPIO_ReadPin(DURCHFLUSS_GPIO_Port, DURCHFLUSS_Pin);				// Durchflusssensor Eingang
 80017ac:	2120      	movs	r1, #32
 80017ae:	481b      	ldr	r0, [pc, #108]	; (800181c <readall_inputs+0x41c>)
 80017b0:	f003 fba4 	bl	8004efc <HAL_GPIO_ReadPin>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	b2d9      	uxtb	r1, r3
 80017bc:	4a15      	ldr	r2, [pc, #84]	; (8001814 <readall_inputs+0x414>)
 80017be:	7853      	ldrb	r3, [r2, #1]
 80017c0:	f361 13c7 	bfi	r3, r1, #7, #1
 80017c4:	7053      	strb	r3, [r2, #1]

#ifdef DEBUG_INPUT
	ITM_SendString("Eingaenge gelesen.\n");
 80017c6:	4816      	ldr	r0, [pc, #88]	; (8001820 <readall_inputs+0x420>)
 80017c8:	f7ff fdde 	bl	8001388 <ITM_SendString>
	ITM_SendString("system_in:\t");
 80017cc:	4815      	ldr	r0, [pc, #84]	; (8001824 <readall_inputs+0x424>)
 80017ce:	f7ff fddb 	bl	8001388 <ITM_SendString>
	ITM_SendNumber(system_in.systeminput);
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <readall_inputs+0x428>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fde0 	bl	800139c <ITM_SendNumber>
	ITM_SendChar('\n');
 80017dc:	200a      	movs	r0, #10
 80017de:	f7ff fde7 	bl	80013b0 <ITM_SendChar>
	ITM_SendString("sdc_in:\t");
 80017e2:	4812      	ldr	r0, [pc, #72]	; (800182c <readall_inputs+0x42c>)
 80017e4:	f7ff fdd0 	bl	8001388 <ITM_SendString>
	ITM_SendNumber(sdc_in.sdcinput);
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <readall_inputs+0x430>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fdd5 	bl	800139c <ITM_SendNumber>
	ITM_SendChar('\n');
 80017f2:	200a      	movs	r0, #10
 80017f4:	f7ff fddc 	bl	80013b0 <ITM_SendChar>
	ITM_SendString("komfort_in:\t");
 80017f8:	480e      	ldr	r0, [pc, #56]	; (8001834 <readall_inputs+0x434>)
 80017fa:	f7ff fdc5 	bl	8001388 <ITM_SendString>
	ITM_SendNumber(komfort_in.komfortinput);
 80017fe:	4b05      	ldr	r3, [pc, #20]	; (8001814 <readall_inputs+0x414>)
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fdca 	bl	800139c <ITM_SendNumber>
	ITM_SendChar('\n');
 8001808:	200a      	movs	r0, #10
 800180a:	f7ff fdd1 	bl	80013b0 <ITM_SendChar>
#endif
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000044 	.word	0x20000044
 8001818:	40021800 	.word	0x40021800
 800181c:	40021000 	.word	0x40021000
 8001820:	08008444 	.word	0x08008444
 8001824:	08008458 	.word	0x08008458
 8001828:	2000003c 	.word	0x2000003c
 800182c:	08008464 	.word	0x08008464
 8001830:	20000040 	.word	0x20000040
 8001834:	08008470 	.word	0x08008470

08001838 <readAnlasser>:
//----------------------------------------------------------------------

// Anlasser einlesen, Wert in Variable speichern, bis KL15 abfaellt
//----------------------------------------------------------------------
void readAnlasser(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
	if (system_in.Anlasser != 1)
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <readAnlasser+0x50>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d105      	bne.n	8001856 <readAnlasser+0x1e>
	{
		sdc_in.Anlasser = 1;
 800184a:	4a10      	ldr	r2, [pc, #64]	; (800188c <readAnlasser+0x54>)
 800184c:	7813      	ldrb	r3, [r2, #0]
 800184e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001852:	7013      	strb	r3, [r2, #0]
	}
	else if ((sdc_in.Anlasser == 1) && (system_in.KL15 == 1))
	{
		sdc_in.Anlasser = 0;
	}
}
 8001854:	e012      	b.n	800187c <readAnlasser+0x44>
	else if ((sdc_in.Anlasser == 1) && (system_in.KL15 == 1))
 8001856:	4b0d      	ldr	r3, [pc, #52]	; (800188c <readAnlasser+0x54>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00b      	beq.n	800187c <readAnlasser+0x44>
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <readAnlasser+0x50>)
 8001866:	785b      	ldrb	r3, [r3, #1]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d004      	beq.n	800187c <readAnlasser+0x44>
		sdc_in.Anlasser = 0;
 8001872:	4a06      	ldr	r2, [pc, #24]	; (800188c <readAnlasser+0x54>)
 8001874:	7813      	ldrb	r3, [r2, #0]
 8001876:	f36f 1386 	bfc	r3, #6, #1
 800187a:	7013      	strb	r3, [r2, #0]
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	2000003c 	.word	0x2000003c
 800188c:	20000040 	.word	0x20000040

08001890 <millis>:
//----------------------------------------------------------------------
#include "millis.h"
//----------------------------------------------------------------------

uint32_t millis(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001894:	f001 fcbe 	bl	8003214 <HAL_GetTick>
 8001898:	4603      	mov	r3, r0
}
 800189a:	4618      	mov	r0, r3
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);							// Teste Green LED, an
 80018a4:	2201      	movs	r2, #1
 80018a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018aa:	481b      	ldr	r0, [pc, #108]	; (8001918 <testPCB_Leds+0x78>)
 80018ac:	f003 fb3e 	bl	8004f2c <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 80018b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018b4:	f001 fcba 	bl	800322c <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);							// Teste Green LED, aus
 80018b8:	2200      	movs	r2, #0
 80018ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018be:	4816      	ldr	r0, [pc, #88]	; (8001918 <testPCB_Leds+0x78>)
 80018c0:	f003 fb34 	bl	8004f2c <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 80018c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018c8:	f001 fcb0 	bl	800322c <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);								// Teste Blue LED, an
 80018cc:	2201      	movs	r2, #1
 80018ce:	2180      	movs	r1, #128	; 0x80
 80018d0:	4811      	ldr	r0, [pc, #68]	; (8001918 <testPCB_Leds+0x78>)
 80018d2:	f003 fb2b 	bl	8004f2c <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 80018d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018da:	f001 fca7 	bl	800322c <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);							// Teste Blue LED, aus
 80018de:	2200      	movs	r2, #0
 80018e0:	2180      	movs	r1, #128	; 0x80
 80018e2:	480d      	ldr	r0, [pc, #52]	; (8001918 <testPCB_Leds+0x78>)
 80018e4:	f003 fb22 	bl	8004f2c <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 80018e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018ec:	f001 fc9e 	bl	800322c <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);								// Teste Red LED, an
 80018f0:	2201      	movs	r2, #1
 80018f2:	2104      	movs	r1, #4
 80018f4:	4808      	ldr	r0, [pc, #32]	; (8001918 <testPCB_Leds+0x78>)
 80018f6:	f003 fb19 	bl	8004f2c <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 80018fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018fe:	f001 fc95 	bl	800322c <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);								// Teste Red LED, aus
 8001902:	2200      	movs	r2, #0
 8001904:	2104      	movs	r1, #4
 8001906:	4804      	ldr	r0, [pc, #16]	; (8001918 <testPCB_Leds+0x78>)
 8001908:	f003 fb10 	bl	8004f2c <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 800190c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001910:	f001 fc8c 	bl	800322c <HAL_Delay>
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40020400 	.word	0x40020400

0800191c <testCockpit_Leds>:
//----------------------------------------------------------------------

// Teste Cockpit LEDs
//----------------------------------------------------------------------
void testCockpit_Leds(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(ANHAENGER_GPIO_Port, ANHAENGER_Pin, GPIO_PIN_SET);							// Teste Anhaenger LED, an (Cockpit ECO)
 8001920:	2201      	movs	r2, #1
 8001922:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001926:	4813      	ldr	r0, [pc, #76]	; (8001974 <testCockpit_Leds+0x58>)
 8001928:	f003 fb00 	bl	8004f2c <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 800192c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001930:	f001 fc7c 	bl	800322c <HAL_Delay>
    HAL_GPIO_WritePin(ANHAENGER_GPIO_Port, ANHAENGER_Pin, GPIO_PIN_RESET);							// Teste Anhaenger LED, aus (Cockpit ECO)
 8001934:	2200      	movs	r2, #0
 8001936:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800193a:	480e      	ldr	r0, [pc, #56]	; (8001974 <testCockpit_Leds+0x58>)
 800193c:	f003 faf6 	bl	8004f2c <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 8001940:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001944:	f001 fc72 	bl	800322c <HAL_Delay>
    HAL_GPIO_WritePin(RESERVE_OUT_GPIO_Port, RESERVE_OUT_Pin, GPIO_PIN_SET);						// Teste Reserve LED, an (Cockpit Niveauregulierung)
 8001948:	2201      	movs	r2, #1
 800194a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800194e:	4809      	ldr	r0, [pc, #36]	; (8001974 <testCockpit_Leds+0x58>)
 8001950:	f003 faec 	bl	8004f2c <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 8001954:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001958:	f001 fc68 	bl	800322c <HAL_Delay>
    HAL_GPIO_WritePin(RESERVE_OUT_GPIO_Port, RESERVE_OUT_Pin, GPIO_PIN_RESET);						// Teste Reserve LED, aus (Cockpit Niveauregulierung)
 800195c:	2200      	movs	r2, #0
 800195e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001962:	4804      	ldr	r0, [pc, #16]	; (8001974 <testCockpit_Leds+0x58>)
 8001964:	f003 fae2 	bl	8004f2c <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 8001968:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800196c:	f001 fc5e 	bl	800322c <HAL_Delay>
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40020c00 	.word	0x40020c00

08001978 <pwm_oelstand>:
//----------------------------------------------------------------------

// PWM fuer Oelstandsensor am Kombiinstrument
//----------------------------------------------------------------------
void pwm_oelstand(uint16_t time)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	80fb      	strh	r3, [r7, #6]
	// Auswahl wie viele Sekunden vergangen
	switch (time)																					// Zeit wird uebergeben
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	2b4b      	cmp	r3, #75	; 0x4b
 8001986:	d01f      	beq.n	80019c8 <pwm_oelstand+0x50>
 8001988:	2b4b      	cmp	r3, #75	; 0x4b
 800198a:	dc24      	bgt.n	80019d6 <pwm_oelstand+0x5e>
 800198c:	2b2d      	cmp	r3, #45	; 0x2d
 800198e:	d014      	beq.n	80019ba <pwm_oelstand+0x42>
 8001990:	2b2d      	cmp	r3, #45	; 0x2d
 8001992:	dc20      	bgt.n	80019d6 <pwm_oelstand+0x5e>
 8001994:	2b00      	cmp	r3, #0
 8001996:	d002      	beq.n	800199e <pwm_oelstand+0x26>
 8001998:	2b0f      	cmp	r3, #15
 800199a:	d007      	beq.n	80019ac <pwm_oelstand+0x34>
			break;
		case 75: // 5x15 ms = 75 ms
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 75ms Oelstandsensor Ausgang high
			break;
		default:
			break;
 800199c:	e01b      	b.n	80019d6 <pwm_oelstand+0x5e>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_RESET);			// Bei 0ms Oelstandsensor Ausgang low
 800199e:	2200      	movs	r2, #0
 80019a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019a4:	480e      	ldr	r0, [pc, #56]	; (80019e0 <pwm_oelstand+0x68>)
 80019a6:	f003 fac1 	bl	8004f2c <HAL_GPIO_WritePin>
			break;
 80019aa:	e015      	b.n	80019d8 <pwm_oelstand+0x60>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 15ms Oelstandsensor Ausgang high
 80019ac:	2201      	movs	r2, #1
 80019ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019b2:	480b      	ldr	r0, [pc, #44]	; (80019e0 <pwm_oelstand+0x68>)
 80019b4:	f003 faba 	bl	8004f2c <HAL_GPIO_WritePin>
			break;
 80019b8:	e00e      	b.n	80019d8 <pwm_oelstand+0x60>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_RESET);			// Bei 45ms Oelstandsensor Ausgang low
 80019ba:	2200      	movs	r2, #0
 80019bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019c0:	4807      	ldr	r0, [pc, #28]	; (80019e0 <pwm_oelstand+0x68>)
 80019c2:	f003 fab3 	bl	8004f2c <HAL_GPIO_WritePin>
			break;
 80019c6:	e007      	b.n	80019d8 <pwm_oelstand+0x60>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 75ms Oelstandsensor Ausgang high
 80019c8:	2201      	movs	r2, #1
 80019ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ce:	4804      	ldr	r0, [pc, #16]	; (80019e0 <pwm_oelstand+0x68>)
 80019d0:	f003 faac 	bl	8004f2c <HAL_GPIO_WritePin>
			break;
 80019d4:	e000      	b.n	80019d8 <pwm_oelstand+0x60>
			break;
 80019d6:	bf00      	nop
	}
	// Nach 405ms wird das ganze wiederholt
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40020000 	.word	0x40020000

080019e4 <cockpit_default>:
//----------------------------------------------------------------------

// Setze Cockpit auf default, alle Fehler OK
//----------------------------------------------------------------------
void cockpit_default(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	leuchten_out.Ruechwarn = 1;																		// Ruecklichtwarnung setzen
 80019e8:	4a1f      	ldr	r2, [pc, #124]	; (8001a68 <cockpit_default+0x84>)
 80019ea:	7813      	ldrb	r3, [r2, #0]
 80019ec:	f043 0310 	orr.w	r3, r3, #16
 80019f0:	7013      	strb	r3, [r2, #0]
	leuchten_out.Wischwarn = 1;																		// Wischwasserwarnung setzen
 80019f2:	4a1d      	ldr	r2, [pc, #116]	; (8001a68 <cockpit_default+0x84>)
 80019f4:	7813      	ldrb	r3, [r2, #0]
 80019f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019fa:	7013      	strb	r3, [r2, #0]
	leuchten_out.Bremswarn = 1;																		// Bremslichtwarnung setzen
 80019fc:	4a1a      	ldr	r2, [pc, #104]	; (8001a68 <cockpit_default+0x84>)
 80019fe:	7813      	ldrb	r3, [r2, #0]
 8001a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a04:	7013      	strb	r3, [r2, #0]
	leuchten_out.Oelstand = 1;																		// Oelstandwarnung setzen
 8001a06:	4a18      	ldr	r2, [pc, #96]	; (8001a68 <cockpit_default+0x84>)
 8001a08:	7853      	ldrb	r3, [r2, #1]
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, leuchten_out.Ruechwarn);			// Fehlermeldung fuer Ruecklichtwarnung einschalten
 8001a10:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <cockpit_default+0x84>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	2180      	movs	r1, #128	; 0x80
 8001a1e:	4813      	ldr	r0, [pc, #76]	; (8001a6c <cockpit_default+0x88>)
 8001a20:	f003 fa84 	bl	8004f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WISCHWARNUNG_GPIO_Port, WISCHWARNUNG_Pin, leuchten_out.Wischwarn);			// Fehlermeldung fuer Wischwasserwarnung einschalten
 8001a24:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <cockpit_default+0x84>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	461a      	mov	r2, r3
 8001a30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a34:	480e      	ldr	r0, [pc, #56]	; (8001a70 <cockpit_default+0x8c>)
 8001a36:	f003 fa79 	bl	8004f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BREMSWARNUNG_GPIO_Port, BREMSWARNUNG_Pin, leuchten_out.Bremswarn);			// Fehlermeldung fuer Bremslichtwarnung einschalten
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <cockpit_default+0x84>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	461a      	mov	r2, r3
 8001a46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a4a:	4809      	ldr	r0, [pc, #36]	; (8001a70 <cockpit_default+0x8c>)
 8001a4c:	f003 fa6e 	bl	8004f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OELDRUCK_GPIO_Port, OELDRUCK_Pin, leuchten_out.Oelstand);						// Fehlermeldung fuer Oeldruckwarnung einschalten
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <cockpit_default+0x84>)
 8001a52:	785b      	ldrb	r3, [r3, #1]
 8001a54:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	2104      	movs	r1, #4
 8001a5e:	4805      	ldr	r0, [pc, #20]	; (8001a74 <cockpit_default+0x90>)
 8001a60:	f003 fa64 	bl	8004f2c <HAL_GPIO_WritePin>
}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000050 	.word	0x20000050
 8001a6c:	40020c00 	.word	0x40020c00
 8001a70:	40021800 	.word	0x40021800
 8001a74:	40021400 	.word	0x40021400

08001a78 <testSDC>:
//----------------------------------------------------------------------

// Testen der Spannung am Shutdown-Circuit, Signal 1 = offen, Signal = 0 geschlossen
//----------------------------------------------------------------------
void testSDC(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, GPIO_PIN_SET);					// Einschalten von Shutdown-Circuit zum testen
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a82:	4811      	ldr	r0, [pc, #68]	; (8001ac8 <testSDC+0x50>)
 8001a84:	f003 fa52 	bl	8004f2c <HAL_GPIO_WritePin>
	HAL_Delay(100);																					// Wartezeit zum setzen
 8001a88:	2064      	movs	r0, #100	; 0x64
 8001a8a:	f001 fbcf 	bl	800322c <HAL_Delay>
	if (HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin) == 1)								// Einlesen von SDC0 Eingang
 8001a8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a92:	480d      	ldr	r0, [pc, #52]	; (8001ac8 <testSDC+0x50>)
 8001a94:	f003 fa32 	bl	8004efc <HAL_GPIO_ReadPin>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d103      	bne.n	8001aa6 <testSDC+0x2e>
	{
#ifndef DEBUG_SDC
		software_error(ERROR_SDC_SPANNUNG);															// Sollte Sicherung kaputt oder Kurzschluss, dann Fehlerausgeben
#else
#warning "Das Abschalten des Softwarefehlers kann unter Umstaenden zu Beschaedigung der HW fuehren."
		software_error_debug(ERROR_SDC_SPANNUNG);													// Errorfunktion stoppt Programm nicht
 8001a9e:	2003      	movs	r0, #3
 8001aa0:	f7ff fc20 	bl	80012e4 <software_error_debug>
 8001aa4:	e004      	b.n	8001ab0 <testSDC+0x38>
#endif
	}
	else
	{
	  	sdc_in.SDC12V = 1;																			// SDC Spannungsversorgung OK
 8001aa6:	4a09      	ldr	r2, [pc, #36]	; (8001acc <testSDC+0x54>)
 8001aa8:	7813      	ldrb	r3, [r2, #0]
 8001aaa:	f043 0320 	orr.w	r3, r3, #32
 8001aae:	7013      	strb	r3, [r2, #0]
	}
	HAL_Delay(100);																					// Wartezeit zum setzen
 8001ab0:	2064      	movs	r0, #100	; 0x64
 8001ab2:	f001 fbbb 	bl	800322c <HAL_Delay>
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, GPIO_PIN_RESET);					// Auschalten von Shutdown-Circuit
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <testSDC+0x50>)
 8001abe:	f003 fa35 	bl	8004f2c <HAL_GPIO_WritePin>
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	20000040 	.word	0x20000040

08001ad0 <readTrottle>:
//----------------------------------------------------------------------

// Gaspedal auswerten
//----------------------------------------------------------------------
uint16_t readTrottle(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
	// Variablen anlegen
	uint16_t ADC_Gas = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	80fb      	strh	r3, [r7, #6]

	// Pruefen ob Variable Anlasser aktiv ist
	if (sdc_in.Anlasser == 1)												// Nur aktiv, wenn KL15 an und Anlasser einmal betaetigt.
 8001ada:	4b34      	ldr	r3, [pc, #208]	; (8001bac <readTrottle+0xdc>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d05c      	beq.n	8001ba2 <readTrottle+0xd2>
	{
		// Gaspedal einlesen
		ADC_Gas = ADC_Gaspedal();
 8001ae8:	f7ff f94a 	bl	8000d80 <ADC_Gaspedal>
 8001aec:	4603      	mov	r3, r0
 8001aee:	80fb      	strh	r3, [r7, #6]

		// Pruefen ob Kupplung getreten wurde
		if (system_in.Kupplung == 1)										// Wenn Kupplung nicht getreten wurde == 1
 8001af0:	4b2f      	ldr	r3, [pc, #188]	; (8001bb0 <readTrottle+0xe0>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	f003 0310 	and.w	r3, r3, #16
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d04f      	beq.n	8001b9e <readTrottle+0xce>
		{
			// Wenn Leerlauf und Kickdown aktiv Plausibilitaetsfehler
			if ((system_in.Leerlauf == 1) && (system_in.Kickdown == 1))
 8001afe:	4b2c      	ldr	r3, [pc, #176]	; (8001bb0 <readTrottle+0xe0>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00e      	beq.n	8001b2a <readTrottle+0x5a>
 8001b0c:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <readTrottle+0xe0>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <readTrottle+0x5a>
			{
				// Fehlermeldung auf Uart ausgeben
#define TROTTLE_INVALID				"Error_Gaspedal_1 Plausibilitaetsfehler: Kickdown und Leerlauf"
				uartTransmit(TROTTLE_INVALID, sizeof(TROTTLE_INVALID));
 8001b1a:	213e      	movs	r1, #62	; 0x3e
 8001b1c:	4825      	ldr	r0, [pc, #148]	; (8001bb4 <readTrottle+0xe4>)
 8001b1e:	f7fe fe4b 	bl	80007b8 <uartTransmit>
				// Gaspedal invalide
				software_error(ERROR_GASPEDAL);
 8001b22:	2001      	movs	r0, #1
 8001b24:	f7ff fb8e 	bl	8001244 <software_error>
 8001b28:	e03b      	b.n	8001ba2 <readTrottle+0xd2>
			}
			// Threshold Wert vergleichen / Threshold Wert >= THRESHOLD und Leerlauf aktiv
			else if ((system_in.Leerlauf == 1) && (ADC_Gas >= GAS_MIN_ADC))
 8001b2a:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <readTrottle+0xe0>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d008      	beq.n	8001b4a <readTrottle+0x7a>
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001b3e:	d304      	bcc.n	8001b4a <readTrottle+0x7a>
			{
				// Wenn Wert groesser THRESHOLD ist, dann THRESHOLD vom ADC-Wert abziehen
				ADC_Gas -= GAS_MIN_ADC;
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b46:	80fb      	strh	r3, [r7, #6]
 8001b48:	e02b      	b.n	8001ba2 <readTrottle+0xd2>
			}
			// Threshold Wert vergleichen / Threshold Wert < THRESHOLD und Leerlauf aktiv
			else if ((system_in.Leerlauf == 1) && (ADC_Gas < GAS_MIN_ADC))
 8001b4a:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <readTrottle+0xe0>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d006      	beq.n	8001b66 <readTrottle+0x96>
 8001b58:	88fb      	ldrh	r3, [r7, #6]
 8001b5a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001b5e:	d202      	bcs.n	8001b66 <readTrottle+0x96>
			{
				// Wenn der Wert kleine als THRESHOLD ist, dann ADC ignorieren, alle Werte sind 0
				ADC_Gas = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	80fb      	strh	r3, [r7, #6]
 8001b64:	e01d      	b.n	8001ba2 <readTrottle+0xd2>
			}
			// Threshold Wert vergleichen / Threshold Wert < THRESHOLD und Kickdown aktiv
			else if ((system_in.Kickdown == 1) && (ADC_Gas < (GAS_MAX_ADC - GAS_MIN_ADC)))
 8001b66:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <readTrottle+0xe0>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d004      	beq.n	8001b7e <readTrottle+0xae>
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	f640 62d2 	movw	r2, #3794	; 0xed2
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d911      	bls.n	8001ba2 <readTrottle+0xd2>
			{
				// Wenn Wert kleiner THRESHOLD ist

			}
			// Threshold Wert vergleichen / Threshold Wert > THRESHOLD und Kickdown aktiv
			else if ((system_in.Kickdown == 1) && (ADC_Gas >= (GAS_MAX_ADC - GAS_MIN_ADC)))
 8001b7e:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <readTrottle+0xe0>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00a      	beq.n	8001ba2 <readTrottle+0xd2>
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	f640 62d2 	movw	r2, #3794	; 0xed2
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d905      	bls.n	8001ba2 <readTrottle+0xd2>
			{
				// Wenn Wert gleich THRESHOLD ist
				ADC_Gas = GAS_MAX_ADC;
 8001b96:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001b9a:	80fb      	strh	r3, [r7, #6]
 8001b9c:	e001      	b.n	8001ba2 <readTrottle+0xd2>
		}
		// Wenn Kupplung getreten == 0
		else
		{
			// Wenn Kupplung oder Bremse getreten
			ADC_Gas = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	80fb      	strh	r3, [r7, #6]
		}
	}

	return ADC_Gas;
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000040 	.word	0x20000040
 8001bb0:	2000003c 	.word	0x2000003c
 8001bb4:	08008480 	.word	0x08008480

08001bb8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bbe:	463b      	mov	r3, r7
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001bca:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <MX_ADC1_Init+0x98>)
 8001bcc:	4a21      	ldr	r2, [pc, #132]	; (8001c54 <MX_ADC1_Init+0x9c>)
 8001bce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bd0:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <MX_ADC1_Init+0x98>)
 8001bd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bd6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bd8:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <MX_ADC1_Init+0x98>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bde:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <MX_ADC1_Init+0x98>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001be4:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <MX_ADC1_Init+0x98>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bea:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <MX_ADC1_Init+0x98>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bf2:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <MX_ADC1_Init+0x98>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bf8:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <MX_ADC1_Init+0x98>)
 8001bfa:	4a17      	ldr	r2, [pc, #92]	; (8001c58 <MX_ADC1_Init+0xa0>)
 8001bfc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bfe:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <MX_ADC1_Init+0x98>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <MX_ADC1_Init+0x98>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c0a:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <MX_ADC1_Init+0x98>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <MX_ADC1_Init+0x98>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c18:	480d      	ldr	r0, [pc, #52]	; (8001c50 <MX_ADC1_Init+0x98>)
 8001c1a:	f001 fb73 	bl	8003304 <HAL_ADC_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001c24:	f001 f8da 	bl	8002ddc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001c28:	230e      	movs	r3, #14
 8001c2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001c30:	2301      	movs	r3, #1
 8001c32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c34:	463b      	mov	r3, r7
 8001c36:	4619      	mov	r1, r3
 8001c38:	4805      	ldr	r0, [pc, #20]	; (8001c50 <MX_ADC1_Init+0x98>)
 8001c3a:	f001 fd41 	bl	80036c0 <HAL_ADC_ConfigChannel>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001c44:	f001 f8ca 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c48:	bf00      	nop
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000058 	.word	0x20000058
 8001c54:	40012000 	.word	0x40012000
 8001c58:	0f000001 	.word	0x0f000001

08001c5c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08c      	sub	sp, #48	; 0x30
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 031c 	add.w	r3, r7, #28
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a2d      	ldr	r2, [pc, #180]	; (8001d30 <HAL_ADC_MspInit+0xd4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d153      	bne.n	8001d26 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c7e:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <HAL_ADC_MspInit+0xd8>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	4a2c      	ldr	r2, [pc, #176]	; (8001d34 <HAL_ADC_MspInit+0xd8>)
 8001c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c88:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8a:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <HAL_ADC_MspInit+0xd8>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c92:	61bb      	str	r3, [r7, #24]
 8001c94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	4b27      	ldr	r3, [pc, #156]	; (8001d34 <HAL_ADC_MspInit+0xd8>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a26      	ldr	r2, [pc, #152]	; (8001d34 <HAL_ADC_MspInit+0xd8>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <HAL_ADC_MspInit+0xd8>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cae:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <HAL_ADC_MspInit+0xd8>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a20      	ldr	r2, [pc, #128]	; (8001d34 <HAL_ADC_MspInit+0xd8>)
 8001cb4:	f043 0304 	orr.w	r3, r3, #4
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <HAL_ADC_MspInit+0xd8>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc6:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <HAL_ADC_MspInit+0xd8>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a1a      	ldr	r2, [pc, #104]	; (8001d34 <HAL_ADC_MspInit+0xd8>)
 8001ccc:	f043 0302 	orr.w	r3, r3, #2
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <HAL_ADC_MspInit+0xd8>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SENSE_KL15_Pin|SENSE_KUEHLWASSER_Pin|SENSE_KLIMA_FLAP_Pin|SENSE_GAS_Pin
 8001cde:	23f8      	movs	r3, #248	; 0xf8
 8001ce0:	61fb      	str	r3, [r7, #28]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cea:	f107 031c 	add.w	r3, r7, #28
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4811      	ldr	r0, [pc, #68]	; (8001d38 <HAL_ADC_MspInit+0xdc>)
 8001cf2:	f002 ff57 	bl	8004ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_DRUCK_Pin|SENSE_DRUCK_TEMP_Pin;
 8001cf6:	2330      	movs	r3, #48	; 0x30
 8001cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	4619      	mov	r1, r3
 8001d08:	480c      	ldr	r0, [pc, #48]	; (8001d3c <HAL_ADC_MspInit+0xe0>)
 8001d0a:	f002 ff4b 	bl	8004ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_RETURN_Pin|SENSE_INFO_Pin;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d12:	2303      	movs	r3, #3
 8001d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1a:	f107 031c 	add.w	r3, r7, #28
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4807      	ldr	r0, [pc, #28]	; (8001d40 <HAL_ADC_MspInit+0xe4>)
 8001d22:	f002 ff3f 	bl	8004ba4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001d26:	bf00      	nop
 8001d28:	3730      	adds	r7, #48	; 0x30
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40012000 	.word	0x40012000
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	40020800 	.word	0x40020800
 8001d40:	40020400 	.word	0x40020400

08001d44 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001d48:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d4a:	4a18      	ldr	r2, [pc, #96]	; (8001dac <MX_CAN1_Init+0x68>)
 8001d4c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 30;
 8001d4e:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d50:	221e      	movs	r2, #30
 8001d52:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d54:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d5a:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d62:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001d66:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d6e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001d70:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001d76:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001d88:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001d94:	4804      	ldr	r0, [pc, #16]	; (8001da8 <MX_CAN1_Init+0x64>)
 8001d96:	f001 fee3 	bl	8003b60 <HAL_CAN_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001da0:	f001 f81c 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	200000c8 	.word	0x200000c8
 8001dac:	40006400 	.word	0x40006400

08001db0 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001db4:	4b33      	ldr	r3, [pc, #204]	; (8001e84 <MX_CAN3_Init+0xd4>)
 8001db6:	4a34      	ldr	r2, [pc, #208]	; (8001e88 <MX_CAN3_Init+0xd8>)
 8001db8:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001dba:	4b32      	ldr	r3, [pc, #200]	; (8001e84 <MX_CAN3_Init+0xd4>)
 8001dbc:	2206      	movs	r2, #6
 8001dbe:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001dc0:	4b30      	ldr	r3, [pc, #192]	; (8001e84 <MX_CAN3_Init+0xd4>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001dc6:	4b2f      	ldr	r3, [pc, #188]	; (8001e84 <MX_CAN3_Init+0xd4>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <MX_CAN3_Init+0xd4>)
 8001dce:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001dd2:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <MX_CAN3_Init+0xd4>)
 8001dd6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001dda:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001ddc:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <MX_CAN3_Init+0xd4>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001de2:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <MX_CAN3_Init+0xd4>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001de8:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <MX_CAN3_Init+0xd4>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001dee:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <MX_CAN3_Init+0xd4>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001df4:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <MX_CAN3_Init+0xd4>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001dfa:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <MX_CAN3_Init+0xd4>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001e00:	4820      	ldr	r0, [pc, #128]	; (8001e84 <MX_CAN3_Init+0xd4>)
 8001e02:	f001 fead 	bl	8003b60 <HAL_CAN_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001e0c:	f000 ffe6 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */
	// Starte CAN Bus
	if((HAL_CAN_Start(&hcan3)) != HAL_OK)
 8001e10:	481c      	ldr	r0, [pc, #112]	; (8001e84 <MX_CAN3_Init+0xd4>)
 8001e12:	f002 f88d 	bl	8003f30 <HAL_CAN_Start>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_CAN3_Init+0x70>
	{
		// Fehler beim Starten des CAN-Busses
		Error_Handler();
 8001e1c:	f000 ffde 	bl	8002ddc <Error_Handler>
	}

	// Aktiviere Interrupts fuer CAN Bus
	if((HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_FULL)) != HAL_OK)
 8001e20:	2104      	movs	r1, #4
 8001e22:	4818      	ldr	r0, [pc, #96]	; (8001e84 <MX_CAN3_Init+0xd4>)
 8001e24:	f002 face 	bl	80043c4 <HAL_CAN_ActivateNotification>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_CAN3_Init+0x82>
	{
		// Fehler in der Initialisierung des CAN Interrupts
		Error_Handler();
 8001e2e:	f000 ffd5 	bl	8002ddc <Error_Handler>
	}

	// Filter Bank initialisieren um Daten zu empfangen
	// Akzeptiere alle CAN-Pakete
	sFilterConfig.FilterBank = 0;
 8001e32:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <MX_CAN3_Init+0xdc>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001e38:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <MX_CAN3_Init+0xdc>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001e3e:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <MX_CAN3_Init+0xdc>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0111 << 5;
 8001e44:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <MX_CAN3_Init+0xdc>)
 8001e46:	f242 2220 	movw	r2, #8736	; 0x2220
 8001e4a:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0;
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <MX_CAN3_Init+0xdc>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0111 << 5;
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <MX_CAN3_Init+0xdc>)
 8001e54:	f242 2220 	movw	r2, #8736	; 0x2220
 8001e58:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0;
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <MX_CAN3_Init+0xdc>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = 0;
 8001e60:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <MX_CAN3_Init+0xdc>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <MX_CAN3_Init+0xdc>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	621a      	str	r2, [r3, #32]

	// Filter Bank schreiben
	if((HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 8001e6c:	4907      	ldr	r1, [pc, #28]	; (8001e8c <MX_CAN3_Init+0xdc>)
 8001e6e:	4805      	ldr	r0, [pc, #20]	; (8001e84 <MX_CAN3_Init+0xd4>)
 8001e70:	f001 ff72 	bl	8003d58 <HAL_CAN_ConfigFilter>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_CAN3_Init+0xce>
	{
		// Fehler beim konfigurieren der Filterbank fuer den CAN-Bus
		Error_Handler();
 8001e7a:	f000 ffaf 	bl	8002ddc <Error_Handler>
	}

  /* USER CODE END CAN3_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200000f0 	.word	0x200000f0
 8001e88:	40003400 	.word	0x40003400
 8001e8c:	200000a0 	.word	0x200000a0

08001e90 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08c      	sub	sp, #48	; 0x30
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 031c 	add.w	r3, r7, #28
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a32      	ldr	r2, [pc, #200]	; (8001f78 <HAL_CAN_MspInit+0xe8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d128      	bne.n	8001f04 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001eb2:	4b32      	ldr	r3, [pc, #200]	; (8001f7c <HAL_CAN_MspInit+0xec>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	4a31      	ldr	r2, [pc, #196]	; (8001f7c <HAL_CAN_MspInit+0xec>)
 8001eb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ebe:	4b2f      	ldr	r3, [pc, #188]	; (8001f7c <HAL_CAN_MspInit+0xec>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	61bb      	str	r3, [r7, #24]
 8001ec8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eca:	4b2c      	ldr	r3, [pc, #176]	; (8001f7c <HAL_CAN_MspInit+0xec>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a2b      	ldr	r2, [pc, #172]	; (8001f7c <HAL_CAN_MspInit+0xec>)
 8001ed0:	f043 0308 	orr.w	r3, r3, #8
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <HAL_CAN_MspInit+0xec>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ef2:	2309      	movs	r3, #9
 8001ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ef6:	f107 031c 	add.w	r3, r7, #28
 8001efa:	4619      	mov	r1, r3
 8001efc:	4820      	ldr	r0, [pc, #128]	; (8001f80 <HAL_CAN_MspInit+0xf0>)
 8001efe:	f002 fe51 	bl	8004ba4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001f02:	e035      	b.n	8001f70 <HAL_CAN_MspInit+0xe0>
  else if(canHandle->Instance==CAN3)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a1e      	ldr	r2, [pc, #120]	; (8001f84 <HAL_CAN_MspInit+0xf4>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d130      	bne.n	8001f70 <HAL_CAN_MspInit+0xe0>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_CAN_MspInit+0xec>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a1a      	ldr	r2, [pc, #104]	; (8001f7c <HAL_CAN_MspInit+0xec>)
 8001f14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <HAL_CAN_MspInit+0xec>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <HAL_CAN_MspInit+0xec>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a14      	ldr	r2, [pc, #80]	; (8001f7c <HAL_CAN_MspInit+0xec>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_CAN_MspInit+0xec>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ACAN_RX_Pin|ACAN_TX_Pin;
 8001f3e:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001f50:	230b      	movs	r3, #11
 8001f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f54:	f107 031c 	add.w	r3, r7, #28
 8001f58:	4619      	mov	r1, r3
 8001f5a:	480b      	ldr	r0, [pc, #44]	; (8001f88 <HAL_CAN_MspInit+0xf8>)
 8001f5c:	f002 fe22 	bl	8004ba4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 8001f60:	2200      	movs	r2, #0
 8001f62:	2100      	movs	r1, #0
 8001f64:	2069      	movs	r0, #105	; 0x69
 8001f66:	f002 fd54 	bl	8004a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 8001f6a:	2069      	movs	r0, #105	; 0x69
 8001f6c:	f002 fd6d 	bl	8004a4a <HAL_NVIC_EnableIRQ>
}
 8001f70:	bf00      	nop
 8001f72:	3730      	adds	r7, #48	; 0x30
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40006400 	.word	0x40006400
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020c00 	.word	0x40020c00
 8001f84:	40003400 	.word	0x40003400
 8001f88:	40020000 	.word	0x40020000

08001f8c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08e      	sub	sp, #56	; 0x38
 8001f90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	60da      	str	r2, [r3, #12]
 8001fa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fa2:	4bb6      	ldr	r3, [pc, #728]	; (800227c <MX_GPIO_Init+0x2f0>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4ab5      	ldr	r2, [pc, #724]	; (800227c <MX_GPIO_Init+0x2f0>)
 8001fa8:	f043 0310 	orr.w	r3, r3, #16
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4bb3      	ldr	r3, [pc, #716]	; (800227c <MX_GPIO_Init+0x2f0>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	623b      	str	r3, [r7, #32]
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fba:	4bb0      	ldr	r3, [pc, #704]	; (800227c <MX_GPIO_Init+0x2f0>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4aaf      	ldr	r2, [pc, #700]	; (800227c <MX_GPIO_Init+0x2f0>)
 8001fc0:	f043 0304 	orr.w	r3, r3, #4
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4bad      	ldr	r3, [pc, #692]	; (800227c <MX_GPIO_Init+0x2f0>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	61fb      	str	r3, [r7, #28]
 8001fd0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fd2:	4baa      	ldr	r3, [pc, #680]	; (800227c <MX_GPIO_Init+0x2f0>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4aa9      	ldr	r2, [pc, #676]	; (800227c <MX_GPIO_Init+0x2f0>)
 8001fd8:	f043 0320 	orr.w	r3, r3, #32
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4ba7      	ldr	r3, [pc, #668]	; (800227c <MX_GPIO_Init+0x2f0>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0320 	and.w	r3, r3, #32
 8001fe6:	61bb      	str	r3, [r7, #24]
 8001fe8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fea:	4ba4      	ldr	r3, [pc, #656]	; (800227c <MX_GPIO_Init+0x2f0>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	4aa3      	ldr	r2, [pc, #652]	; (800227c <MX_GPIO_Init+0x2f0>)
 8001ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff6:	4ba1      	ldr	r3, [pc, #644]	; (800227c <MX_GPIO_Init+0x2f0>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	4b9e      	ldr	r3, [pc, #632]	; (800227c <MX_GPIO_Init+0x2f0>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	4a9d      	ldr	r2, [pc, #628]	; (800227c <MX_GPIO_Init+0x2f0>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6313      	str	r3, [r2, #48]	; 0x30
 800200e:	4b9b      	ldr	r3, [pc, #620]	; (800227c <MX_GPIO_Init+0x2f0>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800201a:	4b98      	ldr	r3, [pc, #608]	; (800227c <MX_GPIO_Init+0x2f0>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a97      	ldr	r2, [pc, #604]	; (800227c <MX_GPIO_Init+0x2f0>)
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b95      	ldr	r3, [pc, #596]	; (800227c <MX_GPIO_Init+0x2f0>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002032:	4b92      	ldr	r3, [pc, #584]	; (800227c <MX_GPIO_Init+0x2f0>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a91      	ldr	r2, [pc, #580]	; (800227c <MX_GPIO_Init+0x2f0>)
 8002038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b8f      	ldr	r3, [pc, #572]	; (800227c <MX_GPIO_Init+0x2f0>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800204a:	4b8c      	ldr	r3, [pc, #560]	; (800227c <MX_GPIO_Init+0x2f0>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a8b      	ldr	r2, [pc, #556]	; (800227c <MX_GPIO_Init+0x2f0>)
 8002050:	f043 0308 	orr.w	r3, r3, #8
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b89      	ldr	r3, [pc, #548]	; (800227c <MX_GPIO_Init+0x2f0>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 8002062:	2200      	movs	r2, #0
 8002064:	f248 0187 	movw	r1, #32903	; 0x8087
 8002068:	4885      	ldr	r0, [pc, #532]	; (8002280 <MX_GPIO_Init+0x2f4>)
 800206a:	f002 ff5f 	bl	8004f2c <HAL_GPIO_WritePin>
                          |DIGITAL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_ON_Pin|WS2812_Pin, GPIO_PIN_RESET);
 800206e:	2200      	movs	r2, #0
 8002070:	f242 0108 	movw	r1, #8200	; 0x2008
 8002074:	4883      	ldr	r0, [pc, #524]	; (8002284 <MX_GPIO_Init+0x2f8>)
 8002076:	f002 ff59 	bl	8004f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 800207a:	2200      	movs	r2, #0
 800207c:	f24f 013c 	movw	r1, #61500	; 0xf03c
 8002080:	4881      	ldr	r0, [pc, #516]	; (8002288 <MX_GPIO_Init+0x2fc>)
 8002082:	f002 ff53 	bl	8004f2c <HAL_GPIO_WritePin>
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 8002086:	2200      	movs	r2, #0
 8002088:	f647 0194 	movw	r1, #30868	; 0x7894
 800208c:	487f      	ldr	r0, [pc, #508]	; (800228c <MX_GPIO_Init+0x300>)
 800208e:	f002 ff4d 	bl	8004f2c <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 8002092:	2200      	movs	r2, #0
 8002094:	f64e 2188 	movw	r1, #60040	; 0xea88
 8002098:	487d      	ldr	r0, [pc, #500]	; (8002290 <MX_GPIO_Init+0x304>)
 800209a:	f002 ff47 	bl	8004f2c <HAL_GPIO_WritePin>
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|RUECKWARNUNG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 800209e:	2200      	movs	r2, #0
 80020a0:	f64e 610c 	movw	r1, #60940	; 0xee0c
 80020a4:	487b      	ldr	r0, [pc, #492]	; (8002294 <MX_GPIO_Init+0x308>)
 80020a6:	f002 ff41 	bl	8004f2c <HAL_GPIO_WritePin>
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_RESET);
 80020aa:	2200      	movs	r2, #0
 80020ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020b0:	4879      	ldr	r0, [pc, #484]	; (8002298 <MX_GPIO_Init+0x30c>)
 80020b2:	f002 ff3b 	bl	8004f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 80020b6:	f248 0387 	movw	r3, #32903	; 0x8087
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
                          |DIGITAL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020bc:	2301      	movs	r3, #1
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2300      	movs	r3, #0
 80020c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020cc:	4619      	mov	r1, r3
 80020ce:	486c      	ldr	r0, [pc, #432]	; (8002280 <MX_GPIO_Init+0x2f4>)
 80020d0:	f002 fd68 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ECO_Pin|BC_DOWN_IN_Pin|DURCHFLUSS_Pin|BUTTON2_Pin
 80020d4:	f647 7378 	movw	r3, #32632	; 0x7f78
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
                          |KICKDOWN_Pin|LEERLAUF_Pin|KUPPLUNG_NO_Pin|BREMSE_NC_Pin
                          |BREMSE_NO_Pin|SENSE_SDC_AKKU_Pin|SENSE_SDC_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020da:	2300      	movs	r3, #0
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e6:	4619      	mov	r1, r3
 80020e8:	4865      	ldr	r0, [pc, #404]	; (8002280 <MX_GPIO_Init+0x2f4>)
 80020ea:	f002 fd5b 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 80020ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f4:	2301      	movs	r3, #1
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fc:	2300      	movs	r3, #0
 80020fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8002100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002104:	4619      	mov	r1, r3
 8002106:	485f      	ldr	r0, [pc, #380]	; (8002284 <MX_GPIO_Init+0x2f8>)
 8002108:	f002 fd4c 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 800210c:	f64d 7347 	movw	r3, #57159	; 0xdf47
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|SD_SW_Pin|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002112:	2303      	movs	r3, #3
 8002114:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800211a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211e:	4619      	mov	r1, r3
 8002120:	4858      	ldr	r0, [pc, #352]	; (8002284 <MX_GPIO_Init+0x2f8>)
 8002122:	f002 fd3f 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|ECON_Pin|RECUPERATION_Pin;
 8002126:	f640 0303 	movw	r3, #2051	; 0x803
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800212c:	2300      	movs	r3, #0
 800212e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002138:	4619      	mov	r1, r3
 800213a:	4853      	ldr	r0, [pc, #332]	; (8002288 <MX_GPIO_Init+0x2fc>)
 800213c:	f002 fd32 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 8002140:	f24f 033c 	movw	r3, #61500	; 0xf03c
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002146:	2301      	movs	r3, #1
 8002148:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002156:	4619      	mov	r1, r3
 8002158:	484b      	ldr	r0, [pc, #300]	; (8002288 <MX_GPIO_Init+0x2fc>)
 800215a:	f002 fd23 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PF10 */
  GPIO_InitStruct.Pin = SPI5_CS_Pin|SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin
 800215e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002164:	2303      	movs	r3, #3
 8002166:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800216c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002170:	4619      	mov	r1, r3
 8002172:	4845      	ldr	r0, [pc, #276]	; (8002288 <MX_GPIO_Init+0x2fc>)
 8002174:	f002 fd16 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS2812_Pin;
 8002178:	2308      	movs	r3, #8
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217c:	2301      	movs	r3, #1
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002184:	2302      	movs	r3, #2
 8002186:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 8002188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800218c:	4619      	mov	r1, r3
 800218e:	483d      	ldr	r0, [pc, #244]	; (8002284 <MX_GPIO_Init+0x2f8>)
 8002190:	f002 fd08 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|EMERGENCY_RUN_Pin|HW_WAKE_Pin|OUTA_Pin
 8002194:	f640 6307 	movw	r3, #3591	; 0xe07
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTB_Pin|BC_UP_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800219a:	2300      	movs	r3, #0
 800219c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a6:	4619      	mov	r1, r3
 80021a8:	483b      	ldr	r0, [pc, #236]	; (8002298 <MX_GPIO_Init+0x30c>)
 80021aa:	f002 fcfb 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 80021ae:	f647 0394 	movw	r3, #30868	; 0x7894
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b4:	2301      	movs	r3, #1
 80021b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021bc:	2300      	movs	r3, #0
 80021be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c4:	4619      	mov	r1, r3
 80021c6:	4831      	ldr	r0, [pc, #196]	; (800228c <MX_GPIO_Init+0x300>)
 80021c8:	f002 fcec 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DCDC_INSTRUCTION_Pin|DCDC_FAULT_Pin|ASR_IN1_Pin|GRA1_Pin
 80021cc:	f241 13f3 	movw	r3, #4595	; 0x11f3
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GRA2_Pin|GRA3_Pin|GRA4_Pin|BC_RESET_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021d2:	2300      	movs	r3, #0
 80021d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021de:	4619      	mov	r1, r3
 80021e0:	482c      	ldr	r0, [pc, #176]	; (8002294 <MX_GPIO_Init+0x308>)
 80021e2:	f002 fcdf 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSE_SDC_BTB_Pin|BAMOCAR_IN2_Pin;
 80021e6:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ec:	2300      	movs	r3, #0
 80021ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f8:	4619      	mov	r1, r3
 80021fa:	4824      	ldr	r0, [pc, #144]	; (800228c <MX_GPIO_Init+0x300>)
 80021fc:	f002 fcd2 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KL15_Pin|ANLASSER_Pin|BAMOCAR_IN1_Pin|ASR_IN2_Pin;
 8002200:	f241 5310 	movw	r3, #5392	; 0x1510
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002206:	2300      	movs	r3, #0
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800220e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002212:	4619      	mov	r1, r3
 8002214:	481e      	ldr	r0, [pc, #120]	; (8002290 <MX_GPIO_Init+0x304>)
 8002216:	f002 fcc5 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 800221a:	f64e 2388 	movw	r3, #60040	; 0xea88
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|RUECKWARNUNG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002220:	2301      	movs	r3, #1
 8002222:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2300      	movs	r3, #0
 800222a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800222c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002230:	4619      	mov	r1, r3
 8002232:	4817      	ldr	r0, [pc, #92]	; (8002290 <MX_GPIO_Init+0x304>)
 8002234:	f002 fcb6 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 8002238:	f64e 630c 	movw	r3, #60940	; 0xee0c
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223e:	2301      	movs	r3, #1
 8002240:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002246:	2300      	movs	r3, #0
 8002248:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800224a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224e:	4619      	mov	r1, r3
 8002250:	4810      	ldr	r0, [pc, #64]	; (8002294 <MX_GPIO_Init+0x308>)
 8002252:	f002 fca7 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800225a:	2300      	movs	r3, #0
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 8002262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002266:	4619      	mov	r1, r3
 8002268:	4806      	ldr	r0, [pc, #24]	; (8002284 <MX_GPIO_Init+0x2f8>)
 800226a:	f002 fc9b 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OELSTAND_TEMP_Pin;
 800226e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002274:	2301      	movs	r3, #1
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	e00f      	b.n	800229c <MX_GPIO_Init+0x310>
 800227c:	40023800 	.word	0x40023800
 8002280:	40021000 	.word	0x40021000
 8002284:	40020800 	.word	0x40020800
 8002288:	40021400 	.word	0x40021400
 800228c:	40020400 	.word	0x40020400
 8002290:	40020c00 	.word	0x40020c00
 8002294:	40021800 	.word	0x40021800
 8002298:	40020000 	.word	0x40020000
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2300      	movs	r3, #0
 80022a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OELSTAND_TEMP_GPIO_Port, &GPIO_InitStruct);
 80022a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a6:	4619      	mov	r1, r3
 80022a8:	480f      	ldr	r0, [pc, #60]	; (80022e8 <MX_GPIO_Init+0x35c>)
 80022aa:	f002 fc7b 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CMD_Pin;
 80022ae:	2304      	movs	r3, #4
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022b2:	2303      	movs	r3, #3
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 80022ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022be:	4619      	mov	r1, r3
 80022c0:	480a      	ldr	r0, [pc, #40]	; (80022ec <MX_GPIO_Init+0x360>)
 80022c2:	f002 fc6f 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CAN2_TX_Pin|CAN2_RX_Pin|I2C1_SCL_Pin|I2C1_SDA_Pin;
 80022c6:	f44f 7358 	mov.w	r3, #864	; 0x360
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022cc:	2303      	movs	r3, #3
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d8:	4619      	mov	r1, r3
 80022da:	4805      	ldr	r0, [pc, #20]	; (80022f0 <MX_GPIO_Init+0x364>)
 80022dc:	f002 fc62 	bl	8004ba4 <HAL_GPIO_Init>

}
 80022e0:	bf00      	nop
 80022e2:	3738      	adds	r7, #56	; 0x38
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40020000 	.word	0x40020000
 80022ec:	40020c00 	.word	0x40020c00
 80022f0:	40020400 	.word	0x40020400

080022f4 <__NVIC_SystemReset>:
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022f8:	f3bf 8f4f 	dsb	sy
}
 80022fc:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <__NVIC_SystemReset+0x24>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002306:	4904      	ldr	r1, [pc, #16]	; (8002318 <__NVIC_SystemReset+0x24>)
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <__NVIC_SystemReset+0x28>)
 800230a:	4313      	orrs	r3, r2
 800230c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800230e:	f3bf 8f4f 	dsb	sy
}
 8002312:	bf00      	nop
    __NOP();
 8002314:	bf00      	nop
 8002316:	e7fd      	b.n	8002314 <__NVIC_SystemReset+0x20>
 8002318:	e000ed00 	.word	0xe000ed00
 800231c:	05fa0004 	.word	0x05fa0004

08002320 <ITM_SendChar>:
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002328:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800232c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b00      	cmp	r3, #0
 8002336:	d013      	beq.n	8002360 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002338:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800233c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002340:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00b      	beq.n	8002360 <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 8002348:	e000      	b.n	800234c <ITM_SendChar+0x2c>
      __NOP();
 800234a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800234c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f9      	beq.n	800234a <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002356:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	701a      	strb	r2, [r3, #0]
  return (ch);
 8002360:	687b      	ldr	r3, [r7, #4]
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002370:	b5b0      	push	{r4, r5, r7, lr}
 8002372:	b0c0      	sub	sp, #256	; 0x100
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t ADC_VAL[10] = {0};
 8002376:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	605a      	str	r2, [r3, #4]
 8002380:	609a      	str	r2, [r3, #8]
 8002382:	60da      	str	r2, [r3, #12]
 8002384:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002386:	f000 fef4 	bl	8003172 <HAL_Init>

  /* USER CODE BEGIN Init */

	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[6] = {0}, InData[6] = {0}, AnalogData[8] = {0}, TempData[8] = {0};
 800238a:	2300      	movs	r3, #0
 800238c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002390:	2300      	movs	r3, #0
 8002392:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 8002396:	2300      	movs	r3, #0
 8002398:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800239c:	2300      	movs	r3, #0
 800239e:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 80023a2:	2300      	movs	r3, #0
 80023a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023a8:	2300      	movs	r3, #0
 80023aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80023ae:	2300      	movs	r3, #0
 80023b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	uint8_t status, tmp[4], task = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	uint16_t count = 0, gas_adc = 0, gas_mean = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
 80023c6:	2300      	movs	r3, #0
 80023c8:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 80023cc:	2300      	movs	r3, #0
 80023ce:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
  	uint32_t lastcan = 0, lastsendcan = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80023d8:	2300      	movs	r3, #0
 80023da:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

  	// Erstelle Can-Nachrichten
    // Sendenachricht erstellen
  	CAN_TxHeaderTypeDef TxMessage = {0x123, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 80023de:	4ba5      	ldr	r3, [pc, #660]	; (8002674 <main+0x304>)
 80023e0:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80023e4:	461d      	mov	r5, r3
 80023e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80023ee:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet digitale Ausgaenge erstellen
  	CAN_TxHeaderTypeDef TxOutput = {MOTOR_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 6, DISABLE};
 80023f2:	4ba1      	ldr	r3, [pc, #644]	; (8002678 <main+0x308>)
 80023f4:	f107 0478 	add.w	r4, r7, #120	; 0x78
 80023f8:	461d      	mov	r5, r3
 80023fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002402:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet digitale Eingaenge erstellen
  	CAN_TxHeaderTypeDef TxInput = {MOTOR_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 6, DISABLE};
 8002406:	4b9d      	ldr	r3, [pc, #628]	; (800267c <main+0x30c>)
 8002408:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800240c:	461d      	mov	r5, r3
 800240e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002410:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002412:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002416:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet Motor1 erstellen
  	CAN_TxHeaderTypeDef TxMotor1 = {MOTOR_CAN_DREHZAHL, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 800241a:	4b99      	ldr	r3, [pc, #612]	; (8002680 <main+0x310>)
 800241c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002420:	461d      	mov	r5, r3
 8002422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002426:	e895 0003 	ldmia.w	r5, {r0, r1}
 800242a:	e884 0003 	stmia.w	r4, {r0, r1}
  	// Sendenachricht Motorsteuergeraet an Bamocar erstellen
  	CAN_TxHeaderTypeDef TxBamocar = {BAMOCAR_TX_ID, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 800242e:	4b95      	ldr	r3, [pc, #596]	; (8002684 <main+0x314>)
 8002430:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8002434:	461d      	mov	r5, r3
 8002436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800243a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800243e:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet analoge Eingaenge erstellen
  	CAN_TxHeaderTypeDef TxAnalog = {MOTOR_CAN_ANALOG_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8002442:	4b91      	ldr	r3, [pc, #580]	; (8002688 <main+0x318>)
 8002444:	f107 0418 	add.w	r4, r7, #24
 8002448:	461d      	mov	r5, r3
 800244a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800244c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800244e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002452:	e884 0003 	stmia.w	r4, {r0, r1}
  	// Sendenachricht Motorsteuergeraet Temperatur Eingaenge erstellen
  	CAN_TxHeaderTypeDef TxTemperatur = {MOTOR_CAN_TEMPERATUR, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8002456:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800245a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800245e:	4a8b      	ldr	r2, [pc, #556]	; (800268c <main+0x31c>)
 8002460:	461c      	mov	r4, r3
 8002462:	4615      	mov	r5, r2
 8002464:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002468:	e895 0003 	ldmia.w	r5, {r0, r1}
 800246c:	e884 0003 	stmia.w	r4, {r0, r1}

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002470:	f000 fb46 	bl	8002b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002474:	f7ff fd8a 	bl	8001f8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002478:	f000 fdbc 	bl	8002ff4 <MX_USART2_UART_Init>
  MX_CAN3_Init();
 800247c:	f7ff fc98 	bl	8001db0 <MX_CAN3_Init>
  MX_ADC1_Init();
 8002480:	f7ff fb9a 	bl	8001bb8 <MX_ADC1_Init>
  MX_TIM6_Init();
 8002484:	f000 fd5a 	bl	8002f3c <MX_TIM6_Init>
  MX_CAN1_Init();
 8002488:	f7ff fc5c 	bl	8001d44 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  // ITM HCLK
  ITM_SendChar('H');
 800248c:	2048      	movs	r0, #72	; 0x48
 800248e:	f7ff ff47 	bl	8002320 <ITM_SendChar>
  ITM_SendChar('a');
 8002492:	2061      	movs	r0, #97	; 0x61
 8002494:	f7ff ff44 	bl	8002320 <ITM_SendChar>
  ITM_SendChar('l');
 8002498:	206c      	movs	r0, #108	; 0x6c
 800249a:	f7ff ff41 	bl	8002320 <ITM_SendChar>
  ITM_SendChar('l');
 800249e:	206c      	movs	r0, #108	; 0x6c
 80024a0:	f7ff ff3e 	bl	8002320 <ITM_SendChar>
  ITM_SendChar('o');
 80024a4:	206f      	movs	r0, #111	; 0x6f
 80024a6:	f7ff ff3b 	bl	8002320 <ITM_SendChar>
  ITM_SendChar(' ');
 80024aa:	2020      	movs	r0, #32
 80024ac:	f7ff ff38 	bl	8002320 <ITM_SendChar>

  	// Start Timer 6 Interrupt
  	HAL_TIM_Base_Start_IT(&htim6);
 80024b0:	4877      	ldr	r0, [pc, #476]	; (8002690 <main+0x320>)
 80024b2:	f003 fed3 	bl	800625c <HAL_TIM_Base_Start_IT>
  	HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer[uart_count], 1);
 80024b6:	4b77      	ldr	r3, [pc, #476]	; (8002694 <main+0x324>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	461a      	mov	r2, r3
 80024bc:	4b76      	ldr	r3, [pc, #472]	; (8002698 <main+0x328>)
 80024be:	4413      	add	r3, r2
 80024c0:	2201      	movs	r2, #1
 80024c2:	4619      	mov	r1, r3
 80024c4:	4875      	ldr	r0, [pc, #468]	; (800269c <main+0x32c>)
 80024c6:	f004 faa6 	bl	8006a16 <HAL_UART_Receive_IT>

  	// Schreibe Resetquelle auf die Konsole
#ifdef DEBUG
	printResetSource(readResetSource());
 80024ca:	f7fe fb6f 	bl	8000bac <readResetSource>
 80024ce:	4603      	mov	r3, r0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe fbbd 	bl	8000c50 <printResetSource>

  	// Teste serielle Schnittstelle
  	#define TEST_STRING_UART	"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
  	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 80024d6:	213a      	movs	r1, #58	; 0x3a
 80024d8:	4871      	ldr	r0, [pc, #452]	; (80026a0 <main+0x330>)
 80024da:	f7fe f96d 	bl	80007b8 <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 80024de:	f7fe fb3b 	bl	8000b58 <collectSystemInfo>
#endif

	// Leds Testen
  	testPCB_Leds();
 80024e2:	f7ff f9dd 	bl	80018a0 <testPCB_Leds>
	testCockpit_Leds();
 80024e6:	f7ff fa19 	bl	800191c <testCockpit_Leds>

  	// Testen der Versorgungsspannung am Shutdown-Circuit
  	testSDC();
 80024ea:	f7ff fac5 	bl	8001a78 <testSDC>

  	// Alle Fehler Cockpit loeschen
  	cockpit_default();
 80024ee:	f7ff fa79 	bl	80019e4 <cockpit_default>
  	// Setze LED Green
  	leuchten_out.GreenLed = 1;
 80024f2:	4a6c      	ldr	r2, [pc, #432]	; (80026a4 <main+0x334>)
 80024f4:	7853      	ldrb	r3, [r2, #1]
 80024f6:	f043 0310 	orr.w	r3, r3, #16
 80024fa:	7053      	strb	r3, [r2, #1]
  	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 80024fc:	4b69      	ldr	r3, [pc, #420]	; (80026a4 <main+0x334>)
 80024fe:	785b      	ldrb	r3, [r3, #1]
 8002500:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002504:	b2db      	uxtb	r3, r3
 8002506:	461a      	mov	r2, r3
 8002508:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800250c:	4866      	ldr	r0, [pc, #408]	; (80026a8 <main+0x338>)
 800250e:	f002 fd0d 	bl	8004f2c <HAL_GPIO_WritePin>

  	// Lese alle Eingaenge
  	readall_inputs();
 8002512:	f7fe ff75 	bl	8001400 <readall_inputs>

    // Sendenachricht 0x123 mit Dummy-Daten fuellen
  	for (uint8_t j = 0; j < 8; j++)
 8002516:	2300      	movs	r3, #0
 8002518:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800251c:	e00f      	b.n	800253e <main+0x1ce>
  		TxData[j] = (j + 1);
 800251e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8002522:	f897 20ef 	ldrb.w	r2, [r7, #239]	; 0xef
 8002526:	3201      	adds	r2, #1
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800252e:	443b      	add	r3, r7
 8002530:	f803 2c34 	strb.w	r2, [r3, #-52]
  	for (uint8_t j = 0; j < 8; j++)
 8002534:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8002538:	3301      	adds	r3, #1
 800253a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800253e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8002542:	2b07      	cmp	r3, #7
 8002544:	d9eb      	bls.n	800251e <main+0x1ae>

  	// Starte While-Schleife
#define MAINWHILE				"\nStarte While Schleife\n"
  	uartTransmit(MAINWHILE, sizeof(MAINWHILE));
 8002546:	2118      	movs	r1, #24
 8002548:	4858      	ldr	r0, [pc, #352]	; (80026ac <main+0x33c>)
 800254a:	f7fe f935 	bl	80007b8 <uartTransmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	switch (UART2_msg[0])
 800254e:	4b58      	ldr	r3, [pc, #352]	; (80026b0 <main+0x340>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d002      	beq.n	800255c <main+0x1ec>
 8002556:	2b02      	cmp	r3, #2
 8002558:	d008      	beq.n	800256c <main+0x1fc>
				break;
	  		case 2:
	  			UART2_msg[0] = 0;
				break;
			default:
				break;
 800255a:	e00b      	b.n	8002574 <main+0x204>
				HAL_UART_Transmit(&huart2, (uint8_t*)"\nSystem Reset\r\n", 15, 100);
 800255c:	2364      	movs	r3, #100	; 0x64
 800255e:	220f      	movs	r2, #15
 8002560:	4954      	ldr	r1, [pc, #336]	; (80026b4 <main+0x344>)
 8002562:	484e      	ldr	r0, [pc, #312]	; (800269c <main+0x32c>)
 8002564:	f004 f9d4 	bl	8006910 <HAL_UART_Transmit>
				NVIC_SystemReset();
 8002568:	f7ff fec4 	bl	80022f4 <__NVIC_SystemReset>
	  			UART2_msg[0] = 0;
 800256c:	4b50      	ldr	r3, [pc, #320]	; (80026b0 <main+0x340>)
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]
				break;
 8002572:	bf00      	nop
		}
	  	// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 8002574:	4b50      	ldr	r3, [pc, #320]	; (80026b8 <main+0x348>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b01      	cmp	r3, #1
 800257c:	d10a      	bne.n	8002594 <main+0x224>
		{
			count++;																	// Zaehler count hochzaehlen
 800257e:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8002582:	3301      	adds	r3, #1
 8002584:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
			millisekunden_flag_1 = 0;													// Setze Millisekunden-Flag zurueck
 8002588:	4b4b      	ldr	r3, [pc, #300]	; (80026b8 <main+0x348>)
 800258a:	2200      	movs	r2, #0
 800258c:	701a      	strb	r2, [r3, #0]

			// Setze Flag start, nur wenn millisekunden Flag gesetzt war
			task = 1;
 800258e:	2301      	movs	r3, #1
 8002590:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
		}

		// PWM Oelstandsensor Kombiinstrument ausgeben
		pwm_oelstand(count);
 8002594:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff f9ed 	bl	8001978 <pwm_oelstand>

		// Task wird alle 20 Millisekunden ausgefuehrt
		if (((count % 20) == 0) && (task == 1))
 800259e:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 80025a2:	4b46      	ldr	r3, [pc, #280]	; (80026bc <main+0x34c>)
 80025a4:	fba3 1302 	umull	r1, r3, r3, r2
 80025a8:	0919      	lsrs	r1, r3, #4
 80025aa:	460b      	mov	r3, r1
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d12b      	bne.n	8002612 <main+0x2a2>
 80025ba:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d127      	bne.n	8002612 <main+0x2a2>
		{
			// Sende Nachricht Motor1
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMotor1, motor280.output, (uint32_t *)CAN_TX_MAILBOX0);
 80025c2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80025c6:	2301      	movs	r3, #1
 80025c8:	4a3d      	ldr	r2, [pc, #244]	; (80026c0 <main+0x350>)
 80025ca:	483e      	ldr	r0, [pc, #248]	; (80026c4 <main+0x354>)
 80025cc:	f001 fcf4 	bl	8003fb8 <HAL_CAN_AddTxMessage>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 80025d6:	bf00      	nop
 80025d8:	2101      	movs	r1, #1
 80025da:	483a      	ldr	r0, [pc, #232]	; (80026c4 <main+0x354>)
 80025dc:	f001 fdbc 	bl	8004158 <HAL_CAN_IsTxMessagePending>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d0f8      	beq.n	80025d8 <main+0x268>
			tmp[0] = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
			tmp[1] = 1;
 80025ec:	2301      	movs	r3, #1
 80025ee:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9

			status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
 80025f2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80025f6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80025fa:	2301      	movs	r3, #1
 80025fc:	4831      	ldr	r0, [pc, #196]	; (80026c4 <main+0x354>)
 80025fe:	f001 fcdb 	bl	8003fb8 <HAL_CAN_AddTxMessage>
 8002602:	4603      	mov	r3, r0
 8002604:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
			hal_error(status);
 8002608:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 800260c:	4618      	mov	r0, r3
 800260e:	f7fe fe0d 	bl	800122c <hal_error>
		}

		// Task wird alle 100 Millisekunden ausgefuehrt
		if (((count % 100) == 0) && (task == 1))
 8002612:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8002616:	4a2c      	ldr	r2, [pc, #176]	; (80026c8 <main+0x358>)
 8002618:	fba2 1203 	umull	r1, r2, r2, r3
 800261c:	0952      	lsrs	r2, r2, #5
 800261e:	2164      	movs	r1, #100	; 0x64
 8002620:	fb01 f202 	mul.w	r2, r1, r2
 8002624:	1a9b      	subs	r3, r3, r2
 8002626:	b29b      	uxth	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d16e      	bne.n	800270a <main+0x39a>
 800262c:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8002630:	2b01      	cmp	r3, #1
 8002632:	d16a      	bne.n	800270a <main+0x39a>
		{
			// alle Inputs einlesen
			readall_inputs();
 8002634:	f7fe fee4 	bl	8001400 <readall_inputs>

			// Anlasser abfragen
			readAnlasser();
 8002638:	f7ff f8fe 	bl	8001838 <readAnlasser>

			// Bremse pruefen
			//readBrake();

			// Gaspedal pruefen
			gas_adc = readTrottle();
 800263c:	f7ff fa48 	bl	8001ad0 <readTrottle>
 8002640:	4603      	mov	r3, r0
 8002642:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec

			// Abfrage ob Mittelwertbildung
			if (gas_adc > 0)															// Wenn Gaspedal Plausible dann Mittelwertbildung
 8002646:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 800264a:	2b00      	cmp	r3, #0
 800264c:	d040      	beq.n	80026d0 <main+0x360>
			{
				// Mittelwert bilden (https://nestedsoftware.com/2018/03/20/calculating-a-moving-average-on-streaming-data-5a7k.22879.html)
				// Mittelwertbildung aus 10 Werten (Weniger die 10 verkleineren, Mehr die 10 vergroeßern)
				gas_mean = (gas_mean + ((gas_adc - gas_mean)/10));
 800264e:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	; 0xec
 8002652:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	4a1c      	ldr	r2, [pc, #112]	; (80026cc <main+0x35c>)
 800265a:	fb82 1203 	smull	r1, r2, r2, r3
 800265e:	1092      	asrs	r2, r2, #2
 8002660:	17db      	asrs	r3, r3, #31
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	b29a      	uxth	r2, r3
 8002666:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 800266a:	4413      	add	r3, r2
 800266c:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
 8002670:	e031      	b.n	80026d6 <main+0x366>
 8002672:	bf00      	nop
 8002674:	08008560 	.word	0x08008560
 8002678:	08008578 	.word	0x08008578
 800267c:	08008590 	.word	0x08008590
 8002680:	080085a8 	.word	0x080085a8
 8002684:	080085c0 	.word	0x080085c0
 8002688:	080085d8 	.word	0x080085d8
 800268c:	080085f0 	.word	0x080085f0
 8002690:	20000164 	.word	0x20000164
 8002694:	2000014c 	.word	0x2000014c
 8002698:	20000134 	.word	0x20000134
 800269c:	200001b0 	.word	0x200001b0
 80026a0:	080084c0 	.word	0x080084c0
 80026a4:	20000050 	.word	0x20000050
 80026a8:	40020400 	.word	0x40020400
 80026ac:	080084fc 	.word	0x080084fc
 80026b0:	20000140 	.word	0x20000140
 80026b4:	08008514 	.word	0x08008514
 80026b8:	20000158 	.word	0x20000158
 80026bc:	cccccccd 	.word	0xcccccccd
 80026c0:	2000015c 	.word	0x2000015c
 80026c4:	200000f0 	.word	0x200000f0
 80026c8:	51eb851f 	.word	0x51eb851f
 80026cc:	66666667 	.word	0x66666667
			}
			else																		// Wenn Gaspedal unplausible oder Kupplung getreten
			{
				gas_mean = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
			}

			// Daten in Bamocarformat umwandeln
			tmp[0] = 0x90;
 80026d6:	2390      	movs	r3, #144	; 0x90
 80026d8:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
			tmp[1] = (gas_mean);
 80026dc:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			tmp[2] = ((gas_mean) >> 8);
 80026e6:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 80026ea:	0a1b      	lsrs	r3, r3, #8
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa

			// Drehmoment an Bamocar senden
			status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
 80026f4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80026f8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80026fc:	2301      	movs	r3, #1
 80026fe:	48bb      	ldr	r0, [pc, #748]	; (80029ec <main+0x67c>)
 8002700:	f001 fc5a 	bl	8003fb8 <HAL_CAN_AddTxMessage>
 8002704:	4603      	mov	r3, r0
 8002706:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
			//hal_error(status);
		}

		// Task wird alle 200 Millisekunden ausgefuehrt
		if (((count % 200) == 0) && (task == 1))
 800270a:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 800270e:	4ab8      	ldr	r2, [pc, #736]	; (80029f0 <main+0x680>)
 8002710:	fba2 1203 	umull	r1, r2, r2, r3
 8002714:	0992      	lsrs	r2, r2, #6
 8002716:	21c8      	movs	r1, #200	; 0xc8
 8002718:	fb01 f202 	mul.w	r2, r1, r2
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	f040 8129 	bne.w	8002978 <main+0x608>
 8002726:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800272a:	2b01      	cmp	r3, #1
 800272c:	f040 8124 	bne.w	8002978 <main+0x608>
		{
			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 8002730:	4bb0      	ldr	r3, [pc, #704]	; (80029f4 <main+0x684>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
			OutData[1] = highcurrent_out.high_out;
 8002738:	4baf      	ldr	r3, [pc, #700]	; (80029f8 <main+0x688>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
			OutData[2] = (leuchten_out.ledoutput >> 8);
 8002740:	4bae      	ldr	r3, [pc, #696]	; (80029fc <main+0x68c>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	0a1b      	lsrs	r3, r3, #8
 8002746:	b29b      	uxth	r3, r3
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
			OutData[3] = leuchten_out.ledoutput;
 800274e:	4bab      	ldr	r3, [pc, #684]	; (80029fc <main+0x68c>)
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
			OutData[4] = komfort_out.komfortoutput;
 8002758:	4ba9      	ldr	r3, [pc, #676]	; (8002a00 <main+0x690>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
			OutData[5] ++;
 8002760:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8002764:	3301      	adds	r3, #1
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9

			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX0);
 800276c:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8002770:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8002774:	2301      	movs	r3, #1
 8002776:	489d      	ldr	r0, [pc, #628]	; (80029ec <main+0x67c>)
 8002778:	f001 fc1e 	bl	8003fb8 <HAL_CAN_AddTxMessage>
 800277c:	4603      	mov	r3, r0
 800277e:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
			//hal_error(status);

			// ADC-Werte einlesen Bremse und Temperaturen
			ADC_VAL[0] = ADC_Bremsdruck();
 8002782:	f7fe fb47 	bl	8000e14 <ADC_Bremsdruck>
 8002786:	4603      	mov	r3, r0
 8002788:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
			ADC_VAL[1] = ADC_Bremsdrucktemperatur();
 800278c:	f7fe fcdc 	bl	8001148 <ADC_Bremsdrucktemperatur>
 8002790:	4603      	mov	r3, r0
 8002792:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
			ADC_VAL[2] = ADC_STMTemperatur();
 8002796:	f7fe fd0f 	bl	80011b8 <ADC_STMTemperatur>
 800279a:	4603      	mov	r3, r0
 800279c:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
			ADC_VAL[3] = ADC_PCBTemperatur();
 80027a0:	f7fe fc2a 	bl	8000ff8 <ADC_PCBTemperatur>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] ++;
 80027aa:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 80027ae:	3301      	adds	r3, #1
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
			InData[1] = (system_in.systeminput >> 8);
 80027b6:	4b93      	ldr	r3, [pc, #588]	; (8002a04 <main+0x694>)
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	0a1b      	lsrs	r3, r3, #8
 80027bc:	b29b      	uxth	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
			InData[2] = system_in.systeminput;
 80027c4:	4b8f      	ldr	r3, [pc, #572]	; (8002a04 <main+0x694>)
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
			InData[3] = sdc_in.sdcinput;
 80027ce:	4b8e      	ldr	r3, [pc, #568]	; (8002a08 <main+0x698>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
			InData[4] = (komfort_in.komfortinput >> 8);
 80027d6:	4b8d      	ldr	r3, [pc, #564]	; (8002a0c <main+0x69c>)
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	0a1b      	lsrs	r3, r3, #8
 80027dc:	b29b      	uxth	r3, r3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
			InData[5] = komfort_in.komfortinput;
 80027e4:	4b89      	ldr	r3, [pc, #548]	; (8002a0c <main+0x69c>)
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1

			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 80027ee:	bf00      	nop
 80027f0:	2101      	movs	r1, #1
 80027f2:	487e      	ldr	r0, [pc, #504]	; (80029ec <main+0x67c>)
 80027f4:	f001 fcb0 	bl	8004158 <HAL_CAN_IsTxMessagePending>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d0f8      	beq.n	80027f0 <main+0x480>
			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX0);
 80027fe:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8002802:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002806:	2301      	movs	r3, #1
 8002808:	4878      	ldr	r0, [pc, #480]	; (80029ec <main+0x67c>)
 800280a:	f001 fbd5 	bl	8003fb8 <HAL_CAN_AddTxMessage>
 800280e:	4603      	mov	r3, r0
 8002810:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
			//hal_error(status);

			// ADC-Werte einlesen Navi, Klima, KL15
			ADC_VAL[4] = ADC_KL15();
 8002814:	f7fe fb48 	bl	8000ea8 <ADC_KL15>
 8002818:	4603      	mov	r3, r0
 800281a:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
			ADC_VAL[5] = ADC_Klimaflap();
 800281e:	f7fe fbb3 	bl	8000f88 <ADC_Klimaflap>
 8002822:	4603      	mov	r3, r0
 8002824:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
			ADC_VAL[6] = ADC_Info();
 8002828:	f7fe fc56 	bl	80010d8 <ADC_Info>
 800282c:	4603      	mov	r3, r0
 800282e:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
			ADC_VAL[7] = ADC_Return();
 8002832:	f7fe fc19 	bl	8001068 <ADC_Return>
 8002836:	4603      	mov	r3, r0
 8002838:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2

			// ADC-Werte umwandeln
			AnalogData[0] = ADC_VAL[4];
 800283c:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
			AnalogData[1] = (ADC_VAL[4] >> 8) | (ADC_VAL[0] << 4);
 8002846:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 800284a:	0a1b      	lsrs	r3, r3, #8
 800284c:	b29b      	uxth	r3, r3
 800284e:	b25a      	sxtb	r2, r3
 8002850:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	b25b      	sxtb	r3, r3
 8002858:	4313      	orrs	r3, r2
 800285a:	b25b      	sxtb	r3, r3
 800285c:	b2db      	uxtb	r3, r3
 800285e:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
			AnalogData[2] = (ADC_VAL[0] >> 4);
 8002862:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	b29b      	uxth	r3, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
			AnalogData[3] = ADC_VAL[6];
 8002870:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			AnalogData[4] = (ADC_VAL[6] >> 8) | (ADC_VAL[7] << 4);
 800287a:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 800287e:	0a1b      	lsrs	r3, r3, #8
 8002880:	b29b      	uxth	r3, r3
 8002882:	b25a      	sxtb	r2, r3
 8002884:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	b25b      	sxtb	r3, r3
 800288c:	4313      	orrs	r3, r2
 800288e:	b25b      	sxtb	r3, r3
 8002890:	b2db      	uxtb	r3, r3
 8002892:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
			AnalogData[5] = (ADC_VAL[7] >> 4);
 8002896:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 800289a:	091b      	lsrs	r3, r3, #4
 800289c:	b29b      	uxth	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
			AnalogData[6] = ADC_VAL[5];
 80028a4:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
			AnalogData[7] = (ADC_VAL[5] >> 8);
 80028ae:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80028b2:	0a1b      	lsrs	r3, r3, #8
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
//			// Befehl Fehler auslesen an Bamocar senden
//			status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
			//hal_error(status);

			// ADC-Werte einlesen Kuehlwassertemperatur
			ADC_VAL[8] = ADC_Kuhlwassertemperatur();
 80028bc:	f7fe fb2c 	bl	8000f18 <ADC_Kuhlwassertemperatur>
 80028c0:	4603      	mov	r3, r0
 80028c2:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4

			// ADC-Werte umwandeln
			TempData[0] = ADC_VAL[2];
 80028c6:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
			TempData[1] = (ADC_VAL[2] >> 8) | (ADC_VAL[3] << 4);
 80028d0:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 80028d4:	0a1b      	lsrs	r3, r3, #8
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	b25a      	sxtb	r2, r3
 80028da:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	b25b      	sxtb	r3, r3
 80028e2:	4313      	orrs	r3, r2
 80028e4:	b25b      	sxtb	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
			TempData[2] = (ADC_VAL[3] >> 4);
 80028ec:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
			TempData[3] = ADC_VAL[8];
 80028fa:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			TempData[4] = (ADC_VAL[8] >> 8) | (ADC_VAL[1] << 4);
 8002904:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002908:	0a1b      	lsrs	r3, r3, #8
 800290a:	b29b      	uxth	r3, r3
 800290c:	b25a      	sxtb	r2, r3
 800290e:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	b25b      	sxtb	r3, r3
 8002916:	4313      	orrs	r3, r2
 8002918:	b25b      	sxtb	r3, r3
 800291a:	b2db      	uxtb	r3, r3
 800291c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			TempData[5] = (ADC_VAL[1] >> 4);
 8002920:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	b29b      	uxth	r3, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 800292e:	bf00      	nop
 8002930:	2101      	movs	r1, #1
 8002932:	482e      	ldr	r0, [pc, #184]	; (80029ec <main+0x67c>)
 8002934:	f001 fc10 	bl	8004158 <HAL_CAN_IsTxMessagePending>
 8002938:	4603      	mov	r3, r0
 800293a:	2b01      	cmp	r3, #1
 800293c:	d0f8      	beq.n	8002930 <main+0x5c0>
			// Befehl Fehler auslesen an Bamocar senden
			status = HAL_CAN_AddTxMessage(&hcan3, &TxTemperatur, TempData, (uint32_t *)CAN_TX_MAILBOX0);
 800293e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002942:	4639      	mov	r1, r7
 8002944:	2301      	movs	r3, #1
 8002946:	4829      	ldr	r0, [pc, #164]	; (80029ec <main+0x67c>)
 8002948:	f001 fb36 	bl	8003fb8 <HAL_CAN_AddTxMessage>
 800294c:	4603      	mov	r3, r0
 800294e:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 8002952:	bf00      	nop
 8002954:	2101      	movs	r1, #1
 8002956:	4825      	ldr	r0, [pc, #148]	; (80029ec <main+0x67c>)
 8002958:	f001 fbfe 	bl	8004158 <HAL_CAN_IsTxMessagePending>
 800295c:	4603      	mov	r3, r0
 800295e:	2b01      	cmp	r3, #1
 8002960:	d0f8      	beq.n	8002954 <main+0x5e4>
			status = HAL_CAN_AddTxMessage(&hcan3, &TxAnalog, AnalogData, (uint32_t *)CAN_TX_MAILBOX0);
 8002962:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8002966:	f107 0118 	add.w	r1, r7, #24
 800296a:	2301      	movs	r3, #1
 800296c:	481f      	ldr	r0, [pc, #124]	; (80029ec <main+0x67c>)
 800296e:	f001 fb23 	bl	8003fb8 <HAL_CAN_AddTxMessage>
 8002972:	4603      	mov	r3, r0
 8002974:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
		}

		if (((count % 400) == 0) && (task == 1))
 8002978:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 800297c:	4a1c      	ldr	r2, [pc, #112]	; (80029f0 <main+0x680>)
 800297e:	fba2 1203 	umull	r1, r2, r2, r3
 8002982:	09d2      	lsrs	r2, r2, #7
 8002984:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002988:	fb01 f202 	mul.w	r2, r1, r2
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	b29b      	uxth	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d106      	bne.n	80029a2 <main+0x632>
 8002994:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8002998:	2b01      	cmp	r3, #1
 800299a:	d102      	bne.n	80029a2 <main+0x632>
		{
			// Variable count auf 0 zuruecksetzen
			count = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
		}

		// Zuruecksetzen Flag start
		task = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff


	  	// Task wird alle 5 Millisekunden ausgefuehrt
	  	if (millis() - lastcan >= 5)
 80029a8:	f7fe ff72 	bl	8001890 <millis>
 80029ac:	4602      	mov	r2, r0
 80029ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d973      	bls.n	8002aa0 <main+0x730>
		{
	  		HAL_CAN_GetRxMessage(&hcan3, CAN_RX_FIFO0, &RxMessage, TxData);
 80029b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029bc:	4a14      	ldr	r2, [pc, #80]	; (8002a10 <main+0x6a0>)
 80029be:	2100      	movs	r1, #0
 80029c0:	480a      	ldr	r0, [pc, #40]	; (80029ec <main+0x67c>)
 80029c2:	f001 fbed 	bl	80041a0 <HAL_CAN_GetRxMessage>

			// Wenn Nachricht ueber den CAN-Bus empfangen wurden
			if (can_change == 1)
 80029c6:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <main+0x6a4>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d167      	bne.n	8002aa0 <main+0x730>
			{
				// Nachricht ID ueber UART ausgeben
				uartTransmitNumber(RxMessage.StdId, 16);
 80029d0:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <main+0x6a0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2110      	movs	r1, #16
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fd ff02 	bl	80007e0 <uartTransmitNumber>
				uartTransmit("\t", 1);
 80029dc:	2101      	movs	r1, #1
 80029de:	480e      	ldr	r0, [pc, #56]	; (8002a18 <main+0x6a8>)
 80029e0:	f7fd feea 	bl	80007b8 <uartTransmit>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 80029e4:	2300      	movs	r3, #0
 80029e6:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
 80029ea:	e024      	b.n	8002a36 <main+0x6c6>
 80029ec:	200000f0 	.word	0x200000f0
 80029f0:	51eb851f 	.word	0x51eb851f
 80029f4:	20000048 	.word	0x20000048
 80029f8:	2000004c 	.word	0x2000004c
 80029fc:	20000050 	.word	0x20000050
 8002a00:	20000054 	.word	0x20000054
 8002a04:	2000003c 	.word	0x2000003c
 8002a08:	20000040 	.word	0x20000040
 8002a0c:	20000044 	.word	0x20000044
 8002a10:	20000118 	.word	0x20000118
 8002a14:	20000159 	.word	0x20000159
 8002a18:	08008524 	.word	0x08008524
				{
					uartTransmitNumber(RxData[i], 16);
 8002a1c:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8002a20:	4a2e      	ldr	r2, [pc, #184]	; (8002adc <main+0x76c>)
 8002a22:	5cd3      	ldrb	r3, [r2, r3]
 8002a24:	2110      	movs	r1, #16
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fd feda 	bl	80007e0 <uartTransmitNumber>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 8002a2c:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8002a30:	3301      	adds	r3, #1
 8002a32:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
 8002a36:	f897 20ee 	ldrb.w	r2, [r7, #238]	; 0xee
 8002a3a:	4b29      	ldr	r3, [pc, #164]	; (8002ae0 <main+0x770>)
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d3ec      	bcc.n	8002a1c <main+0x6ac>
				}
				uartTransmit("\n", 1);
 8002a42:	2101      	movs	r1, #1
 8002a44:	4827      	ldr	r0, [pc, #156]	; (8002ae4 <main+0x774>)
 8002a46:	f7fd feb7 	bl	80007b8 <uartTransmit>

				// Sortieren der IDs nach Geraeten
				switch (RxMessage.StdId)
 8002a4a:	4b25      	ldr	r3, [pc, #148]	; (8002ae0 <main+0x770>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f240 1211 	movw	r2, #273	; 0x111
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00b      	beq.n	8002a6e <main+0x6fe>
 8002a56:	f240 1281 	movw	r2, #385	; 0x181
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d10c      	bne.n	8002a78 <main+0x708>
				{
					case BAMOCAR_RX_ID:
						BAMOCAN_ID(&RxData[0], RxMessage.DLC);
 8002a5e:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <main+0x770>)
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	4619      	mov	r1, r3
 8002a66:	481d      	ldr	r0, [pc, #116]	; (8002adc <main+0x76c>)
 8002a68:	f7fd fd6c 	bl	8000544 <BAMOCAN_ID>
						break;
 8002a6c:	e009      	b.n	8002a82 <main+0x712>
					case 0x111:
						uartTransmit("CAN-ID Computer config\n", 23);
 8002a6e:	2117      	movs	r1, #23
 8002a70:	481d      	ldr	r0, [pc, #116]	; (8002ae8 <main+0x778>)
 8002a72:	f7fd fea1 	bl	80007b8 <uartTransmit>
						break;
 8002a76:	e004      	b.n	8002a82 <main+0x712>
					default:
						uartTransmit("CAN-ID nicht verfuegbar\n", 24);
 8002a78:	2118      	movs	r1, #24
 8002a7a:	481c      	ldr	r0, [pc, #112]	; (8002aec <main+0x77c>)
 8002a7c:	f7fd fe9c 	bl	80007b8 <uartTransmit>
						break;
 8002a80:	bf00      	nop
				}

				// Drehzahl ausgeben
				TxData[2] = motor280.output[2];
 8002a82:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <main+0x780>)
 8002a84:	789b      	ldrb	r3, [r3, #2]
 8002a86:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
				TxData[3] = motor280.output[3];
 8002a8a:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <main+0x780>)
 8002a8c:	78db      	ldrb	r3, [r3, #3]
 8002a8e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				lastcan = millis();
 8002a92:	f7fe fefd 	bl	8001890 <millis>
 8002a96:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4

				can_change = 0;
 8002a9a:	4b16      	ldr	r3, [pc, #88]	; (8002af4 <main+0x784>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	701a      	strb	r2, [r3, #0]
			}
		}

#ifdef DEBUG
		// Sende CAN Nachricht auf CAN-Bus / Teste CAN-BUS
		if (millis() - lastsendcan >= 1000)
 8002aa0:	f7fe fef6 	bl	8001890 <millis>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ab0:	f4ff ad4d 	bcc.w	800254e <main+0x1de>
		{
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 8002ab4:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8002ab8:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8002abc:	2301      	movs	r3, #1
 8002abe:	480e      	ldr	r0, [pc, #56]	; (8002af8 <main+0x788>)
 8002ac0:	f001 fa7a 	bl	8003fb8 <HAL_CAN_AddTxMessage>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
			//hal_error(status);
			lastsendcan = millis();
 8002aca:	f7fe fee1 	bl	8001890 <millis>
 8002ace:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

			HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8002ad2:	2180      	movs	r1, #128	; 0x80
 8002ad4:	4809      	ldr	r0, [pc, #36]	; (8002afc <main+0x78c>)
 8002ad6:	f002 fa42 	bl	8004f5e <HAL_GPIO_TogglePin>
	  	switch (UART2_msg[0])
 8002ada:	e538      	b.n	800254e <main+0x1de>
 8002adc:	20000150 	.word	0x20000150
 8002ae0:	20000118 	.word	0x20000118
 8002ae4:	08008528 	.word	0x08008528
 8002ae8:	0800852c 	.word	0x0800852c
 8002aec:	08008544 	.word	0x08008544
 8002af0:	2000015c 	.word	0x2000015c
 8002af4:	20000159 	.word	0x20000159
 8002af8:	200000f0 	.word	0x200000f0
 8002afc:	40020400 	.word	0x40020400

08002b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b094      	sub	sp, #80	; 0x50
 8002b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b06:	f107 031c 	add.w	r3, r7, #28
 8002b0a:	2234      	movs	r2, #52	; 0x34
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f005 fa06 	bl	8007f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b14:	f107 0308 	add.w	r3, r7, #8
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	60da      	str	r2, [r3, #12]
 8002b22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b24:	4b2c      	ldr	r3, [pc, #176]	; (8002bd8 <SystemClock_Config+0xd8>)
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	4a2b      	ldr	r2, [pc, #172]	; (8002bd8 <SystemClock_Config+0xd8>)
 8002b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b30:	4b29      	ldr	r3, [pc, #164]	; (8002bd8 <SystemClock_Config+0xd8>)
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b3c:	4b27      	ldr	r3, [pc, #156]	; (8002bdc <SystemClock_Config+0xdc>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a26      	ldr	r2, [pc, #152]	; (8002bdc <SystemClock_Config+0xdc>)
 8002b42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <SystemClock_Config+0xdc>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b50:	603b      	str	r3, [r7, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b54:	2301      	movs	r3, #1
 8002b56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b5c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002b68:	2319      	movs	r3, #25
 8002b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002b6c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002b70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b72:	2302      	movs	r3, #2
 8002b74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002b76:	2302      	movs	r3, #2
 8002b78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b7e:	f107 031c 	add.w	r3, r7, #28
 8002b82:	4618      	mov	r0, r3
 8002b84:	f002 fa56 	bl	8005034 <HAL_RCC_OscConfig>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002b8e:	f000 f925 	bl	8002ddc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002b92:	f002 f9ff 	bl	8004f94 <HAL_PWREx_EnableOverDrive>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002b9c:	f000 f91e 	bl	8002ddc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ba0:	230f      	movs	r3, #15
 8002ba2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002bac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002bb0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002bb8:	f107 0308 	add.w	r3, r7, #8
 8002bbc:	2107      	movs	r1, #7
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f002 fce6 	bl	8005590 <HAL_RCC_ClockConfig>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002bca:	f000 f907 	bl	8002ddc <Error_Handler>
  }
}
 8002bce:	bf00      	nop
 8002bd0:	3750      	adds	r7, #80	; 0x50
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40007000 	.word	0x40007000

08002be0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Interrupts
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08a      	sub	sp, #40	; 0x28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &UART2_rxBuffer[uart_count], 1, 100);
 8002be8:	4b52      	ldr	r3, [pc, #328]	; (8002d34 <HAL_UART_RxCpltCallback+0x154>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	4b52      	ldr	r3, [pc, #328]	; (8002d38 <HAL_UART_RxCpltCallback+0x158>)
 8002bf0:	18d1      	adds	r1, r2, r3
 8002bf2:	2364      	movs	r3, #100	; 0x64
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	4851      	ldr	r0, [pc, #324]	; (8002d3c <HAL_UART_RxCpltCallback+0x15c>)
 8002bf8:	f003 fe8a 	bl	8006910 <HAL_UART_Transmit>

	if (UART2_rxBuffer[uart_count] == 0x7F)
 8002bfc:	4b4d      	ldr	r3, [pc, #308]	; (8002d34 <HAL_UART_RxCpltCallback+0x154>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b4d      	ldr	r3, [pc, #308]	; (8002d38 <HAL_UART_RxCpltCallback+0x158>)
 8002c04:	5c9b      	ldrb	r3, [r3, r2]
 8002c06:	2b7f      	cmp	r3, #127	; 0x7f
 8002c08:	d106      	bne.n	8002c18 <HAL_UART_RxCpltCallback+0x38>
	{
		uart_count--;
 8002c0a:	4b4a      	ldr	r3, [pc, #296]	; (8002d34 <HAL_UART_RxCpltCallback+0x154>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	4b48      	ldr	r3, [pc, #288]	; (8002d34 <HAL_UART_RxCpltCallback+0x154>)
 8002c14:	701a      	strb	r2, [r3, #0]
 8002c16:	e005      	b.n	8002c24 <HAL_UART_RxCpltCallback+0x44>
	}
	else
	{
		uart_count++;
 8002c18:	4b46      	ldr	r3, [pc, #280]	; (8002d34 <HAL_UART_RxCpltCallback+0x154>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	4b44      	ldr	r3, [pc, #272]	; (8002d34 <HAL_UART_RxCpltCallback+0x154>)
 8002c22:	701a      	strb	r2, [r3, #0]
	}

	if (UART2_rxBuffer[uart_count-1] == '\r')
 8002c24:	4b43      	ldr	r3, [pc, #268]	; (8002d34 <HAL_UART_RxCpltCallback+0x154>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	4a43      	ldr	r2, [pc, #268]	; (8002d38 <HAL_UART_RxCpltCallback+0x158>)
 8002c2c:	5cd3      	ldrb	r3, [r2, r3]
 8002c2e:	2b0d      	cmp	r3, #13
 8002c30:	d156      	bne.n	8002ce0 <HAL_UART_RxCpltCallback+0x100>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)"\nEingabe OK\r\n", 13, 100);
 8002c32:	2364      	movs	r3, #100	; 0x64
 8002c34:	220d      	movs	r2, #13
 8002c36:	4942      	ldr	r1, [pc, #264]	; (8002d40 <HAL_UART_RxCpltCallback+0x160>)
 8002c38:	4840      	ldr	r0, [pc, #256]	; (8002d3c <HAL_UART_RxCpltCallback+0x15c>)
 8002c3a:	f003 fe69 	bl	8006910 <HAL_UART_Transmit>
		if (UART2_rxBuffer[0] == 'R' && UART2_rxBuffer[1] == 'E' && UART2_rxBuffer[2] == 'S')
 8002c3e:	4b3e      	ldr	r3, [pc, #248]	; (8002d38 <HAL_UART_RxCpltCallback+0x158>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b52      	cmp	r3, #82	; 0x52
 8002c44:	d11e      	bne.n	8002c84 <HAL_UART_RxCpltCallback+0xa4>
 8002c46:	4b3c      	ldr	r3, [pc, #240]	; (8002d38 <HAL_UART_RxCpltCallback+0x158>)
 8002c48:	785b      	ldrb	r3, [r3, #1]
 8002c4a:	2b45      	cmp	r3, #69	; 0x45
 8002c4c:	d11a      	bne.n	8002c84 <HAL_UART_RxCpltCallback+0xa4>
 8002c4e:	4b3a      	ldr	r3, [pc, #232]	; (8002d38 <HAL_UART_RxCpltCallback+0x158>)
 8002c50:	789b      	ldrb	r3, [r3, #2]
 8002c52:	2b53      	cmp	r3, #83	; 0x53
 8002c54:	d116      	bne.n	8002c84 <HAL_UART_RxCpltCallback+0xa4>
		{
			uint8_t c[10] = {204, 205, 205, 205, 205, 205, 205, 205, 205, 185};
 8002c56:	4a3b      	ldr	r2, [pc, #236]	; (8002d44 <HAL_UART_RxCpltCallback+0x164>)
 8002c58:	f107 031c 	add.w	r3, r7, #28
 8002c5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c5e:	c303      	stmia	r3!, {r0, r1}
 8002c60:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)"\a", 1, 100);
 8002c62:	2364      	movs	r3, #100	; 0x64
 8002c64:	2201      	movs	r2, #1
 8002c66:	4938      	ldr	r1, [pc, #224]	; (8002d48 <HAL_UART_RxCpltCallback+0x168>)
 8002c68:	4834      	ldr	r0, [pc, #208]	; (8002d3c <HAL_UART_RxCpltCallback+0x15c>)
 8002c6a:	f003 fe51 	bl	8006910 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, c, 10, 100);
 8002c6e:	f107 011c 	add.w	r1, r7, #28
 8002c72:	2364      	movs	r3, #100	; 0x64
 8002c74:	220a      	movs	r2, #10
 8002c76:	4831      	ldr	r0, [pc, #196]	; (8002d3c <HAL_UART_RxCpltCallback+0x15c>)
 8002c78:	f003 fe4a 	bl	8006910 <HAL_UART_Transmit>
			UART2_msg[0] = 1;
 8002c7c:	4b33      	ldr	r3, [pc, #204]	; (8002d4c <HAL_UART_RxCpltCallback+0x16c>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	701a      	strb	r2, [r3, #0]
		{
 8002c82:	e02a      	b.n	8002cda <HAL_UART_RxCpltCallback+0xfa>
		}
		else if (UART2_rxBuffer[0] == 'N' && UART2_rxBuffer[1] == 'A' && UART2_rxBuffer[2] == 'V')
 8002c84:	4b2c      	ldr	r3, [pc, #176]	; (8002d38 <HAL_UART_RxCpltCallback+0x158>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b4e      	cmp	r3, #78	; 0x4e
 8002c8a:	d10f      	bne.n	8002cac <HAL_UART_RxCpltCallback+0xcc>
 8002c8c:	4b2a      	ldr	r3, [pc, #168]	; (8002d38 <HAL_UART_RxCpltCallback+0x158>)
 8002c8e:	785b      	ldrb	r3, [r3, #1]
 8002c90:	2b41      	cmp	r3, #65	; 0x41
 8002c92:	d10b      	bne.n	8002cac <HAL_UART_RxCpltCallback+0xcc>
 8002c94:	4b28      	ldr	r3, [pc, #160]	; (8002d38 <HAL_UART_RxCpltCallback+0x158>)
 8002c96:	789b      	ldrb	r3, [r3, #2]
 8002c98:	2b56      	cmp	r3, #86	; 0x56
 8002c9a:	d107      	bne.n	8002cac <HAL_UART_RxCpltCallback+0xcc>
		{
			uartTransmit("Display\r\n", 9);
 8002c9c:	2109      	movs	r1, #9
 8002c9e:	482c      	ldr	r0, [pc, #176]	; (8002d50 <HAL_UART_RxCpltCallback+0x170>)
 8002ca0:	f7fd fd8a 	bl	80007b8 <uartTransmit>
			UART2_msg[0] = 2;
 8002ca4:	4b29      	ldr	r3, [pc, #164]	; (8002d4c <HAL_UART_RxCpltCallback+0x16c>)
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	701a      	strb	r2, [r3, #0]
 8002caa:	e016      	b.n	8002cda <HAL_UART_RxCpltCallback+0xfa>
		}
		else
		{
			uint8_t c[10] = {204, 205, 205, 205, 205, 205, 205, 205, 205, 185};
 8002cac:	4a25      	ldr	r2, [pc, #148]	; (8002d44 <HAL_UART_RxCpltCallback+0x164>)
 8002cae:	f107 0310 	add.w	r3, r7, #16
 8002cb2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cb4:	c303      	stmia	r3!, {r0, r1}
 8002cb6:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)"\a", 1, 100);
 8002cb8:	2364      	movs	r3, #100	; 0x64
 8002cba:	2201      	movs	r2, #1
 8002cbc:	4922      	ldr	r1, [pc, #136]	; (8002d48 <HAL_UART_RxCpltCallback+0x168>)
 8002cbe:	481f      	ldr	r0, [pc, #124]	; (8002d3c <HAL_UART_RxCpltCallback+0x15c>)
 8002cc0:	f003 fe26 	bl	8006910 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, c, 10, 100);
 8002cc4:	f107 0110 	add.w	r1, r7, #16
 8002cc8:	2364      	movs	r3, #100	; 0x64
 8002cca:	220a      	movs	r2, #10
 8002ccc:	481b      	ldr	r0, [pc, #108]	; (8002d3c <HAL_UART_RxCpltCallback+0x15c>)
 8002cce:	f003 fe1f 	bl	8006910 <HAL_UART_Transmit>
			uartTransmit("Falsche Eingabe\r\n", 17);
 8002cd2:	2111      	movs	r1, #17
 8002cd4:	481f      	ldr	r0, [pc, #124]	; (8002d54 <HAL_UART_RxCpltCallback+0x174>)
 8002cd6:	f7fd fd6f 	bl	80007b8 <uartTransmit>
		}
		uart_count = 0;
 8002cda:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <HAL_UART_RxCpltCallback+0x154>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
	}

	if (uart_count == 12)
 8002ce0:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <HAL_UART_RxCpltCallback+0x154>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b0c      	cmp	r3, #12
 8002ce6:	d117      	bne.n	8002d18 <HAL_UART_RxCpltCallback+0x138>
	{
		uint8_t tmp = 0x81;
 8002ce8:	2381      	movs	r3, #129	; 0x81
 8002cea:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r\nEingabe Ung", 13, 100);
 8002cec:	2364      	movs	r3, #100	; 0x64
 8002cee:	220d      	movs	r2, #13
 8002cf0:	4919      	ldr	r1, [pc, #100]	; (8002d58 <HAL_UART_RxCpltCallback+0x178>)
 8002cf2:	4812      	ldr	r0, [pc, #72]	; (8002d3c <HAL_UART_RxCpltCallback+0x15c>)
 8002cf4:	f003 fe0c 	bl	8006910 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, &tmp, 1, 100);
 8002cf8:	f107 010f 	add.w	r1, r7, #15
 8002cfc:	2364      	movs	r3, #100	; 0x64
 8002cfe:	2201      	movs	r2, #1
 8002d00:	480e      	ldr	r0, [pc, #56]	; (8002d3c <HAL_UART_RxCpltCallback+0x15c>)
 8002d02:	f003 fe05 	bl	8006910 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) "ltig\r\n", 6, 100);
 8002d06:	2364      	movs	r3, #100	; 0x64
 8002d08:	2206      	movs	r2, #6
 8002d0a:	4914      	ldr	r1, [pc, #80]	; (8002d5c <HAL_UART_RxCpltCallback+0x17c>)
 8002d0c:	480b      	ldr	r0, [pc, #44]	; (8002d3c <HAL_UART_RxCpltCallback+0x15c>)
 8002d0e:	f003 fdff 	bl	8006910 <HAL_UART_Transmit>
		uart_count = 0;
 8002d12:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <HAL_UART_RxCpltCallback+0x154>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
	}
    HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer[uart_count], 1);
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <HAL_UART_RxCpltCallback+0x154>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_UART_RxCpltCallback+0x158>)
 8002d20:	4413      	add	r3, r2
 8002d22:	2201      	movs	r2, #1
 8002d24:	4619      	mov	r1, r3
 8002d26:	4805      	ldr	r0, [pc, #20]	; (8002d3c <HAL_UART_RxCpltCallback+0x15c>)
 8002d28:	f003 fe75 	bl	8006a16 <HAL_UART_Receive_IT>
}
 8002d2c:	bf00      	nop
 8002d2e:	3728      	adds	r7, #40	; 0x28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	2000014c 	.word	0x2000014c
 8002d38:	20000134 	.word	0x20000134
 8002d3c:	200001b0 	.word	0x200001b0
 8002d40:	08008608 	.word	0x08008608
 8002d44:	08008654 	.word	0x08008654
 8002d48:	08008618 	.word	0x08008618
 8002d4c:	20000140 	.word	0x20000140
 8002d50:	0800861c 	.word	0x0800861c
 8002d54:	08008628 	.word	0x08008628
 8002d58:	0800863c 	.word	0x0800863c
 8002d5c:	0800864c 	.word	0x0800864c

08002d60 <HAL_CAN_RxFifo0MsgPendingCallback>:

// Can-Interrupt: Nachricht wartet
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
	// Nachricht aus Speicher auslesen
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 8002d68:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8002d6a:	4a07      	ldr	r2, [pc, #28]	; (8002d88 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f001 fa16 	bl	80041a0 <HAL_CAN_GetRxMessage>
	can_change = 1;
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8002d76:	2201      	movs	r2, #1
 8002d78:	701a      	strb	r2, [r3, #0]
}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20000150 	.word	0x20000150
 8002d88:	20000118 	.word	0x20000118
 8002d8c:	20000159 	.word	0x20000159

08002d90 <HAL_CAN_RxFifo0FullCallback>:

// Can-Interrupt: Fifo0 ist voll
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
	// Fifo0 voll
	uartTransmit("Fifo0 von CAN3 ist voll\n", 24);
 8002d98:	2118      	movs	r1, #24
 8002d9a:	4804      	ldr	r0, [pc, #16]	; (8002dac <HAL_CAN_RxFifo0FullCallback+0x1c>)
 8002d9c:	f7fd fd0c 	bl	80007b8 <uartTransmit>

	Error_Handler();
 8002da0:	f000 f81c 	bl	8002ddc <Error_Handler>
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	08008660 	.word	0x08008660

08002db0 <HAL_TIM_PeriodElapsedCallback>:

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)																	// Wenn Timer 6 den ueberlauf ausgeloest hat
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a06      	ldr	r2, [pc, #24]	; (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d102      	bne.n	8002dc6 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;														// Setze Millisekunden Flag
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	701a      	strb	r2, [r3, #0]
	}
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000164 	.word	0x20000164
 8002dd8:	20000158 	.word	0x20000158

08002ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002de0:	b672      	cpsid	i
}
 8002de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8002de4:	4a11      	ldr	r2, [pc, #68]	; (8002e2c <Error_Handler+0x50>)
 8002de6:	7853      	ldrb	r3, [r2, #1]
 8002de8:	f043 0308 	orr.w	r3, r3, #8
 8002dec:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8002dee:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <Error_Handler+0x50>)
 8002df0:	785b      	ldrb	r3, [r3, #1]
 8002df2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	2104      	movs	r1, #4
 8002dfc:	480c      	ldr	r0, [pc, #48]	; (8002e30 <Error_Handler+0x54>)
 8002dfe:	f002 f895 	bl	8004f2c <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8002e02:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <Error_Handler+0x50>)
 8002e04:	7853      	ldrb	r3, [r2, #1]
 8002e06:	f36f 1304 	bfc	r3, #4, #1
 8002e0a:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 8002e0c:	4b07      	ldr	r3, [pc, #28]	; (8002e2c <Error_Handler+0x50>)
 8002e0e:	785b      	ldrb	r3, [r3, #1]
 8002e10:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	461a      	mov	r2, r3
 8002e18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e1c:	4804      	ldr	r0, [pc, #16]	; (8002e30 <Error_Handler+0x54>)
 8002e1e:	f002 f885 	bl	8004f2c <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 8002e22:	2122      	movs	r1, #34	; 0x22
 8002e24:	4803      	ldr	r0, [pc, #12]	; (8002e34 <Error_Handler+0x58>)
 8002e26:	f7fd fcc7 	bl	80007b8 <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1);
 8002e2a:	e7fe      	b.n	8002e2a <Error_Handler+0x4e>
 8002e2c:	20000050 	.word	0x20000050
 8002e30:	40020400 	.word	0x40020400
 8002e34:	0800867c 	.word	0x0800867c

08002e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <HAL_MspInit+0x44>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	4a0e      	ldr	r2, [pc, #56]	; (8002e7c <HAL_MspInit+0x44>)
 8002e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e48:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4a:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <HAL_MspInit+0x44>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	607b      	str	r3, [r7, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e56:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <HAL_MspInit+0x44>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	4a08      	ldr	r2, [pc, #32]	; (8002e7c <HAL_MspInit+0x44>)
 8002e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e60:	6453      	str	r3, [r2, #68]	; 0x44
 8002e62:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <HAL_MspInit+0x44>)
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40023800 	.word	0x40023800

08002e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e84:	e7fe      	b.n	8002e84 <NMI_Handler+0x4>

08002e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e8a:	e7fe      	b.n	8002e8a <HardFault_Handler+0x4>

08002e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e90:	e7fe      	b.n	8002e90 <MemManage_Handler+0x4>

08002e92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e96:	e7fe      	b.n	8002e96 <BusFault_Handler+0x4>

08002e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e9c:	e7fe      	b.n	8002e9c <UsageFault_Handler+0x4>

08002e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ecc:	f000 f98e 	bl	80031ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <USART2_IRQHandler+0x10>)
 8002eda:	f003 fde1 	bl	8006aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	200001b0 	.word	0x200001b0

08002ee8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002eec:	4802      	ldr	r0, [pc, #8]	; (8002ef8 <TIM6_DAC_IRQHandler+0x10>)
 8002eee:	f003 fa2d 	bl	800634c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000164 	.word	0x20000164

08002efc <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8002f00:	4802      	ldr	r0, [pc, #8]	; (8002f0c <CAN3_RX0_IRQHandler+0x10>)
 8002f02:	f001 fa85 	bl	8004410 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	200000f0 	.word	0x200000f0

08002f10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f14:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <SystemInit+0x28>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1a:	4a07      	ldr	r2, [pc, #28]	; (8002f38 <SystemInit+0x28>)
 8002f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f24:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <SystemInit+0x28>)
 8002f26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f2a:	609a      	str	r2, [r3, #8]
#endif
}
 8002f2c:	bf00      	nop
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	e000ed00 	.word	0xe000ed00

08002f3c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f42:	1d3b      	adds	r3, r7, #4
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002f4c:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <MX_TIM6_Init+0x64>)
 8002f4e:	4a15      	ldr	r2, [pc, #84]	; (8002fa4 <MX_TIM6_Init+0x68>)
 8002f50:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27-1;
 8002f52:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <MX_TIM6_Init+0x64>)
 8002f54:	221a      	movs	r2, #26
 8002f56:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <MX_TIM6_Init+0x64>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000-1;
 8002f5e:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <MX_TIM6_Init+0x64>)
 8002f60:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002f64:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f66:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <MX_TIM6_Init+0x64>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002f6c:	480c      	ldr	r0, [pc, #48]	; (8002fa0 <MX_TIM6_Init+0x64>)
 8002f6e:	f003 f91d 	bl	80061ac <HAL_TIM_Base_Init>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002f78:	f7ff ff30 	bl	8002ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002f84:	1d3b      	adds	r3, r7, #4
 8002f86:	4619      	mov	r1, r3
 8002f88:	4805      	ldr	r0, [pc, #20]	; (8002fa0 <MX_TIM6_Init+0x64>)
 8002f8a:	f003 fbc7 	bl	800671c <HAL_TIMEx_MasterConfigSynchronization>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002f94:	f7ff ff22 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002f98:	bf00      	nop
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20000164 	.word	0x20000164
 8002fa4:	40001000 	.word	0x40001000

08002fa8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a0d      	ldr	r2, [pc, #52]	; (8002fec <HAL_TIM_Base_MspInit+0x44>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d113      	bne.n	8002fe2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002fba:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <HAL_TIM_Base_MspInit+0x48>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	4a0c      	ldr	r2, [pc, #48]	; (8002ff0 <HAL_TIM_Base_MspInit+0x48>)
 8002fc0:	f043 0310 	orr.w	r3, r3, #16
 8002fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <HAL_TIM_Base_MspInit+0x48>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	2036      	movs	r0, #54	; 0x36
 8002fd8:	f001 fd1b 	bl	8004a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002fdc:	2036      	movs	r0, #54	; 0x36
 8002fde:	f001 fd34 	bl	8004a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40001000 	.word	0x40001000
 8002ff0:	40023800 	.word	0x40023800

08002ff4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ff8:	4b14      	ldr	r3, [pc, #80]	; (800304c <MX_USART2_UART_Init+0x58>)
 8002ffa:	4a15      	ldr	r2, [pc, #84]	; (8003050 <MX_USART2_UART_Init+0x5c>)
 8002ffc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002ffe:	4b13      	ldr	r3, [pc, #76]	; (800304c <MX_USART2_UART_Init+0x58>)
 8003000:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003004:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003006:	4b11      	ldr	r3, [pc, #68]	; (800304c <MX_USART2_UART_Init+0x58>)
 8003008:	2200      	movs	r2, #0
 800300a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800300c:	4b0f      	ldr	r3, [pc, #60]	; (800304c <MX_USART2_UART_Init+0x58>)
 800300e:	2200      	movs	r2, #0
 8003010:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003012:	4b0e      	ldr	r3, [pc, #56]	; (800304c <MX_USART2_UART_Init+0x58>)
 8003014:	2200      	movs	r2, #0
 8003016:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <MX_USART2_UART_Init+0x58>)
 800301a:	220c      	movs	r2, #12
 800301c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800301e:	4b0b      	ldr	r3, [pc, #44]	; (800304c <MX_USART2_UART_Init+0x58>)
 8003020:	2200      	movs	r2, #0
 8003022:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003024:	4b09      	ldr	r3, [pc, #36]	; (800304c <MX_USART2_UART_Init+0x58>)
 8003026:	2200      	movs	r2, #0
 8003028:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800302a:	4b08      	ldr	r3, [pc, #32]	; (800304c <MX_USART2_UART_Init+0x58>)
 800302c:	2200      	movs	r2, #0
 800302e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <MX_USART2_UART_Init+0x58>)
 8003032:	2200      	movs	r2, #0
 8003034:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003036:	4805      	ldr	r0, [pc, #20]	; (800304c <MX_USART2_UART_Init+0x58>)
 8003038:	f003 fc1c 	bl	8006874 <HAL_UART_Init>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003042:	f7ff fecb 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	200001b0 	.word	0x200001b0
 8003050:	40004400 	.word	0x40004400

08003054 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b0ae      	sub	sp, #184	; 0xb8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800305c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	60da      	str	r2, [r3, #12]
 800306a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800306c:	f107 0314 	add.w	r3, r7, #20
 8003070:	2290      	movs	r2, #144	; 0x90
 8003072:	2100      	movs	r1, #0
 8003074:	4618      	mov	r0, r3
 8003076:	f004 ff53 	bl	8007f20 <memset>
  if(uartHandle->Instance==USART2)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a25      	ldr	r2, [pc, #148]	; (8003114 <HAL_UART_MspInit+0xc0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d142      	bne.n	800310a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003088:	2300      	movs	r3, #0
 800308a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800308c:	f107 0314 	add.w	r3, r7, #20
 8003090:	4618      	mov	r0, r3
 8003092:	f002 fc63 	bl	800595c <HAL_RCCEx_PeriphCLKConfig>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800309c:	f7ff fe9e 	bl	8002ddc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030a0:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <HAL_UART_MspInit+0xc4>)
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	4a1c      	ldr	r2, [pc, #112]	; (8003118 <HAL_UART_MspInit+0xc4>)
 80030a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030aa:	6413      	str	r3, [r2, #64]	; 0x40
 80030ac:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <HAL_UART_MspInit+0xc4>)
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030b8:	4b17      	ldr	r3, [pc, #92]	; (8003118 <HAL_UART_MspInit+0xc4>)
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030bc:	4a16      	ldr	r2, [pc, #88]	; (8003118 <HAL_UART_MspInit+0xc4>)
 80030be:	f043 0308 	orr.w	r3, r3, #8
 80030c2:	6313      	str	r3, [r2, #48]	; 0x30
 80030c4:	4b14      	ldr	r3, [pc, #80]	; (8003118 <HAL_UART_MspInit+0xc4>)
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART2TX_Pin|DEBUG_UART2RX_Pin;
 80030d0:	2360      	movs	r3, #96	; 0x60
 80030d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d6:	2302      	movs	r3, #2
 80030d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e2:	2303      	movs	r3, #3
 80030e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030e8:	2307      	movs	r3, #7
 80030ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80030f2:	4619      	mov	r1, r3
 80030f4:	4809      	ldr	r0, [pc, #36]	; (800311c <HAL_UART_MspInit+0xc8>)
 80030f6:	f001 fd55 	bl	8004ba4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80030fa:	2200      	movs	r2, #0
 80030fc:	2100      	movs	r1, #0
 80030fe:	2026      	movs	r0, #38	; 0x26
 8003100:	f001 fc87 	bl	8004a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003104:	2026      	movs	r0, #38	; 0x26
 8003106:	f001 fca0 	bl	8004a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800310a:	bf00      	nop
 800310c:	37b8      	adds	r7, #184	; 0xb8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40004400 	.word	0x40004400
 8003118:	40023800 	.word	0x40023800
 800311c:	40020c00 	.word	0x40020c00

08003120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003158 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003124:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003126:	e003      	b.n	8003130 <LoopCopyDataInit>

08003128 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003128:	4b0c      	ldr	r3, [pc, #48]	; (800315c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800312a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800312c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800312e:	3104      	adds	r1, #4

08003130 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003130:	480b      	ldr	r0, [pc, #44]	; (8003160 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003132:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003134:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003136:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003138:	d3f6      	bcc.n	8003128 <CopyDataInit>
  ldr  r2, =_sbss
 800313a:	4a0b      	ldr	r2, [pc, #44]	; (8003168 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800313c:	e002      	b.n	8003144 <LoopFillZerobss>

0800313e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800313e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003140:	f842 3b04 	str.w	r3, [r2], #4

08003144 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003144:	4b09      	ldr	r3, [pc, #36]	; (800316c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003146:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003148:	d3f9      	bcc.n	800313e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800314a:	f7ff fee1 	bl	8002f10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800314e:	f004 feef 	bl	8007f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003152:	f7ff f90d 	bl	8002370 <main>
  bx  lr    
 8003156:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003158:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800315c:	080086f0 	.word	0x080086f0
  ldr  r0, =_sdata
 8003160:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003164:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003168:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800316c:	2000023c 	.word	0x2000023c

08003170 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003170:	e7fe      	b.n	8003170 <ADC_IRQHandler>

08003172 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003176:	2003      	movs	r0, #3
 8003178:	f001 fc40 	bl	80049fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800317c:	2000      	movs	r0, #0
 800317e:	f000 f805 	bl	800318c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003182:	f7ff fe59 	bl	8002e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003194:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <HAL_InitTick+0x54>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4b12      	ldr	r3, [pc, #72]	; (80031e4 <HAL_InitTick+0x58>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	4619      	mov	r1, r3
 800319e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031aa:	4618      	mov	r0, r3
 80031ac:	f001 fc5b 	bl	8004a66 <HAL_SYSTICK_Config>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e00e      	b.n	80031d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b0f      	cmp	r3, #15
 80031be:	d80a      	bhi.n	80031d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031c0:	2200      	movs	r2, #0
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	f04f 30ff 	mov.w	r0, #4294967295
 80031c8:	f001 fc23 	bl	8004a12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031cc:	4a06      	ldr	r2, [pc, #24]	; (80031e8 <HAL_InitTick+0x5c>)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
 80031d4:	e000      	b.n	80031d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	20000000 	.word	0x20000000
 80031e4:	20000008 	.word	0x20000008
 80031e8:	20000004 	.word	0x20000004

080031ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031f0:	4b06      	ldr	r3, [pc, #24]	; (800320c <HAL_IncTick+0x20>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	461a      	mov	r2, r3
 80031f6:	4b06      	ldr	r3, [pc, #24]	; (8003210 <HAL_IncTick+0x24>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4413      	add	r3, r2
 80031fc:	4a04      	ldr	r2, [pc, #16]	; (8003210 <HAL_IncTick+0x24>)
 80031fe:	6013      	str	r3, [r2, #0]
}
 8003200:	bf00      	nop
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20000008 	.word	0x20000008
 8003210:	20000238 	.word	0x20000238

08003214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  return uwTick;
 8003218:	4b03      	ldr	r3, [pc, #12]	; (8003228 <HAL_GetTick+0x14>)
 800321a:	681b      	ldr	r3, [r3, #0]
}
 800321c:	4618      	mov	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	20000238 	.word	0x20000238

0800322c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003234:	f7ff ffee 	bl	8003214 <HAL_GetTick>
 8003238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003244:	d005      	beq.n	8003252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003246:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <HAL_Delay+0x44>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4413      	add	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003252:	bf00      	nop
 8003254:	f7ff ffde 	bl	8003214 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	429a      	cmp	r2, r3
 8003262:	d8f7      	bhi.n	8003254 <HAL_Delay+0x28>
  {
  }
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20000008 	.word	0x20000008

08003274 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 8003278:	4b02      	ldr	r3, [pc, #8]	; (8003284 <HAL_GetHalVersion+0x10>)
}
 800327a:	4618      	mov	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	01030000 	.word	0x01030000

08003288 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 800328c:	4b03      	ldr	r3, [pc, #12]	; (800329c <HAL_GetREVID+0x14>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	0c1b      	lsrs	r3, r3, #16
}
 8003292:	4618      	mov	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	e0042000 	.word	0xe0042000

080032a0 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80032a4:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <HAL_GetDEVID+0x18>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	e0042000 	.word	0xe0042000

080032bc <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80032c0:	4b03      	ldr	r3, [pc, #12]	; (80032d0 <HAL_GetUIDw0+0x14>)
 80032c2:	681b      	ldr	r3, [r3, #0]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	1ff0f420 	.word	0x1ff0f420

080032d4 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80032d8:	4b03      	ldr	r3, [pc, #12]	; (80032e8 <HAL_GetUIDw1+0x14>)
 80032da:	681b      	ldr	r3, [r3, #0]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	1ff0f424 	.word	0x1ff0f424

080032ec <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <HAL_GetUIDw2+0x14>)
 80032f2:	681b      	ldr	r3, [r3, #0]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	1ff0f428 	.word	0x1ff0f428

08003304 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e031      	b.n	800337e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7fe fc9a 	bl	8001c5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	2b00      	cmp	r3, #0
 8003340:	d116      	bne.n	8003370 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003346:	4b10      	ldr	r3, [pc, #64]	; (8003388 <HAL_ADC_Init+0x84>)
 8003348:	4013      	ands	r3, r2
 800334a:	f043 0202 	orr.w	r2, r3, #2
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fb0a 	bl	800396c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	f023 0303 	bic.w	r3, r3, #3
 8003366:	f043 0201 	orr.w	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	641a      	str	r2, [r3, #64]	; 0x40
 800336e:	e001      	b.n	8003374 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800337c:	7bfb      	ldrb	r3, [r7, #15]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	ffffeefd 	.word	0xffffeefd

0800338c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_ADC_Start+0x1a>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e0ad      	b.n	8003502 <HAL_ADC_Start+0x176>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d018      	beq.n	80033ee <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80033cc:	4b50      	ldr	r3, [pc, #320]	; (8003510 <HAL_ADC_Start+0x184>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a50      	ldr	r2, [pc, #320]	; (8003514 <HAL_ADC_Start+0x188>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	0c9a      	lsrs	r2, r3, #18
 80033d8:	4613      	mov	r3, r2
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	4413      	add	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80033e0:	e002      	b.n	80033e8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	3b01      	subs	r3, #1
 80033e6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f9      	bne.n	80033e2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d175      	bne.n	80034e8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003400:	4b45      	ldr	r3, [pc, #276]	; (8003518 <HAL_ADC_Start+0x18c>)
 8003402:	4013      	ands	r3, r2
 8003404:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003416:	2b00      	cmp	r3, #0
 8003418:	d007      	beq.n	800342a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003422:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003436:	d106      	bne.n	8003446 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343c:	f023 0206 	bic.w	r2, r3, #6
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	645a      	str	r2, [r3, #68]	; 0x44
 8003444:	e002      	b.n	800344c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800345c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800345e:	4b2f      	ldr	r3, [pc, #188]	; (800351c <HAL_ADC_Start+0x190>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10f      	bne.n	800348a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d143      	bne.n	8003500 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	e03a      	b.n	8003500 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a24      	ldr	r2, [pc, #144]	; (8003520 <HAL_ADC_Start+0x194>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d10e      	bne.n	80034b2 <HAL_ADC_Start+0x126>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d107      	bne.n	80034b2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034b0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80034b2:	4b1a      	ldr	r3, [pc, #104]	; (800351c <HAL_ADC_Start+0x190>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f003 0310 	and.w	r3, r3, #16
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d120      	bne.n	8003500 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a18      	ldr	r2, [pc, #96]	; (8003524 <HAL_ADC_Start+0x198>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d11b      	bne.n	8003500 <HAL_ADC_Start+0x174>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d114      	bne.n	8003500 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034e4:	609a      	str	r2, [r3, #8]
 80034e6:	e00b      	b.n	8003500 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	f043 0210 	orr.w	r2, r3, #16
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f8:	f043 0201 	orr.w	r2, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	20000000 	.word	0x20000000
 8003514:	431bde83 	.word	0x431bde83
 8003518:	fffff8fe 	.word	0xfffff8fe
 800351c:	40012300 	.word	0x40012300
 8003520:	40012000 	.word	0x40012000
 8003524:	40012200 	.word	0x40012200

08003528 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_ADC_Stop+0x16>
 800353a:	2302      	movs	r3, #2
 800353c:	e01f      	b.n	800357e <HAL_ADC_Stop+0x56>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0201 	bic.w	r2, r2, #1
 8003554:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d107      	bne.n	8003574 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003568:	4b08      	ldr	r3, [pc, #32]	; (800358c <HAL_ADC_Stop+0x64>)
 800356a:	4013      	ands	r3, r2
 800356c:	f043 0201 	orr.w	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	ffffeefe 	.word	0xffffeefe

08003590 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ac:	d113      	bne.n	80035d6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80035b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035bc:	d10b      	bne.n	80035d6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f043 0220 	orr.w	r2, r3, #32
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e063      	b.n	800369e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80035d6:	f7ff fe1d 	bl	8003214 <HAL_GetTick>
 80035da:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80035dc:	e021      	b.n	8003622 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e4:	d01d      	beq.n	8003622 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d007      	beq.n	80035fc <HAL_ADC_PollForConversion+0x6c>
 80035ec:	f7ff fe12 	bl	8003214 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d212      	bcs.n	8003622 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b02      	cmp	r3, #2
 8003608:	d00b      	beq.n	8003622 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	f043 0204 	orr.w	r2, r3, #4
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e03d      	b.n	800369e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b02      	cmp	r3, #2
 800362e:	d1d6      	bne.n	80035de <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0212 	mvn.w	r2, #18
 8003638:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d123      	bne.n	800369c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003658:	2b00      	cmp	r3, #0
 800365a:	d11f      	bne.n	800369c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003666:	2b00      	cmp	r3, #0
 8003668:	d006      	beq.n	8003678 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003674:	2b00      	cmp	r3, #0
 8003676:	d111      	bne.n	800369c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d105      	bne.n	800369c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	f043 0201 	orr.w	r2, r3, #1
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d101      	bne.n	80036dc <HAL_ADC_ConfigChannel+0x1c>
 80036d8:	2302      	movs	r3, #2
 80036da:	e136      	b.n	800394a <HAL_ADC_ConfigChannel+0x28a>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b09      	cmp	r3, #9
 80036ea:	d93a      	bls.n	8003762 <HAL_ADC_ConfigChannel+0xa2>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036f4:	d035      	beq.n	8003762 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68d9      	ldr	r1, [r3, #12]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	b29b      	uxth	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	4613      	mov	r3, r2
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4413      	add	r3, r2
 800370a:	3b1e      	subs	r3, #30
 800370c:	2207      	movs	r2, #7
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43da      	mvns	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	400a      	ands	r2, r1
 800371a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a8d      	ldr	r2, [pc, #564]	; (8003958 <HAL_ADC_ConfigChannel+0x298>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d10a      	bne.n	800373c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68d9      	ldr	r1, [r3, #12]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	061a      	lsls	r2, r3, #24
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800373a:	e035      	b.n	80037a8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68d9      	ldr	r1, [r3, #12]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	b29b      	uxth	r3, r3
 800374c:	4618      	mov	r0, r3
 800374e:	4603      	mov	r3, r0
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4403      	add	r3, r0
 8003754:	3b1e      	subs	r3, #30
 8003756:	409a      	lsls	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003760:	e022      	b.n	80037a8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6919      	ldr	r1, [r3, #16]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	b29b      	uxth	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	4613      	mov	r3, r2
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	4413      	add	r3, r2
 8003776:	2207      	movs	r2, #7
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	43da      	mvns	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	400a      	ands	r2, r1
 8003784:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6919      	ldr	r1, [r3, #16]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	b29b      	uxth	r3, r3
 8003796:	4618      	mov	r0, r3
 8003798:	4603      	mov	r3, r0
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	4403      	add	r3, r0
 800379e:	409a      	lsls	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b06      	cmp	r3, #6
 80037ae:	d824      	bhi.n	80037fa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	3b05      	subs	r3, #5
 80037c2:	221f      	movs	r2, #31
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43da      	mvns	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	400a      	ands	r2, r1
 80037d0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	b29b      	uxth	r3, r3
 80037de:	4618      	mov	r0, r3
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	3b05      	subs	r3, #5
 80037ec:	fa00 f203 	lsl.w	r2, r0, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	635a      	str	r2, [r3, #52]	; 0x34
 80037f8:	e04c      	b.n	8003894 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b0c      	cmp	r3, #12
 8003800:	d824      	bhi.n	800384c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	3b23      	subs	r3, #35	; 0x23
 8003814:	221f      	movs	r2, #31
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43da      	mvns	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	400a      	ands	r2, r1
 8003822:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	b29b      	uxth	r3, r3
 8003830:	4618      	mov	r0, r3
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	3b23      	subs	r3, #35	; 0x23
 800383e:	fa00 f203 	lsl.w	r2, r0, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	631a      	str	r2, [r3, #48]	; 0x30
 800384a:	e023      	b.n	8003894 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	3b41      	subs	r3, #65	; 0x41
 800385e:	221f      	movs	r2, #31
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43da      	mvns	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	400a      	ands	r2, r1
 800386c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	b29b      	uxth	r3, r3
 800387a:	4618      	mov	r0, r3
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	3b41      	subs	r3, #65	; 0x41
 8003888:	fa00 f203 	lsl.w	r2, r0, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a30      	ldr	r2, [pc, #192]	; (800395c <HAL_ADC_ConfigChannel+0x29c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d10a      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x1f4>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038a6:	d105      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80038a8:	4b2d      	ldr	r3, [pc, #180]	; (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	4a2c      	ldr	r2, [pc, #176]	; (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 80038ae:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80038b2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a28      	ldr	r2, [pc, #160]	; (800395c <HAL_ADC_ConfigChannel+0x29c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d10f      	bne.n	80038de <HAL_ADC_ConfigChannel+0x21e>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b12      	cmp	r3, #18
 80038c4:	d10b      	bne.n	80038de <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80038c6:	4b26      	ldr	r3, [pc, #152]	; (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	4a25      	ldr	r2, [pc, #148]	; (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 80038cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038d0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80038d2:	4b23      	ldr	r3, [pc, #140]	; (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4a22      	ldr	r2, [pc, #136]	; (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 80038d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038dc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1e      	ldr	r2, [pc, #120]	; (800395c <HAL_ADC_ConfigChannel+0x29c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d12b      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x280>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1a      	ldr	r2, [pc, #104]	; (8003958 <HAL_ADC_ConfigChannel+0x298>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d003      	beq.n	80038fa <HAL_ADC_ConfigChannel+0x23a>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b11      	cmp	r3, #17
 80038f8:	d122      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80038fa:	4b19      	ldr	r3, [pc, #100]	; (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4a18      	ldr	r2, [pc, #96]	; (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 8003900:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003904:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003906:	4b16      	ldr	r3, [pc, #88]	; (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	4a15      	ldr	r2, [pc, #84]	; (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 800390c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003910:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a10      	ldr	r2, [pc, #64]	; (8003958 <HAL_ADC_ConfigChannel+0x298>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d111      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800391c:	4b11      	ldr	r3, [pc, #68]	; (8003964 <HAL_ADC_ConfigChannel+0x2a4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a11      	ldr	r2, [pc, #68]	; (8003968 <HAL_ADC_ConfigChannel+0x2a8>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	0c9a      	lsrs	r2, r3, #18
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003932:	e002      	b.n	800393a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	3b01      	subs	r3, #1
 8003938:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f9      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	10000012 	.word	0x10000012
 800395c:	40012000 	.word	0x40012000
 8003960:	40012300 	.word	0x40012300
 8003964:	20000000 	.word	0x20000000
 8003968:	431bde83 	.word	0x431bde83

0800396c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003974:	4b78      	ldr	r3, [pc, #480]	; (8003b58 <ADC_Init+0x1ec>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	4a77      	ldr	r2, [pc, #476]	; (8003b58 <ADC_Init+0x1ec>)
 800397a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800397e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003980:	4b75      	ldr	r3, [pc, #468]	; (8003b58 <ADC_Init+0x1ec>)
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4973      	ldr	r1, [pc, #460]	; (8003b58 <ADC_Init+0x1ec>)
 800398a:	4313      	orrs	r3, r2
 800398c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800399c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6859      	ldr	r1, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	021a      	lsls	r2, r3, #8
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80039c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6859      	ldr	r1, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6899      	ldr	r1, [r3, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	4a58      	ldr	r2, [pc, #352]	; (8003b5c <ADC_Init+0x1f0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d022      	beq.n	8003a46 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6899      	ldr	r1, [r3, #8]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6899      	ldr	r1, [r3, #8]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	609a      	str	r2, [r3, #8]
 8003a44:	e00f      	b.n	8003a66 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0202 	bic.w	r2, r2, #2
 8003a74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6899      	ldr	r1, [r3, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	005a      	lsls	r2, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d01b      	beq.n	8003acc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aa2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003ab2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6859      	ldr	r1, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	035a      	lsls	r2, r3, #13
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	605a      	str	r2, [r3, #4]
 8003aca:	e007      	b.n	8003adc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ada:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003aea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	051a      	lsls	r2, r3, #20
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6899      	ldr	r1, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b1e:	025a      	lsls	r2, r3, #9
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6899      	ldr	r1, [r3, #8]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	029a      	lsls	r2, r3, #10
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	609a      	str	r2, [r3, #8]
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	40012300 	.word	0x40012300
 8003b5c:	0f000001 	.word	0x0f000001

08003b60 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e0ed      	b.n	8003d4e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d102      	bne.n	8003b84 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fe f986 	bl	8001e90 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0201 	orr.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b94:	f7ff fb3e 	bl	8003214 <HAL_GetTick>
 8003b98:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b9a:	e012      	b.n	8003bc2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b9c:	f7ff fb3a 	bl	8003214 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b0a      	cmp	r3, #10
 8003ba8:	d90b      	bls.n	8003bc2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2205      	movs	r2, #5
 8003bba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e0c5      	b.n	8003d4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0e5      	beq.n	8003b9c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0202 	bic.w	r2, r2, #2
 8003bde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003be0:	f7ff fb18 	bl	8003214 <HAL_GetTick>
 8003be4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003be6:	e012      	b.n	8003c0e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003be8:	f7ff fb14 	bl	8003214 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b0a      	cmp	r3, #10
 8003bf4:	d90b      	bls.n	8003c0e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2205      	movs	r2, #5
 8003c06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e09f      	b.n	8003d4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e5      	bne.n	8003be8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	7e1b      	ldrb	r3, [r3, #24]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d108      	bne.n	8003c36 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	e007      	b.n	8003c46 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	7e5b      	ldrb	r3, [r3, #25]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d108      	bne.n	8003c60 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	e007      	b.n	8003c70 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	7e9b      	ldrb	r3, [r3, #26]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d108      	bne.n	8003c8a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0220 	orr.w	r2, r2, #32
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	e007      	b.n	8003c9a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0220 	bic.w	r2, r2, #32
 8003c98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	7edb      	ldrb	r3, [r3, #27]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d108      	bne.n	8003cb4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0210 	bic.w	r2, r2, #16
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	e007      	b.n	8003cc4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0210 	orr.w	r2, r2, #16
 8003cc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	7f1b      	ldrb	r3, [r3, #28]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d108      	bne.n	8003cde <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0208 	orr.w	r2, r2, #8
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	e007      	b.n	8003cee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0208 	bic.w	r2, r2, #8
 8003cec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	7f5b      	ldrb	r3, [r3, #29]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d108      	bne.n	8003d08 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f042 0204 	orr.w	r2, r2, #4
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	e007      	b.n	8003d18 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0204 	bic.w	r2, r2, #4
 8003d16:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	ea42 0103 	orr.w	r1, r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	1e5a      	subs	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d6e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003d70:	7cfb      	ldrb	r3, [r7, #19]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d003      	beq.n	8003d7e <HAL_CAN_ConfigFilter+0x26>
 8003d76:	7cfb      	ldrb	r3, [r7, #19]
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	f040 80c7 	bne.w	8003f0c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a69      	ldr	r2, [pc, #420]	; (8003f28 <HAL_CAN_ConfigFilter+0x1d0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d001      	beq.n	8003d8c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8003d88:	4b68      	ldr	r3, [pc, #416]	; (8003f2c <HAL_CAN_ConfigFilter+0x1d4>)
 8003d8a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d92:	f043 0201 	orr.w	r2, r3, #1
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	4a63      	ldr	r2, [pc, #396]	; (8003f2c <HAL_CAN_ConfigFilter+0x1d4>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d111      	bne.n	8003dc8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003daa:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	021b      	lsls	r3, r3, #8
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	f003 031f 	and.w	r3, r3, #31
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	43db      	mvns	r3, r3
 8003de2:	401a      	ands	r2, r3
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d123      	bne.n	8003e3a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	401a      	ands	r2, r3
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e14:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	3248      	adds	r2, #72	; 0x48
 8003e1a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e2e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e30:	6979      	ldr	r1, [r7, #20]
 8003e32:	3348      	adds	r3, #72	; 0x48
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	440b      	add	r3, r1
 8003e38:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d122      	bne.n	8003e88 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003e62:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	3248      	adds	r2, #72	; 0x48
 8003e68:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e7c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e7e:	6979      	ldr	r1, [r7, #20]
 8003e80:	3348      	adds	r3, #72	; 0x48
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	440b      	add	r3, r1
 8003e86:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d109      	bne.n	8003ea4 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	401a      	ands	r2, r3
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003ea2:	e007      	b.n	8003eb4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	431a      	orrs	r2, r3
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d109      	bne.n	8003ed0 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	401a      	ands	r2, r3
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003ece:	e007      	b.n	8003ee0 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d107      	bne.n	8003ef8 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003efe:	f023 0201 	bic.w	r2, r3, #1
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	e006      	b.n	8003f1a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
  }
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40003400 	.word	0x40003400
 8003f2c:	40006400 	.word	0x40006400

08003f30 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d12e      	bne.n	8003fa2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0201 	bic.w	r2, r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f5c:	f7ff f95a 	bl	8003214 <HAL_GetTick>
 8003f60:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003f62:	e012      	b.n	8003f8a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f64:	f7ff f956 	bl	8003214 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b0a      	cmp	r3, #10
 8003f70:	d90b      	bls.n	8003f8a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2205      	movs	r2, #5
 8003f82:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e012      	b.n	8003fb0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e5      	bne.n	8003f64 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e006      	b.n	8003fb0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
  }
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b089      	sub	sp, #36	; 0x24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fcc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003fd6:	7ffb      	ldrb	r3, [r7, #31]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d003      	beq.n	8003fe4 <HAL_CAN_AddTxMessage+0x2c>
 8003fdc:	7ffb      	ldrb	r3, [r7, #31]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	f040 80ad 	bne.w	800413e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10a      	bne.n	8004004 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d105      	bne.n	8004004 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 8095 	beq.w	800412e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	0e1b      	lsrs	r3, r3, #24
 8004008:	f003 0303 	and.w	r3, r3, #3
 800400c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800400e:	2201      	movs	r2, #1
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	409a      	lsls	r2, r3
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10d      	bne.n	800403c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800402a:	68f9      	ldr	r1, [r7, #12]
 800402c:	6809      	ldr	r1, [r1, #0]
 800402e:	431a      	orrs	r2, r3
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	3318      	adds	r3, #24
 8004034:	011b      	lsls	r3, r3, #4
 8004036:	440b      	add	r3, r1
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	e00f      	b.n	800405c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004046:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800404c:	68f9      	ldr	r1, [r7, #12]
 800404e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004050:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	3318      	adds	r3, #24
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	440b      	add	r3, r1
 800405a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6819      	ldr	r1, [r3, #0]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	3318      	adds	r3, #24
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	440b      	add	r3, r1
 800406c:	3304      	adds	r3, #4
 800406e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	7d1b      	ldrb	r3, [r3, #20]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d111      	bne.n	800409c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	3318      	adds	r3, #24
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	4413      	add	r3, r2
 8004084:	3304      	adds	r3, #4
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	6811      	ldr	r1, [r2, #0]
 800408c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	3318      	adds	r3, #24
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	440b      	add	r3, r1
 8004098:	3304      	adds	r3, #4
 800409a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3307      	adds	r3, #7
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	061a      	lsls	r2, r3, #24
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3306      	adds	r3, #6
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	041b      	lsls	r3, r3, #16
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3305      	adds	r3, #5
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	4313      	orrs	r3, r2
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	3204      	adds	r2, #4
 80040bc:	7812      	ldrb	r2, [r2, #0]
 80040be:	4610      	mov	r0, r2
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	6811      	ldr	r1, [r2, #0]
 80040c4:	ea43 0200 	orr.w	r2, r3, r0
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	440b      	add	r3, r1
 80040ce:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80040d2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3303      	adds	r3, #3
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	061a      	lsls	r2, r3, #24
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3302      	adds	r3, #2
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	041b      	lsls	r3, r3, #16
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3301      	adds	r3, #1
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	021b      	lsls	r3, r3, #8
 80040ee:	4313      	orrs	r3, r2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	7812      	ldrb	r2, [r2, #0]
 80040f4:	4610      	mov	r0, r2
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	6811      	ldr	r1, [r2, #0]
 80040fa:	ea43 0200 	orr.w	r2, r3, r0
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	440b      	add	r3, r1
 8004104:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004108:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	3318      	adds	r3, #24
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	4413      	add	r3, r2
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	6811      	ldr	r1, [r2, #0]
 800411c:	f043 0201 	orr.w	r2, r3, #1
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	3318      	adds	r3, #24
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	440b      	add	r3, r1
 8004128:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	e00e      	b.n	800414c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e006      	b.n	800414c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
  }
}
 800414c:	4618      	mov	r0, r3
 800414e:	3724      	adds	r7, #36	; 0x24
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3020 	ldrb.w	r3, [r3, #32]
 800416c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800416e:	7afb      	ldrb	r3, [r7, #11]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d002      	beq.n	800417a <HAL_CAN_IsTxMessagePending+0x22>
 8004174:	7afb      	ldrb	r3, [r7, #11]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d10b      	bne.n	8004192 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	069b      	lsls	r3, r3, #26
 8004184:	401a      	ands	r2, r3
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	069b      	lsls	r3, r3, #26
 800418a:	429a      	cmp	r2, r3
 800418c:	d001      	beq.n	8004192 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800418e:	2301      	movs	r3, #1
 8004190:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8004192:	68fb      	ldr	r3, [r7, #12]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80041a0:	b480      	push	{r7}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041b4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80041b6:	7dfb      	ldrb	r3, [r7, #23]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d003      	beq.n	80041c4 <HAL_CAN_GetRxMessage+0x24>
 80041bc:	7dfb      	ldrb	r3, [r7, #23]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	f040 80f3 	bne.w	80043aa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10e      	bne.n	80041e8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f003 0303 	and.w	r3, r3, #3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d116      	bne.n	8004206 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e0e7      	b.n	80043b8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d107      	bne.n	8004206 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e0d8      	b.n	80043b8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	331b      	adds	r3, #27
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	4413      	add	r3, r2
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0204 	and.w	r2, r3, #4
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10c      	bne.n	800423e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	331b      	adds	r3, #27
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	4413      	add	r3, r2
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	0d5b      	lsrs	r3, r3, #21
 8004234:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	e00b      	b.n	8004256 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	331b      	adds	r3, #27
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	4413      	add	r3, r2
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	08db      	lsrs	r3, r3, #3
 800424e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	331b      	adds	r3, #27
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	4413      	add	r3, r2
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0202 	and.w	r2, r3, #2
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	331b      	adds	r3, #27
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	4413      	add	r3, r2
 8004278:	3304      	adds	r3, #4
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 020f 	and.w	r2, r3, #15
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	331b      	adds	r3, #27
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	4413      	add	r3, r2
 8004290:	3304      	adds	r3, #4
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	0a1b      	lsrs	r3, r3, #8
 8004296:	b2da      	uxtb	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	331b      	adds	r3, #27
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	4413      	add	r3, r2
 80042a8:	3304      	adds	r3, #4
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	0c1b      	lsrs	r3, r3, #16
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	4413      	add	r3, r2
 80042be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	0a1a      	lsrs	r2, r3, #8
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	3301      	adds	r3, #1
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	0c1a      	lsrs	r2, r3, #16
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	3302      	adds	r3, #2
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	4413      	add	r3, r2
 8004308:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	0e1a      	lsrs	r2, r3, #24
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	3303      	adds	r3, #3
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	4413      	add	r3, r2
 8004322:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	3304      	adds	r3, #4
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	4413      	add	r3, r2
 800433a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	0a1a      	lsrs	r2, r3, #8
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	3305      	adds	r3, #5
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	4413      	add	r3, r2
 8004354:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	0c1a      	lsrs	r2, r3, #16
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	3306      	adds	r3, #6
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	4413      	add	r3, r2
 800436e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	0e1a      	lsrs	r2, r3, #24
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	3307      	adds	r3, #7
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d108      	bne.n	8004396 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0220 	orr.w	r2, r2, #32
 8004392:	60da      	str	r2, [r3, #12]
 8004394:	e007      	b.n	80043a6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0220 	orr.w	r2, r2, #32
 80043a4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	e006      	b.n	80043b8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
  }
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	371c      	adds	r7, #28
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043d4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d002      	beq.n	80043e2 <HAL_CAN_ActivateNotification+0x1e>
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d109      	bne.n	80043f6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6959      	ldr	r1, [r3, #20]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e006      	b.n	8004404 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
  }
}
 8004404:	4618      	mov	r0, r3
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08a      	sub	sp, #40	; 0x28
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004418:	2300      	movs	r3, #0
 800441a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d07c      	beq.n	8004550 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	d023      	beq.n	80044a8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2201      	movs	r2, #1
 8004466:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f983 	bl	800477e <HAL_CAN_TxMailbox0CompleteCallback>
 8004478:	e016      	b.n	80044a8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	d004      	beq.n	800448e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
 800448c:	e00c      	b.n	80044a8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	f003 0308 	and.w	r3, r3, #8
 8004494:	2b00      	cmp	r3, #0
 8004496:	d004      	beq.n	80044a2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800449e:	627b      	str	r3, [r7, #36]	; 0x24
 80044a0:	e002      	b.n	80044a8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f989 	bl	80047ba <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d024      	beq.n	80044fc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f963 	bl	8004792 <HAL_CAN_TxMailbox1CompleteCallback>
 80044cc:	e016      	b.n	80044fc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d004      	beq.n	80044e2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
 80044e0:	e00c      	b.n	80044fc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d004      	beq.n	80044f6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
 80044f4:	e002      	b.n	80044fc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f969 	bl	80047ce <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d024      	beq.n	8004550 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800450e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f943 	bl	80047a6 <HAL_CAN_TxMailbox2CompleteCallback>
 8004520:	e016      	b.n	8004550 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d004      	beq.n	8004536 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004532:	627b      	str	r3, [r7, #36]	; 0x24
 8004534:	e00c      	b.n	8004550 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d004      	beq.n	800454a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
 8004548:	e002      	b.n	8004550 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f949 	bl	80047e2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00c      	beq.n	8004574 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f003 0310 	and.w	r3, r3, #16
 8004560:	2b00      	cmp	r3, #0
 8004562:	d007      	beq.n	8004574 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800456a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2210      	movs	r2, #16
 8004572:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00b      	beq.n	8004596 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f003 0308 	and.w	r3, r3, #8
 8004584:	2b00      	cmp	r3, #0
 8004586:	d006      	beq.n	8004596 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2208      	movs	r2, #8
 800458e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7fe fbfd 	bl	8002d90 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d009      	beq.n	80045b4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fe fbd6 	bl	8002d60 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00c      	beq.n	80045d8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f003 0310 	and.w	r3, r3, #16
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d007      	beq.n	80045d8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2210      	movs	r2, #16
 80045d6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	f003 0320 	and.w	r3, r3, #32
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00b      	beq.n	80045fa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d006      	beq.n	80045fa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2208      	movs	r2, #8
 80045f2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f908 	bl	800480a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	f003 0310 	and.w	r3, r3, #16
 8004600:	2b00      	cmp	r3, #0
 8004602:	d009      	beq.n	8004618 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f8ef 	bl	80047f6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00b      	beq.n	800463a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	f003 0310 	and.w	r3, r3, #16
 8004628:	2b00      	cmp	r3, #0
 800462a:	d006      	beq.n	800463a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2210      	movs	r2, #16
 8004632:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f8f2 	bl	800481e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00b      	beq.n	800465c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d006      	beq.n	800465c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2208      	movs	r2, #8
 8004654:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f8eb 	bl	8004832 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d07b      	beq.n	800475e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d072      	beq.n	8004756 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004676:	2b00      	cmp	r3, #0
 8004678:	d008      	beq.n	800468c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004692:	2b00      	cmp	r3, #0
 8004694:	d008      	beq.n	80046a8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	f043 0302 	orr.w	r3, r3, #2
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d008      	beq.n	80046c4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	f043 0304 	orr.w	r3, r3, #4
 80046c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d043      	beq.n	8004756 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d03e      	beq.n	8004756 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046de:	2b60      	cmp	r3, #96	; 0x60
 80046e0:	d02b      	beq.n	800473a <HAL_CAN_IRQHandler+0x32a>
 80046e2:	2b60      	cmp	r3, #96	; 0x60
 80046e4:	d82e      	bhi.n	8004744 <HAL_CAN_IRQHandler+0x334>
 80046e6:	2b50      	cmp	r3, #80	; 0x50
 80046e8:	d022      	beq.n	8004730 <HAL_CAN_IRQHandler+0x320>
 80046ea:	2b50      	cmp	r3, #80	; 0x50
 80046ec:	d82a      	bhi.n	8004744 <HAL_CAN_IRQHandler+0x334>
 80046ee:	2b40      	cmp	r3, #64	; 0x40
 80046f0:	d019      	beq.n	8004726 <HAL_CAN_IRQHandler+0x316>
 80046f2:	2b40      	cmp	r3, #64	; 0x40
 80046f4:	d826      	bhi.n	8004744 <HAL_CAN_IRQHandler+0x334>
 80046f6:	2b30      	cmp	r3, #48	; 0x30
 80046f8:	d010      	beq.n	800471c <HAL_CAN_IRQHandler+0x30c>
 80046fa:	2b30      	cmp	r3, #48	; 0x30
 80046fc:	d822      	bhi.n	8004744 <HAL_CAN_IRQHandler+0x334>
 80046fe:	2b10      	cmp	r3, #16
 8004700:	d002      	beq.n	8004708 <HAL_CAN_IRQHandler+0x2f8>
 8004702:	2b20      	cmp	r3, #32
 8004704:	d005      	beq.n	8004712 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004706:	e01d      	b.n	8004744 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	f043 0308 	orr.w	r3, r3, #8
 800470e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004710:	e019      	b.n	8004746 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	f043 0310 	orr.w	r3, r3, #16
 8004718:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800471a:	e014      	b.n	8004746 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	f043 0320 	orr.w	r3, r3, #32
 8004722:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004724:	e00f      	b.n	8004746 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800472e:	e00a      	b.n	8004746 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004738:	e005      	b.n	8004746 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004742:	e000      	b.n	8004746 <HAL_CAN_IRQHandler+0x336>
            break;
 8004744:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	699a      	ldr	r2, [r3, #24]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004754:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2204      	movs	r2, #4
 800475c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	2b00      	cmp	r3, #0
 8004762:	d008      	beq.n	8004776 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f868 	bl	8004846 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004776:	bf00      	nop
 8004778:	3728      	adds	r7, #40	; 0x28
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
	...

0800485c <__NVIC_SetPriorityGrouping>:
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800486c:	4b0b      	ldr	r3, [pc, #44]	; (800489c <__NVIC_SetPriorityGrouping+0x40>)
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004878:	4013      	ands	r3, r2
 800487a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004884:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004886:	4313      	orrs	r3, r2
 8004888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800488a:	4a04      	ldr	r2, [pc, #16]	; (800489c <__NVIC_SetPriorityGrouping+0x40>)
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	60d3      	str	r3, [r2, #12]
}
 8004890:	bf00      	nop
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	e000ed00 	.word	0xe000ed00
 80048a0:	05fa0000 	.word	0x05fa0000

080048a4 <__NVIC_GetPriorityGrouping>:
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048a8:	4b04      	ldr	r3, [pc, #16]	; (80048bc <__NVIC_GetPriorityGrouping+0x18>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	0a1b      	lsrs	r3, r3, #8
 80048ae:	f003 0307 	and.w	r3, r3, #7
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	e000ed00 	.word	0xe000ed00

080048c0 <__NVIC_EnableIRQ>:
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	4603      	mov	r3, r0
 80048c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	db0b      	blt.n	80048ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048d2:	79fb      	ldrb	r3, [r7, #7]
 80048d4:	f003 021f 	and.w	r2, r3, #31
 80048d8:	4907      	ldr	r1, [pc, #28]	; (80048f8 <__NVIC_EnableIRQ+0x38>)
 80048da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048de:	095b      	lsrs	r3, r3, #5
 80048e0:	2001      	movs	r0, #1
 80048e2:	fa00 f202 	lsl.w	r2, r0, r2
 80048e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	e000e100 	.word	0xe000e100

080048fc <__NVIC_SetPriority>:
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	6039      	str	r1, [r7, #0]
 8004906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800490c:	2b00      	cmp	r3, #0
 800490e:	db0a      	blt.n	8004926 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	b2da      	uxtb	r2, r3
 8004914:	490c      	ldr	r1, [pc, #48]	; (8004948 <__NVIC_SetPriority+0x4c>)
 8004916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491a:	0112      	lsls	r2, r2, #4
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	440b      	add	r3, r1
 8004920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004924:	e00a      	b.n	800493c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	b2da      	uxtb	r2, r3
 800492a:	4908      	ldr	r1, [pc, #32]	; (800494c <__NVIC_SetPriority+0x50>)
 800492c:	79fb      	ldrb	r3, [r7, #7]
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	3b04      	subs	r3, #4
 8004934:	0112      	lsls	r2, r2, #4
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	440b      	add	r3, r1
 800493a:	761a      	strb	r2, [r3, #24]
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	e000e100 	.word	0xe000e100
 800494c:	e000ed00 	.word	0xe000ed00

08004950 <NVIC_EncodePriority>:
{
 8004950:	b480      	push	{r7}
 8004952:	b089      	sub	sp, #36	; 0x24
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	f1c3 0307 	rsb	r3, r3, #7
 800496a:	2b04      	cmp	r3, #4
 800496c:	bf28      	it	cs
 800496e:	2304      	movcs	r3, #4
 8004970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	3304      	adds	r3, #4
 8004976:	2b06      	cmp	r3, #6
 8004978:	d902      	bls.n	8004980 <NVIC_EncodePriority+0x30>
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	3b03      	subs	r3, #3
 800497e:	e000      	b.n	8004982 <NVIC_EncodePriority+0x32>
 8004980:	2300      	movs	r3, #0
 8004982:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004984:	f04f 32ff 	mov.w	r2, #4294967295
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	43da      	mvns	r2, r3
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	401a      	ands	r2, r3
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004998:	f04f 31ff 	mov.w	r1, #4294967295
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	fa01 f303 	lsl.w	r3, r1, r3
 80049a2:	43d9      	mvns	r1, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049a8:	4313      	orrs	r3, r2
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3724      	adds	r7, #36	; 0x24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
	...

080049b8 <SysTick_Config>:
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3b01      	subs	r3, #1
 80049c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049c8:	d301      	bcc.n	80049ce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80049ca:	2301      	movs	r3, #1
 80049cc:	e00f      	b.n	80049ee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049ce:	4a0a      	ldr	r2, [pc, #40]	; (80049f8 <SysTick_Config+0x40>)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049d6:	210f      	movs	r1, #15
 80049d8:	f04f 30ff 	mov.w	r0, #4294967295
 80049dc:	f7ff ff8e 	bl	80048fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049e0:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <SysTick_Config+0x40>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049e6:	4b04      	ldr	r3, [pc, #16]	; (80049f8 <SysTick_Config+0x40>)
 80049e8:	2207      	movs	r2, #7
 80049ea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	e000e010 	.word	0xe000e010

080049fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7ff ff29 	bl	800485c <__NVIC_SetPriorityGrouping>
}
 8004a0a:	bf00      	nop
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b086      	sub	sp, #24
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	4603      	mov	r3, r0
 8004a1a:	60b9      	str	r1, [r7, #8]
 8004a1c:	607a      	str	r2, [r7, #4]
 8004a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a20:	2300      	movs	r3, #0
 8004a22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a24:	f7ff ff3e 	bl	80048a4 <__NVIC_GetPriorityGrouping>
 8004a28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	68b9      	ldr	r1, [r7, #8]
 8004a2e:	6978      	ldr	r0, [r7, #20]
 8004a30:	f7ff ff8e 	bl	8004950 <NVIC_EncodePriority>
 8004a34:	4602      	mov	r2, r0
 8004a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff ff5d 	bl	80048fc <__NVIC_SetPriority>
}
 8004a42:	bf00      	nop
 8004a44:	3718      	adds	r7, #24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b082      	sub	sp, #8
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	4603      	mov	r3, r0
 8004a52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff ff31 	bl	80048c0 <__NVIC_EnableIRQ>
}
 8004a5e:	bf00      	nop
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b082      	sub	sp, #8
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7ff ffa2 	bl	80049b8 <SysTick_Config>
 8004a74:	4603      	mov	r3, r0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b084      	sub	sp, #16
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004a8c:	f7fe fbc2 	bl	8003214 <HAL_GetTick>
 8004a90:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d008      	beq.n	8004ab0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2280      	movs	r2, #128	; 0x80
 8004aa2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e052      	b.n	8004b56 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0216 	bic.w	r2, r2, #22
 8004abe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695a      	ldr	r2, [r3, #20]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ace:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d103      	bne.n	8004ae0 <HAL_DMA_Abort+0x62>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d007      	beq.n	8004af0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0208 	bic.w	r2, r2, #8
 8004aee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0201 	bic.w	r2, r2, #1
 8004afe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b00:	e013      	b.n	8004b2a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b02:	f7fe fb87 	bl	8003214 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b05      	cmp	r3, #5
 8004b0e:	d90c      	bls.n	8004b2a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2203      	movs	r2, #3
 8004b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e015      	b.n	8004b56 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1e4      	bne.n	8004b02 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3c:	223f      	movs	r2, #63	; 0x3f
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d004      	beq.n	8004b7c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2280      	movs	r2, #128	; 0x80
 8004b76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e00c      	b.n	8004b96 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2205      	movs	r2, #5
 8004b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0201 	bic.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
	...

08004ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b089      	sub	sp, #36	; 0x24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61fb      	str	r3, [r7, #28]
 8004bc2:	e175      	b.n	8004eb0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	f040 8164 	bne.w	8004eaa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d005      	beq.n	8004bfa <HAL_GPIO_Init+0x56>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d130      	bne.n	8004c5c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	2203      	movs	r2, #3
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c30:	2201      	movs	r2, #1
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	43db      	mvns	r3, r3
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	091b      	lsrs	r3, r3, #4
 8004c46:	f003 0201 	and.w	r2, r3, #1
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f003 0303 	and.w	r3, r3, #3
 8004c64:	2b03      	cmp	r3, #3
 8004c66:	d017      	beq.n	8004c98 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	2203      	movs	r2, #3
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f003 0303 	and.w	r3, r3, #3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d123      	bne.n	8004cec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	08da      	lsrs	r2, r3, #3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3208      	adds	r2, #8
 8004cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	220f      	movs	r2, #15
 8004cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	08da      	lsrs	r2, r3, #3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	3208      	adds	r2, #8
 8004ce6:	69b9      	ldr	r1, [r7, #24]
 8004ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	2203      	movs	r2, #3
 8004cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfc:	43db      	mvns	r3, r3
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	4013      	ands	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f003 0203 	and.w	r2, r3, #3
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 80be 	beq.w	8004eaa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d2e:	4b66      	ldr	r3, [pc, #408]	; (8004ec8 <HAL_GPIO_Init+0x324>)
 8004d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d32:	4a65      	ldr	r2, [pc, #404]	; (8004ec8 <HAL_GPIO_Init+0x324>)
 8004d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d38:	6453      	str	r3, [r2, #68]	; 0x44
 8004d3a:	4b63      	ldr	r3, [pc, #396]	; (8004ec8 <HAL_GPIO_Init+0x324>)
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004d46:	4a61      	ldr	r2, [pc, #388]	; (8004ecc <HAL_GPIO_Init+0x328>)
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	089b      	lsrs	r3, r3, #2
 8004d4c:	3302      	adds	r3, #2
 8004d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	220f      	movs	r2, #15
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	43db      	mvns	r3, r3
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	4013      	ands	r3, r2
 8004d68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a58      	ldr	r2, [pc, #352]	; (8004ed0 <HAL_GPIO_Init+0x32c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d037      	beq.n	8004de2 <HAL_GPIO_Init+0x23e>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a57      	ldr	r2, [pc, #348]	; (8004ed4 <HAL_GPIO_Init+0x330>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d031      	beq.n	8004dde <HAL_GPIO_Init+0x23a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a56      	ldr	r2, [pc, #344]	; (8004ed8 <HAL_GPIO_Init+0x334>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d02b      	beq.n	8004dda <HAL_GPIO_Init+0x236>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a55      	ldr	r2, [pc, #340]	; (8004edc <HAL_GPIO_Init+0x338>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d025      	beq.n	8004dd6 <HAL_GPIO_Init+0x232>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a54      	ldr	r2, [pc, #336]	; (8004ee0 <HAL_GPIO_Init+0x33c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d01f      	beq.n	8004dd2 <HAL_GPIO_Init+0x22e>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a53      	ldr	r2, [pc, #332]	; (8004ee4 <HAL_GPIO_Init+0x340>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d019      	beq.n	8004dce <HAL_GPIO_Init+0x22a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a52      	ldr	r2, [pc, #328]	; (8004ee8 <HAL_GPIO_Init+0x344>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d013      	beq.n	8004dca <HAL_GPIO_Init+0x226>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a51      	ldr	r2, [pc, #324]	; (8004eec <HAL_GPIO_Init+0x348>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d00d      	beq.n	8004dc6 <HAL_GPIO_Init+0x222>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a50      	ldr	r2, [pc, #320]	; (8004ef0 <HAL_GPIO_Init+0x34c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d007      	beq.n	8004dc2 <HAL_GPIO_Init+0x21e>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a4f      	ldr	r2, [pc, #316]	; (8004ef4 <HAL_GPIO_Init+0x350>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d101      	bne.n	8004dbe <HAL_GPIO_Init+0x21a>
 8004dba:	2309      	movs	r3, #9
 8004dbc:	e012      	b.n	8004de4 <HAL_GPIO_Init+0x240>
 8004dbe:	230a      	movs	r3, #10
 8004dc0:	e010      	b.n	8004de4 <HAL_GPIO_Init+0x240>
 8004dc2:	2308      	movs	r3, #8
 8004dc4:	e00e      	b.n	8004de4 <HAL_GPIO_Init+0x240>
 8004dc6:	2307      	movs	r3, #7
 8004dc8:	e00c      	b.n	8004de4 <HAL_GPIO_Init+0x240>
 8004dca:	2306      	movs	r3, #6
 8004dcc:	e00a      	b.n	8004de4 <HAL_GPIO_Init+0x240>
 8004dce:	2305      	movs	r3, #5
 8004dd0:	e008      	b.n	8004de4 <HAL_GPIO_Init+0x240>
 8004dd2:	2304      	movs	r3, #4
 8004dd4:	e006      	b.n	8004de4 <HAL_GPIO_Init+0x240>
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e004      	b.n	8004de4 <HAL_GPIO_Init+0x240>
 8004dda:	2302      	movs	r3, #2
 8004ddc:	e002      	b.n	8004de4 <HAL_GPIO_Init+0x240>
 8004dde:	2301      	movs	r3, #1
 8004de0:	e000      	b.n	8004de4 <HAL_GPIO_Init+0x240>
 8004de2:	2300      	movs	r3, #0
 8004de4:	69fa      	ldr	r2, [r7, #28]
 8004de6:	f002 0203 	and.w	r2, r2, #3
 8004dea:	0092      	lsls	r2, r2, #2
 8004dec:	4093      	lsls	r3, r2
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004df4:	4935      	ldr	r1, [pc, #212]	; (8004ecc <HAL_GPIO_Init+0x328>)
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	089b      	lsrs	r3, r3, #2
 8004dfa:	3302      	adds	r3, #2
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e02:	4b3d      	ldr	r3, [pc, #244]	; (8004ef8 <HAL_GPIO_Init+0x354>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	43db      	mvns	r3, r3
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e26:	4a34      	ldr	r2, [pc, #208]	; (8004ef8 <HAL_GPIO_Init+0x354>)
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e2c:	4b32      	ldr	r3, [pc, #200]	; (8004ef8 <HAL_GPIO_Init+0x354>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	43db      	mvns	r3, r3
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e50:	4a29      	ldr	r2, [pc, #164]	; (8004ef8 <HAL_GPIO_Init+0x354>)
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e56:	4b28      	ldr	r3, [pc, #160]	; (8004ef8 <HAL_GPIO_Init+0x354>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	43db      	mvns	r3, r3
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	4013      	ands	r3, r2
 8004e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e7a:	4a1f      	ldr	r2, [pc, #124]	; (8004ef8 <HAL_GPIO_Init+0x354>)
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e80:	4b1d      	ldr	r3, [pc, #116]	; (8004ef8 <HAL_GPIO_Init+0x354>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ea4:	4a14      	ldr	r2, [pc, #80]	; (8004ef8 <HAL_GPIO_Init+0x354>)
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	3301      	adds	r3, #1
 8004eae:	61fb      	str	r3, [r7, #28]
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	2b0f      	cmp	r3, #15
 8004eb4:	f67f ae86 	bls.w	8004bc4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004eb8:	bf00      	nop
 8004eba:	bf00      	nop
 8004ebc:	3724      	adds	r7, #36	; 0x24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	40013800 	.word	0x40013800
 8004ed0:	40020000 	.word	0x40020000
 8004ed4:	40020400 	.word	0x40020400
 8004ed8:	40020800 	.word	0x40020800
 8004edc:	40020c00 	.word	0x40020c00
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	40021400 	.word	0x40021400
 8004ee8:	40021800 	.word	0x40021800
 8004eec:	40021c00 	.word	0x40021c00
 8004ef0:	40022000 	.word	0x40022000
 8004ef4:	40022400 	.word	0x40022400
 8004ef8:	40013c00 	.word	0x40013c00

08004efc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	887b      	ldrh	r3, [r7, #2]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d002      	beq.n	8004f1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f14:	2301      	movs	r3, #1
 8004f16:	73fb      	strb	r3, [r7, #15]
 8004f18:	e001      	b.n	8004f1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	807b      	strh	r3, [r7, #2]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f3c:	787b      	ldrb	r3, [r7, #1]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f42:	887a      	ldrh	r2, [r7, #2]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004f48:	e003      	b.n	8004f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004f4a:	887b      	ldrh	r3, [r7, #2]
 8004f4c:	041a      	lsls	r2, r3, #16
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	619a      	str	r2, [r3, #24]
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b085      	sub	sp, #20
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	460b      	mov	r3, r1
 8004f68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f70:	887a      	ldrh	r2, [r7, #2]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4013      	ands	r3, r2
 8004f76:	041a      	lsls	r2, r3, #16
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	43d9      	mvns	r1, r3
 8004f7c:	887b      	ldrh	r3, [r7, #2]
 8004f7e:	400b      	ands	r3, r1
 8004f80:	431a      	orrs	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	619a      	str	r2, [r3, #24]
}
 8004f86:	bf00      	nop
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
	...

08004f94 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004f9e:	4b23      	ldr	r3, [pc, #140]	; (800502c <HAL_PWREx_EnableOverDrive+0x98>)
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	4a22      	ldr	r2, [pc, #136]	; (800502c <HAL_PWREx_EnableOverDrive+0x98>)
 8004fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8004faa:	4b20      	ldr	r3, [pc, #128]	; (800502c <HAL_PWREx_EnableOverDrive+0x98>)
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb2:	603b      	str	r3, [r7, #0]
 8004fb4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004fb6:	4b1e      	ldr	r3, [pc, #120]	; (8005030 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a1d      	ldr	r2, [pc, #116]	; (8005030 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fc2:	f7fe f927 	bl	8003214 <HAL_GetTick>
 8004fc6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004fc8:	e009      	b.n	8004fde <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004fca:	f7fe f923 	bl	8003214 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fd8:	d901      	bls.n	8004fde <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e022      	b.n	8005024 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004fde:	4b14      	ldr	r3, [pc, #80]	; (8005030 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fea:	d1ee      	bne.n	8004fca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004fec:	4b10      	ldr	r3, [pc, #64]	; (8005030 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a0f      	ldr	r2, [pc, #60]	; (8005030 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ff6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ff8:	f7fe f90c 	bl	8003214 <HAL_GetTick>
 8004ffc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ffe:	e009      	b.n	8005014 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005000:	f7fe f908 	bl	8003214 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800500e:	d901      	bls.n	8005014 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e007      	b.n	8005024 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005014:	4b06      	ldr	r3, [pc, #24]	; (8005030 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005020:	d1ee      	bne.n	8005000 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40023800 	.word	0x40023800
 8005030:	40007000 	.word	0x40007000

08005034 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800503c:	2300      	movs	r3, #0
 800503e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e29b      	b.n	8005582 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 8087 	beq.w	8005166 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005058:	4b96      	ldr	r3, [pc, #600]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 030c 	and.w	r3, r3, #12
 8005060:	2b04      	cmp	r3, #4
 8005062:	d00c      	beq.n	800507e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005064:	4b93      	ldr	r3, [pc, #588]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 030c 	and.w	r3, r3, #12
 800506c:	2b08      	cmp	r3, #8
 800506e:	d112      	bne.n	8005096 <HAL_RCC_OscConfig+0x62>
 8005070:	4b90      	ldr	r3, [pc, #576]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800507c:	d10b      	bne.n	8005096 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800507e:	4b8d      	ldr	r3, [pc, #564]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d06c      	beq.n	8005164 <HAL_RCC_OscConfig+0x130>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d168      	bne.n	8005164 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e275      	b.n	8005582 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800509e:	d106      	bne.n	80050ae <HAL_RCC_OscConfig+0x7a>
 80050a0:	4b84      	ldr	r3, [pc, #528]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a83      	ldr	r2, [pc, #524]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 80050a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	e02e      	b.n	800510c <HAL_RCC_OscConfig+0xd8>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10c      	bne.n	80050d0 <HAL_RCC_OscConfig+0x9c>
 80050b6:	4b7f      	ldr	r3, [pc, #508]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a7e      	ldr	r2, [pc, #504]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 80050bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	4b7c      	ldr	r3, [pc, #496]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a7b      	ldr	r2, [pc, #492]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 80050c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	e01d      	b.n	800510c <HAL_RCC_OscConfig+0xd8>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050d8:	d10c      	bne.n	80050f4 <HAL_RCC_OscConfig+0xc0>
 80050da:	4b76      	ldr	r3, [pc, #472]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a75      	ldr	r2, [pc, #468]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 80050e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	4b73      	ldr	r3, [pc, #460]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a72      	ldr	r2, [pc, #456]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 80050ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	e00b      	b.n	800510c <HAL_RCC_OscConfig+0xd8>
 80050f4:	4b6f      	ldr	r3, [pc, #444]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a6e      	ldr	r2, [pc, #440]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 80050fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	4b6c      	ldr	r3, [pc, #432]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a6b      	ldr	r2, [pc, #428]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 8005106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800510a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d013      	beq.n	800513c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005114:	f7fe f87e 	bl	8003214 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800511c:	f7fe f87a 	bl	8003214 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b64      	cmp	r3, #100	; 0x64
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e229      	b.n	8005582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800512e:	4b61      	ldr	r3, [pc, #388]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0f0      	beq.n	800511c <HAL_RCC_OscConfig+0xe8>
 800513a:	e014      	b.n	8005166 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513c:	f7fe f86a 	bl	8003214 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005144:	f7fe f866 	bl	8003214 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b64      	cmp	r3, #100	; 0x64
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e215      	b.n	8005582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005156:	4b57      	ldr	r3, [pc, #348]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1f0      	bne.n	8005144 <HAL_RCC_OscConfig+0x110>
 8005162:	e000      	b.n	8005166 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d069      	beq.n	8005246 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005172:	4b50      	ldr	r3, [pc, #320]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 030c 	and.w	r3, r3, #12
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00b      	beq.n	8005196 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800517e:	4b4d      	ldr	r3, [pc, #308]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 030c 	and.w	r3, r3, #12
 8005186:	2b08      	cmp	r3, #8
 8005188:	d11c      	bne.n	80051c4 <HAL_RCC_OscConfig+0x190>
 800518a:	4b4a      	ldr	r3, [pc, #296]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d116      	bne.n	80051c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005196:	4b47      	ldr	r3, [pc, #284]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d005      	beq.n	80051ae <HAL_RCC_OscConfig+0x17a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d001      	beq.n	80051ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e1e9      	b.n	8005582 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ae:	4b41      	ldr	r3, [pc, #260]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	493d      	ldr	r1, [pc, #244]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051c2:	e040      	b.n	8005246 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d023      	beq.n	8005214 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051cc:	4b39      	ldr	r3, [pc, #228]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a38      	ldr	r2, [pc, #224]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 80051d2:	f043 0301 	orr.w	r3, r3, #1
 80051d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d8:	f7fe f81c 	bl	8003214 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051e0:	f7fe f818 	bl	8003214 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e1c7      	b.n	8005582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051f2:	4b30      	ldr	r3, [pc, #192]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0f0      	beq.n	80051e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051fe:	4b2d      	ldr	r3, [pc, #180]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	4929      	ldr	r1, [pc, #164]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 800520e:	4313      	orrs	r3, r2
 8005210:	600b      	str	r3, [r1, #0]
 8005212:	e018      	b.n	8005246 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005214:	4b27      	ldr	r3, [pc, #156]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a26      	ldr	r2, [pc, #152]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 800521a:	f023 0301 	bic.w	r3, r3, #1
 800521e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005220:	f7fd fff8 	bl	8003214 <HAL_GetTick>
 8005224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005226:	e008      	b.n	800523a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005228:	f7fd fff4 	bl	8003214 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e1a3      	b.n	8005582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800523a:	4b1e      	ldr	r3, [pc, #120]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1f0      	bne.n	8005228 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b00      	cmp	r3, #0
 8005250:	d038      	beq.n	80052c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d019      	beq.n	800528e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800525a:	4b16      	ldr	r3, [pc, #88]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 800525c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800525e:	4a15      	ldr	r2, [pc, #84]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 8005260:	f043 0301 	orr.w	r3, r3, #1
 8005264:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005266:	f7fd ffd5 	bl	8003214 <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800526c:	e008      	b.n	8005280 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800526e:	f7fd ffd1 	bl	8003214 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e180      	b.n	8005582 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005280:	4b0c      	ldr	r3, [pc, #48]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 8005282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0f0      	beq.n	800526e <HAL_RCC_OscConfig+0x23a>
 800528c:	e01a      	b.n	80052c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800528e:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 8005290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005292:	4a08      	ldr	r2, [pc, #32]	; (80052b4 <HAL_RCC_OscConfig+0x280>)
 8005294:	f023 0301 	bic.w	r3, r3, #1
 8005298:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800529a:	f7fd ffbb 	bl	8003214 <HAL_GetTick>
 800529e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052a0:	e00a      	b.n	80052b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052a2:	f7fd ffb7 	bl	8003214 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d903      	bls.n	80052b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e166      	b.n	8005582 <HAL_RCC_OscConfig+0x54e>
 80052b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052b8:	4b92      	ldr	r3, [pc, #584]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 80052ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1ee      	bne.n	80052a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 80a4 	beq.w	800541a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052d2:	4b8c      	ldr	r3, [pc, #560]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10d      	bne.n	80052fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80052de:	4b89      	ldr	r3, [pc, #548]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	4a88      	ldr	r2, [pc, #544]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 80052e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052e8:	6413      	str	r3, [r2, #64]	; 0x40
 80052ea:	4b86      	ldr	r3, [pc, #536]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f2:	60bb      	str	r3, [r7, #8]
 80052f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052f6:	2301      	movs	r3, #1
 80052f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052fa:	4b83      	ldr	r3, [pc, #524]	; (8005508 <HAL_RCC_OscConfig+0x4d4>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005302:	2b00      	cmp	r3, #0
 8005304:	d118      	bne.n	8005338 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005306:	4b80      	ldr	r3, [pc, #512]	; (8005508 <HAL_RCC_OscConfig+0x4d4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a7f      	ldr	r2, [pc, #508]	; (8005508 <HAL_RCC_OscConfig+0x4d4>)
 800530c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005312:	f7fd ff7f 	bl	8003214 <HAL_GetTick>
 8005316:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005318:	e008      	b.n	800532c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800531a:	f7fd ff7b 	bl	8003214 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b64      	cmp	r3, #100	; 0x64
 8005326:	d901      	bls.n	800532c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e12a      	b.n	8005582 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800532c:	4b76      	ldr	r3, [pc, #472]	; (8005508 <HAL_RCC_OscConfig+0x4d4>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0f0      	beq.n	800531a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d106      	bne.n	800534e <HAL_RCC_OscConfig+0x31a>
 8005340:	4b70      	ldr	r3, [pc, #448]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 8005342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005344:	4a6f      	ldr	r2, [pc, #444]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 8005346:	f043 0301 	orr.w	r3, r3, #1
 800534a:	6713      	str	r3, [r2, #112]	; 0x70
 800534c:	e02d      	b.n	80053aa <HAL_RCC_OscConfig+0x376>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10c      	bne.n	8005370 <HAL_RCC_OscConfig+0x33c>
 8005356:	4b6b      	ldr	r3, [pc, #428]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 8005358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535a:	4a6a      	ldr	r2, [pc, #424]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 800535c:	f023 0301 	bic.w	r3, r3, #1
 8005360:	6713      	str	r3, [r2, #112]	; 0x70
 8005362:	4b68      	ldr	r3, [pc, #416]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 8005364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005366:	4a67      	ldr	r2, [pc, #412]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 8005368:	f023 0304 	bic.w	r3, r3, #4
 800536c:	6713      	str	r3, [r2, #112]	; 0x70
 800536e:	e01c      	b.n	80053aa <HAL_RCC_OscConfig+0x376>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	2b05      	cmp	r3, #5
 8005376:	d10c      	bne.n	8005392 <HAL_RCC_OscConfig+0x35e>
 8005378:	4b62      	ldr	r3, [pc, #392]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 800537a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537c:	4a61      	ldr	r2, [pc, #388]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 800537e:	f043 0304 	orr.w	r3, r3, #4
 8005382:	6713      	str	r3, [r2, #112]	; 0x70
 8005384:	4b5f      	ldr	r3, [pc, #380]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 8005386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005388:	4a5e      	ldr	r2, [pc, #376]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 800538a:	f043 0301 	orr.w	r3, r3, #1
 800538e:	6713      	str	r3, [r2, #112]	; 0x70
 8005390:	e00b      	b.n	80053aa <HAL_RCC_OscConfig+0x376>
 8005392:	4b5c      	ldr	r3, [pc, #368]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 8005394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005396:	4a5b      	ldr	r2, [pc, #364]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 8005398:	f023 0301 	bic.w	r3, r3, #1
 800539c:	6713      	str	r3, [r2, #112]	; 0x70
 800539e:	4b59      	ldr	r3, [pc, #356]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 80053a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a2:	4a58      	ldr	r2, [pc, #352]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 80053a4:	f023 0304 	bic.w	r3, r3, #4
 80053a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d015      	beq.n	80053de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b2:	f7fd ff2f 	bl	8003214 <HAL_GetTick>
 80053b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b8:	e00a      	b.n	80053d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ba:	f7fd ff2b 	bl	8003214 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d901      	bls.n	80053d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e0d8      	b.n	8005582 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d0:	4b4c      	ldr	r3, [pc, #304]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 80053d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0ee      	beq.n	80053ba <HAL_RCC_OscConfig+0x386>
 80053dc:	e014      	b.n	8005408 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053de:	f7fd ff19 	bl	8003214 <HAL_GetTick>
 80053e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053e4:	e00a      	b.n	80053fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053e6:	f7fd ff15 	bl	8003214 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e0c2      	b.n	8005582 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053fc:	4b41      	ldr	r3, [pc, #260]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 80053fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1ee      	bne.n	80053e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005408:	7dfb      	ldrb	r3, [r7, #23]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d105      	bne.n	800541a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800540e:	4b3d      	ldr	r3, [pc, #244]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	4a3c      	ldr	r2, [pc, #240]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 8005414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005418:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 80ae 	beq.w	8005580 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005424:	4b37      	ldr	r3, [pc, #220]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f003 030c 	and.w	r3, r3, #12
 800542c:	2b08      	cmp	r3, #8
 800542e:	d06d      	beq.n	800550c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	2b02      	cmp	r3, #2
 8005436:	d14b      	bne.n	80054d0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005438:	4b32      	ldr	r3, [pc, #200]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a31      	ldr	r2, [pc, #196]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 800543e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005444:	f7fd fee6 	bl	8003214 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800544c:	f7fd fee2 	bl	8003214 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e091      	b.n	8005582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800545e:	4b29      	ldr	r3, [pc, #164]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1f0      	bne.n	800544c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	69da      	ldr	r2, [r3, #28]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	019b      	lsls	r3, r3, #6
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	085b      	lsrs	r3, r3, #1
 8005482:	3b01      	subs	r3, #1
 8005484:	041b      	lsls	r3, r3, #16
 8005486:	431a      	orrs	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548c:	061b      	lsls	r3, r3, #24
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005494:	071b      	lsls	r3, r3, #28
 8005496:	491b      	ldr	r1, [pc, #108]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 8005498:	4313      	orrs	r3, r2
 800549a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800549c:	4b19      	ldr	r3, [pc, #100]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a18      	ldr	r2, [pc, #96]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 80054a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a8:	f7fd feb4 	bl	8003214 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054b0:	f7fd feb0 	bl	8003214 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e05f      	b.n	8005582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054c2:	4b10      	ldr	r3, [pc, #64]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0f0      	beq.n	80054b0 <HAL_RCC_OscConfig+0x47c>
 80054ce:	e057      	b.n	8005580 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054d0:	4b0c      	ldr	r3, [pc, #48]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a0b      	ldr	r2, [pc, #44]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 80054d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054dc:	f7fd fe9a 	bl	8003214 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e4:	f7fd fe96 	bl	8003214 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e045      	b.n	8005582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054f6:	4b03      	ldr	r3, [pc, #12]	; (8005504 <HAL_RCC_OscConfig+0x4d0>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1f0      	bne.n	80054e4 <HAL_RCC_OscConfig+0x4b0>
 8005502:	e03d      	b.n	8005580 <HAL_RCC_OscConfig+0x54c>
 8005504:	40023800 	.word	0x40023800
 8005508:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800550c:	4b1f      	ldr	r3, [pc, #124]	; (800558c <HAL_RCC_OscConfig+0x558>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d030      	beq.n	800557c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005524:	429a      	cmp	r2, r3
 8005526:	d129      	bne.n	800557c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005532:	429a      	cmp	r2, r3
 8005534:	d122      	bne.n	800557c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800553c:	4013      	ands	r3, r2
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005542:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005544:	4293      	cmp	r3, r2
 8005546:	d119      	bne.n	800557c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005552:	085b      	lsrs	r3, r3, #1
 8005554:	3b01      	subs	r3, #1
 8005556:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005558:	429a      	cmp	r2, r3
 800555a:	d10f      	bne.n	800557c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005568:	429a      	cmp	r2, r3
 800556a:	d107      	bne.n	800557c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005576:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005578:	429a      	cmp	r2, r3
 800557a:	d001      	beq.n	8005580 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	40023800 	.word	0x40023800

08005590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800559a:	2300      	movs	r3, #0
 800559c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e0d0      	b.n	800574a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055a8:	4b6a      	ldr	r3, [pc, #424]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 030f 	and.w	r3, r3, #15
 80055b0:	683a      	ldr	r2, [r7, #0]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d910      	bls.n	80055d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055b6:	4b67      	ldr	r3, [pc, #412]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f023 020f 	bic.w	r2, r3, #15
 80055be:	4965      	ldr	r1, [pc, #404]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055c6:	4b63      	ldr	r3, [pc, #396]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	683a      	ldr	r2, [r7, #0]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d001      	beq.n	80055d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e0b8      	b.n	800574a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d020      	beq.n	8005626 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d005      	beq.n	80055fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055f0:	4b59      	ldr	r3, [pc, #356]	; (8005758 <HAL_RCC_ClockConfig+0x1c8>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	4a58      	ldr	r2, [pc, #352]	; (8005758 <HAL_RCC_ClockConfig+0x1c8>)
 80055f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0308 	and.w	r3, r3, #8
 8005604:	2b00      	cmp	r3, #0
 8005606:	d005      	beq.n	8005614 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005608:	4b53      	ldr	r3, [pc, #332]	; (8005758 <HAL_RCC_ClockConfig+0x1c8>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	4a52      	ldr	r2, [pc, #328]	; (8005758 <HAL_RCC_ClockConfig+0x1c8>)
 800560e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005612:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005614:	4b50      	ldr	r3, [pc, #320]	; (8005758 <HAL_RCC_ClockConfig+0x1c8>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	494d      	ldr	r1, [pc, #308]	; (8005758 <HAL_RCC_ClockConfig+0x1c8>)
 8005622:	4313      	orrs	r3, r2
 8005624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d040      	beq.n	80056b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d107      	bne.n	800564a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800563a:	4b47      	ldr	r3, [pc, #284]	; (8005758 <HAL_RCC_ClockConfig+0x1c8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d115      	bne.n	8005672 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e07f      	b.n	800574a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2b02      	cmp	r3, #2
 8005650:	d107      	bne.n	8005662 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005652:	4b41      	ldr	r3, [pc, #260]	; (8005758 <HAL_RCC_ClockConfig+0x1c8>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d109      	bne.n	8005672 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e073      	b.n	800574a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005662:	4b3d      	ldr	r3, [pc, #244]	; (8005758 <HAL_RCC_ClockConfig+0x1c8>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e06b      	b.n	800574a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005672:	4b39      	ldr	r3, [pc, #228]	; (8005758 <HAL_RCC_ClockConfig+0x1c8>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f023 0203 	bic.w	r2, r3, #3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	4936      	ldr	r1, [pc, #216]	; (8005758 <HAL_RCC_ClockConfig+0x1c8>)
 8005680:	4313      	orrs	r3, r2
 8005682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005684:	f7fd fdc6 	bl	8003214 <HAL_GetTick>
 8005688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800568a:	e00a      	b.n	80056a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800568c:	f7fd fdc2 	bl	8003214 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	f241 3288 	movw	r2, #5000	; 0x1388
 800569a:	4293      	cmp	r3, r2
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e053      	b.n	800574a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056a2:	4b2d      	ldr	r3, [pc, #180]	; (8005758 <HAL_RCC_ClockConfig+0x1c8>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 020c 	and.w	r2, r3, #12
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d1eb      	bne.n	800568c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056b4:	4b27      	ldr	r3, [pc, #156]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 030f 	and.w	r3, r3, #15
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d210      	bcs.n	80056e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056c2:	4b24      	ldr	r3, [pc, #144]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f023 020f 	bic.w	r2, r3, #15
 80056ca:	4922      	ldr	r1, [pc, #136]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056d2:	4b20      	ldr	r3, [pc, #128]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d001      	beq.n	80056e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e032      	b.n	800574a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d008      	beq.n	8005702 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056f0:	4b19      	ldr	r3, [pc, #100]	; (8005758 <HAL_RCC_ClockConfig+0x1c8>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	4916      	ldr	r1, [pc, #88]	; (8005758 <HAL_RCC_ClockConfig+0x1c8>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0308 	and.w	r3, r3, #8
 800570a:	2b00      	cmp	r3, #0
 800570c:	d009      	beq.n	8005722 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800570e:	4b12      	ldr	r3, [pc, #72]	; (8005758 <HAL_RCC_ClockConfig+0x1c8>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	490e      	ldr	r1, [pc, #56]	; (8005758 <HAL_RCC_ClockConfig+0x1c8>)
 800571e:	4313      	orrs	r3, r2
 8005720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005722:	f000 f821 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 8005726:	4602      	mov	r2, r0
 8005728:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <HAL_RCC_ClockConfig+0x1c8>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	091b      	lsrs	r3, r3, #4
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	490a      	ldr	r1, [pc, #40]	; (800575c <HAL_RCC_ClockConfig+0x1cc>)
 8005734:	5ccb      	ldrb	r3, [r1, r3]
 8005736:	fa22 f303 	lsr.w	r3, r2, r3
 800573a:	4a09      	ldr	r2, [pc, #36]	; (8005760 <HAL_RCC_ClockConfig+0x1d0>)
 800573c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800573e:	4b09      	ldr	r3, [pc, #36]	; (8005764 <HAL_RCC_ClockConfig+0x1d4>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f7fd fd22 	bl	800318c <HAL_InitTick>

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	40023c00 	.word	0x40023c00
 8005758:	40023800 	.word	0x40023800
 800575c:	080086a0 	.word	0x080086a0
 8005760:	20000000 	.word	0x20000000
 8005764:	20000004 	.word	0x20000004

08005768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800576c:	b090      	sub	sp, #64	; 0x40
 800576e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005770:	2300      	movs	r3, #0
 8005772:	637b      	str	r3, [r7, #52]	; 0x34
 8005774:	2300      	movs	r3, #0
 8005776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005778:	2300      	movs	r3, #0
 800577a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800577c:	2300      	movs	r3, #0
 800577e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005780:	4b59      	ldr	r3, [pc, #356]	; (80058e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f003 030c 	and.w	r3, r3, #12
 8005788:	2b08      	cmp	r3, #8
 800578a:	d00d      	beq.n	80057a8 <HAL_RCC_GetSysClockFreq+0x40>
 800578c:	2b08      	cmp	r3, #8
 800578e:	f200 80a1 	bhi.w	80058d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005792:	2b00      	cmp	r3, #0
 8005794:	d002      	beq.n	800579c <HAL_RCC_GetSysClockFreq+0x34>
 8005796:	2b04      	cmp	r3, #4
 8005798:	d003      	beq.n	80057a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800579a:	e09b      	b.n	80058d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800579c:	4b53      	ldr	r3, [pc, #332]	; (80058ec <HAL_RCC_GetSysClockFreq+0x184>)
 800579e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80057a0:	e09b      	b.n	80058da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057a2:	4b53      	ldr	r3, [pc, #332]	; (80058f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80057a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80057a6:	e098      	b.n	80058da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057a8:	4b4f      	ldr	r3, [pc, #316]	; (80058e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057b0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80057b2:	4b4d      	ldr	r3, [pc, #308]	; (80058e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d028      	beq.n	8005810 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057be:	4b4a      	ldr	r3, [pc, #296]	; (80058e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	099b      	lsrs	r3, r3, #6
 80057c4:	2200      	movs	r2, #0
 80057c6:	623b      	str	r3, [r7, #32]
 80057c8:	627a      	str	r2, [r7, #36]	; 0x24
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80057d0:	2100      	movs	r1, #0
 80057d2:	4b47      	ldr	r3, [pc, #284]	; (80058f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80057d4:	fb03 f201 	mul.w	r2, r3, r1
 80057d8:	2300      	movs	r3, #0
 80057da:	fb00 f303 	mul.w	r3, r0, r3
 80057de:	4413      	add	r3, r2
 80057e0:	4a43      	ldr	r2, [pc, #268]	; (80058f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80057e2:	fba0 1202 	umull	r1, r2, r0, r2
 80057e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057e8:	460a      	mov	r2, r1
 80057ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80057ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ee:	4413      	add	r3, r2
 80057f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f4:	2200      	movs	r2, #0
 80057f6:	61bb      	str	r3, [r7, #24]
 80057f8:	61fa      	str	r2, [r7, #28]
 80057fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005802:	f7fa fd21 	bl	8000248 <__aeabi_uldivmod>
 8005806:	4602      	mov	r2, r0
 8005808:	460b      	mov	r3, r1
 800580a:	4613      	mov	r3, r2
 800580c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800580e:	e053      	b.n	80058b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005810:	4b35      	ldr	r3, [pc, #212]	; (80058e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	099b      	lsrs	r3, r3, #6
 8005816:	2200      	movs	r2, #0
 8005818:	613b      	str	r3, [r7, #16]
 800581a:	617a      	str	r2, [r7, #20]
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005822:	f04f 0b00 	mov.w	fp, #0
 8005826:	4652      	mov	r2, sl
 8005828:	465b      	mov	r3, fp
 800582a:	f04f 0000 	mov.w	r0, #0
 800582e:	f04f 0100 	mov.w	r1, #0
 8005832:	0159      	lsls	r1, r3, #5
 8005834:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005838:	0150      	lsls	r0, r2, #5
 800583a:	4602      	mov	r2, r0
 800583c:	460b      	mov	r3, r1
 800583e:	ebb2 080a 	subs.w	r8, r2, sl
 8005842:	eb63 090b 	sbc.w	r9, r3, fp
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	f04f 0300 	mov.w	r3, #0
 800584e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005852:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005856:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800585a:	ebb2 0408 	subs.w	r4, r2, r8
 800585e:	eb63 0509 	sbc.w	r5, r3, r9
 8005862:	f04f 0200 	mov.w	r2, #0
 8005866:	f04f 0300 	mov.w	r3, #0
 800586a:	00eb      	lsls	r3, r5, #3
 800586c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005870:	00e2      	lsls	r2, r4, #3
 8005872:	4614      	mov	r4, r2
 8005874:	461d      	mov	r5, r3
 8005876:	eb14 030a 	adds.w	r3, r4, sl
 800587a:	603b      	str	r3, [r7, #0]
 800587c:	eb45 030b 	adc.w	r3, r5, fp
 8005880:	607b      	str	r3, [r7, #4]
 8005882:	f04f 0200 	mov.w	r2, #0
 8005886:	f04f 0300 	mov.w	r3, #0
 800588a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800588e:	4629      	mov	r1, r5
 8005890:	028b      	lsls	r3, r1, #10
 8005892:	4621      	mov	r1, r4
 8005894:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005898:	4621      	mov	r1, r4
 800589a:	028a      	lsls	r2, r1, #10
 800589c:	4610      	mov	r0, r2
 800589e:	4619      	mov	r1, r3
 80058a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a2:	2200      	movs	r2, #0
 80058a4:	60bb      	str	r3, [r7, #8]
 80058a6:	60fa      	str	r2, [r7, #12]
 80058a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058ac:	f7fa fccc 	bl	8000248 <__aeabi_uldivmod>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4613      	mov	r3, r2
 80058b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80058b8:	4b0b      	ldr	r3, [pc, #44]	; (80058e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	0c1b      	lsrs	r3, r3, #16
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	3301      	adds	r3, #1
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80058c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80058d2:	e002      	b.n	80058da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058d4:	4b05      	ldr	r3, [pc, #20]	; (80058ec <HAL_RCC_GetSysClockFreq+0x184>)
 80058d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80058d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3740      	adds	r7, #64	; 0x40
 80058e0:	46bd      	mov	sp, r7
 80058e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058e6:	bf00      	nop
 80058e8:	40023800 	.word	0x40023800
 80058ec:	00f42400 	.word	0x00f42400
 80058f0:	017d7840 	.word	0x017d7840

080058f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058f4:	b480      	push	{r7}
 80058f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058f8:	4b03      	ldr	r3, [pc, #12]	; (8005908 <HAL_RCC_GetHCLKFreq+0x14>)
 80058fa:	681b      	ldr	r3, [r3, #0]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	20000000 	.word	0x20000000

0800590c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005910:	f7ff fff0 	bl	80058f4 <HAL_RCC_GetHCLKFreq>
 8005914:	4602      	mov	r2, r0
 8005916:	4b05      	ldr	r3, [pc, #20]	; (800592c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	0a9b      	lsrs	r3, r3, #10
 800591c:	f003 0307 	and.w	r3, r3, #7
 8005920:	4903      	ldr	r1, [pc, #12]	; (8005930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005922:	5ccb      	ldrb	r3, [r1, r3]
 8005924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005928:	4618      	mov	r0, r3
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40023800 	.word	0x40023800
 8005930:	080086b0 	.word	0x080086b0

08005934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005938:	f7ff ffdc 	bl	80058f4 <HAL_RCC_GetHCLKFreq>
 800593c:	4602      	mov	r2, r0
 800593e:	4b05      	ldr	r3, [pc, #20]	; (8005954 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	0b5b      	lsrs	r3, r3, #13
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	4903      	ldr	r1, [pc, #12]	; (8005958 <HAL_RCC_GetPCLK2Freq+0x24>)
 800594a:	5ccb      	ldrb	r3, [r1, r3]
 800594c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005950:	4618      	mov	r0, r3
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40023800 	.word	0x40023800
 8005958:	080086b0 	.word	0x080086b0

0800595c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005964:	2300      	movs	r3, #0
 8005966:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005968:	2300      	movs	r3, #0
 800596a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800596c:	2300      	movs	r3, #0
 800596e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005970:	2300      	movs	r3, #0
 8005972:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005974:	2300      	movs	r3, #0
 8005976:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d012      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005984:	4b69      	ldr	r3, [pc, #420]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	4a68      	ldr	r2, [pc, #416]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800598a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800598e:	6093      	str	r3, [r2, #8]
 8005990:	4b66      	ldr	r3, [pc, #408]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005998:	4964      	ldr	r1, [pc, #400]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800599a:	4313      	orrs	r3, r2
 800599c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80059a6:	2301      	movs	r3, #1
 80059a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d017      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059b6:	4b5d      	ldr	r3, [pc, #372]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c4:	4959      	ldr	r1, [pc, #356]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059d4:	d101      	bne.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80059d6:	2301      	movs	r3, #1
 80059d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80059e2:	2301      	movs	r3, #1
 80059e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d017      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80059f2:	4b4e      	ldr	r3, [pc, #312]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a00:	494a      	ldr	r1, [pc, #296]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a10:	d101      	bne.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005a12:	2301      	movs	r3, #1
 8005a14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 808b 	beq.w	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a40:	4b3a      	ldr	r3, [pc, #232]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a44:	4a39      	ldr	r2, [pc, #228]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8005a4c:	4b37      	ldr	r3, [pc, #220]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a54:	60bb      	str	r3, [r7, #8]
 8005a56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005a58:	4b35      	ldr	r3, [pc, #212]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a34      	ldr	r2, [pc, #208]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a64:	f7fd fbd6 	bl	8003214 <HAL_GetTick>
 8005a68:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005a6a:	e008      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a6c:	f7fd fbd2 	bl	8003214 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b64      	cmp	r3, #100	; 0x64
 8005a78:	d901      	bls.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e38f      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005a7e:	4b2c      	ldr	r3, [pc, #176]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0f0      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a8a:	4b28      	ldr	r3, [pc, #160]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a92:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d035      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d02e      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005aa8:	4b20      	ldr	r3, [pc, #128]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ab0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ab2:	4b1e      	ldr	r3, [pc, #120]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab6:	4a1d      	ldr	r2, [pc, #116]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005abc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005abe:	4b1b      	ldr	r3, [pc, #108]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac2:	4a1a      	ldr	r2, [pc, #104]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ac8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005aca:	4a18      	ldr	r2, [pc, #96]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005ad0:	4b16      	ldr	r3, [pc, #88]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d114      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005adc:	f7fd fb9a 	bl	8003214 <HAL_GetTick>
 8005ae0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ae2:	e00a      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ae4:	f7fd fb96 	bl	8003214 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d901      	bls.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e351      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005afa:	4b0c      	ldr	r3, [pc, #48]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0ee      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b12:	d111      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005b14:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b20:	4b04      	ldr	r3, [pc, #16]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005b22:	400b      	ands	r3, r1
 8005b24:	4901      	ldr	r1, [pc, #4]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	608b      	str	r3, [r1, #8]
 8005b2a:	e00b      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005b2c:	40023800 	.word	0x40023800
 8005b30:	40007000 	.word	0x40007000
 8005b34:	0ffffcff 	.word	0x0ffffcff
 8005b38:	4bac      	ldr	r3, [pc, #688]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	4aab      	ldr	r2, [pc, #684]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005b42:	6093      	str	r3, [r2, #8]
 8005b44:	4ba9      	ldr	r3, [pc, #676]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b50:	49a6      	ldr	r1, [pc, #664]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0310 	and.w	r3, r3, #16
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d010      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b62:	4ba2      	ldr	r3, [pc, #648]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b68:	4aa0      	ldr	r2, [pc, #640]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b72:	4b9e      	ldr	r3, [pc, #632]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b74:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7c:	499b      	ldr	r1, [pc, #620]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00a      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b90:	4b96      	ldr	r3, [pc, #600]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b9e:	4993      	ldr	r1, [pc, #588]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00a      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005bb2:	4b8e      	ldr	r3, [pc, #568]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bc0:	498a      	ldr	r1, [pc, #552]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00a      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005bd4:	4b85      	ldr	r3, [pc, #532]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005be2:	4982      	ldr	r1, [pc, #520]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005bf6:	4b7d      	ldr	r3, [pc, #500]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bfc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c04:	4979      	ldr	r1, [pc, #484]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00a      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c18:	4b74      	ldr	r3, [pc, #464]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1e:	f023 0203 	bic.w	r2, r3, #3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c26:	4971      	ldr	r1, [pc, #452]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00a      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c3a:	4b6c      	ldr	r3, [pc, #432]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c40:	f023 020c 	bic.w	r2, r3, #12
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c48:	4968      	ldr	r1, [pc, #416]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00a      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c5c:	4b63      	ldr	r3, [pc, #396]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c62:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c6a:	4960      	ldr	r1, [pc, #384]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00a      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c7e:	4b5b      	ldr	r3, [pc, #364]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c84:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c8c:	4957      	ldr	r1, [pc, #348]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00a      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ca0:	4b52      	ldr	r3, [pc, #328]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cae:	494f      	ldr	r1, [pc, #316]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00a      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005cc2:	4b4a      	ldr	r3, [pc, #296]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd0:	4946      	ldr	r1, [pc, #280]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00a      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005ce4:	4b41      	ldr	r3, [pc, #260]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf2:	493e      	ldr	r1, [pc, #248]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005d06:	4b39      	ldr	r3, [pc, #228]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d14:	4935      	ldr	r1, [pc, #212]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00a      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d28:	4b30      	ldr	r3, [pc, #192]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d36:	492d      	ldr	r1, [pc, #180]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d011      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005d4a:	4b28      	ldr	r3, [pc, #160]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d50:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d58:	4924      	ldr	r1, [pc, #144]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d68:	d101      	bne.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0308 	and.w	r3, r3, #8
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d8a:	4b18      	ldr	r3, [pc, #96]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d90:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d98:	4914      	ldr	r1, [pc, #80]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00b      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005dac:	4b0f      	ldr	r3, [pc, #60]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dbc:	490b      	ldr	r1, [pc, #44]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00f      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005dd0:	4b06      	ldr	r3, [pc, #24]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005de0:	4902      	ldr	r1, [pc, #8]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005de8:	e002      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005dea:	bf00      	nop
 8005dec:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00b      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005dfc:	4b8a      	ldr	r3, [pc, #552]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e0c:	4986      	ldr	r1, [pc, #536]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00b      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005e20:	4b81      	ldr	r3, [pc, #516]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e30:	497d      	ldr	r1, [pc, #500]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d006      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f000 80d6 	beq.w	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e4c:	4b76      	ldr	r3, [pc, #472]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a75      	ldr	r2, [pc, #468]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e58:	f7fd f9dc 	bl	8003214 <HAL_GetTick>
 8005e5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e60:	f7fd f9d8 	bl	8003214 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b64      	cmp	r3, #100	; 0x64
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e195      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e72:	4b6d      	ldr	r3, [pc, #436]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1f0      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d021      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d11d      	bne.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005e92:	4b65      	ldr	r3, [pc, #404]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e98:	0c1b      	lsrs	r3, r3, #16
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005ea0:	4b61      	ldr	r3, [pc, #388]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ea6:	0e1b      	lsrs	r3, r3, #24
 8005ea8:	f003 030f 	and.w	r3, r3, #15
 8005eac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	019a      	lsls	r2, r3, #6
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	041b      	lsls	r3, r3, #16
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	061b      	lsls	r3, r3, #24
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	071b      	lsls	r3, r3, #28
 8005ec6:	4958      	ldr	r1, [pc, #352]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d004      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ee2:	d00a      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d02e      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ef8:	d129      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005efa:	4b4b      	ldr	r3, [pc, #300]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f00:	0c1b      	lsrs	r3, r3, #16
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f08:	4b47      	ldr	r3, [pc, #284]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f0e:	0f1b      	lsrs	r3, r3, #28
 8005f10:	f003 0307 	and.w	r3, r3, #7
 8005f14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	019a      	lsls	r2, r3, #6
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	041b      	lsls	r3, r3, #16
 8005f20:	431a      	orrs	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	061b      	lsls	r3, r3, #24
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	071b      	lsls	r3, r3, #28
 8005f2e:	493e      	ldr	r1, [pc, #248]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005f36:	4b3c      	ldr	r3, [pc, #240]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f3c:	f023 021f 	bic.w	r2, r3, #31
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	3b01      	subs	r3, #1
 8005f46:	4938      	ldr	r1, [pc, #224]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d01d      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f5a:	4b33      	ldr	r3, [pc, #204]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f60:	0e1b      	lsrs	r3, r3, #24
 8005f62:	f003 030f 	and.w	r3, r3, #15
 8005f66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f68:	4b2f      	ldr	r3, [pc, #188]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f6e:	0f1b      	lsrs	r3, r3, #28
 8005f70:	f003 0307 	and.w	r3, r3, #7
 8005f74:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	019a      	lsls	r2, r3, #6
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	041b      	lsls	r3, r3, #16
 8005f82:	431a      	orrs	r2, r3
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	061b      	lsls	r3, r3, #24
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	071b      	lsls	r3, r3, #28
 8005f8e:	4926      	ldr	r1, [pc, #152]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d011      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	019a      	lsls	r2, r3, #6
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	041b      	lsls	r3, r3, #16
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	061b      	lsls	r3, r3, #24
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	071b      	lsls	r3, r3, #28
 8005fbe:	491a      	ldr	r1, [pc, #104]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005fc6:	4b18      	ldr	r3, [pc, #96]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a17      	ldr	r2, [pc, #92]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fd2:	f7fd f91f 	bl	8003214 <HAL_GetTick>
 8005fd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005fd8:	e008      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005fda:	f7fd f91b 	bl	8003214 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b64      	cmp	r3, #100	; 0x64
 8005fe6:	d901      	bls.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e0d8      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005fec:	4b0e      	ldr	r3, [pc, #56]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d0f0      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	f040 80ce 	bne.w	800619c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006000:	4b09      	ldr	r3, [pc, #36]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a08      	ldr	r2, [pc, #32]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800600a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800600c:	f7fd f902 	bl	8003214 <HAL_GetTick>
 8006010:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006012:	e00b      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006014:	f7fd f8fe 	bl	8003214 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	2b64      	cmp	r3, #100	; 0x64
 8006020:	d904      	bls.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e0bb      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006026:	bf00      	nop
 8006028:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800602c:	4b5e      	ldr	r3, [pc, #376]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006038:	d0ec      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604a:	2b00      	cmp	r3, #0
 800604c:	d009      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006056:	2b00      	cmp	r3, #0
 8006058:	d02e      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605e:	2b00      	cmp	r3, #0
 8006060:	d12a      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006062:	4b51      	ldr	r3, [pc, #324]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006068:	0c1b      	lsrs	r3, r3, #16
 800606a:	f003 0303 	and.w	r3, r3, #3
 800606e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006070:	4b4d      	ldr	r3, [pc, #308]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006076:	0f1b      	lsrs	r3, r3, #28
 8006078:	f003 0307 	and.w	r3, r3, #7
 800607c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	019a      	lsls	r2, r3, #6
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	041b      	lsls	r3, r3, #16
 8006088:	431a      	orrs	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	061b      	lsls	r3, r3, #24
 8006090:	431a      	orrs	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	071b      	lsls	r3, r3, #28
 8006096:	4944      	ldr	r1, [pc, #272]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006098:	4313      	orrs	r3, r2
 800609a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800609e:	4b42      	ldr	r3, [pc, #264]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80060a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ac:	3b01      	subs	r3, #1
 80060ae:	021b      	lsls	r3, r3, #8
 80060b0:	493d      	ldr	r1, [pc, #244]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d022      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060cc:	d11d      	bne.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80060ce:	4b36      	ldr	r3, [pc, #216]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80060d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d4:	0e1b      	lsrs	r3, r3, #24
 80060d6:	f003 030f 	and.w	r3, r3, #15
 80060da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80060dc:	4b32      	ldr	r3, [pc, #200]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80060de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e2:	0f1b      	lsrs	r3, r3, #28
 80060e4:	f003 0307 	and.w	r3, r3, #7
 80060e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	019a      	lsls	r2, r3, #6
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	041b      	lsls	r3, r3, #16
 80060f6:	431a      	orrs	r2, r3
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	061b      	lsls	r3, r3, #24
 80060fc:	431a      	orrs	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	071b      	lsls	r3, r3, #28
 8006102:	4929      	ldr	r1, [pc, #164]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006104:	4313      	orrs	r3, r2
 8006106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0308 	and.w	r3, r3, #8
 8006112:	2b00      	cmp	r3, #0
 8006114:	d028      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006116:	4b24      	ldr	r3, [pc, #144]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800611c:	0e1b      	lsrs	r3, r3, #24
 800611e:	f003 030f 	and.w	r3, r3, #15
 8006122:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006124:	4b20      	ldr	r3, [pc, #128]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800612a:	0c1b      	lsrs	r3, r3, #16
 800612c:	f003 0303 	and.w	r3, r3, #3
 8006130:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	019a      	lsls	r2, r3, #6
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	041b      	lsls	r3, r3, #16
 800613c:	431a      	orrs	r2, r3
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	061b      	lsls	r3, r3, #24
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	071b      	lsls	r3, r3, #28
 800614a:	4917      	ldr	r1, [pc, #92]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800614c:	4313      	orrs	r3, r2
 800614e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006152:	4b15      	ldr	r3, [pc, #84]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006158:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	4911      	ldr	r1, [pc, #68]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006162:	4313      	orrs	r3, r2
 8006164:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006168:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a0e      	ldr	r2, [pc, #56]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800616e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006172:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006174:	f7fd f84e 	bl	8003214 <HAL_GetTick>
 8006178:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800617a:	e008      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800617c:	f7fd f84a 	bl	8003214 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b64      	cmp	r3, #100	; 0x64
 8006188:	d901      	bls.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e007      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800618e:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800619a:	d1ef      	bne.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3720      	adds	r7, #32
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	40023800 	.word	0x40023800

080061ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e049      	b.n	8006252 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d106      	bne.n	80061d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7fc fee8 	bl	8002fa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	3304      	adds	r3, #4
 80061e8:	4619      	mov	r1, r3
 80061ea:	4610      	mov	r0, r2
 80061ec:	f000 f9f6 	bl	80065dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
	...

0800625c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b01      	cmp	r3, #1
 800626e:	d001      	beq.n	8006274 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e054      	b.n	800631e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68da      	ldr	r2, [r3, #12]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f042 0201 	orr.w	r2, r2, #1
 800628a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a26      	ldr	r2, [pc, #152]	; (800632c <HAL_TIM_Base_Start_IT+0xd0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d022      	beq.n	80062dc <HAL_TIM_Base_Start_IT+0x80>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800629e:	d01d      	beq.n	80062dc <HAL_TIM_Base_Start_IT+0x80>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a22      	ldr	r2, [pc, #136]	; (8006330 <HAL_TIM_Base_Start_IT+0xd4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d018      	beq.n	80062dc <HAL_TIM_Base_Start_IT+0x80>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a21      	ldr	r2, [pc, #132]	; (8006334 <HAL_TIM_Base_Start_IT+0xd8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d013      	beq.n	80062dc <HAL_TIM_Base_Start_IT+0x80>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a1f      	ldr	r2, [pc, #124]	; (8006338 <HAL_TIM_Base_Start_IT+0xdc>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d00e      	beq.n	80062dc <HAL_TIM_Base_Start_IT+0x80>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a1e      	ldr	r2, [pc, #120]	; (800633c <HAL_TIM_Base_Start_IT+0xe0>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d009      	beq.n	80062dc <HAL_TIM_Base_Start_IT+0x80>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a1c      	ldr	r2, [pc, #112]	; (8006340 <HAL_TIM_Base_Start_IT+0xe4>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d004      	beq.n	80062dc <HAL_TIM_Base_Start_IT+0x80>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a1b      	ldr	r2, [pc, #108]	; (8006344 <HAL_TIM_Base_Start_IT+0xe8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d115      	bne.n	8006308 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689a      	ldr	r2, [r3, #8]
 80062e2:	4b19      	ldr	r3, [pc, #100]	; (8006348 <HAL_TIM_Base_Start_IT+0xec>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2b06      	cmp	r3, #6
 80062ec:	d015      	beq.n	800631a <HAL_TIM_Base_Start_IT+0xbe>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062f4:	d011      	beq.n	800631a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f042 0201 	orr.w	r2, r2, #1
 8006304:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006306:	e008      	b.n	800631a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0201 	orr.w	r2, r2, #1
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	e000      	b.n	800631c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800631a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	40010000 	.word	0x40010000
 8006330:	40000400 	.word	0x40000400
 8006334:	40000800 	.word	0x40000800
 8006338:	40000c00 	.word	0x40000c00
 800633c:	40010400 	.word	0x40010400
 8006340:	40014000 	.word	0x40014000
 8006344:	40001800 	.word	0x40001800
 8006348:	00010007 	.word	0x00010007

0800634c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b02      	cmp	r3, #2
 8006360:	d122      	bne.n	80063a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b02      	cmp	r3, #2
 800636e:	d11b      	bne.n	80063a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f06f 0202 	mvn.w	r2, #2
 8006378:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	f003 0303 	and.w	r3, r3, #3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f905 	bl	800659e <HAL_TIM_IC_CaptureCallback>
 8006394:	e005      	b.n	80063a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f8f7 	bl	800658a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f908 	bl	80065b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	f003 0304 	and.w	r3, r3, #4
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	d122      	bne.n	80063fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f003 0304 	and.w	r3, r3, #4
 80063c0:	2b04      	cmp	r3, #4
 80063c2:	d11b      	bne.n	80063fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f06f 0204 	mvn.w	r2, #4
 80063cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2202      	movs	r2, #2
 80063d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f8db 	bl	800659e <HAL_TIM_IC_CaptureCallback>
 80063e8:	e005      	b.n	80063f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f8cd 	bl	800658a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f8de 	bl	80065b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f003 0308 	and.w	r3, r3, #8
 8006406:	2b08      	cmp	r3, #8
 8006408:	d122      	bne.n	8006450 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f003 0308 	and.w	r3, r3, #8
 8006414:	2b08      	cmp	r3, #8
 8006416:	d11b      	bne.n	8006450 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f06f 0208 	mvn.w	r2, #8
 8006420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2204      	movs	r2, #4
 8006426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	f003 0303 	and.w	r3, r3, #3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f8b1 	bl	800659e <HAL_TIM_IC_CaptureCallback>
 800643c:	e005      	b.n	800644a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f8a3 	bl	800658a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f8b4 	bl	80065b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f003 0310 	and.w	r3, r3, #16
 800645a:	2b10      	cmp	r3, #16
 800645c:	d122      	bne.n	80064a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f003 0310 	and.w	r3, r3, #16
 8006468:	2b10      	cmp	r3, #16
 800646a:	d11b      	bne.n	80064a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f06f 0210 	mvn.w	r2, #16
 8006474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2208      	movs	r2, #8
 800647a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f887 	bl	800659e <HAL_TIM_IC_CaptureCallback>
 8006490:	e005      	b.n	800649e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f879 	bl	800658a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f88a 	bl	80065b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d10e      	bne.n	80064d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d107      	bne.n	80064d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f06f 0201 	mvn.w	r2, #1
 80064c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7fc fc70 	bl	8002db0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064da:	2b80      	cmp	r3, #128	; 0x80
 80064dc:	d10e      	bne.n	80064fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e8:	2b80      	cmp	r3, #128	; 0x80
 80064ea:	d107      	bne.n	80064fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f9a8 	bl	800684c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800650a:	d10e      	bne.n	800652a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006516:	2b80      	cmp	r3, #128	; 0x80
 8006518:	d107      	bne.n	800652a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f99b 	bl	8006860 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006534:	2b40      	cmp	r3, #64	; 0x40
 8006536:	d10e      	bne.n	8006556 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006542:	2b40      	cmp	r3, #64	; 0x40
 8006544:	d107      	bne.n	8006556 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800654e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f838 	bl	80065c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	f003 0320 	and.w	r3, r3, #32
 8006560:	2b20      	cmp	r3, #32
 8006562:	d10e      	bne.n	8006582 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f003 0320 	and.w	r3, r3, #32
 800656e:	2b20      	cmp	r3, #32
 8006570:	d107      	bne.n	8006582 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f06f 0220 	mvn.w	r2, #32
 800657a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 f95b 	bl	8006838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006582:	bf00      	nop
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006592:	bf00      	nop
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065a6:	bf00      	nop
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b083      	sub	sp, #12
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065ba:	bf00      	nop
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065c6:	b480      	push	{r7}
 80065c8:	b083      	sub	sp, #12
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065ce:	bf00      	nop
 80065d0:	370c      	adds	r7, #12
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
	...

080065dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a40      	ldr	r2, [pc, #256]	; (80066f0 <TIM_Base_SetConfig+0x114>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d013      	beq.n	800661c <TIM_Base_SetConfig+0x40>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065fa:	d00f      	beq.n	800661c <TIM_Base_SetConfig+0x40>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a3d      	ldr	r2, [pc, #244]	; (80066f4 <TIM_Base_SetConfig+0x118>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d00b      	beq.n	800661c <TIM_Base_SetConfig+0x40>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a3c      	ldr	r2, [pc, #240]	; (80066f8 <TIM_Base_SetConfig+0x11c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d007      	beq.n	800661c <TIM_Base_SetConfig+0x40>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a3b      	ldr	r2, [pc, #236]	; (80066fc <TIM_Base_SetConfig+0x120>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d003      	beq.n	800661c <TIM_Base_SetConfig+0x40>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a3a      	ldr	r2, [pc, #232]	; (8006700 <TIM_Base_SetConfig+0x124>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d108      	bne.n	800662e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	4313      	orrs	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a2f      	ldr	r2, [pc, #188]	; (80066f0 <TIM_Base_SetConfig+0x114>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d02b      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800663c:	d027      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a2c      	ldr	r2, [pc, #176]	; (80066f4 <TIM_Base_SetConfig+0x118>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d023      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a2b      	ldr	r2, [pc, #172]	; (80066f8 <TIM_Base_SetConfig+0x11c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d01f      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a2a      	ldr	r2, [pc, #168]	; (80066fc <TIM_Base_SetConfig+0x120>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d01b      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a29      	ldr	r2, [pc, #164]	; (8006700 <TIM_Base_SetConfig+0x124>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d017      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a28      	ldr	r2, [pc, #160]	; (8006704 <TIM_Base_SetConfig+0x128>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d013      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a27      	ldr	r2, [pc, #156]	; (8006708 <TIM_Base_SetConfig+0x12c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00f      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a26      	ldr	r2, [pc, #152]	; (800670c <TIM_Base_SetConfig+0x130>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00b      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a25      	ldr	r2, [pc, #148]	; (8006710 <TIM_Base_SetConfig+0x134>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d007      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a24      	ldr	r2, [pc, #144]	; (8006714 <TIM_Base_SetConfig+0x138>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d003      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a23      	ldr	r2, [pc, #140]	; (8006718 <TIM_Base_SetConfig+0x13c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d108      	bne.n	80066a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	4313      	orrs	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a0a      	ldr	r2, [pc, #40]	; (80066f0 <TIM_Base_SetConfig+0x114>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d003      	beq.n	80066d4 <TIM_Base_SetConfig+0xf8>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a0c      	ldr	r2, [pc, #48]	; (8006700 <TIM_Base_SetConfig+0x124>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d103      	bne.n	80066dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	691a      	ldr	r2, [r3, #16]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	615a      	str	r2, [r3, #20]
}
 80066e2:	bf00      	nop
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	40010000 	.word	0x40010000
 80066f4:	40000400 	.word	0x40000400
 80066f8:	40000800 	.word	0x40000800
 80066fc:	40000c00 	.word	0x40000c00
 8006700:	40010400 	.word	0x40010400
 8006704:	40014000 	.word	0x40014000
 8006708:	40014400 	.word	0x40014400
 800670c:	40014800 	.word	0x40014800
 8006710:	40001800 	.word	0x40001800
 8006714:	40001c00 	.word	0x40001c00
 8006718:	40002000 	.word	0x40002000

0800671c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006730:	2302      	movs	r3, #2
 8006732:	e06d      	b.n	8006810 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2202      	movs	r2, #2
 8006740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a30      	ldr	r2, [pc, #192]	; (800681c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d004      	beq.n	8006768 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a2f      	ldr	r2, [pc, #188]	; (8006820 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d108      	bne.n	800677a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800676e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	4313      	orrs	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006780:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a20      	ldr	r2, [pc, #128]	; (800681c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d022      	beq.n	80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a6:	d01d      	beq.n	80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a1d      	ldr	r2, [pc, #116]	; (8006824 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d018      	beq.n	80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a1c      	ldr	r2, [pc, #112]	; (8006828 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d013      	beq.n	80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a1a      	ldr	r2, [pc, #104]	; (800682c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d00e      	beq.n	80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a15      	ldr	r2, [pc, #84]	; (8006820 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d009      	beq.n	80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a16      	ldr	r2, [pc, #88]	; (8006830 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d004      	beq.n	80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a15      	ldr	r2, [pc, #84]	; (8006834 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d10c      	bne.n	80067fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	40010000 	.word	0x40010000
 8006820:	40010400 	.word	0x40010400
 8006824:	40000400 	.word	0x40000400
 8006828:	40000800 	.word	0x40000800
 800682c:	40000c00 	.word	0x40000c00
 8006830:	40014000 	.word	0x40014000
 8006834:	40001800 	.word	0x40001800

08006838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e040      	b.n	8006908 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800688a:	2b00      	cmp	r3, #0
 800688c:	d106      	bne.n	800689c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7fc fbdc 	bl	8003054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2224      	movs	r2, #36	; 0x24
 80068a0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0201 	bic.w	r2, r2, #1
 80068b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fc06 	bl	80070c4 <UART_SetConfig>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d101      	bne.n	80068c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e022      	b.n	8006908 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d002      	beq.n	80068d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fe5e 	bl	800758c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689a      	ldr	r2, [r3, #8]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0201 	orr.w	r2, r2, #1
 80068fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fee5 	bl	80076d0 <UART_CheckIdleState>
 8006906:	4603      	mov	r3, r0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3708      	adds	r7, #8
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b08a      	sub	sp, #40	; 0x28
 8006914:	af02      	add	r7, sp, #8
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	603b      	str	r3, [r7, #0]
 800691c:	4613      	mov	r3, r2
 800691e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006924:	2b20      	cmp	r3, #32
 8006926:	d171      	bne.n	8006a0c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d002      	beq.n	8006934 <HAL_UART_Transmit+0x24>
 800692e:	88fb      	ldrh	r3, [r7, #6]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d101      	bne.n	8006938 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e06a      	b.n	8006a0e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2221      	movs	r2, #33	; 0x21
 8006944:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006946:	f7fc fc65 	bl	8003214 <HAL_GetTick>
 800694a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	88fa      	ldrh	r2, [r7, #6]
 8006950:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	88fa      	ldrh	r2, [r7, #6]
 8006958:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006964:	d108      	bne.n	8006978 <HAL_UART_Transmit+0x68>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d104      	bne.n	8006978 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800696e:	2300      	movs	r3, #0
 8006970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	61bb      	str	r3, [r7, #24]
 8006976:	e003      	b.n	8006980 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800697c:	2300      	movs	r3, #0
 800697e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006980:	e02c      	b.n	80069dc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	2200      	movs	r2, #0
 800698a:	2180      	movs	r1, #128	; 0x80
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f000 feec 	bl	800776a <UART_WaitOnFlagUntilTimeout>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e038      	b.n	8006a0e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10b      	bne.n	80069ba <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	3302      	adds	r3, #2
 80069b6:	61bb      	str	r3, [r7, #24]
 80069b8:	e007      	b.n	80069ca <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	781a      	ldrb	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	3301      	adds	r3, #1
 80069c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	3b01      	subs	r3, #1
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1cc      	bne.n	8006982 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	2200      	movs	r2, #0
 80069f0:	2140      	movs	r1, #64	; 0x40
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f000 feb9 	bl	800776a <UART_WaitOnFlagUntilTimeout>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e005      	b.n	8006a0e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2220      	movs	r2, #32
 8006a06:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	e000      	b.n	8006a0e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006a0c:	2302      	movs	r3, #2
  }
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3720      	adds	r7, #32
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b08a      	sub	sp, #40	; 0x28
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	60f8      	str	r0, [r7, #12]
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	4613      	mov	r3, r2
 8006a22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a2a:	2b20      	cmp	r3, #32
 8006a2c:	d132      	bne.n	8006a94 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <HAL_UART_Receive_IT+0x24>
 8006a34:	88fb      	ldrh	r3, [r7, #6]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e02b      	b.n	8006a96 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d018      	beq.n	8006a84 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a66:	627b      	str	r3, [r7, #36]	; 0x24
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	623b      	str	r3, [r7, #32]
 8006a72:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	69f9      	ldr	r1, [r7, #28]
 8006a76:	6a3a      	ldr	r2, [r7, #32]
 8006a78:	e841 2300 	strex	r3, r2, [r1]
 8006a7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e6      	bne.n	8006a52 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a84:	88fb      	ldrh	r3, [r7, #6]
 8006a86:	461a      	mov	r2, r3
 8006a88:	68b9      	ldr	r1, [r7, #8]
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 ff34 	bl	80078f8 <UART_Start_Receive_IT>
 8006a90:	4603      	mov	r3, r0
 8006a92:	e000      	b.n	8006a96 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006a94:	2302      	movs	r3, #2
  }
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3728      	adds	r7, #40	; 0x28
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
	...

08006aa0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b0ba      	sub	sp, #232	; 0xe8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ac6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006aca:	f640 030f 	movw	r3, #2063	; 0x80f
 8006ace:	4013      	ands	r3, r2
 8006ad0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006ad4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d115      	bne.n	8006b08 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ae0:	f003 0320 	and.w	r3, r3, #32
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00f      	beq.n	8006b08 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aec:	f003 0320 	and.w	r3, r3, #32
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d009      	beq.n	8006b08 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 82ac 	beq.w	8007056 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	4798      	blx	r3
      }
      return;
 8006b06:	e2a6      	b.n	8007056 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 8117 	beq.w	8006d40 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d106      	bne.n	8006b2c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006b1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006b22:	4b85      	ldr	r3, [pc, #532]	; (8006d38 <HAL_UART_IRQHandler+0x298>)
 8006b24:	4013      	ands	r3, r2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 810a 	beq.w	8006d40 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d011      	beq.n	8006b5c <HAL_UART_IRQHandler+0xbc>
 8006b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00b      	beq.n	8006b5c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b52:	f043 0201 	orr.w	r2, r3, #1
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d011      	beq.n	8006b8c <HAL_UART_IRQHandler+0xec>
 8006b68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00b      	beq.n	8006b8c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2202      	movs	r2, #2
 8006b7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b82:	f043 0204 	orr.w	r2, r3, #4
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b90:	f003 0304 	and.w	r3, r3, #4
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d011      	beq.n	8006bbc <HAL_UART_IRQHandler+0x11c>
 8006b98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00b      	beq.n	8006bbc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2204      	movs	r2, #4
 8006baa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bb2:	f043 0202 	orr.w	r2, r3, #2
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc0:	f003 0308 	and.w	r3, r3, #8
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d017      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bcc:	f003 0320 	and.w	r3, r3, #32
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d105      	bne.n	8006be0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bd8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00b      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2208      	movs	r2, #8
 8006be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bee:	f043 0208 	orr.w	r2, r3, #8
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d012      	beq.n	8006c2a <HAL_UART_IRQHandler+0x18a>
 8006c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00c      	beq.n	8006c2a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c20:	f043 0220 	orr.w	r2, r3, #32
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 8212 	beq.w	800705a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c3a:	f003 0320 	and.w	r3, r3, #32
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00d      	beq.n	8006c5e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c46:	f003 0320 	and.w	r3, r3, #32
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d007      	beq.n	8006c5e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d003      	beq.n	8006c5e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c72:	2b40      	cmp	r3, #64	; 0x40
 8006c74:	d005      	beq.n	8006c82 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d04f      	beq.n	8006d22 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fefe 	bl	8007a84 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c92:	2b40      	cmp	r3, #64	; 0x40
 8006c94:	d141      	bne.n	8006d1a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3308      	adds	r3, #8
 8006c9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ca4:	e853 3f00 	ldrex	r3, [r3]
 8006ca8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006cac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006cc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006cce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006cd2:	e841 2300 	strex	r3, r2, [r1]
 8006cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006cda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1d9      	bne.n	8006c96 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d013      	beq.n	8006d12 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cee:	4a13      	ldr	r2, [pc, #76]	; (8006d3c <HAL_UART_IRQHandler+0x29c>)
 8006cf0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fd ff31 	bl	8004b5e <HAL_DMA_Abort_IT>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d017      	beq.n	8006d32 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d10:	e00f      	b.n	8006d32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f9b6 	bl	8007084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d18:	e00b      	b.n	8006d32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f9b2 	bl	8007084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d20:	e007      	b.n	8006d32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f9ae 	bl	8007084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006d30:	e193      	b.n	800705a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d32:	bf00      	nop
    return;
 8006d34:	e191      	b.n	800705a <HAL_UART_IRQHandler+0x5ba>
 8006d36:	bf00      	nop
 8006d38:	04000120 	.word	0x04000120
 8006d3c:	08007b4d 	.word	0x08007b4d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	f040 814c 	bne.w	8006fe2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d4e:	f003 0310 	and.w	r3, r3, #16
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 8145 	beq.w	8006fe2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d5c:	f003 0310 	and.w	r3, r3, #16
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 813e 	beq.w	8006fe2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2210      	movs	r2, #16
 8006d6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d78:	2b40      	cmp	r3, #64	; 0x40
 8006d7a:	f040 80b6 	bne.w	8006eea <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d8a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 8165 	beq.w	800705e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	f080 815d 	bcs.w	800705e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006daa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006db8:	f000 8086 	beq.w	8006ec8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dc8:	e853 3f00 	ldrex	r3, [r3]
 8006dcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006dd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	461a      	mov	r2, r3
 8006de2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006de6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006dea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006df2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006df6:	e841 2300 	strex	r3, r2, [r1]
 8006dfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006dfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1da      	bne.n	8006dbc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3308      	adds	r3, #8
 8006e0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e10:	e853 3f00 	ldrex	r3, [r3]
 8006e14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e18:	f023 0301 	bic.w	r3, r3, #1
 8006e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3308      	adds	r3, #8
 8006e26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e36:	e841 2300 	strex	r3, r2, [r1]
 8006e3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1e1      	bne.n	8006e06 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	3308      	adds	r3, #8
 8006e48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e4c:	e853 3f00 	ldrex	r3, [r3]
 8006e50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3308      	adds	r3, #8
 8006e62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e6e:	e841 2300 	strex	r3, r2, [r1]
 8006e72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1e3      	bne.n	8006e42 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2220      	movs	r2, #32
 8006e7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e90:	e853 3f00 	ldrex	r3, [r3]
 8006e94:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e98:	f023 0310 	bic.w	r3, r3, #16
 8006e9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006eaa:	65bb      	str	r3, [r7, #88]	; 0x58
 8006eac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006eb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006eb2:	e841 2300 	strex	r3, r2, [r1]
 8006eb6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1e4      	bne.n	8006e88 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fd fddb 	bl	8004a7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f8d8 	bl	8007098 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ee8:	e0b9      	b.n	800705e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f000 80ab 	beq.w	8007062 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006f0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f000 80a6 	beq.w	8007062 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1e:	e853 3f00 	ldrex	r3, [r3]
 8006f22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	461a      	mov	r2, r3
 8006f34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f38:	647b      	str	r3, [r7, #68]	; 0x44
 8006f3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f40:	e841 2300 	strex	r3, r2, [r1]
 8006f44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1e4      	bne.n	8006f16 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3308      	adds	r3, #8
 8006f52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	e853 3f00 	ldrex	r3, [r3]
 8006f5a:	623b      	str	r3, [r7, #32]
   return(result);
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	f023 0301 	bic.w	r3, r3, #1
 8006f62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3308      	adds	r3, #8
 8006f6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f70:	633a      	str	r2, [r7, #48]	; 0x30
 8006f72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f78:	e841 2300 	strex	r3, r2, [r1]
 8006f7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1e3      	bne.n	8006f4c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2220      	movs	r2, #32
 8006f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f023 0310 	bic.w	r3, r3, #16
 8006fac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006fba:	61fb      	str	r3, [r7, #28]
 8006fbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbe:	69b9      	ldr	r1, [r7, #24]
 8006fc0:	69fa      	ldr	r2, [r7, #28]
 8006fc2:	e841 2300 	strex	r3, r2, [r1]
 8006fc6:	617b      	str	r3, [r7, #20]
   return(result);
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1e4      	bne.n	8006f98 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2202      	movs	r2, #2
 8006fd2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fd8:	4619      	mov	r1, r3
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f85c 	bl	8007098 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fe0:	e03f      	b.n	8007062 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00e      	beq.n	800700c <HAL_UART_IRQHandler+0x56c>
 8006fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d008      	beq.n	800700c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007002:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f853 	bl	80070b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800700a:	e02d      	b.n	8007068 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800700c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00e      	beq.n	8007036 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800701c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007020:	2b00      	cmp	r3, #0
 8007022:	d008      	beq.n	8007036 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007028:	2b00      	cmp	r3, #0
 800702a:	d01c      	beq.n	8007066 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	4798      	blx	r3
    }
    return;
 8007034:	e017      	b.n	8007066 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800703a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	d012      	beq.n	8007068 <HAL_UART_IRQHandler+0x5c8>
 8007042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00c      	beq.n	8007068 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fd92 	bl	8007b78 <UART_EndTransmit_IT>
    return;
 8007054:	e008      	b.n	8007068 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007056:	bf00      	nop
 8007058:	e006      	b.n	8007068 <HAL_UART_IRQHandler+0x5c8>
    return;
 800705a:	bf00      	nop
 800705c:	e004      	b.n	8007068 <HAL_UART_IRQHandler+0x5c8>
      return;
 800705e:	bf00      	nop
 8007060:	e002      	b.n	8007068 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007062:	bf00      	nop
 8007064:	e000      	b.n	8007068 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007066:	bf00      	nop
  }

}
 8007068:	37e8      	adds	r7, #232	; 0xe8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop

08007070 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	460b      	mov	r3, r1
 80070a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b088      	sub	sp, #32
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	689a      	ldr	r2, [r3, #8]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	431a      	orrs	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	431a      	orrs	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	69db      	ldr	r3, [r3, #28]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	4ba6      	ldr	r3, [pc, #664]	; (8007388 <UART_SetConfig+0x2c4>)
 80070f0:	4013      	ands	r3, r2
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	6812      	ldr	r2, [r2, #0]
 80070f6:	6979      	ldr	r1, [r7, #20]
 80070f8:	430b      	orrs	r3, r1
 80070fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68da      	ldr	r2, [r3, #12]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	4313      	orrs	r3, r2
 8007120:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	430a      	orrs	r2, r1
 8007134:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a94      	ldr	r2, [pc, #592]	; (800738c <UART_SetConfig+0x2c8>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d120      	bne.n	8007182 <UART_SetConfig+0xbe>
 8007140:	4b93      	ldr	r3, [pc, #588]	; (8007390 <UART_SetConfig+0x2cc>)
 8007142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007146:	f003 0303 	and.w	r3, r3, #3
 800714a:	2b03      	cmp	r3, #3
 800714c:	d816      	bhi.n	800717c <UART_SetConfig+0xb8>
 800714e:	a201      	add	r2, pc, #4	; (adr r2, 8007154 <UART_SetConfig+0x90>)
 8007150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007154:	08007165 	.word	0x08007165
 8007158:	08007171 	.word	0x08007171
 800715c:	0800716b 	.word	0x0800716b
 8007160:	08007177 	.word	0x08007177
 8007164:	2301      	movs	r3, #1
 8007166:	77fb      	strb	r3, [r7, #31]
 8007168:	e150      	b.n	800740c <UART_SetConfig+0x348>
 800716a:	2302      	movs	r3, #2
 800716c:	77fb      	strb	r3, [r7, #31]
 800716e:	e14d      	b.n	800740c <UART_SetConfig+0x348>
 8007170:	2304      	movs	r3, #4
 8007172:	77fb      	strb	r3, [r7, #31]
 8007174:	e14a      	b.n	800740c <UART_SetConfig+0x348>
 8007176:	2308      	movs	r3, #8
 8007178:	77fb      	strb	r3, [r7, #31]
 800717a:	e147      	b.n	800740c <UART_SetConfig+0x348>
 800717c:	2310      	movs	r3, #16
 800717e:	77fb      	strb	r3, [r7, #31]
 8007180:	e144      	b.n	800740c <UART_SetConfig+0x348>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a83      	ldr	r2, [pc, #524]	; (8007394 <UART_SetConfig+0x2d0>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d132      	bne.n	80071f2 <UART_SetConfig+0x12e>
 800718c:	4b80      	ldr	r3, [pc, #512]	; (8007390 <UART_SetConfig+0x2cc>)
 800718e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007192:	f003 030c 	and.w	r3, r3, #12
 8007196:	2b0c      	cmp	r3, #12
 8007198:	d828      	bhi.n	80071ec <UART_SetConfig+0x128>
 800719a:	a201      	add	r2, pc, #4	; (adr r2, 80071a0 <UART_SetConfig+0xdc>)
 800719c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a0:	080071d5 	.word	0x080071d5
 80071a4:	080071ed 	.word	0x080071ed
 80071a8:	080071ed 	.word	0x080071ed
 80071ac:	080071ed 	.word	0x080071ed
 80071b0:	080071e1 	.word	0x080071e1
 80071b4:	080071ed 	.word	0x080071ed
 80071b8:	080071ed 	.word	0x080071ed
 80071bc:	080071ed 	.word	0x080071ed
 80071c0:	080071db 	.word	0x080071db
 80071c4:	080071ed 	.word	0x080071ed
 80071c8:	080071ed 	.word	0x080071ed
 80071cc:	080071ed 	.word	0x080071ed
 80071d0:	080071e7 	.word	0x080071e7
 80071d4:	2300      	movs	r3, #0
 80071d6:	77fb      	strb	r3, [r7, #31]
 80071d8:	e118      	b.n	800740c <UART_SetConfig+0x348>
 80071da:	2302      	movs	r3, #2
 80071dc:	77fb      	strb	r3, [r7, #31]
 80071de:	e115      	b.n	800740c <UART_SetConfig+0x348>
 80071e0:	2304      	movs	r3, #4
 80071e2:	77fb      	strb	r3, [r7, #31]
 80071e4:	e112      	b.n	800740c <UART_SetConfig+0x348>
 80071e6:	2308      	movs	r3, #8
 80071e8:	77fb      	strb	r3, [r7, #31]
 80071ea:	e10f      	b.n	800740c <UART_SetConfig+0x348>
 80071ec:	2310      	movs	r3, #16
 80071ee:	77fb      	strb	r3, [r7, #31]
 80071f0:	e10c      	b.n	800740c <UART_SetConfig+0x348>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a68      	ldr	r2, [pc, #416]	; (8007398 <UART_SetConfig+0x2d4>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d120      	bne.n	800723e <UART_SetConfig+0x17a>
 80071fc:	4b64      	ldr	r3, [pc, #400]	; (8007390 <UART_SetConfig+0x2cc>)
 80071fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007202:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007206:	2b30      	cmp	r3, #48	; 0x30
 8007208:	d013      	beq.n	8007232 <UART_SetConfig+0x16e>
 800720a:	2b30      	cmp	r3, #48	; 0x30
 800720c:	d814      	bhi.n	8007238 <UART_SetConfig+0x174>
 800720e:	2b20      	cmp	r3, #32
 8007210:	d009      	beq.n	8007226 <UART_SetConfig+0x162>
 8007212:	2b20      	cmp	r3, #32
 8007214:	d810      	bhi.n	8007238 <UART_SetConfig+0x174>
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <UART_SetConfig+0x15c>
 800721a:	2b10      	cmp	r3, #16
 800721c:	d006      	beq.n	800722c <UART_SetConfig+0x168>
 800721e:	e00b      	b.n	8007238 <UART_SetConfig+0x174>
 8007220:	2300      	movs	r3, #0
 8007222:	77fb      	strb	r3, [r7, #31]
 8007224:	e0f2      	b.n	800740c <UART_SetConfig+0x348>
 8007226:	2302      	movs	r3, #2
 8007228:	77fb      	strb	r3, [r7, #31]
 800722a:	e0ef      	b.n	800740c <UART_SetConfig+0x348>
 800722c:	2304      	movs	r3, #4
 800722e:	77fb      	strb	r3, [r7, #31]
 8007230:	e0ec      	b.n	800740c <UART_SetConfig+0x348>
 8007232:	2308      	movs	r3, #8
 8007234:	77fb      	strb	r3, [r7, #31]
 8007236:	e0e9      	b.n	800740c <UART_SetConfig+0x348>
 8007238:	2310      	movs	r3, #16
 800723a:	77fb      	strb	r3, [r7, #31]
 800723c:	e0e6      	b.n	800740c <UART_SetConfig+0x348>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a56      	ldr	r2, [pc, #344]	; (800739c <UART_SetConfig+0x2d8>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d120      	bne.n	800728a <UART_SetConfig+0x1c6>
 8007248:	4b51      	ldr	r3, [pc, #324]	; (8007390 <UART_SetConfig+0x2cc>)
 800724a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800724e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007252:	2bc0      	cmp	r3, #192	; 0xc0
 8007254:	d013      	beq.n	800727e <UART_SetConfig+0x1ba>
 8007256:	2bc0      	cmp	r3, #192	; 0xc0
 8007258:	d814      	bhi.n	8007284 <UART_SetConfig+0x1c0>
 800725a:	2b80      	cmp	r3, #128	; 0x80
 800725c:	d009      	beq.n	8007272 <UART_SetConfig+0x1ae>
 800725e:	2b80      	cmp	r3, #128	; 0x80
 8007260:	d810      	bhi.n	8007284 <UART_SetConfig+0x1c0>
 8007262:	2b00      	cmp	r3, #0
 8007264:	d002      	beq.n	800726c <UART_SetConfig+0x1a8>
 8007266:	2b40      	cmp	r3, #64	; 0x40
 8007268:	d006      	beq.n	8007278 <UART_SetConfig+0x1b4>
 800726a:	e00b      	b.n	8007284 <UART_SetConfig+0x1c0>
 800726c:	2300      	movs	r3, #0
 800726e:	77fb      	strb	r3, [r7, #31]
 8007270:	e0cc      	b.n	800740c <UART_SetConfig+0x348>
 8007272:	2302      	movs	r3, #2
 8007274:	77fb      	strb	r3, [r7, #31]
 8007276:	e0c9      	b.n	800740c <UART_SetConfig+0x348>
 8007278:	2304      	movs	r3, #4
 800727a:	77fb      	strb	r3, [r7, #31]
 800727c:	e0c6      	b.n	800740c <UART_SetConfig+0x348>
 800727e:	2308      	movs	r3, #8
 8007280:	77fb      	strb	r3, [r7, #31]
 8007282:	e0c3      	b.n	800740c <UART_SetConfig+0x348>
 8007284:	2310      	movs	r3, #16
 8007286:	77fb      	strb	r3, [r7, #31]
 8007288:	e0c0      	b.n	800740c <UART_SetConfig+0x348>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a44      	ldr	r2, [pc, #272]	; (80073a0 <UART_SetConfig+0x2dc>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d125      	bne.n	80072e0 <UART_SetConfig+0x21c>
 8007294:	4b3e      	ldr	r3, [pc, #248]	; (8007390 <UART_SetConfig+0x2cc>)
 8007296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800729a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800729e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072a2:	d017      	beq.n	80072d4 <UART_SetConfig+0x210>
 80072a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072a8:	d817      	bhi.n	80072da <UART_SetConfig+0x216>
 80072aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ae:	d00b      	beq.n	80072c8 <UART_SetConfig+0x204>
 80072b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072b4:	d811      	bhi.n	80072da <UART_SetConfig+0x216>
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d003      	beq.n	80072c2 <UART_SetConfig+0x1fe>
 80072ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072be:	d006      	beq.n	80072ce <UART_SetConfig+0x20a>
 80072c0:	e00b      	b.n	80072da <UART_SetConfig+0x216>
 80072c2:	2300      	movs	r3, #0
 80072c4:	77fb      	strb	r3, [r7, #31]
 80072c6:	e0a1      	b.n	800740c <UART_SetConfig+0x348>
 80072c8:	2302      	movs	r3, #2
 80072ca:	77fb      	strb	r3, [r7, #31]
 80072cc:	e09e      	b.n	800740c <UART_SetConfig+0x348>
 80072ce:	2304      	movs	r3, #4
 80072d0:	77fb      	strb	r3, [r7, #31]
 80072d2:	e09b      	b.n	800740c <UART_SetConfig+0x348>
 80072d4:	2308      	movs	r3, #8
 80072d6:	77fb      	strb	r3, [r7, #31]
 80072d8:	e098      	b.n	800740c <UART_SetConfig+0x348>
 80072da:	2310      	movs	r3, #16
 80072dc:	77fb      	strb	r3, [r7, #31]
 80072de:	e095      	b.n	800740c <UART_SetConfig+0x348>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a2f      	ldr	r2, [pc, #188]	; (80073a4 <UART_SetConfig+0x2e0>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d125      	bne.n	8007336 <UART_SetConfig+0x272>
 80072ea:	4b29      	ldr	r3, [pc, #164]	; (8007390 <UART_SetConfig+0x2cc>)
 80072ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80072f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072f8:	d017      	beq.n	800732a <UART_SetConfig+0x266>
 80072fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072fe:	d817      	bhi.n	8007330 <UART_SetConfig+0x26c>
 8007300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007304:	d00b      	beq.n	800731e <UART_SetConfig+0x25a>
 8007306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800730a:	d811      	bhi.n	8007330 <UART_SetConfig+0x26c>
 800730c:	2b00      	cmp	r3, #0
 800730e:	d003      	beq.n	8007318 <UART_SetConfig+0x254>
 8007310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007314:	d006      	beq.n	8007324 <UART_SetConfig+0x260>
 8007316:	e00b      	b.n	8007330 <UART_SetConfig+0x26c>
 8007318:	2301      	movs	r3, #1
 800731a:	77fb      	strb	r3, [r7, #31]
 800731c:	e076      	b.n	800740c <UART_SetConfig+0x348>
 800731e:	2302      	movs	r3, #2
 8007320:	77fb      	strb	r3, [r7, #31]
 8007322:	e073      	b.n	800740c <UART_SetConfig+0x348>
 8007324:	2304      	movs	r3, #4
 8007326:	77fb      	strb	r3, [r7, #31]
 8007328:	e070      	b.n	800740c <UART_SetConfig+0x348>
 800732a:	2308      	movs	r3, #8
 800732c:	77fb      	strb	r3, [r7, #31]
 800732e:	e06d      	b.n	800740c <UART_SetConfig+0x348>
 8007330:	2310      	movs	r3, #16
 8007332:	77fb      	strb	r3, [r7, #31]
 8007334:	e06a      	b.n	800740c <UART_SetConfig+0x348>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a1b      	ldr	r2, [pc, #108]	; (80073a8 <UART_SetConfig+0x2e4>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d138      	bne.n	80073b2 <UART_SetConfig+0x2ee>
 8007340:	4b13      	ldr	r3, [pc, #76]	; (8007390 <UART_SetConfig+0x2cc>)
 8007342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007346:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800734a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800734e:	d017      	beq.n	8007380 <UART_SetConfig+0x2bc>
 8007350:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007354:	d82a      	bhi.n	80073ac <UART_SetConfig+0x2e8>
 8007356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800735a:	d00b      	beq.n	8007374 <UART_SetConfig+0x2b0>
 800735c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007360:	d824      	bhi.n	80073ac <UART_SetConfig+0x2e8>
 8007362:	2b00      	cmp	r3, #0
 8007364:	d003      	beq.n	800736e <UART_SetConfig+0x2aa>
 8007366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800736a:	d006      	beq.n	800737a <UART_SetConfig+0x2b6>
 800736c:	e01e      	b.n	80073ac <UART_SetConfig+0x2e8>
 800736e:	2300      	movs	r3, #0
 8007370:	77fb      	strb	r3, [r7, #31]
 8007372:	e04b      	b.n	800740c <UART_SetConfig+0x348>
 8007374:	2302      	movs	r3, #2
 8007376:	77fb      	strb	r3, [r7, #31]
 8007378:	e048      	b.n	800740c <UART_SetConfig+0x348>
 800737a:	2304      	movs	r3, #4
 800737c:	77fb      	strb	r3, [r7, #31]
 800737e:	e045      	b.n	800740c <UART_SetConfig+0x348>
 8007380:	2308      	movs	r3, #8
 8007382:	77fb      	strb	r3, [r7, #31]
 8007384:	e042      	b.n	800740c <UART_SetConfig+0x348>
 8007386:	bf00      	nop
 8007388:	efff69f3 	.word	0xefff69f3
 800738c:	40011000 	.word	0x40011000
 8007390:	40023800 	.word	0x40023800
 8007394:	40004400 	.word	0x40004400
 8007398:	40004800 	.word	0x40004800
 800739c:	40004c00 	.word	0x40004c00
 80073a0:	40005000 	.word	0x40005000
 80073a4:	40011400 	.word	0x40011400
 80073a8:	40007800 	.word	0x40007800
 80073ac:	2310      	movs	r3, #16
 80073ae:	77fb      	strb	r3, [r7, #31]
 80073b0:	e02c      	b.n	800740c <UART_SetConfig+0x348>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a72      	ldr	r2, [pc, #456]	; (8007580 <UART_SetConfig+0x4bc>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d125      	bne.n	8007408 <UART_SetConfig+0x344>
 80073bc:	4b71      	ldr	r3, [pc, #452]	; (8007584 <UART_SetConfig+0x4c0>)
 80073be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80073c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80073ca:	d017      	beq.n	80073fc <UART_SetConfig+0x338>
 80073cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80073d0:	d817      	bhi.n	8007402 <UART_SetConfig+0x33e>
 80073d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073d6:	d00b      	beq.n	80073f0 <UART_SetConfig+0x32c>
 80073d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073dc:	d811      	bhi.n	8007402 <UART_SetConfig+0x33e>
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d003      	beq.n	80073ea <UART_SetConfig+0x326>
 80073e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073e6:	d006      	beq.n	80073f6 <UART_SetConfig+0x332>
 80073e8:	e00b      	b.n	8007402 <UART_SetConfig+0x33e>
 80073ea:	2300      	movs	r3, #0
 80073ec:	77fb      	strb	r3, [r7, #31]
 80073ee:	e00d      	b.n	800740c <UART_SetConfig+0x348>
 80073f0:	2302      	movs	r3, #2
 80073f2:	77fb      	strb	r3, [r7, #31]
 80073f4:	e00a      	b.n	800740c <UART_SetConfig+0x348>
 80073f6:	2304      	movs	r3, #4
 80073f8:	77fb      	strb	r3, [r7, #31]
 80073fa:	e007      	b.n	800740c <UART_SetConfig+0x348>
 80073fc:	2308      	movs	r3, #8
 80073fe:	77fb      	strb	r3, [r7, #31]
 8007400:	e004      	b.n	800740c <UART_SetConfig+0x348>
 8007402:	2310      	movs	r3, #16
 8007404:	77fb      	strb	r3, [r7, #31]
 8007406:	e001      	b.n	800740c <UART_SetConfig+0x348>
 8007408:	2310      	movs	r3, #16
 800740a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007414:	d15b      	bne.n	80074ce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007416:	7ffb      	ldrb	r3, [r7, #31]
 8007418:	2b08      	cmp	r3, #8
 800741a:	d828      	bhi.n	800746e <UART_SetConfig+0x3aa>
 800741c:	a201      	add	r2, pc, #4	; (adr r2, 8007424 <UART_SetConfig+0x360>)
 800741e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007422:	bf00      	nop
 8007424:	08007449 	.word	0x08007449
 8007428:	08007451 	.word	0x08007451
 800742c:	08007459 	.word	0x08007459
 8007430:	0800746f 	.word	0x0800746f
 8007434:	0800745f 	.word	0x0800745f
 8007438:	0800746f 	.word	0x0800746f
 800743c:	0800746f 	.word	0x0800746f
 8007440:	0800746f 	.word	0x0800746f
 8007444:	08007467 	.word	0x08007467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007448:	f7fe fa60 	bl	800590c <HAL_RCC_GetPCLK1Freq>
 800744c:	61b8      	str	r0, [r7, #24]
        break;
 800744e:	e013      	b.n	8007478 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007450:	f7fe fa70 	bl	8005934 <HAL_RCC_GetPCLK2Freq>
 8007454:	61b8      	str	r0, [r7, #24]
        break;
 8007456:	e00f      	b.n	8007478 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007458:	4b4b      	ldr	r3, [pc, #300]	; (8007588 <UART_SetConfig+0x4c4>)
 800745a:	61bb      	str	r3, [r7, #24]
        break;
 800745c:	e00c      	b.n	8007478 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800745e:	f7fe f983 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 8007462:	61b8      	str	r0, [r7, #24]
        break;
 8007464:	e008      	b.n	8007478 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800746a:	61bb      	str	r3, [r7, #24]
        break;
 800746c:	e004      	b.n	8007478 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	77bb      	strb	r3, [r7, #30]
        break;
 8007476:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d074      	beq.n	8007568 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	005a      	lsls	r2, r3, #1
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	085b      	lsrs	r3, r3, #1
 8007488:	441a      	add	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007492:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	2b0f      	cmp	r3, #15
 8007498:	d916      	bls.n	80074c8 <UART_SetConfig+0x404>
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074a0:	d212      	bcs.n	80074c8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	f023 030f 	bic.w	r3, r3, #15
 80074aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	085b      	lsrs	r3, r3, #1
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	f003 0307 	and.w	r3, r3, #7
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	89fb      	ldrh	r3, [r7, #14]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	89fa      	ldrh	r2, [r7, #14]
 80074c4:	60da      	str	r2, [r3, #12]
 80074c6:	e04f      	b.n	8007568 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	77bb      	strb	r3, [r7, #30]
 80074cc:	e04c      	b.n	8007568 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074ce:	7ffb      	ldrb	r3, [r7, #31]
 80074d0:	2b08      	cmp	r3, #8
 80074d2:	d828      	bhi.n	8007526 <UART_SetConfig+0x462>
 80074d4:	a201      	add	r2, pc, #4	; (adr r2, 80074dc <UART_SetConfig+0x418>)
 80074d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074da:	bf00      	nop
 80074dc:	08007501 	.word	0x08007501
 80074e0:	08007509 	.word	0x08007509
 80074e4:	08007511 	.word	0x08007511
 80074e8:	08007527 	.word	0x08007527
 80074ec:	08007517 	.word	0x08007517
 80074f0:	08007527 	.word	0x08007527
 80074f4:	08007527 	.word	0x08007527
 80074f8:	08007527 	.word	0x08007527
 80074fc:	0800751f 	.word	0x0800751f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007500:	f7fe fa04 	bl	800590c <HAL_RCC_GetPCLK1Freq>
 8007504:	61b8      	str	r0, [r7, #24]
        break;
 8007506:	e013      	b.n	8007530 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007508:	f7fe fa14 	bl	8005934 <HAL_RCC_GetPCLK2Freq>
 800750c:	61b8      	str	r0, [r7, #24]
        break;
 800750e:	e00f      	b.n	8007530 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007510:	4b1d      	ldr	r3, [pc, #116]	; (8007588 <UART_SetConfig+0x4c4>)
 8007512:	61bb      	str	r3, [r7, #24]
        break;
 8007514:	e00c      	b.n	8007530 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007516:	f7fe f927 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 800751a:	61b8      	str	r0, [r7, #24]
        break;
 800751c:	e008      	b.n	8007530 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800751e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007522:	61bb      	str	r3, [r7, #24]
        break;
 8007524:	e004      	b.n	8007530 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007526:	2300      	movs	r3, #0
 8007528:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	77bb      	strb	r3, [r7, #30]
        break;
 800752e:	bf00      	nop
    }

    if (pclk != 0U)
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d018      	beq.n	8007568 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	085a      	lsrs	r2, r3, #1
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	441a      	add	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	fbb2 f3f3 	udiv	r3, r2, r3
 8007548:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	2b0f      	cmp	r3, #15
 800754e:	d909      	bls.n	8007564 <UART_SetConfig+0x4a0>
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007556:	d205      	bcs.n	8007564 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	b29a      	uxth	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	60da      	str	r2, [r3, #12]
 8007562:	e001      	b.n	8007568 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007574:	7fbb      	ldrb	r3, [r7, #30]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3720      	adds	r7, #32
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	40007c00 	.word	0x40007c00
 8007584:	40023800 	.word	0x40023800
 8007588:	00f42400 	.word	0x00f42400

0800758c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00a      	beq.n	80075b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00a      	beq.n	80075d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	f003 0304 	and.w	r3, r3, #4
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00a      	beq.n	80075fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fe:	f003 0308 	and.w	r3, r3, #8
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00a      	beq.n	800761c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007620:	f003 0310 	and.w	r3, r3, #16
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00a      	beq.n	800763e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007642:	f003 0320 	and.w	r3, r3, #32
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00a      	beq.n	8007660 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007668:	2b00      	cmp	r3, #0
 800766a:	d01a      	beq.n	80076a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	430a      	orrs	r2, r1
 8007680:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800768a:	d10a      	bne.n	80076a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	430a      	orrs	r2, r1
 80076a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	430a      	orrs	r2, r1
 80076c2:	605a      	str	r2, [r3, #4]
  }
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af02      	add	r7, sp, #8
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076e0:	f7fb fd98 	bl	8003214 <HAL_GetTick>
 80076e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0308 	and.w	r3, r3, #8
 80076f0:	2b08      	cmp	r3, #8
 80076f2:	d10e      	bne.n	8007712 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f831 	bl	800776a <UART_WaitOnFlagUntilTimeout>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e027      	b.n	8007762 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0304 	and.w	r3, r3, #4
 800771c:	2b04      	cmp	r3, #4
 800771e:	d10e      	bne.n	800773e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007720:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f81b 	bl	800776a <UART_WaitOnFlagUntilTimeout>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e011      	b.n	8007762 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2220      	movs	r2, #32
 8007742:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2220      	movs	r2, #32
 8007748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b09c      	sub	sp, #112	; 0x70
 800776e:	af00      	add	r7, sp, #0
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	60b9      	str	r1, [r7, #8]
 8007774:	603b      	str	r3, [r7, #0]
 8007776:	4613      	mov	r3, r2
 8007778:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800777a:	e0a7      	b.n	80078cc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800777c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800777e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007782:	f000 80a3 	beq.w	80078cc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007786:	f7fb fd45 	bl	8003214 <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007792:	429a      	cmp	r2, r3
 8007794:	d302      	bcc.n	800779c <UART_WaitOnFlagUntilTimeout+0x32>
 8007796:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007798:	2b00      	cmp	r3, #0
 800779a:	d13f      	bne.n	800781c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077a4:	e853 3f00 	ldrex	r3, [r3]
 80077a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80077aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077b0:	667b      	str	r3, [r7, #100]	; 0x64
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077c2:	e841 2300 	strex	r3, r2, [r1]
 80077c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80077c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1e6      	bne.n	800779c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	3308      	adds	r3, #8
 80077d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077d8:	e853 3f00 	ldrex	r3, [r3]
 80077dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e0:	f023 0301 	bic.w	r3, r3, #1
 80077e4:	663b      	str	r3, [r7, #96]	; 0x60
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3308      	adds	r3, #8
 80077ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80077ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80077f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077f6:	e841 2300 	strex	r3, r2, [r1]
 80077fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80077fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1e5      	bne.n	80077ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2220      	movs	r2, #32
 8007806:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2220      	movs	r2, #32
 800780c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e068      	b.n	80078ee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0304 	and.w	r3, r3, #4
 8007826:	2b00      	cmp	r3, #0
 8007828:	d050      	beq.n	80078cc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007838:	d148      	bne.n	80078cc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007842:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784c:	e853 3f00 	ldrex	r3, [r3]
 8007850:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007854:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007858:	66fb      	str	r3, [r7, #108]	; 0x6c
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007862:	637b      	str	r3, [r7, #52]	; 0x34
 8007864:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007868:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800786a:	e841 2300 	strex	r3, r2, [r1]
 800786e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1e6      	bne.n	8007844 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3308      	adds	r3, #8
 800787c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	e853 3f00 	ldrex	r3, [r3]
 8007884:	613b      	str	r3, [r7, #16]
   return(result);
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	f023 0301 	bic.w	r3, r3, #1
 800788c:	66bb      	str	r3, [r7, #104]	; 0x68
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3308      	adds	r3, #8
 8007894:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007896:	623a      	str	r2, [r7, #32]
 8007898:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789a:	69f9      	ldr	r1, [r7, #28]
 800789c:	6a3a      	ldr	r2, [r7, #32]
 800789e:	e841 2300 	strex	r3, r2, [r1]
 80078a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1e5      	bne.n	8007876 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2220      	movs	r2, #32
 80078ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2220      	movs	r2, #32
 80078b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2220      	movs	r2, #32
 80078bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e010      	b.n	80078ee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	69da      	ldr	r2, [r3, #28]
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	4013      	ands	r3, r2
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	429a      	cmp	r2, r3
 80078da:	bf0c      	ite	eq
 80078dc:	2301      	moveq	r3, #1
 80078de:	2300      	movne	r3, #0
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	461a      	mov	r2, r3
 80078e4:	79fb      	ldrb	r3, [r7, #7]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	f43f af48 	beq.w	800777c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3770      	adds	r7, #112	; 0x70
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
	...

080078f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b097      	sub	sp, #92	; 0x5c
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	4613      	mov	r3, r2
 8007904:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	88fa      	ldrh	r2, [r7, #6]
 8007910:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	88fa      	ldrh	r2, [r7, #6]
 8007918:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800792a:	d10e      	bne.n	800794a <UART_Start_Receive_IT+0x52>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d105      	bne.n	8007940 <UART_Start_Receive_IT+0x48>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f240 12ff 	movw	r2, #511	; 0x1ff
 800793a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800793e:	e02d      	b.n	800799c <UART_Start_Receive_IT+0xa4>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	22ff      	movs	r2, #255	; 0xff
 8007944:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007948:	e028      	b.n	800799c <UART_Start_Receive_IT+0xa4>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10d      	bne.n	800796e <UART_Start_Receive_IT+0x76>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d104      	bne.n	8007964 <UART_Start_Receive_IT+0x6c>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	22ff      	movs	r2, #255	; 0xff
 800795e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007962:	e01b      	b.n	800799c <UART_Start_Receive_IT+0xa4>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	227f      	movs	r2, #127	; 0x7f
 8007968:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800796c:	e016      	b.n	800799c <UART_Start_Receive_IT+0xa4>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007976:	d10d      	bne.n	8007994 <UART_Start_Receive_IT+0x9c>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d104      	bne.n	800798a <UART_Start_Receive_IT+0x92>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	227f      	movs	r2, #127	; 0x7f
 8007984:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007988:	e008      	b.n	800799c <UART_Start_Receive_IT+0xa4>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	223f      	movs	r2, #63	; 0x3f
 800798e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007992:	e003      	b.n	800799c <UART_Start_Receive_IT+0xa4>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2222      	movs	r2, #34	; 0x22
 80079a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3308      	adds	r3, #8
 80079b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b6:	e853 3f00 	ldrex	r3, [r3]
 80079ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079be:	f043 0301 	orr.w	r3, r3, #1
 80079c2:	657b      	str	r3, [r7, #84]	; 0x54
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	3308      	adds	r3, #8
 80079ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079cc:	64ba      	str	r2, [r7, #72]	; 0x48
 80079ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079d4:	e841 2300 	strex	r3, r2, [r1]
 80079d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1e5      	bne.n	80079ac <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e8:	d107      	bne.n	80079fa <UART_Start_Receive_IT+0x102>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d103      	bne.n	80079fa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	4a21      	ldr	r2, [pc, #132]	; (8007a7c <UART_Start_Receive_IT+0x184>)
 80079f6:	669a      	str	r2, [r3, #104]	; 0x68
 80079f8:	e002      	b.n	8007a00 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	4a20      	ldr	r2, [pc, #128]	; (8007a80 <UART_Start_Receive_IT+0x188>)
 80079fe:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d019      	beq.n	8007a3c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a10:	e853 3f00 	ldrex	r3, [r3]
 8007a14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a18:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	461a      	mov	r2, r3
 8007a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a26:	637b      	str	r3, [r7, #52]	; 0x34
 8007a28:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a2e:	e841 2300 	strex	r3, r2, [r1]
 8007a32:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1e6      	bne.n	8007a08 <UART_Start_Receive_IT+0x110>
 8007a3a:	e018      	b.n	8007a6e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	e853 3f00 	ldrex	r3, [r3]
 8007a48:	613b      	str	r3, [r7, #16]
   return(result);
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	f043 0320 	orr.w	r3, r3, #32
 8007a50:	653b      	str	r3, [r7, #80]	; 0x50
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a5a:	623b      	str	r3, [r7, #32]
 8007a5c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5e:	69f9      	ldr	r1, [r7, #28]
 8007a60:	6a3a      	ldr	r2, [r7, #32]
 8007a62:	e841 2300 	strex	r3, r2, [r1]
 8007a66:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1e6      	bne.n	8007a3c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	375c      	adds	r7, #92	; 0x5c
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	08007d33 	.word	0x08007d33
 8007a80:	08007bcd 	.word	0x08007bcd

08007a84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b095      	sub	sp, #84	; 0x54
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a94:	e853 3f00 	ldrex	r3, [r3]
 8007a98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aaa:	643b      	str	r3, [r7, #64]	; 0x40
 8007aac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ab0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ab2:	e841 2300 	strex	r3, r2, [r1]
 8007ab6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1e6      	bne.n	8007a8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3308      	adds	r3, #8
 8007ac4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	e853 3f00 	ldrex	r3, [r3]
 8007acc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	f023 0301 	bic.w	r3, r3, #1
 8007ad4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3308      	adds	r3, #8
 8007adc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ade:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ae0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ae6:	e841 2300 	strex	r3, r2, [r1]
 8007aea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1e5      	bne.n	8007abe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d118      	bne.n	8007b2c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	e853 3f00 	ldrex	r3, [r3]
 8007b06:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	f023 0310 	bic.w	r3, r3, #16
 8007b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	461a      	mov	r2, r3
 8007b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b18:	61bb      	str	r3, [r7, #24]
 8007b1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1c:	6979      	ldr	r1, [r7, #20]
 8007b1e:	69ba      	ldr	r2, [r7, #24]
 8007b20:	e841 2300 	strex	r3, r2, [r1]
 8007b24:	613b      	str	r3, [r7, #16]
   return(result);
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1e6      	bne.n	8007afa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2220      	movs	r2, #32
 8007b30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007b40:	bf00      	nop
 8007b42:	3754      	adds	r7, #84	; 0x54
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f7ff fa8a 	bl	8007084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b70:	bf00      	nop
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b088      	sub	sp, #32
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	e853 3f00 	ldrex	r3, [r3]
 8007b8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b94:	61fb      	str	r3, [r7, #28]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	61bb      	str	r3, [r7, #24]
 8007ba0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba2:	6979      	ldr	r1, [r7, #20]
 8007ba4:	69ba      	ldr	r2, [r7, #24]
 8007ba6:	e841 2300 	strex	r3, r2, [r1]
 8007baa:	613b      	str	r3, [r7, #16]
   return(result);
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1e6      	bne.n	8007b80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2220      	movs	r2, #32
 8007bb6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7ff fa56 	bl	8007070 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bc4:	bf00      	nop
 8007bc6:	3720      	adds	r7, #32
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b096      	sub	sp, #88	; 0x58
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007bda:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007be4:	2b22      	cmp	r3, #34	; 0x22
 8007be6:	f040 8098 	bne.w	8007d1a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007bf4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007bf8:	b2d9      	uxtb	r1, r3
 8007bfa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c04:	400a      	ands	r2, r1
 8007c06:	b2d2      	uxtb	r2, r2
 8007c08:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c0e:	1c5a      	adds	r2, r3, #1
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d17b      	bne.n	8007d2a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3a:	e853 3f00 	ldrex	r3, [r3]
 8007c3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c46:	653b      	str	r3, [r7, #80]	; 0x50
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c50:	647b      	str	r3, [r7, #68]	; 0x44
 8007c52:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c58:	e841 2300 	strex	r3, r2, [r1]
 8007c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1e6      	bne.n	8007c32 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3308      	adds	r3, #8
 8007c6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	e853 3f00 	ldrex	r3, [r3]
 8007c72:	623b      	str	r3, [r7, #32]
   return(result);
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	f023 0301 	bic.w	r3, r3, #1
 8007c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	3308      	adds	r3, #8
 8007c82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c84:	633a      	str	r2, [r7, #48]	; 0x30
 8007c86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c8c:	e841 2300 	strex	r3, r2, [r1]
 8007c90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1e5      	bne.n	8007c64 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2220      	movs	r2, #32
 8007c9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d12e      	bne.n	8007d12 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	e853 3f00 	ldrex	r3, [r3]
 8007cc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f023 0310 	bic.w	r3, r3, #16
 8007cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cd8:	61fb      	str	r3, [r7, #28]
 8007cda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cdc:	69b9      	ldr	r1, [r7, #24]
 8007cde:	69fa      	ldr	r2, [r7, #28]
 8007ce0:	e841 2300 	strex	r3, r2, [r1]
 8007ce4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1e6      	bne.n	8007cba <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	69db      	ldr	r3, [r3, #28]
 8007cf2:	f003 0310 	and.w	r3, r3, #16
 8007cf6:	2b10      	cmp	r3, #16
 8007cf8:	d103      	bne.n	8007d02 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2210      	movs	r2, #16
 8007d00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7ff f9c4 	bl	8007098 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d10:	e00b      	b.n	8007d2a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f7fa ff64 	bl	8002be0 <HAL_UART_RxCpltCallback>
}
 8007d18:	e007      	b.n	8007d2a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	699a      	ldr	r2, [r3, #24]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f042 0208 	orr.w	r2, r2, #8
 8007d28:	619a      	str	r2, [r3, #24]
}
 8007d2a:	bf00      	nop
 8007d2c:	3758      	adds	r7, #88	; 0x58
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b096      	sub	sp, #88	; 0x58
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d40:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d4a:	2b22      	cmp	r3, #34	; 0x22
 8007d4c:	f040 8098 	bne.w	8007e80 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d56:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d5e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007d60:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007d64:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007d68:	4013      	ands	r3, r2
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d6e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d74:	1c9a      	adds	r2, r3, #2
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	3b01      	subs	r3, #1
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d17b      	bne.n	8007e90 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	461a      	mov	r2, r3
 8007db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007db6:	643b      	str	r3, [r7, #64]	; 0x40
 8007db8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dbe:	e841 2300 	strex	r3, r2, [r1]
 8007dc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1e6      	bne.n	8007d98 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	3308      	adds	r3, #8
 8007dd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	6a3b      	ldr	r3, [r7, #32]
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	f023 0301 	bic.w	r3, r3, #1
 8007de0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	3308      	adds	r3, #8
 8007de8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007df2:	e841 2300 	strex	r3, r2, [r1]
 8007df6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1e5      	bne.n	8007dca <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2220      	movs	r2, #32
 8007e02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d12e      	bne.n	8007e78 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	e853 3f00 	ldrex	r3, [r3]
 8007e2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	f023 0310 	bic.w	r3, r3, #16
 8007e34:	647b      	str	r3, [r7, #68]	; 0x44
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e3e:	61bb      	str	r3, [r7, #24]
 8007e40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e42:	6979      	ldr	r1, [r7, #20]
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	e841 2300 	strex	r3, r2, [r1]
 8007e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1e6      	bne.n	8007e20 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	69db      	ldr	r3, [r3, #28]
 8007e58:	f003 0310 	and.w	r3, r3, #16
 8007e5c:	2b10      	cmp	r3, #16
 8007e5e:	d103      	bne.n	8007e68 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2210      	movs	r2, #16
 8007e66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f7ff f911 	bl	8007098 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e76:	e00b      	b.n	8007e90 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f7fa feb1 	bl	8002be0 <HAL_UART_RxCpltCallback>
}
 8007e7e:	e007      	b.n	8007e90 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	699a      	ldr	r2, [r3, #24]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f042 0208 	orr.w	r2, r2, #8
 8007e8e:	619a      	str	r2, [r3, #24]
}
 8007e90:	bf00      	nop
 8007e92:	3758      	adds	r7, #88	; 0x58
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <__utoa>:
 8007e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e9a:	4c1f      	ldr	r4, [pc, #124]	; (8007f18 <__utoa+0x80>)
 8007e9c:	b08b      	sub	sp, #44	; 0x2c
 8007e9e:	4605      	mov	r5, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	466e      	mov	r6, sp
 8007ea4:	f104 0c20 	add.w	ip, r4, #32
 8007ea8:	6820      	ldr	r0, [r4, #0]
 8007eaa:	6861      	ldr	r1, [r4, #4]
 8007eac:	4637      	mov	r7, r6
 8007eae:	c703      	stmia	r7!, {r0, r1}
 8007eb0:	3408      	adds	r4, #8
 8007eb2:	4564      	cmp	r4, ip
 8007eb4:	463e      	mov	r6, r7
 8007eb6:	d1f7      	bne.n	8007ea8 <__utoa+0x10>
 8007eb8:	7921      	ldrb	r1, [r4, #4]
 8007eba:	7139      	strb	r1, [r7, #4]
 8007ebc:	1e91      	subs	r1, r2, #2
 8007ebe:	6820      	ldr	r0, [r4, #0]
 8007ec0:	6038      	str	r0, [r7, #0]
 8007ec2:	2922      	cmp	r1, #34	; 0x22
 8007ec4:	f04f 0100 	mov.w	r1, #0
 8007ec8:	d904      	bls.n	8007ed4 <__utoa+0x3c>
 8007eca:	7019      	strb	r1, [r3, #0]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	4618      	mov	r0, r3
 8007ed0:	b00b      	add	sp, #44	; 0x2c
 8007ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ed4:	1e58      	subs	r0, r3, #1
 8007ed6:	4684      	mov	ip, r0
 8007ed8:	fbb5 f7f2 	udiv	r7, r5, r2
 8007edc:	fb02 5617 	mls	r6, r2, r7, r5
 8007ee0:	3628      	adds	r6, #40	; 0x28
 8007ee2:	446e      	add	r6, sp
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007eea:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007eee:	462e      	mov	r6, r5
 8007ef0:	42b2      	cmp	r2, r6
 8007ef2:	f101 0101 	add.w	r1, r1, #1
 8007ef6:	463d      	mov	r5, r7
 8007ef8:	d9ee      	bls.n	8007ed8 <__utoa+0x40>
 8007efa:	2200      	movs	r2, #0
 8007efc:	545a      	strb	r2, [r3, r1]
 8007efe:	1919      	adds	r1, r3, r4
 8007f00:	1aa5      	subs	r5, r4, r2
 8007f02:	42aa      	cmp	r2, r5
 8007f04:	dae3      	bge.n	8007ece <__utoa+0x36>
 8007f06:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007f0a:	780e      	ldrb	r6, [r1, #0]
 8007f0c:	7006      	strb	r6, [r0, #0]
 8007f0e:	3201      	adds	r2, #1
 8007f10:	f801 5901 	strb.w	r5, [r1], #-1
 8007f14:	e7f4      	b.n	8007f00 <__utoa+0x68>
 8007f16:	bf00      	nop
 8007f18:	080086b8 	.word	0x080086b8

08007f1c <utoa>:
 8007f1c:	f7ff bfbc 	b.w	8007e98 <__utoa>

08007f20 <memset>:
 8007f20:	4402      	add	r2, r0
 8007f22:	4603      	mov	r3, r0
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d100      	bne.n	8007f2a <memset+0xa>
 8007f28:	4770      	bx	lr
 8007f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f2e:	e7f9      	b.n	8007f24 <memset+0x4>

08007f30 <__libc_init_array>:
 8007f30:	b570      	push	{r4, r5, r6, lr}
 8007f32:	4d0d      	ldr	r5, [pc, #52]	; (8007f68 <__libc_init_array+0x38>)
 8007f34:	4c0d      	ldr	r4, [pc, #52]	; (8007f6c <__libc_init_array+0x3c>)
 8007f36:	1b64      	subs	r4, r4, r5
 8007f38:	10a4      	asrs	r4, r4, #2
 8007f3a:	2600      	movs	r6, #0
 8007f3c:	42a6      	cmp	r6, r4
 8007f3e:	d109      	bne.n	8007f54 <__libc_init_array+0x24>
 8007f40:	4d0b      	ldr	r5, [pc, #44]	; (8007f70 <__libc_init_array+0x40>)
 8007f42:	4c0c      	ldr	r4, [pc, #48]	; (8007f74 <__libc_init_array+0x44>)
 8007f44:	f000 f818 	bl	8007f78 <_init>
 8007f48:	1b64      	subs	r4, r4, r5
 8007f4a:	10a4      	asrs	r4, r4, #2
 8007f4c:	2600      	movs	r6, #0
 8007f4e:	42a6      	cmp	r6, r4
 8007f50:	d105      	bne.n	8007f5e <__libc_init_array+0x2e>
 8007f52:	bd70      	pop	{r4, r5, r6, pc}
 8007f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f58:	4798      	blx	r3
 8007f5a:	3601      	adds	r6, #1
 8007f5c:	e7ee      	b.n	8007f3c <__libc_init_array+0xc>
 8007f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f62:	4798      	blx	r3
 8007f64:	3601      	adds	r6, #1
 8007f66:	e7f2      	b.n	8007f4e <__libc_init_array+0x1e>
 8007f68:	080086e8 	.word	0x080086e8
 8007f6c:	080086e8 	.word	0x080086e8
 8007f70:	080086e8 	.word	0x080086e8
 8007f74:	080086ec 	.word	0x080086ec

08007f78 <_init>:
 8007f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7a:	bf00      	nop
 8007f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f7e:	bc08      	pop	{r3}
 8007f80:	469e      	mov	lr, r3
 8007f82:	4770      	bx	lr

08007f84 <_fini>:
 8007f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f86:	bf00      	nop
 8007f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f8a:	bc08      	pop	{r3}
 8007f8c:	469e      	mov	lr, r3
 8007f8e:	4770      	bx	lr
