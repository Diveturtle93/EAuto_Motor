
Motorsteuergeraet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c94  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  08007e8c  08007e8c  00017e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085cc  080085cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080085cc  080085cc  000185cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085d4  080085d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085d4  080085d4  000185d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085d8  080085d8  000185d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080085dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000000c  080085e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  080085e8  00020214  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a153  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d01  00000000  00000000  0003a18d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  0003de90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  0003f108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c9ea  00000000  00000000  000401c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab5b  00000000  00000000  0006cbb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108dd5  00000000  00000000  0008770d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001904e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a2c  00000000  00000000  00190534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08007e74 	.word	0x08007e74

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08007e74 	.word	0x08007e74

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <BAMOCAN_ID>:
//----------------------------------------------------------------------

// Ermittle Register nach Empfang Bamocar CAN-ID
//----------------------------------------------------------------------
void BAMOCAN_ID(uint8_t* data, uint8_t dlc)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	460b      	mov	r3, r1
 8000556:	70fb      	strb	r3, [r7, #3]
	uint8_t Reg = data[0];
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	733b      	strb	r3, [r7, #12]
	uint16_t speed = 0, strom;
 800055e:	2300      	movs	r3, #0
 8000560:	817b      	strh	r3, [r7, #10]

	// Waehlen welches Register gesendet wurde
	switch (Reg)
 8000562:	7b3b      	ldrb	r3, [r7, #12]
 8000564:	2bd8      	cmp	r3, #216	; 0xd8
 8000566:	f000 80be 	beq.w	80006e6 <BAMOCAN_ID+0x19a>
 800056a:	2bd8      	cmp	r3, #216	; 0xd8
 800056c:	f300 8100 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 8000570:	2ba8      	cmp	r3, #168	; 0xa8
 8000572:	d012      	beq.n	800059a <BAMOCAN_ID+0x4e>
 8000574:	2ba8      	cmp	r3, #168	; 0xa8
 8000576:	f300 80fb 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 800057a:	2b8f      	cmp	r3, #143	; 0x8f
 800057c:	d077      	beq.n	800066e <BAMOCAN_ID+0x122>
 800057e:	2b8f      	cmp	r3, #143	; 0x8f
 8000580:	f300 80f6 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 8000584:	2b5f      	cmp	r3, #95	; 0x5f
 8000586:	d025      	beq.n	80005d4 <BAMOCAN_ID+0x88>
 8000588:	2b5f      	cmp	r3, #95	; 0x5f
 800058a:	f300 80f1 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 800058e:	2b1b      	cmp	r3, #27
 8000590:	f000 80d4 	beq.w	800073c <BAMOCAN_ID+0x1f0>
 8000594:	2b40      	cmp	r3, #64	; 0x40
 8000596:	d037      	beq.n	8000608 <BAMOCAN_ID+0xbc>
 8000598:	e0ea      	b.n	8000770 <BAMOCAN_ID+0x224>
	{
		// Drehzahl vom Bamocar bekommen
		case BAMOCAR_REG_N_ACT_FILTER:
			speed = ((data[2]<<8) + data[1]);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3302      	adds	r3, #2
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	021b      	lsls	r3, r3, #8
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	3301      	adds	r3, #1
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	4413      	add	r3, r2
 80005b0:	817b      	strh	r3, [r7, #10]
			motor1.Drehzahl = speed;
 80005b2:	4a74      	ldr	r2, [pc, #464]	; (8000784 <BAMOCAN_ID+0x238>)
 80005b4:	897b      	ldrh	r3, [r7, #10]
 80005b6:	8053      	strh	r3, [r2, #2]
// Uart Ausgabe
#ifdef DEBUG_BAMOCAR
			uartTransmit("Motordrehzahl\n", 14);
 80005b8:	210e      	movs	r1, #14
 80005ba:	4873      	ldr	r0, [pc, #460]	; (8000788 <BAMOCAN_ID+0x23c>)
 80005bc:	f000 f900 	bl	80007c0 <uartTransmit>
			uartTransmitNumber(speed, 10);
 80005c0:	897b      	ldrh	r3, [r7, #10]
 80005c2:	210a      	movs	r1, #10
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f90f 	bl	80007e8 <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005ca:	2101      	movs	r1, #1
 80005cc:	486f      	ldr	r0, [pc, #444]	; (800078c <BAMOCAN_ID+0x240>)
 80005ce:	f000 f8f7 	bl	80007c0 <uartTransmit>
#endif
			break;
 80005d2:	e0d2      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Stromwert von Bamocar bekommen
		case BAMOCAR_REG_I_ACT_FILTER:
			strom = ((data[2]<<8) + data[1]);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3302      	adds	r3, #2
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	021b      	lsls	r3, r3, #8
 80005de:	b29a      	uxth	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3301      	adds	r3, #1
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	4413      	add	r3, r2
 80005ea:	813b      	strh	r3, [r7, #8]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Motorstrom\n", 11);
 80005ec:	210b      	movs	r1, #11
 80005ee:	4868      	ldr	r0, [pc, #416]	; (8000790 <BAMOCAN_ID+0x244>)
 80005f0:	f000 f8e6 	bl	80007c0 <uartTransmit>
			uartTransmitNumber(strom, 10);
 80005f4:	893b      	ldrh	r3, [r7, #8]
 80005f6:	210a      	movs	r1, #10
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 f8f5 	bl	80007e8 <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005fe:	2101      	movs	r1, #1
 8000600:	4862      	ldr	r0, [pc, #392]	; (800078c <BAMOCAN_ID+0x240>)
 8000602:	f000 f8dd 	bl	80007c0 <uartTransmit>
#endif

			break;
 8000606:	e0b8      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Statusregister von Bamocar bekommen
		case BAMOCAR_REG_STATUS:
			bamocar_stat.status1 = ((data[4] << 24) + (data[3] << 16) + (data[2] << 8) + data[1]);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3304      	adds	r3, #4
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	061a      	lsls	r2, r3, #24
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3303      	adds	r3, #3
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	041b      	lsls	r3, r3, #16
 8000618:	441a      	add	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	3302      	adds	r3, #2
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	4413      	add	r3, r2
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	3201      	adds	r2, #1
 8000628:	7812      	ldrb	r2, [r2, #0]
 800062a:	4413      	add	r3, r2
 800062c:	461a      	mov	r2, r3
 800062e:	4b59      	ldr	r3, [pc, #356]	; (8000794 <BAMOCAN_ID+0x248>)
 8000630:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Status\n", 15);
 8000632:	210f      	movs	r1, #15
 8000634:	4858      	ldr	r0, [pc, #352]	; (8000798 <BAMOCAN_ID+0x24c>)
 8000636:	f000 f8c3 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 4; i > 0; i--)
 800063a:	2304      	movs	r3, #4
 800063c:	73fb      	strb	r3, [r7, #15]
 800063e:	e00e      	b.n	800065e <BAMOCAN_ID+0x112>
			{
				uartTransmitNumber(bamocar_stat.status[i-1], 16);
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	3b01      	subs	r3, #1
 8000644:	4a53      	ldr	r2, [pc, #332]	; (8000794 <BAMOCAN_ID+0x248>)
 8000646:	5cd3      	ldrb	r3, [r2, r3]
 8000648:	2110      	movs	r1, #16
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f8cc 	bl	80007e8 <uartTransmitNumber>
				uartTransmit(" ", 1);
 8000650:	2101      	movs	r1, #1
 8000652:	4852      	ldr	r0, [pc, #328]	; (800079c <BAMOCAN_ID+0x250>)
 8000654:	f000 f8b4 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 4; i > 0; i--)
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	3b01      	subs	r3, #1
 800065c:	73fb      	strb	r3, [r7, #15]
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d1ed      	bne.n	8000640 <BAMOCAN_ID+0xf4>
			}
			uartTransmit("\n", 1);
 8000664:	2101      	movs	r1, #1
 8000666:	4849      	ldr	r0, [pc, #292]	; (800078c <BAMOCAN_ID+0x240>)
 8000668:	f000 f8aa 	bl	80007c0 <uartTransmit>
#endif

			break;
 800066c:	e085      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Errorregister von Bamocar bekommen
		case BAMOCAR_REG_ERROR:
			bamocar_error.error1 = ((data[2] << 8) + data[1]);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3302      	adds	r3, #2
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b29b      	uxth	r3, r3
 8000676:	021b      	lsls	r3, r3, #8
 8000678:	b29a      	uxth	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	3301      	adds	r3, #1
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b29b      	uxth	r3, r3
 8000682:	4413      	add	r3, r2
 8000684:	b29a      	uxth	r2, r3
 8000686:	4b46      	ldr	r3, [pc, #280]	; (80007a0 <BAMOCAN_ID+0x254>)
 8000688:	801a      	strh	r2, [r3, #0]
			bamocar_warnung.warnung1 = ((data[4] << 8) + data[3]);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3304      	adds	r3, #4
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	b29b      	uxth	r3, r3
 8000692:	021b      	lsls	r3, r3, #8
 8000694:	b29a      	uxth	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3303      	adds	r3, #3
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b29b      	uxth	r3, r3
 800069e:	4413      	add	r3, r2
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	4b40      	ldr	r3, [pc, #256]	; (80007a4 <BAMOCAN_ID+0x258>)
 80006a4:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Error\n", 14);
 80006a6:	210e      	movs	r1, #14
 80006a8:	483f      	ldr	r0, [pc, #252]	; (80007a8 <BAMOCAN_ID+0x25c>)
 80006aa:	f000 f889 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	73bb      	strb	r3, [r7, #14]
 80006b2:	e010      	b.n	80006d6 <BAMOCAN_ID+0x18a>
			{
				uartTransmitNumber(data[1+i], 16);
 80006b4:	7bbb      	ldrb	r3, [r7, #14]
 80006b6:	3301      	adds	r3, #1
 80006b8:	461a      	mov	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2110      	movs	r1, #16
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 f890 	bl	80007e8 <uartTransmitNumber>
				uartTransmit(" ", 1);
 80006c8:	2101      	movs	r1, #1
 80006ca:	4834      	ldr	r0, [pc, #208]	; (800079c <BAMOCAN_ID+0x250>)
 80006cc:	f000 f878 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006d0:	7bbb      	ldrb	r3, [r7, #14]
 80006d2:	3301      	adds	r3, #1
 80006d4:	73bb      	strb	r3, [r7, #14]
 80006d6:	7bbb      	ldrb	r3, [r7, #14]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	d9eb      	bls.n	80006b4 <BAMOCAN_ID+0x168>
			}
			uartTransmit("\n", 1);
 80006dc:	2101      	movs	r1, #1
 80006de:	482b      	ldr	r0, [pc, #172]	; (800078c <BAMOCAN_ID+0x240>)
 80006e0:	f000 f86e 	bl	80007c0 <uartTransmit>
#endif

			break;
 80006e4:	e049      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Status IO Register von Bamocar bekommen
		case BAMOCAR_REG_STATUS_IO:
			bamocar_IOstatus.status1 = ((data[2] << 8) + data[1]);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3302      	adds	r3, #2
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	021b      	lsls	r3, r3, #8
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3301      	adds	r3, #1
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	4413      	add	r3, r2
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <BAMOCAN_ID+0x260>)
 8000700:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar IO Status\n", 18);
 8000702:	2112      	movs	r1, #18
 8000704:	482a      	ldr	r0, [pc, #168]	; (80007b0 <BAMOCAN_ID+0x264>)
 8000706:	f000 f85b 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 2; i++)
 800070a:	2300      	movs	r3, #0
 800070c:	737b      	strb	r3, [r7, #13]
 800070e:	e00d      	b.n	800072c <BAMOCAN_ID+0x1e0>
			{
				uartTransmitNumber(bamocar_IOstatus.status[i], 16);
 8000710:	7b7b      	ldrb	r3, [r7, #13]
 8000712:	4a26      	ldr	r2, [pc, #152]	; (80007ac <BAMOCAN_ID+0x260>)
 8000714:	5cd3      	ldrb	r3, [r2, r3]
 8000716:	2110      	movs	r1, #16
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f865 	bl	80007e8 <uartTransmitNumber>
				uartTransmit(" ", 1);
 800071e:	2101      	movs	r1, #1
 8000720:	481e      	ldr	r0, [pc, #120]	; (800079c <BAMOCAN_ID+0x250>)
 8000722:	f000 f84d 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 2; i++)
 8000726:	7b7b      	ldrb	r3, [r7, #13]
 8000728:	3301      	adds	r3, #1
 800072a:	737b      	strb	r3, [r7, #13]
 800072c:	7b7b      	ldrb	r3, [r7, #13]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d9ee      	bls.n	8000710 <BAMOCAN_ID+0x1c4>
			}
			uartTransmit("\n", 1);
 8000732:	2101      	movs	r1, #1
 8000734:	4815      	ldr	r0, [pc, #84]	; (800078c <BAMOCAN_ID+0x240>)
 8000736:	f000 f843 	bl	80007c0 <uartTransmit>
#endif

			break;
 800073a:	e01e      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Firmware von Bamocar ausgelesen
		case BAMOCAR_REG_FIRMWARE:
			bamocar_data.data = ((data[2]<<8) + data[1]);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3302      	adds	r3, #2
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	021b      	lsls	r3, r3, #8
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	3201      	adds	r2, #1
 8000748:	7812      	ldrb	r2, [r2, #0]
 800074a:	4413      	add	r3, r2
 800074c:	461a      	mov	r2, r3
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <BAMOCAN_ID+0x268>)
 8000750:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Firmware\n", 9);
 8000752:	2109      	movs	r1, #9
 8000754:	4818      	ldr	r0, [pc, #96]	; (80007b8 <BAMOCAN_ID+0x26c>)
 8000756:	f000 f833 	bl	80007c0 <uartTransmit>
			uartTransmitNumber(bamocar_data.data, 16);
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <BAMOCAN_ID+0x268>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2110      	movs	r1, #16
 8000760:	4618      	mov	r0, r3
 8000762:	f000 f841 	bl	80007e8 <uartTransmitNumber>
			uartTransmit("\n", 1);
 8000766:	2101      	movs	r1, #1
 8000768:	4808      	ldr	r0, [pc, #32]	; (800078c <BAMOCAN_ID+0x240>)
 800076a:	f000 f829 	bl	80007c0 <uartTransmit>
#endif

			break;
 800076e:	e004      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Register fuer Bamocar nicht definiert, Fehler
		default:
			uartTransmit("Bamocar Register nicht definiert\n", 33);
 8000770:	2121      	movs	r1, #33	; 0x21
 8000772:	4812      	ldr	r0, [pc, #72]	; (80007bc <BAMOCAN_ID+0x270>)
 8000774:	f000 f824 	bl	80007c0 <uartTransmit>
			break;
 8000778:	bf00      	nop
	}
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000134 	.word	0x20000134
 8000788:	08007e8c 	.word	0x08007e8c
 800078c:	08007e9c 	.word	0x08007e9c
 8000790:	08007ea0 	.word	0x08007ea0
 8000794:	2000002c 	.word	0x2000002c
 8000798:	08007eac 	.word	0x08007eac
 800079c:	08007ebc 	.word	0x08007ebc
 80007a0:	20000030 	.word	0x20000030
 80007a4:	20000034 	.word	0x20000034
 80007a8:	08007ec0 	.word	0x08007ec0
 80007ac:	20000028 	.word	0x20000028
 80007b0:	08007ed0 	.word	0x08007ed0
 80007b4:	20000038 	.word	0x20000038
 80007b8:	08007ee4 	.word	0x08007ee4
 80007bc:	08007ef0 	.word	0x08007ef0

080007c0 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	4803      	ldr	r0, [pc, #12]	; (80007e4 <uartTransmit+0x24>)
 80007d6:	f006 f819 	bl	800680c <HAL_UART_Transmit>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000188 	.word	0x20000188

080007e8 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4619      	mov	r1, r3
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f007 fb38 	bl	8007e70 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fd17 	bl	8000238 <strlen>
 800080a:	4603      	mov	r3, r0
 800080c:	b29a      	uxth	r2, r3
 800080e:	f107 010c 	add.w	r1, r7, #12
 8000812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000816:	4803      	ldr	r0, [pc, #12]	; (8000824 <uartTransmitNumber+0x3c>)
 8000818:	f005 fff8 	bl	800680c <HAL_UART_Transmit>
}
 800081c:	bf00      	nop
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000188 	.word	0x20000188

08000828 <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 800082e:	2114      	movs	r1, #20
 8000830:	483d      	ldr	r0, [pc, #244]	; (8000928 <collectHardwareInfo+0x100>)
 8000832:	f7ff ffc5 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 8000836:	f002 fcb1 	bl	800319c <HAL_GetDEVID>
 800083a:	4603      	mov	r3, r0
 800083c:	210a      	movs	r1, #10
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ffd2 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8000844:	2116      	movs	r1, #22
 8000846:	4839      	ldr	r0, [pc, #228]	; (800092c <collectHardwareInfo+0x104>)
 8000848:	f7ff ffba 	bl	80007c0 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 800084c:	f002 fc9a 	bl	8003184 <HAL_GetREVID>
 8000850:	4603      	mov	r3, r0
 8000852:	f242 0201 	movw	r2, #8193	; 0x2001
 8000856:	4293      	cmp	r3, r2
 8000858:	d016      	beq.n	8000888 <collectHardwareInfo+0x60>
 800085a:	f242 0201 	movw	r2, #8193	; 0x2001
 800085e:	4293      	cmp	r3, r2
 8000860:	d817      	bhi.n	8000892 <collectHardwareInfo+0x6a>
 8000862:	f241 0201 	movw	r2, #4097	; 0x1001
 8000866:	4293      	cmp	r3, r2
 8000868:	d004      	beq.n	8000874 <collectHardwareInfo+0x4c>
 800086a:	f241 0203 	movw	r2, #4099	; 0x1003
 800086e:	4293      	cmp	r3, r2
 8000870:	d005      	beq.n	800087e <collectHardwareInfo+0x56>
 8000872:	e00e      	b.n	8000892 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8000874:	2101      	movs	r1, #1
 8000876:	482e      	ldr	r0, [pc, #184]	; (8000930 <collectHardwareInfo+0x108>)
 8000878:	f7ff ffa2 	bl	80007c0 <uartTransmit>
			break;
 800087c:	e011      	b.n	80008a2 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 800087e:	2101      	movs	r1, #1
 8000880:	482c      	ldr	r0, [pc, #176]	; (8000934 <collectHardwareInfo+0x10c>)
 8000882:	f7ff ff9d 	bl	80007c0 <uartTransmit>
			break;
 8000886:	e00c      	b.n	80008a2 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000888:	2101      	movs	r1, #1
 800088a:	482b      	ldr	r0, [pc, #172]	; (8000938 <collectHardwareInfo+0x110>)
 800088c:	f7ff ff98 	bl	80007c0 <uartTransmit>
			break;
 8000890:	e007      	b.n	80008a2 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 8000892:	f002 fc77 	bl	8003184 <HAL_GetREVID>
 8000896:	4603      	mov	r3, r0
 8000898:	210a      	movs	r1, #10
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ffa4 	bl	80007e8 <uartTransmitNumber>
			break;
 80008a0:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 80008a2:	2114      	movs	r1, #20
 80008a4:	4825      	ldr	r0, [pc, #148]	; (800093c <collectHardwareInfo+0x114>)
 80008a6:	f7ff ff8b 	bl	80007c0 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 80008aa:	f004 fedb 	bl	8005664 <HAL_RCC_GetSysClockFreq>
 80008ae:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a23      	ldr	r2, [pc, #140]	; (8000940 <collectHardwareInfo+0x118>)
 80008b4:	fba2 2303 	umull	r2, r3, r2, r3
 80008b8:	0c9b      	lsrs	r3, r3, #18
 80008ba:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 80008bc:	210a      	movs	r1, #10
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ff92 	bl	80007e8 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80008c4:	2104      	movs	r1, #4
 80008c6:	481f      	ldr	r0, [pc, #124]	; (8000944 <collectHardwareInfo+0x11c>)
 80008c8:	f7ff ff7a 	bl	80007c0 <uartTransmit>


	uartTransmit("\n", 1);
 80008cc:	2101      	movs	r1, #1
 80008ce:	481e      	ldr	r0, [pc, #120]	; (8000948 <collectHardwareInfo+0x120>)
 80008d0:	f7ff ff76 	bl	80007c0 <uartTransmit>
	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80008d4:	2110      	movs	r1, #16
 80008d6:	481d      	ldr	r0, [pc, #116]	; (800094c <collectHardwareInfo+0x124>)
 80008d8:	f7ff ff72 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 80008dc:	f002 fc6c 	bl	80031b8 <HAL_GetUIDw0>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2110      	movs	r1, #16
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff7f 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80008ea:	2101      	movs	r1, #1
 80008ec:	4818      	ldr	r0, [pc, #96]	; (8000950 <collectHardwareInfo+0x128>)
 80008ee:	f7ff ff67 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 80008f2:	f002 fc6d 	bl	80031d0 <HAL_GetUIDw1>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2110      	movs	r1, #16
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ff74 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000900:	2101      	movs	r1, #1
 8000902:	4813      	ldr	r0, [pc, #76]	; (8000950 <collectHardwareInfo+0x128>)
 8000904:	f7ff ff5c 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000908:	f002 fc6e 	bl	80031e8 <HAL_GetUIDw2>
 800090c:	4603      	mov	r3, r0
 800090e:	2110      	movs	r1, #16
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ff69 	bl	80007e8 <uartTransmitNumber>

	uartTransmit("\n", 1);
 8000916:	2101      	movs	r1, #1
 8000918:	480b      	ldr	r0, [pc, #44]	; (8000948 <collectHardwareInfo+0x120>)
 800091a:	f7ff ff51 	bl	80007c0 <uartTransmit>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	08007f6c 	.word	0x08007f6c
 800092c:	08007f80 	.word	0x08007f80
 8000930:	08007f98 	.word	0x08007f98
 8000934:	08007f9c 	.word	0x08007f9c
 8000938:	08007fa0 	.word	0x08007fa0
 800093c:	08007fa4 	.word	0x08007fa4
 8000940:	431bde83 	.word	0x431bde83
 8000944:	08007fb8 	.word	0x08007fb8
 8000948:	08007fc0 	.word	0x08007fc0
 800094c:	08007fc4 	.word	0x08007fc4
 8000950:	08007fd4 	.word	0x08007fd4

08000954 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 8000958:	2110      	movs	r1, #16
 800095a:	4826      	ldr	r0, [pc, #152]	; (80009f4 <collectSoftwareInfo+0xa0>)
 800095c:	f7ff ff30 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000960:	2108      	movs	r1, #8
 8000962:	4825      	ldr	r0, [pc, #148]	; (80009f8 <collectSoftwareInfo+0xa4>)
 8000964:	f7ff ff2c 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000968:	2110      	movs	r1, #16
 800096a:	4824      	ldr	r0, [pc, #144]	; (80009fc <collectSoftwareInfo+0xa8>)
 800096c:	f7ff ff28 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000970:	2108      	movs	r1, #8
 8000972:	4823      	ldr	r0, [pc, #140]	; (8000a00 <collectSoftwareInfo+0xac>)
 8000974:	f7ff ff24 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000978:	210e      	movs	r1, #14
 800097a:	4822      	ldr	r0, [pc, #136]	; (8000a04 <collectSoftwareInfo+0xb0>)
 800097c:	f7ff ff20 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 8000980:	2129      	movs	r1, #41	; 0x29
 8000982:	4821      	ldr	r0, [pc, #132]	; (8000a08 <collectSoftwareInfo+0xb4>)
 8000984:	f7ff ff1c 	bl	80007c0 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000988:	2101      	movs	r1, #1
 800098a:	4820      	ldr	r0, [pc, #128]	; (8000a0c <collectSoftwareInfo+0xb8>)
 800098c:	f7ff ff18 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000990:	2115      	movs	r1, #21
 8000992:	481f      	ldr	r0, [pc, #124]	; (8000a10 <collectSoftwareInfo+0xbc>)
 8000994:	f7ff ff14 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 8000998:	210e      	movs	r1, #14
 800099a:	481e      	ldr	r0, [pc, #120]	; (8000a14 <collectSoftwareInfo+0xc0>)
 800099c:	f7ff ff10 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 80009a0:	2114      	movs	r1, #20
 80009a2:	481d      	ldr	r0, [pc, #116]	; (8000a18 <collectSoftwareInfo+0xc4>)
 80009a4:	f7ff ff0c 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 80009a8:	2129      	movs	r1, #41	; 0x29
 80009aa:	481c      	ldr	r0, [pc, #112]	; (8000a1c <collectSoftwareInfo+0xc8>)
 80009ac:	f7ff ff08 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 80009b0:	2115      	movs	r1, #21
 80009b2:	481b      	ldr	r0, [pc, #108]	; (8000a20 <collectSoftwareInfo+0xcc>)
 80009b4:	f7ff ff04 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 80009b8:	2115      	movs	r1, #21
 80009ba:	481a      	ldr	r0, [pc, #104]	; (8000a24 <collectSoftwareInfo+0xd0>)
 80009bc:	f7ff ff00 	bl	80007c0 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80009c0:	2101      	movs	r1, #1
 80009c2:	4812      	ldr	r0, [pc, #72]	; (8000a0c <collectSoftwareInfo+0xb8>)
 80009c4:	f7ff fefc 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80009c8:	2110      	movs	r1, #16
 80009ca:	4817      	ldr	r0, [pc, #92]	; (8000a28 <collectSoftwareInfo+0xd4>)
 80009cc:	f7ff fef8 	bl	80007c0 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 80009d0:	210b      	movs	r1, #11
 80009d2:	4816      	ldr	r0, [pc, #88]	; (8000a2c <collectSoftwareInfo+0xd8>)
 80009d4:	f7ff fef4 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80009d8:	2110      	movs	r1, #16
 80009da:	4815      	ldr	r0, [pc, #84]	; (8000a30 <collectSoftwareInfo+0xdc>)
 80009dc:	f7ff fef0 	bl	80007c0 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 80009e0:	2109      	movs	r1, #9
 80009e2:	4814      	ldr	r0, [pc, #80]	; (8000a34 <collectSoftwareInfo+0xe0>)
 80009e4:	f7ff feec 	bl	80007c0 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80009e8:	2101      	movs	r1, #1
 80009ea:	4808      	ldr	r0, [pc, #32]	; (8000a0c <collectSoftwareInfo+0xb8>)
 80009ec:	f7ff fee8 	bl	80007c0 <uartTransmit>
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	08007fd8 	.word	0x08007fd8
 80009f8:	08007fe8 	.word	0x08007fe8
 80009fc:	08007ff0 	.word	0x08007ff0
 8000a00:	08008000 	.word	0x08008000
 8000a04:	08008008 	.word	0x08008008
 8000a08:	08008018 	.word	0x08008018
 8000a0c:	08007fc0 	.word	0x08007fc0
 8000a10:	08008044 	.word	0x08008044
 8000a14:	0800805c 	.word	0x0800805c
 8000a18:	0800806c 	.word	0x0800806c
 8000a1c:	08008080 	.word	0x08008080
 8000a20:	080080ac 	.word	0x080080ac
 8000a24:	080080c4 	.word	0x080080c4
 8000a28:	080080dc 	.word	0x080080dc
 8000a2c:	080080ec 	.word	0x080080ec
 8000a30:	080080f8 	.word	0x080080f8
 8000a34:	08008108 	.word	0x08008108

08000a38 <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8000a3c:	2113      	movs	r1, #19
 8000a3e:	4824      	ldr	r0, [pc, #144]	; (8000ad0 <collectMiddlewareInfo+0x98>)
 8000a40:	f7ff febe 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8000a44:	210a      	movs	r1, #10
 8000a46:	2005      	movs	r0, #5
 8000a48:	f7ff fece 	bl	80007e8 <uartTransmitNumber>
	uartTransmit(".", 1);
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	4821      	ldr	r0, [pc, #132]	; (8000ad4 <collectMiddlewareInfo+0x9c>)
 8000a50:	f7ff feb6 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8000a54:	210a      	movs	r1, #10
 8000a56:	2001      	movs	r0, #1
 8000a58:	f7ff fec6 	bl	80007e8 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8000a5c:	2111      	movs	r1, #17
 8000a5e:	481e      	ldr	r0, [pc, #120]	; (8000ad8 <collectMiddlewareInfo+0xa0>)
 8000a60:	f7ff feae 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8000a64:	f002 fb84 	bl	8003170 <HAL_GetHalVersion>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	0e1b      	lsrs	r3, r3, #24
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	210a      	movs	r1, #10
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff feb9 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000a76:	2101      	movs	r1, #1
 8000a78:	4816      	ldr	r0, [pc, #88]	; (8000ad4 <collectMiddlewareInfo+0x9c>)
 8000a7a:	f7ff fea1 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000a7e:	f002 fb77 	bl	8003170 <HAL_GetHalVersion>
 8000a82:	4603      	mov	r3, r0
 8000a84:	0c1b      	lsrs	r3, r3, #16
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	210a      	movs	r1, #10
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff feac 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000a90:	2101      	movs	r1, #1
 8000a92:	4810      	ldr	r0, [pc, #64]	; (8000ad4 <collectMiddlewareInfo+0x9c>)
 8000a94:	f7ff fe94 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000a98:	f002 fb6a 	bl	8003170 <HAL_GetHalVersion>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	0a1b      	lsrs	r3, r3, #8
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	210a      	movs	r1, #10
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fe9f 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000aaa:	2101      	movs	r1, #1
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <collectMiddlewareInfo+0x9c>)
 8000aae:	f7ff fe87 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000ab2:	f002 fb5d 	bl	8003170 <HAL_GetHalVersion>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	210a      	movs	r1, #10
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fe93 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <collectMiddlewareInfo+0xa4>)
 8000ac6:	f7ff fe7b 	bl	80007c0 <uartTransmit>
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	08008114 	.word	0x08008114
 8000ad4:	08008128 	.word	0x08008128
 8000ad8:	0800812c 	.word	0x0800812c
 8000adc:	08007fc0 	.word	0x08007fc0

08000ae0 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 8000ae4:	2114      	movs	r1, #20
 8000ae6:	4814      	ldr	r0, [pc, #80]	; (8000b38 <collectGitcounts+0x58>)
 8000ae8:	f7ff fe6a 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8000aec:	2103      	movs	r1, #3
 8000aee:	4813      	ldr	r0, [pc, #76]	; (8000b3c <collectGitcounts+0x5c>)
 8000af0:	f7ff fe66 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 8000af4:	2116      	movs	r1, #22
 8000af6:	4812      	ldr	r0, [pc, #72]	; (8000b40 <collectGitcounts+0x60>)
 8000af8:	f7ff fe62 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8000afc:	2103      	movs	r1, #3
 8000afe:	4811      	ldr	r0, [pc, #68]	; (8000b44 <collectGitcounts+0x64>)
 8000b00:	f7ff fe5e 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 8000b04:	211b      	movs	r1, #27
 8000b06:	4810      	ldr	r0, [pc, #64]	; (8000b48 <collectGitcounts+0x68>)
 8000b08:	f7ff fe5a 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8000b0c:	2103      	movs	r1, #3
 8000b0e:	480f      	ldr	r0, [pc, #60]	; (8000b4c <collectGitcounts+0x6c>)
 8000b10:	f7ff fe56 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000b14:	2115      	movs	r1, #21
 8000b16:	480e      	ldr	r0, [pc, #56]	; (8000b50 <collectGitcounts+0x70>)
 8000b18:	f7ff fe52 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <collectGitcounts+0x74>)
 8000b20:	f7ff fe4e 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000b24:	2114      	movs	r1, #20
 8000b26:	480c      	ldr	r0, [pc, #48]	; (8000b58 <collectGitcounts+0x78>)
 8000b28:	f7ff fe4a 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 8000b2c:	2103      	movs	r1, #3
 8000b2e:	480b      	ldr	r0, [pc, #44]	; (8000b5c <collectGitcounts+0x7c>)
 8000b30:	f7ff fe46 	bl	80007c0 <uartTransmit>
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	08008140 	.word	0x08008140
 8000b3c:	08008154 	.word	0x08008154
 8000b40:	08008158 	.word	0x08008158
 8000b44:	08008170 	.word	0x08008170
 8000b48:	08008174 	.word	0x08008174
 8000b4c:	08008190 	.word	0x08008190
 8000b50:	08008044 	.word	0x08008044
 8000b54:	08008194 	.word	0x08008194
 8000b58:	0800806c 	.word	0x0800806c
 8000b5c:	08008198 	.word	0x08008198

08000b60 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000b64:	2111      	movs	r1, #17
 8000b66:	480e      	ldr	r0, [pc, #56]	; (8000ba0 <collectSystemInfo+0x40>)
 8000b68:	f7ff fe2a 	bl	80007c0 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000b6c:	f7ff fe5c 	bl	8000828 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000b70:	2111      	movs	r1, #17
 8000b72:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <collectSystemInfo+0x44>)
 8000b74:	f7ff fe24 	bl	80007c0 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8000b78:	f7ff feec 	bl	8000954 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000b7c:	2113      	movs	r1, #19
 8000b7e:	480a      	ldr	r0, [pc, #40]	; (8000ba8 <collectSystemInfo+0x48>)
 8000b80:	f7ff fe1e 	bl	80007c0 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000b84:	f7ff ff58 	bl	8000a38 <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8000b88:	2113      	movs	r1, #19
 8000b8a:	4808      	ldr	r0, [pc, #32]	; (8000bac <collectSystemInfo+0x4c>)
 8000b8c:	f7ff fe18 	bl	80007c0 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8000b90:	f7ff ffa6 	bl	8000ae0 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 8000b94:	2103      	movs	r1, #3
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <collectSystemInfo+0x50>)
 8000b98:	f7ff fe12 	bl	80007c0 <uartTransmit>
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	0800819c 	.word	0x0800819c
 8000ba4:	080081b0 	.word	0x080081b0
 8000ba8:	080081c4 	.word	0x080081c4
 8000bac:	080081d8 	.word	0x080081d8
 8000bb0:	080081ec 	.word	0x080081ec

08000bb4 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000bbe:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <readResetSource+0xa0>)
 8000bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d002      	beq.n	8000bd0 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000bd0:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <readResetSource+0xa0>)
 8000bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d002      	beq.n	8000be2 <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	3302      	adds	r3, #2
 8000be0:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <readResetSource+0xa0>)
 8000be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	da02      	bge.n	8000bf0 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	3304      	adds	r3, #4
 8000bee:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000bf0:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <readResetSource+0xa0>)
 8000bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d002      	beq.n	8000c02 <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	3308      	adds	r3, #8
 8000c00:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <readResetSource+0xa0>)
 8000c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d002      	beq.n	8000c14 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	3310      	adds	r3, #16
 8000c12:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <readResetSource+0xa0>)
 8000c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d002      	beq.n	8000c26 <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	3320      	adds	r3, #32
 8000c24:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <readResetSource+0xa0>)
 8000c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d002      	beq.n	8000c38 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	3340      	adds	r3, #64	; 0x40
 8000c36:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <readResetSource+0xa0>)
 8000c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c3c:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <readResetSource+0xa0>)
 8000c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c42:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8000c44:	79fb      	ldrb	r3, [r7, #7]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800

08000c58 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8000c62:	2106      	movs	r1, #6
 8000c64:	482a      	ldr	r0, [pc, #168]	; (8000d10 <printResetSource+0xb8>)
 8000c66:	f7ff fdab 	bl	80007c0 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d104      	bne.n	8000c7a <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8000c70:	210f      	movs	r1, #15
 8000c72:	4828      	ldr	r0, [pc, #160]	; (8000d14 <printResetSource+0xbc>)
 8000c74:	f7ff fda4 	bl	80007c0 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8000c78:	e046      	b.n	8000d08 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000c84:	2118      	movs	r1, #24
 8000c86:	4824      	ldr	r0, [pc, #144]	; (8000d18 <printResetSource+0xc0>)
 8000c88:	f7ff fd9a 	bl	80007c0 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d003      	beq.n	8000c9e <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000c96:	2116      	movs	r1, #22
 8000c98:	4820      	ldr	r0, [pc, #128]	; (8000d1c <printResetSource+0xc4>)
 8000c9a:	f7ff fd91 	bl	80007c0 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 0304 	and.w	r3, r3, #4
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d003      	beq.n	8000cb0 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8000ca8:	210a      	movs	r1, #10
 8000caa:	481d      	ldr	r0, [pc, #116]	; (8000d20 <printResetSource+0xc8>)
 8000cac:	f7ff fd88 	bl	80007c0 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8000cba:	2110      	movs	r1, #16
 8000cbc:	4819      	ldr	r0, [pc, #100]	; (8000d24 <printResetSource+0xcc>)
 8000cbe:	f7ff fd7f 	bl	80007c0 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d003      	beq.n	8000cd4 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000ccc:	210f      	movs	r1, #15
 8000cce:	4816      	ldr	r0, [pc, #88]	; (8000d28 <printResetSource+0xd0>)
 8000cd0:	f7ff fd76 	bl	80007c0 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f003 0320 	and.w	r3, r3, #32
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000cde:	210f      	movs	r1, #15
 8000ce0:	4812      	ldr	r0, [pc, #72]	; (8000d2c <printResetSource+0xd4>)
 8000ce2:	f7ff fd6d 	bl	80007c0 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d003      	beq.n	8000cf8 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000cf0:	210a      	movs	r1, #10
 8000cf2:	480f      	ldr	r0, [pc, #60]	; (8000d30 <printResetSource+0xd8>)
 8000cf4:	f7ff fd64 	bl	80007c0 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	da03      	bge.n	8000d08 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000d00:	2105      	movs	r1, #5
 8000d02:	480c      	ldr	r0, [pc, #48]	; (8000d34 <printResetSource+0xdc>)
 8000d04:	f7ff fd5c 	bl	80007c0 <uartTransmit>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	080081f0 	.word	0x080081f0
 8000d14:	080081f8 	.word	0x080081f8
 8000d18:	08008208 	.word	0x08008208
 8000d1c:	08008224 	.word	0x08008224
 8000d20:	0800823c 	.word	0x0800823c
 8000d24:	08008248 	.word	0x08008248
 8000d28:	0800825c 	.word	0x0800825c
 8000d2c:	0800826c 	.word	0x0800826c
 8000d30:	0800827c 	.word	0x0800827c
 8000d34:	08008288 	.word	0x08008288

08000d38 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d44:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d013      	beq.n	8000d78 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d50:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d54:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d58:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d00b      	beq.n	8000d78 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d60:	e000      	b.n	8000d64 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d62:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0f9      	beq.n	8000d62 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d6e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d78:	687b      	ldr	r3, [r7, #4]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <ADC_Gaspedal>:
//----------------------------------------------------------------------

// Gaspedal einlesen
//----------------------------------------------------------------------
uint16_t ADC_Gaspedal(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC von Gaspedal einlesen\n");
 8000d8e:	4820      	ldr	r0, [pc, #128]	; (8000e10 <ADC_Gaspedal+0x88>)
 8000d90:	f000 fafe 	bl	8001390 <ITM_SendString>
#endif

	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_6;
 8000da4:	2306      	movs	r3, #6
 8000da6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000da8:	2301      	movs	r3, #1
 8000daa:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000dac:	2301      	movs	r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	4619      	mov	r1, r3
 8000db4:	4817      	ldr	r0, [pc, #92]	; (8000e14 <ADC_Gaspedal+0x8c>)
 8000db6:	f002 fc01 	bl	80035bc <HAL_ADC_ConfigChannel>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <ADC_Gaspedal+0x3c>
	{
		Error_Handler();
 8000dc0:	f001 ff8a 	bl	8002cd8 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);
 8000dc4:	4813      	ldr	r0, [pc, #76]	; (8000e14 <ADC_Gaspedal+0x8c>)
 8000dc6:	f002 fa5f 	bl	8003288 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000dca:	2164      	movs	r1, #100	; 0x64
 8000dcc:	4811      	ldr	r0, [pc, #68]	; (8000e14 <ADC_Gaspedal+0x8c>)
 8000dce:	f002 fb5d 	bl	800348c <HAL_ADC_PollForConversion>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d105      	bne.n	8000de4 <ADC_Gaspedal+0x5c>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000dd8:	480e      	ldr	r0, [pc, #56]	; (8000e14 <ADC_Gaspedal+0x8c>)
 8000dda:	f002 fbe2 	bl	80035a2 <HAL_ADC_GetValue>
 8000dde:	4603      	mov	r3, r0
 8000de0:	82fb      	strh	r3, [r7, #22]
 8000de2:	e002      	b.n	8000dea <ADC_Gaspedal+0x62>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000de4:	2004      	movs	r0, #4
 8000de6:	f000 fa31 	bl	800124c <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000dea:	480a      	ldr	r0, [pc, #40]	; (8000e14 <ADC_Gaspedal+0x8c>)
 8000dec:	f002 fb1a 	bl	8003424 <HAL_ADC_Stop>

#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC-Wert Gaspedal:\t");
 8000df0:	4809      	ldr	r0, [pc, #36]	; (8000e18 <ADC_Gaspedal+0x90>)
 8000df2:	f000 facd 	bl	8001390 <ITM_SendString>
	ITM_SendNumber(ADC_Data);
 8000df6:	8afb      	ldrh	r3, [r7, #22]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 fad3 	bl	80013a4 <ITM_SendNumber>
	ITM_SendChar('\n');
 8000dfe:	200a      	movs	r0, #10
 8000e00:	f7ff ff9a 	bl	8000d38 <ITM_SendChar>
#endif

	//ADC Wert zurueck geben
	return ADC_Data;
 8000e04:	8afb      	ldrh	r3, [r7, #22]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	08008290 	.word	0x08008290
 8000e14:	20000058 	.word	0x20000058
 8000e18:	080082ac 	.word	0x080082ac

08000e1c <ADC_Bremsdruck>:
//----------------------------------------------------------------------

// Bremsdruck einlesen
//----------------------------------------------------------------------
uint16_t ADC_Bremsdruck(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC von Bremsdruck einlesen\n");
 8000e22:	4820      	ldr	r0, [pc, #128]	; (8000ea4 <ADC_Bremsdruck+0x88>)
 8000e24:	f000 fab4 	bl	8001390 <ITM_SendString>
#endif

	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_14;
 8000e38:	230e      	movs	r3, #14
 8000e3a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000e40:	2301      	movs	r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	4619      	mov	r1, r3
 8000e48:	4817      	ldr	r0, [pc, #92]	; (8000ea8 <ADC_Bremsdruck+0x8c>)
 8000e4a:	f002 fbb7 	bl	80035bc <HAL_ADC_ConfigChannel>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <ADC_Bremsdruck+0x3c>
	{
		Error_Handler();
 8000e54:	f001 ff40 	bl	8002cd8 <Error_Handler>
	}
	
	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000e58:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <ADC_Bremsdruck+0x8c>)
 8000e5a:	f002 fa15 	bl	8003288 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000e5e:	2164      	movs	r1, #100	; 0x64
 8000e60:	4811      	ldr	r0, [pc, #68]	; (8000ea8 <ADC_Bremsdruck+0x8c>)
 8000e62:	f002 fb13 	bl	800348c <HAL_ADC_PollForConversion>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d105      	bne.n	8000e78 <ADC_Bremsdruck+0x5c>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000e6c:	480e      	ldr	r0, [pc, #56]	; (8000ea8 <ADC_Bremsdruck+0x8c>)
 8000e6e:	f002 fb98 	bl	80035a2 <HAL_ADC_GetValue>
 8000e72:	4603      	mov	r3, r0
 8000e74:	82fb      	strh	r3, [r7, #22]
 8000e76:	e002      	b.n	8000e7e <ADC_Bremsdruck+0x62>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000e78:	2004      	movs	r0, #4
 8000e7a:	f000 f9e7 	bl	800124c <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000e7e:	480a      	ldr	r0, [pc, #40]	; (8000ea8 <ADC_Bremsdruck+0x8c>)
 8000e80:	f002 fad0 	bl	8003424 <HAL_ADC_Stop>

#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC-Wert Bremsdruck:\t");
 8000e84:	4809      	ldr	r0, [pc, #36]	; (8000eac <ADC_Bremsdruck+0x90>)
 8000e86:	f000 fa83 	bl	8001390 <ITM_SendString>
	ITM_SendNumber(ADC_Data);
 8000e8a:	8afb      	ldrh	r3, [r7, #22]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 fa89 	bl	80013a4 <ITM_SendNumber>
	ITM_SendChar('\n');
 8000e92:	200a      	movs	r0, #10
 8000e94:	f7ff ff50 	bl	8000d38 <ITM_SendChar>
#endif

	//ADC Wert zurueck geben
	return ADC_Data;
 8000e98:	8afb      	ldrh	r3, [r7, #22]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	080082c0 	.word	0x080082c0
 8000ea8:	20000058 	.word	0x20000058
 8000eac:	080082e0 	.word	0x080082e0

08000eb0 <ADC_KL15>:
//----------------------------------------------------------------------

// Spannung KL15 einlesen
//----------------------------------------------------------------------
uint16_t ADC_KL15 (void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_3;										// ADC Kanal einstellen
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000eca:	2301      	movs	r3, #1
 8000ecc:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8000ece:	2301      	movs	r3, #1
 8000ed0:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4811      	ldr	r0, [pc, #68]	; (8000f1c <ADC_KL15+0x6c>)
 8000ed8:	f002 fb70 	bl	80035bc <HAL_ADC_ConfigChannel>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <ADC_KL15+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000ee2:	f001 fef9 	bl	8002cd8 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000ee6:	480d      	ldr	r0, [pc, #52]	; (8000f1c <ADC_KL15+0x6c>)
 8000ee8:	f002 f9ce 	bl	8003288 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000eec:	2164      	movs	r1, #100	; 0x64
 8000eee:	480b      	ldr	r0, [pc, #44]	; (8000f1c <ADC_KL15+0x6c>)
 8000ef0:	f002 facc 	bl	800348c <HAL_ADC_PollForConversion>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d105      	bne.n	8000f06 <ADC_KL15+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000efa:	4808      	ldr	r0, [pc, #32]	; (8000f1c <ADC_KL15+0x6c>)
 8000efc:	f002 fb51 	bl	80035a2 <HAL_ADC_GetValue>
 8000f00:	4603      	mov	r3, r0
 8000f02:	82fb      	strh	r3, [r7, #22]
 8000f04:	e002      	b.n	8000f0c <ADC_KL15+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000f06:	2004      	movs	r0, #4
 8000f08:	f000 f9a0 	bl	800124c <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000f0c:	4803      	ldr	r0, [pc, #12]	; (8000f1c <ADC_KL15+0x6c>)
 8000f0e:	f002 fa89 	bl	8003424 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000f12:	8afb      	ldrh	r3, [r7, #22]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000058 	.word	0x20000058

08000f20 <ADC_Kuhlwassertemperatur>:
//----------------------------------------------------------------------

// Kuehlwassertemperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_Kuhlwassertemperatur (void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_4;										// ADC Kanal einstellen
 8000f36:	2304      	movs	r3, #4
 8000f38:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8000f3e:	2301      	movs	r3, #1
 8000f40:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	4619      	mov	r1, r3
 8000f46:	4811      	ldr	r0, [pc, #68]	; (8000f8c <ADC_Kuhlwassertemperatur+0x6c>)
 8000f48:	f002 fb38 	bl	80035bc <HAL_ADC_ConfigChannel>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <ADC_Kuhlwassertemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000f52:	f001 fec1 	bl	8002cd8 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000f56:	480d      	ldr	r0, [pc, #52]	; (8000f8c <ADC_Kuhlwassertemperatur+0x6c>)
 8000f58:	f002 f996 	bl	8003288 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000f5c:	2164      	movs	r1, #100	; 0x64
 8000f5e:	480b      	ldr	r0, [pc, #44]	; (8000f8c <ADC_Kuhlwassertemperatur+0x6c>)
 8000f60:	f002 fa94 	bl	800348c <HAL_ADC_PollForConversion>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d105      	bne.n	8000f76 <ADC_Kuhlwassertemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000f6a:	4808      	ldr	r0, [pc, #32]	; (8000f8c <ADC_Kuhlwassertemperatur+0x6c>)
 8000f6c:	f002 fb19 	bl	80035a2 <HAL_ADC_GetValue>
 8000f70:	4603      	mov	r3, r0
 8000f72:	82fb      	strh	r3, [r7, #22]
 8000f74:	e002      	b.n	8000f7c <ADC_Kuhlwassertemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000f76:	2004      	movs	r0, #4
 8000f78:	f000 f968 	bl	800124c <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <ADC_Kuhlwassertemperatur+0x6c>)
 8000f7e:	f002 fa51 	bl	8003424 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000f82:	8afb      	ldrh	r3, [r7, #22]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000058 	.word	0x20000058

08000f90 <ADC_Klimaflap>:
//----------------------------------------------------------------------

// Klimaflapstellung einlesen (Position ueber Poti)
//----------------------------------------------------------------------
uint16_t ADC_Klimaflap (void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_5;										// ADC Kanal einstellen
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000faa:	2301      	movs	r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8000fae:	2301      	movs	r3, #1
 8000fb0:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4811      	ldr	r0, [pc, #68]	; (8000ffc <ADC_Klimaflap+0x6c>)
 8000fb8:	f002 fb00 	bl	80035bc <HAL_ADC_ConfigChannel>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <ADC_Klimaflap+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000fc2:	f001 fe89 	bl	8002cd8 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000fc6:	480d      	ldr	r0, [pc, #52]	; (8000ffc <ADC_Klimaflap+0x6c>)
 8000fc8:	f002 f95e 	bl	8003288 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000fcc:	2164      	movs	r1, #100	; 0x64
 8000fce:	480b      	ldr	r0, [pc, #44]	; (8000ffc <ADC_Klimaflap+0x6c>)
 8000fd0:	f002 fa5c 	bl	800348c <HAL_ADC_PollForConversion>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d105      	bne.n	8000fe6 <ADC_Klimaflap+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000fda:	4808      	ldr	r0, [pc, #32]	; (8000ffc <ADC_Klimaflap+0x6c>)
 8000fdc:	f002 fae1 	bl	80035a2 <HAL_ADC_GetValue>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	82fb      	strh	r3, [r7, #22]
 8000fe4:	e002      	b.n	8000fec <ADC_Klimaflap+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000fe6:	2004      	movs	r0, #4
 8000fe8:	f000 f930 	bl	800124c <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000fec:	4803      	ldr	r0, [pc, #12]	; (8000ffc <ADC_Klimaflap+0x6c>)
 8000fee:	f002 fa19 	bl	8003424 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000ff2:	8afb      	ldrh	r3, [r7, #22]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000058 	.word	0x20000058

08001000 <ADC_PCBTemperatur>:
//----------------------------------------------------------------------

// PCB Temperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_PCBTemperatur (void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_7;										// ADC Kanal einstellen
 8001016:	2307      	movs	r3, #7
 8001018:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 800101a:	2301      	movs	r3, #1
 800101c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 800101e:	2301      	movs	r3, #1
 8001020:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	4619      	mov	r1, r3
 8001026:	4811      	ldr	r0, [pc, #68]	; (800106c <ADC_PCBTemperatur+0x6c>)
 8001028:	f002 fac8 	bl	80035bc <HAL_ADC_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <ADC_PCBTemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8001032:	f001 fe51 	bl	8002cd8 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8001036:	480d      	ldr	r0, [pc, #52]	; (800106c <ADC_PCBTemperatur+0x6c>)
 8001038:	f002 f926 	bl	8003288 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 800103c:	2164      	movs	r1, #100	; 0x64
 800103e:	480b      	ldr	r0, [pc, #44]	; (800106c <ADC_PCBTemperatur+0x6c>)
 8001040:	f002 fa24 	bl	800348c <HAL_ADC_PollForConversion>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d105      	bne.n	8001056 <ADC_PCBTemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 800104a:	4808      	ldr	r0, [pc, #32]	; (800106c <ADC_PCBTemperatur+0x6c>)
 800104c:	f002 faa9 	bl	80035a2 <HAL_ADC_GetValue>
 8001050:	4603      	mov	r3, r0
 8001052:	82fb      	strh	r3, [r7, #22]
 8001054:	e002      	b.n	800105c <ADC_PCBTemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8001056:	2004      	movs	r0, #4
 8001058:	f000 f8f8 	bl	800124c <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 800105c:	4803      	ldr	r0, [pc, #12]	; (800106c <ADC_PCBTemperatur+0x6c>)
 800105e:	f002 f9e1 	bl	8003424 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8001062:	8afb      	ldrh	r3, [r7, #22]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000058 	.word	0x20000058

08001070 <ADC_Return>:
//----------------------------------------------------------------------

// Navibedienelement Return einlesen (2 Schalter mit unterschiedlichen Widerstaenden)
//----------------------------------------------------------------------
uint16_t ADC_Return (void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_8;										// ADC Kanal einstellen
 8001086:	2308      	movs	r3, #8
 8001088:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 800108a:	2301      	movs	r3, #1
 800108c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 800108e:	2301      	movs	r3, #1
 8001090:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	4619      	mov	r1, r3
 8001096:	4811      	ldr	r0, [pc, #68]	; (80010dc <ADC_Return+0x6c>)
 8001098:	f002 fa90 	bl	80035bc <HAL_ADC_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <ADC_Return+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 80010a2:	f001 fe19 	bl	8002cd8 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 80010a6:	480d      	ldr	r0, [pc, #52]	; (80010dc <ADC_Return+0x6c>)
 80010a8:	f002 f8ee 	bl	8003288 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 80010ac:	2164      	movs	r1, #100	; 0x64
 80010ae:	480b      	ldr	r0, [pc, #44]	; (80010dc <ADC_Return+0x6c>)
 80010b0:	f002 f9ec 	bl	800348c <HAL_ADC_PollForConversion>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d105      	bne.n	80010c6 <ADC_Return+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 80010ba:	4808      	ldr	r0, [pc, #32]	; (80010dc <ADC_Return+0x6c>)
 80010bc:	f002 fa71 	bl	80035a2 <HAL_ADC_GetValue>
 80010c0:	4603      	mov	r3, r0
 80010c2:	82fb      	strh	r3, [r7, #22]
 80010c4:	e002      	b.n	80010cc <ADC_Return+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 80010c6:	2004      	movs	r0, #4
 80010c8:	f000 f8c0 	bl	800124c <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 80010cc:	4803      	ldr	r0, [pc, #12]	; (80010dc <ADC_Return+0x6c>)
 80010ce:	f002 f9a9 	bl	8003424 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 80010d2:	8afb      	ldrh	r3, [r7, #22]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000058 	.word	0x20000058

080010e0 <ADC_Info>:
//----------------------------------------------------------------------

// Navibedienelement Info einlesen (2 Schalter mit unterschiedlichen Widerstaenden)
//----------------------------------------------------------------------
uint16_t ADC_Info (void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_9;										// ADC Kanal einstellen
 80010f6:	2309      	movs	r3, #9
 80010f8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 80010fa:	2301      	movs	r3, #1
 80010fc:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 80010fe:	2301      	movs	r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	4619      	mov	r1, r3
 8001106:	4811      	ldr	r0, [pc, #68]	; (800114c <ADC_Info+0x6c>)
 8001108:	f002 fa58 	bl	80035bc <HAL_ADC_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <ADC_Info+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8001112:	f001 fde1 	bl	8002cd8 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8001116:	480d      	ldr	r0, [pc, #52]	; (800114c <ADC_Info+0x6c>)
 8001118:	f002 f8b6 	bl	8003288 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 800111c:	2164      	movs	r1, #100	; 0x64
 800111e:	480b      	ldr	r0, [pc, #44]	; (800114c <ADC_Info+0x6c>)
 8001120:	f002 f9b4 	bl	800348c <HAL_ADC_PollForConversion>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d105      	bne.n	8001136 <ADC_Info+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 800112a:	4808      	ldr	r0, [pc, #32]	; (800114c <ADC_Info+0x6c>)
 800112c:	f002 fa39 	bl	80035a2 <HAL_ADC_GetValue>
 8001130:	4603      	mov	r3, r0
 8001132:	82fb      	strh	r3, [r7, #22]
 8001134:	e002      	b.n	800113c <ADC_Info+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8001136:	2004      	movs	r0, #4
 8001138:	f000 f888 	bl	800124c <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 800113c:	4803      	ldr	r0, [pc, #12]	; (800114c <ADC_Info+0x6c>)
 800113e:	f002 f971 	bl	8003424 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8001142:	8afb      	ldrh	r3, [r7, #22]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000058 	.word	0x20000058

08001150 <ADC_Bremsdrucktemperatur>:
//----------------------------------------------------------------------

// Bremsdrucktemperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_Bremsdrucktemperatur (void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_15;										// ADC Kanal einstellen
 8001166:	230f      	movs	r3, #15
 8001168:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 800116a:	2301      	movs	r3, #1
 800116c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 800116e:	2301      	movs	r3, #1
 8001170:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	4619      	mov	r1, r3
 8001176:	4811      	ldr	r0, [pc, #68]	; (80011bc <ADC_Bremsdrucktemperatur+0x6c>)
 8001178:	f002 fa20 	bl	80035bc <HAL_ADC_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <ADC_Bremsdrucktemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8001182:	f001 fda9 	bl	8002cd8 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8001186:	480d      	ldr	r0, [pc, #52]	; (80011bc <ADC_Bremsdrucktemperatur+0x6c>)
 8001188:	f002 f87e 	bl	8003288 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 800118c:	2164      	movs	r1, #100	; 0x64
 800118e:	480b      	ldr	r0, [pc, #44]	; (80011bc <ADC_Bremsdrucktemperatur+0x6c>)
 8001190:	f002 f97c 	bl	800348c <HAL_ADC_PollForConversion>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d105      	bne.n	80011a6 <ADC_Bremsdrucktemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 800119a:	4808      	ldr	r0, [pc, #32]	; (80011bc <ADC_Bremsdrucktemperatur+0x6c>)
 800119c:	f002 fa01 	bl	80035a2 <HAL_ADC_GetValue>
 80011a0:	4603      	mov	r3, r0
 80011a2:	82fb      	strh	r3, [r7, #22]
 80011a4:	e002      	b.n	80011ac <ADC_Bremsdrucktemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 80011a6:	2004      	movs	r0, #4
 80011a8:	f000 f850 	bl	800124c <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 80011ac:	4803      	ldr	r0, [pc, #12]	; (80011bc <ADC_Bremsdrucktemperatur+0x6c>)
 80011ae:	f002 f939 	bl	8003424 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 80011b2:	8afb      	ldrh	r3, [r7, #22]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000058 	.word	0x20000058

080011c0 <ADC_STMTemperatur>:
//----------------------------------------------------------------------

// STM32 Temperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_STMTemperatur (void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;								// ADC Kanal einstellen
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <ADC_STMTemperatur+0x6c>)
 80011d8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 80011da:	2301      	movs	r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 80011de:	2301      	movs	r3, #1
 80011e0:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	4619      	mov	r1, r3
 80011e6:	4812      	ldr	r0, [pc, #72]	; (8001230 <ADC_STMTemperatur+0x70>)
 80011e8:	f002 f9e8 	bl	80035bc <HAL_ADC_ConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <ADC_STMTemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 80011f2:	f001 fd71 	bl	8002cd8 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 80011f6:	480e      	ldr	r0, [pc, #56]	; (8001230 <ADC_STMTemperatur+0x70>)
 80011f8:	f002 f846 	bl	8003288 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 80011fc:	2164      	movs	r1, #100	; 0x64
 80011fe:	480c      	ldr	r0, [pc, #48]	; (8001230 <ADC_STMTemperatur+0x70>)
 8001200:	f002 f944 	bl	800348c <HAL_ADC_PollForConversion>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d105      	bne.n	8001216 <ADC_STMTemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 800120a:	4809      	ldr	r0, [pc, #36]	; (8001230 <ADC_STMTemperatur+0x70>)
 800120c:	f002 f9c9 	bl	80035a2 <HAL_ADC_GetValue>
 8001210:	4603      	mov	r3, r0
 8001212:	82fb      	strh	r3, [r7, #22]
 8001214:	e002      	b.n	800121c <ADC_STMTemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8001216:	2004      	movs	r0, #4
 8001218:	f000 f818 	bl	800124c <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 800121c:	4804      	ldr	r0, [pc, #16]	; (8001230 <ADC_STMTemperatur+0x70>)
 800121e:	f002 f901 	bl	8003424 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8001222:	8afb      	ldrh	r3, [r7, #22]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	10000012 	.word	0x10000012
 8001230:	20000058 	.word	0x20000058

08001234 <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <software_error>:
//----------------------------------------------------------------------

// Diagnose Funktion falls ein Fehler auftritt
//----------------------------------------------------------------------
void software_error(uint8_t errorcode)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001256:	b672      	cpsid	i
}
 8001258:	bf00      	nop
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 800125a:	4a1e      	ldr	r2, [pc, #120]	; (80012d4 <software_error+0x88>)
 800125c:	7853      	ldrb	r3, [r2, #1]
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <software_error+0x88>)
 8001266:	785b      	ldrb	r3, [r3, #1]
 8001268:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800126c:	b2db      	uxtb	r3, r3
 800126e:	461a      	mov	r2, r3
 8001270:	2104      	movs	r1, #4
 8001272:	4819      	ldr	r0, [pc, #100]	; (80012d8 <software_error+0x8c>)
 8001274:	f003 fdd8 	bl	8004e28 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8001278:	4a16      	ldr	r2, [pc, #88]	; (80012d4 <software_error+0x88>)
 800127a:	7853      	ldrb	r3, [r2, #1]
 800127c:	f36f 1304 	bfc	r3, #4, #1
 8001280:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// OK LED ausschalten
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <software_error+0x88>)
 8001284:	785b      	ldrb	r3, [r3, #1]
 8001286:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800128a:	b2db      	uxtb	r3, r3
 800128c:	461a      	mov	r2, r3
 800128e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001292:	4811      	ldr	r0, [pc, #68]	; (80012d8 <software_error+0x8c>)
 8001294:	f003 fdc8 	bl	8004e28 <HAL_GPIO_WritePin>

	// Schalte SDC_Motor aus
	system_out.MotorSDC = 0;												// Zuruecksetzen Variable
 8001298:	4a10      	ldr	r2, [pc, #64]	; (80012dc <software_error+0x90>)
 800129a:	7813      	ldrb	r3, [r2, #0]
 800129c:	f36f 1345 	bfc	r3, #5, #1
 80012a0:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, system_out.MotorSDC);// SDC oeffnen
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <software_error+0x90>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	461a      	mov	r2, r3
 80012ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012b2:	480b      	ldr	r0, [pc, #44]	; (80012e0 <software_error+0x94>)
 80012b4:	f003 fdb8 	bl	8004e28 <HAL_GPIO_WritePin>
#ifdef DEBUG																// Serielle Kommunukation nur waehrend Debugging
#define SOFTERRORMESSAGE			"\nSoftware Error Handler ausgeloest\n"	// Ausgabe das Fehler aufgetreten ist
	uartTransmit(SOFTERRORMESSAGE,sizeof(SOFTERRORMESSAGE));
 80012b8:	2124      	movs	r1, #36	; 0x24
 80012ba:	480a      	ldr	r0, [pc, #40]	; (80012e4 <software_error+0x98>)
 80012bc:	f7ff fa80 	bl	80007c0 <uartTransmit>

#define ERRORCODE					"Error Code:\t"							// Ausgabe des Fehlers anhand von Fehlercode
	uartTransmit(ERRORCODE,sizeof(ERRORCODE));
 80012c0:	210d      	movs	r1, #13
 80012c2:	4809      	ldr	r0, [pc, #36]	; (80012e8 <software_error+0x9c>)
 80012c4:	f7ff fa7c 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(errorcode, 10);										// Fehlercode ausgeben
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	210a      	movs	r1, #10
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fa8b 	bl	80007e8 <uartTransmitNumber>
#endif
	while (1);																// Endlosschleife
 80012d2:	e7fe      	b.n	80012d2 <software_error+0x86>
 80012d4:	20000050 	.word	0x20000050
 80012d8:	40020400 	.word	0x40020400
 80012dc:	20000048 	.word	0x20000048
 80012e0:	40021000 	.word	0x40021000
 80012e4:	080082f8 	.word	0x080082f8
 80012e8:	0800831c 	.word	0x0800831c

080012ec <software_error_debug>:
//----------------------------------------------------------------------

// Diagnose Funktion falls ein Fehler auftritt (Nur Debugzwecke)
//----------------------------------------------------------------------
void software_error_debug(uint8_t errorcode)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 80012f6:	4a20      	ldr	r2, [pc, #128]	; (8001378 <software_error_debug+0x8c>)
 80012f8:	7853      	ldrb	r3, [r2, #1]
 80012fa:	f043 0308 	orr.w	r3, r3, #8
 80012fe:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8001300:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <software_error_debug+0x8c>)
 8001302:	785b      	ldrb	r3, [r3, #1]
 8001304:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001308:	b2db      	uxtb	r3, r3
 800130a:	461a      	mov	r2, r3
 800130c:	2104      	movs	r1, #4
 800130e:	481b      	ldr	r0, [pc, #108]	; (800137c <software_error_debug+0x90>)
 8001310:	f003 fd8a 	bl	8004e28 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8001314:	4a18      	ldr	r2, [pc, #96]	; (8001378 <software_error_debug+0x8c>)
 8001316:	7853      	ldrb	r3, [r2, #1]
 8001318:	f36f 1304 	bfc	r3, #4, #1
 800131c:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// OK LED ausschalten
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <software_error_debug+0x8c>)
 8001320:	785b      	ldrb	r3, [r3, #1]
 8001322:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001326:	b2db      	uxtb	r3, r3
 8001328:	461a      	mov	r2, r3
 800132a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800132e:	4813      	ldr	r0, [pc, #76]	; (800137c <software_error_debug+0x90>)
 8001330:	f003 fd7a 	bl	8004e28 <HAL_GPIO_WritePin>

	// Schalte SDC_Motor aus
	system_out.MotorSDC = 0;												// Zuruecksetzen Variable
 8001334:	4a12      	ldr	r2, [pc, #72]	; (8001380 <software_error_debug+0x94>)
 8001336:	7813      	ldrb	r3, [r2, #0]
 8001338:	f36f 1345 	bfc	r3, #5, #1
 800133c:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, system_out.MotorSDC);// SDC oeffnen
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <software_error_debug+0x94>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001346:	b2db      	uxtb	r3, r3
 8001348:	461a      	mov	r2, r3
 800134a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800134e:	480d      	ldr	r0, [pc, #52]	; (8001384 <software_error_debug+0x98>)
 8001350:	f003 fd6a 	bl	8004e28 <HAL_GPIO_WritePin>
#ifdef DEBUG																// Serielle Kommunukation nur waehrend Debugging
#define SOFTERRORMESSAGE			"\nSoftware Error Handler ausgeloest\n"	// Ausgabe das Fehler aufgetreten ist
	uartTransmit(SOFTERRORMESSAGE,sizeof(SOFTERRORMESSAGE));
 8001354:	2124      	movs	r1, #36	; 0x24
 8001356:	480c      	ldr	r0, [pc, #48]	; (8001388 <software_error_debug+0x9c>)
 8001358:	f7ff fa32 	bl	80007c0 <uartTransmit>

#define ERRORCODE					"Error Code:\t"							// Ausgabe des Fehlers anhand von Fehlercode
	uartTransmit(ERRORCODE,sizeof(ERRORCODE));
 800135c:	210d      	movs	r1, #13
 800135e:	480b      	ldr	r0, [pc, #44]	; (800138c <software_error_debug+0xa0>)
 8001360:	f7ff fa2e 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(errorcode, 10);										// Fehlercode ausgeben
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	210a      	movs	r1, #10
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fa3d 	bl	80007e8 <uartTransmitNumber>
#endif
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000050 	.word	0x20000050
 800137c:	40020400 	.word	0x40020400
 8001380:	20000048 	.word	0x20000048
 8001384:	40021000 	.word	0x40021000
 8001388:	080082f8 	.word	0x080082f8
 800138c:	0800831c 	.word	0x0800831c

08001390 <ITM_SendString>:
// Nachricht SWO ITM Data Console
// Core Clock := Maximalfrequenz ; HCLK fuer Serial Wire Viewer
// Im String #GRN# oder #RED# oder #ORG# erscheint die Nachricht in einer Farbe
//----------------------------------------------------------------------
void ITM_SendString(char *text)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	{
		ITM_SendChar(*text);												// Sende ITM Zeichen
		text++;																// Pointer hochzaehlen
	}
#endif
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <ITM_SendNumber>:
//----------------------------------------------------------------------

// Debug Nummer ueber SWO senden
//----------------------------------------------------------------------
void ITM_SendNumber(long number)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	for(; i > 0; i--)
	{
		ITM_SendChar('0' + buf[i-1]);
	}
#endif
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <ITM_SendChar>:
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013c4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d013      	beq.n	80013f8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80013d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013d4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80013d8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00b      	beq.n	80013f8 <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 80013e0:	e000      	b.n	80013e4 <ITM_SendChar+0x2c>
      __NOP();
 80013e2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80013e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f9      	beq.n	80013e2 <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80013ee:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	701a      	strb	r2, [r3, #0]
  return (ch);
 80013f8:	687b      	ldr	r3, [r7, #4]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <readall_inputs>:
//----------------------------------------------------------------------

// Alle Eingaenge einlesen und speichern
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
#ifdef DEBUG_INPUT
	ITM_SendString("Lese Inputs ein\n");
 800140c:	48cf      	ldr	r0, [pc, #828]	; (800174c <readall_inputs+0x344>)
 800140e:	f7ff ffbf 	bl	8001390 <ITM_SendString>
#endif

	// Systemeingaenge einlesen
	system_in.Kickdown = HAL_GPIO_ReadPin(KICKDOWN_GPIO_Port, KICKDOWN_Pin);					// Eingang Gaspedal getreten
 8001412:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001416:	48ce      	ldr	r0, [pc, #824]	; (8001750 <readall_inputs+0x348>)
 8001418:	f003 fcee 	bl	8004df8 <HAL_GPIO_ReadPin>
 800141c:	4603      	mov	r3, r0
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	b2d9      	uxtb	r1, r3
 8001424:	4acb      	ldr	r2, [pc, #812]	; (8001754 <readall_inputs+0x34c>)
 8001426:	7813      	ldrb	r3, [r2, #0]
 8001428:	f361 0300 	bfi	r3, r1, #0, #1
 800142c:	7013      	strb	r3, [r2, #0]
	system_in.Leerlauf = HAL_GPIO_ReadPin(LEERLAUF_GPIO_Port, LEERLAUF_Pin);					// Eingang Gaspedal nicht getreten
 800142e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001432:	48c7      	ldr	r0, [pc, #796]	; (8001750 <readall_inputs+0x348>)
 8001434:	f003 fce0 	bl	8004df8 <HAL_GPIO_ReadPin>
 8001438:	4603      	mov	r3, r0
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	b2d9      	uxtb	r1, r3
 8001440:	4ac4      	ldr	r2, [pc, #784]	; (8001754 <readall_inputs+0x34c>)
 8001442:	7813      	ldrb	r3, [r2, #0]
 8001444:	f361 0341 	bfi	r3, r1, #1, #1
 8001448:	7013      	strb	r3, [r2, #0]
	system_in.BremseNO = HAL_GPIO_ReadPin(BREMSE_NO_GPIO_Port, BREMSE_NO_Pin);					// Eingang Bremse nicht getreten
 800144a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800144e:	48c0      	ldr	r0, [pc, #768]	; (8001750 <readall_inputs+0x348>)
 8001450:	f003 fcd2 	bl	8004df8 <HAL_GPIO_ReadPin>
 8001454:	4603      	mov	r3, r0
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	b2d9      	uxtb	r1, r3
 800145c:	4abd      	ldr	r2, [pc, #756]	; (8001754 <readall_inputs+0x34c>)
 800145e:	7813      	ldrb	r3, [r2, #0]
 8001460:	f361 0382 	bfi	r3, r1, #2, #1
 8001464:	7013      	strb	r3, [r2, #0]
	system_in.BremseNC = HAL_GPIO_ReadPin(BREMSE_NC_GPIO_Port, BREMSE_NC_Pin);					// Eingang Bremse getreten
 8001466:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800146a:	48b9      	ldr	r0, [pc, #740]	; (8001750 <readall_inputs+0x348>)
 800146c:	f003 fcc4 	bl	8004df8 <HAL_GPIO_ReadPin>
 8001470:	4603      	mov	r3, r0
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	b2d9      	uxtb	r1, r3
 8001478:	4ab6      	ldr	r2, [pc, #728]	; (8001754 <readall_inputs+0x34c>)
 800147a:	7813      	ldrb	r3, [r2, #0]
 800147c:	f361 03c3 	bfi	r3, r1, #3, #1
 8001480:	7013      	strb	r3, [r2, #0]
	system_in.Kupplung = HAL_GPIO_ReadPin(KUPPLUNG_NO_GPIO_Port, KUPPLUNG_NO_Pin);				// Eingang Kupplung nicht getreten
 8001482:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001486:	48b2      	ldr	r0, [pc, #712]	; (8001750 <readall_inputs+0x348>)
 8001488:	f003 fcb6 	bl	8004df8 <HAL_GPIO_ReadPin>
 800148c:	4603      	mov	r3, r0
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	b2d9      	uxtb	r1, r3
 8001494:	4aaf      	ldr	r2, [pc, #700]	; (8001754 <readall_inputs+0x34c>)
 8001496:	7813      	ldrb	r3, [r2, #0]
 8001498:	f361 1304 	bfi	r3, r1, #4, #1
 800149c:	7013      	strb	r3, [r2, #0]
	system_in.Recuperation = HAL_GPIO_ReadPin(RECUPERATION_GPIO_Port, RECUPERATION_Pin);		// Eingang Recuperation
 800149e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014a2:	48ad      	ldr	r0, [pc, #692]	; (8001758 <readall_inputs+0x350>)
 80014a4:	f003 fca8 	bl	8004df8 <HAL_GPIO_ReadPin>
 80014a8:	4603      	mov	r3, r0
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	b2d9      	uxtb	r1, r3
 80014b0:	4aa8      	ldr	r2, [pc, #672]	; (8001754 <readall_inputs+0x34c>)
 80014b2:	7813      	ldrb	r3, [r2, #0]
 80014b4:	f361 1345 	bfi	r3, r1, #5, #1
 80014b8:	7013      	strb	r3, [r2, #0]
	system_in.ECON = HAL_GPIO_ReadPin(ECON_GPIO_Port, ECON_Pin);								// Eingang Klima
 80014ba:	2102      	movs	r1, #2
 80014bc:	48a6      	ldr	r0, [pc, #664]	; (8001758 <readall_inputs+0x350>)
 80014be:	f003 fc9b 	bl	8004df8 <HAL_GPIO_ReadPin>
 80014c2:	4603      	mov	r3, r0
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	b2d9      	uxtb	r1, r3
 80014ca:	4aa2      	ldr	r2, [pc, #648]	; (8001754 <readall_inputs+0x34c>)
 80014cc:	7813      	ldrb	r3, [r2, #0]
 80014ce:	f361 1386 	bfi	r3, r1, #6, #1
 80014d2:	7013      	strb	r3, [r2, #0]
	system_in.Anlasser = HAL_GPIO_ReadPin(ANLASSER_GPIO_Port, ANLASSER_Pin);					// Eingang Zuendschloss, Motor starten
 80014d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014d8:	48a0      	ldr	r0, [pc, #640]	; (800175c <readall_inputs+0x354>)
 80014da:	f003 fc8d 	bl	8004df8 <HAL_GPIO_ReadPin>
 80014de:	4603      	mov	r3, r0
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	b2d9      	uxtb	r1, r3
 80014e6:	4a9b      	ldr	r2, [pc, #620]	; (8001754 <readall_inputs+0x34c>)
 80014e8:	7813      	ldrb	r3, [r2, #0]
 80014ea:	f361 13c7 	bfi	r3, r1, #7, #1
 80014ee:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 80014f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f4:	4899      	ldr	r0, [pc, #612]	; (800175c <readall_inputs+0x354>)
 80014f6:	f003 fc7f 	bl	8004df8 <HAL_GPIO_ReadPin>
 80014fa:	4603      	mov	r3, r0
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	b2d9      	uxtb	r1, r3
 8001502:	4a94      	ldr	r2, [pc, #592]	; (8001754 <readall_inputs+0x34c>)
 8001504:	7853      	ldrb	r3, [r2, #1]
 8001506:	f361 0300 	bfi	r3, r1, #0, #1
 800150a:	7053      	strb	r3, [r2, #1]
	system_in.DCDC_Inst = HAL_GPIO_ReadPin(DCDC_INSTRUCTION_GPIO_Port, DCDC_INSTRUCTION_Pin);	// DCDC Wandler funktioniert einwandfrei
 800150c:	2101      	movs	r1, #1
 800150e:	4894      	ldr	r0, [pc, #592]	; (8001760 <readall_inputs+0x358>)
 8001510:	f003 fc72 	bl	8004df8 <HAL_GPIO_ReadPin>
 8001514:	4603      	mov	r3, r0
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	b2d9      	uxtb	r1, r3
 800151c:	4a8d      	ldr	r2, [pc, #564]	; (8001754 <readall_inputs+0x34c>)
 800151e:	7853      	ldrb	r3, [r2, #1]
 8001520:	f361 0341 	bfi	r3, r1, #1, #1
 8001524:	7053      	strb	r3, [r2, #1]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8001526:	2101      	movs	r1, #1
 8001528:	488b      	ldr	r0, [pc, #556]	; (8001758 <readall_inputs+0x350>)
 800152a:	f003 fc65 	bl	8004df8 <HAL_GPIO_ReadPin>
 800152e:	4603      	mov	r3, r0
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	b2d9      	uxtb	r1, r3
 8001536:	4a87      	ldr	r2, [pc, #540]	; (8001754 <readall_inputs+0x34c>)
 8001538:	7853      	ldrb	r3, [r2, #1]
 800153a:	f361 0382 	bfi	r3, r1, #2, #1
 800153e:	7053      	strb	r3, [r2, #1]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8001540:	2140      	movs	r1, #64	; 0x40
 8001542:	4883      	ldr	r0, [pc, #524]	; (8001750 <readall_inputs+0x348>)
 8001544:	f003 fc58 	bl	8004df8 <HAL_GPIO_ReadPin>
 8001548:	4603      	mov	r3, r0
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	b2d9      	uxtb	r1, r3
 8001550:	4a80      	ldr	r2, [pc, #512]	; (8001754 <readall_inputs+0x34c>)
 8001552:	7853      	ldrb	r3, [r2, #1]
 8001554:	f361 03c3 	bfi	r3, r1, #3, #1
 8001558:	7053      	strb	r3, [r2, #1]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 800155a:	2101      	movs	r1, #1
 800155c:	4881      	ldr	r0, [pc, #516]	; (8001764 <readall_inputs+0x35c>)
 800155e:	f003 fc4b 	bl	8004df8 <HAL_GPIO_ReadPin>
 8001562:	4603      	mov	r3, r0
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	b2d9      	uxtb	r1, r3
 800156a:	4a7a      	ldr	r2, [pc, #488]	; (8001754 <readall_inputs+0x34c>)
 800156c:	7853      	ldrb	r3, [r2, #1]
 800156e:	f361 1304 	bfi	r3, r1, #4, #1
 8001572:	7053      	strb	r3, [r2, #1]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8001574:	2104      	movs	r1, #4
 8001576:	487b      	ldr	r0, [pc, #492]	; (8001764 <readall_inputs+0x35c>)
 8001578:	f003 fc3e 	bl	8004df8 <HAL_GPIO_ReadPin>
 800157c:	4603      	mov	r3, r0
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	b2d9      	uxtb	r1, r3
 8001584:	4a73      	ldr	r2, [pc, #460]	; (8001754 <readall_inputs+0x34c>)
 8001586:	7853      	ldrb	r3, [r2, #1]
 8001588:	f361 1345 	bfi	r3, r1, #5, #1
 800158c:	7053      	strb	r3, [r2, #1]
//	system_in.Bremsdruck_NO = HAL_GPIO_ReadPin(Bremsdruck_NO_GPIO_Port, Bremsdruck_NO_Pin);		// Bremsdruck nicht zu hoch
//	system_in.Bremsdruck_NC = HAL_GPIO_ReadPin(Bremsdruck_NC_GPIO_Port, Bremsdruck_NC_Pin);		// Bremsdruck zu hoch

	// SDC-Eingaenge einlesen
	sdc_in.EmergencyRun = HAL_GPIO_ReadPin(EMERGENCY_RUN_GPIO_Port, EMERGENCY_RUN_Pin);			// Emergency Run, Akku
 800158e:	2102      	movs	r1, #2
 8001590:	4874      	ldr	r0, [pc, #464]	; (8001764 <readall_inputs+0x35c>)
 8001592:	f003 fc31 	bl	8004df8 <HAL_GPIO_ReadPin>
 8001596:	4603      	mov	r3, r0
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	b2d9      	uxtb	r1, r3
 800159e:	4a72      	ldr	r2, [pc, #456]	; (8001768 <readall_inputs+0x360>)
 80015a0:	7813      	ldrb	r3, [r2, #0]
 80015a2:	f361 0300 	bfi	r3, r1, #0, #1
 80015a6:	7013      	strb	r3, [r2, #0]
	sdc_in.SDC0 = HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin);						// Shutdown-Circuit, OK
 80015a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ac:	4868      	ldr	r0, [pc, #416]	; (8001750 <readall_inputs+0x348>)
 80015ae:	f003 fc23 	bl	8004df8 <HAL_GPIO_ReadPin>
 80015b2:	4603      	mov	r3, r0
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	b2d9      	uxtb	r1, r3
 80015ba:	4a6b      	ldr	r2, [pc, #428]	; (8001768 <readall_inputs+0x360>)
 80015bc:	7813      	ldrb	r3, [r2, #0]
 80015be:	f361 0341 	bfi	r3, r1, #1, #1
 80015c2:	7013      	strb	r3, [r2, #0]
	sdc_in.Akku1SDC = HAL_GPIO_ReadPin(SENSE_SDC_AKKU_GPIO_Port, SENSE_SDC_AKKU_Pin);			// Shutdown-Circuit Akku, OK
 80015c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015c8:	4861      	ldr	r0, [pc, #388]	; (8001750 <readall_inputs+0x348>)
 80015ca:	f003 fc15 	bl	8004df8 <HAL_GPIO_ReadPin>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	b2d9      	uxtb	r1, r3
 80015d6:	4a64      	ldr	r2, [pc, #400]	; (8001768 <readall_inputs+0x360>)
 80015d8:	7813      	ldrb	r3, [r2, #0]
 80015da:	f361 0382 	bfi	r3, r1, #2, #1
 80015de:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 80015e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015e4:	4861      	ldr	r0, [pc, #388]	; (800176c <readall_inputs+0x364>)
 80015e6:	f003 fc07 	bl	8004df8 <HAL_GPIO_ReadPin>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	b2d9      	uxtb	r1, r3
 80015f2:	4a5d      	ldr	r2, [pc, #372]	; (8001768 <readall_inputs+0x360>)
 80015f4:	7813      	ldrb	r3, [r2, #0]
 80015f6:	f361 03c3 	bfi	r3, r1, #3, #1
 80015fa:	7013      	strb	r3, [r2, #0]
	sdc_in.DCDC_Fault = HAL_GPIO_ReadPin(DCDC_FAULT_GPIO_Port, DCDC_FAULT_Pin);					// DCDC Wandler funktioniert nicht richtig
 80015fc:	2102      	movs	r1, #2
 80015fe:	4858      	ldr	r0, [pc, #352]	; (8001760 <readall_inputs+0x358>)
 8001600:	f003 fbfa 	bl	8004df8 <HAL_GPIO_ReadPin>
 8001604:	4603      	mov	r3, r0
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	b2d9      	uxtb	r1, r3
 800160c:	4a56      	ldr	r2, [pc, #344]	; (8001768 <readall_inputs+0x360>)
 800160e:	7813      	ldrb	r3, [r2, #0]
 8001610:	f361 1304 	bfi	r3, r1, #4, #1
 8001614:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.ASR1 = HAL_GPIO_ReadPin(ASR_IN1_GPIO_Port, ASR_IN1_Pin);							// ASR Eingang Mittelkonsole
 8001616:	2110      	movs	r1, #16
 8001618:	4851      	ldr	r0, [pc, #324]	; (8001760 <readall_inputs+0x358>)
 800161a:	f003 fbed 	bl	8004df8 <HAL_GPIO_ReadPin>
 800161e:	4603      	mov	r3, r0
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	b2d9      	uxtb	r1, r3
 8001626:	4a52      	ldr	r2, [pc, #328]	; (8001770 <readall_inputs+0x368>)
 8001628:	7813      	ldrb	r3, [r2, #0]
 800162a:	f361 0300 	bfi	r3, r1, #0, #1
 800162e:	7013      	strb	r3, [r2, #0]
	komfort_in.ASR2 = HAL_GPIO_ReadPin(ASR_IN2_GPIO_Port, ASR_IN2_Pin);							// ASR Eingang Mittelkonsole
 8001630:	2110      	movs	r1, #16
 8001632:	484a      	ldr	r0, [pc, #296]	; (800175c <readall_inputs+0x354>)
 8001634:	f003 fbe0 	bl	8004df8 <HAL_GPIO_ReadPin>
 8001638:	4603      	mov	r3, r0
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	b2d9      	uxtb	r1, r3
 8001640:	4a4b      	ldr	r2, [pc, #300]	; (8001770 <readall_inputs+0x368>)
 8001642:	7813      	ldrb	r3, [r2, #0]
 8001644:	f361 0341 	bfi	r3, r1, #1, #1
 8001648:	7013      	strb	r3, [r2, #0]
	komfort_in.ECO = HAL_GPIO_ReadPin(ECO_GPIO_Port, ECO_Pin);									// ECO Eingang Mittelkonsole
 800164a:	2108      	movs	r1, #8
 800164c:	4840      	ldr	r0, [pc, #256]	; (8001750 <readall_inputs+0x348>)
 800164e:	f003 fbd3 	bl	8004df8 <HAL_GPIO_ReadPin>
 8001652:	4603      	mov	r3, r0
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	b2d9      	uxtb	r1, r3
 800165a:	4a45      	ldr	r2, [pc, #276]	; (8001770 <readall_inputs+0x368>)
 800165c:	7813      	ldrb	r3, [r2, #0]
 800165e:	f361 0382 	bfi	r3, r1, #2, #1
 8001662:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Rst_In = HAL_GPIO_ReadPin(BC_RESET_IN_GPIO_Port, BC_RESET_IN_Pin);			// Boardcomputer Reset Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8001664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001668:	483d      	ldr	r0, [pc, #244]	; (8001760 <readall_inputs+0x358>)
 800166a:	f003 fbc5 	bl	8004df8 <HAL_GPIO_ReadPin>
 800166e:	4603      	mov	r3, r0
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	b2d9      	uxtb	r1, r3
 8001676:	4a3e      	ldr	r2, [pc, #248]	; (8001770 <readall_inputs+0x368>)
 8001678:	7813      	ldrb	r3, [r2, #0]
 800167a:	f361 03c3 	bfi	r3, r1, #3, #1
 800167e:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Up_In = HAL_GPIO_ReadPin(BC_UP_IN_GPIO_Port, BC_UP_IN_Pin);					// Boardcomputer Rauf Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8001680:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001684:	4837      	ldr	r0, [pc, #220]	; (8001764 <readall_inputs+0x35c>)
 8001686:	f003 fbb7 	bl	8004df8 <HAL_GPIO_ReadPin>
 800168a:	4603      	mov	r3, r0
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	b2d9      	uxtb	r1, r3
 8001692:	4a37      	ldr	r2, [pc, #220]	; (8001770 <readall_inputs+0x368>)
 8001694:	7813      	ldrb	r3, [r2, #0]
 8001696:	f361 1304 	bfi	r3, r1, #4, #1
 800169a:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Down_In = HAL_GPIO_ReadPin(BC_DOWN_IN_GPIO_Port, BC_DOWN_IN_Pin);				// Boardcomputer Runter Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 800169c:	2110      	movs	r1, #16
 800169e:	482c      	ldr	r0, [pc, #176]	; (8001750 <readall_inputs+0x348>)
 80016a0:	f003 fbaa 	bl	8004df8 <HAL_GPIO_ReadPin>
 80016a4:	4603      	mov	r3, r0
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	b2d9      	uxtb	r1, r3
 80016ac:	4a30      	ldr	r2, [pc, #192]	; (8001770 <readall_inputs+0x368>)
 80016ae:	7813      	ldrb	r3, [r2, #0]
 80016b0:	f361 1345 	bfi	r3, r1, #5, #1
 80016b4:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn1 = HAL_GPIO_ReadPin(BAMOCAR_IN1_GPIO_Port, BAMOCAR_IN1_Pin);				// Eingang Bamocar 1
 80016b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ba:	4828      	ldr	r0, [pc, #160]	; (800175c <readall_inputs+0x354>)
 80016bc:	f003 fb9c 	bl	8004df8 <HAL_GPIO_ReadPin>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	b2d9      	uxtb	r1, r3
 80016c8:	4a29      	ldr	r2, [pc, #164]	; (8001770 <readall_inputs+0x368>)
 80016ca:	7813      	ldrb	r3, [r2, #0]
 80016cc:	f361 1386 	bfi	r3, r1, #6, #1
 80016d0:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn2 = HAL_GPIO_ReadPin(BAMOCAR_IN2_GPIO_Port, BAMOCAR_IN2_Pin);				// Eingang Bamocar 2
 80016d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d6:	4825      	ldr	r0, [pc, #148]	; (800176c <readall_inputs+0x364>)
 80016d8:	f003 fb8e 	bl	8004df8 <HAL_GPIO_ReadPin>
 80016dc:	4603      	mov	r3, r0
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	b2d9      	uxtb	r1, r3
 80016e4:	4a22      	ldr	r2, [pc, #136]	; (8001770 <readall_inputs+0x368>)
 80016e6:	7813      	ldrb	r3, [r2, #0]
 80016e8:	f361 13c7 	bfi	r3, r1, #7, #1
 80016ec:	7013      	strb	r3, [r2, #0]
	komfort_in.Enter = HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin);							// Encoder Taster Enter Eingang Mittelconsole
 80016ee:	2180      	movs	r1, #128	; 0x80
 80016f0:	4820      	ldr	r0, [pc, #128]	; (8001774 <readall_inputs+0x36c>)
 80016f2:	f003 fb81 	bl	8004df8 <HAL_GPIO_ReadPin>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	b2d9      	uxtb	r1, r3
 80016fe:	4a1c      	ldr	r2, [pc, #112]	; (8001770 <readall_inputs+0x368>)
 8001700:	7853      	ldrb	r3, [r2, #1]
 8001702:	f361 0300 	bfi	r3, r1, #0, #1
 8001706:	7053      	strb	r3, [r2, #1]
	komfort_in.OutA = HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTA_Pin);								// Encoder OUTA Eingang Mittelconsole
 8001708:	f44f 7100 	mov.w	r1, #512	; 0x200
 800170c:	4815      	ldr	r0, [pc, #84]	; (8001764 <readall_inputs+0x35c>)
 800170e:	f003 fb73 	bl	8004df8 <HAL_GPIO_ReadPin>
 8001712:	4603      	mov	r3, r0
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	b2d9      	uxtb	r1, r3
 800171a:	4a15      	ldr	r2, [pc, #84]	; (8001770 <readall_inputs+0x368>)
 800171c:	7853      	ldrb	r3, [r2, #1]
 800171e:	f361 0341 	bfi	r3, r1, #1, #1
 8001722:	7053      	strb	r3, [r2, #1]
	komfort_in.OutB = HAL_GPIO_ReadPin(OUTB_GPIO_Port, OUTB_Pin);								// Encoder OUTB Eingang Mittelconsole
 8001724:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001728:	480e      	ldr	r0, [pc, #56]	; (8001764 <readall_inputs+0x35c>)
 800172a:	f003 fb65 	bl	8004df8 <HAL_GPIO_ReadPin>
 800172e:	4603      	mov	r3, r0
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	b2d9      	uxtb	r1, r3
 8001736:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <readall_inputs+0x368>)
 8001738:	7853      	ldrb	r3, [r2, #1]
 800173a:	f361 0382 	bfi	r3, r1, #2, #1
 800173e:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA1 = HAL_GPIO_ReadPin(GRA1_GPIO_Port, GRA1_Pin);								// Tempomat 1 Eingang
 8001740:	2120      	movs	r1, #32
 8001742:	4807      	ldr	r0, [pc, #28]	; (8001760 <readall_inputs+0x358>)
 8001744:	f003 fb58 	bl	8004df8 <HAL_GPIO_ReadPin>
 8001748:	4603      	mov	r3, r0
 800174a:	e015      	b.n	8001778 <readall_inputs+0x370>
 800174c:	0800832c 	.word	0x0800832c
 8001750:	40021000 	.word	0x40021000
 8001754:	2000003c 	.word	0x2000003c
 8001758:	40021400 	.word	0x40021400
 800175c:	40020c00 	.word	0x40020c00
 8001760:	40021800 	.word	0x40021800
 8001764:	40020000 	.word	0x40020000
 8001768:	20000040 	.word	0x20000040
 800176c:	40020400 	.word	0x40020400
 8001770:	20000044 	.word	0x20000044
 8001774:	40020800 	.word	0x40020800
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	b2d9      	uxtb	r1, r3
 800177e:	4a30      	ldr	r2, [pc, #192]	; (8001840 <readall_inputs+0x438>)
 8001780:	7853      	ldrb	r3, [r2, #1]
 8001782:	f361 03c3 	bfi	r3, r1, #3, #1
 8001786:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA2 = HAL_GPIO_ReadPin(GRA2_GPIO_Port, GRA2_Pin);								// Tempomat 2 Eingang
 8001788:	2140      	movs	r1, #64	; 0x40
 800178a:	482e      	ldr	r0, [pc, #184]	; (8001844 <readall_inputs+0x43c>)
 800178c:	f003 fb34 	bl	8004df8 <HAL_GPIO_ReadPin>
 8001790:	4603      	mov	r3, r0
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	b2d9      	uxtb	r1, r3
 8001798:	4a29      	ldr	r2, [pc, #164]	; (8001840 <readall_inputs+0x438>)
 800179a:	7853      	ldrb	r3, [r2, #1]
 800179c:	f361 1304 	bfi	r3, r1, #4, #1
 80017a0:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA3 = HAL_GPIO_ReadPin(GRA3_GPIO_Port, GRA3_Pin);								// Tempomat 3 Eingang
 80017a2:	2180      	movs	r1, #128	; 0x80
 80017a4:	4827      	ldr	r0, [pc, #156]	; (8001844 <readall_inputs+0x43c>)
 80017a6:	f003 fb27 	bl	8004df8 <HAL_GPIO_ReadPin>
 80017aa:	4603      	mov	r3, r0
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	b2d9      	uxtb	r1, r3
 80017b2:	4a23      	ldr	r2, [pc, #140]	; (8001840 <readall_inputs+0x438>)
 80017b4:	7853      	ldrb	r3, [r2, #1]
 80017b6:	f361 1345 	bfi	r3, r1, #5, #1
 80017ba:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA4 = HAL_GPIO_ReadPin(GRA4_GPIO_Port, GRA4_Pin);								// Tempomat 4 Eingang
 80017bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017c0:	4820      	ldr	r0, [pc, #128]	; (8001844 <readall_inputs+0x43c>)
 80017c2:	f003 fb19 	bl	8004df8 <HAL_GPIO_ReadPin>
 80017c6:	4603      	mov	r3, r0
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	b2d9      	uxtb	r1, r3
 80017ce:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <readall_inputs+0x438>)
 80017d0:	7853      	ldrb	r3, [r2, #1]
 80017d2:	f361 1386 	bfi	r3, r1, #6, #1
 80017d6:	7053      	strb	r3, [r2, #1]
	komfort_in.Durchfluss = HAL_GPIO_ReadPin(DURCHFLUSS_GPIO_Port, DURCHFLUSS_Pin);				// Durchflusssensor Eingang
 80017d8:	2120      	movs	r1, #32
 80017da:	481b      	ldr	r0, [pc, #108]	; (8001848 <readall_inputs+0x440>)
 80017dc:	f003 fb0c 	bl	8004df8 <HAL_GPIO_ReadPin>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	b2d9      	uxtb	r1, r3
 80017e8:	4a15      	ldr	r2, [pc, #84]	; (8001840 <readall_inputs+0x438>)
 80017ea:	7853      	ldrb	r3, [r2, #1]
 80017ec:	f361 13c7 	bfi	r3, r1, #7, #1
 80017f0:	7053      	strb	r3, [r2, #1]

#ifdef DEBUG_INPUT
	ITM_SendString("Eingaenge gelesen.\n");
 80017f2:	4816      	ldr	r0, [pc, #88]	; (800184c <readall_inputs+0x444>)
 80017f4:	f7ff fdcc 	bl	8001390 <ITM_SendString>
	ITM_SendString("system_in:\t");
 80017f8:	4815      	ldr	r0, [pc, #84]	; (8001850 <readall_inputs+0x448>)
 80017fa:	f7ff fdc9 	bl	8001390 <ITM_SendString>
	ITM_SendNumber(system_in.systeminput);
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <readall_inputs+0x44c>)
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fdce 	bl	80013a4 <ITM_SendNumber>
	ITM_SendChar('\n');
 8001808:	200a      	movs	r0, #10
 800180a:	f7ff fdd5 	bl	80013b8 <ITM_SendChar>
	ITM_SendString("sdc_in:\t");
 800180e:	4812      	ldr	r0, [pc, #72]	; (8001858 <readall_inputs+0x450>)
 8001810:	f7ff fdbe 	bl	8001390 <ITM_SendString>
	ITM_SendNumber(sdc_in.sdcinput);
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <readall_inputs+0x454>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fdc3 	bl	80013a4 <ITM_SendNumber>
	ITM_SendChar('\n');
 800181e:	200a      	movs	r0, #10
 8001820:	f7ff fdca 	bl	80013b8 <ITM_SendChar>
	ITM_SendString("komfort_in:\t");
 8001824:	480e      	ldr	r0, [pc, #56]	; (8001860 <readall_inputs+0x458>)
 8001826:	f7ff fdb3 	bl	8001390 <ITM_SendString>
	ITM_SendNumber(komfort_in.komfortinput);
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <readall_inputs+0x438>)
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fdb8 	bl	80013a4 <ITM_SendNumber>
	ITM_SendChar('\n');
 8001834:	200a      	movs	r0, #10
 8001836:	f7ff fdbf 	bl	80013b8 <ITM_SendChar>
#endif
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000044 	.word	0x20000044
 8001844:	40021800 	.word	0x40021800
 8001848:	40021000 	.word	0x40021000
 800184c:	08008340 	.word	0x08008340
 8001850:	08008354 	.word	0x08008354
 8001854:	2000003c 	.word	0x2000003c
 8001858:	08008360 	.word	0x08008360
 800185c:	20000040 	.word	0x20000040
 8001860:	0800836c 	.word	0x0800836c

08001864 <readAnlasser>:
//----------------------------------------------------------------------

// Anlasser einlesen, Wert in Variable speichern, bis KL15 abfaellt
//----------------------------------------------------------------------
void readAnlasser(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
	if (system_in.Anlasser != 1)
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <readAnlasser+0x50>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d105      	bne.n	8001882 <readAnlasser+0x1e>
	{
		sdc_in.Anlasser = 1;
 8001876:	4a10      	ldr	r2, [pc, #64]	; (80018b8 <readAnlasser+0x54>)
 8001878:	7813      	ldrb	r3, [r2, #0]
 800187a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800187e:	7013      	strb	r3, [r2, #0]
	}
	else if ((sdc_in.Anlasser == 1) && (system_in.KL15 == 1))
	{
		sdc_in.Anlasser = 0;
	}
}
 8001880:	e012      	b.n	80018a8 <readAnlasser+0x44>
	else if ((sdc_in.Anlasser == 1) && (system_in.KL15 == 1))
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <readAnlasser+0x54>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00b      	beq.n	80018a8 <readAnlasser+0x44>
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <readAnlasser+0x50>)
 8001892:	785b      	ldrb	r3, [r3, #1]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d004      	beq.n	80018a8 <readAnlasser+0x44>
		sdc_in.Anlasser = 0;
 800189e:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <readAnlasser+0x54>)
 80018a0:	7813      	ldrb	r3, [r2, #0]
 80018a2:	f36f 1386 	bfc	r3, #6, #1
 80018a6:	7013      	strb	r3, [r2, #0]
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	2000003c 	.word	0x2000003c
 80018b8:	20000040 	.word	0x20000040

080018bc <millis>:
//----------------------------------------------------------------------
#include "millis.h"
//----------------------------------------------------------------------

uint32_t millis(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80018c0:	f001 fc26 	bl	8003110 <HAL_GetTick>
 80018c4:	4603      	mov	r3, r0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);							// Teste Green LED, an
 80018d0:	2201      	movs	r2, #1
 80018d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018d6:	481b      	ldr	r0, [pc, #108]	; (8001944 <testPCB_Leds+0x78>)
 80018d8:	f003 faa6 	bl	8004e28 <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 80018dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018e0:	f001 fc22 	bl	8003128 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);							// Teste Green LED, aus
 80018e4:	2200      	movs	r2, #0
 80018e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ea:	4816      	ldr	r0, [pc, #88]	; (8001944 <testPCB_Leds+0x78>)
 80018ec:	f003 fa9c 	bl	8004e28 <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 80018f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018f4:	f001 fc18 	bl	8003128 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);								// Teste Blue LED, an
 80018f8:	2201      	movs	r2, #1
 80018fa:	2180      	movs	r1, #128	; 0x80
 80018fc:	4811      	ldr	r0, [pc, #68]	; (8001944 <testPCB_Leds+0x78>)
 80018fe:	f003 fa93 	bl	8004e28 <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 8001902:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001906:	f001 fc0f 	bl	8003128 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);							// Teste Blue LED, aus
 800190a:	2200      	movs	r2, #0
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	480d      	ldr	r0, [pc, #52]	; (8001944 <testPCB_Leds+0x78>)
 8001910:	f003 fa8a 	bl	8004e28 <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 8001914:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001918:	f001 fc06 	bl	8003128 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);								// Teste Red LED, an
 800191c:	2201      	movs	r2, #1
 800191e:	2104      	movs	r1, #4
 8001920:	4808      	ldr	r0, [pc, #32]	; (8001944 <testPCB_Leds+0x78>)
 8001922:	f003 fa81 	bl	8004e28 <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 8001926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800192a:	f001 fbfd 	bl	8003128 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);								// Teste Red LED, aus
 800192e:	2200      	movs	r2, #0
 8001930:	2104      	movs	r1, #4
 8001932:	4804      	ldr	r0, [pc, #16]	; (8001944 <testPCB_Leds+0x78>)
 8001934:	f003 fa78 	bl	8004e28 <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 8001938:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800193c:	f001 fbf4 	bl	8003128 <HAL_Delay>
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40020400 	.word	0x40020400

08001948 <testCockpit_Leds>:
//----------------------------------------------------------------------

// Teste Cockpit LEDs
//----------------------------------------------------------------------
void testCockpit_Leds(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(ANHAENGER_GPIO_Port, ANHAENGER_Pin, GPIO_PIN_SET);							// Teste Anhaenger LED, an (Cockpit ECO)
 800194c:	2201      	movs	r2, #1
 800194e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001952:	4813      	ldr	r0, [pc, #76]	; (80019a0 <testCockpit_Leds+0x58>)
 8001954:	f003 fa68 	bl	8004e28 <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 8001958:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800195c:	f001 fbe4 	bl	8003128 <HAL_Delay>
    HAL_GPIO_WritePin(ANHAENGER_GPIO_Port, ANHAENGER_Pin, GPIO_PIN_RESET);							// Teste Anhaenger LED, aus (Cockpit ECO)
 8001960:	2200      	movs	r2, #0
 8001962:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001966:	480e      	ldr	r0, [pc, #56]	; (80019a0 <testCockpit_Leds+0x58>)
 8001968:	f003 fa5e 	bl	8004e28 <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 800196c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001970:	f001 fbda 	bl	8003128 <HAL_Delay>
    HAL_GPIO_WritePin(RESERVE_OUT_GPIO_Port, RESERVE_OUT_Pin, GPIO_PIN_SET);						// Teste Reserve LED, an (Cockpit Niveauregulierung)
 8001974:	2201      	movs	r2, #1
 8001976:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800197a:	4809      	ldr	r0, [pc, #36]	; (80019a0 <testCockpit_Leds+0x58>)
 800197c:	f003 fa54 	bl	8004e28 <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 8001980:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001984:	f001 fbd0 	bl	8003128 <HAL_Delay>
    HAL_GPIO_WritePin(RESERVE_OUT_GPIO_Port, RESERVE_OUT_Pin, GPIO_PIN_RESET);						// Teste Reserve LED, aus (Cockpit Niveauregulierung)
 8001988:	2200      	movs	r2, #0
 800198a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800198e:	4804      	ldr	r0, [pc, #16]	; (80019a0 <testCockpit_Leds+0x58>)
 8001990:	f003 fa4a 	bl	8004e28 <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 8001994:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001998:	f001 fbc6 	bl	8003128 <HAL_Delay>
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40020c00 	.word	0x40020c00

080019a4 <pwm_oelstand>:
//----------------------------------------------------------------------

// PWM fuer Oelstandsensor am Kombiinstrument
//----------------------------------------------------------------------
void pwm_oelstand(uint16_t time)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	80fb      	strh	r3, [r7, #6]
	// Auswahl wie viele Sekunden vergangen
	switch (time)																					// Zeit wird uebergeben
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	2b4b      	cmp	r3, #75	; 0x4b
 80019b2:	d01f      	beq.n	80019f4 <pwm_oelstand+0x50>
 80019b4:	2b4b      	cmp	r3, #75	; 0x4b
 80019b6:	dc24      	bgt.n	8001a02 <pwm_oelstand+0x5e>
 80019b8:	2b2d      	cmp	r3, #45	; 0x2d
 80019ba:	d014      	beq.n	80019e6 <pwm_oelstand+0x42>
 80019bc:	2b2d      	cmp	r3, #45	; 0x2d
 80019be:	dc20      	bgt.n	8001a02 <pwm_oelstand+0x5e>
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <pwm_oelstand+0x26>
 80019c4:	2b0f      	cmp	r3, #15
 80019c6:	d007      	beq.n	80019d8 <pwm_oelstand+0x34>
			break;
		case 75: // 5x15 ms = 75 ms
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 75ms Oelstandsensor Ausgang high
			break;
		default:
			break;
 80019c8:	e01b      	b.n	8001a02 <pwm_oelstand+0x5e>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_RESET);			// Bei 0ms Oelstandsensor Ausgang low
 80019ca:	2200      	movs	r2, #0
 80019cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019d0:	480e      	ldr	r0, [pc, #56]	; (8001a0c <pwm_oelstand+0x68>)
 80019d2:	f003 fa29 	bl	8004e28 <HAL_GPIO_WritePin>
			break;
 80019d6:	e015      	b.n	8001a04 <pwm_oelstand+0x60>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 15ms Oelstandsensor Ausgang high
 80019d8:	2201      	movs	r2, #1
 80019da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019de:	480b      	ldr	r0, [pc, #44]	; (8001a0c <pwm_oelstand+0x68>)
 80019e0:	f003 fa22 	bl	8004e28 <HAL_GPIO_WritePin>
			break;
 80019e4:	e00e      	b.n	8001a04 <pwm_oelstand+0x60>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_RESET);			// Bei 45ms Oelstandsensor Ausgang low
 80019e6:	2200      	movs	r2, #0
 80019e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ec:	4807      	ldr	r0, [pc, #28]	; (8001a0c <pwm_oelstand+0x68>)
 80019ee:	f003 fa1b 	bl	8004e28 <HAL_GPIO_WritePin>
			break;
 80019f2:	e007      	b.n	8001a04 <pwm_oelstand+0x60>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 75ms Oelstandsensor Ausgang high
 80019f4:	2201      	movs	r2, #1
 80019f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019fa:	4804      	ldr	r0, [pc, #16]	; (8001a0c <pwm_oelstand+0x68>)
 80019fc:	f003 fa14 	bl	8004e28 <HAL_GPIO_WritePin>
			break;
 8001a00:	e000      	b.n	8001a04 <pwm_oelstand+0x60>
			break;
 8001a02:	bf00      	nop
	}
	// Nach 405ms wird das ganze wiederholt
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40020000 	.word	0x40020000

08001a10 <cockpit_default>:
//----------------------------------------------------------------------

// Setze Cockpit auf default, alle Fehler OK
//----------------------------------------------------------------------
void cockpit_default(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	leuchten_out.Ruechwarn = 1;																		// Ruecklichtwarnung setzen
 8001a14:	4a1f      	ldr	r2, [pc, #124]	; (8001a94 <cockpit_default+0x84>)
 8001a16:	7813      	ldrb	r3, [r2, #0]
 8001a18:	f043 0310 	orr.w	r3, r3, #16
 8001a1c:	7013      	strb	r3, [r2, #0]
	leuchten_out.Wischwarn = 1;																		// Wischwasserwarnung setzen
 8001a1e:	4a1d      	ldr	r2, [pc, #116]	; (8001a94 <cockpit_default+0x84>)
 8001a20:	7813      	ldrb	r3, [r2, #0]
 8001a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a26:	7013      	strb	r3, [r2, #0]
	leuchten_out.Bremswarn = 1;																		// Bremslichtwarnung setzen
 8001a28:	4a1a      	ldr	r2, [pc, #104]	; (8001a94 <cockpit_default+0x84>)
 8001a2a:	7813      	ldrb	r3, [r2, #0]
 8001a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a30:	7013      	strb	r3, [r2, #0]
	leuchten_out.Oelstand = 1;																		// Oelstandwarnung setzen
 8001a32:	4a18      	ldr	r2, [pc, #96]	; (8001a94 <cockpit_default+0x84>)
 8001a34:	7853      	ldrb	r3, [r2, #1]
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, leuchten_out.Ruechwarn);			// Fehlermeldung fuer Ruecklichtwarnung einschalten
 8001a3c:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <cockpit_default+0x84>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	4813      	ldr	r0, [pc, #76]	; (8001a98 <cockpit_default+0x88>)
 8001a4c:	f003 f9ec 	bl	8004e28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WISCHWARNUNG_GPIO_Port, WISCHWARNUNG_Pin, leuchten_out.Wischwarn);			// Fehlermeldung fuer Wischwasserwarnung einschalten
 8001a50:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <cockpit_default+0x84>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a60:	480e      	ldr	r0, [pc, #56]	; (8001a9c <cockpit_default+0x8c>)
 8001a62:	f003 f9e1 	bl	8004e28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BREMSWARNUNG_GPIO_Port, BREMSWARNUNG_Pin, leuchten_out.Bremswarn);			// Fehlermeldung fuer Bremslichtwarnung einschalten
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <cockpit_default+0x84>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	461a      	mov	r2, r3
 8001a72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a76:	4809      	ldr	r0, [pc, #36]	; (8001a9c <cockpit_default+0x8c>)
 8001a78:	f003 f9d6 	bl	8004e28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OELDRUCK_GPIO_Port, OELDRUCK_Pin, leuchten_out.Oelstand);						// Fehlermeldung fuer Oeldruckwarnung einschalten
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <cockpit_default+0x84>)
 8001a7e:	785b      	ldrb	r3, [r3, #1]
 8001a80:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	461a      	mov	r2, r3
 8001a88:	2104      	movs	r1, #4
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <cockpit_default+0x90>)
 8001a8c:	f003 f9cc 	bl	8004e28 <HAL_GPIO_WritePin>
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000050 	.word	0x20000050
 8001a98:	40020c00 	.word	0x40020c00
 8001a9c:	40021800 	.word	0x40021800
 8001aa0:	40021400 	.word	0x40021400

08001aa4 <testSDC>:
//----------------------------------------------------------------------

// Testen der Spannung am Shutdown-Circuit, Signal 1 = offen, Signal = 0 geschlossen
//----------------------------------------------------------------------
void testSDC(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, GPIO_PIN_SET);					// Einschalten von Shutdown-Circuit zum testen
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aae:	4811      	ldr	r0, [pc, #68]	; (8001af4 <testSDC+0x50>)
 8001ab0:	f003 f9ba 	bl	8004e28 <HAL_GPIO_WritePin>
	HAL_Delay(100);																					// Wartezeit zum setzen
 8001ab4:	2064      	movs	r0, #100	; 0x64
 8001ab6:	f001 fb37 	bl	8003128 <HAL_Delay>
	if (HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin) == 1)								// Einlesen von SDC0 Eingang
 8001aba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001abe:	480d      	ldr	r0, [pc, #52]	; (8001af4 <testSDC+0x50>)
 8001ac0:	f003 f99a 	bl	8004df8 <HAL_GPIO_ReadPin>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d103      	bne.n	8001ad2 <testSDC+0x2e>
	{
#ifndef DEBUG_SDC
		software_error(ERROR_SDC_SPANNUNG);															// Sollte Sicherung kaputt oder Kurzschluss, dann Fehlerausgeben
#else
#warning Das Abschalten des Softwarefehlers kann unter Umstaenden zu Beschaedigung der HW fuehren.
		software_error_debug(ERROR_SDC_SPANNUNG);													// Errorfunktion stoppt Programm nicht
 8001aca:	2003      	movs	r0, #3
 8001acc:	f7ff fc0e 	bl	80012ec <software_error_debug>
 8001ad0:	e004      	b.n	8001adc <testSDC+0x38>
#endif
	}
	else
	{
	  	sdc_in.SDC12V = 1;																			// SDC Spannungsversorgung OK
 8001ad2:	4a09      	ldr	r2, [pc, #36]	; (8001af8 <testSDC+0x54>)
 8001ad4:	7813      	ldrb	r3, [r2, #0]
 8001ad6:	f043 0320 	orr.w	r3, r3, #32
 8001ada:	7013      	strb	r3, [r2, #0]
	}
	HAL_Delay(100);																					// Wartezeit zum setzen
 8001adc:	2064      	movs	r0, #100	; 0x64
 8001ade:	f001 fb23 	bl	8003128 <HAL_Delay>
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, GPIO_PIN_RESET);					// Auschalten von Shutdown-Circuit
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <testSDC+0x50>)
 8001aea:	f003 f99d 	bl	8004e28 <HAL_GPIO_WritePin>
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000
 8001af8:	20000040 	.word	0x20000040

08001afc <readTrottle>:
//----------------------------------------------------------------------

// Gaspedal auswerten
//----------------------------------------------------------------------
uint16_t readTrottle(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
	// Variablen anlegen
	uint16_t ADC_Gas = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	80fb      	strh	r3, [r7, #6]

	// Pruefen ob Variable Anlasser aktiv ist
	if (sdc_in.Anlasser == 1)												// Nur aktiv, wenn KL15 an und Anlasser einmal betaetigt.
 8001b06:	4b34      	ldr	r3, [pc, #208]	; (8001bd8 <readTrottle+0xdc>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d05c      	beq.n	8001bce <readTrottle+0xd2>
	{
		// Gaspedal einlesen
		ADC_Gas = ADC_Gaspedal();
 8001b14:	f7ff f938 	bl	8000d88 <ADC_Gaspedal>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	80fb      	strh	r3, [r7, #6]

		// Pruefen ob Kupplung getreten wurde
		if (system_in.Kupplung == 1)										// Wenn Kupplung nicht getreten wurde == 1
 8001b1c:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <readTrottle+0xe0>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	f003 0310 	and.w	r3, r3, #16
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d04f      	beq.n	8001bca <readTrottle+0xce>
		{
			// Wenn Leerlauf und Kickdown aktiv Plausibilitaetsfehler
			if ((system_in.Leerlauf == 1) && (system_in.Kickdown == 1))
 8001b2a:	4b2c      	ldr	r3, [pc, #176]	; (8001bdc <readTrottle+0xe0>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00e      	beq.n	8001b56 <readTrottle+0x5a>
 8001b38:	4b28      	ldr	r3, [pc, #160]	; (8001bdc <readTrottle+0xe0>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d007      	beq.n	8001b56 <readTrottle+0x5a>
			{
				// Fehlermeldung auf Uart ausgeben
#define TROTTLE_INVALID				"Error_Gaspedal_1 Plausibilitaetsfehler: Kickdown und Leerlauf"
				uartTransmit(TROTTLE_INVALID, sizeof(TROTTLE_INVALID));
 8001b46:	213e      	movs	r1, #62	; 0x3e
 8001b48:	4825      	ldr	r0, [pc, #148]	; (8001be0 <readTrottle+0xe4>)
 8001b4a:	f7fe fe39 	bl	80007c0 <uartTransmit>
				// Gaspedal invalide
				software_error(ERROR_GASPEDAL);
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f7ff fb7c 	bl	800124c <software_error>
 8001b54:	e03b      	b.n	8001bce <readTrottle+0xd2>
			}
			// Threshold Wert vergleichen / Threshold Wert >= THRESHOLD und Leerlauf aktiv
			else if ((system_in.Leerlauf == 1) && (ADC_Gas >= GAS_THRESHOLD))
 8001b56:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <readTrottle+0xe0>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d008      	beq.n	8001b76 <readTrottle+0x7a>
 8001b64:	88fb      	ldrh	r3, [r7, #6]
 8001b66:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001b6a:	d304      	bcc.n	8001b76 <readTrottle+0x7a>
			{
				// Wenn Wert groesser THRESHOLD ist, dann THRESHOLD vom ADC-Wert abziehen
				ADC_Gas -= GAS_THRESHOLD;
 8001b6c:	88fb      	ldrh	r3, [r7, #6]
 8001b6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b72:	80fb      	strh	r3, [r7, #6]
 8001b74:	e02b      	b.n	8001bce <readTrottle+0xd2>
			}
			// Threshold Wert vergleichen / Threshold Wert < THRESHOLD und Leerlauf aktiv
			else if ((system_in.Leerlauf == 1) && (ADC_Gas < GAS_THRESHOLD))
 8001b76:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <readTrottle+0xe0>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d006      	beq.n	8001b92 <readTrottle+0x96>
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001b8a:	d202      	bcs.n	8001b92 <readTrottle+0x96>
			{
				// Wenn der Wert kleine als THRESHOLD ist, dann ADC ignorieren, alle Werte sind 0
				ADC_Gas = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	80fb      	strh	r3, [r7, #6]
 8001b90:	e01d      	b.n	8001bce <readTrottle+0xd2>
			}
			// Threshold Wert vergleichen / Threshold Wert < THRESHOLD und Kickdown aktiv
			else if ((system_in.Kickdown == 1) && (ADC_Gas < (GAS_MAX_ADC - GAS_THRESHOLD)))
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <readTrottle+0xe0>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d004      	beq.n	8001baa <readTrottle+0xae>
 8001ba0:	88fb      	ldrh	r3, [r7, #6]
 8001ba2:	f640 62d2 	movw	r2, #3794	; 0xed2
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d911      	bls.n	8001bce <readTrottle+0xd2>
			{
				// Wenn Wert kleiner THRESHOLD ist

			}
			// Threshold Wert vergleichen / Threshold Wert > THRESHOLD und Kickdown aktiv
			else if ((system_in.Kickdown == 1) && (ADC_Gas >= (GAS_MAX_ADC - GAS_THRESHOLD)))
 8001baa:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <readTrottle+0xe0>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00a      	beq.n	8001bce <readTrottle+0xd2>
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	f640 62d2 	movw	r2, #3794	; 0xed2
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d905      	bls.n	8001bce <readTrottle+0xd2>
			{
				// Wenn Wert gleich THRESHOLD ist
				ADC_Gas = GAS_MAX_ADC;
 8001bc2:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001bc6:	80fb      	strh	r3, [r7, #6]
 8001bc8:	e001      	b.n	8001bce <readTrottle+0xd2>
		}
		// Wenn Kupplung getreten == 0
		else
		{
			// Wenn Kupplung oder Bremse getreten
			ADC_Gas = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	80fb      	strh	r3, [r7, #6]
		}
	}

	return ADC_Gas;
 8001bce:	88fb      	ldrh	r3, [r7, #6]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000040 	.word	0x20000040
 8001bdc:	2000003c 	.word	0x2000003c
 8001be0:	0800837c 	.word	0x0800837c

08001be4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bea:	463b      	mov	r3, r7
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001bf6:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001bf8:	4a21      	ldr	r2, [pc, #132]	; (8001c80 <MX_ADC1_Init+0x9c>)
 8001bfa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001bfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c0a:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c16:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c1e:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c26:	4a17      	ldr	r2, [pc, #92]	; (8001c84 <MX_ADC1_Init+0xa0>)
 8001c28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c2a:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c3e:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c44:	480d      	ldr	r0, [pc, #52]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c46:	f001 fadb 	bl	8003200 <HAL_ADC_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001c50:	f001 f842 	bl	8002cd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001c54:	230e      	movs	r3, #14
 8001c56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c60:	463b      	mov	r3, r7
 8001c62:	4619      	mov	r1, r3
 8001c64:	4805      	ldr	r0, [pc, #20]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c66:	f001 fca9 	bl	80035bc <HAL_ADC_ConfigChannel>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001c70:	f001 f832 	bl	8002cd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000058 	.word	0x20000058
 8001c80:	40012000 	.word	0x40012000
 8001c84:	0f000001 	.word	0x0f000001

08001c88 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08c      	sub	sp, #48	; 0x30
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a2d      	ldr	r2, [pc, #180]	; (8001d5c <HAL_ADC_MspInit+0xd4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d153      	bne.n	8001d52 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001caa:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <HAL_ADC_MspInit+0xd8>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	4a2c      	ldr	r2, [pc, #176]	; (8001d60 <HAL_ADC_MspInit+0xd8>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb6:	4b2a      	ldr	r3, [pc, #168]	; (8001d60 <HAL_ADC_MspInit+0xd8>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbe:	61bb      	str	r3, [r7, #24]
 8001cc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc2:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <HAL_ADC_MspInit+0xd8>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a26      	ldr	r2, [pc, #152]	; (8001d60 <HAL_ADC_MspInit+0xd8>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <HAL_ADC_MspInit+0xd8>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cda:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <HAL_ADC_MspInit+0xd8>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a20      	ldr	r2, [pc, #128]	; (8001d60 <HAL_ADC_MspInit+0xd8>)
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <HAL_ADC_MspInit+0xd8>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <HAL_ADC_MspInit+0xd8>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a1a      	ldr	r2, [pc, #104]	; (8001d60 <HAL_ADC_MspInit+0xd8>)
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <HAL_ADC_MspInit+0xd8>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SENSE_KL15_Pin|SENSE_KUEHLWASSER_Pin|SENSE_KLIMA_FLAP_Pin|SENSE_GAS_Pin
 8001d0a:	23f8      	movs	r3, #248	; 0xf8
 8001d0c:	61fb      	str	r3, [r7, #28]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d16:	f107 031c 	add.w	r3, r7, #28
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4811      	ldr	r0, [pc, #68]	; (8001d64 <HAL_ADC_MspInit+0xdc>)
 8001d1e:	f002 febf 	bl	8004aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_DRUCK_Pin|SENSE_DRUCK_TEMP_Pin;
 8001d22:	2330      	movs	r3, #48	; 0x30
 8001d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d26:	2303      	movs	r3, #3
 8001d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d2e:	f107 031c 	add.w	r3, r7, #28
 8001d32:	4619      	mov	r1, r3
 8001d34:	480c      	ldr	r0, [pc, #48]	; (8001d68 <HAL_ADC_MspInit+0xe0>)
 8001d36:	f002 feb3 	bl	8004aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_RETURN_Pin|SENSE_INFO_Pin;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d46:	f107 031c 	add.w	r3, r7, #28
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4807      	ldr	r0, [pc, #28]	; (8001d6c <HAL_ADC_MspInit+0xe4>)
 8001d4e:	f002 fea7 	bl	8004aa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001d52:	bf00      	nop
 8001d54:	3730      	adds	r7, #48	; 0x30
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40012000 	.word	0x40012000
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40020000 	.word	0x40020000
 8001d68:	40020800 	.word	0x40020800
 8001d6c:	40020400 	.word	0x40020400

08001d70 <MX_CAN3_Init>:

CAN_HandleTypeDef hcan3;

/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001d74:	4b33      	ldr	r3, [pc, #204]	; (8001e44 <MX_CAN3_Init+0xd4>)
 8001d76:	4a34      	ldr	r2, [pc, #208]	; (8001e48 <MX_CAN3_Init+0xd8>)
 8001d78:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001d7a:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <MX_CAN3_Init+0xd4>)
 8001d7c:	2206      	movs	r2, #6
 8001d7e:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001d80:	4b30      	ldr	r3, [pc, #192]	; (8001e44 <MX_CAN3_Init+0xd4>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d86:	4b2f      	ldr	r3, [pc, #188]	; (8001e44 <MX_CAN3_Init+0xd4>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001d8c:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <MX_CAN3_Init+0xd4>)
 8001d8e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001d92:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001d94:	4b2b      	ldr	r3, [pc, #172]	; (8001e44 <MX_CAN3_Init+0xd4>)
 8001d96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d9a:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001d9c:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <MX_CAN3_Init+0xd4>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001da2:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <MX_CAN3_Init+0xd4>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001da8:	4b26      	ldr	r3, [pc, #152]	; (8001e44 <MX_CAN3_Init+0xd4>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001dae:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <MX_CAN3_Init+0xd4>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001db4:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <MX_CAN3_Init+0xd4>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001dba:	4b22      	ldr	r3, [pc, #136]	; (8001e44 <MX_CAN3_Init+0xd4>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001dc0:	4820      	ldr	r0, [pc, #128]	; (8001e44 <MX_CAN3_Init+0xd4>)
 8001dc2:	f001 fe4b 	bl	8003a5c <HAL_CAN_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001dcc:	f000 ff84 	bl	8002cd8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */
	// Starte CAN Bus
	if((HAL_CAN_Start(&hcan3)) != HAL_OK)
 8001dd0:	481c      	ldr	r0, [pc, #112]	; (8001e44 <MX_CAN3_Init+0xd4>)
 8001dd2:	f002 f82b 	bl	8003e2c <HAL_CAN_Start>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_CAN3_Init+0x70>
	{
		// Fehler beim Starten des CAN-Busses
		Error_Handler();
 8001ddc:	f000 ff7c 	bl	8002cd8 <Error_Handler>
	}

	// Aktiviere Interrupts fuer CAN Bus
	if((HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_FULL)) != HAL_OK)
 8001de0:	2104      	movs	r1, #4
 8001de2:	4818      	ldr	r0, [pc, #96]	; (8001e44 <MX_CAN3_Init+0xd4>)
 8001de4:	f002 fa6c 	bl	80042c0 <HAL_CAN_ActivateNotification>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_CAN3_Init+0x82>
	{
		// Fehler in der Initialisierung des CAN Interrupts
		Error_Handler();
 8001dee:	f000 ff73 	bl	8002cd8 <Error_Handler>
	}

	// Filter Bank initialisieren um Daten zu empfangen
	// Akzeptiere alle CAN-Pakete
	sFilterConfig.FilterBank = 0;
 8001df2:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <MX_CAN3_Init+0xdc>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001df8:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <MX_CAN3_Init+0xdc>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <MX_CAN3_Init+0xdc>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0111 << 5;
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_CAN3_Init+0xdc>)
 8001e06:	f242 2220 	movw	r2, #8736	; 0x2220
 8001e0a:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <MX_CAN3_Init+0xdc>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0111 << 5;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <MX_CAN3_Init+0xdc>)
 8001e14:	f242 2220 	movw	r2, #8736	; 0x2220
 8001e18:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0;
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_CAN3_Init+0xdc>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = 0;
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <MX_CAN3_Init+0xdc>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_CAN3_Init+0xdc>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	621a      	str	r2, [r3, #32]

	// Filter Bank schreiben
	if((HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 8001e2c:	4907      	ldr	r1, [pc, #28]	; (8001e4c <MX_CAN3_Init+0xdc>)
 8001e2e:	4805      	ldr	r0, [pc, #20]	; (8001e44 <MX_CAN3_Init+0xd4>)
 8001e30:	f001 ff10 	bl	8003c54 <HAL_CAN_ConfigFilter>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_CAN3_Init+0xce>
	{
		// Fehler beim konfigurieren der Filterbank fuer den CAN-Bus
		Error_Handler();
 8001e3a:	f000 ff4d 	bl	8002cd8 <Error_Handler>
	}

  /* USER CODE END CAN3_Init 2 */

}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200000c8 	.word	0x200000c8
 8001e48:	40003400 	.word	0x40003400
 8001e4c:	200000a0 	.word	0x200000a0

08001e50 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN3)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1b      	ldr	r2, [pc, #108]	; (8001edc <HAL_CAN_MspInit+0x8c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d130      	bne.n	8001ed4 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN3_MspInit 0 */

  /* USER CODE END CAN3_MspInit 0 */
    /* CAN3 clock enable */
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_CAN_MspInit+0x90>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a1a      	ldr	r2, [pc, #104]	; (8001ee0 <HAL_CAN_MspInit+0x90>)
 8001e78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7e:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <HAL_CAN_MspInit+0x90>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <HAL_CAN_MspInit+0x90>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a14      	ldr	r2, [pc, #80]	; (8001ee0 <HAL_CAN_MspInit+0x90>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_CAN_MspInit+0x90>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
    /**CAN3 GPIO Configuration
    PA8     ------> CAN3_RX
    PA15     ------> CAN3_TX
    */
    GPIO_InitStruct.Pin = ACAN_RX_Pin|ACAN_TX_Pin;
 8001ea2:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001eb4:	230b      	movs	r3, #11
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4809      	ldr	r0, [pc, #36]	; (8001ee4 <HAL_CAN_MspInit+0x94>)
 8001ec0:	f002 fdee 	bl	8004aa0 <HAL_GPIO_Init>

    /* CAN3 interrupt Init */
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	2069      	movs	r0, #105	; 0x69
 8001eca:	f002 fd20 	bl	800490e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 8001ece:	2069      	movs	r0, #105	; 0x69
 8001ed0:	f002 fd39 	bl	8004946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	3728      	adds	r7, #40	; 0x28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40003400 	.word	0x40003400
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020000 	.word	0x40020000

08001ee8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08e      	sub	sp, #56	; 0x38
 8001eec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001efe:	4bb6      	ldr	r3, [pc, #728]	; (80021d8 <MX_GPIO_Init+0x2f0>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4ab5      	ldr	r2, [pc, #724]	; (80021d8 <MX_GPIO_Init+0x2f0>)
 8001f04:	f043 0310 	orr.w	r3, r3, #16
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4bb3      	ldr	r3, [pc, #716]	; (80021d8 <MX_GPIO_Init+0x2f0>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0310 	and.w	r3, r3, #16
 8001f12:	623b      	str	r3, [r7, #32]
 8001f14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f16:	4bb0      	ldr	r3, [pc, #704]	; (80021d8 <MX_GPIO_Init+0x2f0>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4aaf      	ldr	r2, [pc, #700]	; (80021d8 <MX_GPIO_Init+0x2f0>)
 8001f1c:	f043 0304 	orr.w	r3, r3, #4
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4bad      	ldr	r3, [pc, #692]	; (80021d8 <MX_GPIO_Init+0x2f0>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	61fb      	str	r3, [r7, #28]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f2e:	4baa      	ldr	r3, [pc, #680]	; (80021d8 <MX_GPIO_Init+0x2f0>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4aa9      	ldr	r2, [pc, #676]	; (80021d8 <MX_GPIO_Init+0x2f0>)
 8001f34:	f043 0320 	orr.w	r3, r3, #32
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4ba7      	ldr	r3, [pc, #668]	; (80021d8 <MX_GPIO_Init+0x2f0>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	61bb      	str	r3, [r7, #24]
 8001f44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f46:	4ba4      	ldr	r3, [pc, #656]	; (80021d8 <MX_GPIO_Init+0x2f0>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4aa3      	ldr	r2, [pc, #652]	; (80021d8 <MX_GPIO_Init+0x2f0>)
 8001f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4ba1      	ldr	r3, [pc, #644]	; (80021d8 <MX_GPIO_Init+0x2f0>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5e:	4b9e      	ldr	r3, [pc, #632]	; (80021d8 <MX_GPIO_Init+0x2f0>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a9d      	ldr	r2, [pc, #628]	; (80021d8 <MX_GPIO_Init+0x2f0>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b9b      	ldr	r3, [pc, #620]	; (80021d8 <MX_GPIO_Init+0x2f0>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f76:	4b98      	ldr	r3, [pc, #608]	; (80021d8 <MX_GPIO_Init+0x2f0>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a97      	ldr	r2, [pc, #604]	; (80021d8 <MX_GPIO_Init+0x2f0>)
 8001f7c:	f043 0302 	orr.w	r3, r3, #2
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b95      	ldr	r3, [pc, #596]	; (80021d8 <MX_GPIO_Init+0x2f0>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f8e:	4b92      	ldr	r3, [pc, #584]	; (80021d8 <MX_GPIO_Init+0x2f0>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a91      	ldr	r2, [pc, #580]	; (80021d8 <MX_GPIO_Init+0x2f0>)
 8001f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b8f      	ldr	r3, [pc, #572]	; (80021d8 <MX_GPIO_Init+0x2f0>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa6:	4b8c      	ldr	r3, [pc, #560]	; (80021d8 <MX_GPIO_Init+0x2f0>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	4a8b      	ldr	r2, [pc, #556]	; (80021d8 <MX_GPIO_Init+0x2f0>)
 8001fac:	f043 0308 	orr.w	r3, r3, #8
 8001fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb2:	4b89      	ldr	r3, [pc, #548]	; (80021d8 <MX_GPIO_Init+0x2f0>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f248 0187 	movw	r1, #32903	; 0x8087
 8001fc4:	4885      	ldr	r0, [pc, #532]	; (80021dc <MX_GPIO_Init+0x2f4>)
 8001fc6:	f002 ff2f 	bl	8004e28 <HAL_GPIO_WritePin>
                          |DIGITAL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_ON_Pin|WS2812_Pin, GPIO_PIN_RESET);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f242 0108 	movw	r1, #8200	; 0x2008
 8001fd0:	4883      	ldr	r0, [pc, #524]	; (80021e0 <MX_GPIO_Init+0x2f8>)
 8001fd2:	f002 ff29 	bl	8004e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f24f 013c 	movw	r1, #61500	; 0xf03c
 8001fdc:	4881      	ldr	r0, [pc, #516]	; (80021e4 <MX_GPIO_Init+0x2fc>)
 8001fde:	f002 ff23 	bl	8004e28 <HAL_GPIO_WritePin>
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f647 0194 	movw	r1, #30868	; 0x7894
 8001fe8:	487f      	ldr	r0, [pc, #508]	; (80021e8 <MX_GPIO_Init+0x300>)
 8001fea:	f002 ff1d 	bl	8004e28 <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f64e 2188 	movw	r1, #60040	; 0xea88
 8001ff4:	487d      	ldr	r0, [pc, #500]	; (80021ec <MX_GPIO_Init+0x304>)
 8001ff6:	f002 ff17 	bl	8004e28 <HAL_GPIO_WritePin>
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|RUECKWARNUNG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f64e 610c 	movw	r1, #60940	; 0xee0c
 8002000:	487b      	ldr	r0, [pc, #492]	; (80021f0 <MX_GPIO_Init+0x308>)
 8002002:	f002 ff11 	bl	8004e28 <HAL_GPIO_WritePin>
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_RESET);
 8002006:	2200      	movs	r2, #0
 8002008:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800200c:	4879      	ldr	r0, [pc, #484]	; (80021f4 <MX_GPIO_Init+0x30c>)
 800200e:	f002 ff0b 	bl	8004e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 8002012:	f248 0387 	movw	r3, #32903	; 0x8087
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
                          |DIGITAL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002018:	2301      	movs	r3, #1
 800201a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002020:	2300      	movs	r3, #0
 8002022:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002028:	4619      	mov	r1, r3
 800202a:	486c      	ldr	r0, [pc, #432]	; (80021dc <MX_GPIO_Init+0x2f4>)
 800202c:	f002 fd38 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ECO_Pin|BC_DOWN_IN_Pin|DURCHFLUSS_Pin|BUTTON2_Pin
 8002030:	f647 7378 	movw	r3, #32632	; 0x7f78
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
                          |KICKDOWN_Pin|LEERLAUF_Pin|KUPPLUNG_NO_Pin|BREMSE_NC_Pin
                          |BREMSE_NO_Pin|SENSE_SDC_AKKU_Pin|SENSE_SDC_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002036:	2300      	movs	r3, #0
 8002038:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800203e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002042:	4619      	mov	r1, r3
 8002044:	4865      	ldr	r0, [pc, #404]	; (80021dc <MX_GPIO_Init+0x2f4>)
 8002046:	f002 fd2b 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 800204a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002050:	2301      	movs	r3, #1
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 800205c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002060:	4619      	mov	r1, r3
 8002062:	485f      	ldr	r0, [pc, #380]	; (80021e0 <MX_GPIO_Init+0x2f8>)
 8002064:	f002 fd1c 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8002068:	f64d 7347 	movw	r3, #57159	; 0xdf47
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|SD_SW_Pin|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800206e:	2303      	movs	r3, #3
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207a:	4619      	mov	r1, r3
 800207c:	4858      	ldr	r0, [pc, #352]	; (80021e0 <MX_GPIO_Init+0x2f8>)
 800207e:	f002 fd0f 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|ECON_Pin|RECUPERATION_Pin;
 8002082:	f640 0303 	movw	r3, #2051	; 0x803
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002088:	2300      	movs	r3, #0
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002094:	4619      	mov	r1, r3
 8002096:	4853      	ldr	r0, [pc, #332]	; (80021e4 <MX_GPIO_Init+0x2fc>)
 8002098:	f002 fd02 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 800209c:	f24f 033c 	movw	r3, #61500	; 0xf03c
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a2:	2301      	movs	r3, #1
 80020a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020aa:	2300      	movs	r3, #0
 80020ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b2:	4619      	mov	r1, r3
 80020b4:	484b      	ldr	r0, [pc, #300]	; (80021e4 <MX_GPIO_Init+0x2fc>)
 80020b6:	f002 fcf3 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PF10 */
  GPIO_InitStruct.Pin = SPI5_CS_Pin|SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin
 80020ba:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020c0:	2303      	movs	r3, #3
 80020c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020cc:	4619      	mov	r1, r3
 80020ce:	4845      	ldr	r0, [pc, #276]	; (80021e4 <MX_GPIO_Init+0x2fc>)
 80020d0:	f002 fce6 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS2812_Pin;
 80020d4:	2308      	movs	r3, #8
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d8:	2301      	movs	r3, #1
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020e0:	2302      	movs	r3, #2
 80020e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 80020e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e8:	4619      	mov	r1, r3
 80020ea:	483d      	ldr	r0, [pc, #244]	; (80021e0 <MX_GPIO_Init+0x2f8>)
 80020ec:	f002 fcd8 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|EMERGENCY_RUN_Pin|HW_WAKE_Pin|OUTA_Pin
 80020f0:	f640 6307 	movw	r3, #3591	; 0xe07
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTB_Pin|BC_UP_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f6:	2300      	movs	r3, #0
 80020f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002102:	4619      	mov	r1, r3
 8002104:	483b      	ldr	r0, [pc, #236]	; (80021f4 <MX_GPIO_Init+0x30c>)
 8002106:	f002 fccb 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 800210a:	f647 0394 	movw	r3, #30868	; 0x7894
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002110:	2301      	movs	r3, #1
 8002112:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002118:	2300      	movs	r3, #0
 800211a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002120:	4619      	mov	r1, r3
 8002122:	4831      	ldr	r0, [pc, #196]	; (80021e8 <MX_GPIO_Init+0x300>)
 8002124:	f002 fcbc 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DCDC_INSTRUCTION_Pin|DCDC_FAULT_Pin|ASR_IN1_Pin|GRA1_Pin
 8002128:	f241 13f3 	movw	r3, #4595	; 0x11f3
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GRA2_Pin|GRA3_Pin|GRA4_Pin|BC_RESET_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800212e:	2300      	movs	r3, #0
 8002130:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213a:	4619      	mov	r1, r3
 800213c:	482c      	ldr	r0, [pc, #176]	; (80021f0 <MX_GPIO_Init+0x308>)
 800213e:	f002 fcaf 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSE_SDC_BTB_Pin|BAMOCAR_IN2_Pin;
 8002142:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002148:	2300      	movs	r3, #0
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002154:	4619      	mov	r1, r3
 8002156:	4824      	ldr	r0, [pc, #144]	; (80021e8 <MX_GPIO_Init+0x300>)
 8002158:	f002 fca2 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KL15_Pin|ANLASSER_Pin|BAMOCAR_IN1_Pin|ASR_IN2_Pin;
 800215c:	f241 5310 	movw	r3, #5392	; 0x1510
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002162:	2300      	movs	r3, #0
 8002164:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800216a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800216e:	4619      	mov	r1, r3
 8002170:	481e      	ldr	r0, [pc, #120]	; (80021ec <MX_GPIO_Init+0x304>)
 8002172:	f002 fc95 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 8002176:	f64e 2388 	movw	r3, #60040	; 0xea88
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|RUECKWARNUNG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217c:	2301      	movs	r3, #1
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002184:	2300      	movs	r3, #0
 8002186:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800218c:	4619      	mov	r1, r3
 800218e:	4817      	ldr	r0, [pc, #92]	; (80021ec <MX_GPIO_Init+0x304>)
 8002190:	f002 fc86 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 8002194:	f64e 630c 	movw	r3, #60940	; 0xee0c
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219a:	2301      	movs	r3, #1
 800219c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2300      	movs	r3, #0
 80021a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021aa:	4619      	mov	r1, r3
 80021ac:	4810      	ldr	r0, [pc, #64]	; (80021f0 <MX_GPIO_Init+0x308>)
 80021ae:	f002 fc77 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 80021b2:	2380      	movs	r3, #128	; 0x80
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b6:	2300      	movs	r3, #0
 80021b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 80021be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c2:	4619      	mov	r1, r3
 80021c4:	4806      	ldr	r0, [pc, #24]	; (80021e0 <MX_GPIO_Init+0x2f8>)
 80021c6:	f002 fc6b 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OELSTAND_TEMP_Pin;
 80021ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d0:	2301      	movs	r3, #1
 80021d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	e00f      	b.n	80021f8 <MX_GPIO_Init+0x310>
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40020800 	.word	0x40020800
 80021e4:	40021400 	.word	0x40021400
 80021e8:	40020400 	.word	0x40020400
 80021ec:	40020c00 	.word	0x40020c00
 80021f0:	40021800 	.word	0x40021800
 80021f4:	40020000 	.word	0x40020000
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	2300      	movs	r3, #0
 80021fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OELSTAND_TEMP_GPIO_Port, &GPIO_InitStruct);
 80021fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002202:	4619      	mov	r1, r3
 8002204:	480f      	ldr	r0, [pc, #60]	; (8002244 <MX_GPIO_Init+0x35c>)
 8002206:	f002 fc4b 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_TX_Pin|CAN1_RX_Pin|SD_CMD_Pin;
 800220a:	2307      	movs	r3, #7
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800220e:	2303      	movs	r3, #3
 8002210:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221a:	4619      	mov	r1, r3
 800221c:	480a      	ldr	r0, [pc, #40]	; (8002248 <MX_GPIO_Init+0x360>)
 800221e:	f002 fc3f 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CAN2_TX_Pin|CAN2_RX_Pin|I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002222:	f44f 7358 	mov.w	r3, #864	; 0x360
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002228:	2303      	movs	r3, #3
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002234:	4619      	mov	r1, r3
 8002236:	4805      	ldr	r0, [pc, #20]	; (800224c <MX_GPIO_Init+0x364>)
 8002238:	f002 fc32 	bl	8004aa0 <HAL_GPIO_Init>

}
 800223c:	bf00      	nop
 800223e:	3738      	adds	r7, #56	; 0x38
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40020000 	.word	0x40020000
 8002248:	40020c00 	.word	0x40020c00
 800224c:	40020400 	.word	0x40020400

08002250 <ITM_SendChar>:
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002258:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800225c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d013      	beq.n	8002290 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002268:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800226c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002270:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00b      	beq.n	8002290 <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 8002278:	e000      	b.n	800227c <ITM_SendChar+0x2c>
      __NOP();
 800227a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800227c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f9      	beq.n	800227a <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002286:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	701a      	strb	r2, [r3, #0]
  return (ch);
 8002290:	687b      	ldr	r3, [r7, #4]
}
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022a0:	b5b0      	push	{r4, r5, r7, lr}
 80022a2:	b0c0      	sub	sp, #256	; 0x100
 80022a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t ADC_VAL[10] = {0};
 80022a6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	60da      	str	r2, [r3, #12]
 80022b4:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022b6:	f000 feda 	bl	800306e <HAL_Init>

  /* USER CODE BEGIN Init */

	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[6] = {0}, InData[6] = {0}, AnalogData[8] = {0}, TempData[8] = {0};
 80022ba:	2300      	movs	r3, #0
 80022bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80022c0:	2300      	movs	r3, #0
 80022c2:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 80022c6:	2300      	movs	r3, #0
 80022c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80022cc:	2300      	movs	r3, #0
 80022ce:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 80022d2:	2300      	movs	r3, #0
 80022d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022d8:	2300      	movs	r3, #0
 80022da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022de:	2300      	movs	r3, #0
 80022e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	uint8_t status, tmp[4], task = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	uint16_t count = 0, gas_adc = 0, gas_mean = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
 80022f6:	2300      	movs	r3, #0
 80022f8:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 80022fc:	2300      	movs	r3, #0
 80022fe:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
  	uint32_t lastcan = 0, lastsendcan = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002308:	2300      	movs	r3, #0
 800230a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

  	// Erstelle Can-Nachrichten
    // Sendenachricht erstellen
  	CAN_TxHeaderTypeDef TxMessage = {0x123, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 800230e:	4b9a      	ldr	r3, [pc, #616]	; (8002578 <main+0x2d8>)
 8002310:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8002314:	461d      	mov	r5, r3
 8002316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800231a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800231e:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet digitale Ausgaenge erstellen
  	CAN_TxHeaderTypeDef TxOutput = {MOTOR_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 6, DISABLE};
 8002322:	4b96      	ldr	r3, [pc, #600]	; (800257c <main+0x2dc>)
 8002324:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8002328:	461d      	mov	r5, r3
 800232a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800232c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800232e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002332:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet digitale Eingaenge erstellen
  	CAN_TxHeaderTypeDef TxInput = {MOTOR_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 6, DISABLE};
 8002336:	4b92      	ldr	r3, [pc, #584]	; (8002580 <main+0x2e0>)
 8002338:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800233c:	461d      	mov	r5, r3
 800233e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002342:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002346:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet Motor1 erstellen
  	CAN_TxHeaderTypeDef TxMotor1 = {MOTOR_CAN_DREHZAHL, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 800234a:	4b8e      	ldr	r3, [pc, #568]	; (8002584 <main+0x2e4>)
 800234c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002350:	461d      	mov	r5, r3
 8002352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002356:	e895 0003 	ldmia.w	r5, {r0, r1}
 800235a:	e884 0003 	stmia.w	r4, {r0, r1}
  	// Sendenachricht Motorsteuergeraet an Bamocar erstellen
  	CAN_TxHeaderTypeDef TxBamocar = {BAMOCAR_TX_ID, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 800235e:	4b8a      	ldr	r3, [pc, #552]	; (8002588 <main+0x2e8>)
 8002360:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8002364:	461d      	mov	r5, r3
 8002366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800236a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800236e:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet analoge Eingaenge erstellen
  	CAN_TxHeaderTypeDef TxAnalog = {MOTOR_CAN_ANALOG_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8002372:	4b86      	ldr	r3, [pc, #536]	; (800258c <main+0x2ec>)
 8002374:	f107 0418 	add.w	r4, r7, #24
 8002378:	461d      	mov	r5, r3
 800237a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800237c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800237e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002382:	e884 0003 	stmia.w	r4, {r0, r1}
  	// Sendenachricht Motorsteuergeraet Temperatur Eingaenge erstellen
  	CAN_TxHeaderTypeDef TxTemperatur = {MOTOR_CAN_TEMPERATUR, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8002386:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800238a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800238e:	4a80      	ldr	r2, [pc, #512]	; (8002590 <main+0x2f0>)
 8002390:	461c      	mov	r4, r3
 8002392:	4615      	mov	r5, r2
 8002394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002398:	e895 0003 	ldmia.w	r5, {r0, r1}
 800239c:	e884 0003 	stmia.w	r4, {r0, r1}

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023a0:	f000 fb2c 	bl	80029fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023a4:	f7ff fda0 	bl	8001ee8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80023a8:	f000 fda2 	bl	8002ef0 <MX_USART2_UART_Init>
  MX_CAN3_Init();
 80023ac:	f7ff fce0 	bl	8001d70 <MX_CAN3_Init>
  MX_ADC1_Init();
 80023b0:	f7ff fc18 	bl	8001be4 <MX_ADC1_Init>
  MX_TIM6_Init();
 80023b4:	f000 fd40 	bl	8002e38 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // ITM HCLK
  ITM_SendChar('H');
 80023b8:	2048      	movs	r0, #72	; 0x48
 80023ba:	f7ff ff49 	bl	8002250 <ITM_SendChar>
  ITM_SendChar('a');
 80023be:	2061      	movs	r0, #97	; 0x61
 80023c0:	f7ff ff46 	bl	8002250 <ITM_SendChar>
  ITM_SendChar('l');
 80023c4:	206c      	movs	r0, #108	; 0x6c
 80023c6:	f7ff ff43 	bl	8002250 <ITM_SendChar>
  ITM_SendChar('l');
 80023ca:	206c      	movs	r0, #108	; 0x6c
 80023cc:	f7ff ff40 	bl	8002250 <ITM_SendChar>
  ITM_SendChar('o');
 80023d0:	206f      	movs	r0, #111	; 0x6f
 80023d2:	f7ff ff3d 	bl	8002250 <ITM_SendChar>
  ITM_SendChar(' ');
 80023d6:	2020      	movs	r0, #32
 80023d8:	f7ff ff3a 	bl	8002250 <ITM_SendChar>
  	// Start Timer 6 Interrupt
  	HAL_TIM_Base_Start_IT(&htim6);
 80023dc:	486d      	ldr	r0, [pc, #436]	; (8002594 <main+0x2f4>)
 80023de:	f003 febb 	bl	8006158 <HAL_TIM_Base_Start_IT>
  	HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer[uart_count], 1);
 80023e2:	4b6d      	ldr	r3, [pc, #436]	; (8002598 <main+0x2f8>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	4b6c      	ldr	r3, [pc, #432]	; (800259c <main+0x2fc>)
 80023ea:	4413      	add	r3, r2
 80023ec:	2201      	movs	r2, #1
 80023ee:	4619      	mov	r1, r3
 80023f0:	486b      	ldr	r0, [pc, #428]	; (80025a0 <main+0x300>)
 80023f2:	f004 fa8e 	bl	8006912 <HAL_UART_Receive_IT>

  	// Schreibe Resetquelle auf die Konsole
#ifdef DEBUG
	printResetSource(readResetSource());
 80023f6:	f7fe fbdd 	bl	8000bb4 <readResetSource>
 80023fa:	4603      	mov	r3, r0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe fc2b 	bl	8000c58 <printResetSource>

  	// Teste serielle Schnittstelle
  	#define TEST_STRING_UART	"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
  	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 8002402:	213a      	movs	r1, #58	; 0x3a
 8002404:	4867      	ldr	r0, [pc, #412]	; (80025a4 <main+0x304>)
 8002406:	f7fe f9db 	bl	80007c0 <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 800240a:	f7fe fba9 	bl	8000b60 <collectSystemInfo>
#endif

	// Leds Testen
  	testPCB_Leds();
 800240e:	f7ff fa5d 	bl	80018cc <testPCB_Leds>
	testCockpit_Leds();
 8002412:	f7ff fa99 	bl	8001948 <testCockpit_Leds>

  	// Testen der Versorgungsspannung am Shutdown-Circuit
  	testSDC();
 8002416:	f7ff fb45 	bl	8001aa4 <testSDC>

  	// Alle Fehler Cockpit loeschen
  	cockpit_default();
 800241a:	f7ff faf9 	bl	8001a10 <cockpit_default>
  	// Setze LED Green
  	leuchten_out.GreenLed = 1;
 800241e:	4a62      	ldr	r2, [pc, #392]	; (80025a8 <main+0x308>)
 8002420:	7853      	ldrb	r3, [r2, #1]
 8002422:	f043 0310 	orr.w	r3, r3, #16
 8002426:	7053      	strb	r3, [r2, #1]
  	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 8002428:	4b5f      	ldr	r3, [pc, #380]	; (80025a8 <main+0x308>)
 800242a:	785b      	ldrb	r3, [r3, #1]
 800242c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002430:	b2db      	uxtb	r3, r3
 8002432:	461a      	mov	r2, r3
 8002434:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002438:	485c      	ldr	r0, [pc, #368]	; (80025ac <main+0x30c>)
 800243a:	f002 fcf5 	bl	8004e28 <HAL_GPIO_WritePin>

  	// Lese alle Eingaenge
  	readall_inputs();
 800243e:	f7fe ffe3 	bl	8001408 <readall_inputs>

    // Sendenachricht 0x123 mit Dummy-Daten fuellen
  	for (uint8_t j = 0; j < 8; j++)
 8002442:	2300      	movs	r3, #0
 8002444:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8002448:	e00f      	b.n	800246a <main+0x1ca>
  		TxData[j] = (j + 1);
 800244a:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800244e:	f897 20ef 	ldrb.w	r2, [r7, #239]	; 0xef
 8002452:	3201      	adds	r2, #1
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800245a:	443b      	add	r3, r7
 800245c:	f803 2c34 	strb.w	r2, [r3, #-52]
  	for (uint8_t j = 0; j < 8; j++)
 8002460:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8002464:	3301      	adds	r3, #1
 8002466:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800246a:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800246e:	2b07      	cmp	r3, #7
 8002470:	d9eb      	bls.n	800244a <main+0x1aa>

  	// Starte While-Schleife
#define MAINWHILE				"\nStarte While Schleife\n"
  	uartTransmit(MAINWHILE, sizeof(MAINWHILE));
 8002472:	2118      	movs	r1, #24
 8002474:	484e      	ldr	r0, [pc, #312]	; (80025b0 <main+0x310>)
 8002476:	f7fe f9a3 	bl	80007c0 <uartTransmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 800247a:	4b4e      	ldr	r3, [pc, #312]	; (80025b4 <main+0x314>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b01      	cmp	r3, #1
 8002482:	d10a      	bne.n	800249a <main+0x1fa>
		{
			count++;																	// Zaehler count hochzaehlen
 8002484:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8002488:	3301      	adds	r3, #1
 800248a:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
			millisekunden_flag_1 = 0;													// Setze Millisekunden-Flag zurueck
 800248e:	4b49      	ldr	r3, [pc, #292]	; (80025b4 <main+0x314>)
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]

			// Setze Flag start, nur wenn millisekunden Flag gesetzt war
			task = 1;
 8002494:	2301      	movs	r3, #1
 8002496:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
		}

		// PWM Oelstandsensor Kombiinstrument ausgeben
		pwm_oelstand(count);
 800249a:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fa80 	bl	80019a4 <pwm_oelstand>

		// Task wird alle 20 Millisekunden ausgefuehrt
		if (((count % 20) == 0) && (task == 1))
 80024a4:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 80024a8:	4b43      	ldr	r3, [pc, #268]	; (80025b8 <main+0x318>)
 80024aa:	fba3 1302 	umull	r1, r3, r3, r2
 80024ae:	0919      	lsrs	r1, r3, #4
 80024b0:	460b      	mov	r3, r1
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d12b      	bne.n	8002518 <main+0x278>
 80024c0:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d127      	bne.n	8002518 <main+0x278>
		{
			// Sende Nachricht Motor1
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMotor1, motor1.output, (uint32_t *)CAN_TX_MAILBOX0);
 80024c8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80024cc:	2301      	movs	r3, #1
 80024ce:	4a3b      	ldr	r2, [pc, #236]	; (80025bc <main+0x31c>)
 80024d0:	483b      	ldr	r0, [pc, #236]	; (80025c0 <main+0x320>)
 80024d2:	f001 fcef 	bl	8003eb4 <HAL_CAN_AddTxMessage>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 80024dc:	bf00      	nop
 80024de:	2101      	movs	r1, #1
 80024e0:	4837      	ldr	r0, [pc, #220]	; (80025c0 <main+0x320>)
 80024e2:	f001 fdb7 	bl	8004054 <HAL_CAN_IsTxMessagePending>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d0f8      	beq.n	80024de <main+0x23e>
			tmp[0] = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
			tmp[1] = 1;
 80024f2:	2301      	movs	r3, #1
 80024f4:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9

			status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
 80024f8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024fc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002500:	2301      	movs	r3, #1
 8002502:	482f      	ldr	r0, [pc, #188]	; (80025c0 <main+0x320>)
 8002504:	f001 fcd6 	bl	8003eb4 <HAL_CAN_AddTxMessage>
 8002508:	4603      	mov	r3, r0
 800250a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
			hal_error(status);
 800250e:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe fe8e 	bl	8001234 <hal_error>
		}

		// Task wird alle 100 Millisekunden ausgefuehrt
		if (((count % 100) == 0) && (task == 1))
 8002518:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 800251c:	4a29      	ldr	r2, [pc, #164]	; (80025c4 <main+0x324>)
 800251e:	fba2 1203 	umull	r1, r2, r2, r3
 8002522:	0952      	lsrs	r2, r2, #5
 8002524:	2164      	movs	r1, #100	; 0x64
 8002526:	fb01 f202 	mul.w	r2, r1, r2
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	b29b      	uxth	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d169      	bne.n	8002606 <main+0x366>
 8002532:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8002536:	2b01      	cmp	r3, #1
 8002538:	d165      	bne.n	8002606 <main+0x366>
		{
			// alle Inputs einlesen
			readall_inputs();
 800253a:	f7fe ff65 	bl	8001408 <readall_inputs>

			// Anlasser abfragen
			readAnlasser();
 800253e:	f7ff f991 	bl	8001864 <readAnlasser>

			// Bremse pruefen
			//readBrake();

			// Gaspedal pruefen
			gas_adc = readTrottle();
 8002542:	f7ff fadb 	bl	8001afc <readTrottle>
 8002546:	4603      	mov	r3, r0
 8002548:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec

			// Abfrage ob Mittelwertbildung
			if (gas_adc > 0)															// Wenn Gaspedal Plausible dann Mittelwertbildung
 800254c:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8002550:	2b00      	cmp	r3, #0
 8002552:	d03b      	beq.n	80025cc <main+0x32c>
			{
				// Mittelwert bilden (https://nestedsoftware.com/2018/03/20/calculating-a-moving-average-on-streaming-data-5a7k.22879.html)
				// Mittelwertbildung aus 10 Werten (Weniger die 10 verkleineren, Mehr die 10 vergroeßern)
				gas_mean = (gas_mean + ((gas_adc - gas_mean)/10));
 8002554:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	; 0xec
 8002558:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	4a1a      	ldr	r2, [pc, #104]	; (80025c8 <main+0x328>)
 8002560:	fb82 1203 	smull	r1, r2, r2, r3
 8002564:	1092      	asrs	r2, r2, #2
 8002566:	17db      	asrs	r3, r3, #31
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	b29a      	uxth	r2, r3
 800256c:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8002570:	4413      	add	r3, r2
 8002572:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
 8002576:	e02c      	b.n	80025d2 <main+0x332>
 8002578:	0800844c 	.word	0x0800844c
 800257c:	08008464 	.word	0x08008464
 8002580:	0800847c 	.word	0x0800847c
 8002584:	08008494 	.word	0x08008494
 8002588:	080084ac 	.word	0x080084ac
 800258c:	080084c4 	.word	0x080084c4
 8002590:	080084dc 	.word	0x080084dc
 8002594:	2000013c 	.word	0x2000013c
 8002598:	20000124 	.word	0x20000124
 800259c:	2000010c 	.word	0x2000010c
 80025a0:	20000188 	.word	0x20000188
 80025a4:	080083bc 	.word	0x080083bc
 80025a8:	20000050 	.word	0x20000050
 80025ac:	40020400 	.word	0x40020400
 80025b0:	080083f8 	.word	0x080083f8
 80025b4:	20000130 	.word	0x20000130
 80025b8:	cccccccd 	.word	0xcccccccd
 80025bc:	20000134 	.word	0x20000134
 80025c0:	200000c8 	.word	0x200000c8
 80025c4:	51eb851f 	.word	0x51eb851f
 80025c8:	66666667 	.word	0x66666667
			}
			else																		// Wenn Gaspedal unplausible oder Kupplung getreten
			{
				gas_mean = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
			}

			// Daten in Bamocarformat umwandeln
			tmp[0] = 0x90;
 80025d2:	2390      	movs	r3, #144	; 0x90
 80025d4:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
			tmp[1] = (gas_mean);
 80025d8:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			tmp[2] = ((gas_mean) >> 8);
 80025e2:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 80025e6:	0a1b      	lsrs	r3, r3, #8
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa

			// Drehmoment an Bamocar senden
			status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
 80025f0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80025f4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80025f8:	2301      	movs	r3, #1
 80025fa:	48bb      	ldr	r0, [pc, #748]	; (80028e8 <main+0x648>)
 80025fc:	f001 fc5a 	bl	8003eb4 <HAL_CAN_AddTxMessage>
 8002600:	4603      	mov	r3, r0
 8002602:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
			//hal_error(status);
		}

		// Task wird alle 200 Millisekunden ausgefuehrt
		if (((count % 200) == 0) && (task == 1))
 8002606:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 800260a:	4ab8      	ldr	r2, [pc, #736]	; (80028ec <main+0x64c>)
 800260c:	fba2 1203 	umull	r1, r2, r2, r3
 8002610:	0992      	lsrs	r2, r2, #6
 8002612:	21c8      	movs	r1, #200	; 0xc8
 8002614:	fb01 f202 	mul.w	r2, r1, r2
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	b29b      	uxth	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	f040 8129 	bne.w	8002874 <main+0x5d4>
 8002622:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8002626:	2b01      	cmp	r3, #1
 8002628:	f040 8124 	bne.w	8002874 <main+0x5d4>
		{
			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 800262c:	4bb0      	ldr	r3, [pc, #704]	; (80028f0 <main+0x650>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
			OutData[1] = highcurrent_out.high_out;
 8002634:	4baf      	ldr	r3, [pc, #700]	; (80028f4 <main+0x654>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
			OutData[2] = (leuchten_out.ledoutput >> 8);
 800263c:	4bae      	ldr	r3, [pc, #696]	; (80028f8 <main+0x658>)
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	b29b      	uxth	r3, r3
 8002644:	b2db      	uxtb	r3, r3
 8002646:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
			OutData[3] = leuchten_out.ledoutput;
 800264a:	4bab      	ldr	r3, [pc, #684]	; (80028f8 <main+0x658>)
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	b2db      	uxtb	r3, r3
 8002650:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
			OutData[4] = komfort_out.komfortoutput;
 8002654:	4ba9      	ldr	r3, [pc, #676]	; (80028fc <main+0x65c>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
			OutData[5] ++;
 800265c:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8002660:	3301      	adds	r3, #1
 8002662:	b2db      	uxtb	r3, r3
 8002664:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9

			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX0);
 8002668:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800266c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8002670:	2301      	movs	r3, #1
 8002672:	489d      	ldr	r0, [pc, #628]	; (80028e8 <main+0x648>)
 8002674:	f001 fc1e 	bl	8003eb4 <HAL_CAN_AddTxMessage>
 8002678:	4603      	mov	r3, r0
 800267a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
			//hal_error(status);

			// ADC-Werte einlesen Bremse und Temperaturen
			ADC_VAL[0] = ADC_Bremsdruck();
 800267e:	f7fe fbcd 	bl	8000e1c <ADC_Bremsdruck>
 8002682:	4603      	mov	r3, r0
 8002684:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
			ADC_VAL[1] = ADC_Bremsdrucktemperatur();
 8002688:	f7fe fd62 	bl	8001150 <ADC_Bremsdrucktemperatur>
 800268c:	4603      	mov	r3, r0
 800268e:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
			ADC_VAL[2] = ADC_STMTemperatur();
 8002692:	f7fe fd95 	bl	80011c0 <ADC_STMTemperatur>
 8002696:	4603      	mov	r3, r0
 8002698:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
			ADC_VAL[3] = ADC_PCBTemperatur();
 800269c:	f7fe fcb0 	bl	8001000 <ADC_PCBTemperatur>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] ++;
 80026a6:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 80026aa:	3301      	adds	r3, #1
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
			InData[1] = (system_in.systeminput >> 8);
 80026b2:	4b93      	ldr	r3, [pc, #588]	; (8002900 <main+0x660>)
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
			InData[2] = system_in.systeminput;
 80026c0:	4b8f      	ldr	r3, [pc, #572]	; (8002900 <main+0x660>)
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
			InData[3] = sdc_in.sdcinput;
 80026ca:	4b8e      	ldr	r3, [pc, #568]	; (8002904 <main+0x664>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
			InData[4] = (komfort_in.komfortinput >> 8);
 80026d2:	4b8d      	ldr	r3, [pc, #564]	; (8002908 <main+0x668>)
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	0a1b      	lsrs	r3, r3, #8
 80026d8:	b29b      	uxth	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
			InData[5] = komfort_in.komfortinput;
 80026e0:	4b89      	ldr	r3, [pc, #548]	; (8002908 <main+0x668>)
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1

			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 80026ea:	bf00      	nop
 80026ec:	2101      	movs	r1, #1
 80026ee:	487e      	ldr	r0, [pc, #504]	; (80028e8 <main+0x648>)
 80026f0:	f001 fcb0 	bl	8004054 <HAL_CAN_IsTxMessagePending>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d0f8      	beq.n	80026ec <main+0x44c>
			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX0);
 80026fa:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80026fe:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002702:	2301      	movs	r3, #1
 8002704:	4878      	ldr	r0, [pc, #480]	; (80028e8 <main+0x648>)
 8002706:	f001 fbd5 	bl	8003eb4 <HAL_CAN_AddTxMessage>
 800270a:	4603      	mov	r3, r0
 800270c:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
			//hal_error(status);

			// ADC-Werte einlesen Navi, Klima, KL15
			ADC_VAL[4] = ADC_KL15();
 8002710:	f7fe fbce 	bl	8000eb0 <ADC_KL15>
 8002714:	4603      	mov	r3, r0
 8002716:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
			ADC_VAL[5] = ADC_Klimaflap();
 800271a:	f7fe fc39 	bl	8000f90 <ADC_Klimaflap>
 800271e:	4603      	mov	r3, r0
 8002720:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
			ADC_VAL[6] = ADC_Info();
 8002724:	f7fe fcdc 	bl	80010e0 <ADC_Info>
 8002728:	4603      	mov	r3, r0
 800272a:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
			ADC_VAL[7] = ADC_Return();
 800272e:	f7fe fc9f 	bl	8001070 <ADC_Return>
 8002732:	4603      	mov	r3, r0
 8002734:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2

			// ADC-Werte umwandeln
			AnalogData[0] = ADC_VAL[4];
 8002738:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 800273c:	b2db      	uxtb	r3, r3
 800273e:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
			AnalogData[1] = (ADC_VAL[4] >> 8) | (ADC_VAL[0] << 4);
 8002742:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8002746:	0a1b      	lsrs	r3, r3, #8
 8002748:	b29b      	uxth	r3, r3
 800274a:	b25a      	sxtb	r2, r3
 800274c:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	b25b      	sxtb	r3, r3
 8002754:	4313      	orrs	r3, r2
 8002756:	b25b      	sxtb	r3, r3
 8002758:	b2db      	uxtb	r3, r3
 800275a:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
			AnalogData[2] = (ADC_VAL[0] >> 4);
 800275e:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	b29b      	uxth	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
			AnalogData[3] = ADC_VAL[6];
 800276c:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			AnalogData[4] = (ADC_VAL[6] >> 8) | (ADC_VAL[7] << 4);
 8002776:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	b29b      	uxth	r3, r3
 800277e:	b25a      	sxtb	r2, r3
 8002780:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	b25b      	sxtb	r3, r3
 8002788:	4313      	orrs	r3, r2
 800278a:	b25b      	sxtb	r3, r3
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
			AnalogData[5] = (ADC_VAL[7] >> 4);
 8002792:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002796:	091b      	lsrs	r3, r3, #4
 8002798:	b29b      	uxth	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
			AnalogData[6] = ADC_VAL[5];
 80027a0:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
			AnalogData[7] = (ADC_VAL[5] >> 8);
 80027aa:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80027ae:	0a1b      	lsrs	r3, r3, #8
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
//			// Befehl Fehler auslesen an Bamocar senden
//			status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
			//hal_error(status);

			// ADC-Werte einlesen Kuehlwassertemperatur
			ADC_VAL[8] = ADC_Kuhlwassertemperatur();
 80027b8:	f7fe fbb2 	bl	8000f20 <ADC_Kuhlwassertemperatur>
 80027bc:	4603      	mov	r3, r0
 80027be:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4

			// ADC-Werte umwandeln
			TempData[0] = ADC_VAL[2];
 80027c2:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
			TempData[1] = (ADC_VAL[2] >> 8) | (ADC_VAL[3] << 4);
 80027cc:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 80027d0:	0a1b      	lsrs	r3, r3, #8
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	b25a      	sxtb	r2, r3
 80027d6:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	b25b      	sxtb	r3, r3
 80027de:	4313      	orrs	r3, r2
 80027e0:	b25b      	sxtb	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
			TempData[2] = (ADC_VAL[3] >> 4);
 80027e8:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
			TempData[3] = ADC_VAL[8];
 80027f6:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			TempData[4] = (ADC_VAL[8] >> 8) | (ADC_VAL[1] << 4);
 8002800:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002804:	0a1b      	lsrs	r3, r3, #8
 8002806:	b29b      	uxth	r3, r3
 8002808:	b25a      	sxtb	r2, r3
 800280a:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	b25b      	sxtb	r3, r3
 8002812:	4313      	orrs	r3, r2
 8002814:	b25b      	sxtb	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			TempData[5] = (ADC_VAL[1] >> 4);
 800281c:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	b29b      	uxth	r3, r3
 8002824:	b2db      	uxtb	r3, r3
 8002826:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 800282a:	bf00      	nop
 800282c:	2101      	movs	r1, #1
 800282e:	482e      	ldr	r0, [pc, #184]	; (80028e8 <main+0x648>)
 8002830:	f001 fc10 	bl	8004054 <HAL_CAN_IsTxMessagePending>
 8002834:	4603      	mov	r3, r0
 8002836:	2b01      	cmp	r3, #1
 8002838:	d0f8      	beq.n	800282c <main+0x58c>
			// Befehl Fehler auslesen an Bamocar senden
			status = HAL_CAN_AddTxMessage(&hcan3, &TxTemperatur, TempData, (uint32_t *)CAN_TX_MAILBOX0);
 800283a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800283e:	4639      	mov	r1, r7
 8002840:	2301      	movs	r3, #1
 8002842:	4829      	ldr	r0, [pc, #164]	; (80028e8 <main+0x648>)
 8002844:	f001 fb36 	bl	8003eb4 <HAL_CAN_AddTxMessage>
 8002848:	4603      	mov	r3, r0
 800284a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 800284e:	bf00      	nop
 8002850:	2101      	movs	r1, #1
 8002852:	4825      	ldr	r0, [pc, #148]	; (80028e8 <main+0x648>)
 8002854:	f001 fbfe 	bl	8004054 <HAL_CAN_IsTxMessagePending>
 8002858:	4603      	mov	r3, r0
 800285a:	2b01      	cmp	r3, #1
 800285c:	d0f8      	beq.n	8002850 <main+0x5b0>
			status = HAL_CAN_AddTxMessage(&hcan3, &TxAnalog, AnalogData, (uint32_t *)CAN_TX_MAILBOX0);
 800285e:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8002862:	f107 0118 	add.w	r1, r7, #24
 8002866:	2301      	movs	r3, #1
 8002868:	481f      	ldr	r0, [pc, #124]	; (80028e8 <main+0x648>)
 800286a:	f001 fb23 	bl	8003eb4 <HAL_CAN_AddTxMessage>
 800286e:	4603      	mov	r3, r0
 8002870:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
		}

		if (((count % 400) == 0) && (task == 1))
 8002874:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8002878:	4a1c      	ldr	r2, [pc, #112]	; (80028ec <main+0x64c>)
 800287a:	fba2 1203 	umull	r1, r2, r2, r3
 800287e:	09d2      	lsrs	r2, r2, #7
 8002880:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002884:	fb01 f202 	mul.w	r2, r1, r2
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	b29b      	uxth	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d106      	bne.n	800289e <main+0x5fe>
 8002890:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8002894:	2b01      	cmp	r3, #1
 8002896:	d102      	bne.n	800289e <main+0x5fe>
		{
			// Variable count auf 0 zuruecksetzen
			count = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
		}

		// Zuruecksetzen Flag start
		task = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff


	  	// Task wird alle 5 Millisekunden ausgefuehrt
	  	if (millis() - lastcan >= 5)
 80028a4:	f7ff f80a 	bl	80018bc <millis>
 80028a8:	4602      	mov	r2, r0
 80028aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d973      	bls.n	800299c <main+0x6fc>
		{
	  		HAL_CAN_GetRxMessage(&hcan3, CAN_RX_FIFO0, &RxMessage, TxData);
 80028b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028b8:	4a14      	ldr	r2, [pc, #80]	; (800290c <main+0x66c>)
 80028ba:	2100      	movs	r1, #0
 80028bc:	480a      	ldr	r0, [pc, #40]	; (80028e8 <main+0x648>)
 80028be:	f001 fbed 	bl	800409c <HAL_CAN_GetRxMessage>

			// Wenn Nachricht ueber den CAN-Bus empfangen wurden
			if (can_change == 1)
 80028c2:	4b13      	ldr	r3, [pc, #76]	; (8002910 <main+0x670>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d167      	bne.n	800299c <main+0x6fc>
			{
				// Nachricht ID ueber UART ausgeben
				uartTransmitNumber(RxMessage.StdId, 16);
 80028cc:	4b0f      	ldr	r3, [pc, #60]	; (800290c <main+0x66c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2110      	movs	r1, #16
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fd ff88 	bl	80007e8 <uartTransmitNumber>
				uartTransmit("\t", 1);
 80028d8:	2101      	movs	r1, #1
 80028da:	480e      	ldr	r0, [pc, #56]	; (8002914 <main+0x674>)
 80028dc:	f7fd ff70 	bl	80007c0 <uartTransmit>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 80028e0:	2300      	movs	r3, #0
 80028e2:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
 80028e6:	e024      	b.n	8002932 <main+0x692>
 80028e8:	200000c8 	.word	0x200000c8
 80028ec:	51eb851f 	.word	0x51eb851f
 80028f0:	20000048 	.word	0x20000048
 80028f4:	2000004c 	.word	0x2000004c
 80028f8:	20000050 	.word	0x20000050
 80028fc:	20000054 	.word	0x20000054
 8002900:	2000003c 	.word	0x2000003c
 8002904:	20000040 	.word	0x20000040
 8002908:	20000044 	.word	0x20000044
 800290c:	200000f0 	.word	0x200000f0
 8002910:	20000131 	.word	0x20000131
 8002914:	08008410 	.word	0x08008410
				{
					uartTransmitNumber(RxData[i], 16);
 8002918:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 800291c:	4a2e      	ldr	r2, [pc, #184]	; (80029d8 <main+0x738>)
 800291e:	5cd3      	ldrb	r3, [r2, r3]
 8002920:	2110      	movs	r1, #16
 8002922:	4618      	mov	r0, r3
 8002924:	f7fd ff60 	bl	80007e8 <uartTransmitNumber>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 8002928:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 800292c:	3301      	adds	r3, #1
 800292e:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
 8002932:	f897 20ee 	ldrb.w	r2, [r7, #238]	; 0xee
 8002936:	4b29      	ldr	r3, [pc, #164]	; (80029dc <main+0x73c>)
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	429a      	cmp	r2, r3
 800293c:	d3ec      	bcc.n	8002918 <main+0x678>
				}
				uartTransmit("\n", 1);
 800293e:	2101      	movs	r1, #1
 8002940:	4827      	ldr	r0, [pc, #156]	; (80029e0 <main+0x740>)
 8002942:	f7fd ff3d 	bl	80007c0 <uartTransmit>

				// Sortieren der IDs nach Geraeten
				switch (RxMessage.StdId)
 8002946:	4b25      	ldr	r3, [pc, #148]	; (80029dc <main+0x73c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f240 1211 	movw	r2, #273	; 0x111
 800294e:	4293      	cmp	r3, r2
 8002950:	d00b      	beq.n	800296a <main+0x6ca>
 8002952:	f240 1281 	movw	r2, #385	; 0x181
 8002956:	4293      	cmp	r3, r2
 8002958:	d10c      	bne.n	8002974 <main+0x6d4>
				{
					case BAMOCAR_RX_ID:
						BAMOCAN_ID(&RxData[0], RxMessage.DLC);
 800295a:	4b20      	ldr	r3, [pc, #128]	; (80029dc <main+0x73c>)
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	b2db      	uxtb	r3, r3
 8002960:	4619      	mov	r1, r3
 8002962:	481d      	ldr	r0, [pc, #116]	; (80029d8 <main+0x738>)
 8002964:	f7fd fdf2 	bl	800054c <BAMOCAN_ID>
						break;
 8002968:	e009      	b.n	800297e <main+0x6de>
					case 0x111:
						uartTransmit("CAN-ID Computer config\n", 23);
 800296a:	2117      	movs	r1, #23
 800296c:	481d      	ldr	r0, [pc, #116]	; (80029e4 <main+0x744>)
 800296e:	f7fd ff27 	bl	80007c0 <uartTransmit>
						break;
 8002972:	e004      	b.n	800297e <main+0x6de>
					default:
						uartTransmit("CAN-ID nicht verfuegbar\n", 24);
 8002974:	2118      	movs	r1, #24
 8002976:	481c      	ldr	r0, [pc, #112]	; (80029e8 <main+0x748>)
 8002978:	f7fd ff22 	bl	80007c0 <uartTransmit>
						break;
 800297c:	bf00      	nop
				}

				// Drehzahl ausgeben
				TxData[2] = motor1.output[2];
 800297e:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <main+0x74c>)
 8002980:	789b      	ldrb	r3, [r3, #2]
 8002982:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
				TxData[3] = motor1.output[3];
 8002986:	4b19      	ldr	r3, [pc, #100]	; (80029ec <main+0x74c>)
 8002988:	78db      	ldrb	r3, [r3, #3]
 800298a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				lastcan = millis();
 800298e:	f7fe ff95 	bl	80018bc <millis>
 8002992:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4

				can_change = 0;
 8002996:	4b16      	ldr	r3, [pc, #88]	; (80029f0 <main+0x750>)
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
			}
		}

#ifdef DEBUG
		// Sende CAN Nachricht auf CAN-Bus / Teste CAN-BUS
		if (millis() - lastsendcan >= 1000)
 800299c:	f7fe ff8e 	bl	80018bc <millis>
 80029a0:	4602      	mov	r2, r0
 80029a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029ac:	f4ff ad65 	bcc.w	800247a <main+0x1da>
		{
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 80029b0:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80029b4:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80029b8:	2301      	movs	r3, #1
 80029ba:	480e      	ldr	r0, [pc, #56]	; (80029f4 <main+0x754>)
 80029bc:	f001 fa7a 	bl	8003eb4 <HAL_CAN_AddTxMessage>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
			//hal_error(status);
			lastsendcan = millis();
 80029c6:	f7fe ff79 	bl	80018bc <millis>
 80029ca:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

			HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 80029ce:	2180      	movs	r1, #128	; 0x80
 80029d0:	4809      	ldr	r0, [pc, #36]	; (80029f8 <main+0x758>)
 80029d2:	f002 fa42 	bl	8004e5a <HAL_GPIO_TogglePin>
		if (millisekunden_flag_1 == 1)
 80029d6:	e550      	b.n	800247a <main+0x1da>
 80029d8:	20000128 	.word	0x20000128
 80029dc:	200000f0 	.word	0x200000f0
 80029e0:	08008414 	.word	0x08008414
 80029e4:	08008418 	.word	0x08008418
 80029e8:	08008430 	.word	0x08008430
 80029ec:	20000134 	.word	0x20000134
 80029f0:	20000131 	.word	0x20000131
 80029f4:	200000c8 	.word	0x200000c8
 80029f8:	40020400 	.word	0x40020400

080029fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b094      	sub	sp, #80	; 0x50
 8002a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a02:	f107 031c 	add.w	r3, r7, #28
 8002a06:	2234      	movs	r2, #52	; 0x34
 8002a08:	2100      	movs	r1, #0
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f005 f9e6 	bl	8007ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a10:	f107 0308 	add.w	r3, r7, #8
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a20:	4b2c      	ldr	r3, [pc, #176]	; (8002ad4 <SystemClock_Config+0xd8>)
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	4a2b      	ldr	r2, [pc, #172]	; (8002ad4 <SystemClock_Config+0xd8>)
 8002a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2c:	4b29      	ldr	r3, [pc, #164]	; (8002ad4 <SystemClock_Config+0xd8>)
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a34:	607b      	str	r3, [r7, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a38:	4b27      	ldr	r3, [pc, #156]	; (8002ad8 <SystemClock_Config+0xdc>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a26      	ldr	r2, [pc, #152]	; (8002ad8 <SystemClock_Config+0xdc>)
 8002a3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <SystemClock_Config+0xdc>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a4c:	603b      	str	r3, [r7, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a50:	2301      	movs	r3, #1
 8002a52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a58:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002a64:	2319      	movs	r3, #25
 8002a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002a68:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002a6c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002a72:	2302      	movs	r3, #2
 8002a74:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002a76:	2302      	movs	r3, #2
 8002a78:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a7a:	f107 031c 	add.w	r3, r7, #28
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f002 fa56 	bl	8004f30 <HAL_RCC_OscConfig>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002a8a:	f000 f925 	bl	8002cd8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002a8e:	f002 f9ff 	bl	8004e90 <HAL_PWREx_EnableOverDrive>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002a98:	f000 f91e 	bl	8002cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a9c:	230f      	movs	r3, #15
 8002a9e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002aa8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002aac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ab2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002ab4:	f107 0308 	add.w	r3, r7, #8
 8002ab8:	2107      	movs	r1, #7
 8002aba:	4618      	mov	r0, r3
 8002abc:	f002 fce6 	bl	800548c <HAL_RCC_ClockConfig>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002ac6:	f000 f907 	bl	8002cd8 <Error_Handler>
  }
}
 8002aca:	bf00      	nop
 8002acc:	3750      	adds	r7, #80	; 0x50
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40007000 	.word	0x40007000

08002adc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Interrupts
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	; 0x28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &UART2_rxBuffer[uart_count], 1, 100);
 8002ae4:	4b52      	ldr	r3, [pc, #328]	; (8002c30 <HAL_UART_RxCpltCallback+0x154>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4b52      	ldr	r3, [pc, #328]	; (8002c34 <HAL_UART_RxCpltCallback+0x158>)
 8002aec:	18d1      	adds	r1, r2, r3
 8002aee:	2364      	movs	r3, #100	; 0x64
 8002af0:	2201      	movs	r2, #1
 8002af2:	4851      	ldr	r0, [pc, #324]	; (8002c38 <HAL_UART_RxCpltCallback+0x15c>)
 8002af4:	f003 fe8a 	bl	800680c <HAL_UART_Transmit>

	if (UART2_rxBuffer[uart_count] == 0x7F)
 8002af8:	4b4d      	ldr	r3, [pc, #308]	; (8002c30 <HAL_UART_RxCpltCallback+0x154>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b4d      	ldr	r3, [pc, #308]	; (8002c34 <HAL_UART_RxCpltCallback+0x158>)
 8002b00:	5c9b      	ldrb	r3, [r3, r2]
 8002b02:	2b7f      	cmp	r3, #127	; 0x7f
 8002b04:	d106      	bne.n	8002b14 <HAL_UART_RxCpltCallback+0x38>
	{
		uart_count--;
 8002b06:	4b4a      	ldr	r3, [pc, #296]	; (8002c30 <HAL_UART_RxCpltCallback+0x154>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	4b48      	ldr	r3, [pc, #288]	; (8002c30 <HAL_UART_RxCpltCallback+0x154>)
 8002b10:	701a      	strb	r2, [r3, #0]
 8002b12:	e005      	b.n	8002b20 <HAL_UART_RxCpltCallback+0x44>
	}
	else
	{
		uart_count++;
 8002b14:	4b46      	ldr	r3, [pc, #280]	; (8002c30 <HAL_UART_RxCpltCallback+0x154>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	4b44      	ldr	r3, [pc, #272]	; (8002c30 <HAL_UART_RxCpltCallback+0x154>)
 8002b1e:	701a      	strb	r2, [r3, #0]
	}

	if (UART2_rxBuffer[uart_count-1] == '\r')
 8002b20:	4b43      	ldr	r3, [pc, #268]	; (8002c30 <HAL_UART_RxCpltCallback+0x154>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	4a43      	ldr	r2, [pc, #268]	; (8002c34 <HAL_UART_RxCpltCallback+0x158>)
 8002b28:	5cd3      	ldrb	r3, [r2, r3]
 8002b2a:	2b0d      	cmp	r3, #13
 8002b2c:	d156      	bne.n	8002bdc <HAL_UART_RxCpltCallback+0x100>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)"\nEingabe OK\r\n", 13, 100);
 8002b2e:	2364      	movs	r3, #100	; 0x64
 8002b30:	220d      	movs	r2, #13
 8002b32:	4942      	ldr	r1, [pc, #264]	; (8002c3c <HAL_UART_RxCpltCallback+0x160>)
 8002b34:	4840      	ldr	r0, [pc, #256]	; (8002c38 <HAL_UART_RxCpltCallback+0x15c>)
 8002b36:	f003 fe69 	bl	800680c <HAL_UART_Transmit>
		if (UART2_rxBuffer[0] == 'R' && UART2_rxBuffer[1] == 'E' && UART2_rxBuffer[2] == 'S')
 8002b3a:	4b3e      	ldr	r3, [pc, #248]	; (8002c34 <HAL_UART_RxCpltCallback+0x158>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b52      	cmp	r3, #82	; 0x52
 8002b40:	d11e      	bne.n	8002b80 <HAL_UART_RxCpltCallback+0xa4>
 8002b42:	4b3c      	ldr	r3, [pc, #240]	; (8002c34 <HAL_UART_RxCpltCallback+0x158>)
 8002b44:	785b      	ldrb	r3, [r3, #1]
 8002b46:	2b45      	cmp	r3, #69	; 0x45
 8002b48:	d11a      	bne.n	8002b80 <HAL_UART_RxCpltCallback+0xa4>
 8002b4a:	4b3a      	ldr	r3, [pc, #232]	; (8002c34 <HAL_UART_RxCpltCallback+0x158>)
 8002b4c:	789b      	ldrb	r3, [r3, #2]
 8002b4e:	2b53      	cmp	r3, #83	; 0x53
 8002b50:	d116      	bne.n	8002b80 <HAL_UART_RxCpltCallback+0xa4>
		{
			uint8_t c[10] = {204, 205, 205, 205, 205, 205, 205, 205, 205, 185};
 8002b52:	4a3b      	ldr	r2, [pc, #236]	; (8002c40 <HAL_UART_RxCpltCallback+0x164>)
 8002b54:	f107 031c 	add.w	r3, r7, #28
 8002b58:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b5a:	c303      	stmia	r3!, {r0, r1}
 8002b5c:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)"\a", 1, 100);
 8002b5e:	2364      	movs	r3, #100	; 0x64
 8002b60:	2201      	movs	r2, #1
 8002b62:	4938      	ldr	r1, [pc, #224]	; (8002c44 <HAL_UART_RxCpltCallback+0x168>)
 8002b64:	4834      	ldr	r0, [pc, #208]	; (8002c38 <HAL_UART_RxCpltCallback+0x15c>)
 8002b66:	f003 fe51 	bl	800680c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, c, 10, 100);
 8002b6a:	f107 011c 	add.w	r1, r7, #28
 8002b6e:	2364      	movs	r3, #100	; 0x64
 8002b70:	220a      	movs	r2, #10
 8002b72:	4831      	ldr	r0, [pc, #196]	; (8002c38 <HAL_UART_RxCpltCallback+0x15c>)
 8002b74:	f003 fe4a 	bl	800680c <HAL_UART_Transmit>
			UART2_msg[0] = 1;
 8002b78:	4b33      	ldr	r3, [pc, #204]	; (8002c48 <HAL_UART_RxCpltCallback+0x16c>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]
		{
 8002b7e:	e02a      	b.n	8002bd6 <HAL_UART_RxCpltCallback+0xfa>
		}
		else if (UART2_rxBuffer[0] == 'N' && UART2_rxBuffer[1] == 'A' && UART2_rxBuffer[2] == 'V')
 8002b80:	4b2c      	ldr	r3, [pc, #176]	; (8002c34 <HAL_UART_RxCpltCallback+0x158>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b4e      	cmp	r3, #78	; 0x4e
 8002b86:	d10f      	bne.n	8002ba8 <HAL_UART_RxCpltCallback+0xcc>
 8002b88:	4b2a      	ldr	r3, [pc, #168]	; (8002c34 <HAL_UART_RxCpltCallback+0x158>)
 8002b8a:	785b      	ldrb	r3, [r3, #1]
 8002b8c:	2b41      	cmp	r3, #65	; 0x41
 8002b8e:	d10b      	bne.n	8002ba8 <HAL_UART_RxCpltCallback+0xcc>
 8002b90:	4b28      	ldr	r3, [pc, #160]	; (8002c34 <HAL_UART_RxCpltCallback+0x158>)
 8002b92:	789b      	ldrb	r3, [r3, #2]
 8002b94:	2b56      	cmp	r3, #86	; 0x56
 8002b96:	d107      	bne.n	8002ba8 <HAL_UART_RxCpltCallback+0xcc>
		{
			uartTransmit("Display\r\n", 9);
 8002b98:	2109      	movs	r1, #9
 8002b9a:	482c      	ldr	r0, [pc, #176]	; (8002c4c <HAL_UART_RxCpltCallback+0x170>)
 8002b9c:	f7fd fe10 	bl	80007c0 <uartTransmit>
			UART2_msg[0] = 2;
 8002ba0:	4b29      	ldr	r3, [pc, #164]	; (8002c48 <HAL_UART_RxCpltCallback+0x16c>)
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	701a      	strb	r2, [r3, #0]
 8002ba6:	e016      	b.n	8002bd6 <HAL_UART_RxCpltCallback+0xfa>
		}
		else
		{
			uint8_t c[10] = {204, 205, 205, 205, 205, 205, 205, 205, 205, 185};
 8002ba8:	4a25      	ldr	r2, [pc, #148]	; (8002c40 <HAL_UART_RxCpltCallback+0x164>)
 8002baa:	f107 0310 	add.w	r3, r7, #16
 8002bae:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bb0:	c303      	stmia	r3!, {r0, r1}
 8002bb2:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)"\a", 1, 100);
 8002bb4:	2364      	movs	r3, #100	; 0x64
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	4922      	ldr	r1, [pc, #136]	; (8002c44 <HAL_UART_RxCpltCallback+0x168>)
 8002bba:	481f      	ldr	r0, [pc, #124]	; (8002c38 <HAL_UART_RxCpltCallback+0x15c>)
 8002bbc:	f003 fe26 	bl	800680c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, c, 10, 100);
 8002bc0:	f107 0110 	add.w	r1, r7, #16
 8002bc4:	2364      	movs	r3, #100	; 0x64
 8002bc6:	220a      	movs	r2, #10
 8002bc8:	481b      	ldr	r0, [pc, #108]	; (8002c38 <HAL_UART_RxCpltCallback+0x15c>)
 8002bca:	f003 fe1f 	bl	800680c <HAL_UART_Transmit>
			uartTransmit("Falsche Eingabe\r\n", 17);
 8002bce:	2111      	movs	r1, #17
 8002bd0:	481f      	ldr	r0, [pc, #124]	; (8002c50 <HAL_UART_RxCpltCallback+0x174>)
 8002bd2:	f7fd fdf5 	bl	80007c0 <uartTransmit>
		}
		uart_count = 0;
 8002bd6:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <HAL_UART_RxCpltCallback+0x154>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
	}

	if (uart_count == 12)
 8002bdc:	4b14      	ldr	r3, [pc, #80]	; (8002c30 <HAL_UART_RxCpltCallback+0x154>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b0c      	cmp	r3, #12
 8002be2:	d117      	bne.n	8002c14 <HAL_UART_RxCpltCallback+0x138>
	{
		uint8_t tmp = 0x81;
 8002be4:	2381      	movs	r3, #129	; 0x81
 8002be6:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r\nEingabe Ung", 13, 100);
 8002be8:	2364      	movs	r3, #100	; 0x64
 8002bea:	220d      	movs	r2, #13
 8002bec:	4919      	ldr	r1, [pc, #100]	; (8002c54 <HAL_UART_RxCpltCallback+0x178>)
 8002bee:	4812      	ldr	r0, [pc, #72]	; (8002c38 <HAL_UART_RxCpltCallback+0x15c>)
 8002bf0:	f003 fe0c 	bl	800680c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, &tmp, 1, 100);
 8002bf4:	f107 010f 	add.w	r1, r7, #15
 8002bf8:	2364      	movs	r3, #100	; 0x64
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	480e      	ldr	r0, [pc, #56]	; (8002c38 <HAL_UART_RxCpltCallback+0x15c>)
 8002bfe:	f003 fe05 	bl	800680c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) "ltig\r\n", 6, 100);
 8002c02:	2364      	movs	r3, #100	; 0x64
 8002c04:	2206      	movs	r2, #6
 8002c06:	4914      	ldr	r1, [pc, #80]	; (8002c58 <HAL_UART_RxCpltCallback+0x17c>)
 8002c08:	480b      	ldr	r0, [pc, #44]	; (8002c38 <HAL_UART_RxCpltCallback+0x15c>)
 8002c0a:	f003 fdff 	bl	800680c <HAL_UART_Transmit>
		uart_count = 0;
 8002c0e:	4b08      	ldr	r3, [pc, #32]	; (8002c30 <HAL_UART_RxCpltCallback+0x154>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
	}
    HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer[uart_count], 1);
 8002c14:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <HAL_UART_RxCpltCallback+0x154>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <HAL_UART_RxCpltCallback+0x158>)
 8002c1c:	4413      	add	r3, r2
 8002c1e:	2201      	movs	r2, #1
 8002c20:	4619      	mov	r1, r3
 8002c22:	4805      	ldr	r0, [pc, #20]	; (8002c38 <HAL_UART_RxCpltCallback+0x15c>)
 8002c24:	f003 fe75 	bl	8006912 <HAL_UART_Receive_IT>
}
 8002c28:	bf00      	nop
 8002c2a:	3728      	adds	r7, #40	; 0x28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	20000124 	.word	0x20000124
 8002c34:	2000010c 	.word	0x2000010c
 8002c38:	20000188 	.word	0x20000188
 8002c3c:	080084f4 	.word	0x080084f4
 8002c40:	08008540 	.word	0x08008540
 8002c44:	08008504 	.word	0x08008504
 8002c48:	20000118 	.word	0x20000118
 8002c4c:	08008508 	.word	0x08008508
 8002c50:	08008514 	.word	0x08008514
 8002c54:	08008528 	.word	0x08008528
 8002c58:	08008538 	.word	0x08008538

08002c5c <HAL_CAN_RxFifo0MsgPendingCallback>:

// Can-Interrupt: Nachricht wartet
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
	// Nachricht aus Speicher auslesen
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 8002c64:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8002c66:	4a07      	ldr	r2, [pc, #28]	; (8002c84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8002c68:	2100      	movs	r1, #0
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f001 fa16 	bl	800409c <HAL_CAN_GetRxMessage>
	can_change = 1;
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	701a      	strb	r2, [r3, #0]
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000128 	.word	0x20000128
 8002c84:	200000f0 	.word	0x200000f0
 8002c88:	20000131 	.word	0x20000131

08002c8c <HAL_CAN_RxFifo0FullCallback>:

// Can-Interrupt: Fifo0 ist voll
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
	// Fifo0 voll
	uartTransmit("Fifo0 von CAN3 ist voll\n", 24);
 8002c94:	2118      	movs	r1, #24
 8002c96:	4804      	ldr	r0, [pc, #16]	; (8002ca8 <HAL_CAN_RxFifo0FullCallback+0x1c>)
 8002c98:	f7fd fd92 	bl	80007c0 <uartTransmit>

	Error_Handler();
 8002c9c:	f000 f81c 	bl	8002cd8 <Error_Handler>
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	0800854c 	.word	0x0800854c

08002cac <HAL_TIM_PeriodElapsedCallback>:

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)																	// Wenn Timer 6 den ueberlauf ausgeloest hat
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a06      	ldr	r2, [pc, #24]	; (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d102      	bne.n	8002cc2 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;														// Setze Millisekunden Flag
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	701a      	strb	r2, [r3, #0]
	}
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	2000013c 	.word	0x2000013c
 8002cd4:	20000130 	.word	0x20000130

08002cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002cdc:	b672      	cpsid	i
}
 8002cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8002ce0:	4a11      	ldr	r2, [pc, #68]	; (8002d28 <Error_Handler+0x50>)
 8002ce2:	7853      	ldrb	r3, [r2, #1]
 8002ce4:	f043 0308 	orr.w	r3, r3, #8
 8002ce8:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8002cea:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <Error_Handler+0x50>)
 8002cec:	785b      	ldrb	r3, [r3, #1]
 8002cee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	2104      	movs	r1, #4
 8002cf8:	480c      	ldr	r0, [pc, #48]	; (8002d2c <Error_Handler+0x54>)
 8002cfa:	f002 f895 	bl	8004e28 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8002cfe:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <Error_Handler+0x50>)
 8002d00:	7853      	ldrb	r3, [r2, #1]
 8002d02:	f36f 1304 	bfc	r3, #4, #1
 8002d06:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 8002d08:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <Error_Handler+0x50>)
 8002d0a:	785b      	ldrb	r3, [r3, #1]
 8002d0c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	461a      	mov	r2, r3
 8002d14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d18:	4804      	ldr	r0, [pc, #16]	; (8002d2c <Error_Handler+0x54>)
 8002d1a:	f002 f885 	bl	8004e28 <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 8002d1e:	2122      	movs	r1, #34	; 0x22
 8002d20:	4803      	ldr	r0, [pc, #12]	; (8002d30 <Error_Handler+0x58>)
 8002d22:	f7fd fd4d 	bl	80007c0 <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1);
 8002d26:	e7fe      	b.n	8002d26 <Error_Handler+0x4e>
 8002d28:	20000050 	.word	0x20000050
 8002d2c:	40020400 	.word	0x40020400
 8002d30:	08008568 	.word	0x08008568

08002d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d3a:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <HAL_MspInit+0x44>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	4a0e      	ldr	r2, [pc, #56]	; (8002d78 <HAL_MspInit+0x44>)
 8002d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d44:	6413      	str	r3, [r2, #64]	; 0x40
 8002d46:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <HAL_MspInit+0x44>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	607b      	str	r3, [r7, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d52:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HAL_MspInit+0x44>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	4a08      	ldr	r2, [pc, #32]	; (8002d78 <HAL_MspInit+0x44>)
 8002d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_MspInit+0x44>)
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800

08002d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d80:	e7fe      	b.n	8002d80 <NMI_Handler+0x4>

08002d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d82:	b480      	push	{r7}
 8002d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d86:	e7fe      	b.n	8002d86 <HardFault_Handler+0x4>

08002d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d8c:	e7fe      	b.n	8002d8c <MemManage_Handler+0x4>

08002d8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d92:	e7fe      	b.n	8002d92 <BusFault_Handler+0x4>

08002d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d98:	e7fe      	b.n	8002d98 <UsageFault_Handler+0x4>

08002d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002db6:	b480      	push	{r7}
 8002db8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dc8:	f000 f98e 	bl	80030e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dcc:	bf00      	nop
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002dd4:	4802      	ldr	r0, [pc, #8]	; (8002de0 <USART2_IRQHandler+0x10>)
 8002dd6:	f003 fde1 	bl	800699c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000188 	.word	0x20000188

08002de4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002de8:	4802      	ldr	r0, [pc, #8]	; (8002df4 <TIM6_DAC_IRQHandler+0x10>)
 8002dea:	f003 fa2d 	bl	8006248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	2000013c 	.word	0x2000013c

08002df8 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8002dfc:	4802      	ldr	r0, [pc, #8]	; (8002e08 <CAN3_RX0_IRQHandler+0x10>)
 8002dfe:	f001 fa85 	bl	800430c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	200000c8 	.word	0x200000c8

08002e0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e10:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <SystemInit+0x28>)
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e16:	4a07      	ldr	r2, [pc, #28]	; (8002e34 <SystemInit+0x28>)
 8002e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e20:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <SystemInit+0x28>)
 8002e22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e26:	609a      	str	r2, [r3, #8]
#endif
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e3e:	1d3b      	adds	r3, r7, #4
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002e48:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <MX_TIM6_Init+0x64>)
 8002e4a:	4a15      	ldr	r2, [pc, #84]	; (8002ea0 <MX_TIM6_Init+0x68>)
 8002e4c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27-1;
 8002e4e:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <MX_TIM6_Init+0x64>)
 8002e50:	221a      	movs	r2, #26
 8002e52:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e54:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <MX_TIM6_Init+0x64>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000-1;
 8002e5a:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <MX_TIM6_Init+0x64>)
 8002e5c:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002e60:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e62:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <MX_TIM6_Init+0x64>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002e68:	480c      	ldr	r0, [pc, #48]	; (8002e9c <MX_TIM6_Init+0x64>)
 8002e6a:	f003 f91d 	bl	80060a8 <HAL_TIM_Base_Init>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002e74:	f7ff ff30 	bl	8002cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002e80:	1d3b      	adds	r3, r7, #4
 8002e82:	4619      	mov	r1, r3
 8002e84:	4805      	ldr	r0, [pc, #20]	; (8002e9c <MX_TIM6_Init+0x64>)
 8002e86:	f003 fbc7 	bl	8006618 <HAL_TIMEx_MasterConfigSynchronization>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002e90:	f7ff ff22 	bl	8002cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002e94:	bf00      	nop
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	2000013c 	.word	0x2000013c
 8002ea0:	40001000 	.word	0x40001000

08002ea4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a0d      	ldr	r2, [pc, #52]	; (8002ee8 <HAL_TIM_Base_MspInit+0x44>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d113      	bne.n	8002ede <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002eb6:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <HAL_TIM_Base_MspInit+0x48>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	4a0c      	ldr	r2, [pc, #48]	; (8002eec <HAL_TIM_Base_MspInit+0x48>)
 8002ebc:	f043 0310 	orr.w	r3, r3, #16
 8002ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec2:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <HAL_TIM_Base_MspInit+0x48>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	2036      	movs	r0, #54	; 0x36
 8002ed4:	f001 fd1b 	bl	800490e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ed8:	2036      	movs	r0, #54	; 0x36
 8002eda:	f001 fd34 	bl	8004946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002ede:	bf00      	nop
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40001000 	.word	0x40001000
 8002eec:	40023800 	.word	0x40023800

08002ef0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ef4:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <MX_USART2_UART_Init+0x58>)
 8002ef6:	4a15      	ldr	r2, [pc, #84]	; (8002f4c <MX_USART2_UART_Init+0x5c>)
 8002ef8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002efa:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <MX_USART2_UART_Init+0x58>)
 8002efc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002f00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f02:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <MX_USART2_UART_Init+0x58>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f08:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <MX_USART2_UART_Init+0x58>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f0e:	4b0e      	ldr	r3, [pc, #56]	; (8002f48 <MX_USART2_UART_Init+0x58>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <MX_USART2_UART_Init+0x58>)
 8002f16:	220c      	movs	r2, #12
 8002f18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <MX_USART2_UART_Init+0x58>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f20:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <MX_USART2_UART_Init+0x58>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f26:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <MX_USART2_UART_Init+0x58>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <MX_USART2_UART_Init+0x58>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f32:	4805      	ldr	r0, [pc, #20]	; (8002f48 <MX_USART2_UART_Init+0x58>)
 8002f34:	f003 fc1c 	bl	8006770 <HAL_UART_Init>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002f3e:	f7ff fecb 	bl	8002cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000188 	.word	0x20000188
 8002f4c:	40004400 	.word	0x40004400

08002f50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b0ae      	sub	sp, #184	; 0xb8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	60da      	str	r2, [r3, #12]
 8002f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f68:	f107 0314 	add.w	r3, r7, #20
 8002f6c:	2290      	movs	r2, #144	; 0x90
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f004 ff33 	bl	8007ddc <memset>
  if(uartHandle->Instance==USART2)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a25      	ldr	r2, [pc, #148]	; (8003010 <HAL_UART_MspInit+0xc0>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d142      	bne.n	8003006 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f84:	2300      	movs	r3, #0
 8002f86:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f88:	f107 0314 	add.w	r3, r7, #20
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f002 fc63 	bl	8005858 <HAL_RCCEx_PeriphCLKConfig>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f98:	f7ff fe9e 	bl	8002cd8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f9c:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <HAL_UART_MspInit+0xc4>)
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	4a1c      	ldr	r2, [pc, #112]	; (8003014 <HAL_UART_MspInit+0xc4>)
 8002fa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa8:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <HAL_UART_MspInit+0xc4>)
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fb4:	4b17      	ldr	r3, [pc, #92]	; (8003014 <HAL_UART_MspInit+0xc4>)
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	4a16      	ldr	r2, [pc, #88]	; (8003014 <HAL_UART_MspInit+0xc4>)
 8002fba:	f043 0308 	orr.w	r3, r3, #8
 8002fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc0:	4b14      	ldr	r3, [pc, #80]	; (8003014 <HAL_UART_MspInit+0xc4>)
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART2TX_Pin|DEBUG_UART2RX_Pin;
 8002fcc:	2360      	movs	r3, #96	; 0x60
 8002fce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fe4:	2307      	movs	r3, #7
 8002fe6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4809      	ldr	r0, [pc, #36]	; (8003018 <HAL_UART_MspInit+0xc8>)
 8002ff2:	f001 fd55 	bl	8004aa0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	2026      	movs	r0, #38	; 0x26
 8002ffc:	f001 fc87 	bl	800490e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003000:	2026      	movs	r0, #38	; 0x26
 8003002:	f001 fca0 	bl	8004946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003006:	bf00      	nop
 8003008:	37b8      	adds	r7, #184	; 0xb8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40004400 	.word	0x40004400
 8003014:	40023800 	.word	0x40023800
 8003018:	40020c00 	.word	0x40020c00

0800301c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800301c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003054 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003020:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003022:	e003      	b.n	800302c <LoopCopyDataInit>

08003024 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003024:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003026:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003028:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800302a:	3104      	adds	r1, #4

0800302c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800302c:	480b      	ldr	r0, [pc, #44]	; (800305c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800302e:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003030:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003032:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003034:	d3f6      	bcc.n	8003024 <CopyDataInit>
  ldr  r2, =_sbss
 8003036:	4a0b      	ldr	r2, [pc, #44]	; (8003064 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003038:	e002      	b.n	8003040 <LoopFillZerobss>

0800303a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800303a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800303c:	f842 3b04 	str.w	r3, [r2], #4

08003040 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003040:	4b09      	ldr	r3, [pc, #36]	; (8003068 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003042:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003044:	d3f9      	bcc.n	800303a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003046:	f7ff fee1 	bl	8002e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800304a:	f004 fea3 	bl	8007d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800304e:	f7ff f927 	bl	80022a0 <main>
  bx  lr    
 8003052:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003054:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003058:	080085dc 	.word	0x080085dc
  ldr  r0, =_sdata
 800305c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003060:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003064:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003068:	20000214 	.word	0x20000214

0800306c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800306c:	e7fe      	b.n	800306c <ADC_IRQHandler>

0800306e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003072:	2003      	movs	r0, #3
 8003074:	f001 fc40 	bl	80048f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003078:	2000      	movs	r0, #0
 800307a:	f000 f805 	bl	8003088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800307e:	f7ff fe59 	bl	8002d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003090:	4b12      	ldr	r3, [pc, #72]	; (80030dc <HAL_InitTick+0x54>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <HAL_InitTick+0x58>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	4619      	mov	r1, r3
 800309a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800309e:	fbb3 f3f1 	udiv	r3, r3, r1
 80030a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a6:	4618      	mov	r0, r3
 80030a8:	f001 fc5b 	bl	8004962 <HAL_SYSTICK_Config>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e00e      	b.n	80030d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b0f      	cmp	r3, #15
 80030ba:	d80a      	bhi.n	80030d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030bc:	2200      	movs	r2, #0
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	f04f 30ff 	mov.w	r0, #4294967295
 80030c4:	f001 fc23 	bl	800490e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030c8:	4a06      	ldr	r2, [pc, #24]	; (80030e4 <HAL_InitTick+0x5c>)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	e000      	b.n	80030d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	20000000 	.word	0x20000000
 80030e0:	20000008 	.word	0x20000008
 80030e4:	20000004 	.word	0x20000004

080030e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_IncTick+0x20>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_IncTick+0x24>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4413      	add	r3, r2
 80030f8:	4a04      	ldr	r2, [pc, #16]	; (800310c <HAL_IncTick+0x24>)
 80030fa:	6013      	str	r3, [r2, #0]
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	20000008 	.word	0x20000008
 800310c:	20000210 	.word	0x20000210

08003110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return uwTick;
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <HAL_GetTick+0x14>)
 8003116:	681b      	ldr	r3, [r3, #0]
}
 8003118:	4618      	mov	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	20000210 	.word	0x20000210

08003128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003130:	f7ff ffee 	bl	8003110 <HAL_GetTick>
 8003134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003140:	d005      	beq.n	800314e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003142:	4b0a      	ldr	r3, [pc, #40]	; (800316c <HAL_Delay+0x44>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4413      	add	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800314e:	bf00      	nop
 8003150:	f7ff ffde 	bl	8003110 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	429a      	cmp	r2, r3
 800315e:	d8f7      	bhi.n	8003150 <HAL_Delay+0x28>
  {
  }
}
 8003160:	bf00      	nop
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20000008 	.word	0x20000008

08003170 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 8003174:	4b02      	ldr	r3, [pc, #8]	; (8003180 <HAL_GetHalVersion+0x10>)
}
 8003176:	4618      	mov	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	01030000 	.word	0x01030000

08003184 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8003188:	4b03      	ldr	r3, [pc, #12]	; (8003198 <HAL_GetREVID+0x14>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	0c1b      	lsrs	r3, r3, #16
}
 800318e:	4618      	mov	r0, r3
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	e0042000 	.word	0xe0042000

0800319c <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80031a0:	4b04      	ldr	r3, [pc, #16]	; (80031b4 <HAL_GetDEVID+0x18>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	e0042000 	.word	0xe0042000

080031b8 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80031bc:	4b03      	ldr	r3, [pc, #12]	; (80031cc <HAL_GetUIDw0+0x14>)
 80031be:	681b      	ldr	r3, [r3, #0]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	1ff0f420 	.word	0x1ff0f420

080031d0 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80031d4:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <HAL_GetUIDw1+0x14>)
 80031d6:	681b      	ldr	r3, [r3, #0]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	1ff0f424 	.word	0x1ff0f424

080031e8 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <HAL_GetUIDw2+0x14>)
 80031ee:	681b      	ldr	r3, [r3, #0]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	1ff0f428 	.word	0x1ff0f428

08003200 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e031      	b.n	800327a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	2b00      	cmp	r3, #0
 800321c:	d109      	bne.n	8003232 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7fe fd32 	bl	8001c88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	2b00      	cmp	r3, #0
 800323c:	d116      	bne.n	800326c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003242:	4b10      	ldr	r3, [pc, #64]	; (8003284 <HAL_ADC_Init+0x84>)
 8003244:	4013      	ands	r3, r2
 8003246:	f043 0202 	orr.w	r2, r3, #2
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 fb0a 	bl	8003868 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f023 0303 	bic.w	r3, r3, #3
 8003262:	f043 0201 	orr.w	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	641a      	str	r2, [r3, #64]	; 0x40
 800326a:	e001      	b.n	8003270 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003278:	7bfb      	ldrb	r3, [r7, #15]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	ffffeefd 	.word	0xffffeefd

08003288 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_ADC_Start+0x1a>
 800329e:	2302      	movs	r3, #2
 80032a0:	e0ad      	b.n	80033fe <HAL_ADC_Start+0x176>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d018      	beq.n	80032ea <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0201 	orr.w	r2, r2, #1
 80032c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80032c8:	4b50      	ldr	r3, [pc, #320]	; (800340c <HAL_ADC_Start+0x184>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a50      	ldr	r2, [pc, #320]	; (8003410 <HAL_ADC_Start+0x188>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	0c9a      	lsrs	r2, r3, #18
 80032d4:	4613      	mov	r3, r2
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	4413      	add	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80032dc:	e002      	b.n	80032e4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f9      	bne.n	80032de <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d175      	bne.n	80033e4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032fc:	4b45      	ldr	r3, [pc, #276]	; (8003414 <HAL_ADC_Start+0x18c>)
 80032fe:	4013      	ands	r3, r2
 8003300:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003312:	2b00      	cmp	r3, #0
 8003314:	d007      	beq.n	8003326 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800331e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800332e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003332:	d106      	bne.n	8003342 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003338:	f023 0206 	bic.w	r2, r3, #6
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	645a      	str	r2, [r3, #68]	; 0x44
 8003340:	e002      	b.n	8003348 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003358:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800335a:	4b2f      	ldr	r3, [pc, #188]	; (8003418 <HAL_ADC_Start+0x190>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 031f 	and.w	r3, r3, #31
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10f      	bne.n	8003386 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d143      	bne.n	80033fc <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003382:	609a      	str	r2, [r3, #8]
 8003384:	e03a      	b.n	80033fc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a24      	ldr	r2, [pc, #144]	; (800341c <HAL_ADC_Start+0x194>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d10e      	bne.n	80033ae <HAL_ADC_Start+0x126>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d107      	bne.n	80033ae <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033ac:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80033ae:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <HAL_ADC_Start+0x190>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d120      	bne.n	80033fc <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a18      	ldr	r2, [pc, #96]	; (8003420 <HAL_ADC_Start+0x198>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d11b      	bne.n	80033fc <HAL_ADC_Start+0x174>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d114      	bne.n	80033fc <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033e0:	609a      	str	r2, [r3, #8]
 80033e2:	e00b      	b.n	80033fc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	f043 0210 	orr.w	r2, r3, #16
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f4:	f043 0201 	orr.w	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	20000000 	.word	0x20000000
 8003410:	431bde83 	.word	0x431bde83
 8003414:	fffff8fe 	.word	0xfffff8fe
 8003418:	40012300 	.word	0x40012300
 800341c:	40012000 	.word	0x40012000
 8003420:	40012200 	.word	0x40012200

08003424 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_ADC_Stop+0x16>
 8003436:	2302      	movs	r3, #2
 8003438:	e01f      	b.n	800347a <HAL_ADC_Stop+0x56>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0201 	bic.w	r2, r2, #1
 8003450:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d107      	bne.n	8003470 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003464:	4b08      	ldr	r3, [pc, #32]	; (8003488 <HAL_ADC_Stop+0x64>)
 8003466:	4013      	ands	r3, r2
 8003468:	f043 0201 	orr.w	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	ffffeefe 	.word	0xffffeefe

0800348c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a8:	d113      	bne.n	80034d2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80034b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b8:	d10b      	bne.n	80034d2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f043 0220 	orr.w	r2, r3, #32
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e063      	b.n	800359a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80034d2:	f7ff fe1d 	bl	8003110 <HAL_GetTick>
 80034d6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034d8:	e021      	b.n	800351e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e0:	d01d      	beq.n	800351e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d007      	beq.n	80034f8 <HAL_ADC_PollForConversion+0x6c>
 80034e8:	f7ff fe12 	bl	8003110 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d212      	bcs.n	800351e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b02      	cmp	r3, #2
 8003504:	d00b      	beq.n	800351e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f043 0204 	orr.w	r2, r3, #4
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e03d      	b.n	800359a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b02      	cmp	r3, #2
 800352a:	d1d6      	bne.n	80034da <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0212 	mvn.w	r2, #18
 8003534:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d123      	bne.n	8003598 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003554:	2b00      	cmp	r3, #0
 8003556:	d11f      	bne.n	8003598 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003562:	2b00      	cmp	r3, #0
 8003564:	d006      	beq.n	8003574 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003570:	2b00      	cmp	r3, #0
 8003572:	d111      	bne.n	8003598 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d105      	bne.n	8003598 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	f043 0201 	orr.w	r2, r3, #1
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x1c>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e136      	b.n	8003846 <HAL_ADC_ConfigChannel+0x28a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b09      	cmp	r3, #9
 80035e6:	d93a      	bls.n	800365e <HAL_ADC_ConfigChannel+0xa2>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035f0:	d035      	beq.n	800365e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68d9      	ldr	r1, [r3, #12]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	461a      	mov	r2, r3
 8003600:	4613      	mov	r3, r2
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	4413      	add	r3, r2
 8003606:	3b1e      	subs	r3, #30
 8003608:	2207      	movs	r2, #7
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43da      	mvns	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	400a      	ands	r2, r1
 8003616:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a8d      	ldr	r2, [pc, #564]	; (8003854 <HAL_ADC_ConfigChannel+0x298>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d10a      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68d9      	ldr	r1, [r3, #12]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	061a      	lsls	r2, r3, #24
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003636:	e035      	b.n	80036a4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68d9      	ldr	r1, [r3, #12]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	b29b      	uxth	r3, r3
 8003648:	4618      	mov	r0, r3
 800364a:	4603      	mov	r3, r0
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	4403      	add	r3, r0
 8003650:	3b1e      	subs	r3, #30
 8003652:	409a      	lsls	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800365c:	e022      	b.n	80036a4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6919      	ldr	r1, [r3, #16]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	b29b      	uxth	r3, r3
 800366a:	461a      	mov	r2, r3
 800366c:	4613      	mov	r3, r2
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	4413      	add	r3, r2
 8003672:	2207      	movs	r2, #7
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43da      	mvns	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	400a      	ands	r2, r1
 8003680:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6919      	ldr	r1, [r3, #16]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	b29b      	uxth	r3, r3
 8003692:	4618      	mov	r0, r3
 8003694:	4603      	mov	r3, r0
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	4403      	add	r3, r0
 800369a:	409a      	lsls	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b06      	cmp	r3, #6
 80036aa:	d824      	bhi.n	80036f6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	3b05      	subs	r3, #5
 80036be:	221f      	movs	r2, #31
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43da      	mvns	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	400a      	ands	r2, r1
 80036cc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	4618      	mov	r0, r3
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	3b05      	subs	r3, #5
 80036e8:	fa00 f203 	lsl.w	r2, r0, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	635a      	str	r2, [r3, #52]	; 0x34
 80036f4:	e04c      	b.n	8003790 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b0c      	cmp	r3, #12
 80036fc:	d824      	bhi.n	8003748 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	3b23      	subs	r3, #35	; 0x23
 8003710:	221f      	movs	r2, #31
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43da      	mvns	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	400a      	ands	r2, r1
 800371e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	b29b      	uxth	r3, r3
 800372c:	4618      	mov	r0, r3
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	3b23      	subs	r3, #35	; 0x23
 800373a:	fa00 f203 	lsl.w	r2, r0, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	631a      	str	r2, [r3, #48]	; 0x30
 8003746:	e023      	b.n	8003790 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	3b41      	subs	r3, #65	; 0x41
 800375a:	221f      	movs	r2, #31
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43da      	mvns	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	400a      	ands	r2, r1
 8003768:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	b29b      	uxth	r3, r3
 8003776:	4618      	mov	r0, r3
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	3b41      	subs	r3, #65	; 0x41
 8003784:	fa00 f203 	lsl.w	r2, r0, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a30      	ldr	r2, [pc, #192]	; (8003858 <HAL_ADC_ConfigChannel+0x29c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d10a      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x1f4>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037a2:	d105      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80037a4:	4b2d      	ldr	r3, [pc, #180]	; (800385c <HAL_ADC_ConfigChannel+0x2a0>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	4a2c      	ldr	r2, [pc, #176]	; (800385c <HAL_ADC_ConfigChannel+0x2a0>)
 80037aa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80037ae:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a28      	ldr	r2, [pc, #160]	; (8003858 <HAL_ADC_ConfigChannel+0x29c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d10f      	bne.n	80037da <HAL_ADC_ConfigChannel+0x21e>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b12      	cmp	r3, #18
 80037c0:	d10b      	bne.n	80037da <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80037c2:	4b26      	ldr	r3, [pc, #152]	; (800385c <HAL_ADC_ConfigChannel+0x2a0>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	4a25      	ldr	r2, [pc, #148]	; (800385c <HAL_ADC_ConfigChannel+0x2a0>)
 80037c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80037cc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80037ce:	4b23      	ldr	r3, [pc, #140]	; (800385c <HAL_ADC_ConfigChannel+0x2a0>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4a22      	ldr	r2, [pc, #136]	; (800385c <HAL_ADC_ConfigChannel+0x2a0>)
 80037d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037d8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a1e      	ldr	r2, [pc, #120]	; (8003858 <HAL_ADC_ConfigChannel+0x29c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d12b      	bne.n	800383c <HAL_ADC_ConfigChannel+0x280>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1a      	ldr	r2, [pc, #104]	; (8003854 <HAL_ADC_ConfigChannel+0x298>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d003      	beq.n	80037f6 <HAL_ADC_ConfigChannel+0x23a>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b11      	cmp	r3, #17
 80037f4:	d122      	bne.n	800383c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80037f6:	4b19      	ldr	r3, [pc, #100]	; (800385c <HAL_ADC_ConfigChannel+0x2a0>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4a18      	ldr	r2, [pc, #96]	; (800385c <HAL_ADC_ConfigChannel+0x2a0>)
 80037fc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003800:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003802:	4b16      	ldr	r3, [pc, #88]	; (800385c <HAL_ADC_ConfigChannel+0x2a0>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	4a15      	ldr	r2, [pc, #84]	; (800385c <HAL_ADC_ConfigChannel+0x2a0>)
 8003808:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800380c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a10      	ldr	r2, [pc, #64]	; (8003854 <HAL_ADC_ConfigChannel+0x298>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d111      	bne.n	800383c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003818:	4b11      	ldr	r3, [pc, #68]	; (8003860 <HAL_ADC_ConfigChannel+0x2a4>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a11      	ldr	r2, [pc, #68]	; (8003864 <HAL_ADC_ConfigChannel+0x2a8>)
 800381e:	fba2 2303 	umull	r2, r3, r2, r3
 8003822:	0c9a      	lsrs	r2, r3, #18
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800382e:	e002      	b.n	8003836 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	3b01      	subs	r3, #1
 8003834:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1f9      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	10000012 	.word	0x10000012
 8003858:	40012000 	.word	0x40012000
 800385c:	40012300 	.word	0x40012300
 8003860:	20000000 	.word	0x20000000
 8003864:	431bde83 	.word	0x431bde83

08003868 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003870:	4b78      	ldr	r3, [pc, #480]	; (8003a54 <ADC_Init+0x1ec>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	4a77      	ldr	r2, [pc, #476]	; (8003a54 <ADC_Init+0x1ec>)
 8003876:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800387a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800387c:	4b75      	ldr	r3, [pc, #468]	; (8003a54 <ADC_Init+0x1ec>)
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	4973      	ldr	r1, [pc, #460]	; (8003a54 <ADC_Init+0x1ec>)
 8003886:	4313      	orrs	r3, r2
 8003888:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003898:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6859      	ldr	r1, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	021a      	lsls	r2, r3, #8
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80038bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689a      	ldr	r2, [r3, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6899      	ldr	r1, [r3, #8]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f6:	4a58      	ldr	r2, [pc, #352]	; (8003a58 <ADC_Init+0x1f0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d022      	beq.n	8003942 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800390a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6899      	ldr	r1, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800392c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6899      	ldr	r1, [r3, #8]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	609a      	str	r2, [r3, #8]
 8003940:	e00f      	b.n	8003962 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003950:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003960:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0202 	bic.w	r2, r2, #2
 8003970:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6899      	ldr	r1, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	005a      	lsls	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 3020 	ldrb.w	r3, [r3, #32]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d01b      	beq.n	80039c8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800399e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80039ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6859      	ldr	r1, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	3b01      	subs	r3, #1
 80039bc:	035a      	lsls	r2, r3, #13
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	605a      	str	r2, [r3, #4]
 80039c6:	e007      	b.n	80039d8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80039e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	051a      	lsls	r2, r3, #20
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6899      	ldr	r1, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a1a:	025a      	lsls	r2, r3, #9
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6899      	ldr	r1, [r3, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	029a      	lsls	r2, r3, #10
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	609a      	str	r2, [r3, #8]
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	40012300 	.word	0x40012300
 8003a58:	0f000001 	.word	0x0f000001

08003a5c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e0ed      	b.n	8003c4a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d102      	bne.n	8003a80 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fe f9e8 	bl	8001e50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a90:	f7ff fb3e 	bl	8003110 <HAL_GetTick>
 8003a94:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a96:	e012      	b.n	8003abe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a98:	f7ff fb3a 	bl	8003110 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b0a      	cmp	r3, #10
 8003aa4:	d90b      	bls.n	8003abe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2205      	movs	r2, #5
 8003ab6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e0c5      	b.n	8003c4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0e5      	beq.n	8003a98 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0202 	bic.w	r2, r2, #2
 8003ada:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003adc:	f7ff fb18 	bl	8003110 <HAL_GetTick>
 8003ae0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ae2:	e012      	b.n	8003b0a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ae4:	f7ff fb14 	bl	8003110 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b0a      	cmp	r3, #10
 8003af0:	d90b      	bls.n	8003b0a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2205      	movs	r2, #5
 8003b02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e09f      	b.n	8003c4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1e5      	bne.n	8003ae4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	7e1b      	ldrb	r3, [r3, #24]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d108      	bne.n	8003b32 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	e007      	b.n	8003b42 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	7e5b      	ldrb	r3, [r3, #25]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d108      	bne.n	8003b5c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	e007      	b.n	8003b6c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	7e9b      	ldrb	r3, [r3, #26]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d108      	bne.n	8003b86 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0220 	orr.w	r2, r2, #32
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	e007      	b.n	8003b96 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0220 	bic.w	r2, r2, #32
 8003b94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	7edb      	ldrb	r3, [r3, #27]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d108      	bne.n	8003bb0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0210 	bic.w	r2, r2, #16
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	e007      	b.n	8003bc0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0210 	orr.w	r2, r2, #16
 8003bbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	7f1b      	ldrb	r3, [r3, #28]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d108      	bne.n	8003bda <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0208 	orr.w	r2, r2, #8
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	e007      	b.n	8003bea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0208 	bic.w	r2, r2, #8
 8003be8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	7f5b      	ldrb	r3, [r3, #29]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d108      	bne.n	8003c04 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f042 0204 	orr.w	r2, r2, #4
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	e007      	b.n	8003c14 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0204 	bic.w	r2, r2, #4
 8003c12:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	ea42 0103 	orr.w	r1, r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	1e5a      	subs	r2, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c6a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003c6c:	7cfb      	ldrb	r3, [r7, #19]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d003      	beq.n	8003c7a <HAL_CAN_ConfigFilter+0x26>
 8003c72:	7cfb      	ldrb	r3, [r7, #19]
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	f040 80c7 	bne.w	8003e08 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a69      	ldr	r2, [pc, #420]	; (8003e24 <HAL_CAN_ConfigFilter+0x1d0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d001      	beq.n	8003c88 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8003c84:	4b68      	ldr	r3, [pc, #416]	; (8003e28 <HAL_CAN_ConfigFilter+0x1d4>)
 8003c86:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c8e:	f043 0201 	orr.w	r2, r3, #1
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	4a63      	ldr	r2, [pc, #396]	; (8003e28 <HAL_CAN_ConfigFilter+0x1d4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d111      	bne.n	8003cc4 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ca6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	021b      	lsls	r3, r3, #8
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	f003 031f 	and.w	r3, r3, #31
 8003ccc:	2201      	movs	r2, #1
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	401a      	ands	r2, r3
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d123      	bne.n	8003d36 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	401a      	ands	r2, r3
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d10:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	3248      	adds	r2, #72	; 0x48
 8003d16:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d2a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d2c:	6979      	ldr	r1, [r7, #20]
 8003d2e:	3348      	adds	r3, #72	; 0x48
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	440b      	add	r3, r1
 8003d34:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d122      	bne.n	8003d84 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003d5e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	3248      	adds	r2, #72	; 0x48
 8003d64:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d78:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d7a:	6979      	ldr	r1, [r7, #20]
 8003d7c:	3348      	adds	r3, #72	; 0x48
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	440b      	add	r3, r1
 8003d82:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d109      	bne.n	8003da0 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	43db      	mvns	r3, r3
 8003d96:	401a      	ands	r2, r3
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003d9e:	e007      	b.n	8003db0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	431a      	orrs	r2, r3
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d109      	bne.n	8003dcc <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	401a      	ands	r2, r3
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003dca:	e007      	b.n	8003ddc <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d107      	bne.n	8003df4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	431a      	orrs	r2, r3
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003dfa:	f023 0201 	bic.w	r2, r3, #1
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	e006      	b.n	8003e16 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
  }
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	371c      	adds	r7, #28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40003400 	.word	0x40003400
 8003e28:	40006400 	.word	0x40006400

08003e2c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d12e      	bne.n	8003e9e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0201 	bic.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e58:	f7ff f95a 	bl	8003110 <HAL_GetTick>
 8003e5c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003e5e:	e012      	b.n	8003e86 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e60:	f7ff f956 	bl	8003110 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b0a      	cmp	r3, #10
 8003e6c:	d90b      	bls.n	8003e86 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2205      	movs	r2, #5
 8003e7e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e012      	b.n	8003eac <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e5      	bne.n	8003e60 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	e006      	b.n	8003eac <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
  }
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b089      	sub	sp, #36	; 0x24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ec8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ed2:	7ffb      	ldrb	r3, [r7, #31]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d003      	beq.n	8003ee0 <HAL_CAN_AddTxMessage+0x2c>
 8003ed8:	7ffb      	ldrb	r3, [r7, #31]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	f040 80ad 	bne.w	800403a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10a      	bne.n	8003f00 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d105      	bne.n	8003f00 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 8095 	beq.w	800402a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	0e1b      	lsrs	r3, r3, #24
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	409a      	lsls	r2, r3
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10d      	bne.n	8003f38 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f26:	68f9      	ldr	r1, [r7, #12]
 8003f28:	6809      	ldr	r1, [r1, #0]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	3318      	adds	r3, #24
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	440b      	add	r3, r1
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	e00f      	b.n	8003f58 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f42:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f48:	68f9      	ldr	r1, [r7, #12]
 8003f4a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003f4c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	3318      	adds	r3, #24
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	440b      	add	r3, r1
 8003f56:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6819      	ldr	r1, [r3, #0]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	3318      	adds	r3, #24
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	440b      	add	r3, r1
 8003f68:	3304      	adds	r3, #4
 8003f6a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	7d1b      	ldrb	r3, [r3, #20]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d111      	bne.n	8003f98 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	3318      	adds	r3, #24
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	4413      	add	r3, r2
 8003f80:	3304      	adds	r3, #4
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	6811      	ldr	r1, [r2, #0]
 8003f88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	3318      	adds	r3, #24
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	440b      	add	r3, r1
 8003f94:	3304      	adds	r3, #4
 8003f96:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3307      	adds	r3, #7
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	061a      	lsls	r2, r3, #24
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3306      	adds	r3, #6
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	041b      	lsls	r3, r3, #16
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3305      	adds	r3, #5
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	021b      	lsls	r3, r3, #8
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	3204      	adds	r2, #4
 8003fb8:	7812      	ldrb	r2, [r2, #0]
 8003fba:	4610      	mov	r0, r2
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	6811      	ldr	r1, [r2, #0]
 8003fc0:	ea43 0200 	orr.w	r2, r3, r0
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	440b      	add	r3, r1
 8003fca:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003fce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3303      	adds	r3, #3
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	061a      	lsls	r2, r3, #24
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3302      	adds	r3, #2
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	041b      	lsls	r3, r3, #16
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	021b      	lsls	r3, r3, #8
 8003fea:	4313      	orrs	r3, r2
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	7812      	ldrb	r2, [r2, #0]
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	6811      	ldr	r1, [r2, #0]
 8003ff6:	ea43 0200 	orr.w	r2, r3, r0
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	440b      	add	r3, r1
 8004000:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004004:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	3318      	adds	r3, #24
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	4413      	add	r3, r2
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	6811      	ldr	r1, [r2, #0]
 8004018:	f043 0201 	orr.w	r2, r3, #1
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	3318      	adds	r3, #24
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	440b      	add	r3, r1
 8004024:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	e00e      	b.n	8004048 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e006      	b.n	8004048 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
  }
}
 8004048:	4618      	mov	r0, r3
 800404a:	3724      	adds	r7, #36	; 0x24
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004068:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800406a:	7afb      	ldrb	r3, [r7, #11]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d002      	beq.n	8004076 <HAL_CAN_IsTxMessagePending+0x22>
 8004070:	7afb      	ldrb	r3, [r7, #11]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d10b      	bne.n	800408e <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	069b      	lsls	r3, r3, #26
 8004080:	401a      	ands	r2, r3
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	069b      	lsls	r3, r3, #26
 8004086:	429a      	cmp	r2, r3
 8004088:	d001      	beq.n	800408e <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800408a:	2301      	movs	r3, #1
 800408c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 800408e:	68fb      	ldr	r3, [r7, #12]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
 80040a8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040b0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80040b2:	7dfb      	ldrb	r3, [r7, #23]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d003      	beq.n	80040c0 <HAL_CAN_GetRxMessage+0x24>
 80040b8:	7dfb      	ldrb	r3, [r7, #23]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	f040 80f3 	bne.w	80042a6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10e      	bne.n	80040e4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d116      	bne.n	8004102 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0e7      	b.n	80042b4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d107      	bne.n	8004102 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e0d8      	b.n	80042b4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	331b      	adds	r3, #27
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	4413      	add	r3, r2
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0204 	and.w	r2, r3, #4
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10c      	bne.n	800413a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	331b      	adds	r3, #27
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	4413      	add	r3, r2
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	0d5b      	lsrs	r3, r3, #21
 8004130:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	e00b      	b.n	8004152 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	331b      	adds	r3, #27
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	4413      	add	r3, r2
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	08db      	lsrs	r3, r3, #3
 800414a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	331b      	adds	r3, #27
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	4413      	add	r3, r2
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0202 	and.w	r2, r3, #2
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	331b      	adds	r3, #27
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	4413      	add	r3, r2
 8004174:	3304      	adds	r3, #4
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 020f 	and.w	r2, r3, #15
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	331b      	adds	r3, #27
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	4413      	add	r3, r2
 800418c:	3304      	adds	r3, #4
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	0a1b      	lsrs	r3, r3, #8
 8004192:	b2da      	uxtb	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	331b      	adds	r3, #27
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	4413      	add	r3, r2
 80041a4:	3304      	adds	r3, #4
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	0c1b      	lsrs	r3, r3, #16
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	0a1a      	lsrs	r2, r3, #8
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	3301      	adds	r3, #1
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	0c1a      	lsrs	r2, r3, #16
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	3302      	adds	r3, #2
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	4413      	add	r3, r2
 8004204:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	0e1a      	lsrs	r2, r3, #24
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	3303      	adds	r3, #3
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	4413      	add	r3, r2
 800421e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	3304      	adds	r3, #4
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	4413      	add	r3, r2
 8004236:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	0a1a      	lsrs	r2, r3, #8
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	3305      	adds	r3, #5
 8004242:	b2d2      	uxtb	r2, r2
 8004244:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	4413      	add	r3, r2
 8004250:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	0c1a      	lsrs	r2, r3, #16
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	3306      	adds	r3, #6
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	4413      	add	r3, r2
 800426a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	0e1a      	lsrs	r2, r3, #24
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	3307      	adds	r3, #7
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d108      	bne.n	8004292 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0220 	orr.w	r2, r2, #32
 800428e:	60da      	str	r2, [r3, #12]
 8004290:	e007      	b.n	80042a2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f042 0220 	orr.w	r2, r2, #32
 80042a0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	e006      	b.n	80042b4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
  }
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	371c      	adds	r7, #28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042d0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d002      	beq.n	80042de <HAL_CAN_ActivateNotification+0x1e>
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d109      	bne.n	80042f2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6959      	ldr	r1, [r3, #20]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	e006      	b.n	8004300 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
  }
}
 8004300:	4618      	mov	r0, r3
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b08a      	sub	sp, #40	; 0x28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004314:	2300      	movs	r3, #0
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d07c      	beq.n	800444c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d023      	beq.n	80043a4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2201      	movs	r2, #1
 8004362:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f983 	bl	800467a <HAL_CAN_TxMailbox0CompleteCallback>
 8004374:	e016      	b.n	80043a4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d004      	beq.n	800438a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
 8004388:	e00c      	b.n	80043a4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b00      	cmp	r3, #0
 8004392:	d004      	beq.n	800439e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
 800439c:	e002      	b.n	80043a4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f989 	bl	80046b6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d024      	beq.n	80043f8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f963 	bl	800468e <HAL_CAN_TxMailbox1CompleteCallback>
 80043c8:	e016      	b.n	80043f8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d004      	beq.n	80043de <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
 80043dc:	e00c      	b.n	80043f8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d004      	beq.n	80043f2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24
 80043f0:	e002      	b.n	80043f8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f969 	bl	80046ca <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d024      	beq.n	800444c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800440a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f943 	bl	80046a2 <HAL_CAN_TxMailbox2CompleteCallback>
 800441c:	e016      	b.n	800444c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d004      	beq.n	8004432 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
 8004430:	e00c      	b.n	800444c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d004      	beq.n	8004446 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
 8004444:	e002      	b.n	800444c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f949 	bl	80046de <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00c      	beq.n	8004470 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f003 0310 	and.w	r3, r3, #16
 800445c:	2b00      	cmp	r3, #0
 800445e:	d007      	beq.n	8004470 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004466:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2210      	movs	r2, #16
 800446e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	f003 0304 	and.w	r3, r3, #4
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00b      	beq.n	8004492 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f003 0308 	and.w	r3, r3, #8
 8004480:	2b00      	cmp	r3, #0
 8004482:	d006      	beq.n	8004492 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2208      	movs	r2, #8
 800448a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f7fe fbfd 	bl	8002c8c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d009      	beq.n	80044b0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7fe fbd6 	bl	8002c5c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00c      	beq.n	80044d4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f003 0310 	and.w	r3, r3, #16
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d007      	beq.n	80044d4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2210      	movs	r2, #16
 80044d2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00b      	beq.n	80044f6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d006      	beq.n	80044f6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2208      	movs	r2, #8
 80044ee:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f908 	bl	8004706 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	f003 0310 	and.w	r3, r3, #16
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d009      	beq.n	8004514 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f8ef 	bl	80046f2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00b      	beq.n	8004536 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	f003 0310 	and.w	r3, r3, #16
 8004524:	2b00      	cmp	r3, #0
 8004526:	d006      	beq.n	8004536 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2210      	movs	r2, #16
 800452e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f8f2 	bl	800471a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00b      	beq.n	8004558 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b00      	cmp	r3, #0
 8004548:	d006      	beq.n	8004558 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2208      	movs	r2, #8
 8004550:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f8eb 	bl	800472e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d07b      	beq.n	800465a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	d072      	beq.n	8004652 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004572:	2b00      	cmp	r3, #0
 8004574:	d008      	beq.n	8004588 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	f043 0301 	orr.w	r3, r3, #1
 8004586:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800458e:	2b00      	cmp	r3, #0
 8004590:	d008      	beq.n	80045a4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	f043 0302 	orr.w	r3, r3, #2
 80045a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d008      	beq.n	80045c0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	f043 0304 	orr.w	r3, r3, #4
 80045be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d043      	beq.n	8004652 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d03e      	beq.n	8004652 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045da:	2b60      	cmp	r3, #96	; 0x60
 80045dc:	d02b      	beq.n	8004636 <HAL_CAN_IRQHandler+0x32a>
 80045de:	2b60      	cmp	r3, #96	; 0x60
 80045e0:	d82e      	bhi.n	8004640 <HAL_CAN_IRQHandler+0x334>
 80045e2:	2b50      	cmp	r3, #80	; 0x50
 80045e4:	d022      	beq.n	800462c <HAL_CAN_IRQHandler+0x320>
 80045e6:	2b50      	cmp	r3, #80	; 0x50
 80045e8:	d82a      	bhi.n	8004640 <HAL_CAN_IRQHandler+0x334>
 80045ea:	2b40      	cmp	r3, #64	; 0x40
 80045ec:	d019      	beq.n	8004622 <HAL_CAN_IRQHandler+0x316>
 80045ee:	2b40      	cmp	r3, #64	; 0x40
 80045f0:	d826      	bhi.n	8004640 <HAL_CAN_IRQHandler+0x334>
 80045f2:	2b30      	cmp	r3, #48	; 0x30
 80045f4:	d010      	beq.n	8004618 <HAL_CAN_IRQHandler+0x30c>
 80045f6:	2b30      	cmp	r3, #48	; 0x30
 80045f8:	d822      	bhi.n	8004640 <HAL_CAN_IRQHandler+0x334>
 80045fa:	2b10      	cmp	r3, #16
 80045fc:	d002      	beq.n	8004604 <HAL_CAN_IRQHandler+0x2f8>
 80045fe:	2b20      	cmp	r3, #32
 8004600:	d005      	beq.n	800460e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004602:	e01d      	b.n	8004640 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	f043 0308 	orr.w	r3, r3, #8
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800460c:	e019      	b.n	8004642 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	f043 0310 	orr.w	r3, r3, #16
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004616:	e014      	b.n	8004642 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	f043 0320 	orr.w	r3, r3, #32
 800461e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004620:	e00f      	b.n	8004642 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800462a:	e00a      	b.n	8004642 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004632:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004634:	e005      	b.n	8004642 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800463e:	e000      	b.n	8004642 <HAL_CAN_IRQHandler+0x336>
            break;
 8004640:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	699a      	ldr	r2, [r3, #24]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004650:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2204      	movs	r2, #4
 8004658:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	2b00      	cmp	r3, #0
 800465e:	d008      	beq.n	8004672 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f868 	bl	8004742 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004672:	bf00      	nop
 8004674:	3728      	adds	r7, #40	; 0x28
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
	...

08004758 <__NVIC_SetPriorityGrouping>:
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004768:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <__NVIC_SetPriorityGrouping+0x40>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004774:	4013      	ands	r3, r2
 8004776:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004780:	4b06      	ldr	r3, [pc, #24]	; (800479c <__NVIC_SetPriorityGrouping+0x44>)
 8004782:	4313      	orrs	r3, r2
 8004784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004786:	4a04      	ldr	r2, [pc, #16]	; (8004798 <__NVIC_SetPriorityGrouping+0x40>)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	60d3      	str	r3, [r2, #12]
}
 800478c:	bf00      	nop
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	e000ed00 	.word	0xe000ed00
 800479c:	05fa0000 	.word	0x05fa0000

080047a0 <__NVIC_GetPriorityGrouping>:
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047a4:	4b04      	ldr	r3, [pc, #16]	; (80047b8 <__NVIC_GetPriorityGrouping+0x18>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	0a1b      	lsrs	r3, r3, #8
 80047aa:	f003 0307 	and.w	r3, r3, #7
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	e000ed00 	.word	0xe000ed00

080047bc <__NVIC_EnableIRQ>:
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	db0b      	blt.n	80047e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ce:	79fb      	ldrb	r3, [r7, #7]
 80047d0:	f003 021f 	and.w	r2, r3, #31
 80047d4:	4907      	ldr	r1, [pc, #28]	; (80047f4 <__NVIC_EnableIRQ+0x38>)
 80047d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047da:	095b      	lsrs	r3, r3, #5
 80047dc:	2001      	movs	r0, #1
 80047de:	fa00 f202 	lsl.w	r2, r0, r2
 80047e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	e000e100 	.word	0xe000e100

080047f8 <__NVIC_SetPriority>:
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	4603      	mov	r3, r0
 8004800:	6039      	str	r1, [r7, #0]
 8004802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004808:	2b00      	cmp	r3, #0
 800480a:	db0a      	blt.n	8004822 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	b2da      	uxtb	r2, r3
 8004810:	490c      	ldr	r1, [pc, #48]	; (8004844 <__NVIC_SetPriority+0x4c>)
 8004812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004816:	0112      	lsls	r2, r2, #4
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	440b      	add	r3, r1
 800481c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004820:	e00a      	b.n	8004838 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	b2da      	uxtb	r2, r3
 8004826:	4908      	ldr	r1, [pc, #32]	; (8004848 <__NVIC_SetPriority+0x50>)
 8004828:	79fb      	ldrb	r3, [r7, #7]
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	3b04      	subs	r3, #4
 8004830:	0112      	lsls	r2, r2, #4
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	440b      	add	r3, r1
 8004836:	761a      	strb	r2, [r3, #24]
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	e000e100 	.word	0xe000e100
 8004848:	e000ed00 	.word	0xe000ed00

0800484c <NVIC_EncodePriority>:
{
 800484c:	b480      	push	{r7}
 800484e:	b089      	sub	sp, #36	; 0x24
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	f1c3 0307 	rsb	r3, r3, #7
 8004866:	2b04      	cmp	r3, #4
 8004868:	bf28      	it	cs
 800486a:	2304      	movcs	r3, #4
 800486c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	3304      	adds	r3, #4
 8004872:	2b06      	cmp	r3, #6
 8004874:	d902      	bls.n	800487c <NVIC_EncodePriority+0x30>
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	3b03      	subs	r3, #3
 800487a:	e000      	b.n	800487e <NVIC_EncodePriority+0x32>
 800487c:	2300      	movs	r3, #0
 800487e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004880:	f04f 32ff 	mov.w	r2, #4294967295
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	43da      	mvns	r2, r3
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	401a      	ands	r2, r3
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004894:	f04f 31ff 	mov.w	r1, #4294967295
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	fa01 f303 	lsl.w	r3, r1, r3
 800489e:	43d9      	mvns	r1, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a4:	4313      	orrs	r3, r2
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3724      	adds	r7, #36	; 0x24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <SysTick_Config>:
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3b01      	subs	r3, #1
 80048c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048c4:	d301      	bcc.n	80048ca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80048c6:	2301      	movs	r3, #1
 80048c8:	e00f      	b.n	80048ea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048ca:	4a0a      	ldr	r2, [pc, #40]	; (80048f4 <SysTick_Config+0x40>)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048d2:	210f      	movs	r1, #15
 80048d4:	f04f 30ff 	mov.w	r0, #4294967295
 80048d8:	f7ff ff8e 	bl	80047f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048dc:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <SysTick_Config+0x40>)
 80048de:	2200      	movs	r2, #0
 80048e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048e2:	4b04      	ldr	r3, [pc, #16]	; (80048f4 <SysTick_Config+0x40>)
 80048e4:	2207      	movs	r2, #7
 80048e6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	e000e010 	.word	0xe000e010

080048f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff ff29 	bl	8004758 <__NVIC_SetPriorityGrouping>
}
 8004906:	bf00      	nop
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800490e:	b580      	push	{r7, lr}
 8004910:	b086      	sub	sp, #24
 8004912:	af00      	add	r7, sp, #0
 8004914:	4603      	mov	r3, r0
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	607a      	str	r2, [r7, #4]
 800491a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800491c:	2300      	movs	r3, #0
 800491e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004920:	f7ff ff3e 	bl	80047a0 <__NVIC_GetPriorityGrouping>
 8004924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	6978      	ldr	r0, [r7, #20]
 800492c:	f7ff ff8e 	bl	800484c <NVIC_EncodePriority>
 8004930:	4602      	mov	r2, r0
 8004932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004936:	4611      	mov	r1, r2
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff ff5d 	bl	80047f8 <__NVIC_SetPriority>
}
 800493e:	bf00      	nop
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b082      	sub	sp, #8
 800494a:	af00      	add	r7, sp, #0
 800494c:	4603      	mov	r3, r0
 800494e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff ff31 	bl	80047bc <__NVIC_EnableIRQ>
}
 800495a:	bf00      	nop
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7ff ffa2 	bl	80048b4 <SysTick_Config>
 8004970:	4603      	mov	r3, r0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b084      	sub	sp, #16
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004986:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004988:	f7fe fbc2 	bl	8003110 <HAL_GetTick>
 800498c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d008      	beq.n	80049ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2280      	movs	r2, #128	; 0x80
 800499e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e052      	b.n	8004a52 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0216 	bic.w	r2, r2, #22
 80049ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695a      	ldr	r2, [r3, #20]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d103      	bne.n	80049dc <HAL_DMA_Abort+0x62>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d007      	beq.n	80049ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0208 	bic.w	r2, r2, #8
 80049ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0201 	bic.w	r2, r2, #1
 80049fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049fc:	e013      	b.n	8004a26 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049fe:	f7fe fb87 	bl	8003110 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b05      	cmp	r3, #5
 8004a0a:	d90c      	bls.n	8004a26 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2203      	movs	r2, #3
 8004a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e015      	b.n	8004a52 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e4      	bne.n	80049fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a38:	223f      	movs	r2, #63	; 0x3f
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d004      	beq.n	8004a78 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2280      	movs	r2, #128	; 0x80
 8004a72:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e00c      	b.n	8004a92 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2205      	movs	r2, #5
 8004a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0201 	bic.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
	...

08004aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b089      	sub	sp, #36	; 0x24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004aba:	2300      	movs	r3, #0
 8004abc:	61fb      	str	r3, [r7, #28]
 8004abe:	e175      	b.n	8004dac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	f040 8164 	bne.w	8004da6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d005      	beq.n	8004af6 <HAL_GPIO_Init+0x56>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d130      	bne.n	8004b58 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	2203      	movs	r2, #3
 8004b02:	fa02 f303 	lsl.w	r3, r2, r3
 8004b06:	43db      	mvns	r3, r3
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	43db      	mvns	r3, r3
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	091b      	lsrs	r3, r3, #4
 8004b42:	f003 0201 	and.w	r2, r3, #1
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f003 0303 	and.w	r3, r3, #3
 8004b60:	2b03      	cmp	r3, #3
 8004b62:	d017      	beq.n	8004b94 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	2203      	movs	r2, #3
 8004b70:	fa02 f303 	lsl.w	r3, r2, r3
 8004b74:	43db      	mvns	r3, r3
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f003 0303 	and.w	r3, r3, #3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d123      	bne.n	8004be8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	08da      	lsrs	r2, r3, #3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	3208      	adds	r2, #8
 8004ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	220f      	movs	r2, #15
 8004bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbc:	43db      	mvns	r3, r3
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	691a      	ldr	r2, [r3, #16]
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	08da      	lsrs	r2, r3, #3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3208      	adds	r2, #8
 8004be2:	69b9      	ldr	r1, [r7, #24]
 8004be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	2203      	movs	r2, #3
 8004bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f003 0203 	and.w	r2, r3, #3
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 80be 	beq.w	8004da6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c2a:	4b66      	ldr	r3, [pc, #408]	; (8004dc4 <HAL_GPIO_Init+0x324>)
 8004c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2e:	4a65      	ldr	r2, [pc, #404]	; (8004dc4 <HAL_GPIO_Init+0x324>)
 8004c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c34:	6453      	str	r3, [r2, #68]	; 0x44
 8004c36:	4b63      	ldr	r3, [pc, #396]	; (8004dc4 <HAL_GPIO_Init+0x324>)
 8004c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004c42:	4a61      	ldr	r2, [pc, #388]	; (8004dc8 <HAL_GPIO_Init+0x328>)
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	089b      	lsrs	r3, r3, #2
 8004c48:	3302      	adds	r3, #2
 8004c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	220f      	movs	r2, #15
 8004c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	4013      	ands	r3, r2
 8004c64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a58      	ldr	r2, [pc, #352]	; (8004dcc <HAL_GPIO_Init+0x32c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d037      	beq.n	8004cde <HAL_GPIO_Init+0x23e>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a57      	ldr	r2, [pc, #348]	; (8004dd0 <HAL_GPIO_Init+0x330>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d031      	beq.n	8004cda <HAL_GPIO_Init+0x23a>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a56      	ldr	r2, [pc, #344]	; (8004dd4 <HAL_GPIO_Init+0x334>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d02b      	beq.n	8004cd6 <HAL_GPIO_Init+0x236>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a55      	ldr	r2, [pc, #340]	; (8004dd8 <HAL_GPIO_Init+0x338>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d025      	beq.n	8004cd2 <HAL_GPIO_Init+0x232>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a54      	ldr	r2, [pc, #336]	; (8004ddc <HAL_GPIO_Init+0x33c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d01f      	beq.n	8004cce <HAL_GPIO_Init+0x22e>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a53      	ldr	r2, [pc, #332]	; (8004de0 <HAL_GPIO_Init+0x340>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d019      	beq.n	8004cca <HAL_GPIO_Init+0x22a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a52      	ldr	r2, [pc, #328]	; (8004de4 <HAL_GPIO_Init+0x344>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d013      	beq.n	8004cc6 <HAL_GPIO_Init+0x226>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a51      	ldr	r2, [pc, #324]	; (8004de8 <HAL_GPIO_Init+0x348>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00d      	beq.n	8004cc2 <HAL_GPIO_Init+0x222>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a50      	ldr	r2, [pc, #320]	; (8004dec <HAL_GPIO_Init+0x34c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d007      	beq.n	8004cbe <HAL_GPIO_Init+0x21e>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a4f      	ldr	r2, [pc, #316]	; (8004df0 <HAL_GPIO_Init+0x350>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d101      	bne.n	8004cba <HAL_GPIO_Init+0x21a>
 8004cb6:	2309      	movs	r3, #9
 8004cb8:	e012      	b.n	8004ce0 <HAL_GPIO_Init+0x240>
 8004cba:	230a      	movs	r3, #10
 8004cbc:	e010      	b.n	8004ce0 <HAL_GPIO_Init+0x240>
 8004cbe:	2308      	movs	r3, #8
 8004cc0:	e00e      	b.n	8004ce0 <HAL_GPIO_Init+0x240>
 8004cc2:	2307      	movs	r3, #7
 8004cc4:	e00c      	b.n	8004ce0 <HAL_GPIO_Init+0x240>
 8004cc6:	2306      	movs	r3, #6
 8004cc8:	e00a      	b.n	8004ce0 <HAL_GPIO_Init+0x240>
 8004cca:	2305      	movs	r3, #5
 8004ccc:	e008      	b.n	8004ce0 <HAL_GPIO_Init+0x240>
 8004cce:	2304      	movs	r3, #4
 8004cd0:	e006      	b.n	8004ce0 <HAL_GPIO_Init+0x240>
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e004      	b.n	8004ce0 <HAL_GPIO_Init+0x240>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	e002      	b.n	8004ce0 <HAL_GPIO_Init+0x240>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <HAL_GPIO_Init+0x240>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	69fa      	ldr	r2, [r7, #28]
 8004ce2:	f002 0203 	and.w	r2, r2, #3
 8004ce6:	0092      	lsls	r2, r2, #2
 8004ce8:	4093      	lsls	r3, r2
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004cf0:	4935      	ldr	r1, [pc, #212]	; (8004dc8 <HAL_GPIO_Init+0x328>)
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	089b      	lsrs	r3, r3, #2
 8004cf6:	3302      	adds	r3, #2
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cfe:	4b3d      	ldr	r3, [pc, #244]	; (8004df4 <HAL_GPIO_Init+0x354>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	43db      	mvns	r3, r3
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d22:	4a34      	ldr	r2, [pc, #208]	; (8004df4 <HAL_GPIO_Init+0x354>)
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d28:	4b32      	ldr	r3, [pc, #200]	; (8004df4 <HAL_GPIO_Init+0x354>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	43db      	mvns	r3, r3
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	4013      	ands	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d4c:	4a29      	ldr	r2, [pc, #164]	; (8004df4 <HAL_GPIO_Init+0x354>)
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d52:	4b28      	ldr	r3, [pc, #160]	; (8004df4 <HAL_GPIO_Init+0x354>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	43db      	mvns	r3, r3
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d76:	4a1f      	ldr	r2, [pc, #124]	; (8004df4 <HAL_GPIO_Init+0x354>)
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d7c:	4b1d      	ldr	r3, [pc, #116]	; (8004df4 <HAL_GPIO_Init+0x354>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	43db      	mvns	r3, r3
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004da0:	4a14      	ldr	r2, [pc, #80]	; (8004df4 <HAL_GPIO_Init+0x354>)
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	3301      	adds	r3, #1
 8004daa:	61fb      	str	r3, [r7, #28]
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	2b0f      	cmp	r3, #15
 8004db0:	f67f ae86 	bls.w	8004ac0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop
 8004db8:	3724      	adds	r7, #36	; 0x24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	40013800 	.word	0x40013800
 8004dcc:	40020000 	.word	0x40020000
 8004dd0:	40020400 	.word	0x40020400
 8004dd4:	40020800 	.word	0x40020800
 8004dd8:	40020c00 	.word	0x40020c00
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	40021400 	.word	0x40021400
 8004de4:	40021800 	.word	0x40021800
 8004de8:	40021c00 	.word	0x40021c00
 8004dec:	40022000 	.word	0x40022000
 8004df0:	40022400 	.word	0x40022400
 8004df4:	40013c00 	.word	0x40013c00

08004df8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	460b      	mov	r3, r1
 8004e02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	887b      	ldrh	r3, [r7, #2]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e10:	2301      	movs	r3, #1
 8004e12:	73fb      	strb	r3, [r7, #15]
 8004e14:	e001      	b.n	8004e1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e16:	2300      	movs	r3, #0
 8004e18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	460b      	mov	r3, r1
 8004e32:	807b      	strh	r3, [r7, #2]
 8004e34:	4613      	mov	r3, r2
 8004e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e38:	787b      	ldrb	r3, [r7, #1]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e3e:	887a      	ldrh	r2, [r7, #2]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004e44:	e003      	b.n	8004e4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004e46:	887b      	ldrh	r3, [r7, #2]
 8004e48:	041a      	lsls	r2, r3, #16
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	619a      	str	r2, [r3, #24]
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b085      	sub	sp, #20
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	460b      	mov	r3, r1
 8004e64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e6c:	887a      	ldrh	r2, [r7, #2]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4013      	ands	r3, r2
 8004e72:	041a      	lsls	r2, r3, #16
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	43d9      	mvns	r1, r3
 8004e78:	887b      	ldrh	r3, [r7, #2]
 8004e7a:	400b      	ands	r3, r1
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	619a      	str	r2, [r3, #24]
}
 8004e82:	bf00      	nop
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
	...

08004e90 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004e96:	2300      	movs	r3, #0
 8004e98:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004e9a:	4b23      	ldr	r3, [pc, #140]	; (8004f28 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	4a22      	ldr	r2, [pc, #136]	; (8004f28 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ea6:	4b20      	ldr	r3, [pc, #128]	; (8004f28 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eae:	603b      	str	r3, [r7, #0]
 8004eb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004eb2:	4b1e      	ldr	r3, [pc, #120]	; (8004f2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a1d      	ldr	r2, [pc, #116]	; (8004f2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ebc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ebe:	f7fe f927 	bl	8003110 <HAL_GetTick>
 8004ec2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ec4:	e009      	b.n	8004eda <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ec6:	f7fe f923 	bl	8003110 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ed4:	d901      	bls.n	8004eda <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e022      	b.n	8004f20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004eda:	4b14      	ldr	r3, [pc, #80]	; (8004f2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee6:	d1ee      	bne.n	8004ec6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004ee8:	4b10      	ldr	r3, [pc, #64]	; (8004f2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a0f      	ldr	r2, [pc, #60]	; (8004f2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ef2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ef4:	f7fe f90c 	bl	8003110 <HAL_GetTick>
 8004ef8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004efa:	e009      	b.n	8004f10 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004efc:	f7fe f908 	bl	8003110 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f0a:	d901      	bls.n	8004f10 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e007      	b.n	8004f20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f10:	4b06      	ldr	r3, [pc, #24]	; (8004f2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f1c:	d1ee      	bne.n	8004efc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	40007000 	.word	0x40007000

08004f30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e29b      	b.n	800547e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 8087 	beq.w	8005062 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f54:	4b96      	ldr	r3, [pc, #600]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 030c 	and.w	r3, r3, #12
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	d00c      	beq.n	8004f7a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f60:	4b93      	ldr	r3, [pc, #588]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 030c 	and.w	r3, r3, #12
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d112      	bne.n	8004f92 <HAL_RCC_OscConfig+0x62>
 8004f6c:	4b90      	ldr	r3, [pc, #576]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f78:	d10b      	bne.n	8004f92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f7a:	4b8d      	ldr	r3, [pc, #564]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d06c      	beq.n	8005060 <HAL_RCC_OscConfig+0x130>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d168      	bne.n	8005060 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e275      	b.n	800547e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f9a:	d106      	bne.n	8004faa <HAL_RCC_OscConfig+0x7a>
 8004f9c:	4b84      	ldr	r3, [pc, #528]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a83      	ldr	r2, [pc, #524]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8004fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	e02e      	b.n	8005008 <HAL_RCC_OscConfig+0xd8>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10c      	bne.n	8004fcc <HAL_RCC_OscConfig+0x9c>
 8004fb2:	4b7f      	ldr	r3, [pc, #508]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a7e      	ldr	r2, [pc, #504]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8004fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	4b7c      	ldr	r3, [pc, #496]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a7b      	ldr	r2, [pc, #492]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8004fc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fc8:	6013      	str	r3, [r2, #0]
 8004fca:	e01d      	b.n	8005008 <HAL_RCC_OscConfig+0xd8>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fd4:	d10c      	bne.n	8004ff0 <HAL_RCC_OscConfig+0xc0>
 8004fd6:	4b76      	ldr	r3, [pc, #472]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a75      	ldr	r2, [pc, #468]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8004fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	4b73      	ldr	r3, [pc, #460]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a72      	ldr	r2, [pc, #456]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8004fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	e00b      	b.n	8005008 <HAL_RCC_OscConfig+0xd8>
 8004ff0:	4b6f      	ldr	r3, [pc, #444]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a6e      	ldr	r2, [pc, #440]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8004ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ffa:	6013      	str	r3, [r2, #0]
 8004ffc:	4b6c      	ldr	r3, [pc, #432]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a6b      	ldr	r2, [pc, #428]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8005002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d013      	beq.n	8005038 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005010:	f7fe f87e 	bl	8003110 <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005018:	f7fe f87a 	bl	8003110 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b64      	cmp	r3, #100	; 0x64
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e229      	b.n	800547e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800502a:	4b61      	ldr	r3, [pc, #388]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0f0      	beq.n	8005018 <HAL_RCC_OscConfig+0xe8>
 8005036:	e014      	b.n	8005062 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005038:	f7fe f86a 	bl	8003110 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005040:	f7fe f866 	bl	8003110 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b64      	cmp	r3, #100	; 0x64
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e215      	b.n	800547e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005052:	4b57      	ldr	r3, [pc, #348]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1f0      	bne.n	8005040 <HAL_RCC_OscConfig+0x110>
 800505e:	e000      	b.n	8005062 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d069      	beq.n	8005142 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800506e:	4b50      	ldr	r3, [pc, #320]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 030c 	and.w	r3, r3, #12
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00b      	beq.n	8005092 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800507a:	4b4d      	ldr	r3, [pc, #308]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 030c 	and.w	r3, r3, #12
 8005082:	2b08      	cmp	r3, #8
 8005084:	d11c      	bne.n	80050c0 <HAL_RCC_OscConfig+0x190>
 8005086:	4b4a      	ldr	r3, [pc, #296]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d116      	bne.n	80050c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005092:	4b47      	ldr	r3, [pc, #284]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d005      	beq.n	80050aa <HAL_RCC_OscConfig+0x17a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d001      	beq.n	80050aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e1e9      	b.n	800547e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050aa:	4b41      	ldr	r3, [pc, #260]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	493d      	ldr	r1, [pc, #244]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050be:	e040      	b.n	8005142 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d023      	beq.n	8005110 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050c8:	4b39      	ldr	r3, [pc, #228]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a38      	ldr	r2, [pc, #224]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 80050ce:	f043 0301 	orr.w	r3, r3, #1
 80050d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d4:	f7fe f81c 	bl	8003110 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050dc:	f7fe f818 	bl	8003110 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e1c7      	b.n	800547e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ee:	4b30      	ldr	r3, [pc, #192]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0f0      	beq.n	80050dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050fa:	4b2d      	ldr	r3, [pc, #180]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	4929      	ldr	r1, [pc, #164]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 800510a:	4313      	orrs	r3, r2
 800510c:	600b      	str	r3, [r1, #0]
 800510e:	e018      	b.n	8005142 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005110:	4b27      	ldr	r3, [pc, #156]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a26      	ldr	r2, [pc, #152]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8005116:	f023 0301 	bic.w	r3, r3, #1
 800511a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800511c:	f7fd fff8 	bl	8003110 <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005124:	f7fd fff4 	bl	8003110 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e1a3      	b.n	800547e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005136:	4b1e      	ldr	r3, [pc, #120]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f0      	bne.n	8005124 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d038      	beq.n	80051c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d019      	beq.n	800518a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005156:	4b16      	ldr	r3, [pc, #88]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8005158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800515a:	4a15      	ldr	r2, [pc, #84]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 800515c:	f043 0301 	orr.w	r3, r3, #1
 8005160:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005162:	f7fd ffd5 	bl	8003110 <HAL_GetTick>
 8005166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005168:	e008      	b.n	800517c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800516a:	f7fd ffd1 	bl	8003110 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	2b02      	cmp	r3, #2
 8005176:	d901      	bls.n	800517c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e180      	b.n	800547e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800517c:	4b0c      	ldr	r3, [pc, #48]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 800517e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d0f0      	beq.n	800516a <HAL_RCC_OscConfig+0x23a>
 8005188:	e01a      	b.n	80051c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800518a:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 800518c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800518e:	4a08      	ldr	r2, [pc, #32]	; (80051b0 <HAL_RCC_OscConfig+0x280>)
 8005190:	f023 0301 	bic.w	r3, r3, #1
 8005194:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005196:	f7fd ffbb 	bl	8003110 <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800519c:	e00a      	b.n	80051b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800519e:	f7fd ffb7 	bl	8003110 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d903      	bls.n	80051b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e166      	b.n	800547e <HAL_RCC_OscConfig+0x54e>
 80051b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b4:	4b92      	ldr	r3, [pc, #584]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 80051b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1ee      	bne.n	800519e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 80a4 	beq.w	8005316 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ce:	4b8c      	ldr	r3, [pc, #560]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10d      	bne.n	80051f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80051da:	4b89      	ldr	r3, [pc, #548]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	4a88      	ldr	r2, [pc, #544]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 80051e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051e4:	6413      	str	r3, [r2, #64]	; 0x40
 80051e6:	4b86      	ldr	r3, [pc, #536]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ee:	60bb      	str	r3, [r7, #8]
 80051f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051f2:	2301      	movs	r3, #1
 80051f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051f6:	4b83      	ldr	r3, [pc, #524]	; (8005404 <HAL_RCC_OscConfig+0x4d4>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d118      	bne.n	8005234 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005202:	4b80      	ldr	r3, [pc, #512]	; (8005404 <HAL_RCC_OscConfig+0x4d4>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a7f      	ldr	r2, [pc, #508]	; (8005404 <HAL_RCC_OscConfig+0x4d4>)
 8005208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800520c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800520e:	f7fd ff7f 	bl	8003110 <HAL_GetTick>
 8005212:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005214:	e008      	b.n	8005228 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005216:	f7fd ff7b 	bl	8003110 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b64      	cmp	r3, #100	; 0x64
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e12a      	b.n	800547e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005228:	4b76      	ldr	r3, [pc, #472]	; (8005404 <HAL_RCC_OscConfig+0x4d4>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0f0      	beq.n	8005216 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d106      	bne.n	800524a <HAL_RCC_OscConfig+0x31a>
 800523c:	4b70      	ldr	r3, [pc, #448]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 800523e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005240:	4a6f      	ldr	r2, [pc, #444]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 8005242:	f043 0301 	orr.w	r3, r3, #1
 8005246:	6713      	str	r3, [r2, #112]	; 0x70
 8005248:	e02d      	b.n	80052a6 <HAL_RCC_OscConfig+0x376>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10c      	bne.n	800526c <HAL_RCC_OscConfig+0x33c>
 8005252:	4b6b      	ldr	r3, [pc, #428]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 8005254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005256:	4a6a      	ldr	r2, [pc, #424]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 8005258:	f023 0301 	bic.w	r3, r3, #1
 800525c:	6713      	str	r3, [r2, #112]	; 0x70
 800525e:	4b68      	ldr	r3, [pc, #416]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 8005260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005262:	4a67      	ldr	r2, [pc, #412]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 8005264:	f023 0304 	bic.w	r3, r3, #4
 8005268:	6713      	str	r3, [r2, #112]	; 0x70
 800526a:	e01c      	b.n	80052a6 <HAL_RCC_OscConfig+0x376>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	2b05      	cmp	r3, #5
 8005272:	d10c      	bne.n	800528e <HAL_RCC_OscConfig+0x35e>
 8005274:	4b62      	ldr	r3, [pc, #392]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 8005276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005278:	4a61      	ldr	r2, [pc, #388]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 800527a:	f043 0304 	orr.w	r3, r3, #4
 800527e:	6713      	str	r3, [r2, #112]	; 0x70
 8005280:	4b5f      	ldr	r3, [pc, #380]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 8005282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005284:	4a5e      	ldr	r2, [pc, #376]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 8005286:	f043 0301 	orr.w	r3, r3, #1
 800528a:	6713      	str	r3, [r2, #112]	; 0x70
 800528c:	e00b      	b.n	80052a6 <HAL_RCC_OscConfig+0x376>
 800528e:	4b5c      	ldr	r3, [pc, #368]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 8005290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005292:	4a5b      	ldr	r2, [pc, #364]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 8005294:	f023 0301 	bic.w	r3, r3, #1
 8005298:	6713      	str	r3, [r2, #112]	; 0x70
 800529a:	4b59      	ldr	r3, [pc, #356]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 800529c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529e:	4a58      	ldr	r2, [pc, #352]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 80052a0:	f023 0304 	bic.w	r3, r3, #4
 80052a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d015      	beq.n	80052da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ae:	f7fd ff2f 	bl	8003110 <HAL_GetTick>
 80052b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b4:	e00a      	b.n	80052cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b6:	f7fd ff2b 	bl	8003110 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d901      	bls.n	80052cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e0d8      	b.n	800547e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052cc:	4b4c      	ldr	r3, [pc, #304]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 80052ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0ee      	beq.n	80052b6 <HAL_RCC_OscConfig+0x386>
 80052d8:	e014      	b.n	8005304 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052da:	f7fd ff19 	bl	8003110 <HAL_GetTick>
 80052de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052e0:	e00a      	b.n	80052f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052e2:	f7fd ff15 	bl	8003110 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e0c2      	b.n	800547e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052f8:	4b41      	ldr	r3, [pc, #260]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 80052fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1ee      	bne.n	80052e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005304:	7dfb      	ldrb	r3, [r7, #23]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d105      	bne.n	8005316 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800530a:	4b3d      	ldr	r3, [pc, #244]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	4a3c      	ldr	r2, [pc, #240]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 8005310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005314:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 80ae 	beq.w	800547c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005320:	4b37      	ldr	r3, [pc, #220]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 030c 	and.w	r3, r3, #12
 8005328:	2b08      	cmp	r3, #8
 800532a:	d06d      	beq.n	8005408 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	2b02      	cmp	r3, #2
 8005332:	d14b      	bne.n	80053cc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005334:	4b32      	ldr	r3, [pc, #200]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a31      	ldr	r2, [pc, #196]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 800533a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800533e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005340:	f7fd fee6 	bl	8003110 <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005348:	f7fd fee2 	bl	8003110 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e091      	b.n	800547e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800535a:	4b29      	ldr	r3, [pc, #164]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1f0      	bne.n	8005348 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	69da      	ldr	r2, [r3, #28]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005374:	019b      	lsls	r3, r3, #6
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537c:	085b      	lsrs	r3, r3, #1
 800537e:	3b01      	subs	r3, #1
 8005380:	041b      	lsls	r3, r3, #16
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	061b      	lsls	r3, r3, #24
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005390:	071b      	lsls	r3, r3, #28
 8005392:	491b      	ldr	r1, [pc, #108]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 8005394:	4313      	orrs	r3, r2
 8005396:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005398:	4b19      	ldr	r3, [pc, #100]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a18      	ldr	r2, [pc, #96]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 800539e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a4:	f7fd feb4 	bl	8003110 <HAL_GetTick>
 80053a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ac:	f7fd feb0 	bl	8003110 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e05f      	b.n	800547e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053be:	4b10      	ldr	r3, [pc, #64]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d0f0      	beq.n	80053ac <HAL_RCC_OscConfig+0x47c>
 80053ca:	e057      	b.n	800547c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053cc:	4b0c      	ldr	r3, [pc, #48]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a0b      	ldr	r2, [pc, #44]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 80053d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d8:	f7fd fe9a 	bl	8003110 <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053e0:	f7fd fe96 	bl	8003110 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e045      	b.n	800547e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053f2:	4b03      	ldr	r3, [pc, #12]	; (8005400 <HAL_RCC_OscConfig+0x4d0>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1f0      	bne.n	80053e0 <HAL_RCC_OscConfig+0x4b0>
 80053fe:	e03d      	b.n	800547c <HAL_RCC_OscConfig+0x54c>
 8005400:	40023800 	.word	0x40023800
 8005404:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005408:	4b1f      	ldr	r3, [pc, #124]	; (8005488 <HAL_RCC_OscConfig+0x558>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d030      	beq.n	8005478 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005420:	429a      	cmp	r2, r3
 8005422:	d129      	bne.n	8005478 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800542e:	429a      	cmp	r2, r3
 8005430:	d122      	bne.n	8005478 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005438:	4013      	ands	r3, r2
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800543e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005440:	4293      	cmp	r3, r2
 8005442:	d119      	bne.n	8005478 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544e:	085b      	lsrs	r3, r3, #1
 8005450:	3b01      	subs	r3, #1
 8005452:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005454:	429a      	cmp	r2, r3
 8005456:	d10f      	bne.n	8005478 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005462:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005464:	429a      	cmp	r2, r3
 8005466:	d107      	bne.n	8005478 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005472:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005474:	429a      	cmp	r2, r3
 8005476:	d001      	beq.n	800547c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e000      	b.n	800547e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3718      	adds	r7, #24
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	40023800 	.word	0x40023800

0800548c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e0d0      	b.n	8005646 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054a4:	4b6a      	ldr	r3, [pc, #424]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 030f 	and.w	r3, r3, #15
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d910      	bls.n	80054d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054b2:	4b67      	ldr	r3, [pc, #412]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f023 020f 	bic.w	r2, r3, #15
 80054ba:	4965      	ldr	r1, [pc, #404]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	4313      	orrs	r3, r2
 80054c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054c2:	4b63      	ldr	r3, [pc, #396]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d001      	beq.n	80054d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e0b8      	b.n	8005646 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d020      	beq.n	8005522 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d005      	beq.n	80054f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054ec:	4b59      	ldr	r3, [pc, #356]	; (8005654 <HAL_RCC_ClockConfig+0x1c8>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	4a58      	ldr	r2, [pc, #352]	; (8005654 <HAL_RCC_ClockConfig+0x1c8>)
 80054f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0308 	and.w	r3, r3, #8
 8005500:	2b00      	cmp	r3, #0
 8005502:	d005      	beq.n	8005510 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005504:	4b53      	ldr	r3, [pc, #332]	; (8005654 <HAL_RCC_ClockConfig+0x1c8>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	4a52      	ldr	r2, [pc, #328]	; (8005654 <HAL_RCC_ClockConfig+0x1c8>)
 800550a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800550e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005510:	4b50      	ldr	r3, [pc, #320]	; (8005654 <HAL_RCC_ClockConfig+0x1c8>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	494d      	ldr	r1, [pc, #308]	; (8005654 <HAL_RCC_ClockConfig+0x1c8>)
 800551e:	4313      	orrs	r3, r2
 8005520:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d040      	beq.n	80055b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d107      	bne.n	8005546 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005536:	4b47      	ldr	r3, [pc, #284]	; (8005654 <HAL_RCC_ClockConfig+0x1c8>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d115      	bne.n	800556e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e07f      	b.n	8005646 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2b02      	cmp	r3, #2
 800554c:	d107      	bne.n	800555e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800554e:	4b41      	ldr	r3, [pc, #260]	; (8005654 <HAL_RCC_ClockConfig+0x1c8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d109      	bne.n	800556e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e073      	b.n	8005646 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800555e:	4b3d      	ldr	r3, [pc, #244]	; (8005654 <HAL_RCC_ClockConfig+0x1c8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e06b      	b.n	8005646 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800556e:	4b39      	ldr	r3, [pc, #228]	; (8005654 <HAL_RCC_ClockConfig+0x1c8>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f023 0203 	bic.w	r2, r3, #3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	4936      	ldr	r1, [pc, #216]	; (8005654 <HAL_RCC_ClockConfig+0x1c8>)
 800557c:	4313      	orrs	r3, r2
 800557e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005580:	f7fd fdc6 	bl	8003110 <HAL_GetTick>
 8005584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005586:	e00a      	b.n	800559e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005588:	f7fd fdc2 	bl	8003110 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	f241 3288 	movw	r2, #5000	; 0x1388
 8005596:	4293      	cmp	r3, r2
 8005598:	d901      	bls.n	800559e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e053      	b.n	8005646 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800559e:	4b2d      	ldr	r3, [pc, #180]	; (8005654 <HAL_RCC_ClockConfig+0x1c8>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f003 020c 	and.w	r2, r3, #12
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d1eb      	bne.n	8005588 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055b0:	4b27      	ldr	r3, [pc, #156]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 030f 	and.w	r3, r3, #15
 80055b8:	683a      	ldr	r2, [r7, #0]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d210      	bcs.n	80055e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055be:	4b24      	ldr	r3, [pc, #144]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f023 020f 	bic.w	r2, r3, #15
 80055c6:	4922      	ldr	r1, [pc, #136]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ce:	4b20      	ldr	r3, [pc, #128]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 030f 	and.w	r3, r3, #15
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d001      	beq.n	80055e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e032      	b.n	8005646 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d008      	beq.n	80055fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055ec:	4b19      	ldr	r3, [pc, #100]	; (8005654 <HAL_RCC_ClockConfig+0x1c8>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	4916      	ldr	r1, [pc, #88]	; (8005654 <HAL_RCC_ClockConfig+0x1c8>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0308 	and.w	r3, r3, #8
 8005606:	2b00      	cmp	r3, #0
 8005608:	d009      	beq.n	800561e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800560a:	4b12      	ldr	r3, [pc, #72]	; (8005654 <HAL_RCC_ClockConfig+0x1c8>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	00db      	lsls	r3, r3, #3
 8005618:	490e      	ldr	r1, [pc, #56]	; (8005654 <HAL_RCC_ClockConfig+0x1c8>)
 800561a:	4313      	orrs	r3, r2
 800561c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800561e:	f000 f821 	bl	8005664 <HAL_RCC_GetSysClockFreq>
 8005622:	4602      	mov	r2, r0
 8005624:	4b0b      	ldr	r3, [pc, #44]	; (8005654 <HAL_RCC_ClockConfig+0x1c8>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	091b      	lsrs	r3, r3, #4
 800562a:	f003 030f 	and.w	r3, r3, #15
 800562e:	490a      	ldr	r1, [pc, #40]	; (8005658 <HAL_RCC_ClockConfig+0x1cc>)
 8005630:	5ccb      	ldrb	r3, [r1, r3]
 8005632:	fa22 f303 	lsr.w	r3, r2, r3
 8005636:	4a09      	ldr	r2, [pc, #36]	; (800565c <HAL_RCC_ClockConfig+0x1d0>)
 8005638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800563a:	4b09      	ldr	r3, [pc, #36]	; (8005660 <HAL_RCC_ClockConfig+0x1d4>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f7fd fd22 	bl	8003088 <HAL_InitTick>

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	40023c00 	.word	0x40023c00
 8005654:	40023800 	.word	0x40023800
 8005658:	0800858c 	.word	0x0800858c
 800565c:	20000000 	.word	0x20000000
 8005660:	20000004 	.word	0x20000004

08005664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005668:	b090      	sub	sp, #64	; 0x40
 800566a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800566c:	2300      	movs	r3, #0
 800566e:	637b      	str	r3, [r7, #52]	; 0x34
 8005670:	2300      	movs	r3, #0
 8005672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005674:	2300      	movs	r3, #0
 8005676:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8005678:	2300      	movs	r3, #0
 800567a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800567c:	4b59      	ldr	r3, [pc, #356]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f003 030c 	and.w	r3, r3, #12
 8005684:	2b08      	cmp	r3, #8
 8005686:	d00d      	beq.n	80056a4 <HAL_RCC_GetSysClockFreq+0x40>
 8005688:	2b08      	cmp	r3, #8
 800568a:	f200 80a1 	bhi.w	80057d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800568e:	2b00      	cmp	r3, #0
 8005690:	d002      	beq.n	8005698 <HAL_RCC_GetSysClockFreq+0x34>
 8005692:	2b04      	cmp	r3, #4
 8005694:	d003      	beq.n	800569e <HAL_RCC_GetSysClockFreq+0x3a>
 8005696:	e09b      	b.n	80057d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005698:	4b53      	ldr	r3, [pc, #332]	; (80057e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800569a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800569c:	e09b      	b.n	80057d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800569e:	4b53      	ldr	r3, [pc, #332]	; (80057ec <HAL_RCC_GetSysClockFreq+0x188>)
 80056a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80056a2:	e098      	b.n	80057d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056a4:	4b4f      	ldr	r3, [pc, #316]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056ac:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80056ae:	4b4d      	ldr	r3, [pc, #308]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d028      	beq.n	800570c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056ba:	4b4a      	ldr	r3, [pc, #296]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	099b      	lsrs	r3, r3, #6
 80056c0:	2200      	movs	r2, #0
 80056c2:	623b      	str	r3, [r7, #32]
 80056c4:	627a      	str	r2, [r7, #36]	; 0x24
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80056cc:	2100      	movs	r1, #0
 80056ce:	4b47      	ldr	r3, [pc, #284]	; (80057ec <HAL_RCC_GetSysClockFreq+0x188>)
 80056d0:	fb03 f201 	mul.w	r2, r3, r1
 80056d4:	2300      	movs	r3, #0
 80056d6:	fb00 f303 	mul.w	r3, r0, r3
 80056da:	4413      	add	r3, r2
 80056dc:	4a43      	ldr	r2, [pc, #268]	; (80057ec <HAL_RCC_GetSysClockFreq+0x188>)
 80056de:	fba0 1202 	umull	r1, r2, r0, r2
 80056e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056e4:	460a      	mov	r2, r1
 80056e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80056e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ea:	4413      	add	r3, r2
 80056ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f0:	2200      	movs	r2, #0
 80056f2:	61bb      	str	r3, [r7, #24]
 80056f4:	61fa      	str	r2, [r7, #28]
 80056f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80056fe:	f7fa fda3 	bl	8000248 <__aeabi_uldivmod>
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	4613      	mov	r3, r2
 8005708:	63fb      	str	r3, [r7, #60]	; 0x3c
 800570a:	e053      	b.n	80057b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800570c:	4b35      	ldr	r3, [pc, #212]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	099b      	lsrs	r3, r3, #6
 8005712:	2200      	movs	r2, #0
 8005714:	613b      	str	r3, [r7, #16]
 8005716:	617a      	str	r2, [r7, #20]
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800571e:	f04f 0b00 	mov.w	fp, #0
 8005722:	4652      	mov	r2, sl
 8005724:	465b      	mov	r3, fp
 8005726:	f04f 0000 	mov.w	r0, #0
 800572a:	f04f 0100 	mov.w	r1, #0
 800572e:	0159      	lsls	r1, r3, #5
 8005730:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005734:	0150      	lsls	r0, r2, #5
 8005736:	4602      	mov	r2, r0
 8005738:	460b      	mov	r3, r1
 800573a:	ebb2 080a 	subs.w	r8, r2, sl
 800573e:	eb63 090b 	sbc.w	r9, r3, fp
 8005742:	f04f 0200 	mov.w	r2, #0
 8005746:	f04f 0300 	mov.w	r3, #0
 800574a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800574e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005752:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005756:	ebb2 0408 	subs.w	r4, r2, r8
 800575a:	eb63 0509 	sbc.w	r5, r3, r9
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	00eb      	lsls	r3, r5, #3
 8005768:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800576c:	00e2      	lsls	r2, r4, #3
 800576e:	4614      	mov	r4, r2
 8005770:	461d      	mov	r5, r3
 8005772:	eb14 030a 	adds.w	r3, r4, sl
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	eb45 030b 	adc.w	r3, r5, fp
 800577c:	607b      	str	r3, [r7, #4]
 800577e:	f04f 0200 	mov.w	r2, #0
 8005782:	f04f 0300 	mov.w	r3, #0
 8005786:	e9d7 4500 	ldrd	r4, r5, [r7]
 800578a:	4629      	mov	r1, r5
 800578c:	028b      	lsls	r3, r1, #10
 800578e:	4621      	mov	r1, r4
 8005790:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005794:	4621      	mov	r1, r4
 8005796:	028a      	lsls	r2, r1, #10
 8005798:	4610      	mov	r0, r2
 800579a:	4619      	mov	r1, r3
 800579c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579e:	2200      	movs	r2, #0
 80057a0:	60bb      	str	r3, [r7, #8]
 80057a2:	60fa      	str	r2, [r7, #12]
 80057a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057a8:	f7fa fd4e 	bl	8000248 <__aeabi_uldivmod>
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4613      	mov	r3, r2
 80057b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80057b4:	4b0b      	ldr	r3, [pc, #44]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	0c1b      	lsrs	r3, r3, #16
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	3301      	adds	r3, #1
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80057c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80057ce:	e002      	b.n	80057d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057d0:	4b05      	ldr	r3, [pc, #20]	; (80057e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80057d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80057d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3740      	adds	r7, #64	; 0x40
 80057dc:	46bd      	mov	sp, r7
 80057de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057e2:	bf00      	nop
 80057e4:	40023800 	.word	0x40023800
 80057e8:	00f42400 	.word	0x00f42400
 80057ec:	017d7840 	.word	0x017d7840

080057f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057f0:	b480      	push	{r7}
 80057f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057f4:	4b03      	ldr	r3, [pc, #12]	; (8005804 <HAL_RCC_GetHCLKFreq+0x14>)
 80057f6:	681b      	ldr	r3, [r3, #0]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	20000000 	.word	0x20000000

08005808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800580c:	f7ff fff0 	bl	80057f0 <HAL_RCC_GetHCLKFreq>
 8005810:	4602      	mov	r2, r0
 8005812:	4b05      	ldr	r3, [pc, #20]	; (8005828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	0a9b      	lsrs	r3, r3, #10
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	4903      	ldr	r1, [pc, #12]	; (800582c <HAL_RCC_GetPCLK1Freq+0x24>)
 800581e:	5ccb      	ldrb	r3, [r1, r3]
 8005820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005824:	4618      	mov	r0, r3
 8005826:	bd80      	pop	{r7, pc}
 8005828:	40023800 	.word	0x40023800
 800582c:	0800859c 	.word	0x0800859c

08005830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005834:	f7ff ffdc 	bl	80057f0 <HAL_RCC_GetHCLKFreq>
 8005838:	4602      	mov	r2, r0
 800583a:	4b05      	ldr	r3, [pc, #20]	; (8005850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	0b5b      	lsrs	r3, r3, #13
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	4903      	ldr	r1, [pc, #12]	; (8005854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005846:	5ccb      	ldrb	r3, [r1, r3]
 8005848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800584c:	4618      	mov	r0, r3
 800584e:	bd80      	pop	{r7, pc}
 8005850:	40023800 	.word	0x40023800
 8005854:	0800859c 	.word	0x0800859c

08005858 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005860:	2300      	movs	r3, #0
 8005862:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005864:	2300      	movs	r3, #0
 8005866:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005868:	2300      	movs	r3, #0
 800586a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800586c:	2300      	movs	r3, #0
 800586e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005870:	2300      	movs	r3, #0
 8005872:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d012      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005880:	4b69      	ldr	r3, [pc, #420]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	4a68      	ldr	r2, [pc, #416]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005886:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800588a:	6093      	str	r3, [r2, #8]
 800588c:	4b66      	ldr	r3, [pc, #408]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005894:	4964      	ldr	r1, [pc, #400]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005896:	4313      	orrs	r3, r2
 8005898:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80058a2:	2301      	movs	r3, #1
 80058a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d017      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058b2:	4b5d      	ldr	r3, [pc, #372]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c0:	4959      	ldr	r1, [pc, #356]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058d0:	d101      	bne.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80058d2:	2301      	movs	r3, #1
 80058d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80058de:	2301      	movs	r3, #1
 80058e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d017      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80058ee:	4b4e      	ldr	r3, [pc, #312]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fc:	494a      	ldr	r1, [pc, #296]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005908:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800590c:	d101      	bne.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800590e:	2301      	movs	r3, #1
 8005910:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800591a:	2301      	movs	r3, #1
 800591c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800592a:	2301      	movs	r3, #1
 800592c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0320 	and.w	r3, r3, #32
 8005936:	2b00      	cmp	r3, #0
 8005938:	f000 808b 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800593c:	4b3a      	ldr	r3, [pc, #232]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	4a39      	ldr	r2, [pc, #228]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005946:	6413      	str	r3, [r2, #64]	; 0x40
 8005948:	4b37      	ldr	r3, [pc, #220]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800594a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005950:	60bb      	str	r3, [r7, #8]
 8005952:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005954:	4b35      	ldr	r3, [pc, #212]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a34      	ldr	r2, [pc, #208]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800595a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800595e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005960:	f7fd fbd6 	bl	8003110 <HAL_GetTick>
 8005964:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005966:	e008      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005968:	f7fd fbd2 	bl	8003110 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b64      	cmp	r3, #100	; 0x64
 8005974:	d901      	bls.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e38f      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800597a:	4b2c      	ldr	r3, [pc, #176]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0f0      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005986:	4b28      	ldr	r3, [pc, #160]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800598e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d035      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d02e      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059a4:	4b20      	ldr	r3, [pc, #128]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059ae:	4b1e      	ldr	r3, [pc, #120]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b2:	4a1d      	ldr	r2, [pc, #116]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059ba:	4b1b      	ldr	r3, [pc, #108]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059be:	4a1a      	ldr	r2, [pc, #104]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80059c6:	4a18      	ldr	r2, [pc, #96]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059cc:	4b16      	ldr	r3, [pc, #88]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d114      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d8:	f7fd fb9a 	bl	8003110 <HAL_GetTick>
 80059dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059de:	e00a      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059e0:	f7fd fb96 	bl	8003110 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d901      	bls.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e351      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059f6:	4b0c      	ldr	r3, [pc, #48]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d0ee      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a0e:	d111      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005a10:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005a1c:	4b04      	ldr	r3, [pc, #16]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a1e:	400b      	ands	r3, r1
 8005a20:	4901      	ldr	r1, [pc, #4]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	608b      	str	r3, [r1, #8]
 8005a26:	e00b      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005a28:	40023800 	.word	0x40023800
 8005a2c:	40007000 	.word	0x40007000
 8005a30:	0ffffcff 	.word	0x0ffffcff
 8005a34:	4bac      	ldr	r3, [pc, #688]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	4aab      	ldr	r2, [pc, #684]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a3a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005a3e:	6093      	str	r3, [r2, #8]
 8005a40:	4ba9      	ldr	r3, [pc, #676]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a4c:	49a6      	ldr	r1, [pc, #664]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0310 	and.w	r3, r3, #16
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d010      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a5e:	4ba2      	ldr	r3, [pc, #648]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a64:	4aa0      	ldr	r2, [pc, #640]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005a6e:	4b9e      	ldr	r3, [pc, #632]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a70:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	499b      	ldr	r1, [pc, #620]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00a      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a8c:	4b96      	ldr	r3, [pc, #600]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a9a:	4993      	ldr	r1, [pc, #588]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005aae:	4b8e      	ldr	r3, [pc, #568]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005abc:	498a      	ldr	r1, [pc, #552]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00a      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ad0:	4b85      	ldr	r3, [pc, #532]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ade:	4982      	ldr	r1, [pc, #520]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00a      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005af2:	4b7d      	ldr	r3, [pc, #500]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b00:	4979      	ldr	r1, [pc, #484]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00a      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b14:	4b74      	ldr	r3, [pc, #464]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1a:	f023 0203 	bic.w	r2, r3, #3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b22:	4971      	ldr	r1, [pc, #452]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00a      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b36:	4b6c      	ldr	r3, [pc, #432]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3c:	f023 020c 	bic.w	r2, r3, #12
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b44:	4968      	ldr	r1, [pc, #416]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00a      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b58:	4b63      	ldr	r3, [pc, #396]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b5e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b66:	4960      	ldr	r1, [pc, #384]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00a      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b7a:	4b5b      	ldr	r3, [pc, #364]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b80:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b88:	4957      	ldr	r1, [pc, #348]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00a      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b9c:	4b52      	ldr	r3, [pc, #328]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005baa:	494f      	ldr	r1, [pc, #316]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005bbe:	4b4a      	ldr	r3, [pc, #296]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bcc:	4946      	ldr	r1, [pc, #280]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00a      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005be0:	4b41      	ldr	r3, [pc, #260]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bee:	493e      	ldr	r1, [pc, #248]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00a      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005c02:	4b39      	ldr	r3, [pc, #228]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c10:	4935      	ldr	r1, [pc, #212]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00a      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c24:	4b30      	ldr	r3, [pc, #192]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c2a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c32:	492d      	ldr	r1, [pc, #180]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d011      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005c46:	4b28      	ldr	r3, [pc, #160]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c54:	4924      	ldr	r1, [pc, #144]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c64:	d101      	bne.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005c66:	2301      	movs	r3, #1
 8005c68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0308 	and.w	r3, r3, #8
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005c76:	2301      	movs	r3, #1
 8005c78:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c86:	4b18      	ldr	r3, [pc, #96]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c94:	4914      	ldr	r1, [pc, #80]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00b      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ca8:	4b0f      	ldr	r3, [pc, #60]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cb8:	490b      	ldr	r1, [pc, #44]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00f      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005ccc:	4b06      	ldr	r3, [pc, #24]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cdc:	4902      	ldr	r1, [pc, #8]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005ce4:	e002      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005ce6:	bf00      	nop
 8005ce8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00b      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005cf8:	4b8a      	ldr	r3, [pc, #552]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cfe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d08:	4986      	ldr	r1, [pc, #536]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00b      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005d1c:	4b81      	ldr	r3, [pc, #516]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d22:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d2c:	497d      	ldr	r1, [pc, #500]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d006      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 80d6 	beq.w	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d48:	4b76      	ldr	r3, [pc, #472]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a75      	ldr	r2, [pc, #468]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d54:	f7fd f9dc 	bl	8003110 <HAL_GetTick>
 8005d58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d5a:	e008      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d5c:	f7fd f9d8 	bl	8003110 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b64      	cmp	r3, #100	; 0x64
 8005d68:	d901      	bls.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e195      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d6e:	4b6d      	ldr	r3, [pc, #436]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1f0      	bne.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d021      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d11d      	bne.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d8e:	4b65      	ldr	r3, [pc, #404]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d94:	0c1b      	lsrs	r3, r3, #16
 8005d96:	f003 0303 	and.w	r3, r3, #3
 8005d9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d9c:	4b61      	ldr	r3, [pc, #388]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005da2:	0e1b      	lsrs	r3, r3, #24
 8005da4:	f003 030f 	and.w	r3, r3, #15
 8005da8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	019a      	lsls	r2, r3, #6
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	041b      	lsls	r3, r3, #16
 8005db4:	431a      	orrs	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	061b      	lsls	r3, r3, #24
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	071b      	lsls	r3, r3, #28
 8005dc2:	4958      	ldr	r1, [pc, #352]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d004      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dde:	d00a      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d02e      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005df4:	d129      	bne.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005df6:	4b4b      	ldr	r3, [pc, #300]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dfc:	0c1b      	lsrs	r3, r3, #16
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e04:	4b47      	ldr	r3, [pc, #284]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e0a:	0f1b      	lsrs	r3, r3, #28
 8005e0c:	f003 0307 	and.w	r3, r3, #7
 8005e10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	019a      	lsls	r2, r3, #6
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	041b      	lsls	r3, r3, #16
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	061b      	lsls	r3, r3, #24
 8005e24:	431a      	orrs	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	071b      	lsls	r3, r3, #28
 8005e2a:	493e      	ldr	r1, [pc, #248]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005e32:	4b3c      	ldr	r3, [pc, #240]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e38:	f023 021f 	bic.w	r2, r3, #31
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	3b01      	subs	r3, #1
 8005e42:	4938      	ldr	r1, [pc, #224]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d01d      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005e56:	4b33      	ldr	r3, [pc, #204]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e5c:	0e1b      	lsrs	r3, r3, #24
 8005e5e:	f003 030f 	and.w	r3, r3, #15
 8005e62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e64:	4b2f      	ldr	r3, [pc, #188]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e6a:	0f1b      	lsrs	r3, r3, #28
 8005e6c:	f003 0307 	and.w	r3, r3, #7
 8005e70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	019a      	lsls	r2, r3, #6
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	041b      	lsls	r3, r3, #16
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	061b      	lsls	r3, r3, #24
 8005e84:	431a      	orrs	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	071b      	lsls	r3, r3, #28
 8005e8a:	4926      	ldr	r1, [pc, #152]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d011      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	019a      	lsls	r2, r3, #6
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	041b      	lsls	r3, r3, #16
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	061b      	lsls	r3, r3, #24
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	071b      	lsls	r3, r3, #28
 8005eba:	491a      	ldr	r1, [pc, #104]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ec2:	4b18      	ldr	r3, [pc, #96]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a17      	ldr	r2, [pc, #92]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ec8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ecc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ece:	f7fd f91f 	bl	8003110 <HAL_GetTick>
 8005ed2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ed4:	e008      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ed6:	f7fd f91b 	bl	8003110 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	2b64      	cmp	r3, #100	; 0x64
 8005ee2:	d901      	bls.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e0d8      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ee8:	4b0e      	ldr	r3, [pc, #56]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d0f0      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	f040 80ce 	bne.w	8006098 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005efc:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a08      	ldr	r2, [pc, #32]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f08:	f7fd f902 	bl	8003110 <HAL_GetTick>
 8005f0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f0e:	e00b      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f10:	f7fd f8fe 	bl	8003110 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b64      	cmp	r3, #100	; 0x64
 8005f1c:	d904      	bls.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e0bb      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005f22:	bf00      	nop
 8005f24:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f28:	4b5e      	ldr	r3, [pc, #376]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f34:	d0ec      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d009      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d02e      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d12a      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f5e:	4b51      	ldr	r3, [pc, #324]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f64:	0c1b      	lsrs	r3, r3, #16
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f6c:	4b4d      	ldr	r3, [pc, #308]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f72:	0f1b      	lsrs	r3, r3, #28
 8005f74:	f003 0307 	and.w	r3, r3, #7
 8005f78:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	019a      	lsls	r2, r3, #6
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	041b      	lsls	r3, r3, #16
 8005f84:	431a      	orrs	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	061b      	lsls	r3, r3, #24
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	071b      	lsls	r3, r3, #28
 8005f92:	4944      	ldr	r1, [pc, #272]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f9a:	4b42      	ldr	r3, [pc, #264]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fa0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	021b      	lsls	r3, r3, #8
 8005fac:	493d      	ldr	r1, [pc, #244]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d022      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fc8:	d11d      	bne.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005fca:	4b36      	ldr	r3, [pc, #216]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd0:	0e1b      	lsrs	r3, r3, #24
 8005fd2:	f003 030f 	and.w	r3, r3, #15
 8005fd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005fd8:	4b32      	ldr	r3, [pc, #200]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fde:	0f1b      	lsrs	r3, r3, #28
 8005fe0:	f003 0307 	and.w	r3, r3, #7
 8005fe4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	019a      	lsls	r2, r3, #6
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	041b      	lsls	r3, r3, #16
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	061b      	lsls	r3, r3, #24
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	071b      	lsls	r3, r3, #28
 8005ffe:	4929      	ldr	r1, [pc, #164]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006000:	4313      	orrs	r3, r2
 8006002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0308 	and.w	r3, r3, #8
 800600e:	2b00      	cmp	r3, #0
 8006010:	d028      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006012:	4b24      	ldr	r3, [pc, #144]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006018:	0e1b      	lsrs	r3, r3, #24
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006020:	4b20      	ldr	r3, [pc, #128]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006026:	0c1b      	lsrs	r3, r3, #16
 8006028:	f003 0303 	and.w	r3, r3, #3
 800602c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	019a      	lsls	r2, r3, #6
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	041b      	lsls	r3, r3, #16
 8006038:	431a      	orrs	r2, r3
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	061b      	lsls	r3, r3, #24
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	071b      	lsls	r3, r3, #28
 8006046:	4917      	ldr	r1, [pc, #92]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006048:	4313      	orrs	r3, r2
 800604a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800604e:	4b15      	ldr	r3, [pc, #84]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006054:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	4911      	ldr	r1, [pc, #68]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800605e:	4313      	orrs	r3, r2
 8006060:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006064:	4b0f      	ldr	r3, [pc, #60]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a0e      	ldr	r2, [pc, #56]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800606a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800606e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006070:	f7fd f84e 	bl	8003110 <HAL_GetTick>
 8006074:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006076:	e008      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006078:	f7fd f84a 	bl	8003110 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	2b64      	cmp	r3, #100	; 0x64
 8006084:	d901      	bls.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e007      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800608a:	4b06      	ldr	r3, [pc, #24]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006092:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006096:	d1ef      	bne.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3720      	adds	r7, #32
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	40023800 	.word	0x40023800

080060a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e049      	b.n	800614e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d106      	bne.n	80060d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7fc fee8 	bl	8002ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3304      	adds	r3, #4
 80060e4:	4619      	mov	r1, r3
 80060e6:	4610      	mov	r0, r2
 80060e8:	f000 f9f6 	bl	80064d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
	...

08006158 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b01      	cmp	r3, #1
 800616a:	d001      	beq.n	8006170 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e054      	b.n	800621a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 0201 	orr.w	r2, r2, #1
 8006186:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a26      	ldr	r2, [pc, #152]	; (8006228 <HAL_TIM_Base_Start_IT+0xd0>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d022      	beq.n	80061d8 <HAL_TIM_Base_Start_IT+0x80>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800619a:	d01d      	beq.n	80061d8 <HAL_TIM_Base_Start_IT+0x80>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a22      	ldr	r2, [pc, #136]	; (800622c <HAL_TIM_Base_Start_IT+0xd4>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d018      	beq.n	80061d8 <HAL_TIM_Base_Start_IT+0x80>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a21      	ldr	r2, [pc, #132]	; (8006230 <HAL_TIM_Base_Start_IT+0xd8>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d013      	beq.n	80061d8 <HAL_TIM_Base_Start_IT+0x80>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a1f      	ldr	r2, [pc, #124]	; (8006234 <HAL_TIM_Base_Start_IT+0xdc>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d00e      	beq.n	80061d8 <HAL_TIM_Base_Start_IT+0x80>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a1e      	ldr	r2, [pc, #120]	; (8006238 <HAL_TIM_Base_Start_IT+0xe0>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d009      	beq.n	80061d8 <HAL_TIM_Base_Start_IT+0x80>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a1c      	ldr	r2, [pc, #112]	; (800623c <HAL_TIM_Base_Start_IT+0xe4>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d004      	beq.n	80061d8 <HAL_TIM_Base_Start_IT+0x80>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a1b      	ldr	r2, [pc, #108]	; (8006240 <HAL_TIM_Base_Start_IT+0xe8>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d115      	bne.n	8006204 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689a      	ldr	r2, [r3, #8]
 80061de:	4b19      	ldr	r3, [pc, #100]	; (8006244 <HAL_TIM_Base_Start_IT+0xec>)
 80061e0:	4013      	ands	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2b06      	cmp	r3, #6
 80061e8:	d015      	beq.n	8006216 <HAL_TIM_Base_Start_IT+0xbe>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f0:	d011      	beq.n	8006216 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f042 0201 	orr.w	r2, r2, #1
 8006200:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006202:	e008      	b.n	8006216 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0201 	orr.w	r2, r2, #1
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	e000      	b.n	8006218 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006216:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	40010000 	.word	0x40010000
 800622c:	40000400 	.word	0x40000400
 8006230:	40000800 	.word	0x40000800
 8006234:	40000c00 	.word	0x40000c00
 8006238:	40010400 	.word	0x40010400
 800623c:	40014000 	.word	0x40014000
 8006240:	40001800 	.word	0x40001800
 8006244:	00010007 	.word	0x00010007

08006248 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b02      	cmp	r3, #2
 800625c:	d122      	bne.n	80062a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b02      	cmp	r3, #2
 800626a:	d11b      	bne.n	80062a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f06f 0202 	mvn.w	r2, #2
 8006274:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	f003 0303 	and.w	r3, r3, #3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f905 	bl	800649a <HAL_TIM_IC_CaptureCallback>
 8006290:	e005      	b.n	800629e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f8f7 	bl	8006486 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f908 	bl	80064ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	f003 0304 	and.w	r3, r3, #4
 80062ae:	2b04      	cmp	r3, #4
 80062b0:	d122      	bne.n	80062f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f003 0304 	and.w	r3, r3, #4
 80062bc:	2b04      	cmp	r3, #4
 80062be:	d11b      	bne.n	80062f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f06f 0204 	mvn.w	r2, #4
 80062c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2202      	movs	r2, #2
 80062ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f8db 	bl	800649a <HAL_TIM_IC_CaptureCallback>
 80062e4:	e005      	b.n	80062f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f8cd 	bl	8006486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f8de 	bl	80064ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	f003 0308 	and.w	r3, r3, #8
 8006302:	2b08      	cmp	r3, #8
 8006304:	d122      	bne.n	800634c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f003 0308 	and.w	r3, r3, #8
 8006310:	2b08      	cmp	r3, #8
 8006312:	d11b      	bne.n	800634c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f06f 0208 	mvn.w	r2, #8
 800631c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2204      	movs	r2, #4
 8006322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	f003 0303 	and.w	r3, r3, #3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f8b1 	bl	800649a <HAL_TIM_IC_CaptureCallback>
 8006338:	e005      	b.n	8006346 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f8a3 	bl	8006486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f8b4 	bl	80064ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	f003 0310 	and.w	r3, r3, #16
 8006356:	2b10      	cmp	r3, #16
 8006358:	d122      	bne.n	80063a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	f003 0310 	and.w	r3, r3, #16
 8006364:	2b10      	cmp	r3, #16
 8006366:	d11b      	bne.n	80063a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f06f 0210 	mvn.w	r2, #16
 8006370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2208      	movs	r2, #8
 8006376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f887 	bl	800649a <HAL_TIM_IC_CaptureCallback>
 800638c:	e005      	b.n	800639a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f879 	bl	8006486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 f88a 	bl	80064ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d10e      	bne.n	80063cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d107      	bne.n	80063cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f06f 0201 	mvn.w	r2, #1
 80063c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7fc fc70 	bl	8002cac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d6:	2b80      	cmp	r3, #128	; 0x80
 80063d8:	d10e      	bne.n	80063f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e4:	2b80      	cmp	r3, #128	; 0x80
 80063e6:	d107      	bne.n	80063f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f9a8 	bl	8006748 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006406:	d10e      	bne.n	8006426 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006412:	2b80      	cmp	r3, #128	; 0x80
 8006414:	d107      	bne.n	8006426 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800641e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 f99b 	bl	800675c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006430:	2b40      	cmp	r3, #64	; 0x40
 8006432:	d10e      	bne.n	8006452 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643e:	2b40      	cmp	r3, #64	; 0x40
 8006440:	d107      	bne.n	8006452 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800644a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f838 	bl	80064c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	f003 0320 	and.w	r3, r3, #32
 800645c:	2b20      	cmp	r3, #32
 800645e:	d10e      	bne.n	800647e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f003 0320 	and.w	r3, r3, #32
 800646a:	2b20      	cmp	r3, #32
 800646c:	d107      	bne.n	800647e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f06f 0220 	mvn.w	r2, #32
 8006476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f95b 	bl	8006734 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800647e:	bf00      	nop
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800648e:	bf00      	nop
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800649a:	b480      	push	{r7}
 800649c:	b083      	sub	sp, #12
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064a2:	bf00      	nop
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064b6:	bf00      	nop
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b083      	sub	sp, #12
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064ca:	bf00      	nop
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
	...

080064d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a40      	ldr	r2, [pc, #256]	; (80065ec <TIM_Base_SetConfig+0x114>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d013      	beq.n	8006518 <TIM_Base_SetConfig+0x40>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f6:	d00f      	beq.n	8006518 <TIM_Base_SetConfig+0x40>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a3d      	ldr	r2, [pc, #244]	; (80065f0 <TIM_Base_SetConfig+0x118>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d00b      	beq.n	8006518 <TIM_Base_SetConfig+0x40>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a3c      	ldr	r2, [pc, #240]	; (80065f4 <TIM_Base_SetConfig+0x11c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d007      	beq.n	8006518 <TIM_Base_SetConfig+0x40>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a3b      	ldr	r2, [pc, #236]	; (80065f8 <TIM_Base_SetConfig+0x120>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d003      	beq.n	8006518 <TIM_Base_SetConfig+0x40>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a3a      	ldr	r2, [pc, #232]	; (80065fc <TIM_Base_SetConfig+0x124>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d108      	bne.n	800652a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	4313      	orrs	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a2f      	ldr	r2, [pc, #188]	; (80065ec <TIM_Base_SetConfig+0x114>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d02b      	beq.n	800658a <TIM_Base_SetConfig+0xb2>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006538:	d027      	beq.n	800658a <TIM_Base_SetConfig+0xb2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a2c      	ldr	r2, [pc, #176]	; (80065f0 <TIM_Base_SetConfig+0x118>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d023      	beq.n	800658a <TIM_Base_SetConfig+0xb2>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a2b      	ldr	r2, [pc, #172]	; (80065f4 <TIM_Base_SetConfig+0x11c>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d01f      	beq.n	800658a <TIM_Base_SetConfig+0xb2>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a2a      	ldr	r2, [pc, #168]	; (80065f8 <TIM_Base_SetConfig+0x120>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d01b      	beq.n	800658a <TIM_Base_SetConfig+0xb2>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a29      	ldr	r2, [pc, #164]	; (80065fc <TIM_Base_SetConfig+0x124>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d017      	beq.n	800658a <TIM_Base_SetConfig+0xb2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a28      	ldr	r2, [pc, #160]	; (8006600 <TIM_Base_SetConfig+0x128>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d013      	beq.n	800658a <TIM_Base_SetConfig+0xb2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a27      	ldr	r2, [pc, #156]	; (8006604 <TIM_Base_SetConfig+0x12c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d00f      	beq.n	800658a <TIM_Base_SetConfig+0xb2>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a26      	ldr	r2, [pc, #152]	; (8006608 <TIM_Base_SetConfig+0x130>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d00b      	beq.n	800658a <TIM_Base_SetConfig+0xb2>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a25      	ldr	r2, [pc, #148]	; (800660c <TIM_Base_SetConfig+0x134>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d007      	beq.n	800658a <TIM_Base_SetConfig+0xb2>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a24      	ldr	r2, [pc, #144]	; (8006610 <TIM_Base_SetConfig+0x138>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d003      	beq.n	800658a <TIM_Base_SetConfig+0xb2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a23      	ldr	r2, [pc, #140]	; (8006614 <TIM_Base_SetConfig+0x13c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d108      	bne.n	800659c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4313      	orrs	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a0a      	ldr	r2, [pc, #40]	; (80065ec <TIM_Base_SetConfig+0x114>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d003      	beq.n	80065d0 <TIM_Base_SetConfig+0xf8>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a0c      	ldr	r2, [pc, #48]	; (80065fc <TIM_Base_SetConfig+0x124>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d103      	bne.n	80065d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	691a      	ldr	r2, [r3, #16]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	615a      	str	r2, [r3, #20]
}
 80065de:	bf00      	nop
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	40010000 	.word	0x40010000
 80065f0:	40000400 	.word	0x40000400
 80065f4:	40000800 	.word	0x40000800
 80065f8:	40000c00 	.word	0x40000c00
 80065fc:	40010400 	.word	0x40010400
 8006600:	40014000 	.word	0x40014000
 8006604:	40014400 	.word	0x40014400
 8006608:	40014800 	.word	0x40014800
 800660c:	40001800 	.word	0x40001800
 8006610:	40001c00 	.word	0x40001c00
 8006614:	40002000 	.word	0x40002000

08006618 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006628:	2b01      	cmp	r3, #1
 800662a:	d101      	bne.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800662c:	2302      	movs	r3, #2
 800662e:	e06d      	b.n	800670c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a30      	ldr	r2, [pc, #192]	; (8006718 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d004      	beq.n	8006664 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a2f      	ldr	r2, [pc, #188]	; (800671c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d108      	bne.n	8006676 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800666a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	4313      	orrs	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	4313      	orrs	r3, r2
 8006686:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a20      	ldr	r2, [pc, #128]	; (8006718 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d022      	beq.n	80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a2:	d01d      	beq.n	80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a1d      	ldr	r2, [pc, #116]	; (8006720 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d018      	beq.n	80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a1c      	ldr	r2, [pc, #112]	; (8006724 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d013      	beq.n	80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a1a      	ldr	r2, [pc, #104]	; (8006728 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d00e      	beq.n	80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a15      	ldr	r2, [pc, #84]	; (800671c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d009      	beq.n	80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a16      	ldr	r2, [pc, #88]	; (800672c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d004      	beq.n	80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a15      	ldr	r2, [pc, #84]	; (8006730 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d10c      	bne.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	40010000 	.word	0x40010000
 800671c:	40010400 	.word	0x40010400
 8006720:	40000400 	.word	0x40000400
 8006724:	40000800 	.word	0x40000800
 8006728:	40000c00 	.word	0x40000c00
 800672c:	40014000 	.word	0x40014000
 8006730:	40001800 	.word	0x40001800

08006734 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e040      	b.n	8006804 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006786:	2b00      	cmp	r3, #0
 8006788:	d106      	bne.n	8006798 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7fc fbdc 	bl	8002f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2224      	movs	r2, #36	; 0x24
 800679c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f022 0201 	bic.w	r2, r2, #1
 80067ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fc06 	bl	8006fc0 <UART_SetConfig>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d101      	bne.n	80067be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e022      	b.n	8006804 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d002      	beq.n	80067cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fe5e 	bl	8007488 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689a      	ldr	r2, [r3, #8]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f042 0201 	orr.w	r2, r2, #1
 80067fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fee5 	bl	80075cc <UART_CheckIdleState>
 8006802:	4603      	mov	r3, r0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3708      	adds	r7, #8
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08a      	sub	sp, #40	; 0x28
 8006810:	af02      	add	r7, sp, #8
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	603b      	str	r3, [r7, #0]
 8006818:	4613      	mov	r3, r2
 800681a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006820:	2b20      	cmp	r3, #32
 8006822:	d171      	bne.n	8006908 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <HAL_UART_Transmit+0x24>
 800682a:	88fb      	ldrh	r3, [r7, #6]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e06a      	b.n	800690a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2221      	movs	r2, #33	; 0x21
 8006840:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006842:	f7fc fc65 	bl	8003110 <HAL_GetTick>
 8006846:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	88fa      	ldrh	r2, [r7, #6]
 800684c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	88fa      	ldrh	r2, [r7, #6]
 8006854:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006860:	d108      	bne.n	8006874 <HAL_UART_Transmit+0x68>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d104      	bne.n	8006874 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800686a:	2300      	movs	r3, #0
 800686c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	61bb      	str	r3, [r7, #24]
 8006872:	e003      	b.n	800687c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006878:	2300      	movs	r3, #0
 800687a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800687c:	e02c      	b.n	80068d8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	2200      	movs	r2, #0
 8006886:	2180      	movs	r1, #128	; 0x80
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 feec 	bl	8007666 <UART_WaitOnFlagUntilTimeout>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e038      	b.n	800690a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10b      	bne.n	80068b6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	3302      	adds	r3, #2
 80068b2:	61bb      	str	r3, [r7, #24]
 80068b4:	e007      	b.n	80068c6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	781a      	ldrb	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	3301      	adds	r3, #1
 80068c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	3b01      	subs	r3, #1
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068de:	b29b      	uxth	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1cc      	bne.n	800687e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	2200      	movs	r2, #0
 80068ec:	2140      	movs	r1, #64	; 0x40
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f000 feb9 	bl	8007666 <UART_WaitOnFlagUntilTimeout>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e005      	b.n	800690a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2220      	movs	r2, #32
 8006902:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006904:	2300      	movs	r3, #0
 8006906:	e000      	b.n	800690a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006908:	2302      	movs	r3, #2
  }
}
 800690a:	4618      	mov	r0, r3
 800690c:	3720      	adds	r7, #32
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b08a      	sub	sp, #40	; 0x28
 8006916:	af00      	add	r7, sp, #0
 8006918:	60f8      	str	r0, [r7, #12]
 800691a:	60b9      	str	r1, [r7, #8]
 800691c:	4613      	mov	r3, r2
 800691e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006926:	2b20      	cmp	r3, #32
 8006928:	d132      	bne.n	8006990 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <HAL_UART_Receive_IT+0x24>
 8006930:	88fb      	ldrh	r3, [r7, #6]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e02b      	b.n	8006992 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d018      	beq.n	8006980 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	e853 3f00 	ldrex	r3, [r3]
 800695a:	613b      	str	r3, [r7, #16]
   return(result);
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	461a      	mov	r2, r3
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	623b      	str	r3, [r7, #32]
 800696e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006970:	69f9      	ldr	r1, [r7, #28]
 8006972:	6a3a      	ldr	r2, [r7, #32]
 8006974:	e841 2300 	strex	r3, r2, [r1]
 8006978:	61bb      	str	r3, [r7, #24]
   return(result);
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1e6      	bne.n	800694e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006980:	88fb      	ldrh	r3, [r7, #6]
 8006982:	461a      	mov	r2, r3
 8006984:	68b9      	ldr	r1, [r7, #8]
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f000 ff34 	bl	80077f4 <UART_Start_Receive_IT>
 800698c:	4603      	mov	r3, r0
 800698e:	e000      	b.n	8006992 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006990:	2302      	movs	r3, #2
  }
}
 8006992:	4618      	mov	r0, r3
 8006994:	3728      	adds	r7, #40	; 0x28
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
	...

0800699c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b0ba      	sub	sp, #232	; 0xe8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80069c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80069c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80069ca:	4013      	ands	r3, r2
 80069cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80069d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d115      	bne.n	8006a04 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80069d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069dc:	f003 0320 	and.w	r3, r3, #32
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00f      	beq.n	8006a04 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80069e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069e8:	f003 0320 	and.w	r3, r3, #32
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d009      	beq.n	8006a04 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 82ac 	beq.w	8006f52 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	4798      	blx	r3
      }
      return;
 8006a02:	e2a6      	b.n	8006f52 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 8117 	beq.w	8006c3c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d106      	bne.n	8006a28 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006a1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006a1e:	4b85      	ldr	r3, [pc, #532]	; (8006c34 <HAL_UART_IRQHandler+0x298>)
 8006a20:	4013      	ands	r3, r2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f000 810a 	beq.w	8006c3c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a2c:	f003 0301 	and.w	r3, r3, #1
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d011      	beq.n	8006a58 <HAL_UART_IRQHandler+0xbc>
 8006a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00b      	beq.n	8006a58 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2201      	movs	r2, #1
 8006a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a4e:	f043 0201 	orr.w	r2, r3, #1
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d011      	beq.n	8006a88 <HAL_UART_IRQHandler+0xec>
 8006a64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00b      	beq.n	8006a88 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2202      	movs	r2, #2
 8006a76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a7e:	f043 0204 	orr.w	r2, r3, #4
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a8c:	f003 0304 	and.w	r3, r3, #4
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d011      	beq.n	8006ab8 <HAL_UART_IRQHandler+0x11c>
 8006a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00b      	beq.n	8006ab8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2204      	movs	r2, #4
 8006aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aae:	f043 0202 	orr.w	r2, r3, #2
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006abc:	f003 0308 	and.w	r3, r3, #8
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d017      	beq.n	8006af4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ac8:	f003 0320 	and.w	r3, r3, #32
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d105      	bne.n	8006adc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006ad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ad4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00b      	beq.n	8006af4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2208      	movs	r2, #8
 8006ae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aea:	f043 0208 	orr.w	r2, r3, #8
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d012      	beq.n	8006b26 <HAL_UART_IRQHandler+0x18a>
 8006b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00c      	beq.n	8006b26 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b1c:	f043 0220 	orr.w	r2, r3, #32
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 8212 	beq.w	8006f56 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b36:	f003 0320 	and.w	r3, r3, #32
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00d      	beq.n	8006b5a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b42:	f003 0320 	and.w	r3, r3, #32
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d007      	beq.n	8006b5a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6e:	2b40      	cmp	r3, #64	; 0x40
 8006b70:	d005      	beq.n	8006b7e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d04f      	beq.n	8006c1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fefe 	bl	8007980 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8e:	2b40      	cmp	r3, #64	; 0x40
 8006b90:	d141      	bne.n	8006c16 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	3308      	adds	r3, #8
 8006b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3308      	adds	r3, #8
 8006bba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006bbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006bca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006bce:	e841 2300 	strex	r3, r2, [r1]
 8006bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1d9      	bne.n	8006b92 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d013      	beq.n	8006c0e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bea:	4a13      	ldr	r2, [pc, #76]	; (8006c38 <HAL_UART_IRQHandler+0x29c>)
 8006bec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fd ff31 	bl	8004a5a <HAL_DMA_Abort_IT>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d017      	beq.n	8006c2e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006c08:	4610      	mov	r0, r2
 8006c0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c0c:	e00f      	b.n	8006c2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f9b6 	bl	8006f80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c14:	e00b      	b.n	8006c2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f9b2 	bl	8006f80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c1c:	e007      	b.n	8006c2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f9ae 	bl	8006f80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006c2c:	e193      	b.n	8006f56 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c2e:	bf00      	nop
    return;
 8006c30:	e191      	b.n	8006f56 <HAL_UART_IRQHandler+0x5ba>
 8006c32:	bf00      	nop
 8006c34:	04000120 	.word	0x04000120
 8006c38:	08007a49 	.word	0x08007a49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	f040 814c 	bne.w	8006ede <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c4a:	f003 0310 	and.w	r3, r3, #16
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 8145 	beq.w	8006ede <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c58:	f003 0310 	and.w	r3, r3, #16
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 813e 	beq.w	8006ede <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2210      	movs	r2, #16
 8006c68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c74:	2b40      	cmp	r3, #64	; 0x40
 8006c76:	f040 80b6 	bne.w	8006de6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f000 8165 	beq.w	8006f5a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	f080 815d 	bcs.w	8006f5a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ca6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cae:	69db      	ldr	r3, [r3, #28]
 8006cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cb4:	f000 8086 	beq.w	8006dc4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ccc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ce2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ce6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006cee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1da      	bne.n	8006cb8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3308      	adds	r3, #8
 8006d08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d0c:	e853 3f00 	ldrex	r3, [r3]
 8006d10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d14:	f023 0301 	bic.w	r3, r3, #1
 8006d18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3308      	adds	r3, #8
 8006d22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e1      	bne.n	8006d02 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3308      	adds	r3, #8
 8006d44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d48:	e853 3f00 	ldrex	r3, [r3]
 8006d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3308      	adds	r3, #8
 8006d5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e3      	bne.n	8006d3e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d8c:	e853 3f00 	ldrex	r3, [r3]
 8006d90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d94:	f023 0310 	bic.w	r3, r3, #16
 8006d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	461a      	mov	r2, r3
 8006da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006da6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006da8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006daa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006dac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006dae:	e841 2300 	strex	r3, r2, [r1]
 8006db2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1e4      	bne.n	8006d84 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fd fddb 	bl	800497a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f8d8 	bl	8006f94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006de4:	e0b9      	b.n	8006f5a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f000 80ab 	beq.w	8006f5e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006e08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 80a6 	beq.w	8006f5e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1a:	e853 3f00 	ldrex	r3, [r3]
 8006e1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e34:	647b      	str	r3, [r7, #68]	; 0x44
 8006e36:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e3c:	e841 2300 	strex	r3, r2, [r1]
 8006e40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e4      	bne.n	8006e12 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3308      	adds	r3, #8
 8006e4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	e853 3f00 	ldrex	r3, [r3]
 8006e56:	623b      	str	r3, [r7, #32]
   return(result);
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	f023 0301 	bic.w	r3, r3, #1
 8006e5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3308      	adds	r3, #8
 8006e68:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e6c:	633a      	str	r2, [r7, #48]	; 0x30
 8006e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e74:	e841 2300 	strex	r3, r2, [r1]
 8006e78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1e3      	bne.n	8006e48 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2220      	movs	r2, #32
 8006e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	e853 3f00 	ldrex	r3, [r3]
 8006ea0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f023 0310 	bic.w	r3, r3, #16
 8006ea8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006eb6:	61fb      	str	r3, [r7, #28]
 8006eb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	69b9      	ldr	r1, [r7, #24]
 8006ebc:	69fa      	ldr	r2, [r7, #28]
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	617b      	str	r3, [r7, #20]
   return(result);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e4      	bne.n	8006e94 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2202      	movs	r2, #2
 8006ece:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ed0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f85c 	bl	8006f94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006edc:	e03f      	b.n	8006f5e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00e      	beq.n	8006f08 <HAL_UART_IRQHandler+0x56c>
 8006eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d008      	beq.n	8006f08 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006efe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 f853 	bl	8006fac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f06:	e02d      	b.n	8006f64 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00e      	beq.n	8006f32 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d008      	beq.n	8006f32 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d01c      	beq.n	8006f62 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	4798      	blx	r3
    }
    return;
 8006f30:	e017      	b.n	8006f62 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d012      	beq.n	8006f64 <HAL_UART_IRQHandler+0x5c8>
 8006f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00c      	beq.n	8006f64 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fd92 	bl	8007a74 <UART_EndTransmit_IT>
    return;
 8006f50:	e008      	b.n	8006f64 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006f52:	bf00      	nop
 8006f54:	e006      	b.n	8006f64 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006f56:	bf00      	nop
 8006f58:	e004      	b.n	8006f64 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006f5a:	bf00      	nop
 8006f5c:	e002      	b.n	8006f64 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006f5e:	bf00      	nop
 8006f60:	e000      	b.n	8006f64 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006f62:	bf00      	nop
  }

}
 8006f64:	37e8      	adds	r7, #232	; 0xe8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop

08006f6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b088      	sub	sp, #32
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	689a      	ldr	r2, [r3, #8]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	431a      	orrs	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	4ba6      	ldr	r3, [pc, #664]	; (8007284 <UART_SetConfig+0x2c4>)
 8006fec:	4013      	ands	r3, r2
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	6812      	ldr	r2, [r2, #0]
 8006ff2:	6979      	ldr	r1, [r7, #20]
 8006ff4:	430b      	orrs	r3, r1
 8006ff6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68da      	ldr	r2, [r3, #12]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a1b      	ldr	r3, [r3, #32]
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	4313      	orrs	r3, r2
 800701c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	430a      	orrs	r2, r1
 8007030:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a94      	ldr	r2, [pc, #592]	; (8007288 <UART_SetConfig+0x2c8>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d120      	bne.n	800707e <UART_SetConfig+0xbe>
 800703c:	4b93      	ldr	r3, [pc, #588]	; (800728c <UART_SetConfig+0x2cc>)
 800703e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007042:	f003 0303 	and.w	r3, r3, #3
 8007046:	2b03      	cmp	r3, #3
 8007048:	d816      	bhi.n	8007078 <UART_SetConfig+0xb8>
 800704a:	a201      	add	r2, pc, #4	; (adr r2, 8007050 <UART_SetConfig+0x90>)
 800704c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007050:	08007061 	.word	0x08007061
 8007054:	0800706d 	.word	0x0800706d
 8007058:	08007067 	.word	0x08007067
 800705c:	08007073 	.word	0x08007073
 8007060:	2301      	movs	r3, #1
 8007062:	77fb      	strb	r3, [r7, #31]
 8007064:	e150      	b.n	8007308 <UART_SetConfig+0x348>
 8007066:	2302      	movs	r3, #2
 8007068:	77fb      	strb	r3, [r7, #31]
 800706a:	e14d      	b.n	8007308 <UART_SetConfig+0x348>
 800706c:	2304      	movs	r3, #4
 800706e:	77fb      	strb	r3, [r7, #31]
 8007070:	e14a      	b.n	8007308 <UART_SetConfig+0x348>
 8007072:	2308      	movs	r3, #8
 8007074:	77fb      	strb	r3, [r7, #31]
 8007076:	e147      	b.n	8007308 <UART_SetConfig+0x348>
 8007078:	2310      	movs	r3, #16
 800707a:	77fb      	strb	r3, [r7, #31]
 800707c:	e144      	b.n	8007308 <UART_SetConfig+0x348>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a83      	ldr	r2, [pc, #524]	; (8007290 <UART_SetConfig+0x2d0>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d132      	bne.n	80070ee <UART_SetConfig+0x12e>
 8007088:	4b80      	ldr	r3, [pc, #512]	; (800728c <UART_SetConfig+0x2cc>)
 800708a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800708e:	f003 030c 	and.w	r3, r3, #12
 8007092:	2b0c      	cmp	r3, #12
 8007094:	d828      	bhi.n	80070e8 <UART_SetConfig+0x128>
 8007096:	a201      	add	r2, pc, #4	; (adr r2, 800709c <UART_SetConfig+0xdc>)
 8007098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709c:	080070d1 	.word	0x080070d1
 80070a0:	080070e9 	.word	0x080070e9
 80070a4:	080070e9 	.word	0x080070e9
 80070a8:	080070e9 	.word	0x080070e9
 80070ac:	080070dd 	.word	0x080070dd
 80070b0:	080070e9 	.word	0x080070e9
 80070b4:	080070e9 	.word	0x080070e9
 80070b8:	080070e9 	.word	0x080070e9
 80070bc:	080070d7 	.word	0x080070d7
 80070c0:	080070e9 	.word	0x080070e9
 80070c4:	080070e9 	.word	0x080070e9
 80070c8:	080070e9 	.word	0x080070e9
 80070cc:	080070e3 	.word	0x080070e3
 80070d0:	2300      	movs	r3, #0
 80070d2:	77fb      	strb	r3, [r7, #31]
 80070d4:	e118      	b.n	8007308 <UART_SetConfig+0x348>
 80070d6:	2302      	movs	r3, #2
 80070d8:	77fb      	strb	r3, [r7, #31]
 80070da:	e115      	b.n	8007308 <UART_SetConfig+0x348>
 80070dc:	2304      	movs	r3, #4
 80070de:	77fb      	strb	r3, [r7, #31]
 80070e0:	e112      	b.n	8007308 <UART_SetConfig+0x348>
 80070e2:	2308      	movs	r3, #8
 80070e4:	77fb      	strb	r3, [r7, #31]
 80070e6:	e10f      	b.n	8007308 <UART_SetConfig+0x348>
 80070e8:	2310      	movs	r3, #16
 80070ea:	77fb      	strb	r3, [r7, #31]
 80070ec:	e10c      	b.n	8007308 <UART_SetConfig+0x348>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a68      	ldr	r2, [pc, #416]	; (8007294 <UART_SetConfig+0x2d4>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d120      	bne.n	800713a <UART_SetConfig+0x17a>
 80070f8:	4b64      	ldr	r3, [pc, #400]	; (800728c <UART_SetConfig+0x2cc>)
 80070fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007102:	2b30      	cmp	r3, #48	; 0x30
 8007104:	d013      	beq.n	800712e <UART_SetConfig+0x16e>
 8007106:	2b30      	cmp	r3, #48	; 0x30
 8007108:	d814      	bhi.n	8007134 <UART_SetConfig+0x174>
 800710a:	2b20      	cmp	r3, #32
 800710c:	d009      	beq.n	8007122 <UART_SetConfig+0x162>
 800710e:	2b20      	cmp	r3, #32
 8007110:	d810      	bhi.n	8007134 <UART_SetConfig+0x174>
 8007112:	2b00      	cmp	r3, #0
 8007114:	d002      	beq.n	800711c <UART_SetConfig+0x15c>
 8007116:	2b10      	cmp	r3, #16
 8007118:	d006      	beq.n	8007128 <UART_SetConfig+0x168>
 800711a:	e00b      	b.n	8007134 <UART_SetConfig+0x174>
 800711c:	2300      	movs	r3, #0
 800711e:	77fb      	strb	r3, [r7, #31]
 8007120:	e0f2      	b.n	8007308 <UART_SetConfig+0x348>
 8007122:	2302      	movs	r3, #2
 8007124:	77fb      	strb	r3, [r7, #31]
 8007126:	e0ef      	b.n	8007308 <UART_SetConfig+0x348>
 8007128:	2304      	movs	r3, #4
 800712a:	77fb      	strb	r3, [r7, #31]
 800712c:	e0ec      	b.n	8007308 <UART_SetConfig+0x348>
 800712e:	2308      	movs	r3, #8
 8007130:	77fb      	strb	r3, [r7, #31]
 8007132:	e0e9      	b.n	8007308 <UART_SetConfig+0x348>
 8007134:	2310      	movs	r3, #16
 8007136:	77fb      	strb	r3, [r7, #31]
 8007138:	e0e6      	b.n	8007308 <UART_SetConfig+0x348>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a56      	ldr	r2, [pc, #344]	; (8007298 <UART_SetConfig+0x2d8>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d120      	bne.n	8007186 <UART_SetConfig+0x1c6>
 8007144:	4b51      	ldr	r3, [pc, #324]	; (800728c <UART_SetConfig+0x2cc>)
 8007146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800714a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800714e:	2bc0      	cmp	r3, #192	; 0xc0
 8007150:	d013      	beq.n	800717a <UART_SetConfig+0x1ba>
 8007152:	2bc0      	cmp	r3, #192	; 0xc0
 8007154:	d814      	bhi.n	8007180 <UART_SetConfig+0x1c0>
 8007156:	2b80      	cmp	r3, #128	; 0x80
 8007158:	d009      	beq.n	800716e <UART_SetConfig+0x1ae>
 800715a:	2b80      	cmp	r3, #128	; 0x80
 800715c:	d810      	bhi.n	8007180 <UART_SetConfig+0x1c0>
 800715e:	2b00      	cmp	r3, #0
 8007160:	d002      	beq.n	8007168 <UART_SetConfig+0x1a8>
 8007162:	2b40      	cmp	r3, #64	; 0x40
 8007164:	d006      	beq.n	8007174 <UART_SetConfig+0x1b4>
 8007166:	e00b      	b.n	8007180 <UART_SetConfig+0x1c0>
 8007168:	2300      	movs	r3, #0
 800716a:	77fb      	strb	r3, [r7, #31]
 800716c:	e0cc      	b.n	8007308 <UART_SetConfig+0x348>
 800716e:	2302      	movs	r3, #2
 8007170:	77fb      	strb	r3, [r7, #31]
 8007172:	e0c9      	b.n	8007308 <UART_SetConfig+0x348>
 8007174:	2304      	movs	r3, #4
 8007176:	77fb      	strb	r3, [r7, #31]
 8007178:	e0c6      	b.n	8007308 <UART_SetConfig+0x348>
 800717a:	2308      	movs	r3, #8
 800717c:	77fb      	strb	r3, [r7, #31]
 800717e:	e0c3      	b.n	8007308 <UART_SetConfig+0x348>
 8007180:	2310      	movs	r3, #16
 8007182:	77fb      	strb	r3, [r7, #31]
 8007184:	e0c0      	b.n	8007308 <UART_SetConfig+0x348>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a44      	ldr	r2, [pc, #272]	; (800729c <UART_SetConfig+0x2dc>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d125      	bne.n	80071dc <UART_SetConfig+0x21c>
 8007190:	4b3e      	ldr	r3, [pc, #248]	; (800728c <UART_SetConfig+0x2cc>)
 8007192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800719a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800719e:	d017      	beq.n	80071d0 <UART_SetConfig+0x210>
 80071a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071a4:	d817      	bhi.n	80071d6 <UART_SetConfig+0x216>
 80071a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071aa:	d00b      	beq.n	80071c4 <UART_SetConfig+0x204>
 80071ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071b0:	d811      	bhi.n	80071d6 <UART_SetConfig+0x216>
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <UART_SetConfig+0x1fe>
 80071b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ba:	d006      	beq.n	80071ca <UART_SetConfig+0x20a>
 80071bc:	e00b      	b.n	80071d6 <UART_SetConfig+0x216>
 80071be:	2300      	movs	r3, #0
 80071c0:	77fb      	strb	r3, [r7, #31]
 80071c2:	e0a1      	b.n	8007308 <UART_SetConfig+0x348>
 80071c4:	2302      	movs	r3, #2
 80071c6:	77fb      	strb	r3, [r7, #31]
 80071c8:	e09e      	b.n	8007308 <UART_SetConfig+0x348>
 80071ca:	2304      	movs	r3, #4
 80071cc:	77fb      	strb	r3, [r7, #31]
 80071ce:	e09b      	b.n	8007308 <UART_SetConfig+0x348>
 80071d0:	2308      	movs	r3, #8
 80071d2:	77fb      	strb	r3, [r7, #31]
 80071d4:	e098      	b.n	8007308 <UART_SetConfig+0x348>
 80071d6:	2310      	movs	r3, #16
 80071d8:	77fb      	strb	r3, [r7, #31]
 80071da:	e095      	b.n	8007308 <UART_SetConfig+0x348>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a2f      	ldr	r2, [pc, #188]	; (80072a0 <UART_SetConfig+0x2e0>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d125      	bne.n	8007232 <UART_SetConfig+0x272>
 80071e6:	4b29      	ldr	r3, [pc, #164]	; (800728c <UART_SetConfig+0x2cc>)
 80071e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80071f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071f4:	d017      	beq.n	8007226 <UART_SetConfig+0x266>
 80071f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071fa:	d817      	bhi.n	800722c <UART_SetConfig+0x26c>
 80071fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007200:	d00b      	beq.n	800721a <UART_SetConfig+0x25a>
 8007202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007206:	d811      	bhi.n	800722c <UART_SetConfig+0x26c>
 8007208:	2b00      	cmp	r3, #0
 800720a:	d003      	beq.n	8007214 <UART_SetConfig+0x254>
 800720c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007210:	d006      	beq.n	8007220 <UART_SetConfig+0x260>
 8007212:	e00b      	b.n	800722c <UART_SetConfig+0x26c>
 8007214:	2301      	movs	r3, #1
 8007216:	77fb      	strb	r3, [r7, #31]
 8007218:	e076      	b.n	8007308 <UART_SetConfig+0x348>
 800721a:	2302      	movs	r3, #2
 800721c:	77fb      	strb	r3, [r7, #31]
 800721e:	e073      	b.n	8007308 <UART_SetConfig+0x348>
 8007220:	2304      	movs	r3, #4
 8007222:	77fb      	strb	r3, [r7, #31]
 8007224:	e070      	b.n	8007308 <UART_SetConfig+0x348>
 8007226:	2308      	movs	r3, #8
 8007228:	77fb      	strb	r3, [r7, #31]
 800722a:	e06d      	b.n	8007308 <UART_SetConfig+0x348>
 800722c:	2310      	movs	r3, #16
 800722e:	77fb      	strb	r3, [r7, #31]
 8007230:	e06a      	b.n	8007308 <UART_SetConfig+0x348>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a1b      	ldr	r2, [pc, #108]	; (80072a4 <UART_SetConfig+0x2e4>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d138      	bne.n	80072ae <UART_SetConfig+0x2ee>
 800723c:	4b13      	ldr	r3, [pc, #76]	; (800728c <UART_SetConfig+0x2cc>)
 800723e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007242:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007246:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800724a:	d017      	beq.n	800727c <UART_SetConfig+0x2bc>
 800724c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007250:	d82a      	bhi.n	80072a8 <UART_SetConfig+0x2e8>
 8007252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007256:	d00b      	beq.n	8007270 <UART_SetConfig+0x2b0>
 8007258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800725c:	d824      	bhi.n	80072a8 <UART_SetConfig+0x2e8>
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <UART_SetConfig+0x2aa>
 8007262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007266:	d006      	beq.n	8007276 <UART_SetConfig+0x2b6>
 8007268:	e01e      	b.n	80072a8 <UART_SetConfig+0x2e8>
 800726a:	2300      	movs	r3, #0
 800726c:	77fb      	strb	r3, [r7, #31]
 800726e:	e04b      	b.n	8007308 <UART_SetConfig+0x348>
 8007270:	2302      	movs	r3, #2
 8007272:	77fb      	strb	r3, [r7, #31]
 8007274:	e048      	b.n	8007308 <UART_SetConfig+0x348>
 8007276:	2304      	movs	r3, #4
 8007278:	77fb      	strb	r3, [r7, #31]
 800727a:	e045      	b.n	8007308 <UART_SetConfig+0x348>
 800727c:	2308      	movs	r3, #8
 800727e:	77fb      	strb	r3, [r7, #31]
 8007280:	e042      	b.n	8007308 <UART_SetConfig+0x348>
 8007282:	bf00      	nop
 8007284:	efff69f3 	.word	0xefff69f3
 8007288:	40011000 	.word	0x40011000
 800728c:	40023800 	.word	0x40023800
 8007290:	40004400 	.word	0x40004400
 8007294:	40004800 	.word	0x40004800
 8007298:	40004c00 	.word	0x40004c00
 800729c:	40005000 	.word	0x40005000
 80072a0:	40011400 	.word	0x40011400
 80072a4:	40007800 	.word	0x40007800
 80072a8:	2310      	movs	r3, #16
 80072aa:	77fb      	strb	r3, [r7, #31]
 80072ac:	e02c      	b.n	8007308 <UART_SetConfig+0x348>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a72      	ldr	r2, [pc, #456]	; (800747c <UART_SetConfig+0x4bc>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d125      	bne.n	8007304 <UART_SetConfig+0x344>
 80072b8:	4b71      	ldr	r3, [pc, #452]	; (8007480 <UART_SetConfig+0x4c0>)
 80072ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80072c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80072c6:	d017      	beq.n	80072f8 <UART_SetConfig+0x338>
 80072c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80072cc:	d817      	bhi.n	80072fe <UART_SetConfig+0x33e>
 80072ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072d2:	d00b      	beq.n	80072ec <UART_SetConfig+0x32c>
 80072d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072d8:	d811      	bhi.n	80072fe <UART_SetConfig+0x33e>
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <UART_SetConfig+0x326>
 80072de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072e2:	d006      	beq.n	80072f2 <UART_SetConfig+0x332>
 80072e4:	e00b      	b.n	80072fe <UART_SetConfig+0x33e>
 80072e6:	2300      	movs	r3, #0
 80072e8:	77fb      	strb	r3, [r7, #31]
 80072ea:	e00d      	b.n	8007308 <UART_SetConfig+0x348>
 80072ec:	2302      	movs	r3, #2
 80072ee:	77fb      	strb	r3, [r7, #31]
 80072f0:	e00a      	b.n	8007308 <UART_SetConfig+0x348>
 80072f2:	2304      	movs	r3, #4
 80072f4:	77fb      	strb	r3, [r7, #31]
 80072f6:	e007      	b.n	8007308 <UART_SetConfig+0x348>
 80072f8:	2308      	movs	r3, #8
 80072fa:	77fb      	strb	r3, [r7, #31]
 80072fc:	e004      	b.n	8007308 <UART_SetConfig+0x348>
 80072fe:	2310      	movs	r3, #16
 8007300:	77fb      	strb	r3, [r7, #31]
 8007302:	e001      	b.n	8007308 <UART_SetConfig+0x348>
 8007304:	2310      	movs	r3, #16
 8007306:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007310:	d15b      	bne.n	80073ca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007312:	7ffb      	ldrb	r3, [r7, #31]
 8007314:	2b08      	cmp	r3, #8
 8007316:	d828      	bhi.n	800736a <UART_SetConfig+0x3aa>
 8007318:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <UART_SetConfig+0x360>)
 800731a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731e:	bf00      	nop
 8007320:	08007345 	.word	0x08007345
 8007324:	0800734d 	.word	0x0800734d
 8007328:	08007355 	.word	0x08007355
 800732c:	0800736b 	.word	0x0800736b
 8007330:	0800735b 	.word	0x0800735b
 8007334:	0800736b 	.word	0x0800736b
 8007338:	0800736b 	.word	0x0800736b
 800733c:	0800736b 	.word	0x0800736b
 8007340:	08007363 	.word	0x08007363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007344:	f7fe fa60 	bl	8005808 <HAL_RCC_GetPCLK1Freq>
 8007348:	61b8      	str	r0, [r7, #24]
        break;
 800734a:	e013      	b.n	8007374 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800734c:	f7fe fa70 	bl	8005830 <HAL_RCC_GetPCLK2Freq>
 8007350:	61b8      	str	r0, [r7, #24]
        break;
 8007352:	e00f      	b.n	8007374 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007354:	4b4b      	ldr	r3, [pc, #300]	; (8007484 <UART_SetConfig+0x4c4>)
 8007356:	61bb      	str	r3, [r7, #24]
        break;
 8007358:	e00c      	b.n	8007374 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800735a:	f7fe f983 	bl	8005664 <HAL_RCC_GetSysClockFreq>
 800735e:	61b8      	str	r0, [r7, #24]
        break;
 8007360:	e008      	b.n	8007374 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007366:	61bb      	str	r3, [r7, #24]
        break;
 8007368:	e004      	b.n	8007374 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800736a:	2300      	movs	r3, #0
 800736c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	77bb      	strb	r3, [r7, #30]
        break;
 8007372:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d074      	beq.n	8007464 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	005a      	lsls	r2, r3, #1
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	085b      	lsrs	r3, r3, #1
 8007384:	441a      	add	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	fbb2 f3f3 	udiv	r3, r2, r3
 800738e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	2b0f      	cmp	r3, #15
 8007394:	d916      	bls.n	80073c4 <UART_SetConfig+0x404>
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800739c:	d212      	bcs.n	80073c4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	f023 030f 	bic.w	r3, r3, #15
 80073a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	085b      	lsrs	r3, r3, #1
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	f003 0307 	and.w	r3, r3, #7
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	89fb      	ldrh	r3, [r7, #14]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	89fa      	ldrh	r2, [r7, #14]
 80073c0:	60da      	str	r2, [r3, #12]
 80073c2:	e04f      	b.n	8007464 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	77bb      	strb	r3, [r7, #30]
 80073c8:	e04c      	b.n	8007464 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073ca:	7ffb      	ldrb	r3, [r7, #31]
 80073cc:	2b08      	cmp	r3, #8
 80073ce:	d828      	bhi.n	8007422 <UART_SetConfig+0x462>
 80073d0:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <UART_SetConfig+0x418>)
 80073d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d6:	bf00      	nop
 80073d8:	080073fd 	.word	0x080073fd
 80073dc:	08007405 	.word	0x08007405
 80073e0:	0800740d 	.word	0x0800740d
 80073e4:	08007423 	.word	0x08007423
 80073e8:	08007413 	.word	0x08007413
 80073ec:	08007423 	.word	0x08007423
 80073f0:	08007423 	.word	0x08007423
 80073f4:	08007423 	.word	0x08007423
 80073f8:	0800741b 	.word	0x0800741b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073fc:	f7fe fa04 	bl	8005808 <HAL_RCC_GetPCLK1Freq>
 8007400:	61b8      	str	r0, [r7, #24]
        break;
 8007402:	e013      	b.n	800742c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007404:	f7fe fa14 	bl	8005830 <HAL_RCC_GetPCLK2Freq>
 8007408:	61b8      	str	r0, [r7, #24]
        break;
 800740a:	e00f      	b.n	800742c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800740c:	4b1d      	ldr	r3, [pc, #116]	; (8007484 <UART_SetConfig+0x4c4>)
 800740e:	61bb      	str	r3, [r7, #24]
        break;
 8007410:	e00c      	b.n	800742c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007412:	f7fe f927 	bl	8005664 <HAL_RCC_GetSysClockFreq>
 8007416:	61b8      	str	r0, [r7, #24]
        break;
 8007418:	e008      	b.n	800742c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800741a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800741e:	61bb      	str	r3, [r7, #24]
        break;
 8007420:	e004      	b.n	800742c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007422:	2300      	movs	r3, #0
 8007424:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	77bb      	strb	r3, [r7, #30]
        break;
 800742a:	bf00      	nop
    }

    if (pclk != 0U)
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d018      	beq.n	8007464 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	085a      	lsrs	r2, r3, #1
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	441a      	add	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	fbb2 f3f3 	udiv	r3, r2, r3
 8007444:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	2b0f      	cmp	r3, #15
 800744a:	d909      	bls.n	8007460 <UART_SetConfig+0x4a0>
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007452:	d205      	bcs.n	8007460 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	b29a      	uxth	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	60da      	str	r2, [r3, #12]
 800745e:	e001      	b.n	8007464 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007470:	7fbb      	ldrb	r3, [r7, #30]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3720      	adds	r7, #32
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	40007c00 	.word	0x40007c00
 8007480:	40023800 	.word	0x40023800
 8007484:	00f42400 	.word	0x00f42400

08007488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00a      	beq.n	80074b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	430a      	orrs	r2, r1
 80074b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00a      	beq.n	80074d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	430a      	orrs	r2, r1
 80074d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d8:	f003 0304 	and.w	r3, r3, #4
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00a      	beq.n	80074f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	430a      	orrs	r2, r1
 80074f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	f003 0308 	and.w	r3, r3, #8
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00a      	beq.n	8007518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	430a      	orrs	r2, r1
 8007516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	f003 0310 	and.w	r3, r3, #16
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00a      	beq.n	800753a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	430a      	orrs	r2, r1
 8007538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753e:	f003 0320 	and.w	r3, r3, #32
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00a      	beq.n	800755c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007564:	2b00      	cmp	r3, #0
 8007566:	d01a      	beq.n	800759e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	430a      	orrs	r2, r1
 800757c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007586:	d10a      	bne.n	800759e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	430a      	orrs	r2, r1
 800759c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00a      	beq.n	80075c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	430a      	orrs	r2, r1
 80075be:	605a      	str	r2, [r3, #4]
  }
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af02      	add	r7, sp, #8
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075dc:	f7fb fd98 	bl	8003110 <HAL_GetTick>
 80075e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 0308 	and.w	r3, r3, #8
 80075ec:	2b08      	cmp	r3, #8
 80075ee:	d10e      	bne.n	800760e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f831 	bl	8007666 <UART_WaitOnFlagUntilTimeout>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e027      	b.n	800765e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0304 	and.w	r3, r3, #4
 8007618:	2b04      	cmp	r3, #4
 800761a:	d10e      	bne.n	800763a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800761c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f81b 	bl	8007666 <UART_WaitOnFlagUntilTimeout>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e011      	b.n	800765e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2220      	movs	r2, #32
 800763e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2220      	movs	r2, #32
 8007644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b09c      	sub	sp, #112	; 0x70
 800766a:	af00      	add	r7, sp, #0
 800766c:	60f8      	str	r0, [r7, #12]
 800766e:	60b9      	str	r1, [r7, #8]
 8007670:	603b      	str	r3, [r7, #0]
 8007672:	4613      	mov	r3, r2
 8007674:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007676:	e0a7      	b.n	80077c8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007678:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800767a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767e:	f000 80a3 	beq.w	80077c8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007682:	f7fb fd45 	bl	8003110 <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800768e:	429a      	cmp	r2, r3
 8007690:	d302      	bcc.n	8007698 <UART_WaitOnFlagUntilTimeout+0x32>
 8007692:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007694:	2b00      	cmp	r3, #0
 8007696:	d13f      	bne.n	8007718 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80076a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80076ac:	667b      	str	r3, [r7, #100]	; 0x64
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	461a      	mov	r2, r3
 80076b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076b8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80076bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076be:	e841 2300 	strex	r3, r2, [r1]
 80076c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80076c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1e6      	bne.n	8007698 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3308      	adds	r3, #8
 80076d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d4:	e853 3f00 	ldrex	r3, [r3]
 80076d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076dc:	f023 0301 	bic.w	r3, r3, #1
 80076e0:	663b      	str	r3, [r7, #96]	; 0x60
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3308      	adds	r3, #8
 80076e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80076ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80076ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80076f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076f2:	e841 2300 	strex	r3, r2, [r1]
 80076f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80076f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1e5      	bne.n	80076ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2220      	movs	r2, #32
 8007702:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2220      	movs	r2, #32
 8007708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e068      	b.n	80077ea <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0304 	and.w	r3, r3, #4
 8007722:	2b00      	cmp	r3, #0
 8007724:	d050      	beq.n	80077c8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	69db      	ldr	r3, [r3, #28]
 800772c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007734:	d148      	bne.n	80077c8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800773e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007748:	e853 3f00 	ldrex	r3, [r3]
 800774c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007750:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007754:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	461a      	mov	r2, r3
 800775c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800775e:	637b      	str	r3, [r7, #52]	; 0x34
 8007760:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007762:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007764:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007766:	e841 2300 	strex	r3, r2, [r1]
 800776a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800776c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1e6      	bne.n	8007740 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3308      	adds	r3, #8
 8007778:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	e853 3f00 	ldrex	r3, [r3]
 8007780:	613b      	str	r3, [r7, #16]
   return(result);
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	f023 0301 	bic.w	r3, r3, #1
 8007788:	66bb      	str	r3, [r7, #104]	; 0x68
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	3308      	adds	r3, #8
 8007790:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007792:	623a      	str	r2, [r7, #32]
 8007794:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007796:	69f9      	ldr	r1, [r7, #28]
 8007798:	6a3a      	ldr	r2, [r7, #32]
 800779a:	e841 2300 	strex	r3, r2, [r1]
 800779e:	61bb      	str	r3, [r7, #24]
   return(result);
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1e5      	bne.n	8007772 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2220      	movs	r2, #32
 80077aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2220      	movs	r2, #32
 80077b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2220      	movs	r2, #32
 80077b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e010      	b.n	80077ea <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	69da      	ldr	r2, [r3, #28]
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	4013      	ands	r3, r2
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	bf0c      	ite	eq
 80077d8:	2301      	moveq	r3, #1
 80077da:	2300      	movne	r3, #0
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	461a      	mov	r2, r3
 80077e0:	79fb      	ldrb	r3, [r7, #7]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	f43f af48 	beq.w	8007678 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3770      	adds	r7, #112	; 0x70
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
	...

080077f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b097      	sub	sp, #92	; 0x5c
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	4613      	mov	r3, r2
 8007800:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	88fa      	ldrh	r2, [r7, #6]
 800780c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	88fa      	ldrh	r2, [r7, #6]
 8007814:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007826:	d10e      	bne.n	8007846 <UART_Start_Receive_IT+0x52>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d105      	bne.n	800783c <UART_Start_Receive_IT+0x48>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007836:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800783a:	e02d      	b.n	8007898 <UART_Start_Receive_IT+0xa4>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	22ff      	movs	r2, #255	; 0xff
 8007840:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007844:	e028      	b.n	8007898 <UART_Start_Receive_IT+0xa4>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10d      	bne.n	800786a <UART_Start_Receive_IT+0x76>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d104      	bne.n	8007860 <UART_Start_Receive_IT+0x6c>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	22ff      	movs	r2, #255	; 0xff
 800785a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800785e:	e01b      	b.n	8007898 <UART_Start_Receive_IT+0xa4>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	227f      	movs	r2, #127	; 0x7f
 8007864:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007868:	e016      	b.n	8007898 <UART_Start_Receive_IT+0xa4>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007872:	d10d      	bne.n	8007890 <UART_Start_Receive_IT+0x9c>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d104      	bne.n	8007886 <UART_Start_Receive_IT+0x92>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	227f      	movs	r2, #127	; 0x7f
 8007880:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007884:	e008      	b.n	8007898 <UART_Start_Receive_IT+0xa4>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	223f      	movs	r2, #63	; 0x3f
 800788a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800788e:	e003      	b.n	8007898 <UART_Start_Receive_IT+0xa4>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2222      	movs	r2, #34	; 0x22
 80078a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3308      	adds	r3, #8
 80078ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078b2:	e853 3f00 	ldrex	r3, [r3]
 80078b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ba:	f043 0301 	orr.w	r3, r3, #1
 80078be:	657b      	str	r3, [r7, #84]	; 0x54
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	3308      	adds	r3, #8
 80078c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078c8:	64ba      	str	r2, [r7, #72]	; 0x48
 80078ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80078ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078d0:	e841 2300 	strex	r3, r2, [r1]
 80078d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80078d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1e5      	bne.n	80078a8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078e4:	d107      	bne.n	80078f6 <UART_Start_Receive_IT+0x102>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d103      	bne.n	80078f6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	4a21      	ldr	r2, [pc, #132]	; (8007978 <UART_Start_Receive_IT+0x184>)
 80078f2:	669a      	str	r2, [r3, #104]	; 0x68
 80078f4:	e002      	b.n	80078fc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	4a20      	ldr	r2, [pc, #128]	; (800797c <UART_Start_Receive_IT+0x188>)
 80078fa:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d019      	beq.n	8007938 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790c:	e853 3f00 	ldrex	r3, [r3]
 8007910:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007914:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007918:	64fb      	str	r3, [r7, #76]	; 0x4c
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007922:	637b      	str	r3, [r7, #52]	; 0x34
 8007924:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007926:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800792a:	e841 2300 	strex	r3, r2, [r1]
 800792e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1e6      	bne.n	8007904 <UART_Start_Receive_IT+0x110>
 8007936:	e018      	b.n	800796a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	613b      	str	r3, [r7, #16]
   return(result);
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	f043 0320 	orr.w	r3, r3, #32
 800794c:	653b      	str	r3, [r7, #80]	; 0x50
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	461a      	mov	r2, r3
 8007954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007956:	623b      	str	r3, [r7, #32]
 8007958:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	69f9      	ldr	r1, [r7, #28]
 800795c:	6a3a      	ldr	r2, [r7, #32]
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	61bb      	str	r3, [r7, #24]
   return(result);
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e6      	bne.n	8007938 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	375c      	adds	r7, #92	; 0x5c
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr
 8007978:	08007c2f 	.word	0x08007c2f
 800797c:	08007ac9 	.word	0x08007ac9

08007980 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007980:	b480      	push	{r7}
 8007982:	b095      	sub	sp, #84	; 0x54
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007990:	e853 3f00 	ldrex	r3, [r3]
 8007994:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007998:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800799c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	461a      	mov	r2, r3
 80079a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079a6:	643b      	str	r3, [r7, #64]	; 0x40
 80079a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079ae:	e841 2300 	strex	r3, r2, [r1]
 80079b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1e6      	bne.n	8007988 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	3308      	adds	r3, #8
 80079c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c2:	6a3b      	ldr	r3, [r7, #32]
 80079c4:	e853 3f00 	ldrex	r3, [r3]
 80079c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	f023 0301 	bic.w	r3, r3, #1
 80079d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3308      	adds	r3, #8
 80079d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079e2:	e841 2300 	strex	r3, r2, [r1]
 80079e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1e5      	bne.n	80079ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d118      	bne.n	8007a28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	e853 3f00 	ldrex	r3, [r3]
 8007a02:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	f023 0310 	bic.w	r3, r3, #16
 8007a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	461a      	mov	r2, r3
 8007a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a14:	61bb      	str	r3, [r7, #24]
 8007a16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a18:	6979      	ldr	r1, [r7, #20]
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	e841 2300 	strex	r3, r2, [r1]
 8007a20:	613b      	str	r3, [r7, #16]
   return(result);
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1e6      	bne.n	80079f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2220      	movs	r2, #32
 8007a2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007a3c:	bf00      	nop
 8007a3e:	3754      	adds	r7, #84	; 0x54
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f7ff fa8a 	bl	8006f80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a6c:	bf00      	nop
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b088      	sub	sp, #32
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	e853 3f00 	ldrex	r3, [r3]
 8007a88:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a90:	61fb      	str	r3, [r7, #28]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	61bb      	str	r3, [r7, #24]
 8007a9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9e:	6979      	ldr	r1, [r7, #20]
 8007aa0:	69ba      	ldr	r2, [r7, #24]
 8007aa2:	e841 2300 	strex	r3, r2, [r1]
 8007aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1e6      	bne.n	8007a7c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7ff fa56 	bl	8006f6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ac0:	bf00      	nop
 8007ac2:	3720      	adds	r7, #32
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b096      	sub	sp, #88	; 0x58
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ad6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ae0:	2b22      	cmp	r3, #34	; 0x22
 8007ae2:	f040 8098 	bne.w	8007c16 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007af0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007af4:	b2d9      	uxtb	r1, r3
 8007af6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007afa:	b2da      	uxtb	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b00:	400a      	ands	r2, r1
 8007b02:	b2d2      	uxtb	r2, r2
 8007b04:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d17b      	bne.n	8007c26 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b36:	e853 3f00 	ldrex	r3, [r3]
 8007b3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b42:	653b      	str	r3, [r7, #80]	; 0x50
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	461a      	mov	r2, r3
 8007b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8007b4e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b54:	e841 2300 	strex	r3, r2, [r1]
 8007b58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1e6      	bne.n	8007b2e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3308      	adds	r3, #8
 8007b66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6a:	e853 3f00 	ldrex	r3, [r3]
 8007b6e:	623b      	str	r3, [r7, #32]
   return(result);
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	f023 0301 	bic.w	r3, r3, #1
 8007b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3308      	adds	r3, #8
 8007b7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b80:	633a      	str	r2, [r7, #48]	; 0x30
 8007b82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b88:	e841 2300 	strex	r3, r2, [r1]
 8007b8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1e5      	bne.n	8007b60 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2220      	movs	r2, #32
 8007b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d12e      	bne.n	8007c0e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	e853 3f00 	ldrex	r3, [r3]
 8007bc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f023 0310 	bic.w	r3, r3, #16
 8007bca:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bd4:	61fb      	str	r3, [r7, #28]
 8007bd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd8:	69b9      	ldr	r1, [r7, #24]
 8007bda:	69fa      	ldr	r2, [r7, #28]
 8007bdc:	e841 2300 	strex	r3, r2, [r1]
 8007be0:	617b      	str	r3, [r7, #20]
   return(result);
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1e6      	bne.n	8007bb6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	f003 0310 	and.w	r3, r3, #16
 8007bf2:	2b10      	cmp	r3, #16
 8007bf4:	d103      	bne.n	8007bfe <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2210      	movs	r2, #16
 8007bfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c04:	4619      	mov	r1, r3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7ff f9c4 	bl	8006f94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c0c:	e00b      	b.n	8007c26 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f7fa ff64 	bl	8002adc <HAL_UART_RxCpltCallback>
}
 8007c14:	e007      	b.n	8007c26 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	699a      	ldr	r2, [r3, #24]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f042 0208 	orr.w	r2, r2, #8
 8007c24:	619a      	str	r2, [r3, #24]
}
 8007c26:	bf00      	nop
 8007c28:	3758      	adds	r7, #88	; 0x58
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b096      	sub	sp, #88	; 0x58
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c3c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c46:	2b22      	cmp	r3, #34	; 0x22
 8007c48:	f040 8098 	bne.w	8007d7c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c52:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c5a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007c5c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007c60:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007c64:	4013      	ands	r3, r2
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c6a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c70:	1c9a      	adds	r2, r3, #2
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d17b      	bne.n	8007d8c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c9c:	e853 3f00 	ldrex	r3, [r3]
 8007ca0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cb2:	643b      	str	r3, [r7, #64]	; 0x40
 8007cb4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cba:	e841 2300 	strex	r3, r2, [r1]
 8007cbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1e6      	bne.n	8007c94 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3308      	adds	r3, #8
 8007ccc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cce:	6a3b      	ldr	r3, [r7, #32]
 8007cd0:	e853 3f00 	ldrex	r3, [r3]
 8007cd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	f023 0301 	bic.w	r3, r3, #1
 8007cdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	3308      	adds	r3, #8
 8007ce4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ce6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ce8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1e5      	bne.n	8007cc6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d12e      	bne.n	8007d74 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	e853 3f00 	ldrex	r3, [r3]
 8007d28:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	f023 0310 	bic.w	r3, r3, #16
 8007d30:	647b      	str	r3, [r7, #68]	; 0x44
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	461a      	mov	r2, r3
 8007d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d3a:	61bb      	str	r3, [r7, #24]
 8007d3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3e:	6979      	ldr	r1, [r7, #20]
 8007d40:	69ba      	ldr	r2, [r7, #24]
 8007d42:	e841 2300 	strex	r3, r2, [r1]
 8007d46:	613b      	str	r3, [r7, #16]
   return(result);
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1e6      	bne.n	8007d1c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	69db      	ldr	r3, [r3, #28]
 8007d54:	f003 0310 	and.w	r3, r3, #16
 8007d58:	2b10      	cmp	r3, #16
 8007d5a:	d103      	bne.n	8007d64 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2210      	movs	r2, #16
 8007d62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7ff f911 	bl	8006f94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d72:	e00b      	b.n	8007d8c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f7fa feb1 	bl	8002adc <HAL_UART_RxCpltCallback>
}
 8007d7a:	e007      	b.n	8007d8c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	699a      	ldr	r2, [r3, #24]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f042 0208 	orr.w	r2, r2, #8
 8007d8a:	619a      	str	r2, [r3, #24]
}
 8007d8c:	bf00      	nop
 8007d8e:	3758      	adds	r7, #88	; 0x58
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <__libc_init_array>:
 8007d94:	b570      	push	{r4, r5, r6, lr}
 8007d96:	4d0d      	ldr	r5, [pc, #52]	; (8007dcc <__libc_init_array+0x38>)
 8007d98:	4c0d      	ldr	r4, [pc, #52]	; (8007dd0 <__libc_init_array+0x3c>)
 8007d9a:	1b64      	subs	r4, r4, r5
 8007d9c:	10a4      	asrs	r4, r4, #2
 8007d9e:	2600      	movs	r6, #0
 8007da0:	42a6      	cmp	r6, r4
 8007da2:	d109      	bne.n	8007db8 <__libc_init_array+0x24>
 8007da4:	4d0b      	ldr	r5, [pc, #44]	; (8007dd4 <__libc_init_array+0x40>)
 8007da6:	4c0c      	ldr	r4, [pc, #48]	; (8007dd8 <__libc_init_array+0x44>)
 8007da8:	f000 f864 	bl	8007e74 <_init>
 8007dac:	1b64      	subs	r4, r4, r5
 8007dae:	10a4      	asrs	r4, r4, #2
 8007db0:	2600      	movs	r6, #0
 8007db2:	42a6      	cmp	r6, r4
 8007db4:	d105      	bne.n	8007dc2 <__libc_init_array+0x2e>
 8007db6:	bd70      	pop	{r4, r5, r6, pc}
 8007db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dbc:	4798      	blx	r3
 8007dbe:	3601      	adds	r6, #1
 8007dc0:	e7ee      	b.n	8007da0 <__libc_init_array+0xc>
 8007dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dc6:	4798      	blx	r3
 8007dc8:	3601      	adds	r6, #1
 8007dca:	e7f2      	b.n	8007db2 <__libc_init_array+0x1e>
 8007dcc:	080085d4 	.word	0x080085d4
 8007dd0:	080085d4 	.word	0x080085d4
 8007dd4:	080085d4 	.word	0x080085d4
 8007dd8:	080085d8 	.word	0x080085d8

08007ddc <memset>:
 8007ddc:	4402      	add	r2, r0
 8007dde:	4603      	mov	r3, r0
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d100      	bne.n	8007de6 <memset+0xa>
 8007de4:	4770      	bx	lr
 8007de6:	f803 1b01 	strb.w	r1, [r3], #1
 8007dea:	e7f9      	b.n	8007de0 <memset+0x4>

08007dec <__utoa>:
 8007dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dee:	4c1f      	ldr	r4, [pc, #124]	; (8007e6c <__utoa+0x80>)
 8007df0:	b08b      	sub	sp, #44	; 0x2c
 8007df2:	4605      	mov	r5, r0
 8007df4:	460b      	mov	r3, r1
 8007df6:	466e      	mov	r6, sp
 8007df8:	f104 0c20 	add.w	ip, r4, #32
 8007dfc:	6820      	ldr	r0, [r4, #0]
 8007dfe:	6861      	ldr	r1, [r4, #4]
 8007e00:	4637      	mov	r7, r6
 8007e02:	c703      	stmia	r7!, {r0, r1}
 8007e04:	3408      	adds	r4, #8
 8007e06:	4564      	cmp	r4, ip
 8007e08:	463e      	mov	r6, r7
 8007e0a:	d1f7      	bne.n	8007dfc <__utoa+0x10>
 8007e0c:	7921      	ldrb	r1, [r4, #4]
 8007e0e:	7139      	strb	r1, [r7, #4]
 8007e10:	1e91      	subs	r1, r2, #2
 8007e12:	6820      	ldr	r0, [r4, #0]
 8007e14:	6038      	str	r0, [r7, #0]
 8007e16:	2922      	cmp	r1, #34	; 0x22
 8007e18:	f04f 0100 	mov.w	r1, #0
 8007e1c:	d904      	bls.n	8007e28 <__utoa+0x3c>
 8007e1e:	7019      	strb	r1, [r3, #0]
 8007e20:	460b      	mov	r3, r1
 8007e22:	4618      	mov	r0, r3
 8007e24:	b00b      	add	sp, #44	; 0x2c
 8007e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e28:	1e58      	subs	r0, r3, #1
 8007e2a:	4684      	mov	ip, r0
 8007e2c:	fbb5 f7f2 	udiv	r7, r5, r2
 8007e30:	fb02 5617 	mls	r6, r2, r7, r5
 8007e34:	3628      	adds	r6, #40	; 0x28
 8007e36:	446e      	add	r6, sp
 8007e38:	460c      	mov	r4, r1
 8007e3a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007e3e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007e42:	462e      	mov	r6, r5
 8007e44:	42b2      	cmp	r2, r6
 8007e46:	f101 0101 	add.w	r1, r1, #1
 8007e4a:	463d      	mov	r5, r7
 8007e4c:	d9ee      	bls.n	8007e2c <__utoa+0x40>
 8007e4e:	2200      	movs	r2, #0
 8007e50:	545a      	strb	r2, [r3, r1]
 8007e52:	1919      	adds	r1, r3, r4
 8007e54:	1aa5      	subs	r5, r4, r2
 8007e56:	42aa      	cmp	r2, r5
 8007e58:	dae3      	bge.n	8007e22 <__utoa+0x36>
 8007e5a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007e5e:	780e      	ldrb	r6, [r1, #0]
 8007e60:	7006      	strb	r6, [r0, #0]
 8007e62:	3201      	adds	r2, #1
 8007e64:	f801 5901 	strb.w	r5, [r1], #-1
 8007e68:	e7f4      	b.n	8007e54 <__utoa+0x68>
 8007e6a:	bf00      	nop
 8007e6c:	080085a4 	.word	0x080085a4

08007e70 <utoa>:
 8007e70:	f7ff bfbc 	b.w	8007dec <__utoa>

08007e74 <_init>:
 8007e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e76:	bf00      	nop
 8007e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e7a:	bc08      	pop	{r3}
 8007e7c:	469e      	mov	lr, r3
 8007e7e:	4770      	bx	lr

08007e80 <_fini>:
 8007e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e82:	bf00      	nop
 8007e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e86:	bc08      	pop	{r3}
 8007e88:	469e      	mov	lr, r3
 8007e8a:	4770      	bx	lr
