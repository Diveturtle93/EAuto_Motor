
Motorsteuergeraet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f14  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  0800610c  0800610c  0001610c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065a0  080065a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080065a0  080065a0  000165a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065a8  080065a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065a8  080065a8  000165a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065ac  080065ac  000165ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080065b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000000c  080065bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080065bc  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000190ca  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000394f  00000000  00000000  00039104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  0003ca58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  0003db78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ca60  00000000  00000000  0003eaf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018107  00000000  00000000  0006b550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001078d8  00000000  00000000  00083657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018af2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004458  00000000  00000000  0018af84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080060f4 	.word	0x080060f4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080060f4 	.word	0x080060f4

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <BAMOCAN_ID>:
//----------------------------------------------------------------------

// Ermittle Register nach Empfang Bamocar CAN-ID
//----------------------------------------------------------------------
void BAMOCAN_ID(uint8_t* data)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	uint8_t Reg = data[0];
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	73fb      	strb	r3, [r7, #15]
	uint16_t speed = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	81bb      	strh	r3, [r7, #12]

	// Waehlen welches Register gesendet wurde
	switch (Reg)
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	2b30      	cmp	r3, #48	; 0x30
 8000556:	d113      	bne.n	8000580 <BAMOCAN_ID+0x40>
	{
		// Register fuer aktuelle Drehzahl, speed = n
		case BAMOCAR_REG_SPEED_ACT:
			speed = ((data[2]<<8) + data[1]);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	3302      	adds	r3, #2
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	b29b      	uxth	r3, r3
 8000560:	021b      	lsls	r3, r3, #8
 8000562:	b29a      	uxth	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3301      	adds	r3, #1
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	b29b      	uxth	r3, r3
 800056c:	4413      	add	r3, r2
 800056e:	81bb      	strh	r3, [r7, #12]
			motor1.Drehzahl = speed;
 8000570:	4a08      	ldr	r2, [pc, #32]	; (8000594 <BAMOCAN_ID+0x54>)
 8000572:	89bb      	ldrh	r3, [r7, #12]
 8000574:	8053      	strh	r3, [r2, #2]
// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Aktuelle Drehzahl\n", 18);
 8000576:	2112      	movs	r1, #18
 8000578:	4807      	ldr	r0, [pc, #28]	; (8000598 <BAMOCAN_ID+0x58>)
 800057a:	f000 f811 	bl	80005a0 <uartTransmit>
#endif

			break;
 800057e:	e004      	b.n	800058a <BAMOCAN_ID+0x4a>


		// Default Mitteilung falls Auwertung für Register noch nicht definiert ist
		default:
			uartTransmit("Bamocar Register nicht definiert\n", 33);
 8000580:	2121      	movs	r1, #33	; 0x21
 8000582:	4806      	ldr	r0, [pc, #24]	; (800059c <BAMOCAN_ID+0x5c>)
 8000584:	f000 f80c 	bl	80005a0 <uartTransmit>
			break;
 8000588:	bf00      	nop
	}
}
 800058a:	bf00      	nop
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000034 	.word	0x20000034
 8000598:	0800610c 	.word	0x0800610c
 800059c:	08006120 	.word	0x08006120

080005a0 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <uartTransmit+0x24>)
 80005b6:	f005 f8cf 	bl	8005758 <HAL_UART_Transmit>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000138 	.word	0x20000138

080005c8 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 80005d2:	683a      	ldr	r2, [r7, #0]
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	4619      	mov	r1, r3
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f005 fd88 	bl	80060f0 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fe27 	bl	8000238 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	f107 010c 	add.w	r1, r7, #12
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	4803      	ldr	r0, [pc, #12]	; (8000604 <uartTransmitNumber+0x3c>)
 80005f8:	f005 f8ae 	bl	8005758 <HAL_UART_Transmit>
}
 80005fc:	bf00      	nop
 80005fe:	3718      	adds	r7, #24
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000138 	.word	0x20000138

08000608 <collectMiddlewareInfo>:


// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION		"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION			"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION	"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION			"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 800060c:	2112      	movs	r1, #18
 800060e:	4822      	ldr	r0, [pc, #136]	; (8000698 <collectMiddlewareInfo+0x90>)
 8000610:	f7ff ffc6 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8000614:	210a      	movs	r1, #10
 8000616:	2005      	movs	r0, #5
 8000618:	f7ff ffd6 	bl	80005c8 <uartTransmitNumber>
	uartTransmit(".", 1);
 800061c:	2101      	movs	r1, #1
 800061e:	481f      	ldr	r0, [pc, #124]	; (800069c <collectMiddlewareInfo+0x94>)
 8000620:	f7ff ffbe 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8000624:	210a      	movs	r1, #10
 8000626:	2001      	movs	r0, #1
 8000628:	f7ff ffce 	bl	80005c8 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 800062c:	2110      	movs	r1, #16
 800062e:	481c      	ldr	r0, [pc, #112]	; (80006a0 <collectMiddlewareInfo+0x98>)
 8000630:	f7ff ffb6 	bl	80005a0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8000634:	f001 fe22 	bl	800227c <HAL_GetHalVersion>
 8000638:	4603      	mov	r3, r0
 800063a:	0e1b      	lsrs	r3, r3, #24
 800063c:	b2db      	uxtb	r3, r3
 800063e:	210a      	movs	r1, #10
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ffc1 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000646:	2101      	movs	r1, #1
 8000648:	4814      	ldr	r0, [pc, #80]	; (800069c <collectMiddlewareInfo+0x94>)
 800064a:	f7ff ffa9 	bl	80005a0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 800064e:	f001 fe15 	bl	800227c <HAL_GetHalVersion>
 8000652:	4603      	mov	r3, r0
 8000654:	0c1b      	lsrs	r3, r3, #16
 8000656:	b2db      	uxtb	r3, r3
 8000658:	210a      	movs	r1, #10
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ffb4 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000660:	2101      	movs	r1, #1
 8000662:	480e      	ldr	r0, [pc, #56]	; (800069c <collectMiddlewareInfo+0x94>)
 8000664:	f7ff ff9c 	bl	80005a0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000668:	f001 fe08 	bl	800227c <HAL_GetHalVersion>
 800066c:	4603      	mov	r3, r0
 800066e:	0a1b      	lsrs	r3, r3, #8
 8000670:	b2db      	uxtb	r3, r3
 8000672:	210a      	movs	r1, #10
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ffa7 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800067a:	2101      	movs	r1, #1
 800067c:	4807      	ldr	r0, [pc, #28]	; (800069c <collectMiddlewareInfo+0x94>)
 800067e:	f7ff ff8f 	bl	80005a0 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000682:	f001 fdfb 	bl	800227c <HAL_GetHalVersion>
 8000686:	4603      	mov	r3, r0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	210a      	movs	r1, #10
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff9b 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen

	uartTransmit("\n", 1);*/
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	08006144 	.word	0x08006144
 800069c:	08006158 	.word	0x08006158
 80006a0:	0800615c 	.word	0x0800615c

080006a4 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	#define STRING_GIT_BRANCH			"\nGit Branch:\t\t"
	#define STRING_GIT_HASH				"\nGit Hash:\t\t"
	#define STRING_BUILD_DATE			"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME			"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_VERSION, sizeof(STRING_GIT_VERSION));
 80006a8:	2110      	movs	r1, #16
 80006aa:	4816      	ldr	r0, [pc, #88]	; (8000704 <collectSoftwareInfo+0x60>)
 80006ac:	f7ff ff78 	bl	80005a0 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 80006b0:	2108      	movs	r1, #8
 80006b2:	4815      	ldr	r0, [pc, #84]	; (8000708 <collectSoftwareInfo+0x64>)
 80006b4:	f7ff ff74 	bl	80005a0 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 80006b8:	210f      	movs	r1, #15
 80006ba:	4814      	ldr	r0, [pc, #80]	; (800070c <collectSoftwareInfo+0x68>)
 80006bc:	f7ff ff70 	bl	80005a0 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 80006c0:	210c      	movs	r1, #12
 80006c2:	4813      	ldr	r0, [pc, #76]	; (8000710 <collectSoftwareInfo+0x6c>)
 80006c4:	f7ff ff6c 	bl	80005a0 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 80006c8:	210d      	movs	r1, #13
 80006ca:	4812      	ldr	r0, [pc, #72]	; (8000714 <collectSoftwareInfo+0x70>)
 80006cc:	f7ff ff68 	bl	80005a0 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 80006d0:	2129      	movs	r1, #41	; 0x29
 80006d2:	4811      	ldr	r0, [pc, #68]	; (8000718 <collectSoftwareInfo+0x74>)
 80006d4:	f7ff ff64 	bl	80005a0 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80006d8:	210f      	movs	r1, #15
 80006da:	4810      	ldr	r0, [pc, #64]	; (800071c <collectSoftwareInfo+0x78>)
 80006dc:	f7ff ff60 	bl	80005a0 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 80006e0:	210c      	movs	r1, #12
 80006e2:	480f      	ldr	r0, [pc, #60]	; (8000720 <collectSoftwareInfo+0x7c>)
 80006e4:	f7ff ff5c 	bl	80005a0 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80006e8:	210f      	movs	r1, #15
 80006ea:	480e      	ldr	r0, [pc, #56]	; (8000724 <collectSoftwareInfo+0x80>)
 80006ec:	f7ff ff58 	bl	80005a0 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 80006f0:	2109      	movs	r1, #9
 80006f2:	480d      	ldr	r0, [pc, #52]	; (8000728 <collectSoftwareInfo+0x84>)
 80006f4:	f7ff ff54 	bl	80005a0 <uartTransmit>

	uartTransmit("\n", 1);
 80006f8:	2101      	movs	r1, #1
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <collectSoftwareInfo+0x88>)
 80006fc:	f7ff ff50 	bl	80005a0 <uartTransmit>
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	0800616c 	.word	0x0800616c
 8000708:	0800617c 	.word	0x0800617c
 800070c:	08006184 	.word	0x08006184
 8000710:	08006194 	.word	0x08006194
 8000714:	080061a0 	.word	0x080061a0
 8000718:	080061b0 	.word	0x080061b0
 800071c:	080061dc 	.word	0x080061dc
 8000720:	080061ec 	.word	0x080061ec
 8000724:	080061f8 	.word	0x080061f8
 8000728:	08006208 	.word	0x08006208
 800072c:	08006214 	.word	0x08006214

08000730 <collectHardwareInfo>:
//----------------------------------------------------------------------

// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID		"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION			"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ				"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID				"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 8000736:	2113      	movs	r1, #19
 8000738:	483b      	ldr	r0, [pc, #236]	; (8000828 <collectHardwareInfo+0xf8>)
 800073a:	f7ff ff31 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 800073e:	f001 fdb3 	bl	80022a8 <HAL_GetDEVID>
 8000742:	4603      	mov	r3, r0
 8000744:	210a      	movs	r1, #10
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff3e 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 800074c:	2115      	movs	r1, #21
 800074e:	4837      	ldr	r0, [pc, #220]	; (800082c <collectHardwareInfo+0xfc>)
 8000750:	f7ff ff26 	bl	80005a0 <uartTransmit>
	
	switch(HAL_GetREVID())													// Mikrocontroller Revision
 8000754:	f001 fd9c 	bl	8002290 <HAL_GetREVID>
 8000758:	4603      	mov	r3, r0
 800075a:	f242 0201 	movw	r2, #8193	; 0x2001
 800075e:	4293      	cmp	r3, r2
 8000760:	d016      	beq.n	8000790 <collectHardwareInfo+0x60>
 8000762:	f242 0201 	movw	r2, #8193	; 0x2001
 8000766:	4293      	cmp	r3, r2
 8000768:	d817      	bhi.n	800079a <collectHardwareInfo+0x6a>
 800076a:	f241 0201 	movw	r2, #4097	; 0x1001
 800076e:	4293      	cmp	r3, r2
 8000770:	d004      	beq.n	800077c <collectHardwareInfo+0x4c>
 8000772:	f241 0203 	movw	r2, #4099	; 0x1003
 8000776:	4293      	cmp	r3, r2
 8000778:	d005      	beq.n	8000786 <collectHardwareInfo+0x56>
 800077a:	e00e      	b.n	800079a <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 800077c:	2101      	movs	r1, #1
 800077e:	482c      	ldr	r0, [pc, #176]	; (8000830 <collectHardwareInfo+0x100>)
 8000780:	f7ff ff0e 	bl	80005a0 <uartTransmit>
			break;
 8000784:	e011      	b.n	80007aa <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 8000786:	2101      	movs	r1, #1
 8000788:	482a      	ldr	r0, [pc, #168]	; (8000834 <collectHardwareInfo+0x104>)
 800078a:	f7ff ff09 	bl	80005a0 <uartTransmit>
			break;
 800078e:	e00c      	b.n	80007aa <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000790:	2101      	movs	r1, #1
 8000792:	4829      	ldr	r0, [pc, #164]	; (8000838 <collectHardwareInfo+0x108>)
 8000794:	f7ff ff04 	bl	80005a0 <uartTransmit>
			break;
 8000798:	e007      	b.n	80007aa <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 800079a:	f001 fd79 	bl	8002290 <HAL_GetREVID>
 800079e:	4603      	mov	r3, r0
 80007a0:	210a      	movs	r1, #10
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ff10 	bl	80005c8 <uartTransmitNumber>
			break;
 80007a8:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 80007aa:	2113      	movs	r1, #19
 80007ac:	4823      	ldr	r0, [pc, #140]	; (800083c <collectHardwareInfo+0x10c>)
 80007ae:	f7ff fef7 	bl	80005a0 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 80007b2:	f003 ff15 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 80007b6:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a21      	ldr	r2, [pc, #132]	; (8000840 <collectHardwareInfo+0x110>)
 80007bc:	fba2 2303 	umull	r2, r3, r2, r3
 80007c0:	0c9b      	lsrs	r3, r3, #18
 80007c2:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 80007c4:	210a      	movs	r1, #10
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff fefe 	bl	80005c8 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80007cc:	2104      	movs	r1, #4
 80007ce:	481d      	ldr	r0, [pc, #116]	; (8000844 <collectHardwareInfo+0x114>)
 80007d0:	f7ff fee6 	bl	80005a0 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80007d4:	210f      	movs	r1, #15
 80007d6:	481c      	ldr	r0, [pc, #112]	; (8000848 <collectHardwareInfo+0x118>)
 80007d8:	f7ff fee2 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 80007dc:	f001 fd72 	bl	80022c4 <HAL_GetUIDw0>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2110      	movs	r1, #16
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff feef 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80007ea:	2101      	movs	r1, #1
 80007ec:	4817      	ldr	r0, [pc, #92]	; (800084c <collectHardwareInfo+0x11c>)
 80007ee:	f7ff fed7 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 80007f2:	f001 fd73 	bl	80022dc <HAL_GetUIDw1>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2110      	movs	r1, #16
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fee4 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000800:	2101      	movs	r1, #1
 8000802:	4812      	ldr	r0, [pc, #72]	; (800084c <collectHardwareInfo+0x11c>)
 8000804:	f7ff fecc 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000808:	f001 fd74 	bl	80022f4 <HAL_GetUIDw2>
 800080c:	4603      	mov	r3, r0
 800080e:	2110      	movs	r1, #16
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fed9 	bl	80005c8 <uartTransmitNumber>

	uartTransmit("\n", 1);
 8000816:	2101      	movs	r1, #1
 8000818:	480d      	ldr	r0, [pc, #52]	; (8000850 <collectHardwareInfo+0x120>)
 800081a:	f7ff fec1 	bl	80005a0 <uartTransmit>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	08006218 	.word	0x08006218
 800082c:	0800622c 	.word	0x0800622c
 8000830:	08006244 	.word	0x08006244
 8000834:	08006248 	.word	0x08006248
 8000838:	0800624c 	.word	0x0800624c
 800083c:	08006250 	.word	0x08006250
 8000840:	431bde83 	.word	0x431bde83
 8000844:	08006264 	.word	0x08006264
 8000848:	0800626c 	.word	0x0800626c
 800084c:	0800627c 	.word	0x0800627c
 8000850:	08006214 	.word	0x08006214

08000854 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL "\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL "\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL "\n\t --Software--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000858:	2111      	movs	r1, #17
 800085a:	480b      	ldr	r0, [pc, #44]	; (8000888 <collectSystemInfo+0x34>)
 800085c:	f7ff fea0 	bl	80005a0 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000860:	f7ff ff66 	bl	8000730 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000864:	2111      	movs	r1, #17
 8000866:	4809      	ldr	r0, [pc, #36]	; (800088c <collectSystemInfo+0x38>)
 8000868:	f7ff fe9a 	bl	80005a0 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 800086c:	f7ff ff1a 	bl	80006a4 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000870:	2113      	movs	r1, #19
 8000872:	4807      	ldr	r0, [pc, #28]	; (8000890 <collectSystemInfo+0x3c>)
 8000874:	f7ff fe94 	bl	80005a0 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000878:	f7ff fec6 	bl	8000608 <collectMiddlewareInfo>

	uartTransmit("\n\n\n", 3);
 800087c:	2103      	movs	r1, #3
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <collectSystemInfo+0x40>)
 8000880:	f7ff fe8e 	bl	80005a0 <uartTransmit>
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	08006280 	.word	0x08006280
 800088c:	08006294 	.word	0x08006294
 8000890:	080062a8 	.word	0x080062a8
 8000894:	080062bc 	.word	0x080062bc

08000898 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 800089e:	2300      	movs	r3, #0
 80008a0:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 80008a2:	4b25      	ldr	r3, [pc, #148]	; (8000938 <readResetSource+0xa0>)
 80008a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d002      	beq.n	80008b4 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	3301      	adds	r3, #1
 80008b2:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 80008b4:	4b20      	ldr	r3, [pc, #128]	; (8000938 <readResetSource+0xa0>)
 80008b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d002      	beq.n	80008c6 <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	3302      	adds	r3, #2
 80008c4:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 80008c6:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <readResetSource+0xa0>)
 80008c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	da02      	bge.n	80008d4 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	3304      	adds	r3, #4
 80008d2:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 80008d4:	4b18      	ldr	r3, [pc, #96]	; (8000938 <readResetSource+0xa0>)
 80008d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d002      	beq.n	80008e6 <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	3308      	adds	r3, #8
 80008e4:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <readResetSource+0xa0>)
 80008e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d002      	beq.n	80008f8 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	3310      	adds	r3, #16
 80008f6:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <readResetSource+0xa0>)
 80008fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000900:	2b00      	cmp	r3, #0
 8000902:	d002      	beq.n	800090a <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	3320      	adds	r3, #32
 8000908:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <readResetSource+0xa0>)
 800090c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800090e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000912:	2b00      	cmp	r3, #0
 8000914:	d002      	beq.n	800091c <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	3340      	adds	r3, #64	; 0x40
 800091a:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <readResetSource+0xa0>)
 800091e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000920:	4a05      	ldr	r2, [pc, #20]	; (8000938 <readResetSource+0xa0>)
 8000922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000926:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8000928:	79fb      	ldrb	r3, [r7, #7]
}
 800092a:	4618      	mov	r0, r3
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800

0800093c <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8000946:	2106      	movs	r1, #6
 8000948:	482a      	ldr	r0, [pc, #168]	; (80009f4 <printResetSource+0xb8>)
 800094a:	f7ff fe29 	bl	80005a0 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d104      	bne.n	800095e <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8000954:	210f      	movs	r1, #15
 8000956:	4828      	ldr	r0, [pc, #160]	; (80009f8 <printResetSource+0xbc>)
 8000958:	f7ff fe22 	bl	80005a0 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 800095c:	e046      	b.n	80009ec <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	2b00      	cmp	r3, #0
 8000966:	d003      	beq.n	8000970 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000968:	2118      	movs	r1, #24
 800096a:	4824      	ldr	r0, [pc, #144]	; (80009fc <printResetSource+0xc0>)
 800096c:	f7ff fe18 	bl	80005a0 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	2b00      	cmp	r3, #0
 8000978:	d003      	beq.n	8000982 <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 800097a:	2116      	movs	r1, #22
 800097c:	4820      	ldr	r0, [pc, #128]	; (8000a00 <printResetSource+0xc4>)
 800097e:	f7ff fe0f 	bl	80005a0 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	f003 0304 	and.w	r3, r3, #4
 8000988:	2b00      	cmp	r3, #0
 800098a:	d003      	beq.n	8000994 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 800098c:	210a      	movs	r1, #10
 800098e:	481d      	ldr	r0, [pc, #116]	; (8000a04 <printResetSource+0xc8>)
 8000990:	f7ff fe06 	bl	80005a0 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	f003 0308 	and.w	r3, r3, #8
 800099a:	2b00      	cmp	r3, #0
 800099c:	d003      	beq.n	80009a6 <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 800099e:	2110      	movs	r1, #16
 80009a0:	4819      	ldr	r0, [pc, #100]	; (8000a08 <printResetSource+0xcc>)
 80009a2:	f7ff fdfd 	bl	80005a0 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	f003 0310 	and.w	r3, r3, #16
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d003      	beq.n	80009b8 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 80009b0:	210f      	movs	r1, #15
 80009b2:	4816      	ldr	r0, [pc, #88]	; (8000a0c <printResetSource+0xd0>)
 80009b4:	f7ff fdf4 	bl	80005a0 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	f003 0320 	and.w	r3, r3, #32
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d003      	beq.n	80009ca <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 80009c2:	210f      	movs	r1, #15
 80009c4:	4812      	ldr	r0, [pc, #72]	; (8000a10 <printResetSource+0xd4>)
 80009c6:	f7ff fdeb 	bl	80005a0 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d003      	beq.n	80009dc <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 80009d4:	210a      	movs	r1, #10
 80009d6:	480f      	ldr	r0, [pc, #60]	; (8000a14 <printResetSource+0xd8>)
 80009d8:	f7ff fde2 	bl	80005a0 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 80009dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	da03      	bge.n	80009ec <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 80009e4:	2105      	movs	r1, #5
 80009e6:	480c      	ldr	r0, [pc, #48]	; (8000a18 <printResetSource+0xdc>)
 80009e8:	f7ff fdda 	bl	80005a0 <uartTransmit>
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	080062c0 	.word	0x080062c0
 80009f8:	080062c8 	.word	0x080062c8
 80009fc:	080062d8 	.word	0x080062d8
 8000a00:	080062f4 	.word	0x080062f4
 8000a04:	0800630c 	.word	0x0800630c
 8000a08:	08006318 	.word	0x08006318
 8000a0c:	0800632c 	.word	0x0800632c
 8000a10:	0800633c 	.word	0x0800633c
 8000a14:	0800634c 	.word	0x0800634c
 8000a18:	08006358 	.word	0x08006358

08000a1c <ADC_Gaspedal>:
//----------------------------------------------------------------------

// Gaspedal einlesen
//----------------------------------------------------------------------
uint16_t ADC_Gaspedal(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_6;
 8000a32:	2306      	movs	r3, #6
 8000a34:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000a36:	2301      	movs	r3, #1
 8000a38:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	4619      	mov	r1, r3
 8000a42:	480e      	ldr	r0, [pc, #56]	; (8000a7c <ADC_Gaspedal+0x60>)
 8000a44:	f001 fe40 	bl	80026c8 <HAL_ADC_ConfigChannel>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <ADC_Gaspedal+0x36>
	{
		Error_Handler();
 8000a4e:	f001 fa11 	bl	8001e74 <Error_Handler>
	}

	// ADC Starten und Wert einlesen
	HAL_ADC_Start(&hadc1);
 8000a52:	480a      	ldr	r0, [pc, #40]	; (8000a7c <ADC_Gaspedal+0x60>)
 8000a54:	f001 fc9e 	bl	8002394 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000a58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a5c:	4807      	ldr	r0, [pc, #28]	; (8000a7c <ADC_Gaspedal+0x60>)
 8000a5e:	f001 fd9b 	bl	8002598 <HAL_ADC_PollForConversion>
	ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000a62:	4806      	ldr	r0, [pc, #24]	; (8000a7c <ADC_Gaspedal+0x60>)
 8000a64:	f001 fe23 	bl	80026ae <HAL_ADC_GetValue>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	82fb      	strh	r3, [r7, #22]
	HAL_ADC_Stop(&hadc1);
 8000a6c:	4803      	ldr	r0, [pc, #12]	; (8000a7c <ADC_Gaspedal+0x60>)
 8000a6e:	f001 fd5f 	bl	8002530 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000a72:	8afb      	ldrh	r3, [r7, #22]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000058 	.word	0x20000058

08000a80 <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (status == HAL_OK) {													// HAL OK
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d104      	bne.n	8000a9a <hal_error+0x1a>
		uartTransmit("HAL OK\n", 7);
 8000a90:	2107      	movs	r1, #7
 8000a92:	480f      	ldr	r0, [pc, #60]	; (8000ad0 <hal_error+0x50>)
 8000a94:	f7ff fd84 	bl	80005a0 <uartTransmit>
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 8000a98:	e016      	b.n	8000ac8 <hal_error+0x48>
	else if (status == HAL_ERROR) {											// HAL Error
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d104      	bne.n	8000aaa <hal_error+0x2a>
		uartTransmit("HAL ERROR\n", 10);
 8000aa0:	210a      	movs	r1, #10
 8000aa2:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <hal_error+0x54>)
 8000aa4:	f7ff fd7c 	bl	80005a0 <uartTransmit>
}
 8000aa8:	e00e      	b.n	8000ac8 <hal_error+0x48>
	else if (status == HAL_BUSY) {											// HAL Beschaeftigt
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d104      	bne.n	8000aba <hal_error+0x3a>
		uartTransmit("HAL BUSY\n", 9);
 8000ab0:	2109      	movs	r1, #9
 8000ab2:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <hal_error+0x58>)
 8000ab4:	f7ff fd74 	bl	80005a0 <uartTransmit>
}
 8000ab8:	e006      	b.n	8000ac8 <hal_error+0x48>
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b03      	cmp	r3, #3
 8000abe:	d103      	bne.n	8000ac8 <hal_error+0x48>
		uartTransmit("HAL TIMEOUT\n", 12);
 8000ac0:	210c      	movs	r1, #12
 8000ac2:	4806      	ldr	r0, [pc, #24]	; (8000adc <hal_error+0x5c>)
 8000ac4:	f7ff fd6c 	bl	80005a0 <uartTransmit>
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	08006360 	.word	0x08006360
 8000ad4:	08006368 	.word	0x08006368
 8000ad8:	08006374 	.word	0x08006374
 8000adc:	08006380 	.word	0x08006380

08000ae0 <software_error>:
//----------------------------------------------------------------------

// Diagnose Funktion falls ein Fehler auftritt
//----------------------------------------------------------------------
void software_error(uint8_t errorcode)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aea:	b672      	cpsid	i
}
 8000aec:	bf00      	nop
	__disable_irq();														// Interrupts deaktivieren
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);		// Fehler LED einschalten
 8000aee:	2201      	movs	r2, #1
 8000af0:	2104      	movs	r1, #4
 8000af2:	4808      	ldr	r0, [pc, #32]	; (8000b14 <software_error+0x34>)
 8000af4:	f003 f970 	bl	8003dd8 <HAL_GPIO_WritePin>

#ifdef DEBUG																// Serielle Kommunukation nur waehrend Debugging
#define SOFTERRORMESSAGE			"\nError Handler ausgeloest\n"			// Ausgabe das Fehler aufgetreten ist
	uartTransmit(SOFTERRORMESSAGE,sizeof(SOFTERRORMESSAGE));
 8000af8:	211b      	movs	r1, #27
 8000afa:	4807      	ldr	r0, [pc, #28]	; (8000b18 <software_error+0x38>)
 8000afc:	f7ff fd50 	bl	80005a0 <uartTransmit>

#define ERRORCODE					"Error Code:\t"							// Ausgabe des Fehlers anhand von Fehlercode
	uartTransmit(ERRORCODE,sizeof(ERRORCODE));
 8000b00:	210d      	movs	r1, #13
 8000b02:	4806      	ldr	r0, [pc, #24]	; (8000b1c <software_error+0x3c>)
 8000b04:	f7ff fd4c 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(errorcode, 10);										// Fehlercode ausgeben
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	210a      	movs	r1, #10
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fd5b 	bl	80005c8 <uartTransmitNumber>
#endif
	while (1)																// Endlosschleife
 8000b12:	e7fe      	b.n	8000b12 <software_error+0x32>
 8000b14:	40020400 	.word	0x40020400
 8000b18:	08006390 	.word	0x08006390
 8000b1c:	080063ac 	.word	0x080063ac

08000b20 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.Kickdown = HAL_GPIO_ReadPin(KICKDOWN_GPIO_Port, KICKDOWN_Pin);					// Eingang Gaspedal getreten
 8000b24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b28:	48ce      	ldr	r0, [pc, #824]	; (8000e64 <readall_inputs+0x344>)
 8000b2a:	f003 f93d 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	b2d9      	uxtb	r1, r3
 8000b36:	4acc      	ldr	r2, [pc, #816]	; (8000e68 <readall_inputs+0x348>)
 8000b38:	7813      	ldrb	r3, [r2, #0]
 8000b3a:	f361 0300 	bfi	r3, r1, #0, #1
 8000b3e:	7013      	strb	r3, [r2, #0]
	system_in.Leerlauf = HAL_GPIO_ReadPin(LEERLAUF_GPIO_Port, LEERLAUF_Pin);					// Eingang Gaspedal nicht getreten
 8000b40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b44:	48c7      	ldr	r0, [pc, #796]	; (8000e64 <readall_inputs+0x344>)
 8000b46:	f003 f92f 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	b2d9      	uxtb	r1, r3
 8000b52:	4ac5      	ldr	r2, [pc, #788]	; (8000e68 <readall_inputs+0x348>)
 8000b54:	7813      	ldrb	r3, [r2, #0]
 8000b56:	f361 0341 	bfi	r3, r1, #1, #1
 8000b5a:	7013      	strb	r3, [r2, #0]
	system_in.BremseNO = HAL_GPIO_ReadPin(BREMSE_NO_GPIO_Port, BREMSE_NO_Pin);					// Eingang Bremse nicht getreten
 8000b5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b60:	48c0      	ldr	r0, [pc, #768]	; (8000e64 <readall_inputs+0x344>)
 8000b62:	f003 f921 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000b66:	4603      	mov	r3, r0
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	b2d9      	uxtb	r1, r3
 8000b6e:	4abe      	ldr	r2, [pc, #760]	; (8000e68 <readall_inputs+0x348>)
 8000b70:	7813      	ldrb	r3, [r2, #0]
 8000b72:	f361 0382 	bfi	r3, r1, #2, #1
 8000b76:	7013      	strb	r3, [r2, #0]
	system_in.BremseNC = HAL_GPIO_ReadPin(BREMSE_NC_GPIO_Port, BREMSE_NC_Pin);					// Eingang Bremse getreten
 8000b78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b7c:	48b9      	ldr	r0, [pc, #740]	; (8000e64 <readall_inputs+0x344>)
 8000b7e:	f003 f913 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000b82:	4603      	mov	r3, r0
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	b2d9      	uxtb	r1, r3
 8000b8a:	4ab7      	ldr	r2, [pc, #732]	; (8000e68 <readall_inputs+0x348>)
 8000b8c:	7813      	ldrb	r3, [r2, #0]
 8000b8e:	f361 03c3 	bfi	r3, r1, #3, #1
 8000b92:	7013      	strb	r3, [r2, #0]
	system_in.Kupplung = HAL_GPIO_ReadPin(KUPPLUNG_NO_GPIO_Port, KUPPLUNG_NO_Pin);				// Eingang Kupplung nicht getreten
 8000b94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b98:	48b2      	ldr	r0, [pc, #712]	; (8000e64 <readall_inputs+0x344>)
 8000b9a:	f003 f905 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	b2d9      	uxtb	r1, r3
 8000ba6:	4ab0      	ldr	r2, [pc, #704]	; (8000e68 <readall_inputs+0x348>)
 8000ba8:	7813      	ldrb	r3, [r2, #0]
 8000baa:	f361 1304 	bfi	r3, r1, #4, #1
 8000bae:	7013      	strb	r3, [r2, #0]
	system_in.Recuperation = HAL_GPIO_ReadPin(RECUPERATION_GPIO_Port, RECUPERATION_Pin);		// Eingang Recuperation
 8000bb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bb4:	48ad      	ldr	r0, [pc, #692]	; (8000e6c <readall_inputs+0x34c>)
 8000bb6:	f003 f8f7 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	b2d9      	uxtb	r1, r3
 8000bc2:	4aa9      	ldr	r2, [pc, #676]	; (8000e68 <readall_inputs+0x348>)
 8000bc4:	7813      	ldrb	r3, [r2, #0]
 8000bc6:	f361 1345 	bfi	r3, r1, #5, #1
 8000bca:	7013      	strb	r3, [r2, #0]
	system_in.ECON = HAL_GPIO_ReadPin(ECON_GPIO_Port, ECON_Pin);								// Eingang Klima
 8000bcc:	2102      	movs	r1, #2
 8000bce:	48a7      	ldr	r0, [pc, #668]	; (8000e6c <readall_inputs+0x34c>)
 8000bd0:	f003 f8ea 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	b2d9      	uxtb	r1, r3
 8000bdc:	4aa2      	ldr	r2, [pc, #648]	; (8000e68 <readall_inputs+0x348>)
 8000bde:	7813      	ldrb	r3, [r2, #0]
 8000be0:	f361 1386 	bfi	r3, r1, #6, #1
 8000be4:	7013      	strb	r3, [r2, #0]
	system_in.Anlasser = HAL_GPIO_ReadPin(ANLASSER_GPIO_Port, ANLASSER_Pin);					// Eingang Zuendschloss, Motor starten
 8000be6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bea:	48a1      	ldr	r0, [pc, #644]	; (8000e70 <readall_inputs+0x350>)
 8000bec:	f003 f8dc 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	b2d9      	uxtb	r1, r3
 8000bf8:	4a9b      	ldr	r2, [pc, #620]	; (8000e68 <readall_inputs+0x348>)
 8000bfa:	7813      	ldrb	r3, [r2, #0]
 8000bfc:	f361 13c7 	bfi	r3, r1, #7, #1
 8000c00:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8000c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c06:	489b      	ldr	r0, [pc, #620]	; (8000e74 <readall_inputs+0x354>)
 8000c08:	f003 f8ce 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	b2d9      	uxtb	r1, r3
 8000c14:	4a94      	ldr	r2, [pc, #592]	; (8000e68 <readall_inputs+0x348>)
 8000c16:	7853      	ldrb	r3, [r2, #1]
 8000c18:	f361 0300 	bfi	r3, r1, #0, #1
 8000c1c:	7053      	strb	r3, [r2, #1]
	system_in.DCDC_Inst = HAL_GPIO_ReadPin(DCDC_INSTRUCTION_GPIO_Port, DCDC_INSTRUCTION_Pin);	// DCDC Wandler funktioniert einwandfrei
 8000c1e:	2101      	movs	r1, #1
 8000c20:	4895      	ldr	r0, [pc, #596]	; (8000e78 <readall_inputs+0x358>)
 8000c22:	f003 f8c1 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000c26:	4603      	mov	r3, r0
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	b2d9      	uxtb	r1, r3
 8000c2e:	4a8e      	ldr	r2, [pc, #568]	; (8000e68 <readall_inputs+0x348>)
 8000c30:	7853      	ldrb	r3, [r2, #1]
 8000c32:	f361 0341 	bfi	r3, r1, #1, #1
 8000c36:	7053      	strb	r3, [r2, #1]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8000c38:	2101      	movs	r1, #1
 8000c3a:	488c      	ldr	r0, [pc, #560]	; (8000e6c <readall_inputs+0x34c>)
 8000c3c:	f003 f8b4 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000c40:	4603      	mov	r3, r0
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	b2d9      	uxtb	r1, r3
 8000c48:	4a87      	ldr	r2, [pc, #540]	; (8000e68 <readall_inputs+0x348>)
 8000c4a:	7853      	ldrb	r3, [r2, #1]
 8000c4c:	f361 0382 	bfi	r3, r1, #2, #1
 8000c50:	7053      	strb	r3, [r2, #1]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8000c52:	2140      	movs	r1, #64	; 0x40
 8000c54:	4883      	ldr	r0, [pc, #524]	; (8000e64 <readall_inputs+0x344>)
 8000c56:	f003 f8a7 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	b2d9      	uxtb	r1, r3
 8000c62:	4a81      	ldr	r2, [pc, #516]	; (8000e68 <readall_inputs+0x348>)
 8000c64:	7853      	ldrb	r3, [r2, #1]
 8000c66:	f361 03c3 	bfi	r3, r1, #3, #1
 8000c6a:	7053      	strb	r3, [r2, #1]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	4883      	ldr	r0, [pc, #524]	; (8000e7c <readall_inputs+0x35c>)
 8000c70:	f003 f89a 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000c74:	4603      	mov	r3, r0
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	b2d9      	uxtb	r1, r3
 8000c7c:	4a7a      	ldr	r2, [pc, #488]	; (8000e68 <readall_inputs+0x348>)
 8000c7e:	7853      	ldrb	r3, [r2, #1]
 8000c80:	f361 1304 	bfi	r3, r1, #4, #1
 8000c84:	7053      	strb	r3, [r2, #1]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8000c86:	2104      	movs	r1, #4
 8000c88:	487c      	ldr	r0, [pc, #496]	; (8000e7c <readall_inputs+0x35c>)
 8000c8a:	f003 f88d 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	b2d9      	uxtb	r1, r3
 8000c96:	4a74      	ldr	r2, [pc, #464]	; (8000e68 <readall_inputs+0x348>)
 8000c98:	7853      	ldrb	r3, [r2, #1]
 8000c9a:	f361 1345 	bfi	r3, r1, #5, #1
 8000c9e:	7053      	strb	r3, [r2, #1]
//	system_in.Bremsdruck_NO = HAL_GPIO_ReadPin(Bremsdruck_NO_GPIO_Port, Bremsdruck_NO_Pin);		// Bremsdruck nicht zu hoch
//	system_in.Bremsdruck_NC = HAL_GPIO_ReadPin(Bremsdruck_NC_GPIO_Port, Bremsdruck_NC_Pin);		// Bremsdruck zu hoch

	// SDC-Eingaenge einlesen
	sdc_in.EmergencyRun = HAL_GPIO_ReadPin(EMERGENCY_RUN_GPIO_Port, EMERGENCY_RUN_Pin);			// Emergency Run, Akku
 8000ca0:	2102      	movs	r1, #2
 8000ca2:	4876      	ldr	r0, [pc, #472]	; (8000e7c <readall_inputs+0x35c>)
 8000ca4:	f003 f880 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	b2d9      	uxtb	r1, r3
 8000cb0:	4a73      	ldr	r2, [pc, #460]	; (8000e80 <readall_inputs+0x360>)
 8000cb2:	7813      	ldrb	r3, [r2, #0]
 8000cb4:	f361 0300 	bfi	r3, r1, #0, #1
 8000cb8:	7013      	strb	r3, [r2, #0]
	sdc_in.SDC0 = HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin);						// Shutdown-Circuit, OK
 8000cba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cbe:	4869      	ldr	r0, [pc, #420]	; (8000e64 <readall_inputs+0x344>)
 8000cc0:	f003 f872 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	b2d9      	uxtb	r1, r3
 8000ccc:	4a6c      	ldr	r2, [pc, #432]	; (8000e80 <readall_inputs+0x360>)
 8000cce:	7813      	ldrb	r3, [r2, #0]
 8000cd0:	f361 0341 	bfi	r3, r1, #1, #1
 8000cd4:	7013      	strb	r3, [r2, #0]
	sdc_in.AkkuSDC = HAL_GPIO_ReadPin(SENSE_SDC_AKKU_GPIO_Port, SENSE_SDC_AKKU_Pin);			// Shutdown-Circuit Akku, OK
 8000cd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cda:	4862      	ldr	r0, [pc, #392]	; (8000e64 <readall_inputs+0x344>)
 8000cdc:	f003 f864 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	b2d9      	uxtb	r1, r3
 8000ce8:	4a65      	ldr	r2, [pc, #404]	; (8000e80 <readall_inputs+0x360>)
 8000cea:	7813      	ldrb	r3, [r2, #0]
 8000cec:	f361 0382 	bfi	r3, r1, #2, #1
 8000cf0:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8000cf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cf6:	485e      	ldr	r0, [pc, #376]	; (8000e70 <readall_inputs+0x350>)
 8000cf8:	f003 f856 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	b2d9      	uxtb	r1, r3
 8000d04:	4a5e      	ldr	r2, [pc, #376]	; (8000e80 <readall_inputs+0x360>)
 8000d06:	7813      	ldrb	r3, [r2, #0]
 8000d08:	f361 03c3 	bfi	r3, r1, #3, #1
 8000d0c:	7013      	strb	r3, [r2, #0]
	sdc_in.DCDC_Fault = HAL_GPIO_ReadPin(DCDC_FAULT_GPIO_Port, DCDC_FAULT_Pin);					// DCDC Wandler funktioniert nicht richtig
 8000d0e:	2102      	movs	r1, #2
 8000d10:	4859      	ldr	r0, [pc, #356]	; (8000e78 <readall_inputs+0x358>)
 8000d12:	f003 f849 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000d16:	4603      	mov	r3, r0
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	b2d9      	uxtb	r1, r3
 8000d1e:	4a58      	ldr	r2, [pc, #352]	; (8000e80 <readall_inputs+0x360>)
 8000d20:	7813      	ldrb	r3, [r2, #0]
 8000d22:	f361 1304 	bfi	r3, r1, #4, #1
 8000d26:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.ASR1 = HAL_GPIO_ReadPin(ASR_IN1_GPIO_Port, ASR_IN1_Pin);							// ASR Eingang Mittelkonsole
 8000d28:	2110      	movs	r1, #16
 8000d2a:	4853      	ldr	r0, [pc, #332]	; (8000e78 <readall_inputs+0x358>)
 8000d2c:	f003 f83c 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000d30:	4603      	mov	r3, r0
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	b2d9      	uxtb	r1, r3
 8000d38:	4a52      	ldr	r2, [pc, #328]	; (8000e84 <readall_inputs+0x364>)
 8000d3a:	7813      	ldrb	r3, [r2, #0]
 8000d3c:	f361 0300 	bfi	r3, r1, #0, #1
 8000d40:	7013      	strb	r3, [r2, #0]
	komfort_in.ASR2 = HAL_GPIO_ReadPin(ASR_IN2_GPIO_Port, ASR_IN2_Pin);							// ASR Eingang Mittelkonsole
 8000d42:	2110      	movs	r1, #16
 8000d44:	484b      	ldr	r0, [pc, #300]	; (8000e74 <readall_inputs+0x354>)
 8000d46:	f003 f82f 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	b2d9      	uxtb	r1, r3
 8000d52:	4a4c      	ldr	r2, [pc, #304]	; (8000e84 <readall_inputs+0x364>)
 8000d54:	7813      	ldrb	r3, [r2, #0]
 8000d56:	f361 0341 	bfi	r3, r1, #1, #1
 8000d5a:	7013      	strb	r3, [r2, #0]
	komfort_in.ECO = HAL_GPIO_ReadPin(ECO_GPIO_Port, ECO_Pin);									// ECO Eingang Mittelkonsole
 8000d5c:	2108      	movs	r1, #8
 8000d5e:	4841      	ldr	r0, [pc, #260]	; (8000e64 <readall_inputs+0x344>)
 8000d60:	f003 f822 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000d64:	4603      	mov	r3, r0
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	b2d9      	uxtb	r1, r3
 8000d6c:	4a45      	ldr	r2, [pc, #276]	; (8000e84 <readall_inputs+0x364>)
 8000d6e:	7813      	ldrb	r3, [r2, #0]
 8000d70:	f361 0382 	bfi	r3, r1, #2, #1
 8000d74:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Rst_In = HAL_GPIO_ReadPin(BC_RESET_IN_GPIO_Port, BC_RESET_IN_Pin);			// Boardcomputer Reset Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8000d76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d7a:	483f      	ldr	r0, [pc, #252]	; (8000e78 <readall_inputs+0x358>)
 8000d7c:	f003 f814 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000d80:	4603      	mov	r3, r0
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	b2d9      	uxtb	r1, r3
 8000d88:	4a3e      	ldr	r2, [pc, #248]	; (8000e84 <readall_inputs+0x364>)
 8000d8a:	7813      	ldrb	r3, [r2, #0]
 8000d8c:	f361 03c3 	bfi	r3, r1, #3, #1
 8000d90:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Up_In = HAL_GPIO_ReadPin(BC_UP_IN_GPIO_Port, BC_UP_IN_Pin);					// Boardcomputer Rauf Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8000d92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d96:	4839      	ldr	r0, [pc, #228]	; (8000e7c <readall_inputs+0x35c>)
 8000d98:	f003 f806 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	b2d9      	uxtb	r1, r3
 8000da4:	4a37      	ldr	r2, [pc, #220]	; (8000e84 <readall_inputs+0x364>)
 8000da6:	7813      	ldrb	r3, [r2, #0]
 8000da8:	f361 1304 	bfi	r3, r1, #4, #1
 8000dac:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Down_In = HAL_GPIO_ReadPin(BC_DOWN_IN_GPIO_Port, BC_DOWN_IN_Pin);				// Boardcomputer Runter Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8000dae:	2110      	movs	r1, #16
 8000db0:	482c      	ldr	r0, [pc, #176]	; (8000e64 <readall_inputs+0x344>)
 8000db2:	f002 fff9 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000db6:	4603      	mov	r3, r0
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	b2d9      	uxtb	r1, r3
 8000dbe:	4a31      	ldr	r2, [pc, #196]	; (8000e84 <readall_inputs+0x364>)
 8000dc0:	7813      	ldrb	r3, [r2, #0]
 8000dc2:	f361 1345 	bfi	r3, r1, #5, #1
 8000dc6:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn1 = HAL_GPIO_ReadPin(BAMOCAR_IN1_GPIO_Port, BAMOCAR_IN1_Pin);				// Eingang Bamocar 1
 8000dc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dcc:	4829      	ldr	r0, [pc, #164]	; (8000e74 <readall_inputs+0x354>)
 8000dce:	f002 ffeb 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	b2d9      	uxtb	r1, r3
 8000dda:	4a2a      	ldr	r2, [pc, #168]	; (8000e84 <readall_inputs+0x364>)
 8000ddc:	7813      	ldrb	r3, [r2, #0]
 8000dde:	f361 1386 	bfi	r3, r1, #6, #1
 8000de2:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn2 = HAL_GPIO_ReadPin(BAMOCAR_IN2_GPIO_Port, BAMOCAR_IN2_Pin);				// Eingang Bamocar 2
 8000de4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de8:	4822      	ldr	r0, [pc, #136]	; (8000e74 <readall_inputs+0x354>)
 8000dea:	f002 ffdd 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000dee:	4603      	mov	r3, r0
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	b2d9      	uxtb	r1, r3
 8000df6:	4a23      	ldr	r2, [pc, #140]	; (8000e84 <readall_inputs+0x364>)
 8000df8:	7813      	ldrb	r3, [r2, #0]
 8000dfa:	f361 13c7 	bfi	r3, r1, #7, #1
 8000dfe:	7013      	strb	r3, [r2, #0]
	komfort_in.Enter = HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin);							// Encoder Taster Enter Eingang Mittelconsole
 8000e00:	2180      	movs	r1, #128	; 0x80
 8000e02:	4821      	ldr	r0, [pc, #132]	; (8000e88 <readall_inputs+0x368>)
 8000e04:	f002 ffd0 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	b2d9      	uxtb	r1, r3
 8000e10:	4a1c      	ldr	r2, [pc, #112]	; (8000e84 <readall_inputs+0x364>)
 8000e12:	7853      	ldrb	r3, [r2, #1]
 8000e14:	f361 0300 	bfi	r3, r1, #0, #1
 8000e18:	7053      	strb	r3, [r2, #1]
	komfort_in.OutA = HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTA_Pin);								// Encoder OUTA Eingang Mittelconsole
 8000e1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e1e:	4817      	ldr	r0, [pc, #92]	; (8000e7c <readall_inputs+0x35c>)
 8000e20:	f002 ffc2 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000e24:	4603      	mov	r3, r0
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	b2d9      	uxtb	r1, r3
 8000e2c:	4a15      	ldr	r2, [pc, #84]	; (8000e84 <readall_inputs+0x364>)
 8000e2e:	7853      	ldrb	r3, [r2, #1]
 8000e30:	f361 0341 	bfi	r3, r1, #1, #1
 8000e34:	7053      	strb	r3, [r2, #1]
	komfort_in.OutB = HAL_GPIO_ReadPin(OUTB_GPIO_Port, OUTB_Pin);								// Encoder OUTB Eingang Mittelconsole
 8000e36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e3a:	4810      	ldr	r0, [pc, #64]	; (8000e7c <readall_inputs+0x35c>)
 8000e3c:	f002 ffb4 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000e40:	4603      	mov	r3, r0
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	b2d9      	uxtb	r1, r3
 8000e48:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <readall_inputs+0x364>)
 8000e4a:	7853      	ldrb	r3, [r2, #1]
 8000e4c:	f361 0382 	bfi	r3, r1, #2, #1
 8000e50:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA1 = HAL_GPIO_ReadPin(GRA1_GPIO_Port, GRA1_Pin);								// Tempomat 1 Eingang
 8000e52:	2120      	movs	r1, #32
 8000e54:	4808      	ldr	r0, [pc, #32]	; (8000e78 <readall_inputs+0x358>)
 8000e56:	f002 ffa7 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	b2d9      	uxtb	r1, r3
 8000e62:	e013      	b.n	8000e8c <readall_inputs+0x36c>
 8000e64:	40021000 	.word	0x40021000
 8000e68:	2000003c 	.word	0x2000003c
 8000e6c:	40021400 	.word	0x40021400
 8000e70:	40020400 	.word	0x40020400
 8000e74:	40020c00 	.word	0x40020c00
 8000e78:	40021800 	.word	0x40021800
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	20000044 	.word	0x20000044
 8000e84:	20000040 	.word	0x20000040
 8000e88:	40020800 	.word	0x40020800
 8000e8c:	4a1d      	ldr	r2, [pc, #116]	; (8000f04 <readall_inputs+0x3e4>)
 8000e8e:	7853      	ldrb	r3, [r2, #1]
 8000e90:	f361 03c3 	bfi	r3, r1, #3, #1
 8000e94:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA2 = HAL_GPIO_ReadPin(GRA2_GPIO_Port, GRA2_Pin);								// Tempomat 2 Eingang
 8000e96:	2140      	movs	r1, #64	; 0x40
 8000e98:	481b      	ldr	r0, [pc, #108]	; (8000f08 <readall_inputs+0x3e8>)
 8000e9a:	f002 ff85 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	b2d9      	uxtb	r1, r3
 8000ea6:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <readall_inputs+0x3e4>)
 8000ea8:	7853      	ldrb	r3, [r2, #1]
 8000eaa:	f361 1304 	bfi	r3, r1, #4, #1
 8000eae:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA3 = HAL_GPIO_ReadPin(GRA3_GPIO_Port, GRA3_Pin);								// Tempomat 3 Eingang
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	4815      	ldr	r0, [pc, #84]	; (8000f08 <readall_inputs+0x3e8>)
 8000eb4:	f002 ff78 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	b2d9      	uxtb	r1, r3
 8000ec0:	4a10      	ldr	r2, [pc, #64]	; (8000f04 <readall_inputs+0x3e4>)
 8000ec2:	7853      	ldrb	r3, [r2, #1]
 8000ec4:	f361 1345 	bfi	r3, r1, #5, #1
 8000ec8:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA4 = HAL_GPIO_ReadPin(GRA4_GPIO_Port, GRA4_Pin);								// Tempomat 4 Eingang
 8000eca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ece:	480e      	ldr	r0, [pc, #56]	; (8000f08 <readall_inputs+0x3e8>)
 8000ed0:	f002 ff6a 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	b2d9      	uxtb	r1, r3
 8000edc:	4a09      	ldr	r2, [pc, #36]	; (8000f04 <readall_inputs+0x3e4>)
 8000ede:	7853      	ldrb	r3, [r2, #1]
 8000ee0:	f361 1386 	bfi	r3, r1, #6, #1
 8000ee4:	7053      	strb	r3, [r2, #1]
	komfort_in.Durchfluss = HAL_GPIO_ReadPin(DURCHFLUSS_GPIO_Port, DURCHFLUSS_Pin);				// Durchflusssensor Eingang
 8000ee6:	2120      	movs	r1, #32
 8000ee8:	4808      	ldr	r0, [pc, #32]	; (8000f0c <readall_inputs+0x3ec>)
 8000eea:	f002 ff5d 	bl	8003da8 <HAL_GPIO_ReadPin>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	b2d9      	uxtb	r1, r3
 8000ef6:	4a03      	ldr	r2, [pc, #12]	; (8000f04 <readall_inputs+0x3e4>)
 8000ef8:	7853      	ldrb	r3, [r2, #1]
 8000efa:	f361 13c7 	bfi	r3, r1, #7, #1
 8000efe:	7053      	strb	r3, [r2, #1]
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000040 	.word	0x20000040
 8000f08:	40021800 	.word	0x40021800
 8000f0c:	40021000 	.word	0x40021000

08000f10 <millis>:
//----------------------------------------------------------------------
#include "millis.h"
//----------------------------------------------------------------------

uint32_t millis(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000f14:	f001 f982 	bl	800221c <HAL_GetTick>
 8000f18:	4603      	mov	r3, r0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	2180      	movs	r1, #128	; 0x80
 8000f28:	481b      	ldr	r0, [pc, #108]	; (8000f98 <testPCB_Leds+0x78>)
 8000f2a:	f002 ff55 	bl	8003dd8 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000f2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f32:	f001 f97f 	bl	8002234 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2180      	movs	r1, #128	; 0x80
 8000f3a:	4817      	ldr	r0, [pc, #92]	; (8000f98 <testPCB_Leds+0x78>)
 8000f3c:	f002 ff4c 	bl	8003dd8 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000f40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f44:	f001 f976 	bl	8002234 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f4e:	4812      	ldr	r0, [pc, #72]	; (8000f98 <testPCB_Leds+0x78>)
 8000f50:	f002 ff42 	bl	8003dd8 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000f54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f58:	f001 f96c 	bl	8002234 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f62:	480d      	ldr	r0, [pc, #52]	; (8000f98 <testPCB_Leds+0x78>)
 8000f64:	f002 ff38 	bl	8003dd8 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000f68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f6c:	f001 f962 	bl	8002234 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2104      	movs	r1, #4
 8000f74:	4808      	ldr	r0, [pc, #32]	; (8000f98 <testPCB_Leds+0x78>)
 8000f76:	f002 ff2f 	bl	8003dd8 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000f7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f7e:	f001 f959 	bl	8002234 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2104      	movs	r1, #4
 8000f86:	4804      	ldr	r0, [pc, #16]	; (8000f98 <testPCB_Leds+0x78>)
 8000f88:	f002 ff26 	bl	8003dd8 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000f8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f90:	f001 f950 	bl	8002234 <HAL_Delay>
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40020400 	.word	0x40020400

08000f9c <pwm_oelstand>:
//----------------------------------------------------------------------

//
//----------------------------------------------------------------------
void pwm_oelstand(uint16_t count)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	80fb      	strh	r3, [r7, #6]
	switch (count)
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	f240 1295 	movw	r2, #405	; 0x195
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d027      	beq.n	8001000 <pwm_oelstand+0x64>
 8000fb0:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8000fb4:	da26      	bge.n	8001004 <pwm_oelstand+0x68>
 8000fb6:	2b4b      	cmp	r3, #75	; 0x4b
 8000fb8:	d01c      	beq.n	8000ff4 <pwm_oelstand+0x58>
 8000fba:	2b4b      	cmp	r3, #75	; 0x4b
 8000fbc:	dc22      	bgt.n	8001004 <pwm_oelstand+0x68>
 8000fbe:	2b2d      	cmp	r3, #45	; 0x2d
 8000fc0:	d012      	beq.n	8000fe8 <pwm_oelstand+0x4c>
 8000fc2:	2b2d      	cmp	r3, #45	; 0x2d
 8000fc4:	dc1e      	bgt.n	8001004 <pwm_oelstand+0x68>
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d002      	beq.n	8000fd0 <pwm_oelstand+0x34>
 8000fca:	2b0f      	cmp	r3, #15
 8000fcc:	d006      	beq.n	8000fdc <pwm_oelstand+0x40>
			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
			break;
		case 405: // 27x15 ms = 405ms
			break;
		default:
			break;
 8000fce:	e019      	b.n	8001004 <pwm_oelstand+0x68>
			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	480e      	ldr	r0, [pc, #56]	; (8001010 <pwm_oelstand+0x74>)
 8000fd6:	f002 feff 	bl	8003dd8 <HAL_GPIO_WritePin>
			break;
 8000fda:	e014      	b.n	8001006 <pwm_oelstand+0x6a>
			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2104      	movs	r1, #4
 8000fe0:	480b      	ldr	r0, [pc, #44]	; (8001010 <pwm_oelstand+0x74>)
 8000fe2:	f002 fef9 	bl	8003dd8 <HAL_GPIO_WritePin>
			break;
 8000fe6:	e00e      	b.n	8001006 <pwm_oelstand+0x6a>
			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2104      	movs	r1, #4
 8000fec:	4808      	ldr	r0, [pc, #32]	; (8001010 <pwm_oelstand+0x74>)
 8000fee:	f002 fef3 	bl	8003dd8 <HAL_GPIO_WritePin>
			break;
 8000ff2:	e008      	b.n	8001006 <pwm_oelstand+0x6a>
			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2104      	movs	r1, #4
 8000ff8:	4805      	ldr	r0, [pc, #20]	; (8001010 <pwm_oelstand+0x74>)
 8000ffa:	f002 feed 	bl	8003dd8 <HAL_GPIO_WritePin>
			break;
 8000ffe:	e002      	b.n	8001006 <pwm_oelstand+0x6a>
			break;
 8001000:	bf00      	nop
 8001002:	e000      	b.n	8001006 <pwm_oelstand+0x6a>
			break;
 8001004:	bf00      	nop
	}
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40020400 	.word	0x40020400

08001014 <readPedals>:
//----------------------------------------------------------------------

// Gaspedal auswerten
//----------------------------------------------------------------------
uint16_t readPedals(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
	// Variablen anlegen
	uint16_t ADC_Gas = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	80fb      	strh	r3, [r7, #6]
	uint8_t tmpBrake = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	717b      	strb	r3, [r7, #5]

	// Bremspedal auf Plausibilitaet pruefen
	if ((system_in.BremseNO == 1) && (system_in.BremseNC != 1))				// Bremse nicht getreten
 8001022:	4b49      	ldr	r3, [pc, #292]	; (8001148 <readPedals+0x134>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	f003 0304 	and.w	r3, r3, #4
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d009      	beq.n	8001044 <readPedals+0x30>
 8001030:	4b45      	ldr	r3, [pc, #276]	; (8001148 <readPedals+0x134>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	f003 0308 	and.w	r3, r3, #8
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d102      	bne.n	8001044 <readPedals+0x30>
	{
		tmpBrake = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	717b      	strb	r3, [r7, #5]
 8001042:	e017      	b.n	8001074 <readPedals+0x60>
	}
	else if ((system_in.BremseNO != 1) && (system_in.BremseNC == 1))		// Bremse voll getreten
 8001044:	4b40      	ldr	r3, [pc, #256]	; (8001148 <readPedals+0x134>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d109      	bne.n	8001066 <readPedals+0x52>
 8001052:	4b3d      	ldr	r3, [pc, #244]	; (8001148 <readPedals+0x134>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d002      	beq.n	8001066 <readPedals+0x52>
	{
		tmpBrake = 0x01;
 8001060:	2301      	movs	r3, #1
 8001062:	717b      	strb	r3, [r7, #5]
 8001064:	e006      	b.n	8001074 <readPedals+0x60>
	}
	else
	{
		// Fehlermeldung auf Uart ausgeben
#define BRAKE_INVALID				"ERROR_Bremspedal_2 Plausibilitaetsfehler: Bremse_NO und Bremse_NC"
		uartTransmit(BRAKE_INVALID, sizeof(BRAKE_INVALID));
 8001066:	2142      	movs	r1, #66	; 0x42
 8001068:	4838      	ldr	r0, [pc, #224]	; (800114c <readPedals+0x138>)
 800106a:	f7ff fa99 	bl	80005a0 <uartTransmit>
		// Bremse invalide
		software_error(ERROR_BREMSPEDAL);
 800106e:	2002      	movs	r0, #2
 8001070:	f7ff fd36 	bl	8000ae0 <software_error>
	}

	// Kupplung pruefen
	if (system_in.Kupplung == 1)
 8001074:	4b34      	ldr	r3, [pc, #208]	; (8001148 <readPedals+0x134>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	f003 0310 	and.w	r3, r3, #16
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <readPedals+0x76>
	{
		tmpBrake |= 0x02;
 8001082:	797b      	ldrb	r3, [r7, #5]
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	717b      	strb	r3, [r7, #5]
	}

	// Gaspedal einlesen
	ADC_Gas = ADC_Gaspedal();
 800108a:	f7ff fcc7 	bl	8000a1c <ADC_Gaspedal>
 800108e:	4603      	mov	r3, r0
 8001090:	80fb      	strh	r3, [r7, #6]

	// Wenn Bremse oder Kupplung nicht getreten ist, Gaspedal auswerten
	if (tmpBrake == 0)
 8001092:	797b      	ldrb	r3, [r7, #5]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d14f      	bne.n	8001138 <readPedals+0x124>
	{
		// Wenn Leerlauf und Kickdown aktiv Plausibilitaetsfehler
		if ((system_in.Leerlauf == 1) && (system_in.Kickdown == 1))
 8001098:	4b2b      	ldr	r3, [pc, #172]	; (8001148 <readPedals+0x134>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d00e      	beq.n	80010c4 <readPedals+0xb0>
 80010a6:	4b28      	ldr	r3, [pc, #160]	; (8001148 <readPedals+0x134>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d007      	beq.n	80010c4 <readPedals+0xb0>
		{
			// Fehlermeldung auf Uart ausgeben
#define TROTTLE_INVALID				"ERROR_Gaspedal_1 Plausibilitaetsfehler: Kickdown und Leerlauf"
			uartTransmit(TROTTLE_INVALID, sizeof(TROTTLE_INVALID));
 80010b4:	213e      	movs	r1, #62	; 0x3e
 80010b6:	4826      	ldr	r0, [pc, #152]	; (8001150 <readPedals+0x13c>)
 80010b8:	f7ff fa72 	bl	80005a0 <uartTransmit>
			// Gaspedal invalide
			software_error(ERROR_GASPEDAL);
 80010bc:	2001      	movs	r0, #1
 80010be:	f7ff fd0f 	bl	8000ae0 <software_error>
 80010c2:	e03b      	b.n	800113c <readPedals+0x128>
		}
		// Threshold Wert vergleichen / Threshold Wert >= THRESHOLD und Leerlauf aktiv
		else if ((system_in.Leerlauf == 1) && (ADC_Gas >= GAS_THRESHOLD))
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <readPedals+0x134>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d008      	beq.n	80010e4 <readPedals+0xd0>
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80010d8:	d304      	bcc.n	80010e4 <readPedals+0xd0>
		{
			// Wenn Wert groesser THRESHOLD ist, dann THRESHOLD vom ADC-Wert abziehen
			ADC_Gas -= GAS_THRESHOLD;
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80010e0:	80fb      	strh	r3, [r7, #6]
 80010e2:	e02b      	b.n	800113c <readPedals+0x128>
		}
		// Threshold Wert vergleichen / Threshold Wert < THRESHOLD und Leerlauf aktiv
		else if ((system_in.Leerlauf == 1) && (ADC_Gas < GAS_THRESHOLD))
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <readPedals+0x134>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d006      	beq.n	8001100 <readPedals+0xec>
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80010f8:	d202      	bcs.n	8001100 <readPedals+0xec>
		{
			// Wenn der Wert kleine als THRESHOLD ist, dann ADC ignorieren, alle Werte sind 0
			ADC_Gas = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	80fb      	strh	r3, [r7, #6]
 80010fe:	e01d      	b.n	800113c <readPedals+0x128>
		}
		// Threshold Wert vergleichen / Threshold Wert < THRESHOLD und Kickdown aktiv
		else if ((system_in.Kickdown == 1) && (ADC_Gas < (GAS_MAX_ADC - GAS_THRESHOLD)))
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <readPedals+0x134>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d004      	beq.n	8001118 <readPedals+0x104>
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	f640 62d2 	movw	r2, #3794	; 0xed2
 8001114:	4293      	cmp	r3, r2
 8001116:	d911      	bls.n	800113c <readPedals+0x128>
		{
			// Wenn Wert kleiner THRESHOLD ist

		}
		// Threshold Wert vergleichen / Threshold Wert > THRESHOLD und Kickdown aktiv
		else if ((system_in.Kickdown == 1) && (ADC_Gas >= (GAS_MAX_ADC - GAS_THRESHOLD)))
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <readPedals+0x134>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00a      	beq.n	800113c <readPedals+0x128>
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	f640 62d2 	movw	r2, #3794	; 0xed2
 800112c:	4293      	cmp	r3, r2
 800112e:	d905      	bls.n	800113c <readPedals+0x128>
		{
			// Wenn Wert gleich THRESHOLD ist
			ADC_Gas = 4095;
 8001130:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001134:	80fb      	strh	r3, [r7, #6]
 8001136:	e001      	b.n	800113c <readPedals+0x128>
	}
	// Wenn tmpBrake != 0
	else
	{
		// Wenn Kupplung oder Bremse getreten
		ADC_Gas = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	80fb      	strh	r3, [r7, #6]
	}

	return ADC_Gas;
 800113c:	88fb      	ldrh	r3, [r7, #6]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2000003c 	.word	0x2000003c
 800114c:	080063bc 	.word	0x080063bc
 8001150:	08006400 	.word	0x08006400

08001154 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800115a:	463b      	mov	r3, r7
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001166:	4b64      	ldr	r3, [pc, #400]	; (80012f8 <MX_ADC1_Init+0x1a4>)
 8001168:	4a64      	ldr	r2, [pc, #400]	; (80012fc <MX_ADC1_Init+0x1a8>)
 800116a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800116c:	4b62      	ldr	r3, [pc, #392]	; (80012f8 <MX_ADC1_Init+0x1a4>)
 800116e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001172:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001174:	4b60      	ldr	r3, [pc, #384]	; (80012f8 <MX_ADC1_Init+0x1a4>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800117a:	4b5f      	ldr	r3, [pc, #380]	; (80012f8 <MX_ADC1_Init+0x1a4>)
 800117c:	2201      	movs	r2, #1
 800117e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001180:	4b5d      	ldr	r3, [pc, #372]	; (80012f8 <MX_ADC1_Init+0x1a4>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001186:	4b5c      	ldr	r3, [pc, #368]	; (80012f8 <MX_ADC1_Init+0x1a4>)
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800118e:	4b5a      	ldr	r3, [pc, #360]	; (80012f8 <MX_ADC1_Init+0x1a4>)
 8001190:	2200      	movs	r2, #0
 8001192:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001194:	4b58      	ldr	r3, [pc, #352]	; (80012f8 <MX_ADC1_Init+0x1a4>)
 8001196:	4a5a      	ldr	r2, [pc, #360]	; (8001300 <MX_ADC1_Init+0x1ac>)
 8001198:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800119a:	4b57      	ldr	r3, [pc, #348]	; (80012f8 <MX_ADC1_Init+0x1a4>)
 800119c:	2200      	movs	r2, #0
 800119e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 80011a0:	4b55      	ldr	r3, [pc, #340]	; (80012f8 <MX_ADC1_Init+0x1a4>)
 80011a2:	220a      	movs	r2, #10
 80011a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011a6:	4b54      	ldr	r3, [pc, #336]	; (80012f8 <MX_ADC1_Init+0x1a4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ae:	4b52      	ldr	r3, [pc, #328]	; (80012f8 <MX_ADC1_Init+0x1a4>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011b4:	4850      	ldr	r0, [pc, #320]	; (80012f8 <MX_ADC1_Init+0x1a4>)
 80011b6:	f001 f8a9 	bl	800230c <HAL_ADC_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011c0:	f000 fe58 	bl	8001e74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80011c4:	230e      	movs	r3, #14
 80011c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c8:	2301      	movs	r3, #1
 80011ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80011cc:	2301      	movs	r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d0:	463b      	mov	r3, r7
 80011d2:	4619      	mov	r1, r3
 80011d4:	4848      	ldr	r0, [pc, #288]	; (80012f8 <MX_ADC1_Init+0x1a4>)
 80011d6:	f001 fa77 	bl	80026c8 <HAL_ADC_ConfigChannel>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011e0:	f000 fe48 	bl	8001e74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011e4:	2306      	movs	r3, #6
 80011e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011e8:	2302      	movs	r3, #2
 80011ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ec:	463b      	mov	r3, r7
 80011ee:	4619      	mov	r1, r3
 80011f0:	4841      	ldr	r0, [pc, #260]	; (80012f8 <MX_ADC1_Init+0x1a4>)
 80011f2:	f001 fa69 	bl	80026c8 <HAL_ADC_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80011fc:	f000 fe3a 	bl	8001e74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001200:	2304      	movs	r3, #4
 8001202:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001204:	2303      	movs	r3, #3
 8001206:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001208:	2302      	movs	r3, #2
 800120a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120c:	463b      	mov	r3, r7
 800120e:	4619      	mov	r1, r3
 8001210:	4839      	ldr	r0, [pc, #228]	; (80012f8 <MX_ADC1_Init+0x1a4>)
 8001212:	f001 fa59 	bl	80026c8 <HAL_ADC_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 800121c:	f000 fe2a 	bl	8001e74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001220:	2305      	movs	r3, #5
 8001222:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001224:	2304      	movs	r3, #4
 8001226:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001228:	463b      	mov	r3, r7
 800122a:	4619      	mov	r1, r3
 800122c:	4832      	ldr	r0, [pc, #200]	; (80012f8 <MX_ADC1_Init+0x1a4>)
 800122e:	f001 fa4b 	bl	80026c8 <HAL_ADC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001238:	f000 fe1c 	bl	8001e74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800123c:	230f      	movs	r3, #15
 800123e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001240:	2305      	movs	r3, #5
 8001242:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001244:	2301      	movs	r3, #1
 8001246:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001248:	463b      	mov	r3, r7
 800124a:	4619      	mov	r1, r3
 800124c:	482a      	ldr	r0, [pc, #168]	; (80012f8 <MX_ADC1_Init+0x1a4>)
 800124e:	f001 fa3b 	bl	80026c8 <HAL_ADC_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8001258:	f000 fe0c 	bl	8001e74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800125c:	2303      	movs	r3, #3
 800125e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001260:	2306      	movs	r3, #6
 8001262:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001264:	2303      	movs	r3, #3
 8001266:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001268:	463b      	mov	r3, r7
 800126a:	4619      	mov	r1, r3
 800126c:	4822      	ldr	r0, [pc, #136]	; (80012f8 <MX_ADC1_Init+0x1a4>)
 800126e:	f001 fa2b 	bl	80026c8 <HAL_ADC_ConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8001278:	f000 fdfc 	bl	8001e74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800127c:	2307      	movs	r3, #7
 800127e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001280:	2307      	movs	r3, #7
 8001282:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	4619      	mov	r1, r3
 8001288:	481b      	ldr	r0, [pc, #108]	; (80012f8 <MX_ADC1_Init+0x1a4>)
 800128a:	f001 fa1d 	bl	80026c8 <HAL_ADC_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 8001294:	f000 fdee 	bl	8001e74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001298:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <MX_ADC1_Init+0x1b0>)
 800129a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800129c:	2308      	movs	r3, #8
 800129e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a0:	463b      	mov	r3, r7
 80012a2:	4619      	mov	r1, r3
 80012a4:	4814      	ldr	r0, [pc, #80]	; (80012f8 <MX_ADC1_Init+0x1a4>)
 80012a6:	f001 fa0f 	bl	80026c8 <HAL_ADC_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 80012b0:	f000 fde0 	bl	8001e74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012b4:	2308      	movs	r3, #8
 80012b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80012b8:	2309      	movs	r3, #9
 80012ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80012bc:	2301      	movs	r3, #1
 80012be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c0:	463b      	mov	r3, r7
 80012c2:	4619      	mov	r1, r3
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <MX_ADC1_Init+0x1a4>)
 80012c6:	f001 f9ff 	bl	80026c8 <HAL_ADC_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_ADC1_Init+0x180>
  {
    Error_Handler();
 80012d0:	f000 fdd0 	bl	8001e74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012d4:	2309      	movs	r3, #9
 80012d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80012d8:	230a      	movs	r3, #10
 80012da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012dc:	463b      	mov	r3, r7
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	; (80012f8 <MX_ADC1_Init+0x1a4>)
 80012e2:	f001 f9f1 	bl	80026c8 <HAL_ADC_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_ADC1_Init+0x19c>
  {
    Error_Handler();
 80012ec:	f000 fdc2 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000058 	.word	0x20000058
 80012fc:	40012000 	.word	0x40012000
 8001300:	0f000001 	.word	0x0f000001
 8001304:	10000012 	.word	0x10000012

08001308 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08c      	sub	sp, #48	; 0x30
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a2d      	ldr	r2, [pc, #180]	; (80013dc <HAL_ADC_MspInit+0xd4>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d153      	bne.n	80013d2 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800132a:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <HAL_ADC_MspInit+0xd8>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	4a2c      	ldr	r2, [pc, #176]	; (80013e0 <HAL_ADC_MspInit+0xd8>)
 8001330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001334:	6453      	str	r3, [r2, #68]	; 0x44
 8001336:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <HAL_ADC_MspInit+0xd8>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133e:	61bb      	str	r3, [r7, #24]
 8001340:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <HAL_ADC_MspInit+0xd8>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a26      	ldr	r2, [pc, #152]	; (80013e0 <HAL_ADC_MspInit+0xd8>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <HAL_ADC_MspInit+0xd8>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <HAL_ADC_MspInit+0xd8>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a20      	ldr	r2, [pc, #128]	; (80013e0 <HAL_ADC_MspInit+0xd8>)
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <HAL_ADC_MspInit+0xd8>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <HAL_ADC_MspInit+0xd8>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a1a      	ldr	r2, [pc, #104]	; (80013e0 <HAL_ADC_MspInit+0xd8>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <HAL_ADC_MspInit+0xd8>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SENSE_KL15_Pin|SENSE_KUEHLWASSER_Pin|SENSE_KLIMA_FLAP_Pin|SENSE_GAS_Pin
 800138a:	23f8      	movs	r3, #248	; 0xf8
 800138c:	61fb      	str	r3, [r7, #28]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800138e:	2303      	movs	r3, #3
 8001390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4619      	mov	r1, r3
 800139c:	4811      	ldr	r0, [pc, #68]	; (80013e4 <HAL_ADC_MspInit+0xdc>)
 800139e:	f002 fb57 	bl	8003a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_DRUCK_Pin|SENSE_DRUCK_TEMP_Pin;
 80013a2:	2330      	movs	r3, #48	; 0x30
 80013a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a6:	2303      	movs	r3, #3
 80013a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	480c      	ldr	r0, [pc, #48]	; (80013e8 <HAL_ADC_MspInit+0xe0>)
 80013b6:	f002 fb4b 	bl	8003a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_RETURN_Pin|SENSE_INFO_Pin;
 80013ba:	2303      	movs	r3, #3
 80013bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013be:	2303      	movs	r3, #3
 80013c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	4619      	mov	r1, r3
 80013cc:	4807      	ldr	r0, [pc, #28]	; (80013ec <HAL_ADC_MspInit+0xe4>)
 80013ce:	f002 fb3f 	bl	8003a50 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80013d2:	bf00      	nop
 80013d4:	3730      	adds	r7, #48	; 0x30
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40012000 	.word	0x40012000
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020800 	.word	0x40020800
 80013ec:	40020400 	.word	0x40020400

080013f0 <MX_CAN3_Init>:

CAN_HandleTypeDef hcan3;

/* CAN3 init function */
void MX_CAN3_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <MX_CAN3_Init+0x64>)
 80013f6:	4a18      	ldr	r2, [pc, #96]	; (8001458 <MX_CAN3_Init+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_CAN3_Init+0x64>)
 80013fc:	2206      	movs	r2, #6
 80013fe:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_CAN3_Init+0x64>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <MX_CAN3_Init+0x64>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_CAN3_Init+0x64>)
 800140e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001412:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <MX_CAN3_Init+0x64>)
 8001416:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800141a:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 800141c:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <MX_CAN3_Init+0x64>)
 800141e:	2200      	movs	r2, #0
 8001420:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_CAN3_Init+0x64>)
 8001424:	2200      	movs	r2, #0
 8001426:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <MX_CAN3_Init+0x64>)
 800142a:	2200      	movs	r2, #0
 800142c:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_CAN3_Init+0x64>)
 8001430:	2200      	movs	r2, #0
 8001432:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <MX_CAN3_Init+0x64>)
 8001436:	2200      	movs	r2, #0
 8001438:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_CAN3_Init+0x64>)
 800143c:	2200      	movs	r2, #0
 800143e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <MX_CAN3_Init+0x64>)
 8001442:	f001 fb85 	bl	8002b50 <HAL_CAN_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 800144c:	f000 fd12 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200000a0 	.word	0x200000a0
 8001458:	40003400 	.word	0x40003400

0800145c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08c      	sub	sp, #48	; 0x30
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 031c 	add.w	r3, r7, #28
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN3)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a27      	ldr	r2, [pc, #156]	; (8001518 <HAL_CAN_MspInit+0xbc>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d148      	bne.n	8001510 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN3_MspInit 0 */

  /* USER CODE END CAN3_MspInit 0 */
    /* CAN3 clock enable */
    __HAL_RCC_CAN3_CLK_ENABLE();
 800147e:	4b27      	ldr	r3, [pc, #156]	; (800151c <HAL_CAN_MspInit+0xc0>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	4a26      	ldr	r2, [pc, #152]	; (800151c <HAL_CAN_MspInit+0xc0>)
 8001484:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
 800148a:	4b24      	ldr	r3, [pc, #144]	; (800151c <HAL_CAN_MspInit+0xc0>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001492:	61bb      	str	r3, [r7, #24]
 8001494:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <HAL_CAN_MspInit+0xc0>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	4a20      	ldr	r2, [pc, #128]	; (800151c <HAL_CAN_MspInit+0xc0>)
 800149c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014a0:	6413      	str	r3, [r2, #64]	; 0x40
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <HAL_CAN_MspInit+0xc0>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80014ae:	4b1b      	ldr	r3, [pc, #108]	; (800151c <HAL_CAN_MspInit+0xc0>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a1a      	ldr	r2, [pc, #104]	; (800151c <HAL_CAN_MspInit+0xc0>)
 80014b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <HAL_CAN_MspInit+0xc0>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <HAL_CAN_MspInit+0xc0>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a14      	ldr	r2, [pc, #80]	; (800151c <HAL_CAN_MspInit+0xc0>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_CAN_MspInit+0xc0>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    /**CAN3 GPIO Configuration
    PA8     ------> CAN3_RX
    PA15     ------> CAN3_TX
    */
    GPIO_InitStruct.Pin = ACAN_RX_Pin|ACAN_TX_Pin;
 80014de:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80014f0:	230b      	movs	r3, #11
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	4809      	ldr	r0, [pc, #36]	; (8001520 <HAL_CAN_MspInit+0xc4>)
 80014fc:	f002 faa8 	bl	8003a50 <HAL_GPIO_Init>

    /* CAN3 interrupt Init */
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	2100      	movs	r1, #0
 8001504:	2069      	movs	r0, #105	; 0x69
 8001506:	f002 fa6c 	bl	80039e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 800150a:	2069      	movs	r0, #105	; 0x69
 800150c:	f002 fa85 	bl	8003a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001510:	bf00      	nop
 8001512:	3730      	adds	r7, #48	; 0x30
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40003400 	.word	0x40003400
 800151c:	40023800 	.word	0x40023800
 8001520:	40020000 	.word	0x40020000

08001524 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08e      	sub	sp, #56	; 0x38
 8001528:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800153a:	4bb6      	ldr	r3, [pc, #728]	; (8001814 <MX_GPIO_Init+0x2f0>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4ab5      	ldr	r2, [pc, #724]	; (8001814 <MX_GPIO_Init+0x2f0>)
 8001540:	f043 0310 	orr.w	r3, r3, #16
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4bb3      	ldr	r3, [pc, #716]	; (8001814 <MX_GPIO_Init+0x2f0>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0310 	and.w	r3, r3, #16
 800154e:	623b      	str	r3, [r7, #32]
 8001550:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001552:	4bb0      	ldr	r3, [pc, #704]	; (8001814 <MX_GPIO_Init+0x2f0>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4aaf      	ldr	r2, [pc, #700]	; (8001814 <MX_GPIO_Init+0x2f0>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4bad      	ldr	r3, [pc, #692]	; (8001814 <MX_GPIO_Init+0x2f0>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	61fb      	str	r3, [r7, #28]
 8001568:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800156a:	4baa      	ldr	r3, [pc, #680]	; (8001814 <MX_GPIO_Init+0x2f0>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4aa9      	ldr	r2, [pc, #676]	; (8001814 <MX_GPIO_Init+0x2f0>)
 8001570:	f043 0320 	orr.w	r3, r3, #32
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4ba7      	ldr	r3, [pc, #668]	; (8001814 <MX_GPIO_Init+0x2f0>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0320 	and.w	r3, r3, #32
 800157e:	61bb      	str	r3, [r7, #24]
 8001580:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001582:	4ba4      	ldr	r3, [pc, #656]	; (8001814 <MX_GPIO_Init+0x2f0>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4aa3      	ldr	r2, [pc, #652]	; (8001814 <MX_GPIO_Init+0x2f0>)
 8001588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4ba1      	ldr	r3, [pc, #644]	; (8001814 <MX_GPIO_Init+0x2f0>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	4b9e      	ldr	r3, [pc, #632]	; (8001814 <MX_GPIO_Init+0x2f0>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a9d      	ldr	r2, [pc, #628]	; (8001814 <MX_GPIO_Init+0x2f0>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b9b      	ldr	r3, [pc, #620]	; (8001814 <MX_GPIO_Init+0x2f0>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	4b98      	ldr	r3, [pc, #608]	; (8001814 <MX_GPIO_Init+0x2f0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a97      	ldr	r2, [pc, #604]	; (8001814 <MX_GPIO_Init+0x2f0>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b95      	ldr	r3, [pc, #596]	; (8001814 <MX_GPIO_Init+0x2f0>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015ca:	4b92      	ldr	r3, [pc, #584]	; (8001814 <MX_GPIO_Init+0x2f0>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a91      	ldr	r2, [pc, #580]	; (8001814 <MX_GPIO_Init+0x2f0>)
 80015d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b8f      	ldr	r3, [pc, #572]	; (8001814 <MX_GPIO_Init+0x2f0>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e2:	4b8c      	ldr	r3, [pc, #560]	; (8001814 <MX_GPIO_Init+0x2f0>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a8b      	ldr	r2, [pc, #556]	; (8001814 <MX_GPIO_Init+0x2f0>)
 80015e8:	f043 0308 	orr.w	r3, r3, #8
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b89      	ldr	r3, [pc, #548]	; (8001814 <MX_GPIO_Init+0x2f0>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 80015fa:	2200      	movs	r2, #0
 80015fc:	f248 0187 	movw	r1, #32903	; 0x8087
 8001600:	4885      	ldr	r0, [pc, #532]	; (8001818 <MX_GPIO_Init+0x2f4>)
 8001602:	f002 fbe9 	bl	8003dd8 <HAL_GPIO_WritePin>
                          |DIGITAL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_ON_Pin|WS2812_Pin, GPIO_PIN_RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	f242 0108 	movw	r1, #8200	; 0x2008
 800160c:	4883      	ldr	r0, [pc, #524]	; (800181c <MX_GPIO_Init+0x2f8>)
 800160e:	f002 fbe3 	bl	8003dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 8001612:	2200      	movs	r2, #0
 8001614:	f24f 013c 	movw	r1, #61500	; 0xf03c
 8001618:	4881      	ldr	r0, [pc, #516]	; (8001820 <MX_GPIO_Init+0x2fc>)
 800161a:	f002 fbdd 	bl	8003dd8 <HAL_GPIO_WritePin>
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 800161e:	2200      	movs	r2, #0
 8001620:	f647 0194 	movw	r1, #30868	; 0x7894
 8001624:	487f      	ldr	r0, [pc, #508]	; (8001824 <MX_GPIO_Init+0x300>)
 8001626:	f002 fbd7 	bl	8003dd8 <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 800162a:	2200      	movs	r2, #0
 800162c:	f64e 2188 	movw	r1, #60040	; 0xea88
 8001630:	487d      	ldr	r0, [pc, #500]	; (8001828 <MX_GPIO_Init+0x304>)
 8001632:	f002 fbd1 	bl	8003dd8 <HAL_GPIO_WritePin>
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 8001636:	2200      	movs	r2, #0
 8001638:	f64e 610c 	movw	r1, #60940	; 0xee0c
 800163c:	487b      	ldr	r0, [pc, #492]	; (800182c <MX_GPIO_Init+0x308>)
 800163e:	f002 fbcb 	bl	8003dd8 <HAL_GPIO_WritePin>
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, GPIO_PIN_RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001648:	4879      	ldr	r0, [pc, #484]	; (8001830 <MX_GPIO_Init+0x30c>)
 800164a:	f002 fbc5 	bl	8003dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 800164e:	f248 0387 	movw	r3, #32903	; 0x8087
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
                          |DIGITAL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001664:	4619      	mov	r1, r3
 8001666:	486c      	ldr	r0, [pc, #432]	; (8001818 <MX_GPIO_Init+0x2f4>)
 8001668:	f002 f9f2 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ECO_Pin|BC_DOWN_IN_Pin|DURCHFLUSS_Pin|BUTTON2_Pin
 800166c:	f647 7378 	movw	r3, #32632	; 0x7f78
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
                          |KICKDOWN_Pin|LEERLAUF_Pin|KUPPLUNG_NO_Pin|BREMSE_NC_Pin
                          |BREMSE_NO_Pin|SENSE_SDC_AKKU_Pin|SENSE_SDC_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001672:	2300      	movs	r3, #0
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800167a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167e:	4619      	mov	r1, r3
 8001680:	4865      	ldr	r0, [pc, #404]	; (8001818 <MX_GPIO_Init+0x2f4>)
 8001682:	f002 f9e5 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 8001686:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169c:	4619      	mov	r1, r3
 800169e:	485f      	ldr	r0, [pc, #380]	; (800181c <MX_GPIO_Init+0x2f8>)
 80016a0:	f002 f9d6 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 80016a4:	f64d 7347 	movw	r3, #57159	; 0xdf47
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|SD_SW_Pin|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016aa:	2303      	movs	r3, #3
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b6:	4619      	mov	r1, r3
 80016b8:	4858      	ldr	r0, [pc, #352]	; (800181c <MX_GPIO_Init+0x2f8>)
 80016ba:	f002 f9c9 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|ECON_Pin|RECUPERATION_Pin;
 80016be:	f640 0303 	movw	r3, #2051	; 0x803
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d0:	4619      	mov	r1, r3
 80016d2:	4853      	ldr	r0, [pc, #332]	; (8001820 <MX_GPIO_Init+0x2fc>)
 80016d4:	f002 f9bc 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 80016d8:	f24f 033c 	movw	r3, #61500	; 0xf03c
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016de:	2301      	movs	r3, #1
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ee:	4619      	mov	r1, r3
 80016f0:	484b      	ldr	r0, [pc, #300]	; (8001820 <MX_GPIO_Init+0x2fc>)
 80016f2:	f002 f9ad 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PF10 */
  GPIO_InitStruct.Pin = SPI5_CS_Pin|SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin
 80016f6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fc:	2303      	movs	r3, #3
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001708:	4619      	mov	r1, r3
 800170a:	4845      	ldr	r0, [pc, #276]	; (8001820 <MX_GPIO_Init+0x2fc>)
 800170c:	f002 f9a0 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS2812_Pin;
 8001710:	2308      	movs	r3, #8
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001714:	2301      	movs	r3, #1
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800171c:	2302      	movs	r3, #2
 800171e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 8001720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001724:	4619      	mov	r1, r3
 8001726:	483d      	ldr	r0, [pc, #244]	; (800181c <MX_GPIO_Init+0x2f8>)
 8001728:	f002 f992 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|EMERGENCY_RUN_Pin|HW_WAKE_Pin|OUTA_Pin
 800172c:	f640 6307 	movw	r3, #3591	; 0xe07
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTB_Pin|BC_UP_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001732:	2300      	movs	r3, #0
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173e:	4619      	mov	r1, r3
 8001740:	483b      	ldr	r0, [pc, #236]	; (8001830 <MX_GPIO_Init+0x30c>)
 8001742:	f002 f985 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 8001746:	f647 0394 	movw	r3, #30868	; 0x7894
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	2301      	movs	r3, #1
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175c:	4619      	mov	r1, r3
 800175e:	4831      	ldr	r0, [pc, #196]	; (8001824 <MX_GPIO_Init+0x300>)
 8001760:	f002 f976 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DCDC_INSTRUCTION_Pin|DCDC_FAULT_Pin|ASR_IN1_Pin|GRA1_Pin
 8001764:	f241 13f3 	movw	r3, #4595	; 0x11f3
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
                          |GRA2_Pin|GRA3_Pin|GRA4_Pin|BC_RESET_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176a:	2300      	movs	r3, #0
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001776:	4619      	mov	r1, r3
 8001778:	482c      	ldr	r0, [pc, #176]	; (800182c <MX_GPIO_Init+0x308>)
 800177a:	f002 f969 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSE_SDC_BTB_Pin|ANLASSER_Pin;
 800177e:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001790:	4619      	mov	r1, r3
 8001792:	4824      	ldr	r0, [pc, #144]	; (8001824 <MX_GPIO_Init+0x300>)
 8001794:	f002 f95c 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KL15_Pin|BAMOCAR_IN2_Pin|BAMOCAR_IN1_Pin|ASR_IN2_Pin;
 8001798:	f241 5310 	movw	r3, #5392	; 0x1510
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800179e:	2300      	movs	r3, #0
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017aa:	4619      	mov	r1, r3
 80017ac:	481e      	ldr	r0, [pc, #120]	; (8001828 <MX_GPIO_Init+0x304>)
 80017ae:	f002 f94f 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 80017b2:	f64e 2388 	movw	r3, #60040	; 0xea88
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b8:	2301      	movs	r3, #1
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2300      	movs	r3, #0
 80017c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c8:	4619      	mov	r1, r3
 80017ca:	4817      	ldr	r0, [pc, #92]	; (8001828 <MX_GPIO_Init+0x304>)
 80017cc:	f002 f940 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 80017d0:	f64e 630c 	movw	r3, #60940	; 0xee0c
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d6:	2301      	movs	r3, #1
 80017d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e6:	4619      	mov	r1, r3
 80017e8:	4810      	ldr	r0, [pc, #64]	; (800182c <MX_GPIO_Init+0x308>)
 80017ea:	f002 f931 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 80017fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fe:	4619      	mov	r1, r3
 8001800:	4806      	ldr	r0, [pc, #24]	; (800181c <MX_GPIO_Init+0x2f8>)
 8001802:	f002 f925 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RUECKWARNUNG_Pin;
 8001806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180c:	2301      	movs	r3, #1
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	e00f      	b.n	8001834 <MX_GPIO_Init+0x310>
 8001814:	40023800 	.word	0x40023800
 8001818:	40021000 	.word	0x40021000
 800181c:	40020800 	.word	0x40020800
 8001820:	40021400 	.word	0x40021400
 8001824:	40020400 	.word	0x40020400
 8001828:	40020c00 	.word	0x40020c00
 800182c:	40021800 	.word	0x40021800
 8001830:	40020000 	.word	0x40020000
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RUECKWARNUNG_GPIO_Port, &GPIO_InitStruct);
 800183a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183e:	4619      	mov	r1, r3
 8001840:	480f      	ldr	r0, [pc, #60]	; (8001880 <MX_GPIO_Init+0x35c>)
 8001842:	f002 f905 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_TX_Pin|CAN1_RX_Pin|SD_CMD_Pin;
 8001846:	2307      	movs	r3, #7
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800184a:	2303      	movs	r3, #3
 800184c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001856:	4619      	mov	r1, r3
 8001858:	480a      	ldr	r0, [pc, #40]	; (8001884 <MX_GPIO_Init+0x360>)
 800185a:	f002 f8f9 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CAN2_TX_Pin|CAN2_RX_Pin|I2C1_SCL_Pin|I2C1_SDA_Pin;
 800185e:	f44f 7358 	mov.w	r3, #864	; 0x360
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001864:	2303      	movs	r3, #3
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001870:	4619      	mov	r1, r3
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <MX_GPIO_Init+0x364>)
 8001874:	f002 f8ec 	bl	8003a50 <HAL_GPIO_Init>

}
 8001878:	bf00      	nop
 800187a:	3738      	adds	r7, #56	; 0x38
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40020000 	.word	0x40020000
 8001884:	40020c00 	.word	0x40020c00
 8001888:	40020400 	.word	0x40020400

0800188c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800188c:	b5b0      	push	{r4, r5, r7, lr}
 800188e:	b0ae      	sub	sp, #184	; 0xb8
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001892:	f000 fc72 	bl	800217a <HAL_Init>

  /* USER CODE BEGIN Init */

	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[5], InData[5], status;
	uint16_t count = 0, adc_gas;
 8001896:	2300      	movs	r3, #0
 8001898:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
  	uint32_t lastcan = 0, lastsendcan = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  	CAN_FilterTypeDef sFilterConfig;

  	// Erstelle Can-Nachrichten
  	CAN_TxHeaderTypeDef TxMessage = {0x123, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 80018a8:	4bc1      	ldr	r3, [pc, #772]	; (8001bb0 <main+0x324>)
 80018aa:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80018ae:	461d      	mov	r5, r3
 80018b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80018b8:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxOutput = {MOTOR_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 5, DISABLE};
 80018bc:	4bbd      	ldr	r3, [pc, #756]	; (8001bb4 <main+0x328>)
 80018be:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80018c2:	461d      	mov	r5, r3
 80018c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80018cc:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxInput = {MOTOR_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 5, DISABLE};
 80018d0:	4bb9      	ldr	r3, [pc, #740]	; (8001bb8 <main+0x32c>)
 80018d2:	f107 041c 	add.w	r4, r7, #28
 80018d6:	461d      	mov	r5, r3
 80018d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80018e0:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxMotor1 = {MOTOR_CAN_DREHZAHL, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 80018e4:	4bb5      	ldr	r3, [pc, #724]	; (8001bbc <main+0x330>)
 80018e6:	1d3c      	adds	r4, r7, #4
 80018e8:	461d      	mov	r5, r3
 80018ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 80018f2:	e884 0003 	stmia.w	r4, {r0, r1}

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f6:	f000 f9fb 	bl	8001cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018fa:	f7ff fe13 	bl	8001524 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018fe:	f000 fb9f 	bl	8002040 <MX_USART2_UART_Init>
  MX_CAN3_Init();
 8001902:	f7ff fd75 	bl	80013f0 <MX_CAN3_Init>
  MX_ADC1_Init();
 8001906:	f7ff fc25 	bl	8001154 <MX_ADC1_Init>
  MX_TIM6_Init();
 800190a:	f000 fb3d 	bl	8001f88 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 800190e:	f7fe ffc3 	bl	8000898 <readResetSource>
 8001912:	4603      	mov	r3, r0
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff f811 	bl	800093c <printResetSource>

  	/* Teste serielle Schnittstelle*/
  	#define TEST_STRING_UART	"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
  	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 800191a:	213a      	movs	r1, #58	; 0x3a
 800191c:	48a8      	ldr	r0, [pc, #672]	; (8001bc0 <main+0x334>)
 800191e:	f7fe fe3f 	bl	80005a0 <uartTransmit>

  	/* Sammel Systeminformationen */
  	collectSystemInfo();
 8001922:	f7fe ff97 	bl	8000854 <collectSystemInfo>
#endif

	// Leds Testen
  	testPCB_Leds();
 8001926:	f7ff fafb 	bl	8000f20 <testPCB_Leds>

  	/* Lese alle Eingaenge */
  	readall_inputs();
 800192a:	f7ff f8f9 	bl	8000b20 <readall_inputs>

  	// Starte CAN Bus
  	if((status = HAL_CAN_Start(&hcan3)) != HAL_OK)
 800192e:	48a5      	ldr	r0, [pc, #660]	; (8001bc4 <main+0x338>)
 8001930:	f001 faf6 	bl	8002f20 <HAL_CAN_Start>
 8001934:	4603      	mov	r3, r0
 8001936:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
 800193a:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800193e:	2b00      	cmp	r3, #0
 8001940:	d006      	beq.n	8001950 <main+0xc4>
  	{
  		/* Start Error */
  		hal_error(status);
 8001942:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff f89a 	bl	8000a80 <hal_error>
  		Error_Handler();
 800194c:	f000 fa92 	bl	8001e74 <Error_Handler>
  	}
  	uartTransmit("CAN START\n", 10);
 8001950:	210a      	movs	r1, #10
 8001952:	489d      	ldr	r0, [pc, #628]	; (8001bc8 <main+0x33c>)
 8001954:	f7fe fe24 	bl	80005a0 <uartTransmit>

  	// Aktiviere Interrupts für CAN Bus
  	if((status = HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING)) != HAL_OK)
 8001958:	2102      	movs	r1, #2
 800195a:	489a      	ldr	r0, [pc, #616]	; (8001bc4 <main+0x338>)
 800195c:	f001 fd11 	bl	8003382 <HAL_CAN_ActivateNotification>
 8001960:	4603      	mov	r3, r0
 8001962:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
 8001966:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800196a:	2b00      	cmp	r3, #0
 800196c:	d006      	beq.n	800197c <main+0xf0>
  	{
  		/* Notification Error */
  		hal_error(status);
 800196e:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff f884 	bl	8000a80 <hal_error>
  		Error_Handler();
 8001978:	f000 fa7c 	bl	8001e74 <Error_Handler>
  	}
  	uartTransmit("Send Message\n", 13);
 800197c:	210d      	movs	r1, #13
 800197e:	4893      	ldr	r0, [pc, #588]	; (8001bcc <main+0x340>)
 8001980:	f7fe fe0e 	bl	80005a0 <uartTransmit>

  	// Filter Bank initialisieren um Daten zu empfangen
    sFilterConfig.FilterBank = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	67bb      	str	r3, [r7, #120]	; 0x78
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001988:	2300      	movs	r3, #0
 800198a:	67fb      	str	r3, [r7, #124]	; 0x7c
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800198c:	2301      	movs	r3, #1
 800198e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    sFilterConfig.FilterIdHigh = 0x0000;
 8001992:	2300      	movs	r3, #0
 8001994:	667b      	str	r3, [r7, #100]	; 0x64
    sFilterConfig.FilterIdLow = 0x0000;
 8001996:	2300      	movs	r3, #0
 8001998:	66bb      	str	r3, [r7, #104]	; 0x68
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 800199a:	2300      	movs	r3, #0
 800199c:	66fb      	str	r3, [r7, #108]	; 0x6c
    sFilterConfig.FilterMaskIdLow = 0x0000;
 800199e:	2300      	movs	r3, #0
 80019a0:	673b      	str	r3, [r7, #112]	; 0x70
    sFilterConfig.FilterFIFOAssignment = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	677b      	str	r3, [r7, #116]	; 0x74
    sFilterConfig.FilterActivation = ENABLE;
 80019a6:	2301      	movs	r3, #1
 80019a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    // Filter Bank schreiben
    if((status = HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 80019ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019b0:	4619      	mov	r1, r3
 80019b2:	4884      	ldr	r0, [pc, #528]	; (8001bc4 <main+0x338>)
 80019b4:	f001 f9c8 	bl	8002d48 <HAL_CAN_ConfigFilter>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
 80019be:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d006      	beq.n	80019d4 <main+0x148>
    {
    	/* Filter configuration Error */
  		hal_error(status);
 80019c6:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff f858 	bl	8000a80 <hal_error>
  		Error_Handler();
 80019d0:	f000 fa50 	bl	8001e74 <Error_Handler>
	TxMotor1.RTR = CAN_RTR_DATA;
	TxMotor1.IDE = CAN_ID_STD;
	TxMotor1.DLC = 8;
	TxMotor1.TransmitGlobalTime=DISABLE;*/

  	for (uint8_t j = 0; j < 8; j++)
 80019d4:	2300      	movs	r3, #0
 80019d6:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 80019da:	e00f      	b.n	80019fc <main+0x170>
  		TxData[j] = (j + 1);
 80019dc:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80019e0:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 80019e4:	3201      	adds	r2, #1
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80019ec:	440b      	add	r3, r1
 80019ee:	f803 2c1c 	strb.w	r2, [r3, #-28]
  	for (uint8_t j = 0; j < 8; j++)
 80019f2:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80019f6:	3301      	adds	r3, #1
 80019f8:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 80019fc:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8001a00:	2b07      	cmp	r3, #7
 8001a02:	d9eb      	bls.n	80019dc <main+0x150>

  	// Start timer
  	HAL_TIM_Base_Start(&htim6);
 8001a04:	4872      	ldr	r0, [pc, #456]	; (8001bd0 <main+0x344>)
 8001a06:	f003 fb55 	bl	80050b4 <HAL_TIM_Base_Start>

  	uartTransmit("\nStarte While\n\n", 15);
 8001a0a:	210f      	movs	r1, #15
 8001a0c:	4871      	ldr	r0, [pc, #452]	; (8001bd4 <main+0x348>)
 8001a0e:	f7fe fdc7 	bl	80005a0 <uartTransmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 8001a12:	4b71      	ldr	r3, [pc, #452]	; (8001bd8 <main+0x34c>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d107      	bne.n	8001a2c <main+0x1a0>
		{
			count++;													// Zaehler count hochzaehlen
 8001a1c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8001a20:	3301      	adds	r3, #1
 8001a22:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
			millisekunden_flag_1 = 0;									// Setze Millisekunden-Flag zurueck
 8001a26:	4b6c      	ldr	r3, [pc, #432]	; (8001bd8 <main+0x34c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
		}

		// PWM Oelstandsensor ausgeben
		pwm_oelstand(count);
 8001a2c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fab3 	bl	8000f9c <pwm_oelstand>

		// Task wird alle 20 Millisekunden ausgefuehrt
		if ((count % 20) == 1)
 8001a36:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 8001a3a:	4b68      	ldr	r3, [pc, #416]	; (8001bdc <main+0x350>)
 8001a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8001a40:	0919      	lsrs	r1, r3, #4
 8001a42:	460b      	mov	r3, r1
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d10d      	bne.n	8001a6e <main+0x1e2>
		{
			// Sende Nachricht Motor1
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMotor1, motor1.output, (uint32_t *)CAN_TX_MAILBOX0);
 8001a52:	1d39      	adds	r1, r7, #4
 8001a54:	2301      	movs	r3, #1
 8001a56:	4a62      	ldr	r2, [pc, #392]	; (8001be0 <main+0x354>)
 8001a58:	485a      	ldr	r0, [pc, #360]	; (8001bc4 <main+0x338>)
 8001a5a:	f001 faa5 	bl	8002fa8 <HAL_CAN_AddTxMessage>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			hal_error(status);
 8001a64:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff f809 	bl	8000a80 <hal_error>
		}

		// Task wird alle 50 Millisekunden ausgefuehrt
		if ((count % 100) == 1)
 8001a6e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8001a72:	4a5c      	ldr	r2, [pc, #368]	; (8001be4 <main+0x358>)
 8001a74:	fba2 1203 	umull	r1, r2, r2, r3
 8001a78:	0952      	lsrs	r2, r2, #5
 8001a7a:	2164      	movs	r1, #100	; 0x64
 8001a7c:	fb01 f202 	mul.w	r2, r1, r2
 8001a80:	1a9b      	subs	r3, r3, r2
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d106      	bne.n	8001a96 <main+0x20a>
		{
			// alle Inputs einlesen
			readall_inputs();
 8001a88:	f7ff f84a 	bl	8000b20 <readall_inputs>

			// Pedale pruefen, ADC-Gaspedal ausgeben
			adc_gas = readPedals();
 8001a8c:	f7ff fac2 	bl	8001014 <readPedals>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
		}

		// Task wird alle 200 Millisekunden ausgefuehrt
		if ((count % 200) == 1)
 8001a96:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8001a9a:	4a52      	ldr	r2, [pc, #328]	; (8001be4 <main+0x358>)
 8001a9c:	fba2 1203 	umull	r1, r2, r2, r3
 8001aa0:	0992      	lsrs	r2, r2, #6
 8001aa2:	21c8      	movs	r1, #200	; 0xc8
 8001aa4:	fb01 f202 	mul.w	r2, r1, r2
 8001aa8:	1a9b      	subs	r3, r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d153      	bne.n	8001b58 <main+0x2cc>
		{
			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <main+0x35c>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			OutData[1] = highcurrent_out.high_out;
 8001ab8:	4b4c      	ldr	r3, [pc, #304]	; (8001bec <main+0x360>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
			OutData[2] = (leuchten_out.ledoutput >> 8);
 8001ac0:	4b4b      	ldr	r3, [pc, #300]	; (8001bf0 <main+0x364>)
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	0a1b      	lsrs	r3, r3, #8
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			OutData[3] = leuchten_out.ledoutput;
 8001ace:	4b48      	ldr	r3, [pc, #288]	; (8001bf0 <main+0x364>)
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			OutData[4] = komfort_out.komfortoutput;
 8001ad8:	4b46      	ldr	r3, [pc, #280]	; (8001bf4 <main+0x368>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98

			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX0);
 8001ae0:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001ae4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001ae8:	2301      	movs	r3, #1
 8001aea:	4836      	ldr	r0, [pc, #216]	; (8001bc4 <main+0x338>)
 8001aec:	f001 fa5c 	bl	8002fa8 <HAL_CAN_AddTxMessage>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			hal_error(status);
 8001af6:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe ffc0 	bl	8000a80 <hal_error>

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] = (system_in.systeminput >> 8);
 8001b00:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <main+0x36c>)
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			InData[1] = system_in.systeminput;
 8001b0e:	4b3a      	ldr	r3, [pc, #232]	; (8001bf8 <main+0x36c>)
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
			InData[2] = sdc_in.sdcinput;
 8001b18:	4b38      	ldr	r3, [pc, #224]	; (8001bfc <main+0x370>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			InData[3] = (komfort_in.komfortinput >> 8);
 8001b20:	4b37      	ldr	r3, [pc, #220]	; (8001c00 <main+0x374>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			InData[4] = komfort_in.komfortinput;
 8001b2e:	4b34      	ldr	r3, [pc, #208]	; (8001c00 <main+0x374>)
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90

			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX0);
 8001b38:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001b3c:	f107 011c 	add.w	r1, r7, #28
 8001b40:	2301      	movs	r3, #1
 8001b42:	4820      	ldr	r0, [pc, #128]	; (8001bc4 <main+0x338>)
 8001b44:	f001 fa30 	bl	8002fa8 <HAL_CAN_AddTxMessage>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			hal_error(status);
 8001b4e:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe ff94 	bl	8000a80 <hal_error>
		}

		if ((count % 600) == 1)
 8001b58:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8001b5c:	4a29      	ldr	r2, [pc, #164]	; (8001c04 <main+0x378>)
 8001b5e:	fba2 1203 	umull	r1, r2, r2, r3
 8001b62:	0992      	lsrs	r2, r2, #6
 8001b64:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001b68:	fb01 f202 	mul.w	r2, r1, r2
 8001b6c:	1a9b      	subs	r3, r3, r2
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d102      	bne.n	8001b7a <main+0x2ee>
		{
			count = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
		}

	  	// Task wird alle 5 Millisekunden ausgefuehrt
	  	if (millis() - lastcan >= 5)
 8001b7a:	f7ff f9c9 	bl	8000f10 <millis>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	f240 8082 	bls.w	8001c90 <main+0x404>
		{
			// Wenn Nachricht ueber den CAN-Bus empfangen wurden
			if (can_change == 1)
 8001b8c:	4b1e      	ldr	r3, [pc, #120]	; (8001c08 <main+0x37c>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d17d      	bne.n	8001c90 <main+0x404>
			{
				// Nachricht ID über UART ausgeben
				uartTransmitNumber(RxMessage.StdId, 16);
 8001b94:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <main+0x380>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2110      	movs	r1, #16
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fd14 	bl	80005c8 <uartTransmitNumber>
				uartTransmit("\t", 1);
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	481b      	ldr	r0, [pc, #108]	; (8001c10 <main+0x384>)
 8001ba4:	f7fe fcfc 	bl	80005a0 <uartTransmit>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
 8001bae:	e03e      	b.n	8001c2e <main+0x3a2>
 8001bb0:	080064e4 	.word	0x080064e4
 8001bb4:	080064fc 	.word	0x080064fc
 8001bb8:	08006514 	.word	0x08006514
 8001bbc:	0800652c 	.word	0x0800652c
 8001bc0:	08006440 	.word	0x08006440
 8001bc4:	200000a0 	.word	0x200000a0
 8001bc8:	0800647c 	.word	0x0800647c
 8001bcc:	08006488 	.word	0x08006488
 8001bd0:	200000ec 	.word	0x200000ec
 8001bd4:	08006498 	.word	0x08006498
 8001bd8:	20000029 	.word	0x20000029
 8001bdc:	cccccccd 	.word	0xcccccccd
 8001be0:	20000034 	.word	0x20000034
 8001be4:	51eb851f 	.word	0x51eb851f
 8001be8:	2000004c 	.word	0x2000004c
 8001bec:	20000050 	.word	0x20000050
 8001bf0:	20000054 	.word	0x20000054
 8001bf4:	20000048 	.word	0x20000048
 8001bf8:	2000003c 	.word	0x2000003c
 8001bfc:	20000044 	.word	0x20000044
 8001c00:	20000040 	.word	0x20000040
 8001c04:	1b4e81b5 	.word	0x1b4e81b5
 8001c08:	20000028 	.word	0x20000028
 8001c0c:	200000d0 	.word	0x200000d0
 8001c10:	080064a8 	.word	0x080064a8
				{
					uartTransmitNumber(RxData[i], 16);
 8001c14:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8001c18:	4a2d      	ldr	r2, [pc, #180]	; (8001cd0 <main+0x444>)
 8001c1a:	5cd3      	ldrb	r3, [r2, r3]
 8001c1c:	2110      	movs	r1, #16
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fcd2 	bl	80005c8 <uartTransmitNumber>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 8001c24:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8001c28:	3301      	adds	r3, #1
 8001c2a:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
 8001c2e:	f897 20aa 	ldrb.w	r2, [r7, #170]	; 0xaa
 8001c32:	4b28      	ldr	r3, [pc, #160]	; (8001cd4 <main+0x448>)
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d3ec      	bcc.n	8001c14 <main+0x388>
				}
				uartTransmit("\n", 1);
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	4826      	ldr	r0, [pc, #152]	; (8001cd8 <main+0x44c>)
 8001c3e:	f7fe fcaf 	bl	80005a0 <uartTransmit>

				// Sortieren der IDs nach Geräten
				switch (RxMessage.StdId)
 8001c42:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <main+0x448>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f240 1211 	movw	r2, #273	; 0x111
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d007      	beq.n	8001c5e <main+0x3d2>
 8001c4e:	f240 1281 	movw	r2, #385	; 0x181
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d108      	bne.n	8001c68 <main+0x3dc>
				{
					case BAMOCAR_RX_ID:
						BAMOCAN_ID(&RxData[0]);
 8001c56:	481e      	ldr	r0, [pc, #120]	; (8001cd0 <main+0x444>)
 8001c58:	f7fe fc72 	bl	8000540 <BAMOCAN_ID>
						break;
 8001c5c:	e009      	b.n	8001c72 <main+0x3e6>
					case 0x111:
						uartTransmit("CAN-ID Computer config\n", 23);
 8001c5e:	2117      	movs	r1, #23
 8001c60:	481e      	ldr	r0, [pc, #120]	; (8001cdc <main+0x450>)
 8001c62:	f7fe fc9d 	bl	80005a0 <uartTransmit>
						break;
 8001c66:	e004      	b.n	8001c72 <main+0x3e6>
					default:
						uartTransmit("CAN-ID nicht verfuegbar\n", 24);
 8001c68:	2118      	movs	r1, #24
 8001c6a:	481d      	ldr	r0, [pc, #116]	; (8001ce0 <main+0x454>)
 8001c6c:	f7fe fc98 	bl	80005a0 <uartTransmit>
						break;
 8001c70:	bf00      	nop
				}

				TxData[2] = motor1.output[2];
 8001c72:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <main+0x458>)
 8001c74:	789b      	ldrb	r3, [r3, #2]
 8001c76:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
				TxData[3] = motor1.output[3];
 8001c7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <main+0x458>)
 8001c7c:	78db      	ldrb	r3, [r3, #3]
 8001c7e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				lastcan = millis();
 8001c82:	f7ff f945 	bl	8000f10 <millis>
 8001c86:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
				can_change = 0;
 8001c8a:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <main+0x45c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
			}
		}

		// Sende CAN Nachricht auf CAN-Bus
		if (millis() - lastsendcan >= 993)
 8001c90:	f7ff f93e 	bl	8000f10 <millis>
 8001c94:	4602      	mov	r2, r0
 8001c96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 8001ca0:	f67f aeb7 	bls.w	8001a12 <main+0x186>
		{
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 8001ca4:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8001ca8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001cac:	2301      	movs	r3, #1
 8001cae:	480f      	ldr	r0, [pc, #60]	; (8001cec <main+0x460>)
 8001cb0:	f001 f97a 	bl	8002fa8 <HAL_CAN_AddTxMessage>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			hal_error(status);
 8001cba:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe fede 	bl	8000a80 <hal_error>
			lastsendcan = millis();
 8001cc4:	f7ff f924 	bl	8000f10 <millis>
 8001cc8:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
		if (millisekunden_flag_1 == 1)
 8001ccc:	e6a1      	b.n	8001a12 <main+0x186>
 8001cce:	bf00      	nop
 8001cd0:	200000c8 	.word	0x200000c8
 8001cd4:	200000d0 	.word	0x200000d0
 8001cd8:	080064ac 	.word	0x080064ac
 8001cdc:	080064b0 	.word	0x080064b0
 8001ce0:	080064c8 	.word	0x080064c8
 8001ce4:	20000034 	.word	0x20000034
 8001ce8:	20000028 	.word	0x20000028
 8001cec:	200000a0 	.word	0x200000a0

08001cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b0b8      	sub	sp, #224	; 0xe0
 8001cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cf6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cfa:	2234      	movs	r2, #52	; 0x34
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f004 f9ac 	bl	800605c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d04:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d14:	f107 0308 	add.w	r3, r7, #8
 8001d18:	2290      	movs	r2, #144	; 0x90
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f004 f99d 	bl	800605c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	4b3b      	ldr	r3, [pc, #236]	; (8001e10 <SystemClock_Config+0x120>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	4a3a      	ldr	r2, [pc, #232]	; (8001e10 <SystemClock_Config+0x120>)
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2e:	4b38      	ldr	r3, [pc, #224]	; (8001e10 <SystemClock_Config+0x120>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d3a:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <SystemClock_Config+0x124>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d42:	4a34      	ldr	r2, [pc, #208]	; (8001e14 <SystemClock_Config+0x124>)
 8001d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <SystemClock_Config+0x124>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d56:	2301      	movs	r3, #1
 8001d58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d64:	2302      	movs	r3, #2
 8001d66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001d72:	2319      	movs	r3, #25
 8001d74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001d78:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d80:	2302      	movs	r3, #2
 8001d82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d86:	2302      	movs	r3, #2
 8001d88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d92:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d96:	4618      	mov	r0, r3
 8001d98:	f002 f888 	bl	8003eac <HAL_RCC_OscConfig>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001da2:	f000 f867 	bl	8001e74 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001da6:	f002 f831 	bl	8003e0c <HAL_PWREx_EnableOverDrive>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001db0:	f000 f860 	bl	8001e74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001db4:	230f      	movs	r3, #15
 8001db6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001dd4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001dd8:	2103      	movs	r1, #3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f002 fb14 	bl	8004408 <HAL_RCC_ClockConfig>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001de6:	f000 f845 	bl	8001e74 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001dee:	2300      	movs	r3, #0
 8001df0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	4618      	mov	r0, r3
 8001df8:	f002 fcdc 	bl	80047b4 <HAL_RCCEx_PeriphCLKConfig>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8001e02:	f000 f837 	bl	8001e74 <Error_Handler>
  }
}
 8001e06:	bf00      	nop
 8001e08:	37e0      	adds	r7, #224	; 0xe0
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40007000 	.word	0x40007000

08001e18 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
// Interrupts
// Can-Interrupt: Nachricht wartet
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001e22:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001e24:	2100      	movs	r1, #0
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f001 f999 	bl	800315e <HAL_CAN_GetRxMessage>
	can_change = 1;
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	701a      	strb	r2, [r3, #0]
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200000c8 	.word	0x200000c8
 8001e40:	200000d0 	.word	0x200000d0
 8001e44:	20000028 	.word	0x20000028

08001e48 <HAL_TIM_PeriodElapsedCallback>:

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a06      	ldr	r2, [pc, #24]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d102      	bne.n	8001e5e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]
	}
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	200000ec 	.word	0x200000ec
 8001e70:	20000029 	.word	0x20000029

08001e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e78:	b672      	cpsid	i
}
 8001e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	2104      	movs	r1, #4
 8001e80:	4803      	ldr	r0, [pc, #12]	; (8001e90 <Error_Handler+0x1c>)
 8001e82:	f001 ffa9 	bl	8003dd8 <HAL_GPIO_WritePin>
#ifdef DEBUG
#define ERRORMESSAGE			"\nError Handler ausgeloest\n"
  uartTransmit(ERRORMESSAGE,sizeof(ERRORMESSAGE));
 8001e86:	211b      	movs	r1, #27
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <Error_Handler+0x20>)
 8001e8a:	f7fe fb89 	bl	80005a0 <uartTransmit>
#endif
  while (1)
 8001e8e:	e7fe      	b.n	8001e8e <Error_Handler+0x1a>
 8001e90:	40020400 	.word	0x40020400
 8001e94:	08006544 	.word	0x08006544

08001e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <HAL_MspInit+0x44>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <HAL_MspInit+0x44>)
 8001ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <HAL_MspInit+0x44>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb6:	4b09      	ldr	r3, [pc, #36]	; (8001edc <HAL_MspInit+0x44>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	4a08      	ldr	r2, [pc, #32]	; (8001edc <HAL_MspInit+0x44>)
 8001ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_MspInit+0x44>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800

08001ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <NMI_Handler+0x4>

08001ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eea:	e7fe      	b.n	8001eea <HardFault_Handler+0x4>

08001eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <MemManage_Handler+0x4>

08001ef2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <BusFault_Handler+0x4>

08001ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <UsageFault_Handler+0x4>

08001efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f2c:	f000 f962 	bl	80021f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f38:	4802      	ldr	r0, [pc, #8]	; (8001f44 <TIM6_DAC_IRQHandler+0x10>)
 8001f3a:	f003 f92b 	bl	8005194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200000ec 	.word	0x200000ec

08001f48 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8001f4c:	4802      	ldr	r0, [pc, #8]	; (8001f58 <CAN3_RX0_IRQHandler+0x10>)
 8001f4e:	f001 fa3e 	bl	80033ce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200000a0 	.word	0x200000a0

08001f5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <SystemInit+0x28>)
 8001f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f66:	4a07      	ldr	r2, [pc, #28]	; (8001f84 <SystemInit+0x28>)
 8001f68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <SystemInit+0x28>)
 8001f72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f76:	609a      	str	r2, [r3, #8]
#endif
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f98:	4b14      	ldr	r3, [pc, #80]	; (8001fec <MX_TIM6_Init+0x64>)
 8001f9a:	4a15      	ldr	r2, [pc, #84]	; (8001ff0 <MX_TIM6_Init+0x68>)
 8001f9c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 5;
 8001f9e:	4b13      	ldr	r3, [pc, #76]	; (8001fec <MX_TIM6_Init+0x64>)
 8001fa0:	2205      	movs	r2, #5
 8001fa2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <MX_TIM6_Init+0x64>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001faa:	4b10      	ldr	r3, [pc, #64]	; (8001fec <MX_TIM6_Init+0x64>)
 8001fac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fb0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <MX_TIM6_Init+0x64>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001fb8:	480c      	ldr	r0, [pc, #48]	; (8001fec <MX_TIM6_Init+0x64>)
 8001fba:	f003 f823 	bl	8005004 <HAL_TIM_Base_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001fc4:	f7ff ff56 	bl	8001e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4805      	ldr	r0, [pc, #20]	; (8001fec <MX_TIM6_Init+0x64>)
 8001fd6:	f003 fac5 	bl	8005564 <HAL_TIMEx_MasterConfigSynchronization>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001fe0:	f7ff ff48 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001fe4:	bf00      	nop
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	200000ec 	.word	0x200000ec
 8001ff0:	40001000 	.word	0x40001000

08001ff4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0d      	ldr	r2, [pc, #52]	; (8002038 <HAL_TIM_Base_MspInit+0x44>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d113      	bne.n	800202e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002006:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_TIM_Base_MspInit+0x48>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	4a0c      	ldr	r2, [pc, #48]	; (800203c <HAL_TIM_Base_MspInit+0x48>)
 800200c:	f043 0310 	orr.w	r3, r3, #16
 8002010:	6413      	str	r3, [r2, #64]	; 0x40
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <HAL_TIM_Base_MspInit+0x48>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800201e:	2200      	movs	r2, #0
 8002020:	2100      	movs	r1, #0
 8002022:	2036      	movs	r0, #54	; 0x36
 8002024:	f001 fcdd 	bl	80039e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002028:	2036      	movs	r0, #54	; 0x36
 800202a:	f001 fcf6 	bl	8003a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40001000 	.word	0x40001000
 800203c:	40023800 	.word	0x40023800

08002040 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002044:	4b14      	ldr	r3, [pc, #80]	; (8002098 <MX_USART2_UART_Init+0x58>)
 8002046:	4a15      	ldr	r2, [pc, #84]	; (800209c <MX_USART2_UART_Init+0x5c>)
 8002048:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800204a:	4b13      	ldr	r3, [pc, #76]	; (8002098 <MX_USART2_UART_Init+0x58>)
 800204c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002050:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002052:	4b11      	ldr	r3, [pc, #68]	; (8002098 <MX_USART2_UART_Init+0x58>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002058:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <MX_USART2_UART_Init+0x58>)
 800205a:	2200      	movs	r2, #0
 800205c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <MX_USART2_UART_Init+0x58>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <MX_USART2_UART_Init+0x58>)
 8002066:	220c      	movs	r2, #12
 8002068:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <MX_USART2_UART_Init+0x58>)
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002070:	4b09      	ldr	r3, [pc, #36]	; (8002098 <MX_USART2_UART_Init+0x58>)
 8002072:	2200      	movs	r2, #0
 8002074:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <MX_USART2_UART_Init+0x58>)
 8002078:	2200      	movs	r2, #0
 800207a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <MX_USART2_UART_Init+0x58>)
 800207e:	2200      	movs	r2, #0
 8002080:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002082:	4805      	ldr	r0, [pc, #20]	; (8002098 <MX_USART2_UART_Init+0x58>)
 8002084:	f003 fb1a 	bl	80056bc <HAL_UART_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800208e:	f7ff fef1 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000138 	.word	0x20000138
 800209c:	40004400 	.word	0x40004400

080020a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08a      	sub	sp, #40	; 0x28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a17      	ldr	r2, [pc, #92]	; (800211c <HAL_UART_MspInit+0x7c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d127      	bne.n	8002112 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020c2:	4b17      	ldr	r3, [pc, #92]	; (8002120 <HAL_UART_MspInit+0x80>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	4a16      	ldr	r2, [pc, #88]	; (8002120 <HAL_UART_MspInit+0x80>)
 80020c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020cc:	6413      	str	r3, [r2, #64]	; 0x40
 80020ce:	4b14      	ldr	r3, [pc, #80]	; (8002120 <HAL_UART_MspInit+0x80>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_UART_MspInit+0x80>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a10      	ldr	r2, [pc, #64]	; (8002120 <HAL_UART_MspInit+0x80>)
 80020e0:	f043 0308 	orr.w	r3, r3, #8
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <HAL_UART_MspInit+0x80>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART2TX_Pin|DEBUG_UART2RX_Pin;
 80020f2:	2360      	movs	r3, #96	; 0x60
 80020f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fe:	2303      	movs	r3, #3
 8002100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002102:	2307      	movs	r3, #7
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002106:	f107 0314 	add.w	r3, r7, #20
 800210a:	4619      	mov	r1, r3
 800210c:	4805      	ldr	r0, [pc, #20]	; (8002124 <HAL_UART_MspInit+0x84>)
 800210e:	f001 fc9f 	bl	8003a50 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002112:	bf00      	nop
 8002114:	3728      	adds	r7, #40	; 0x28
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40004400 	.word	0x40004400
 8002120:	40023800 	.word	0x40023800
 8002124:	40020c00 	.word	0x40020c00

08002128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002160 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800212c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800212e:	e003      	b.n	8002138 <LoopCopyDataInit>

08002130 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002132:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002134:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002136:	3104      	adds	r1, #4

08002138 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002138:	480b      	ldr	r0, [pc, #44]	; (8002168 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800213c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800213e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002140:	d3f6      	bcc.n	8002130 <CopyDataInit>
  ldr  r2, =_sbss
 8002142:	4a0b      	ldr	r2, [pc, #44]	; (8002170 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002144:	e002      	b.n	800214c <LoopFillZerobss>

08002146 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002146:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002148:	f842 3b04 	str.w	r3, [r2], #4

0800214c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800214e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002150:	d3f9      	bcc.n	8002146 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002152:	f7ff ff03 	bl	8001f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002156:	f003 ff5d 	bl	8006014 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800215a:	f7ff fb97 	bl	800188c <main>
  bx  lr    
 800215e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002160:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002164:	080065b0 	.word	0x080065b0
  ldr  r0, =_sdata
 8002168:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800216c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002170:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002174:	200001c0 	.word	0x200001c0

08002178 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002178:	e7fe      	b.n	8002178 <ADC_IRQHandler>

0800217a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800217e:	2003      	movs	r0, #3
 8002180:	f001 fc24 	bl	80039cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002184:	2000      	movs	r0, #0
 8002186:	f000 f805 	bl	8002194 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800218a:	f7ff fe85 	bl	8001e98 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_InitTick+0x54>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_InitTick+0x58>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4619      	mov	r1, r3
 80021a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b2:	4618      	mov	r0, r3
 80021b4:	f001 fc3f 	bl	8003a36 <HAL_SYSTICK_Config>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e00e      	b.n	80021e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b0f      	cmp	r3, #15
 80021c6:	d80a      	bhi.n	80021de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c8:	2200      	movs	r2, #0
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	f001 fc07 	bl	80039e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d4:	4a06      	ldr	r2, [pc, #24]	; (80021f0 <HAL_InitTick+0x5c>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	e000      	b.n	80021e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000000 	.word	0x20000000
 80021ec:	20000008 	.word	0x20000008
 80021f0:	20000004 	.word	0x20000004

080021f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_IncTick+0x20>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_IncTick+0x24>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4413      	add	r3, r2
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_IncTick+0x24>)
 8002206:	6013      	str	r3, [r2, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000008 	.word	0x20000008
 8002218:	200001bc 	.word	0x200001bc

0800221c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return uwTick;
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <HAL_GetTick+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	200001bc 	.word	0x200001bc

08002234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7ff ffee 	bl	800221c <HAL_GetTick>
 8002240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224c:	d005      	beq.n	800225a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HAL_Delay+0x44>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800225a:	bf00      	nop
 800225c:	f7ff ffde 	bl	800221c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	429a      	cmp	r2, r3
 800226a:	d8f7      	bhi.n	800225c <HAL_Delay+0x28>
  {
  }
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000008 	.word	0x20000008

0800227c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
 return __STM32F7xx_HAL_VERSION;
 8002280:	4b02      	ldr	r3, [pc, #8]	; (800228c <HAL_GetHalVersion+0x10>)
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	01020900 	.word	0x01020900

08002290 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8002294:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <HAL_GetREVID+0x14>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	0c1b      	lsrs	r3, r3, #16
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e0042000 	.word	0xe0042000

080022a8 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <HAL_GetDEVID+0x18>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e0042000 	.word	0xe0042000

080022c4 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 80022c8:	4b03      	ldr	r3, [pc, #12]	; (80022d8 <HAL_GetUIDw0+0x14>)
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	1ff0f420 	.word	0x1ff0f420

080022dc <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <HAL_GetUIDw1+0x14>)
 80022e2:	681b      	ldr	r3, [r3, #0]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	1ff0f424 	.word	0x1ff0f424

080022f4 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <HAL_GetUIDw2+0x14>)
 80022fa:	681b      	ldr	r3, [r3, #0]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	1ff0f428 	.word	0x1ff0f428

0800230c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e031      	b.n	8002386 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	2b00      	cmp	r3, #0
 8002328:	d109      	bne.n	800233e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7fe ffec 	bl	8001308 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2b00      	cmp	r3, #0
 8002348:	d116      	bne.n	8002378 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <HAL_ADC_Init+0x84>)
 8002350:	4013      	ands	r3, r2
 8002352:	f043 0202 	orr.w	r2, r3, #2
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 fafe 	bl	800295c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f023 0303 	bic.w	r3, r3, #3
 800236e:	f043 0201 	orr.w	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	641a      	str	r2, [r3, #64]	; 0x40
 8002376:	e001      	b.n	800237c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002384:	7bfb      	ldrb	r3, [r7, #15]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	ffffeefd 	.word	0xffffeefd

08002394 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_ADC_Start+0x1a>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e0ad      	b.n	800250a <HAL_ADC_Start+0x176>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d018      	beq.n	80023f6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0201 	orr.w	r2, r2, #1
 80023d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80023d4:	4b50      	ldr	r3, [pc, #320]	; (8002518 <HAL_ADC_Start+0x184>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a50      	ldr	r2, [pc, #320]	; (800251c <HAL_ADC_Start+0x188>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	0c9a      	lsrs	r2, r3, #18
 80023e0:	4613      	mov	r3, r2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	4413      	add	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80023e8:	e002      	b.n	80023f0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	3b01      	subs	r3, #1
 80023ee:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f9      	bne.n	80023ea <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b01      	cmp	r3, #1
 8002402:	d175      	bne.n	80024f0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002408:	4b45      	ldr	r3, [pc, #276]	; (8002520 <HAL_ADC_Start+0x18c>)
 800240a:	4013      	ands	r3, r2
 800240c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800241e:	2b00      	cmp	r3, #0
 8002420:	d007      	beq.n	8002432 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800242a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800243a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800243e:	d106      	bne.n	800244e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002444:	f023 0206 	bic.w	r2, r3, #6
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	645a      	str	r2, [r3, #68]	; 0x44
 800244c:	e002      	b.n	8002454 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002464:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002466:	4b2f      	ldr	r3, [pc, #188]	; (8002524 <HAL_ADC_Start+0x190>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 031f 	and.w	r3, r3, #31
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10f      	bne.n	8002492 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d143      	bne.n	8002508 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	e03a      	b.n	8002508 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a24      	ldr	r2, [pc, #144]	; (8002528 <HAL_ADC_Start+0x194>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d10e      	bne.n	80024ba <HAL_ADC_Start+0x126>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d107      	bne.n	80024ba <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024b8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80024ba:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <HAL_ADC_Start+0x190>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d120      	bne.n	8002508 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a18      	ldr	r2, [pc, #96]	; (800252c <HAL_ADC_Start+0x198>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d11b      	bne.n	8002508 <HAL_ADC_Start+0x174>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d114      	bne.n	8002508 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024ec:	609a      	str	r2, [r3, #8]
 80024ee:	e00b      	b.n	8002508 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	f043 0210 	orr.w	r2, r3, #16
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002500:	f043 0201 	orr.w	r2, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000000 	.word	0x20000000
 800251c:	431bde83 	.word	0x431bde83
 8002520:	fffff8fe 	.word	0xfffff8fe
 8002524:	40012300 	.word	0x40012300
 8002528:	40012000 	.word	0x40012000
 800252c:	40012200 	.word	0x40012200

08002530 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_ADC_Stop+0x16>
 8002542:	2302      	movs	r3, #2
 8002544:	e01f      	b.n	8002586 <HAL_ADC_Stop+0x56>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0201 	bic.w	r2, r2, #1
 800255c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d107      	bne.n	800257c <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002570:	4b08      	ldr	r3, [pc, #32]	; (8002594 <HAL_ADC_Stop+0x64>)
 8002572:	4013      	ands	r3, r2
 8002574:	f043 0201 	orr.w	r2, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	ffffeefe 	.word	0xffffeefe

08002598 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b4:	d113      	bne.n	80025de <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80025c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025c4:	d10b      	bne.n	80025de <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f043 0220 	orr.w	r2, r3, #32
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e063      	b.n	80026a6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80025de:	f7ff fe1d 	bl	800221c <HAL_GetTick>
 80025e2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025e4:	e021      	b.n	800262a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d01d      	beq.n	800262a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d007      	beq.n	8002604 <HAL_ADC_PollForConversion+0x6c>
 80025f4:	f7ff fe12 	bl	800221c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d212      	bcs.n	800262a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b02      	cmp	r3, #2
 8002610:	d00b      	beq.n	800262a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f043 0204 	orr.w	r2, r3, #4
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e03d      	b.n	80026a6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b02      	cmp	r3, #2
 8002636:	d1d6      	bne.n	80025e6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f06f 0212 	mvn.w	r2, #18
 8002640:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d123      	bne.n	80026a4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002660:	2b00      	cmp	r3, #0
 8002662:	d11f      	bne.n	80026a4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800266e:	2b00      	cmp	r3, #0
 8002670:	d006      	beq.n	8002680 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800267c:	2b00      	cmp	r3, #0
 800267e:	d111      	bne.n	80026a4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d105      	bne.n	80026a4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	f043 0201 	orr.w	r2, r3, #1
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x1c>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e12a      	b.n	800293a <HAL_ADC_ConfigChannel+0x272>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b09      	cmp	r3, #9
 80026f2:	d93a      	bls.n	800276a <HAL_ADC_ConfigChannel+0xa2>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026fc:	d035      	beq.n	800276a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68d9      	ldr	r1, [r3, #12]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	b29b      	uxth	r3, r3
 800270a:	461a      	mov	r2, r3
 800270c:	4613      	mov	r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4413      	add	r3, r2
 8002712:	3b1e      	subs	r3, #30
 8002714:	2207      	movs	r2, #7
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43da      	mvns	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	400a      	ands	r2, r1
 8002722:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a87      	ldr	r2, [pc, #540]	; (8002948 <HAL_ADC_ConfigChannel+0x280>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d10a      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68d9      	ldr	r1, [r3, #12]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	061a      	lsls	r2, r3, #24
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002742:	e035      	b.n	80027b0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68d9      	ldr	r1, [r3, #12]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	b29b      	uxth	r3, r3
 8002754:	4618      	mov	r0, r3
 8002756:	4603      	mov	r3, r0
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4403      	add	r3, r0
 800275c:	3b1e      	subs	r3, #30
 800275e:	409a      	lsls	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002768:	e022      	b.n	80027b0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6919      	ldr	r1, [r3, #16]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	b29b      	uxth	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	4613      	mov	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	2207      	movs	r2, #7
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43da      	mvns	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	400a      	ands	r2, r1
 800278c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6919      	ldr	r1, [r3, #16]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	b29b      	uxth	r3, r3
 800279e:	4618      	mov	r0, r3
 80027a0:	4603      	mov	r3, r0
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4403      	add	r3, r0
 80027a6:	409a      	lsls	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b06      	cmp	r3, #6
 80027b6:	d824      	bhi.n	8002802 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	3b05      	subs	r3, #5
 80027ca:	221f      	movs	r2, #31
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43da      	mvns	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	400a      	ands	r2, r1
 80027d8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	4618      	mov	r0, r3
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	3b05      	subs	r3, #5
 80027f4:	fa00 f203 	lsl.w	r2, r0, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	635a      	str	r2, [r3, #52]	; 0x34
 8002800:	e04c      	b.n	800289c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b0c      	cmp	r3, #12
 8002808:	d824      	bhi.n	8002854 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	3b23      	subs	r3, #35	; 0x23
 800281c:	221f      	movs	r2, #31
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	400a      	ands	r2, r1
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	4618      	mov	r0, r3
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	3b23      	subs	r3, #35	; 0x23
 8002846:	fa00 f203 	lsl.w	r2, r0, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	631a      	str	r2, [r3, #48]	; 0x30
 8002852:	e023      	b.n	800289c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	3b41      	subs	r3, #65	; 0x41
 8002866:	221f      	movs	r2, #31
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43da      	mvns	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	400a      	ands	r2, r1
 8002874:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	b29b      	uxth	r3, r3
 8002882:	4618      	mov	r0, r3
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	3b41      	subs	r3, #65	; 0x41
 8002890:	fa00 f203 	lsl.w	r2, r0, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a2a      	ldr	r2, [pc, #168]	; (800294c <HAL_ADC_ConfigChannel+0x284>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d10a      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x1f4>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028ae:	d105      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80028b0:	4b27      	ldr	r3, [pc, #156]	; (8002950 <HAL_ADC_ConfigChannel+0x288>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	4a26      	ldr	r2, [pc, #152]	; (8002950 <HAL_ADC_ConfigChannel+0x288>)
 80028b6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80028ba:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a22      	ldr	r2, [pc, #136]	; (800294c <HAL_ADC_ConfigChannel+0x284>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d109      	bne.n	80028da <HAL_ADC_ConfigChannel+0x212>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b12      	cmp	r3, #18
 80028cc:	d105      	bne.n	80028da <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80028ce:	4b20      	ldr	r3, [pc, #128]	; (8002950 <HAL_ADC_ConfigChannel+0x288>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	4a1f      	ldr	r2, [pc, #124]	; (8002950 <HAL_ADC_ConfigChannel+0x288>)
 80028d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028d8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a1b      	ldr	r2, [pc, #108]	; (800294c <HAL_ADC_ConfigChannel+0x284>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d125      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x268>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a17      	ldr	r2, [pc, #92]	; (8002948 <HAL_ADC_ConfigChannel+0x280>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d003      	beq.n	80028f6 <HAL_ADC_ConfigChannel+0x22e>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b11      	cmp	r3, #17
 80028f4:	d11c      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80028f6:	4b16      	ldr	r3, [pc, #88]	; (8002950 <HAL_ADC_ConfigChannel+0x288>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4a15      	ldr	r2, [pc, #84]	; (8002950 <HAL_ADC_ConfigChannel+0x288>)
 80028fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002900:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a10      	ldr	r2, [pc, #64]	; (8002948 <HAL_ADC_ConfigChannel+0x280>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d111      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800290c:	4b11      	ldr	r3, [pc, #68]	; (8002954 <HAL_ADC_ConfigChannel+0x28c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a11      	ldr	r2, [pc, #68]	; (8002958 <HAL_ADC_ConfigChannel+0x290>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	0c9a      	lsrs	r2, r3, #18
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002922:	e002      	b.n	800292a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	3b01      	subs	r3, #1
 8002928:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1f9      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	10000012 	.word	0x10000012
 800294c:	40012000 	.word	0x40012000
 8002950:	40012300 	.word	0x40012300
 8002954:	20000000 	.word	0x20000000
 8002958:	431bde83 	.word	0x431bde83

0800295c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002964:	4b78      	ldr	r3, [pc, #480]	; (8002b48 <ADC_Init+0x1ec>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	4a77      	ldr	r2, [pc, #476]	; (8002b48 <ADC_Init+0x1ec>)
 800296a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800296e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002970:	4b75      	ldr	r3, [pc, #468]	; (8002b48 <ADC_Init+0x1ec>)
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4973      	ldr	r1, [pc, #460]	; (8002b48 <ADC_Init+0x1ec>)
 800297a:	4313      	orrs	r3, r2
 800297c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800298c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6859      	ldr	r1, [r3, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	021a      	lsls	r2, r3, #8
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6859      	ldr	r1, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6899      	ldr	r1, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ea:	4a58      	ldr	r2, [pc, #352]	; (8002b4c <ADC_Init+0x1f0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d022      	beq.n	8002a36 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6899      	ldr	r1, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6899      	ldr	r1, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	e00f      	b.n	8002a56 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a54:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0202 	bic.w	r2, r2, #2
 8002a64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6899      	ldr	r1, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	005a      	lsls	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d01b      	beq.n	8002abc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a92:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002aa2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6859      	ldr	r1, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	035a      	lsls	r2, r3, #13
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	e007      	b.n	8002acc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ada:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	051a      	lsls	r2, r3, #20
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6899      	ldr	r1, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b0e:	025a      	lsls	r2, r3, #9
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6899      	ldr	r1, [r3, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	029a      	lsls	r2, r3, #10
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	609a      	str	r2, [r3, #8]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	40012300 	.word	0x40012300
 8002b4c:	0f000001 	.word	0x0f000001

08002b50 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e0ed      	b.n	8002d3e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d102      	bne.n	8002b74 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7fe fc74 	bl	800145c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0202 	bic.w	r2, r2, #2
 8002b82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b84:	f7ff fb4a 	bl	800221c <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b8a:	e012      	b.n	8002bb2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b8c:	f7ff fb46 	bl	800221c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b0a      	cmp	r3, #10
 8002b98:	d90b      	bls.n	8002bb2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2205      	movs	r2, #5
 8002baa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e0c5      	b.n	8002d3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1e5      	bne.n	8002b8c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bd0:	f7ff fb24 	bl	800221c <HAL_GetTick>
 8002bd4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bd6:	e012      	b.n	8002bfe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bd8:	f7ff fb20 	bl	800221c <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b0a      	cmp	r3, #10
 8002be4:	d90b      	bls.n	8002bfe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2205      	movs	r2, #5
 8002bf6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e09f      	b.n	8002d3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0e5      	beq.n	8002bd8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	7e1b      	ldrb	r3, [r3, #24]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d108      	bne.n	8002c26 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	e007      	b.n	8002c36 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	7e5b      	ldrb	r3, [r3, #25]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d108      	bne.n	8002c50 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	e007      	b.n	8002c60 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	7e9b      	ldrb	r3, [r3, #26]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d108      	bne.n	8002c7a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0220 	orr.w	r2, r2, #32
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	e007      	b.n	8002c8a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0220 	bic.w	r2, r2, #32
 8002c88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	7edb      	ldrb	r3, [r3, #27]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d108      	bne.n	8002ca4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0210 	bic.w	r2, r2, #16
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	e007      	b.n	8002cb4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0210 	orr.w	r2, r2, #16
 8002cb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	7f1b      	ldrb	r3, [r3, #28]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d108      	bne.n	8002cce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0208 	orr.w	r2, r2, #8
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	e007      	b.n	8002cde <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0208 	bic.w	r2, r2, #8
 8002cdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	7f5b      	ldrb	r3, [r3, #29]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d108      	bne.n	8002cf8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0204 	orr.w	r2, r2, #4
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	e007      	b.n	8002d08 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0204 	bic.w	r2, r2, #4
 8002d06:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	ea42 0103 	orr.w	r1, r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	1e5a      	subs	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d5e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002d60:	7cfb      	ldrb	r3, [r7, #19]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d003      	beq.n	8002d6e <HAL_CAN_ConfigFilter+0x26>
 8002d66:	7cfb      	ldrb	r3, [r7, #19]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	f040 80c7 	bne.w	8002efc <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a69      	ldr	r2, [pc, #420]	; (8002f18 <HAL_CAN_ConfigFilter+0x1d0>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d001      	beq.n	8002d7c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002d78:	4b68      	ldr	r3, [pc, #416]	; (8002f1c <HAL_CAN_ConfigFilter+0x1d4>)
 8002d7a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d82:	f043 0201 	orr.w	r2, r3, #1
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	4a63      	ldr	r2, [pc, #396]	; (8002f1c <HAL_CAN_ConfigFilter+0x1d4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d111      	bne.n	8002db8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d9a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	021b      	lsls	r3, r3, #8
 8002db0:	431a      	orrs	r2, r3
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	f003 031f 	and.w	r3, r3, #31
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d123      	bne.n	8002e2a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	43db      	mvns	r3, r3
 8002dec:	401a      	ands	r2, r3
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e04:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	3248      	adds	r2, #72	; 0x48
 8002e0a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e1e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e20:	6979      	ldr	r1, [r7, #20]
 8002e22:	3348      	adds	r3, #72	; 0x48
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	440b      	add	r3, r1
 8002e28:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d122      	bne.n	8002e78 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e52:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	3248      	adds	r2, #72	; 0x48
 8002e58:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e6c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e6e:	6979      	ldr	r1, [r7, #20]
 8002e70:	3348      	adds	r3, #72	; 0x48
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	440b      	add	r3, r1
 8002e76:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d109      	bne.n	8002e94 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	401a      	ands	r2, r3
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002e92:	e007      	b.n	8002ea4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d109      	bne.n	8002ec0 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002ebe:	e007      	b.n	8002ed0 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d107      	bne.n	8002ee8 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002eee:	f023 0201 	bic.w	r2, r3, #1
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e006      	b.n	8002f0a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
  }
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	371c      	adds	r7, #28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40003400 	.word	0x40003400
 8002f1c:	40006400 	.word	0x40006400

08002f20 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d12e      	bne.n	8002f92 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f4c:	f7ff f966 	bl	800221c <HAL_GetTick>
 8002f50:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f52:	e012      	b.n	8002f7a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f54:	f7ff f962 	bl	800221c <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b0a      	cmp	r3, #10
 8002f60:	d90b      	bls.n	8002f7a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2205      	movs	r2, #5
 8002f72:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e012      	b.n	8002fa0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1e5      	bne.n	8002f54 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e006      	b.n	8002fa0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
  }
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
 8002fb4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fbc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002fc6:	7ffb      	ldrb	r3, [r7, #31]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d003      	beq.n	8002fd4 <HAL_CAN_AddTxMessage+0x2c>
 8002fcc:	7ffb      	ldrb	r3, [r7, #31]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	f040 80b8 	bne.w	8003144 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10a      	bne.n	8002ff4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d105      	bne.n	8002ff4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80a0 	beq.w	8003134 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	0e1b      	lsrs	r3, r3, #24
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d907      	bls.n	8003014 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e09e      	b.n	8003152 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003014:	2201      	movs	r2, #1
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	409a      	lsls	r2, r3
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10d      	bne.n	8003042 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003030:	68f9      	ldr	r1, [r7, #12]
 8003032:	6809      	ldr	r1, [r1, #0]
 8003034:	431a      	orrs	r2, r3
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	3318      	adds	r3, #24
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	440b      	add	r3, r1
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	e00f      	b.n	8003062 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800304c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003052:	68f9      	ldr	r1, [r7, #12]
 8003054:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003056:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	3318      	adds	r3, #24
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	440b      	add	r3, r1
 8003060:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6819      	ldr	r1, [r3, #0]
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	691a      	ldr	r2, [r3, #16]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	3318      	adds	r3, #24
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	440b      	add	r3, r1
 8003072:	3304      	adds	r3, #4
 8003074:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	7d1b      	ldrb	r3, [r3, #20]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d111      	bne.n	80030a2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	3318      	adds	r3, #24
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	4413      	add	r3, r2
 800308a:	3304      	adds	r3, #4
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	6811      	ldr	r1, [r2, #0]
 8003092:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	3318      	adds	r3, #24
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	440b      	add	r3, r1
 800309e:	3304      	adds	r3, #4
 80030a0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3307      	adds	r3, #7
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	061a      	lsls	r2, r3, #24
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3306      	adds	r3, #6
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	041b      	lsls	r3, r3, #16
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3305      	adds	r3, #5
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	021b      	lsls	r3, r3, #8
 80030bc:	4313      	orrs	r3, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	3204      	adds	r2, #4
 80030c2:	7812      	ldrb	r2, [r2, #0]
 80030c4:	4610      	mov	r0, r2
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	6811      	ldr	r1, [r2, #0]
 80030ca:	ea43 0200 	orr.w	r2, r3, r0
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	440b      	add	r3, r1
 80030d4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80030d8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3303      	adds	r3, #3
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	061a      	lsls	r2, r3, #24
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3302      	adds	r3, #2
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	041b      	lsls	r3, r3, #16
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3301      	adds	r3, #1
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	021b      	lsls	r3, r3, #8
 80030f4:	4313      	orrs	r3, r2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	7812      	ldrb	r2, [r2, #0]
 80030fa:	4610      	mov	r0, r2
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	6811      	ldr	r1, [r2, #0]
 8003100:	ea43 0200 	orr.w	r2, r3, r0
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	440b      	add	r3, r1
 800310a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800310e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	3318      	adds	r3, #24
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	4413      	add	r3, r2
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	6811      	ldr	r1, [r2, #0]
 8003122:	f043 0201 	orr.w	r2, r3, #1
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	3318      	adds	r3, #24
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	440b      	add	r3, r1
 800312e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003130:	2300      	movs	r3, #0
 8003132:	e00e      	b.n	8003152 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e006      	b.n	8003152 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
  }
}
 8003152:	4618      	mov	r0, r3
 8003154:	3724      	adds	r7, #36	; 0x24
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800315e:	b480      	push	{r7}
 8003160:	b087      	sub	sp, #28
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	607a      	str	r2, [r7, #4]
 800316a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003172:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003174:	7dfb      	ldrb	r3, [r7, #23]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d003      	beq.n	8003182 <HAL_CAN_GetRxMessage+0x24>
 800317a:	7dfb      	ldrb	r3, [r7, #23]
 800317c:	2b02      	cmp	r3, #2
 800317e:	f040 80f3 	bne.w	8003368 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10e      	bne.n	80031a6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d116      	bne.n	80031c4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e0e7      	b.n	8003376 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d107      	bne.n	80031c4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0d8      	b.n	8003376 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	331b      	adds	r3, #27
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	4413      	add	r3, r2
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0204 	and.w	r2, r3, #4
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10c      	bne.n	80031fc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	331b      	adds	r3, #27
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	4413      	add	r3, r2
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	0d5b      	lsrs	r3, r3, #21
 80031f2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	e00b      	b.n	8003214 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	331b      	adds	r3, #27
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	4413      	add	r3, r2
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	08db      	lsrs	r3, r3, #3
 800320c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	331b      	adds	r3, #27
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	4413      	add	r3, r2
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0202 	and.w	r2, r3, #2
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	331b      	adds	r3, #27
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	4413      	add	r3, r2
 8003236:	3304      	adds	r3, #4
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 020f 	and.w	r2, r3, #15
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	331b      	adds	r3, #27
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	4413      	add	r3, r2
 800324e:	3304      	adds	r3, #4
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	0a1b      	lsrs	r3, r3, #8
 8003254:	b2da      	uxtb	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	331b      	adds	r3, #27
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	4413      	add	r3, r2
 8003266:	3304      	adds	r3, #4
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	0c1b      	lsrs	r3, r3, #16
 800326c:	b29a      	uxth	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	4413      	add	r3, r2
 800327c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	b2da      	uxtb	r2, r3
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	4413      	add	r3, r2
 8003292:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	0a1a      	lsrs	r2, r3, #8
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	3301      	adds	r3, #1
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	0c1a      	lsrs	r2, r3, #16
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	3302      	adds	r3, #2
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	0e1a      	lsrs	r2, r3, #24
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	3303      	adds	r3, #3
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	4413      	add	r3, r2
 80032e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	3304      	adds	r3, #4
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	0a1a      	lsrs	r2, r3, #8
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	3305      	adds	r3, #5
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	4413      	add	r3, r2
 8003312:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	0c1a      	lsrs	r2, r3, #16
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	3306      	adds	r3, #6
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	4413      	add	r3, r2
 800332c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	0e1a      	lsrs	r2, r3, #24
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	3307      	adds	r3, #7
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d108      	bne.n	8003354 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0220 	orr.w	r2, r2, #32
 8003350:	60da      	str	r2, [r3, #12]
 8003352:	e007      	b.n	8003364 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0220 	orr.w	r2, r2, #32
 8003362:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	e006      	b.n	8003376 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
  }
}
 8003376:	4618      	mov	r0, r3
 8003378:	371c      	adds	r7, #28
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003382:	b480      	push	{r7}
 8003384:	b085      	sub	sp, #20
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003392:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d002      	beq.n	80033a0 <HAL_CAN_ActivateNotification+0x1e>
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d109      	bne.n	80033b4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6959      	ldr	r1, [r3, #20]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	e006      	b.n	80033c2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
  }
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b08a      	sub	sp, #40	; 0x28
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d07c      	beq.n	800350e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d023      	beq.n	8003466 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2201      	movs	r2, #1
 8003424:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f983 	bl	800373c <HAL_CAN_TxMailbox0CompleteCallback>
 8003436:	e016      	b.n	8003466 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	2b00      	cmp	r3, #0
 8003440:	d004      	beq.n	800344c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
 800344a:	e00c      	b.n	8003466 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b00      	cmp	r3, #0
 8003454:	d004      	beq.n	8003460 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
 800345e:	e002      	b.n	8003466 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f989 	bl	8003778 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d024      	beq.n	80034ba <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003478:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f963 	bl	8003750 <HAL_CAN_TxMailbox1CompleteCallback>
 800348a:	e016      	b.n	80034ba <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003492:	2b00      	cmp	r3, #0
 8003494:	d004      	beq.n	80034a0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
 800349e:	e00c      	b.n	80034ba <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d004      	beq.n	80034b4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
 80034b2:	e002      	b.n	80034ba <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f969 	bl	800378c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d024      	beq.n	800350e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80034cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f943 	bl	8003764 <HAL_CAN_TxMailbox2CompleteCallback>
 80034de:	e016      	b.n	800350e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d004      	beq.n	80034f4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
 80034f2:	e00c      	b.n	800350e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d004      	beq.n	8003508 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
 8003506:	e002      	b.n	800350e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f949 	bl	80037a0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00c      	beq.n	8003532 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f003 0310 	and.w	r3, r3, #16
 800351e:	2b00      	cmp	r3, #0
 8003520:	d007      	beq.n	8003532 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003528:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2210      	movs	r2, #16
 8003530:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00b      	beq.n	8003554 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d006      	beq.n	8003554 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2208      	movs	r2, #8
 800354c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f930 	bl	80037b4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d009      	beq.n	8003572 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7fe fc53 	bl	8001e18 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00c      	beq.n	8003596 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f003 0310 	and.w	r3, r3, #16
 8003582:	2b00      	cmp	r3, #0
 8003584:	d007      	beq.n	8003596 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800358c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2210      	movs	r2, #16
 8003594:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	f003 0320 	and.w	r3, r3, #32
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00b      	beq.n	80035b8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d006      	beq.n	80035b8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2208      	movs	r2, #8
 80035b0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f912 	bl	80037dc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	f003 0310 	and.w	r3, r3, #16
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d009      	beq.n	80035d6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f8f9 	bl	80037c8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00b      	beq.n	80035f8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d006      	beq.n	80035f8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2210      	movs	r2, #16
 80035f0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f8fc 	bl	80037f0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00b      	beq.n	800361a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d006      	beq.n	800361a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2208      	movs	r2, #8
 8003612:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f8f5 	bl	8003804 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d07b      	beq.n	800371c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b00      	cmp	r3, #0
 800362c:	d072      	beq.n	8003714 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003650:	2b00      	cmp	r3, #0
 8003652:	d008      	beq.n	8003666 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	f043 0302 	orr.w	r3, r3, #2
 8003664:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	f043 0304 	orr.w	r3, r3, #4
 8003680:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003688:	2b00      	cmp	r3, #0
 800368a:	d043      	beq.n	8003714 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003692:	2b00      	cmp	r3, #0
 8003694:	d03e      	beq.n	8003714 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800369c:	2b60      	cmp	r3, #96	; 0x60
 800369e:	d02b      	beq.n	80036f8 <HAL_CAN_IRQHandler+0x32a>
 80036a0:	2b60      	cmp	r3, #96	; 0x60
 80036a2:	d82e      	bhi.n	8003702 <HAL_CAN_IRQHandler+0x334>
 80036a4:	2b50      	cmp	r3, #80	; 0x50
 80036a6:	d022      	beq.n	80036ee <HAL_CAN_IRQHandler+0x320>
 80036a8:	2b50      	cmp	r3, #80	; 0x50
 80036aa:	d82a      	bhi.n	8003702 <HAL_CAN_IRQHandler+0x334>
 80036ac:	2b40      	cmp	r3, #64	; 0x40
 80036ae:	d019      	beq.n	80036e4 <HAL_CAN_IRQHandler+0x316>
 80036b0:	2b40      	cmp	r3, #64	; 0x40
 80036b2:	d826      	bhi.n	8003702 <HAL_CAN_IRQHandler+0x334>
 80036b4:	2b30      	cmp	r3, #48	; 0x30
 80036b6:	d010      	beq.n	80036da <HAL_CAN_IRQHandler+0x30c>
 80036b8:	2b30      	cmp	r3, #48	; 0x30
 80036ba:	d822      	bhi.n	8003702 <HAL_CAN_IRQHandler+0x334>
 80036bc:	2b10      	cmp	r3, #16
 80036be:	d002      	beq.n	80036c6 <HAL_CAN_IRQHandler+0x2f8>
 80036c0:	2b20      	cmp	r3, #32
 80036c2:	d005      	beq.n	80036d0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80036c4:	e01d      	b.n	8003702 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	f043 0308 	orr.w	r3, r3, #8
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036ce:	e019      	b.n	8003704 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	f043 0310 	orr.w	r3, r3, #16
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036d8:	e014      	b.n	8003704 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	f043 0320 	orr.w	r3, r3, #32
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036e2:	e00f      	b.n	8003704 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036ec:	e00a      	b.n	8003704 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036f6:	e005      	b.n	8003704 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003700:	e000      	b.n	8003704 <HAL_CAN_IRQHandler+0x336>
            break;
 8003702:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003712:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2204      	movs	r2, #4
 800371a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f872 	bl	8003818 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003734:	bf00      	nop
 8003736:	3728      	adds	r7, #40	; 0x28
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800383c:	4b0b      	ldr	r3, [pc, #44]	; (800386c <__NVIC_SetPriorityGrouping+0x40>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003848:	4013      	ands	r3, r2
 800384a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003854:	4b06      	ldr	r3, [pc, #24]	; (8003870 <__NVIC_SetPriorityGrouping+0x44>)
 8003856:	4313      	orrs	r3, r2
 8003858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800385a:	4a04      	ldr	r2, [pc, #16]	; (800386c <__NVIC_SetPriorityGrouping+0x40>)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	60d3      	str	r3, [r2, #12]
}
 8003860:	bf00      	nop
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	e000ed00 	.word	0xe000ed00
 8003870:	05fa0000 	.word	0x05fa0000

08003874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003878:	4b04      	ldr	r3, [pc, #16]	; (800388c <__NVIC_GetPriorityGrouping+0x18>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	0a1b      	lsrs	r3, r3, #8
 800387e:	f003 0307 	and.w	r3, r3, #7
}
 8003882:	4618      	mov	r0, r3
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	e000ed00 	.word	0xe000ed00

08003890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800389a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	db0b      	blt.n	80038ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	f003 021f 	and.w	r2, r3, #31
 80038a8:	4907      	ldr	r1, [pc, #28]	; (80038c8 <__NVIC_EnableIRQ+0x38>)
 80038aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	2001      	movs	r0, #1
 80038b2:	fa00 f202 	lsl.w	r2, r0, r2
 80038b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	e000e100 	.word	0xe000e100

080038cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	6039      	str	r1, [r7, #0]
 80038d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	db0a      	blt.n	80038f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	490c      	ldr	r1, [pc, #48]	; (8003918 <__NVIC_SetPriority+0x4c>)
 80038e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ea:	0112      	lsls	r2, r2, #4
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	440b      	add	r3, r1
 80038f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038f4:	e00a      	b.n	800390c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	4908      	ldr	r1, [pc, #32]	; (800391c <__NVIC_SetPriority+0x50>)
 80038fc:	79fb      	ldrb	r3, [r7, #7]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	3b04      	subs	r3, #4
 8003904:	0112      	lsls	r2, r2, #4
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	440b      	add	r3, r1
 800390a:	761a      	strb	r2, [r3, #24]
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	e000e100 	.word	0xe000e100
 800391c:	e000ed00 	.word	0xe000ed00

08003920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003920:	b480      	push	{r7}
 8003922:	b089      	sub	sp, #36	; 0x24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f1c3 0307 	rsb	r3, r3, #7
 800393a:	2b04      	cmp	r3, #4
 800393c:	bf28      	it	cs
 800393e:	2304      	movcs	r3, #4
 8003940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	3304      	adds	r3, #4
 8003946:	2b06      	cmp	r3, #6
 8003948:	d902      	bls.n	8003950 <NVIC_EncodePriority+0x30>
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	3b03      	subs	r3, #3
 800394e:	e000      	b.n	8003952 <NVIC_EncodePriority+0x32>
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003954:	f04f 32ff 	mov.w	r2, #4294967295
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43da      	mvns	r2, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	401a      	ands	r2, r3
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003968:	f04f 31ff 	mov.w	r1, #4294967295
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	fa01 f303 	lsl.w	r3, r1, r3
 8003972:	43d9      	mvns	r1, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003978:	4313      	orrs	r3, r2
         );
}
 800397a:	4618      	mov	r0, r3
 800397c:	3724      	adds	r7, #36	; 0x24
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
	...

08003988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3b01      	subs	r3, #1
 8003994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003998:	d301      	bcc.n	800399e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800399a:	2301      	movs	r3, #1
 800399c:	e00f      	b.n	80039be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800399e:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <SysTick_Config+0x40>)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039a6:	210f      	movs	r1, #15
 80039a8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ac:	f7ff ff8e 	bl	80038cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039b0:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <SysTick_Config+0x40>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039b6:	4b04      	ldr	r3, [pc, #16]	; (80039c8 <SysTick_Config+0x40>)
 80039b8:	2207      	movs	r2, #7
 80039ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	e000e010 	.word	0xe000e010

080039cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7ff ff29 	bl	800382c <__NVIC_SetPriorityGrouping>
}
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b086      	sub	sp, #24
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	4603      	mov	r3, r0
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	607a      	str	r2, [r7, #4]
 80039ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039f4:	f7ff ff3e 	bl	8003874 <__NVIC_GetPriorityGrouping>
 80039f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	6978      	ldr	r0, [r7, #20]
 8003a00:	f7ff ff8e 	bl	8003920 <NVIC_EncodePriority>
 8003a04:	4602      	mov	r2, r0
 8003a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff ff5d 	bl	80038cc <__NVIC_SetPriority>
}
 8003a12:	bf00      	nop
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	4603      	mov	r3, r0
 8003a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff ff31 	bl	8003890 <__NVIC_EnableIRQ>
}
 8003a2e:	bf00      	nop
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff ffa2 	bl	8003988 <SysTick_Config>
 8003a44:	4603      	mov	r3, r0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b089      	sub	sp, #36	; 0x24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003a62:	2300      	movs	r3, #0
 8003a64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003a66:	2300      	movs	r3, #0
 8003a68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61fb      	str	r3, [r7, #28]
 8003a6e:	e175      	b.n	8003d5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003a70:	2201      	movs	r2, #1
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	4013      	ands	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	f040 8164 	bne.w	8003d56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d00b      	beq.n	8003aae <HAL_GPIO_Init+0x5e>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d007      	beq.n	8003aae <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003aa2:	2b11      	cmp	r3, #17
 8003aa4:	d003      	beq.n	8003aae <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b12      	cmp	r3, #18
 8003aac:	d130      	bne.n	8003b10 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	2203      	movs	r2, #3
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	43db      	mvns	r3, r3
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4013      	ands	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	091b      	lsrs	r3, r3, #4
 8003afa:	f003 0201 	and.w	r2, r3, #1
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4013      	ands	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d003      	beq.n	8003b50 <HAL_GPIO_Init+0x100>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b12      	cmp	r3, #18
 8003b4e:	d123      	bne.n	8003b98 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	08da      	lsrs	r2, r3, #3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3208      	adds	r2, #8
 8003b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	220f      	movs	r2, #15
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4013      	ands	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	08da      	lsrs	r2, r3, #3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3208      	adds	r2, #8
 8003b92:	69b9      	ldr	r1, [r7, #24]
 8003b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	2203      	movs	r2, #3
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4013      	ands	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 0203 	and.w	r2, r3, #3
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80be 	beq.w	8003d56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bda:	4b66      	ldr	r3, [pc, #408]	; (8003d74 <HAL_GPIO_Init+0x324>)
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bde:	4a65      	ldr	r2, [pc, #404]	; (8003d74 <HAL_GPIO_Init+0x324>)
 8003be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003be4:	6453      	str	r3, [r2, #68]	; 0x44
 8003be6:	4b63      	ldr	r3, [pc, #396]	; (8003d74 <HAL_GPIO_Init+0x324>)
 8003be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003bf2:	4a61      	ldr	r2, [pc, #388]	; (8003d78 <HAL_GPIO_Init+0x328>)
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	089b      	lsrs	r3, r3, #2
 8003bf8:	3302      	adds	r3, #2
 8003bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	220f      	movs	r2, #15
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	4013      	ands	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a58      	ldr	r2, [pc, #352]	; (8003d7c <HAL_GPIO_Init+0x32c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d037      	beq.n	8003c8e <HAL_GPIO_Init+0x23e>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a57      	ldr	r2, [pc, #348]	; (8003d80 <HAL_GPIO_Init+0x330>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d031      	beq.n	8003c8a <HAL_GPIO_Init+0x23a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a56      	ldr	r2, [pc, #344]	; (8003d84 <HAL_GPIO_Init+0x334>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d02b      	beq.n	8003c86 <HAL_GPIO_Init+0x236>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a55      	ldr	r2, [pc, #340]	; (8003d88 <HAL_GPIO_Init+0x338>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d025      	beq.n	8003c82 <HAL_GPIO_Init+0x232>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a54      	ldr	r2, [pc, #336]	; (8003d8c <HAL_GPIO_Init+0x33c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d01f      	beq.n	8003c7e <HAL_GPIO_Init+0x22e>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a53      	ldr	r2, [pc, #332]	; (8003d90 <HAL_GPIO_Init+0x340>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d019      	beq.n	8003c7a <HAL_GPIO_Init+0x22a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a52      	ldr	r2, [pc, #328]	; (8003d94 <HAL_GPIO_Init+0x344>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d013      	beq.n	8003c76 <HAL_GPIO_Init+0x226>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a51      	ldr	r2, [pc, #324]	; (8003d98 <HAL_GPIO_Init+0x348>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00d      	beq.n	8003c72 <HAL_GPIO_Init+0x222>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a50      	ldr	r2, [pc, #320]	; (8003d9c <HAL_GPIO_Init+0x34c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d007      	beq.n	8003c6e <HAL_GPIO_Init+0x21e>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a4f      	ldr	r2, [pc, #316]	; (8003da0 <HAL_GPIO_Init+0x350>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d101      	bne.n	8003c6a <HAL_GPIO_Init+0x21a>
 8003c66:	2309      	movs	r3, #9
 8003c68:	e012      	b.n	8003c90 <HAL_GPIO_Init+0x240>
 8003c6a:	230a      	movs	r3, #10
 8003c6c:	e010      	b.n	8003c90 <HAL_GPIO_Init+0x240>
 8003c6e:	2308      	movs	r3, #8
 8003c70:	e00e      	b.n	8003c90 <HAL_GPIO_Init+0x240>
 8003c72:	2307      	movs	r3, #7
 8003c74:	e00c      	b.n	8003c90 <HAL_GPIO_Init+0x240>
 8003c76:	2306      	movs	r3, #6
 8003c78:	e00a      	b.n	8003c90 <HAL_GPIO_Init+0x240>
 8003c7a:	2305      	movs	r3, #5
 8003c7c:	e008      	b.n	8003c90 <HAL_GPIO_Init+0x240>
 8003c7e:	2304      	movs	r3, #4
 8003c80:	e006      	b.n	8003c90 <HAL_GPIO_Init+0x240>
 8003c82:	2303      	movs	r3, #3
 8003c84:	e004      	b.n	8003c90 <HAL_GPIO_Init+0x240>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e002      	b.n	8003c90 <HAL_GPIO_Init+0x240>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <HAL_GPIO_Init+0x240>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	f002 0203 	and.w	r2, r2, #3
 8003c96:	0092      	lsls	r2, r2, #2
 8003c98:	4093      	lsls	r3, r2
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ca0:	4935      	ldr	r1, [pc, #212]	; (8003d78 <HAL_GPIO_Init+0x328>)
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	089b      	lsrs	r3, r3, #2
 8003ca6:	3302      	adds	r3, #2
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cae:	4b3d      	ldr	r3, [pc, #244]	; (8003da4 <HAL_GPIO_Init+0x354>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cd2:	4a34      	ldr	r2, [pc, #208]	; (8003da4 <HAL_GPIO_Init+0x354>)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003cd8:	4b32      	ldr	r3, [pc, #200]	; (8003da4 <HAL_GPIO_Init+0x354>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cfc:	4a29      	ldr	r2, [pc, #164]	; (8003da4 <HAL_GPIO_Init+0x354>)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d02:	4b28      	ldr	r3, [pc, #160]	; (8003da4 <HAL_GPIO_Init+0x354>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d26:	4a1f      	ldr	r2, [pc, #124]	; (8003da4 <HAL_GPIO_Init+0x354>)
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d2c:	4b1d      	ldr	r3, [pc, #116]	; (8003da4 <HAL_GPIO_Init+0x354>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	43db      	mvns	r3, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d50:	4a14      	ldr	r2, [pc, #80]	; (8003da4 <HAL_GPIO_Init+0x354>)
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	61fb      	str	r3, [r7, #28]
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	2b0f      	cmp	r3, #15
 8003d60:	f67f ae86 	bls.w	8003a70 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop
 8003d68:	3724      	adds	r7, #36	; 0x24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800
 8003d78:	40013800 	.word	0x40013800
 8003d7c:	40020000 	.word	0x40020000
 8003d80:	40020400 	.word	0x40020400
 8003d84:	40020800 	.word	0x40020800
 8003d88:	40020c00 	.word	0x40020c00
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	40021400 	.word	0x40021400
 8003d94:	40021800 	.word	0x40021800
 8003d98:	40021c00 	.word	0x40021c00
 8003d9c:	40022000 	.word	0x40022000
 8003da0:	40022400 	.word	0x40022400
 8003da4:	40013c00 	.word	0x40013c00

08003da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	887b      	ldrh	r3, [r7, #2]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d002      	beq.n	8003dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
 8003dc4:	e001      	b.n	8003dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	807b      	strh	r3, [r7, #2]
 8003de4:	4613      	mov	r3, r2
 8003de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003de8:	787b      	ldrb	r3, [r7, #1]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dee:	887a      	ldrh	r2, [r7, #2]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003df4:	e003      	b.n	8003dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003df6:	887b      	ldrh	r3, [r7, #2]
 8003df8:	041a      	lsls	r2, r3, #16
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	619a      	str	r2, [r3, #24]
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
	...

08003e0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003e12:	2300      	movs	r3, #0
 8003e14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e16:	4b23      	ldr	r3, [pc, #140]	; (8003ea4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	4a22      	ldr	r2, [pc, #136]	; (8003ea4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e20:	6413      	str	r3, [r2, #64]	; 0x40
 8003e22:	4b20      	ldr	r3, [pc, #128]	; (8003ea4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e2e:	4b1e      	ldr	r3, [pc, #120]	; (8003ea8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a1d      	ldr	r2, [pc, #116]	; (8003ea8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e38:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e3a:	f7fe f9ef 	bl	800221c <HAL_GetTick>
 8003e3e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e40:	e009      	b.n	8003e56 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e42:	f7fe f9eb 	bl	800221c <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e50:	d901      	bls.n	8003e56 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e022      	b.n	8003e9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e56:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e62:	d1ee      	bne.n	8003e42 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e64:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a0f      	ldr	r2, [pc, #60]	; (8003ea8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e6e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e70:	f7fe f9d4 	bl	800221c <HAL_GetTick>
 8003e74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e76:	e009      	b.n	8003e8c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e78:	f7fe f9d0 	bl	800221c <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e86:	d901      	bls.n	8003e8c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e007      	b.n	8003e9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e8c:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e98:	d1ee      	bne.n	8003e78 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	40007000 	.word	0x40007000

08003eac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e29b      	b.n	80043fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 8087 	beq.w	8003fde <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ed0:	4b96      	ldr	r3, [pc, #600]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 030c 	and.w	r3, r3, #12
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d00c      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003edc:	4b93      	ldr	r3, [pc, #588]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 030c 	and.w	r3, r3, #12
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d112      	bne.n	8003f0e <HAL_RCC_OscConfig+0x62>
 8003ee8:	4b90      	ldr	r3, [pc, #576]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ef4:	d10b      	bne.n	8003f0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef6:	4b8d      	ldr	r3, [pc, #564]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d06c      	beq.n	8003fdc <HAL_RCC_OscConfig+0x130>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d168      	bne.n	8003fdc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e275      	b.n	80043fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f16:	d106      	bne.n	8003f26 <HAL_RCC_OscConfig+0x7a>
 8003f18:	4b84      	ldr	r3, [pc, #528]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a83      	ldr	r2, [pc, #524]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8003f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	e02e      	b.n	8003f84 <HAL_RCC_OscConfig+0xd8>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10c      	bne.n	8003f48 <HAL_RCC_OscConfig+0x9c>
 8003f2e:	4b7f      	ldr	r3, [pc, #508]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a7e      	ldr	r2, [pc, #504]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8003f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	4b7c      	ldr	r3, [pc, #496]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a7b      	ldr	r2, [pc, #492]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8003f40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	e01d      	b.n	8003f84 <HAL_RCC_OscConfig+0xd8>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f50:	d10c      	bne.n	8003f6c <HAL_RCC_OscConfig+0xc0>
 8003f52:	4b76      	ldr	r3, [pc, #472]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a75      	ldr	r2, [pc, #468]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8003f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	4b73      	ldr	r3, [pc, #460]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a72      	ldr	r2, [pc, #456]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8003f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	e00b      	b.n	8003f84 <HAL_RCC_OscConfig+0xd8>
 8003f6c:	4b6f      	ldr	r3, [pc, #444]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a6e      	ldr	r2, [pc, #440]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8003f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f76:	6013      	str	r3, [r2, #0]
 8003f78:	4b6c      	ldr	r3, [pc, #432]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a6b      	ldr	r2, [pc, #428]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8003f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d013      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8c:	f7fe f946 	bl	800221c <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f94:	f7fe f942 	bl	800221c <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b64      	cmp	r3, #100	; 0x64
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e229      	b.n	80043fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa6:	4b61      	ldr	r3, [pc, #388]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCC_OscConfig+0xe8>
 8003fb2:	e014      	b.n	8003fde <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb4:	f7fe f932 	bl	800221c <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fbc:	f7fe f92e 	bl	800221c <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	; 0x64
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e215      	b.n	80043fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fce:	4b57      	ldr	r3, [pc, #348]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0x110>
 8003fda:	e000      	b.n	8003fde <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d069      	beq.n	80040be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fea:	4b50      	ldr	r3, [pc, #320]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00b      	beq.n	800400e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ff6:	4b4d      	ldr	r3, [pc, #308]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d11c      	bne.n	800403c <HAL_RCC_OscConfig+0x190>
 8004002:	4b4a      	ldr	r3, [pc, #296]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d116      	bne.n	800403c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800400e:	4b47      	ldr	r3, [pc, #284]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d005      	beq.n	8004026 <HAL_RCC_OscConfig+0x17a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d001      	beq.n	8004026 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e1e9      	b.n	80043fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004026:	4b41      	ldr	r3, [pc, #260]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	493d      	ldr	r1, [pc, #244]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8004036:	4313      	orrs	r3, r2
 8004038:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800403a:	e040      	b.n	80040be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d023      	beq.n	800408c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004044:	4b39      	ldr	r3, [pc, #228]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a38      	ldr	r2, [pc, #224]	; (800412c <HAL_RCC_OscConfig+0x280>)
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004050:	f7fe f8e4 	bl	800221c <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004058:	f7fe f8e0 	bl	800221c <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e1c7      	b.n	80043fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800406a:	4b30      	ldr	r3, [pc, #192]	; (800412c <HAL_RCC_OscConfig+0x280>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0f0      	beq.n	8004058 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004076:	4b2d      	ldr	r3, [pc, #180]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	4929      	ldr	r1, [pc, #164]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8004086:	4313      	orrs	r3, r2
 8004088:	600b      	str	r3, [r1, #0]
 800408a:	e018      	b.n	80040be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800408c:	4b27      	ldr	r3, [pc, #156]	; (800412c <HAL_RCC_OscConfig+0x280>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a26      	ldr	r2, [pc, #152]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8004092:	f023 0301 	bic.w	r3, r3, #1
 8004096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004098:	f7fe f8c0 	bl	800221c <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040a0:	f7fe f8bc 	bl	800221c <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e1a3      	b.n	80043fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040b2:	4b1e      	ldr	r3, [pc, #120]	; (800412c <HAL_RCC_OscConfig+0x280>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f0      	bne.n	80040a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d038      	beq.n	800413c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d019      	beq.n	8004106 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040d2:	4b16      	ldr	r3, [pc, #88]	; (800412c <HAL_RCC_OscConfig+0x280>)
 80040d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d6:	4a15      	ldr	r2, [pc, #84]	; (800412c <HAL_RCC_OscConfig+0x280>)
 80040d8:	f043 0301 	orr.w	r3, r3, #1
 80040dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040de:	f7fe f89d 	bl	800221c <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040e6:	f7fe f899 	bl	800221c <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e180      	b.n	80043fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040f8:	4b0c      	ldr	r3, [pc, #48]	; (800412c <HAL_RCC_OscConfig+0x280>)
 80040fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f0      	beq.n	80040e6 <HAL_RCC_OscConfig+0x23a>
 8004104:	e01a      	b.n	800413c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004106:	4b09      	ldr	r3, [pc, #36]	; (800412c <HAL_RCC_OscConfig+0x280>)
 8004108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800410a:	4a08      	ldr	r2, [pc, #32]	; (800412c <HAL_RCC_OscConfig+0x280>)
 800410c:	f023 0301 	bic.w	r3, r3, #1
 8004110:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004112:	f7fe f883 	bl	800221c <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004118:	e00a      	b.n	8004130 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800411a:	f7fe f87f 	bl	800221c <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d903      	bls.n	8004130 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e166      	b.n	80043fa <HAL_RCC_OscConfig+0x54e>
 800412c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004130:	4b92      	ldr	r3, [pc, #584]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 8004132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1ee      	bne.n	800411a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80a4 	beq.w	8004292 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800414a:	4b8c      	ldr	r3, [pc, #560]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10d      	bne.n	8004172 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004156:	4b89      	ldr	r3, [pc, #548]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	4a88      	ldr	r2, [pc, #544]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 800415c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004160:	6413      	str	r3, [r2, #64]	; 0x40
 8004162:	4b86      	ldr	r3, [pc, #536]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416a:	60bb      	str	r3, [r7, #8]
 800416c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800416e:	2301      	movs	r3, #1
 8004170:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004172:	4b83      	ldr	r3, [pc, #524]	; (8004380 <HAL_RCC_OscConfig+0x4d4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417a:	2b00      	cmp	r3, #0
 800417c:	d118      	bne.n	80041b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800417e:	4b80      	ldr	r3, [pc, #512]	; (8004380 <HAL_RCC_OscConfig+0x4d4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a7f      	ldr	r2, [pc, #508]	; (8004380 <HAL_RCC_OscConfig+0x4d4>)
 8004184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800418a:	f7fe f847 	bl	800221c <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004192:	f7fe f843 	bl	800221c <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b64      	cmp	r3, #100	; 0x64
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e12a      	b.n	80043fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041a4:	4b76      	ldr	r3, [pc, #472]	; (8004380 <HAL_RCC_OscConfig+0x4d4>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d106      	bne.n	80041c6 <HAL_RCC_OscConfig+0x31a>
 80041b8:	4b70      	ldr	r3, [pc, #448]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 80041ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041bc:	4a6f      	ldr	r2, [pc, #444]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	6713      	str	r3, [r2, #112]	; 0x70
 80041c4:	e02d      	b.n	8004222 <HAL_RCC_OscConfig+0x376>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10c      	bne.n	80041e8 <HAL_RCC_OscConfig+0x33c>
 80041ce:	4b6b      	ldr	r3, [pc, #428]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 80041d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d2:	4a6a      	ldr	r2, [pc, #424]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 80041d4:	f023 0301 	bic.w	r3, r3, #1
 80041d8:	6713      	str	r3, [r2, #112]	; 0x70
 80041da:	4b68      	ldr	r3, [pc, #416]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 80041dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041de:	4a67      	ldr	r2, [pc, #412]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 80041e0:	f023 0304 	bic.w	r3, r3, #4
 80041e4:	6713      	str	r3, [r2, #112]	; 0x70
 80041e6:	e01c      	b.n	8004222 <HAL_RCC_OscConfig+0x376>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	2b05      	cmp	r3, #5
 80041ee:	d10c      	bne.n	800420a <HAL_RCC_OscConfig+0x35e>
 80041f0:	4b62      	ldr	r3, [pc, #392]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f4:	4a61      	ldr	r2, [pc, #388]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 80041f6:	f043 0304 	orr.w	r3, r3, #4
 80041fa:	6713      	str	r3, [r2, #112]	; 0x70
 80041fc:	4b5f      	ldr	r3, [pc, #380]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 80041fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004200:	4a5e      	ldr	r2, [pc, #376]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 8004202:	f043 0301 	orr.w	r3, r3, #1
 8004206:	6713      	str	r3, [r2, #112]	; 0x70
 8004208:	e00b      	b.n	8004222 <HAL_RCC_OscConfig+0x376>
 800420a:	4b5c      	ldr	r3, [pc, #368]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 800420c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420e:	4a5b      	ldr	r2, [pc, #364]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 8004210:	f023 0301 	bic.w	r3, r3, #1
 8004214:	6713      	str	r3, [r2, #112]	; 0x70
 8004216:	4b59      	ldr	r3, [pc, #356]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 8004218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421a:	4a58      	ldr	r2, [pc, #352]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 800421c:	f023 0304 	bic.w	r3, r3, #4
 8004220:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d015      	beq.n	8004256 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422a:	f7fd fff7 	bl	800221c <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004230:	e00a      	b.n	8004248 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004232:	f7fd fff3 	bl	800221c <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004240:	4293      	cmp	r3, r2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e0d8      	b.n	80043fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004248:	4b4c      	ldr	r3, [pc, #304]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 800424a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0ee      	beq.n	8004232 <HAL_RCC_OscConfig+0x386>
 8004254:	e014      	b.n	8004280 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004256:	f7fd ffe1 	bl	800221c <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800425c:	e00a      	b.n	8004274 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800425e:	f7fd ffdd 	bl	800221c <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	f241 3288 	movw	r2, #5000	; 0x1388
 800426c:	4293      	cmp	r3, r2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e0c2      	b.n	80043fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004274:	4b41      	ldr	r3, [pc, #260]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 8004276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1ee      	bne.n	800425e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004280:	7dfb      	ldrb	r3, [r7, #23]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d105      	bne.n	8004292 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004286:	4b3d      	ldr	r3, [pc, #244]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	4a3c      	ldr	r2, [pc, #240]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 800428c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004290:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 80ae 	beq.w	80043f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800429c:	4b37      	ldr	r3, [pc, #220]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 030c 	and.w	r3, r3, #12
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d06d      	beq.n	8004384 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d14b      	bne.n	8004348 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b0:	4b32      	ldr	r3, [pc, #200]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a31      	ldr	r2, [pc, #196]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 80042b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042bc:	f7fd ffae 	bl	800221c <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c4:	f7fd ffaa 	bl	800221c <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e091      	b.n	80043fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d6:	4b29      	ldr	r3, [pc, #164]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f0      	bne.n	80042c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69da      	ldr	r2, [r3, #28]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	019b      	lsls	r3, r3, #6
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f8:	085b      	lsrs	r3, r3, #1
 80042fa:	3b01      	subs	r3, #1
 80042fc:	041b      	lsls	r3, r3, #16
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	061b      	lsls	r3, r3, #24
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430c:	071b      	lsls	r3, r3, #28
 800430e:	491b      	ldr	r1, [pc, #108]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 8004310:	4313      	orrs	r3, r2
 8004312:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004314:	4b19      	ldr	r3, [pc, #100]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a18      	ldr	r2, [pc, #96]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 800431a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800431e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004320:	f7fd ff7c 	bl	800221c <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004328:	f7fd ff78 	bl	800221c <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e05f      	b.n	80043fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800433a:	4b10      	ldr	r3, [pc, #64]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0f0      	beq.n	8004328 <HAL_RCC_OscConfig+0x47c>
 8004346:	e057      	b.n	80043f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004348:	4b0c      	ldr	r3, [pc, #48]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a0b      	ldr	r2, [pc, #44]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 800434e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004354:	f7fd ff62 	bl	800221c <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800435c:	f7fd ff5e 	bl	800221c <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e045      	b.n	80043fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436e:	4b03      	ldr	r3, [pc, #12]	; (800437c <HAL_RCC_OscConfig+0x4d0>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f0      	bne.n	800435c <HAL_RCC_OscConfig+0x4b0>
 800437a:	e03d      	b.n	80043f8 <HAL_RCC_OscConfig+0x54c>
 800437c:	40023800 	.word	0x40023800
 8004380:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004384:	4b1f      	ldr	r3, [pc, #124]	; (8004404 <HAL_RCC_OscConfig+0x558>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d030      	beq.n	80043f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800439c:	429a      	cmp	r2, r3
 800439e:	d129      	bne.n	80043f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d122      	bne.n	80043f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043b4:	4013      	ands	r3, r2
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043bc:	4293      	cmp	r3, r2
 80043be:	d119      	bne.n	80043f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ca:	085b      	lsrs	r3, r3, #1
 80043cc:	3b01      	subs	r3, #1
 80043ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d10f      	bne.n	80043f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d107      	bne.n	80043f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d001      	beq.n	80043f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e000      	b.n	80043fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	40023800 	.word	0x40023800

08004408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0d0      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004420:	4b6a      	ldr	r3, [pc, #424]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 030f 	and.w	r3, r3, #15
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d910      	bls.n	8004450 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442e:	4b67      	ldr	r3, [pc, #412]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f023 020f 	bic.w	r2, r3, #15
 8004436:	4965      	ldr	r1, [pc, #404]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	4313      	orrs	r3, r2
 800443c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800443e:	4b63      	ldr	r3, [pc, #396]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	429a      	cmp	r2, r3
 800444a:	d001      	beq.n	8004450 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e0b8      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d020      	beq.n	800449e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004468:	4b59      	ldr	r3, [pc, #356]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	4a58      	ldr	r2, [pc, #352]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 800446e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004472:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0308 	and.w	r3, r3, #8
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004480:	4b53      	ldr	r3, [pc, #332]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	4a52      	ldr	r2, [pc, #328]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004486:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800448a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800448c:	4b50      	ldr	r3, [pc, #320]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	494d      	ldr	r1, [pc, #308]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 800449a:	4313      	orrs	r3, r2
 800449c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d040      	beq.n	800452c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d107      	bne.n	80044c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b2:	4b47      	ldr	r3, [pc, #284]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d115      	bne.n	80044ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e07f      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d107      	bne.n	80044da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ca:	4b41      	ldr	r3, [pc, #260]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e073      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044da:	4b3d      	ldr	r3, [pc, #244]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e06b      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ea:	4b39      	ldr	r3, [pc, #228]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f023 0203 	bic.w	r2, r3, #3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	4936      	ldr	r1, [pc, #216]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044fc:	f7fd fe8e 	bl	800221c <HAL_GetTick>
 8004500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004502:	e00a      	b.n	800451a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004504:	f7fd fe8a 	bl	800221c <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004512:	4293      	cmp	r3, r2
 8004514:	d901      	bls.n	800451a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e053      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800451a:	4b2d      	ldr	r3, [pc, #180]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 020c 	and.w	r2, r3, #12
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	429a      	cmp	r2, r3
 800452a:	d1eb      	bne.n	8004504 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800452c:	4b27      	ldr	r3, [pc, #156]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 030f 	and.w	r3, r3, #15
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	429a      	cmp	r2, r3
 8004538:	d210      	bcs.n	800455c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453a:	4b24      	ldr	r3, [pc, #144]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f023 020f 	bic.w	r2, r3, #15
 8004542:	4922      	ldr	r1, [pc, #136]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	4313      	orrs	r3, r2
 8004548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800454a:	4b20      	ldr	r3, [pc, #128]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d001      	beq.n	800455c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e032      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d008      	beq.n	800457a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004568:	4b19      	ldr	r3, [pc, #100]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	4916      	ldr	r1, [pc, #88]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004576:	4313      	orrs	r3, r2
 8004578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b00      	cmp	r3, #0
 8004584:	d009      	beq.n	800459a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004586:	4b12      	ldr	r3, [pc, #72]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	490e      	ldr	r1, [pc, #56]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004596:	4313      	orrs	r3, r2
 8004598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800459a:	f000 f821 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 800459e:	4602      	mov	r2, r0
 80045a0:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	091b      	lsrs	r3, r3, #4
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	490a      	ldr	r1, [pc, #40]	; (80045d4 <HAL_RCC_ClockConfig+0x1cc>)
 80045ac:	5ccb      	ldrb	r3, [r1, r3]
 80045ae:	fa22 f303 	lsr.w	r3, r2, r3
 80045b2:	4a09      	ldr	r2, [pc, #36]	; (80045d8 <HAL_RCC_ClockConfig+0x1d0>)
 80045b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045b6:	4b09      	ldr	r3, [pc, #36]	; (80045dc <HAL_RCC_ClockConfig+0x1d4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fd fdea 	bl	8002194 <HAL_InitTick>

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40023c00 	.word	0x40023c00
 80045d0:	40023800 	.word	0x40023800
 80045d4:	08006560 	.word	0x08006560
 80045d8:	20000000 	.word	0x20000000
 80045dc:	20000004 	.word	0x20000004

080045e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e0:	b5b0      	push	{r4, r5, r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80045e6:	2100      	movs	r1, #0
 80045e8:	6079      	str	r1, [r7, #4]
 80045ea:	2100      	movs	r1, #0
 80045ec:	60f9      	str	r1, [r7, #12]
 80045ee:	2100      	movs	r1, #0
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80045f2:	2100      	movs	r1, #0
 80045f4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045f6:	4952      	ldr	r1, [pc, #328]	; (8004740 <HAL_RCC_GetSysClockFreq+0x160>)
 80045f8:	6889      	ldr	r1, [r1, #8]
 80045fa:	f001 010c 	and.w	r1, r1, #12
 80045fe:	2908      	cmp	r1, #8
 8004600:	d00d      	beq.n	800461e <HAL_RCC_GetSysClockFreq+0x3e>
 8004602:	2908      	cmp	r1, #8
 8004604:	f200 8094 	bhi.w	8004730 <HAL_RCC_GetSysClockFreq+0x150>
 8004608:	2900      	cmp	r1, #0
 800460a:	d002      	beq.n	8004612 <HAL_RCC_GetSysClockFreq+0x32>
 800460c:	2904      	cmp	r1, #4
 800460e:	d003      	beq.n	8004618 <HAL_RCC_GetSysClockFreq+0x38>
 8004610:	e08e      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004612:	4b4c      	ldr	r3, [pc, #304]	; (8004744 <HAL_RCC_GetSysClockFreq+0x164>)
 8004614:	60bb      	str	r3, [r7, #8]
      break;
 8004616:	e08e      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004618:	4b4b      	ldr	r3, [pc, #300]	; (8004748 <HAL_RCC_GetSysClockFreq+0x168>)
 800461a:	60bb      	str	r3, [r7, #8]
      break;
 800461c:	e08b      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800461e:	4948      	ldr	r1, [pc, #288]	; (8004740 <HAL_RCC_GetSysClockFreq+0x160>)
 8004620:	6849      	ldr	r1, [r1, #4]
 8004622:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004626:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004628:	4945      	ldr	r1, [pc, #276]	; (8004740 <HAL_RCC_GetSysClockFreq+0x160>)
 800462a:	6849      	ldr	r1, [r1, #4]
 800462c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004630:	2900      	cmp	r1, #0
 8004632:	d024      	beq.n	800467e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004634:	4942      	ldr	r1, [pc, #264]	; (8004740 <HAL_RCC_GetSysClockFreq+0x160>)
 8004636:	6849      	ldr	r1, [r1, #4]
 8004638:	0989      	lsrs	r1, r1, #6
 800463a:	4608      	mov	r0, r1
 800463c:	f04f 0100 	mov.w	r1, #0
 8004640:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004644:	f04f 0500 	mov.w	r5, #0
 8004648:	ea00 0204 	and.w	r2, r0, r4
 800464c:	ea01 0305 	and.w	r3, r1, r5
 8004650:	493d      	ldr	r1, [pc, #244]	; (8004748 <HAL_RCC_GetSysClockFreq+0x168>)
 8004652:	fb01 f003 	mul.w	r0, r1, r3
 8004656:	2100      	movs	r1, #0
 8004658:	fb01 f102 	mul.w	r1, r1, r2
 800465c:	1844      	adds	r4, r0, r1
 800465e:	493a      	ldr	r1, [pc, #232]	; (8004748 <HAL_RCC_GetSysClockFreq+0x168>)
 8004660:	fba2 0101 	umull	r0, r1, r2, r1
 8004664:	1863      	adds	r3, r4, r1
 8004666:	4619      	mov	r1, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	461a      	mov	r2, r3
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	f7fb fdea 	bl	8000248 <__aeabi_uldivmod>
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	4613      	mov	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	e04a      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800467e:	4b30      	ldr	r3, [pc, #192]	; (8004740 <HAL_RCC_GetSysClockFreq+0x160>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	099b      	lsrs	r3, r3, #6
 8004684:	461a      	mov	r2, r3
 8004686:	f04f 0300 	mov.w	r3, #0
 800468a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800468e:	f04f 0100 	mov.w	r1, #0
 8004692:	ea02 0400 	and.w	r4, r2, r0
 8004696:	ea03 0501 	and.w	r5, r3, r1
 800469a:	4620      	mov	r0, r4
 800469c:	4629      	mov	r1, r5
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	f04f 0300 	mov.w	r3, #0
 80046a6:	014b      	lsls	r3, r1, #5
 80046a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80046ac:	0142      	lsls	r2, r0, #5
 80046ae:	4610      	mov	r0, r2
 80046b0:	4619      	mov	r1, r3
 80046b2:	1b00      	subs	r0, r0, r4
 80046b4:	eb61 0105 	sbc.w	r1, r1, r5
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	018b      	lsls	r3, r1, #6
 80046c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80046c6:	0182      	lsls	r2, r0, #6
 80046c8:	1a12      	subs	r2, r2, r0
 80046ca:	eb63 0301 	sbc.w	r3, r3, r1
 80046ce:	f04f 0000 	mov.w	r0, #0
 80046d2:	f04f 0100 	mov.w	r1, #0
 80046d6:	00d9      	lsls	r1, r3, #3
 80046d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046dc:	00d0      	lsls	r0, r2, #3
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	1912      	adds	r2, r2, r4
 80046e4:	eb45 0303 	adc.w	r3, r5, r3
 80046e8:	f04f 0000 	mov.w	r0, #0
 80046ec:	f04f 0100 	mov.w	r1, #0
 80046f0:	0299      	lsls	r1, r3, #10
 80046f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80046f6:	0290      	lsls	r0, r2, #10
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	4610      	mov	r0, r2
 80046fe:	4619      	mov	r1, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	461a      	mov	r2, r3
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	f7fb fd9e 	bl	8000248 <__aeabi_uldivmod>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4613      	mov	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004714:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <HAL_RCC_GetSysClockFreq+0x160>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	0c1b      	lsrs	r3, r3, #16
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	3301      	adds	r3, #1
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	fbb2 f3f3 	udiv	r3, r2, r3
 800472c:	60bb      	str	r3, [r7, #8]
      break;
 800472e:	e002      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004730:	4b04      	ldr	r3, [pc, #16]	; (8004744 <HAL_RCC_GetSysClockFreq+0x164>)
 8004732:	60bb      	str	r3, [r7, #8]
      break;
 8004734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004736:	68bb      	ldr	r3, [r7, #8]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bdb0      	pop	{r4, r5, r7, pc}
 8004740:	40023800 	.word	0x40023800
 8004744:	00f42400 	.word	0x00f42400
 8004748:	017d7840 	.word	0x017d7840

0800474c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004750:	4b03      	ldr	r3, [pc, #12]	; (8004760 <HAL_RCC_GetHCLKFreq+0x14>)
 8004752:	681b      	ldr	r3, [r3, #0]
}
 8004754:	4618      	mov	r0, r3
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	20000000 	.word	0x20000000

08004764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004768:	f7ff fff0 	bl	800474c <HAL_RCC_GetHCLKFreq>
 800476c:	4602      	mov	r2, r0
 800476e:	4b05      	ldr	r3, [pc, #20]	; (8004784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	0a9b      	lsrs	r3, r3, #10
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	4903      	ldr	r1, [pc, #12]	; (8004788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800477a:	5ccb      	ldrb	r3, [r1, r3]
 800477c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004780:	4618      	mov	r0, r3
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40023800 	.word	0x40023800
 8004788:	08006570 	.word	0x08006570

0800478c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004790:	f7ff ffdc 	bl	800474c <HAL_RCC_GetHCLKFreq>
 8004794:	4602      	mov	r2, r0
 8004796:	4b05      	ldr	r3, [pc, #20]	; (80047ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	0b5b      	lsrs	r3, r3, #13
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	4903      	ldr	r1, [pc, #12]	; (80047b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047a2:	5ccb      	ldrb	r3, [r1, r3]
 80047a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40023800 	.word	0x40023800
 80047b0:	08006570 	.word	0x08006570

080047b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80047c0:	2300      	movs	r3, #0
 80047c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80047c8:	2300      	movs	r3, #0
 80047ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80047cc:	2300      	movs	r3, #0
 80047ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d012      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047dc:	4b69      	ldr	r3, [pc, #420]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	4a68      	ldr	r2, [pc, #416]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80047e6:	6093      	str	r3, [r2, #8]
 80047e8:	4b66      	ldr	r3, [pc, #408]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f0:	4964      	ldr	r1, [pc, #400]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80047fe:	2301      	movs	r3, #1
 8004800:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d017      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800480e:	4b5d      	ldr	r3, [pc, #372]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004814:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481c:	4959      	ldr	r1, [pc, #356]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004828:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800482c:	d101      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800482e:	2301      	movs	r3, #1
 8004830:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800483a:	2301      	movs	r3, #1
 800483c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d017      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800484a:	4b4e      	ldr	r3, [pc, #312]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800484c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004850:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	494a      	ldr	r1, [pc, #296]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004864:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004868:	d101      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800486a:	2301      	movs	r3, #1
 800486c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004876:	2301      	movs	r3, #1
 8004878:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004886:	2301      	movs	r3, #1
 8004888:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 808b 	beq.w	80049ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004898:	4b3a      	ldr	r3, [pc, #232]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	4a39      	ldr	r2, [pc, #228]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800489e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a2:	6413      	str	r3, [r2, #64]	; 0x40
 80048a4:	4b37      	ldr	r3, [pc, #220]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ac:	60bb      	str	r3, [r7, #8]
 80048ae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80048b0:	4b35      	ldr	r3, [pc, #212]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a34      	ldr	r2, [pc, #208]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048bc:	f7fd fcae 	bl	800221c <HAL_GetTick>
 80048c0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c4:	f7fd fcaa 	bl	800221c <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b64      	cmp	r3, #100	; 0x64
 80048d0:	d901      	bls.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e38f      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80048d6:	4b2c      	ldr	r3, [pc, #176]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0f0      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048e2:	4b28      	ldr	r3, [pc, #160]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d035      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d02e      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004900:	4b20      	ldr	r3, [pc, #128]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004908:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800490a:	4b1e      	ldr	r3, [pc, #120]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800490c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490e:	4a1d      	ldr	r2, [pc, #116]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004914:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004916:	4b1b      	ldr	r3, [pc, #108]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491a:	4a1a      	ldr	r2, [pc, #104]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800491c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004920:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004922:	4a18      	ldr	r2, [pc, #96]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004928:	4b16      	ldr	r3, [pc, #88]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800492a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b01      	cmp	r3, #1
 8004932:	d114      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004934:	f7fd fc72 	bl	800221c <HAL_GetTick>
 8004938:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800493a:	e00a      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800493c:	f7fd fc6e 	bl	800221c <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	f241 3288 	movw	r2, #5000	; 0x1388
 800494a:	4293      	cmp	r3, r2
 800494c:	d901      	bls.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e351      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004952:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0ee      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004966:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800496a:	d111      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004978:	4b04      	ldr	r3, [pc, #16]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800497a:	400b      	ands	r3, r1
 800497c:	4901      	ldr	r1, [pc, #4]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497e:	4313      	orrs	r3, r2
 8004980:	608b      	str	r3, [r1, #8]
 8004982:	e00b      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004984:	40023800 	.word	0x40023800
 8004988:	40007000 	.word	0x40007000
 800498c:	0ffffcff 	.word	0x0ffffcff
 8004990:	4bb3      	ldr	r3, [pc, #716]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	4ab2      	ldr	r2, [pc, #712]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004996:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800499a:	6093      	str	r3, [r2, #8]
 800499c:	4bb0      	ldr	r3, [pc, #704]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800499e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049a8:	49ad      	ldr	r1, [pc, #692]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0310 	and.w	r3, r3, #16
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d010      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049ba:	4ba9      	ldr	r3, [pc, #676]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049c0:	4aa7      	ldr	r2, [pc, #668]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80049ca:	4ba5      	ldr	r3, [pc, #660]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d4:	49a2      	ldr	r1, [pc, #648]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049e8:	4b9d      	ldr	r3, [pc, #628]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049f6:	499a      	ldr	r1, [pc, #616]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a0a:	4b95      	ldr	r3, [pc, #596]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a18:	4991      	ldr	r1, [pc, #580]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a2c:	4b8c      	ldr	r3, [pc, #560]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a3a:	4989      	ldr	r1, [pc, #548]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a4e:	4b84      	ldr	r3, [pc, #528]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5c:	4980      	ldr	r1, [pc, #512]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a70:	4b7b      	ldr	r3, [pc, #492]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a76:	f023 0203 	bic.w	r2, r3, #3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7e:	4978      	ldr	r1, [pc, #480]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a92:	4b73      	ldr	r3, [pc, #460]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a98:	f023 020c 	bic.w	r2, r3, #12
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aa0:	496f      	ldr	r1, [pc, #444]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00a      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ab4:	4b6a      	ldr	r3, [pc, #424]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac2:	4967      	ldr	r1, [pc, #412]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ad6:	4b62      	ldr	r3, [pc, #392]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004adc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae4:	495e      	ldr	r1, [pc, #376]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00a      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004af8:	4b59      	ldr	r3, [pc, #356]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b06:	4956      	ldr	r1, [pc, #344]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004b1a:	4b51      	ldr	r3, [pc, #324]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b20:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b28:	494d      	ldr	r1, [pc, #308]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00a      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004b3c:	4b48      	ldr	r3, [pc, #288]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b4a:	4945      	ldr	r1, [pc, #276]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004b5e:	4b40      	ldr	r3, [pc, #256]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b6c:	493c      	ldr	r1, [pc, #240]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00a      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b80:	4b37      	ldr	r3, [pc, #220]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b86:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b8e:	4934      	ldr	r1, [pc, #208]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d011      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ba2:	4b2f      	ldr	r3, [pc, #188]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bb0:	492b      	ldr	r1, [pc, #172]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bc0:	d101      	bne.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004be2:	4b1f      	ldr	r3, [pc, #124]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bf0:	491b      	ldr	r1, [pc, #108]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00b      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c04:	4b16      	ldr	r3, [pc, #88]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c14:	4912      	ldr	r1, [pc, #72]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00b      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004c28:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c38:	4909      	ldr	r1, [pc, #36]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00f      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c4c:	4b04      	ldr	r3, [pc, #16]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c52:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5c:	e002      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004c5e:	bf00      	nop
 8004c60:	40023800 	.word	0x40023800
 8004c64:	4986      	ldr	r1, [pc, #536]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00b      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c78:	4b81      	ldr	r3, [pc, #516]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c7e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c88:	497d      	ldr	r1, [pc, #500]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d006      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f000 80d6 	beq.w	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ca4:	4b76      	ldr	r3, [pc, #472]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a75      	ldr	r2, [pc, #468]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004caa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb0:	f7fd fab4 	bl	800221c <HAL_GetTick>
 8004cb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cb6:	e008      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cb8:	f7fd fab0 	bl	800221c <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b64      	cmp	r3, #100	; 0x64
 8004cc4:	d901      	bls.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e195      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cca:	4b6d      	ldr	r3, [pc, #436]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1f0      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d021      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d11d      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004cea:	4b65      	ldr	r3, [pc, #404]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cf0:	0c1b      	lsrs	r3, r3, #16
 8004cf2:	f003 0303 	and.w	r3, r3, #3
 8004cf6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004cf8:	4b61      	ldr	r3, [pc, #388]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cfe:	0e1b      	lsrs	r3, r3, #24
 8004d00:	f003 030f 	and.w	r3, r3, #15
 8004d04:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	019a      	lsls	r2, r3, #6
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	041b      	lsls	r3, r3, #16
 8004d10:	431a      	orrs	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	061b      	lsls	r3, r3, #24
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	071b      	lsls	r3, r3, #28
 8004d1e:	4958      	ldr	r1, [pc, #352]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d004      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d3a:	d00a      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d02e      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d50:	d129      	bne.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d52:	4b4b      	ldr	r3, [pc, #300]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d58:	0c1b      	lsrs	r3, r3, #16
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d60:	4b47      	ldr	r3, [pc, #284]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d66:	0f1b      	lsrs	r3, r3, #28
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	019a      	lsls	r2, r3, #6
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	041b      	lsls	r3, r3, #16
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	061b      	lsls	r3, r3, #24
 8004d80:	431a      	orrs	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	071b      	lsls	r3, r3, #28
 8004d86:	493e      	ldr	r1, [pc, #248]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d8e:	4b3c      	ldr	r3, [pc, #240]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d94:	f023 021f 	bic.w	r2, r3, #31
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	4938      	ldr	r1, [pc, #224]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d01d      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004db2:	4b33      	ldr	r3, [pc, #204]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db8:	0e1b      	lsrs	r3, r3, #24
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004dc0:	4b2f      	ldr	r3, [pc, #188]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dc6:	0f1b      	lsrs	r3, r3, #28
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	019a      	lsls	r2, r3, #6
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	041b      	lsls	r3, r3, #16
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	061b      	lsls	r3, r3, #24
 8004de0:	431a      	orrs	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	071b      	lsls	r3, r3, #28
 8004de6:	4926      	ldr	r1, [pc, #152]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d011      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	019a      	lsls	r2, r3, #6
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	041b      	lsls	r3, r3, #16
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	061b      	lsls	r3, r3, #24
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	071b      	lsls	r3, r3, #28
 8004e16:	491a      	ldr	r1, [pc, #104]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e1e:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a17      	ldr	r2, [pc, #92]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e2a:	f7fd f9f7 	bl	800221c <HAL_GetTick>
 8004e2e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e30:	e008      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e32:	f7fd f9f3 	bl	800221c <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b64      	cmp	r3, #100	; 0x64
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e0d8      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e44:	4b0e      	ldr	r3, [pc, #56]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0f0      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	f040 80ce 	bne.w	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e58:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a08      	ldr	r2, [pc, #32]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e64:	f7fd f9da 	bl	800221c <HAL_GetTick>
 8004e68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e6a:	e00b      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e6c:	f7fd f9d6 	bl	800221c <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b64      	cmp	r3, #100	; 0x64
 8004e78:	d904      	bls.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e0bb      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004e7e:	bf00      	nop
 8004e80:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e84:	4b5e      	ldr	r3, [pc, #376]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e90:	d0ec      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d009      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d02e      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d12a      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004eba:	4b51      	ldr	r3, [pc, #324]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec0:	0c1b      	lsrs	r3, r3, #16
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ec8:	4b4d      	ldr	r3, [pc, #308]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ece:	0f1b      	lsrs	r3, r3, #28
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	019a      	lsls	r2, r3, #6
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	041b      	lsls	r3, r3, #16
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	061b      	lsls	r3, r3, #24
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	071b      	lsls	r3, r3, #28
 8004eee:	4944      	ldr	r1, [pc, #272]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ef6:	4b42      	ldr	r3, [pc, #264]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004efc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f04:	3b01      	subs	r3, #1
 8004f06:	021b      	lsls	r3, r3, #8
 8004f08:	493d      	ldr	r1, [pc, #244]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d022      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f24:	d11d      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f26:	4b36      	ldr	r3, [pc, #216]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2c:	0e1b      	lsrs	r3, r3, #24
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f34:	4b32      	ldr	r3, [pc, #200]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3a:	0f1b      	lsrs	r3, r3, #28
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	019a      	lsls	r2, r3, #6
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	041b      	lsls	r3, r3, #16
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	061b      	lsls	r3, r3, #24
 8004f54:	431a      	orrs	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	071b      	lsls	r3, r3, #28
 8004f5a:	4929      	ldr	r1, [pc, #164]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d028      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f6e:	4b24      	ldr	r3, [pc, #144]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f74:	0e1b      	lsrs	r3, r3, #24
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f7c:	4b20      	ldr	r3, [pc, #128]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f82:	0c1b      	lsrs	r3, r3, #16
 8004f84:	f003 0303 	and.w	r3, r3, #3
 8004f88:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	019a      	lsls	r2, r3, #6
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	041b      	lsls	r3, r3, #16
 8004f94:	431a      	orrs	r2, r3
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	061b      	lsls	r3, r3, #24
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	071b      	lsls	r3, r3, #28
 8004fa2:	4917      	ldr	r1, [pc, #92]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004faa:	4b15      	ldr	r3, [pc, #84]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb8:	4911      	ldr	r1, [pc, #68]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004fc0:	4b0f      	ldr	r3, [pc, #60]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a0e      	ldr	r2, [pc, #56]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fcc:	f7fd f926 	bl	800221c <HAL_GetTick>
 8004fd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fd4:	f7fd f922 	bl	800221c <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b64      	cmp	r3, #100	; 0x64
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e007      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fe6:	4b06      	ldr	r3, [pc, #24]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ff2:	d1ef      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3720      	adds	r7, #32
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	40023800 	.word	0x40023800

08005004 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e049      	b.n	80050aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fc ffe2 	bl	8001ff4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3304      	adds	r3, #4
 8005040:	4619      	mov	r1, r3
 8005042:	4610      	mov	r0, r2
 8005044:	f000 f9ee 	bl	8005424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d001      	beq.n	80050cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e04c      	b.n	8005166 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a26      	ldr	r2, [pc, #152]	; (8005174 <HAL_TIM_Base_Start+0xc0>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d022      	beq.n	8005124 <HAL_TIM_Base_Start+0x70>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e6:	d01d      	beq.n	8005124 <HAL_TIM_Base_Start+0x70>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a22      	ldr	r2, [pc, #136]	; (8005178 <HAL_TIM_Base_Start+0xc4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d018      	beq.n	8005124 <HAL_TIM_Base_Start+0x70>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a21      	ldr	r2, [pc, #132]	; (800517c <HAL_TIM_Base_Start+0xc8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d013      	beq.n	8005124 <HAL_TIM_Base_Start+0x70>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a1f      	ldr	r2, [pc, #124]	; (8005180 <HAL_TIM_Base_Start+0xcc>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00e      	beq.n	8005124 <HAL_TIM_Base_Start+0x70>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1e      	ldr	r2, [pc, #120]	; (8005184 <HAL_TIM_Base_Start+0xd0>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d009      	beq.n	8005124 <HAL_TIM_Base_Start+0x70>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1c      	ldr	r2, [pc, #112]	; (8005188 <HAL_TIM_Base_Start+0xd4>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d004      	beq.n	8005124 <HAL_TIM_Base_Start+0x70>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1b      	ldr	r2, [pc, #108]	; (800518c <HAL_TIM_Base_Start+0xd8>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d115      	bne.n	8005150 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	4b19      	ldr	r3, [pc, #100]	; (8005190 <HAL_TIM_Base_Start+0xdc>)
 800512c:	4013      	ands	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b06      	cmp	r3, #6
 8005134:	d015      	beq.n	8005162 <HAL_TIM_Base_Start+0xae>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800513c:	d011      	beq.n	8005162 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f042 0201 	orr.w	r2, r2, #1
 800514c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800514e:	e008      	b.n	8005162 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	e000      	b.n	8005164 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005162:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	40010000 	.word	0x40010000
 8005178:	40000400 	.word	0x40000400
 800517c:	40000800 	.word	0x40000800
 8005180:	40000c00 	.word	0x40000c00
 8005184:	40010400 	.word	0x40010400
 8005188:	40014000 	.word	0x40014000
 800518c:	40001800 	.word	0x40001800
 8005190:	00010007 	.word	0x00010007

08005194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d122      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d11b      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f06f 0202 	mvn.w	r2, #2
 80051c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f905 	bl	80053e6 <HAL_TIM_IC_CaptureCallback>
 80051dc:	e005      	b.n	80051ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f8f7 	bl	80053d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f908 	bl	80053fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f003 0304 	and.w	r3, r3, #4
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d122      	bne.n	8005244 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b04      	cmp	r3, #4
 800520a:	d11b      	bne.n	8005244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0204 	mvn.w	r2, #4
 8005214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2202      	movs	r2, #2
 800521a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f8db 	bl	80053e6 <HAL_TIM_IC_CaptureCallback>
 8005230:	e005      	b.n	800523e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f8cd 	bl	80053d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f8de 	bl	80053fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b08      	cmp	r3, #8
 8005250:	d122      	bne.n	8005298 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b08      	cmp	r3, #8
 800525e:	d11b      	bne.n	8005298 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f06f 0208 	mvn.w	r2, #8
 8005268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2204      	movs	r2, #4
 800526e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f8b1 	bl	80053e6 <HAL_TIM_IC_CaptureCallback>
 8005284:	e005      	b.n	8005292 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f8a3 	bl	80053d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f8b4 	bl	80053fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f003 0310 	and.w	r3, r3, #16
 80052a2:	2b10      	cmp	r3, #16
 80052a4:	d122      	bne.n	80052ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0310 	and.w	r3, r3, #16
 80052b0:	2b10      	cmp	r3, #16
 80052b2:	d11b      	bne.n	80052ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0210 	mvn.w	r2, #16
 80052bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2208      	movs	r2, #8
 80052c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f887 	bl	80053e6 <HAL_TIM_IC_CaptureCallback>
 80052d8:	e005      	b.n	80052e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f879 	bl	80053d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f88a 	bl	80053fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d10e      	bne.n	8005318 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b01      	cmp	r3, #1
 8005306:	d107      	bne.n	8005318 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0201 	mvn.w	r2, #1
 8005310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7fc fd98 	bl	8001e48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005322:	2b80      	cmp	r3, #128	; 0x80
 8005324:	d10e      	bne.n	8005344 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005330:	2b80      	cmp	r3, #128	; 0x80
 8005332:	d107      	bne.n	8005344 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800533c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f9a8 	bl	8005694 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005352:	d10e      	bne.n	8005372 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535e:	2b80      	cmp	r3, #128	; 0x80
 8005360:	d107      	bne.n	8005372 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800536a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f99b 	bl	80056a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537c:	2b40      	cmp	r3, #64	; 0x40
 800537e:	d10e      	bne.n	800539e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538a:	2b40      	cmp	r3, #64	; 0x40
 800538c:	d107      	bne.n	800539e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f838 	bl	800540e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	f003 0320 	and.w	r3, r3, #32
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	d10e      	bne.n	80053ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f003 0320 	and.w	r3, r3, #32
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	d107      	bne.n	80053ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f06f 0220 	mvn.w	r2, #32
 80053c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f95b 	bl	8005680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053ca:	bf00      	nop
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
	...

08005424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a40      	ldr	r2, [pc, #256]	; (8005538 <TIM_Base_SetConfig+0x114>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d013      	beq.n	8005464 <TIM_Base_SetConfig+0x40>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005442:	d00f      	beq.n	8005464 <TIM_Base_SetConfig+0x40>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a3d      	ldr	r2, [pc, #244]	; (800553c <TIM_Base_SetConfig+0x118>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d00b      	beq.n	8005464 <TIM_Base_SetConfig+0x40>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a3c      	ldr	r2, [pc, #240]	; (8005540 <TIM_Base_SetConfig+0x11c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d007      	beq.n	8005464 <TIM_Base_SetConfig+0x40>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a3b      	ldr	r2, [pc, #236]	; (8005544 <TIM_Base_SetConfig+0x120>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d003      	beq.n	8005464 <TIM_Base_SetConfig+0x40>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a3a      	ldr	r2, [pc, #232]	; (8005548 <TIM_Base_SetConfig+0x124>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d108      	bne.n	8005476 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	4313      	orrs	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a2f      	ldr	r2, [pc, #188]	; (8005538 <TIM_Base_SetConfig+0x114>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d02b      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005484:	d027      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a2c      	ldr	r2, [pc, #176]	; (800553c <TIM_Base_SetConfig+0x118>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d023      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a2b      	ldr	r2, [pc, #172]	; (8005540 <TIM_Base_SetConfig+0x11c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d01f      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a2a      	ldr	r2, [pc, #168]	; (8005544 <TIM_Base_SetConfig+0x120>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d01b      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a29      	ldr	r2, [pc, #164]	; (8005548 <TIM_Base_SetConfig+0x124>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d017      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a28      	ldr	r2, [pc, #160]	; (800554c <TIM_Base_SetConfig+0x128>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d013      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a27      	ldr	r2, [pc, #156]	; (8005550 <TIM_Base_SetConfig+0x12c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00f      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a26      	ldr	r2, [pc, #152]	; (8005554 <TIM_Base_SetConfig+0x130>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00b      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a25      	ldr	r2, [pc, #148]	; (8005558 <TIM_Base_SetConfig+0x134>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d007      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a24      	ldr	r2, [pc, #144]	; (800555c <TIM_Base_SetConfig+0x138>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d003      	beq.n	80054d6 <TIM_Base_SetConfig+0xb2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a23      	ldr	r2, [pc, #140]	; (8005560 <TIM_Base_SetConfig+0x13c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d108      	bne.n	80054e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a0a      	ldr	r2, [pc, #40]	; (8005538 <TIM_Base_SetConfig+0x114>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d003      	beq.n	800551c <TIM_Base_SetConfig+0xf8>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a0c      	ldr	r2, [pc, #48]	; (8005548 <TIM_Base_SetConfig+0x124>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d103      	bne.n	8005524 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	691a      	ldr	r2, [r3, #16]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	615a      	str	r2, [r3, #20]
}
 800552a:	bf00      	nop
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	40010000 	.word	0x40010000
 800553c:	40000400 	.word	0x40000400
 8005540:	40000800 	.word	0x40000800
 8005544:	40000c00 	.word	0x40000c00
 8005548:	40010400 	.word	0x40010400
 800554c:	40014000 	.word	0x40014000
 8005550:	40014400 	.word	0x40014400
 8005554:	40014800 	.word	0x40014800
 8005558:	40001800 	.word	0x40001800
 800555c:	40001c00 	.word	0x40001c00
 8005560:	40002000 	.word	0x40002000

08005564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005574:	2b01      	cmp	r3, #1
 8005576:	d101      	bne.n	800557c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005578:	2302      	movs	r3, #2
 800557a:	e06d      	b.n	8005658 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a30      	ldr	r2, [pc, #192]	; (8005664 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d004      	beq.n	80055b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a2f      	ldr	r2, [pc, #188]	; (8005668 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d108      	bne.n	80055c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80055b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a20      	ldr	r2, [pc, #128]	; (8005664 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d022      	beq.n	800562c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ee:	d01d      	beq.n	800562c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a1d      	ldr	r2, [pc, #116]	; (800566c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d018      	beq.n	800562c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a1c      	ldr	r2, [pc, #112]	; (8005670 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d013      	beq.n	800562c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a1a      	ldr	r2, [pc, #104]	; (8005674 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d00e      	beq.n	800562c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a15      	ldr	r2, [pc, #84]	; (8005668 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d009      	beq.n	800562c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a16      	ldr	r2, [pc, #88]	; (8005678 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d004      	beq.n	800562c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a15      	ldr	r2, [pc, #84]	; (800567c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d10c      	bne.n	8005646 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005632:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	4313      	orrs	r3, r2
 800563c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	40010000 	.word	0x40010000
 8005668:	40010400 	.word	0x40010400
 800566c:	40000400 	.word	0x40000400
 8005670:	40000800 	.word	0x40000800
 8005674:	40000c00 	.word	0x40000c00
 8005678:	40014000 	.word	0x40014000
 800567c:	40001800 	.word	0x40001800

08005680 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e040      	b.n	8005750 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d106      	bne.n	80056e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7fc fcde 	bl	80020a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2224      	movs	r2, #36	; 0x24
 80056e8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f022 0201 	bic.w	r2, r2, #1
 80056f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f8c0 	bl	8005880 <UART_SetConfig>
 8005700:	4603      	mov	r3, r0
 8005702:	2b01      	cmp	r3, #1
 8005704:	d101      	bne.n	800570a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e022      	b.n	8005750 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fb16 	bl	8005d44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005726:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689a      	ldr	r2, [r3, #8]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005736:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0201 	orr.w	r2, r2, #1
 8005746:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fb9d 	bl	8005e88 <UART_CheckIdleState>
 800574e:	4603      	mov	r3, r0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b08a      	sub	sp, #40	; 0x28
 800575c:	af02      	add	r7, sp, #8
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	603b      	str	r3, [r7, #0]
 8005764:	4613      	mov	r3, r2
 8005766:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800576c:	2b20      	cmp	r3, #32
 800576e:	f040 8081 	bne.w	8005874 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <HAL_UART_Transmit+0x26>
 8005778:	88fb      	ldrh	r3, [r7, #6]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e079      	b.n	8005876 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <HAL_UART_Transmit+0x38>
 800578c:	2302      	movs	r3, #2
 800578e:	e072      	b.n	8005876 <HAL_UART_Transmit+0x11e>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2221      	movs	r2, #33	; 0x21
 80057a4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057a6:	f7fc fd39 	bl	800221c <HAL_GetTick>
 80057aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	88fa      	ldrh	r2, [r7, #6]
 80057b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	88fa      	ldrh	r2, [r7, #6]
 80057b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057c4:	d108      	bne.n	80057d8 <HAL_UART_Transmit+0x80>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d104      	bne.n	80057d8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80057ce:	2300      	movs	r3, #0
 80057d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	61bb      	str	r3, [r7, #24]
 80057d6:	e003      	b.n	80057e0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057dc:	2300      	movs	r3, #0
 80057de:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80057e8:	e02c      	b.n	8005844 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2200      	movs	r2, #0
 80057f2:	2180      	movs	r1, #128	; 0x80
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f000 fb90 	bl	8005f1a <UART_WaitOnFlagUntilTimeout>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e038      	b.n	8005876 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10b      	bne.n	8005822 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	461a      	mov	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005818:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	3302      	adds	r3, #2
 800581e:	61bb      	str	r3, [r7, #24]
 8005820:	e007      	b.n	8005832 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	781a      	ldrb	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	3301      	adds	r3, #1
 8005830:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005838:	b29b      	uxth	r3, r3
 800583a:	3b01      	subs	r3, #1
 800583c:	b29a      	uxth	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800584a:	b29b      	uxth	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1cc      	bne.n	80057ea <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	2200      	movs	r2, #0
 8005858:	2140      	movs	r1, #64	; 0x40
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 fb5d 	bl	8005f1a <UART_WaitOnFlagUntilTimeout>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e005      	b.n	8005876 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2220      	movs	r2, #32
 800586e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005870:	2300      	movs	r3, #0
 8005872:	e000      	b.n	8005876 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005874:	2302      	movs	r3, #2
  }
}
 8005876:	4618      	mov	r0, r3
 8005878:	3720      	adds	r7, #32
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
	...

08005880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005888:	2300      	movs	r3, #0
 800588a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	431a      	orrs	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	431a      	orrs	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	4ba7      	ldr	r3, [pc, #668]	; (8005b48 <UART_SetConfig+0x2c8>)
 80058ac:	4013      	ands	r3, r2
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6812      	ldr	r2, [r2, #0]
 80058b2:	6979      	ldr	r1, [r7, #20]
 80058b4:	430b      	orrs	r3, r1
 80058b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	4313      	orrs	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a95      	ldr	r2, [pc, #596]	; (8005b4c <UART_SetConfig+0x2cc>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d120      	bne.n	800593e <UART_SetConfig+0xbe>
 80058fc:	4b94      	ldr	r3, [pc, #592]	; (8005b50 <UART_SetConfig+0x2d0>)
 80058fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005902:	f003 0303 	and.w	r3, r3, #3
 8005906:	2b03      	cmp	r3, #3
 8005908:	d816      	bhi.n	8005938 <UART_SetConfig+0xb8>
 800590a:	a201      	add	r2, pc, #4	; (adr r2, 8005910 <UART_SetConfig+0x90>)
 800590c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005910:	08005921 	.word	0x08005921
 8005914:	0800592d 	.word	0x0800592d
 8005918:	08005927 	.word	0x08005927
 800591c:	08005933 	.word	0x08005933
 8005920:	2301      	movs	r3, #1
 8005922:	77fb      	strb	r3, [r7, #31]
 8005924:	e14f      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005926:	2302      	movs	r3, #2
 8005928:	77fb      	strb	r3, [r7, #31]
 800592a:	e14c      	b.n	8005bc6 <UART_SetConfig+0x346>
 800592c:	2304      	movs	r3, #4
 800592e:	77fb      	strb	r3, [r7, #31]
 8005930:	e149      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005932:	2308      	movs	r3, #8
 8005934:	77fb      	strb	r3, [r7, #31]
 8005936:	e146      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005938:	2310      	movs	r3, #16
 800593a:	77fb      	strb	r3, [r7, #31]
 800593c:	e143      	b.n	8005bc6 <UART_SetConfig+0x346>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a84      	ldr	r2, [pc, #528]	; (8005b54 <UART_SetConfig+0x2d4>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d132      	bne.n	80059ae <UART_SetConfig+0x12e>
 8005948:	4b81      	ldr	r3, [pc, #516]	; (8005b50 <UART_SetConfig+0x2d0>)
 800594a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594e:	f003 030c 	and.w	r3, r3, #12
 8005952:	2b0c      	cmp	r3, #12
 8005954:	d828      	bhi.n	80059a8 <UART_SetConfig+0x128>
 8005956:	a201      	add	r2, pc, #4	; (adr r2, 800595c <UART_SetConfig+0xdc>)
 8005958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595c:	08005991 	.word	0x08005991
 8005960:	080059a9 	.word	0x080059a9
 8005964:	080059a9 	.word	0x080059a9
 8005968:	080059a9 	.word	0x080059a9
 800596c:	0800599d 	.word	0x0800599d
 8005970:	080059a9 	.word	0x080059a9
 8005974:	080059a9 	.word	0x080059a9
 8005978:	080059a9 	.word	0x080059a9
 800597c:	08005997 	.word	0x08005997
 8005980:	080059a9 	.word	0x080059a9
 8005984:	080059a9 	.word	0x080059a9
 8005988:	080059a9 	.word	0x080059a9
 800598c:	080059a3 	.word	0x080059a3
 8005990:	2300      	movs	r3, #0
 8005992:	77fb      	strb	r3, [r7, #31]
 8005994:	e117      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005996:	2302      	movs	r3, #2
 8005998:	77fb      	strb	r3, [r7, #31]
 800599a:	e114      	b.n	8005bc6 <UART_SetConfig+0x346>
 800599c:	2304      	movs	r3, #4
 800599e:	77fb      	strb	r3, [r7, #31]
 80059a0:	e111      	b.n	8005bc6 <UART_SetConfig+0x346>
 80059a2:	2308      	movs	r3, #8
 80059a4:	77fb      	strb	r3, [r7, #31]
 80059a6:	e10e      	b.n	8005bc6 <UART_SetConfig+0x346>
 80059a8:	2310      	movs	r3, #16
 80059aa:	77fb      	strb	r3, [r7, #31]
 80059ac:	e10b      	b.n	8005bc6 <UART_SetConfig+0x346>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a69      	ldr	r2, [pc, #420]	; (8005b58 <UART_SetConfig+0x2d8>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d120      	bne.n	80059fa <UART_SetConfig+0x17a>
 80059b8:	4b65      	ldr	r3, [pc, #404]	; (8005b50 <UART_SetConfig+0x2d0>)
 80059ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059c2:	2b30      	cmp	r3, #48	; 0x30
 80059c4:	d013      	beq.n	80059ee <UART_SetConfig+0x16e>
 80059c6:	2b30      	cmp	r3, #48	; 0x30
 80059c8:	d814      	bhi.n	80059f4 <UART_SetConfig+0x174>
 80059ca:	2b20      	cmp	r3, #32
 80059cc:	d009      	beq.n	80059e2 <UART_SetConfig+0x162>
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	d810      	bhi.n	80059f4 <UART_SetConfig+0x174>
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <UART_SetConfig+0x15c>
 80059d6:	2b10      	cmp	r3, #16
 80059d8:	d006      	beq.n	80059e8 <UART_SetConfig+0x168>
 80059da:	e00b      	b.n	80059f4 <UART_SetConfig+0x174>
 80059dc:	2300      	movs	r3, #0
 80059de:	77fb      	strb	r3, [r7, #31]
 80059e0:	e0f1      	b.n	8005bc6 <UART_SetConfig+0x346>
 80059e2:	2302      	movs	r3, #2
 80059e4:	77fb      	strb	r3, [r7, #31]
 80059e6:	e0ee      	b.n	8005bc6 <UART_SetConfig+0x346>
 80059e8:	2304      	movs	r3, #4
 80059ea:	77fb      	strb	r3, [r7, #31]
 80059ec:	e0eb      	b.n	8005bc6 <UART_SetConfig+0x346>
 80059ee:	2308      	movs	r3, #8
 80059f0:	77fb      	strb	r3, [r7, #31]
 80059f2:	e0e8      	b.n	8005bc6 <UART_SetConfig+0x346>
 80059f4:	2310      	movs	r3, #16
 80059f6:	77fb      	strb	r3, [r7, #31]
 80059f8:	e0e5      	b.n	8005bc6 <UART_SetConfig+0x346>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a57      	ldr	r2, [pc, #348]	; (8005b5c <UART_SetConfig+0x2dc>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d120      	bne.n	8005a46 <UART_SetConfig+0x1c6>
 8005a04:	4b52      	ldr	r3, [pc, #328]	; (8005b50 <UART_SetConfig+0x2d0>)
 8005a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a0e:	2bc0      	cmp	r3, #192	; 0xc0
 8005a10:	d013      	beq.n	8005a3a <UART_SetConfig+0x1ba>
 8005a12:	2bc0      	cmp	r3, #192	; 0xc0
 8005a14:	d814      	bhi.n	8005a40 <UART_SetConfig+0x1c0>
 8005a16:	2b80      	cmp	r3, #128	; 0x80
 8005a18:	d009      	beq.n	8005a2e <UART_SetConfig+0x1ae>
 8005a1a:	2b80      	cmp	r3, #128	; 0x80
 8005a1c:	d810      	bhi.n	8005a40 <UART_SetConfig+0x1c0>
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <UART_SetConfig+0x1a8>
 8005a22:	2b40      	cmp	r3, #64	; 0x40
 8005a24:	d006      	beq.n	8005a34 <UART_SetConfig+0x1b4>
 8005a26:	e00b      	b.n	8005a40 <UART_SetConfig+0x1c0>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	77fb      	strb	r3, [r7, #31]
 8005a2c:	e0cb      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005a2e:	2302      	movs	r3, #2
 8005a30:	77fb      	strb	r3, [r7, #31]
 8005a32:	e0c8      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005a34:	2304      	movs	r3, #4
 8005a36:	77fb      	strb	r3, [r7, #31]
 8005a38:	e0c5      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005a3a:	2308      	movs	r3, #8
 8005a3c:	77fb      	strb	r3, [r7, #31]
 8005a3e:	e0c2      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005a40:	2310      	movs	r3, #16
 8005a42:	77fb      	strb	r3, [r7, #31]
 8005a44:	e0bf      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a45      	ldr	r2, [pc, #276]	; (8005b60 <UART_SetConfig+0x2e0>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d125      	bne.n	8005a9c <UART_SetConfig+0x21c>
 8005a50:	4b3f      	ldr	r3, [pc, #252]	; (8005b50 <UART_SetConfig+0x2d0>)
 8005a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a5e:	d017      	beq.n	8005a90 <UART_SetConfig+0x210>
 8005a60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a64:	d817      	bhi.n	8005a96 <UART_SetConfig+0x216>
 8005a66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a6a:	d00b      	beq.n	8005a84 <UART_SetConfig+0x204>
 8005a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a70:	d811      	bhi.n	8005a96 <UART_SetConfig+0x216>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <UART_SetConfig+0x1fe>
 8005a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a7a:	d006      	beq.n	8005a8a <UART_SetConfig+0x20a>
 8005a7c:	e00b      	b.n	8005a96 <UART_SetConfig+0x216>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	77fb      	strb	r3, [r7, #31]
 8005a82:	e0a0      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005a84:	2302      	movs	r3, #2
 8005a86:	77fb      	strb	r3, [r7, #31]
 8005a88:	e09d      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005a8a:	2304      	movs	r3, #4
 8005a8c:	77fb      	strb	r3, [r7, #31]
 8005a8e:	e09a      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005a90:	2308      	movs	r3, #8
 8005a92:	77fb      	strb	r3, [r7, #31]
 8005a94:	e097      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005a96:	2310      	movs	r3, #16
 8005a98:	77fb      	strb	r3, [r7, #31]
 8005a9a:	e094      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a30      	ldr	r2, [pc, #192]	; (8005b64 <UART_SetConfig+0x2e4>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d125      	bne.n	8005af2 <UART_SetConfig+0x272>
 8005aa6:	4b2a      	ldr	r3, [pc, #168]	; (8005b50 <UART_SetConfig+0x2d0>)
 8005aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ab0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ab4:	d017      	beq.n	8005ae6 <UART_SetConfig+0x266>
 8005ab6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005aba:	d817      	bhi.n	8005aec <UART_SetConfig+0x26c>
 8005abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ac0:	d00b      	beq.n	8005ada <UART_SetConfig+0x25a>
 8005ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ac6:	d811      	bhi.n	8005aec <UART_SetConfig+0x26c>
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <UART_SetConfig+0x254>
 8005acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ad0:	d006      	beq.n	8005ae0 <UART_SetConfig+0x260>
 8005ad2:	e00b      	b.n	8005aec <UART_SetConfig+0x26c>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	77fb      	strb	r3, [r7, #31]
 8005ad8:	e075      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005ada:	2302      	movs	r3, #2
 8005adc:	77fb      	strb	r3, [r7, #31]
 8005ade:	e072      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005ae0:	2304      	movs	r3, #4
 8005ae2:	77fb      	strb	r3, [r7, #31]
 8005ae4:	e06f      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005ae6:	2308      	movs	r3, #8
 8005ae8:	77fb      	strb	r3, [r7, #31]
 8005aea:	e06c      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005aec:	2310      	movs	r3, #16
 8005aee:	77fb      	strb	r3, [r7, #31]
 8005af0:	e069      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a1c      	ldr	r2, [pc, #112]	; (8005b68 <UART_SetConfig+0x2e8>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d137      	bne.n	8005b6c <UART_SetConfig+0x2ec>
 8005afc:	4b14      	ldr	r3, [pc, #80]	; (8005b50 <UART_SetConfig+0x2d0>)
 8005afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b02:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005b06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b0a:	d017      	beq.n	8005b3c <UART_SetConfig+0x2bc>
 8005b0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b10:	d817      	bhi.n	8005b42 <UART_SetConfig+0x2c2>
 8005b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b16:	d00b      	beq.n	8005b30 <UART_SetConfig+0x2b0>
 8005b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b1c:	d811      	bhi.n	8005b42 <UART_SetConfig+0x2c2>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <UART_SetConfig+0x2aa>
 8005b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b26:	d006      	beq.n	8005b36 <UART_SetConfig+0x2b6>
 8005b28:	e00b      	b.n	8005b42 <UART_SetConfig+0x2c2>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	77fb      	strb	r3, [r7, #31]
 8005b2e:	e04a      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005b30:	2302      	movs	r3, #2
 8005b32:	77fb      	strb	r3, [r7, #31]
 8005b34:	e047      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005b36:	2304      	movs	r3, #4
 8005b38:	77fb      	strb	r3, [r7, #31]
 8005b3a:	e044      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005b3c:	2308      	movs	r3, #8
 8005b3e:	77fb      	strb	r3, [r7, #31]
 8005b40:	e041      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005b42:	2310      	movs	r3, #16
 8005b44:	77fb      	strb	r3, [r7, #31]
 8005b46:	e03e      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005b48:	efff69f3 	.word	0xefff69f3
 8005b4c:	40011000 	.word	0x40011000
 8005b50:	40023800 	.word	0x40023800
 8005b54:	40004400 	.word	0x40004400
 8005b58:	40004800 	.word	0x40004800
 8005b5c:	40004c00 	.word	0x40004c00
 8005b60:	40005000 	.word	0x40005000
 8005b64:	40011400 	.word	0x40011400
 8005b68:	40007800 	.word	0x40007800
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a71      	ldr	r2, [pc, #452]	; (8005d38 <UART_SetConfig+0x4b8>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d125      	bne.n	8005bc2 <UART_SetConfig+0x342>
 8005b76:	4b71      	ldr	r3, [pc, #452]	; (8005d3c <UART_SetConfig+0x4bc>)
 8005b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b80:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b84:	d017      	beq.n	8005bb6 <UART_SetConfig+0x336>
 8005b86:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b8a:	d817      	bhi.n	8005bbc <UART_SetConfig+0x33c>
 8005b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b90:	d00b      	beq.n	8005baa <UART_SetConfig+0x32a>
 8005b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b96:	d811      	bhi.n	8005bbc <UART_SetConfig+0x33c>
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <UART_SetConfig+0x324>
 8005b9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ba0:	d006      	beq.n	8005bb0 <UART_SetConfig+0x330>
 8005ba2:	e00b      	b.n	8005bbc <UART_SetConfig+0x33c>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	77fb      	strb	r3, [r7, #31]
 8005ba8:	e00d      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005baa:	2302      	movs	r3, #2
 8005bac:	77fb      	strb	r3, [r7, #31]
 8005bae:	e00a      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005bb0:	2304      	movs	r3, #4
 8005bb2:	77fb      	strb	r3, [r7, #31]
 8005bb4:	e007      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005bb6:	2308      	movs	r3, #8
 8005bb8:	77fb      	strb	r3, [r7, #31]
 8005bba:	e004      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005bbc:	2310      	movs	r3, #16
 8005bbe:	77fb      	strb	r3, [r7, #31]
 8005bc0:	e001      	b.n	8005bc6 <UART_SetConfig+0x346>
 8005bc2:	2310      	movs	r3, #16
 8005bc4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bce:	d15b      	bne.n	8005c88 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005bd0:	7ffb      	ldrb	r3, [r7, #31]
 8005bd2:	2b08      	cmp	r3, #8
 8005bd4:	d827      	bhi.n	8005c26 <UART_SetConfig+0x3a6>
 8005bd6:	a201      	add	r2, pc, #4	; (adr r2, 8005bdc <UART_SetConfig+0x35c>)
 8005bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bdc:	08005c01 	.word	0x08005c01
 8005be0:	08005c09 	.word	0x08005c09
 8005be4:	08005c11 	.word	0x08005c11
 8005be8:	08005c27 	.word	0x08005c27
 8005bec:	08005c17 	.word	0x08005c17
 8005bf0:	08005c27 	.word	0x08005c27
 8005bf4:	08005c27 	.word	0x08005c27
 8005bf8:	08005c27 	.word	0x08005c27
 8005bfc:	08005c1f 	.word	0x08005c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c00:	f7fe fdb0 	bl	8004764 <HAL_RCC_GetPCLK1Freq>
 8005c04:	61b8      	str	r0, [r7, #24]
        break;
 8005c06:	e013      	b.n	8005c30 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c08:	f7fe fdc0 	bl	800478c <HAL_RCC_GetPCLK2Freq>
 8005c0c:	61b8      	str	r0, [r7, #24]
        break;
 8005c0e:	e00f      	b.n	8005c30 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c10:	4b4b      	ldr	r3, [pc, #300]	; (8005d40 <UART_SetConfig+0x4c0>)
 8005c12:	61bb      	str	r3, [r7, #24]
        break;
 8005c14:	e00c      	b.n	8005c30 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c16:	f7fe fce3 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 8005c1a:	61b8      	str	r0, [r7, #24]
        break;
 8005c1c:	e008      	b.n	8005c30 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c22:	61bb      	str	r3, [r7, #24]
        break;
 8005c24:	e004      	b.n	8005c30 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005c26:	2300      	movs	r3, #0
 8005c28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	77bb      	strb	r3, [r7, #30]
        break;
 8005c2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d074      	beq.n	8005d20 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	005a      	lsls	r2, r3, #1
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	085b      	lsrs	r3, r3, #1
 8005c40:	441a      	add	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b0f      	cmp	r3, #15
 8005c52:	d916      	bls.n	8005c82 <UART_SetConfig+0x402>
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c5a:	d212      	bcs.n	8005c82 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	f023 030f 	bic.w	r3, r3, #15
 8005c64:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	085b      	lsrs	r3, r3, #1
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	89fb      	ldrh	r3, [r7, #14]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	89fa      	ldrh	r2, [r7, #14]
 8005c7e:	60da      	str	r2, [r3, #12]
 8005c80:	e04e      	b.n	8005d20 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	77bb      	strb	r3, [r7, #30]
 8005c86:	e04b      	b.n	8005d20 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c88:	7ffb      	ldrb	r3, [r7, #31]
 8005c8a:	2b08      	cmp	r3, #8
 8005c8c:	d827      	bhi.n	8005cde <UART_SetConfig+0x45e>
 8005c8e:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <UART_SetConfig+0x414>)
 8005c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c94:	08005cb9 	.word	0x08005cb9
 8005c98:	08005cc1 	.word	0x08005cc1
 8005c9c:	08005cc9 	.word	0x08005cc9
 8005ca0:	08005cdf 	.word	0x08005cdf
 8005ca4:	08005ccf 	.word	0x08005ccf
 8005ca8:	08005cdf 	.word	0x08005cdf
 8005cac:	08005cdf 	.word	0x08005cdf
 8005cb0:	08005cdf 	.word	0x08005cdf
 8005cb4:	08005cd7 	.word	0x08005cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cb8:	f7fe fd54 	bl	8004764 <HAL_RCC_GetPCLK1Freq>
 8005cbc:	61b8      	str	r0, [r7, #24]
        break;
 8005cbe:	e013      	b.n	8005ce8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cc0:	f7fe fd64 	bl	800478c <HAL_RCC_GetPCLK2Freq>
 8005cc4:	61b8      	str	r0, [r7, #24]
        break;
 8005cc6:	e00f      	b.n	8005ce8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cc8:	4b1d      	ldr	r3, [pc, #116]	; (8005d40 <UART_SetConfig+0x4c0>)
 8005cca:	61bb      	str	r3, [r7, #24]
        break;
 8005ccc:	e00c      	b.n	8005ce8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cce:	f7fe fc87 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 8005cd2:	61b8      	str	r0, [r7, #24]
        break;
 8005cd4:	e008      	b.n	8005ce8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cda:	61bb      	str	r3, [r7, #24]
        break;
 8005cdc:	e004      	b.n	8005ce8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	77bb      	strb	r3, [r7, #30]
        break;
 8005ce6:	bf00      	nop
    }

    if (pclk != 0U)
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d018      	beq.n	8005d20 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	085a      	lsrs	r2, r3, #1
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	441a      	add	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	2b0f      	cmp	r3, #15
 8005d08:	d908      	bls.n	8005d1c <UART_SetConfig+0x49c>
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d10:	d204      	bcs.n	8005d1c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	60da      	str	r2, [r3, #12]
 8005d1a:	e001      	b.n	8005d20 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005d2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3720      	adds	r7, #32
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	40007c00 	.word	0x40007c00
 8005d3c:	40023800 	.word	0x40023800
 8005d40:	00f42400 	.word	0x00f42400

08005d44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00a      	beq.n	8005d6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00a      	beq.n	8005d90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00a      	beq.n	8005db2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	f003 0308 	and.w	r3, r3, #8
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	f003 0310 	and.w	r3, r3, #16
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00a      	beq.n	8005df6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfa:	f003 0320 	and.w	r3, r3, #32
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00a      	beq.n	8005e18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d01a      	beq.n	8005e5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e42:	d10a      	bne.n	8005e5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00a      	beq.n	8005e7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	605a      	str	r2, [r3, #4]
  }
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af02      	add	r7, sp, #8
 8005e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e98:	f7fc f9c0 	bl	800221c <HAL_GetTick>
 8005e9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0308 	and.w	r3, r3, #8
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	d10e      	bne.n	8005eca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f82d 	bl	8005f1a <UART_WaitOnFlagUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e023      	b.n	8005f12 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0304 	and.w	r3, r3, #4
 8005ed4:	2b04      	cmp	r3, #4
 8005ed6:	d10e      	bne.n	8005ef6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ed8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f817 	bl	8005f1a <UART_WaitOnFlagUntilTimeout>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e00d      	b.n	8005f12 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b084      	sub	sp, #16
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	60f8      	str	r0, [r7, #12]
 8005f22:	60b9      	str	r1, [r7, #8]
 8005f24:	603b      	str	r3, [r7, #0]
 8005f26:	4613      	mov	r3, r2
 8005f28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f2a:	e05e      	b.n	8005fea <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f32:	d05a      	beq.n	8005fea <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f34:	f7fc f972 	bl	800221c <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d302      	bcc.n	8005f4a <UART_WaitOnFlagUntilTimeout+0x30>
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d11b      	bne.n	8005f82 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f58:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 0201 	bic.w	r2, r2, #1
 8005f68:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2220      	movs	r2, #32
 8005f74:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e043      	b.n	800600a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d02c      	beq.n	8005fea <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f9e:	d124      	bne.n	8005fea <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fa8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005fb8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689a      	ldr	r2, [r3, #8]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 0201 	bic.w	r2, r2, #1
 8005fc8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e00f      	b.n	800600a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69da      	ldr	r2, [r3, #28]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	bf0c      	ite	eq
 8005ffa:	2301      	moveq	r3, #1
 8005ffc:	2300      	movne	r3, #0
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	461a      	mov	r2, r3
 8006002:	79fb      	ldrb	r3, [r7, #7]
 8006004:	429a      	cmp	r2, r3
 8006006:	d091      	beq.n	8005f2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
	...

08006014 <__libc_init_array>:
 8006014:	b570      	push	{r4, r5, r6, lr}
 8006016:	4d0d      	ldr	r5, [pc, #52]	; (800604c <__libc_init_array+0x38>)
 8006018:	4c0d      	ldr	r4, [pc, #52]	; (8006050 <__libc_init_array+0x3c>)
 800601a:	1b64      	subs	r4, r4, r5
 800601c:	10a4      	asrs	r4, r4, #2
 800601e:	2600      	movs	r6, #0
 8006020:	42a6      	cmp	r6, r4
 8006022:	d109      	bne.n	8006038 <__libc_init_array+0x24>
 8006024:	4d0b      	ldr	r5, [pc, #44]	; (8006054 <__libc_init_array+0x40>)
 8006026:	4c0c      	ldr	r4, [pc, #48]	; (8006058 <__libc_init_array+0x44>)
 8006028:	f000 f864 	bl	80060f4 <_init>
 800602c:	1b64      	subs	r4, r4, r5
 800602e:	10a4      	asrs	r4, r4, #2
 8006030:	2600      	movs	r6, #0
 8006032:	42a6      	cmp	r6, r4
 8006034:	d105      	bne.n	8006042 <__libc_init_array+0x2e>
 8006036:	bd70      	pop	{r4, r5, r6, pc}
 8006038:	f855 3b04 	ldr.w	r3, [r5], #4
 800603c:	4798      	blx	r3
 800603e:	3601      	adds	r6, #1
 8006040:	e7ee      	b.n	8006020 <__libc_init_array+0xc>
 8006042:	f855 3b04 	ldr.w	r3, [r5], #4
 8006046:	4798      	blx	r3
 8006048:	3601      	adds	r6, #1
 800604a:	e7f2      	b.n	8006032 <__libc_init_array+0x1e>
 800604c:	080065a8 	.word	0x080065a8
 8006050:	080065a8 	.word	0x080065a8
 8006054:	080065a8 	.word	0x080065a8
 8006058:	080065ac 	.word	0x080065ac

0800605c <memset>:
 800605c:	4402      	add	r2, r0
 800605e:	4603      	mov	r3, r0
 8006060:	4293      	cmp	r3, r2
 8006062:	d100      	bne.n	8006066 <memset+0xa>
 8006064:	4770      	bx	lr
 8006066:	f803 1b01 	strb.w	r1, [r3], #1
 800606a:	e7f9      	b.n	8006060 <memset+0x4>

0800606c <__utoa>:
 800606c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800606e:	4c1f      	ldr	r4, [pc, #124]	; (80060ec <__utoa+0x80>)
 8006070:	b08b      	sub	sp, #44	; 0x2c
 8006072:	4605      	mov	r5, r0
 8006074:	460b      	mov	r3, r1
 8006076:	466e      	mov	r6, sp
 8006078:	f104 0c20 	add.w	ip, r4, #32
 800607c:	6820      	ldr	r0, [r4, #0]
 800607e:	6861      	ldr	r1, [r4, #4]
 8006080:	4637      	mov	r7, r6
 8006082:	c703      	stmia	r7!, {r0, r1}
 8006084:	3408      	adds	r4, #8
 8006086:	4564      	cmp	r4, ip
 8006088:	463e      	mov	r6, r7
 800608a:	d1f7      	bne.n	800607c <__utoa+0x10>
 800608c:	7921      	ldrb	r1, [r4, #4]
 800608e:	7139      	strb	r1, [r7, #4]
 8006090:	1e91      	subs	r1, r2, #2
 8006092:	6820      	ldr	r0, [r4, #0]
 8006094:	6038      	str	r0, [r7, #0]
 8006096:	2922      	cmp	r1, #34	; 0x22
 8006098:	f04f 0100 	mov.w	r1, #0
 800609c:	d904      	bls.n	80060a8 <__utoa+0x3c>
 800609e:	7019      	strb	r1, [r3, #0]
 80060a0:	460b      	mov	r3, r1
 80060a2:	4618      	mov	r0, r3
 80060a4:	b00b      	add	sp, #44	; 0x2c
 80060a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060a8:	1e58      	subs	r0, r3, #1
 80060aa:	4684      	mov	ip, r0
 80060ac:	fbb5 f7f2 	udiv	r7, r5, r2
 80060b0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80060b4:	fb02 5617 	mls	r6, r2, r7, r5
 80060b8:	4476      	add	r6, lr
 80060ba:	460c      	mov	r4, r1
 80060bc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80060c0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80060c4:	462e      	mov	r6, r5
 80060c6:	42b2      	cmp	r2, r6
 80060c8:	f101 0101 	add.w	r1, r1, #1
 80060cc:	463d      	mov	r5, r7
 80060ce:	d9ed      	bls.n	80060ac <__utoa+0x40>
 80060d0:	2200      	movs	r2, #0
 80060d2:	545a      	strb	r2, [r3, r1]
 80060d4:	1919      	adds	r1, r3, r4
 80060d6:	1aa5      	subs	r5, r4, r2
 80060d8:	42aa      	cmp	r2, r5
 80060da:	dae2      	bge.n	80060a2 <__utoa+0x36>
 80060dc:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80060e0:	780e      	ldrb	r6, [r1, #0]
 80060e2:	7006      	strb	r6, [r0, #0]
 80060e4:	3201      	adds	r2, #1
 80060e6:	f801 5901 	strb.w	r5, [r1], #-1
 80060ea:	e7f4      	b.n	80060d6 <__utoa+0x6a>
 80060ec:	08006578 	.word	0x08006578

080060f0 <utoa>:
 80060f0:	f7ff bfbc 	b.w	800606c <__utoa>

080060f4 <_init>:
 80060f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f6:	bf00      	nop
 80060f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060fa:	bc08      	pop	{r3}
 80060fc:	469e      	mov	lr, r3
 80060fe:	4770      	bx	lr

08006100 <_fini>:
 8006100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006102:	bf00      	nop
 8006104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006106:	bc08      	pop	{r3}
 8006108:	469e      	mov	lr, r3
 800610a:	4770      	bx	lr
