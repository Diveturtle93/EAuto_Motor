
Motorsteuergeraet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067f8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000684  080069f0  080069f0  000169f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007074  08007074  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007074  08007074  00017074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800707c  0800707c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800707c  0800707c  0001707c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007080  08007080  00017080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  2000000c  08007090  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08007090  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001878d  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a1a  00000000  00000000  000387c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  0003c1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff0  00000000  00000000  0003d380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c798  00000000  00000000  0003e370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019823  00000000  00000000  0006ab08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001088dc  00000000  00000000  0008432b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018cc07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004678  00000000  00000000  0018cc58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080069d8 	.word	0x080069d8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080069d8 	.word	0x080069d8

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <BAMOCAN_ID>:
//----------------------------------------------------------------------

// Ermittle Register nach Empfang Bamocar CAN-ID
//----------------------------------------------------------------------
void BAMOCAN_ID(uint8_t* data, uint8_t dlc)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	460b      	mov	r3, r1
 8000556:	70fb      	strb	r3, [r7, #3]
	uint8_t Reg = data[0];
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	733b      	strb	r3, [r7, #12]
	uint16_t speed = 0, strom;
 800055e:	2300      	movs	r3, #0
 8000560:	817b      	strh	r3, [r7, #10]

	// Waehlen welches Register gesendet wurde
	switch (Reg)
 8000562:	7b3b      	ldrb	r3, [r7, #12]
 8000564:	2bd8      	cmp	r3, #216	; 0xd8
 8000566:	f000 80be 	beq.w	80006e6 <BAMOCAN_ID+0x19a>
 800056a:	2bd8      	cmp	r3, #216	; 0xd8
 800056c:	f300 8100 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 8000570:	2ba8      	cmp	r3, #168	; 0xa8
 8000572:	d012      	beq.n	800059a <BAMOCAN_ID+0x4e>
 8000574:	2ba8      	cmp	r3, #168	; 0xa8
 8000576:	f300 80fb 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 800057a:	2b8f      	cmp	r3, #143	; 0x8f
 800057c:	d077      	beq.n	800066e <BAMOCAN_ID+0x122>
 800057e:	2b8f      	cmp	r3, #143	; 0x8f
 8000580:	f300 80f6 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 8000584:	2b5f      	cmp	r3, #95	; 0x5f
 8000586:	d025      	beq.n	80005d4 <BAMOCAN_ID+0x88>
 8000588:	2b5f      	cmp	r3, #95	; 0x5f
 800058a:	f300 80f1 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 800058e:	2b1b      	cmp	r3, #27
 8000590:	f000 80d4 	beq.w	800073c <BAMOCAN_ID+0x1f0>
 8000594:	2b40      	cmp	r3, #64	; 0x40
 8000596:	d037      	beq.n	8000608 <BAMOCAN_ID+0xbc>
 8000598:	e0ea      	b.n	8000770 <BAMOCAN_ID+0x224>
	{
		// Drehzahl vom Bamocar bekommen
		case BAMOCAR_REG_N_ACT_FILTER:
			speed = ((data[2]<<8) + data[1]);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3302      	adds	r3, #2
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	021b      	lsls	r3, r3, #8
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	3301      	adds	r3, #1
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	4413      	add	r3, r2
 80005b0:	817b      	strh	r3, [r7, #10]
			motor1.Drehzahl = speed;
 80005b2:	4a74      	ldr	r2, [pc, #464]	; (8000784 <BAMOCAN_ID+0x238>)
 80005b4:	897b      	ldrh	r3, [r7, #10]
 80005b6:	8053      	strh	r3, [r2, #2]
// Uart Ausgabe
#ifdef DEBUG_BAMOCAR
			uartTransmit("Motordrehzahl\n", 14);
 80005b8:	210e      	movs	r1, #14
 80005ba:	4873      	ldr	r0, [pc, #460]	; (8000788 <BAMOCAN_ID+0x23c>)
 80005bc:	f000 f900 	bl	80007c0 <uartTransmit>
			uartTransmitNumber(speed, 10);
 80005c0:	897b      	ldrh	r3, [r7, #10]
 80005c2:	210a      	movs	r1, #10
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f90f 	bl	80007e8 <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005ca:	2101      	movs	r1, #1
 80005cc:	486f      	ldr	r0, [pc, #444]	; (800078c <BAMOCAN_ID+0x240>)
 80005ce:	f000 f8f7 	bl	80007c0 <uartTransmit>
#endif
			break;
 80005d2:	e0d2      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Stromwert von Bamocar bekommen
		case BAMOCAR_REG_I_ACT_FILTER:
			strom = ((data[2]<<8) + data[1]);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3302      	adds	r3, #2
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	021b      	lsls	r3, r3, #8
 80005de:	b29a      	uxth	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3301      	adds	r3, #1
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	4413      	add	r3, r2
 80005ea:	813b      	strh	r3, [r7, #8]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Motorstrom\n", 11);
 80005ec:	210b      	movs	r1, #11
 80005ee:	4868      	ldr	r0, [pc, #416]	; (8000790 <BAMOCAN_ID+0x244>)
 80005f0:	f000 f8e6 	bl	80007c0 <uartTransmit>
			uartTransmitNumber(strom, 10);
 80005f4:	893b      	ldrh	r3, [r7, #8]
 80005f6:	210a      	movs	r1, #10
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 f8f5 	bl	80007e8 <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005fe:	2101      	movs	r1, #1
 8000600:	4862      	ldr	r0, [pc, #392]	; (800078c <BAMOCAN_ID+0x240>)
 8000602:	f000 f8dd 	bl	80007c0 <uartTransmit>
#endif

			break;
 8000606:	e0b8      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Statusregister von Bamocar bekommen
		case BAMOCAR_REG_STATUS:
			bamocar_stat.status1 = ((data[4] << 24) + (data[3] << 16) + (data[2] << 8) + data[1]);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3304      	adds	r3, #4
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	061a      	lsls	r2, r3, #24
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3303      	adds	r3, #3
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	041b      	lsls	r3, r3, #16
 8000618:	441a      	add	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	3302      	adds	r3, #2
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	4413      	add	r3, r2
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	3201      	adds	r2, #1
 8000628:	7812      	ldrb	r2, [r2, #0]
 800062a:	4413      	add	r3, r2
 800062c:	461a      	mov	r2, r3
 800062e:	4b59      	ldr	r3, [pc, #356]	; (8000794 <BAMOCAN_ID+0x248>)
 8000630:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Status\n", 15);
 8000632:	210f      	movs	r1, #15
 8000634:	4858      	ldr	r0, [pc, #352]	; (8000798 <BAMOCAN_ID+0x24c>)
 8000636:	f000 f8c3 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 4; i > 0; i--)
 800063a:	2304      	movs	r3, #4
 800063c:	73fb      	strb	r3, [r7, #15]
 800063e:	e00e      	b.n	800065e <BAMOCAN_ID+0x112>
			{
				uartTransmitNumber(bamocar_stat.status[i-1], 16);
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	3b01      	subs	r3, #1
 8000644:	4a53      	ldr	r2, [pc, #332]	; (8000794 <BAMOCAN_ID+0x248>)
 8000646:	5cd3      	ldrb	r3, [r2, r3]
 8000648:	2110      	movs	r1, #16
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f8cc 	bl	80007e8 <uartTransmitNumber>
				uartTransmit(" ", 1);
 8000650:	2101      	movs	r1, #1
 8000652:	4852      	ldr	r0, [pc, #328]	; (800079c <BAMOCAN_ID+0x250>)
 8000654:	f000 f8b4 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 4; i > 0; i--)
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	3b01      	subs	r3, #1
 800065c:	73fb      	strb	r3, [r7, #15]
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d1ed      	bne.n	8000640 <BAMOCAN_ID+0xf4>
			}
			uartTransmit("\n", 1);
 8000664:	2101      	movs	r1, #1
 8000666:	4849      	ldr	r0, [pc, #292]	; (800078c <BAMOCAN_ID+0x240>)
 8000668:	f000 f8aa 	bl	80007c0 <uartTransmit>
#endif

			break;
 800066c:	e085      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Errorregister von Bamocar bekommen
		case BAMOCAR_REG_ERROR:
			bamocar_error.error1 = ((data[2] << 8) + data[1]);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3302      	adds	r3, #2
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b29b      	uxth	r3, r3
 8000676:	021b      	lsls	r3, r3, #8
 8000678:	b29a      	uxth	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	3301      	adds	r3, #1
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b29b      	uxth	r3, r3
 8000682:	4413      	add	r3, r2
 8000684:	b29a      	uxth	r2, r3
 8000686:	4b46      	ldr	r3, [pc, #280]	; (80007a0 <BAMOCAN_ID+0x254>)
 8000688:	801a      	strh	r2, [r3, #0]
			bamocar_warnung.warnung1 = ((data[4] << 8) + data[3]);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3304      	adds	r3, #4
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	b29b      	uxth	r3, r3
 8000692:	021b      	lsls	r3, r3, #8
 8000694:	b29a      	uxth	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3303      	adds	r3, #3
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b29b      	uxth	r3, r3
 800069e:	4413      	add	r3, r2
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	4b40      	ldr	r3, [pc, #256]	; (80007a4 <BAMOCAN_ID+0x258>)
 80006a4:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Error\n", 14);
 80006a6:	210e      	movs	r1, #14
 80006a8:	483f      	ldr	r0, [pc, #252]	; (80007a8 <BAMOCAN_ID+0x25c>)
 80006aa:	f000 f889 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	73bb      	strb	r3, [r7, #14]
 80006b2:	e010      	b.n	80006d6 <BAMOCAN_ID+0x18a>
			{
				uartTransmitNumber(data[1+i], 16);
 80006b4:	7bbb      	ldrb	r3, [r7, #14]
 80006b6:	3301      	adds	r3, #1
 80006b8:	461a      	mov	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2110      	movs	r1, #16
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 f890 	bl	80007e8 <uartTransmitNumber>
				uartTransmit(" ", 1);
 80006c8:	2101      	movs	r1, #1
 80006ca:	4834      	ldr	r0, [pc, #208]	; (800079c <BAMOCAN_ID+0x250>)
 80006cc:	f000 f878 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006d0:	7bbb      	ldrb	r3, [r7, #14]
 80006d2:	3301      	adds	r3, #1
 80006d4:	73bb      	strb	r3, [r7, #14]
 80006d6:	7bbb      	ldrb	r3, [r7, #14]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	d9eb      	bls.n	80006b4 <BAMOCAN_ID+0x168>
			}
			uartTransmit("\n", 1);
 80006dc:	2101      	movs	r1, #1
 80006de:	482b      	ldr	r0, [pc, #172]	; (800078c <BAMOCAN_ID+0x240>)
 80006e0:	f000 f86e 	bl	80007c0 <uartTransmit>
#endif

			break;
 80006e4:	e049      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Status IO Register von Bamocar bekommen
		case BAMOCAR_REG_STATUS_IO:
			bamocar_IOstatus.status1 = ((data[2] << 8) + data[1]);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3302      	adds	r3, #2
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	021b      	lsls	r3, r3, #8
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3301      	adds	r3, #1
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	4413      	add	r3, r2
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <BAMOCAN_ID+0x260>)
 8000700:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar IO Status\n", 18);
 8000702:	2112      	movs	r1, #18
 8000704:	482a      	ldr	r0, [pc, #168]	; (80007b0 <BAMOCAN_ID+0x264>)
 8000706:	f000 f85b 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 2; i++)
 800070a:	2300      	movs	r3, #0
 800070c:	737b      	strb	r3, [r7, #13]
 800070e:	e00d      	b.n	800072c <BAMOCAN_ID+0x1e0>
			{
				uartTransmitNumber(bamocar_IOstatus.status[i], 16);
 8000710:	7b7b      	ldrb	r3, [r7, #13]
 8000712:	4a26      	ldr	r2, [pc, #152]	; (80007ac <BAMOCAN_ID+0x260>)
 8000714:	5cd3      	ldrb	r3, [r2, r3]
 8000716:	2110      	movs	r1, #16
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f865 	bl	80007e8 <uartTransmitNumber>
				uartTransmit(" ", 1);
 800071e:	2101      	movs	r1, #1
 8000720:	481e      	ldr	r0, [pc, #120]	; (800079c <BAMOCAN_ID+0x250>)
 8000722:	f000 f84d 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 2; i++)
 8000726:	7b7b      	ldrb	r3, [r7, #13]
 8000728:	3301      	adds	r3, #1
 800072a:	737b      	strb	r3, [r7, #13]
 800072c:	7b7b      	ldrb	r3, [r7, #13]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d9ee      	bls.n	8000710 <BAMOCAN_ID+0x1c4>
			}
			uartTransmit("\n", 1);
 8000732:	2101      	movs	r1, #1
 8000734:	4815      	ldr	r0, [pc, #84]	; (800078c <BAMOCAN_ID+0x240>)
 8000736:	f000 f843 	bl	80007c0 <uartTransmit>
#endif

			break;
 800073a:	e01e      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Firmware von Bamocar ausgelesen
		case BAMOCAR_REG_FIRMWARE:
			bamocar_data.data = ((data[2]<<8) + data[1]);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3302      	adds	r3, #2
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	021b      	lsls	r3, r3, #8
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	3201      	adds	r2, #1
 8000748:	7812      	ldrb	r2, [r2, #0]
 800074a:	4413      	add	r3, r2
 800074c:	461a      	mov	r2, r3
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <BAMOCAN_ID+0x268>)
 8000750:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Firmware\n", 9);
 8000752:	2109      	movs	r1, #9
 8000754:	4818      	ldr	r0, [pc, #96]	; (80007b8 <BAMOCAN_ID+0x26c>)
 8000756:	f000 f833 	bl	80007c0 <uartTransmit>
			uartTransmitNumber(bamocar_data.data, 16);
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <BAMOCAN_ID+0x268>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2110      	movs	r1, #16
 8000760:	4618      	mov	r0, r3
 8000762:	f000 f841 	bl	80007e8 <uartTransmitNumber>
			uartTransmit("\n", 1);
 8000766:	2101      	movs	r1, #1
 8000768:	4808      	ldr	r0, [pc, #32]	; (800078c <BAMOCAN_ID+0x240>)
 800076a:	f000 f829 	bl	80007c0 <uartTransmit>
#endif

			break;
 800076e:	e004      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Register fuer Bamocar nicht definiert, Fehler
		default:
			uartTransmit("Bamocar Register nicht definiert\n", 33);
 8000770:	2121      	movs	r1, #33	; 0x21
 8000772:	4812      	ldr	r0, [pc, #72]	; (80007bc <BAMOCAN_ID+0x270>)
 8000774:	f000 f824 	bl	80007c0 <uartTransmit>
			break;
 8000778:	bf00      	nop
	}
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000118 	.word	0x20000118
 8000788:	080069f0 	.word	0x080069f0
 800078c:	08006a00 	.word	0x08006a00
 8000790:	08006a04 	.word	0x08006a04
 8000794:	2000002c 	.word	0x2000002c
 8000798:	08006a10 	.word	0x08006a10
 800079c:	08006a20 	.word	0x08006a20
 80007a0:	20000030 	.word	0x20000030
 80007a4:	20000034 	.word	0x20000034
 80007a8:	08006a24 	.word	0x08006a24
 80007ac:	20000028 	.word	0x20000028
 80007b0:	08006a34 	.word	0x08006a34
 80007b4:	20000038 	.word	0x20000038
 80007b8:	08006a48 	.word	0x08006a48
 80007bc:	08006a54 	.word	0x08006a54

080007c0 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	4803      	ldr	r0, [pc, #12]	; (80007e4 <uartTransmit+0x24>)
 80007d6:	f005 fbf1 	bl	8005fbc <HAL_UART_Transmit>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000016c 	.word	0x2000016c

080007e8 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4619      	mov	r1, r3
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f006 f8ea 	bl	80069d4 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fd17 	bl	8000238 <strlen>
 800080a:	4603      	mov	r3, r0
 800080c:	b29a      	uxth	r2, r3
 800080e:	f107 010c 	add.w	r1, r7, #12
 8000812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000816:	4803      	ldr	r0, [pc, #12]	; (8000824 <uartTransmitNumber+0x3c>)
 8000818:	f005 fbd0 	bl	8005fbc <HAL_UART_Transmit>
}
 800081c:	bf00      	nop
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	2000016c 	.word	0x2000016c

08000828 <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 800082e:	2113      	movs	r1, #19
 8000830:	483d      	ldr	r0, [pc, #244]	; (8000928 <collectHardwareInfo+0x100>)
 8000832:	f7ff ffc5 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 8000836:	f002 f959 	bl	8002aec <HAL_GetDEVID>
 800083a:	4603      	mov	r3, r0
 800083c:	210a      	movs	r1, #10
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ffd2 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8000844:	2115      	movs	r1, #21
 8000846:	4839      	ldr	r0, [pc, #228]	; (800092c <collectHardwareInfo+0x104>)
 8000848:	f7ff ffba 	bl	80007c0 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 800084c:	f002 f942 	bl	8002ad4 <HAL_GetREVID>
 8000850:	4603      	mov	r3, r0
 8000852:	f242 0201 	movw	r2, #8193	; 0x2001
 8000856:	4293      	cmp	r3, r2
 8000858:	d016      	beq.n	8000888 <collectHardwareInfo+0x60>
 800085a:	f242 0201 	movw	r2, #8193	; 0x2001
 800085e:	4293      	cmp	r3, r2
 8000860:	d817      	bhi.n	8000892 <collectHardwareInfo+0x6a>
 8000862:	f241 0201 	movw	r2, #4097	; 0x1001
 8000866:	4293      	cmp	r3, r2
 8000868:	d004      	beq.n	8000874 <collectHardwareInfo+0x4c>
 800086a:	f241 0203 	movw	r2, #4099	; 0x1003
 800086e:	4293      	cmp	r3, r2
 8000870:	d005      	beq.n	800087e <collectHardwareInfo+0x56>
 8000872:	e00e      	b.n	8000892 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8000874:	2101      	movs	r1, #1
 8000876:	482e      	ldr	r0, [pc, #184]	; (8000930 <collectHardwareInfo+0x108>)
 8000878:	f7ff ffa2 	bl	80007c0 <uartTransmit>
			break;
 800087c:	e011      	b.n	80008a2 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 800087e:	2101      	movs	r1, #1
 8000880:	482c      	ldr	r0, [pc, #176]	; (8000934 <collectHardwareInfo+0x10c>)
 8000882:	f7ff ff9d 	bl	80007c0 <uartTransmit>
			break;
 8000886:	e00c      	b.n	80008a2 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000888:	2101      	movs	r1, #1
 800088a:	482b      	ldr	r0, [pc, #172]	; (8000938 <collectHardwareInfo+0x110>)
 800088c:	f7ff ff98 	bl	80007c0 <uartTransmit>
			break;
 8000890:	e007      	b.n	80008a2 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 8000892:	f002 f91f 	bl	8002ad4 <HAL_GetREVID>
 8000896:	4603      	mov	r3, r0
 8000898:	210a      	movs	r1, #10
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ffa4 	bl	80007e8 <uartTransmitNumber>
			break;
 80008a0:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 80008a2:	2113      	movs	r1, #19
 80008a4:	4825      	ldr	r0, [pc, #148]	; (800093c <collectHardwareInfo+0x114>)
 80008a6:	f7ff ff8b 	bl	80007c0 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 80008aa:	f004 fab3 	bl	8004e14 <HAL_RCC_GetSysClockFreq>
 80008ae:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a23      	ldr	r2, [pc, #140]	; (8000940 <collectHardwareInfo+0x118>)
 80008b4:	fba2 2303 	umull	r2, r3, r2, r3
 80008b8:	0c9b      	lsrs	r3, r3, #18
 80008ba:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 80008bc:	210a      	movs	r1, #10
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ff92 	bl	80007e8 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80008c4:	2104      	movs	r1, #4
 80008c6:	481f      	ldr	r0, [pc, #124]	; (8000944 <collectHardwareInfo+0x11c>)
 80008c8:	f7ff ff7a 	bl	80007c0 <uartTransmit>


	uartTransmit("\n", 1);
 80008cc:	2101      	movs	r1, #1
 80008ce:	481e      	ldr	r0, [pc, #120]	; (8000948 <collectHardwareInfo+0x120>)
 80008d0:	f7ff ff76 	bl	80007c0 <uartTransmit>
	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80008d4:	210f      	movs	r1, #15
 80008d6:	481d      	ldr	r0, [pc, #116]	; (800094c <collectHardwareInfo+0x124>)
 80008d8:	f7ff ff72 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 80008dc:	f002 f914 	bl	8002b08 <HAL_GetUIDw0>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2110      	movs	r1, #16
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff7f 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80008ea:	2101      	movs	r1, #1
 80008ec:	4818      	ldr	r0, [pc, #96]	; (8000950 <collectHardwareInfo+0x128>)
 80008ee:	f7ff ff67 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 80008f2:	f002 f915 	bl	8002b20 <HAL_GetUIDw1>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2110      	movs	r1, #16
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ff74 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000900:	2101      	movs	r1, #1
 8000902:	4813      	ldr	r0, [pc, #76]	; (8000950 <collectHardwareInfo+0x128>)
 8000904:	f7ff ff5c 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000908:	f002 f916 	bl	8002b38 <HAL_GetUIDw2>
 800090c:	4603      	mov	r3, r0
 800090e:	2110      	movs	r1, #16
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ff69 	bl	80007e8 <uartTransmitNumber>

	uartTransmit("\n", 1);
 8000916:	2101      	movs	r1, #1
 8000918:	480b      	ldr	r0, [pc, #44]	; (8000948 <collectHardwareInfo+0x120>)
 800091a:	f7ff ff51 	bl	80007c0 <uartTransmit>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	08006ad0 	.word	0x08006ad0
 800092c:	08006ae4 	.word	0x08006ae4
 8000930:	08006afc 	.word	0x08006afc
 8000934:	08006b00 	.word	0x08006b00
 8000938:	08006b04 	.word	0x08006b04
 800093c:	08006b08 	.word	0x08006b08
 8000940:	431bde83 	.word	0x431bde83
 8000944:	08006b1c 	.word	0x08006b1c
 8000948:	08006b24 	.word	0x08006b24
 800094c:	08006b28 	.word	0x08006b28
 8000950:	08006b38 	.word	0x08006b38

08000954 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 8000958:	210f      	movs	r1, #15
 800095a:	4826      	ldr	r0, [pc, #152]	; (80009f4 <collectSoftwareInfo+0xa0>)
 800095c:	f7ff ff30 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000960:	2108      	movs	r1, #8
 8000962:	4825      	ldr	r0, [pc, #148]	; (80009f8 <collectSoftwareInfo+0xa4>)
 8000964:	f7ff ff2c 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000968:	210f      	movs	r1, #15
 800096a:	4824      	ldr	r0, [pc, #144]	; (80009fc <collectSoftwareInfo+0xa8>)
 800096c:	f7ff ff28 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000970:	2106      	movs	r1, #6
 8000972:	4823      	ldr	r0, [pc, #140]	; (8000a00 <collectSoftwareInfo+0xac>)
 8000974:	f7ff ff24 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000978:	210d      	movs	r1, #13
 800097a:	4822      	ldr	r0, [pc, #136]	; (8000a04 <collectSoftwareInfo+0xb0>)
 800097c:	f7ff ff20 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 8000980:	2129      	movs	r1, #41	; 0x29
 8000982:	4821      	ldr	r0, [pc, #132]	; (8000a08 <collectSoftwareInfo+0xb4>)
 8000984:	f7ff ff1c 	bl	80007c0 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000988:	2101      	movs	r1, #1
 800098a:	4820      	ldr	r0, [pc, #128]	; (8000a0c <collectSoftwareInfo+0xb8>)
 800098c:	f7ff ff18 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000990:	2115      	movs	r1, #21
 8000992:	481f      	ldr	r0, [pc, #124]	; (8000a10 <collectSoftwareInfo+0xbc>)
 8000994:	f7ff ff14 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 8000998:	2105      	movs	r1, #5
 800099a:	481e      	ldr	r0, [pc, #120]	; (8000a14 <collectSoftwareInfo+0xc0>)
 800099c:	f7ff ff10 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 80009a0:	2114      	movs	r1, #20
 80009a2:	481d      	ldr	r0, [pc, #116]	; (8000a18 <collectSoftwareInfo+0xc4>)
 80009a4:	f7ff ff0c 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 80009a8:	2108      	movs	r1, #8
 80009aa:	481c      	ldr	r0, [pc, #112]	; (8000a1c <collectSoftwareInfo+0xc8>)
 80009ac:	f7ff ff08 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 80009b0:	2115      	movs	r1, #21
 80009b2:	481b      	ldr	r0, [pc, #108]	; (8000a20 <collectSoftwareInfo+0xcc>)
 80009b4:	f7ff ff04 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 80009b8:	2111      	movs	r1, #17
 80009ba:	481a      	ldr	r0, [pc, #104]	; (8000a24 <collectSoftwareInfo+0xd0>)
 80009bc:	f7ff ff00 	bl	80007c0 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80009c0:	2101      	movs	r1, #1
 80009c2:	4812      	ldr	r0, [pc, #72]	; (8000a0c <collectSoftwareInfo+0xb8>)
 80009c4:	f7ff fefc 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80009c8:	210f      	movs	r1, #15
 80009ca:	4817      	ldr	r0, [pc, #92]	; (8000a28 <collectSoftwareInfo+0xd4>)
 80009cc:	f7ff fef8 	bl	80007c0 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 80009d0:	210b      	movs	r1, #11
 80009d2:	4816      	ldr	r0, [pc, #88]	; (8000a2c <collectSoftwareInfo+0xd8>)
 80009d4:	f7ff fef4 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80009d8:	210f      	movs	r1, #15
 80009da:	4815      	ldr	r0, [pc, #84]	; (8000a30 <collectSoftwareInfo+0xdc>)
 80009dc:	f7ff fef0 	bl	80007c0 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 80009e0:	2109      	movs	r1, #9
 80009e2:	4814      	ldr	r0, [pc, #80]	; (8000a34 <collectSoftwareInfo+0xe0>)
 80009e4:	f7ff feec 	bl	80007c0 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80009e8:	2101      	movs	r1, #1
 80009ea:	4808      	ldr	r0, [pc, #32]	; (8000a0c <collectSoftwareInfo+0xb8>)
 80009ec:	f7ff fee8 	bl	80007c0 <uartTransmit>
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	08006b3c 	.word	0x08006b3c
 80009f8:	08006b4c 	.word	0x08006b4c
 80009fc:	08006b54 	.word	0x08006b54
 8000a00:	08006b64 	.word	0x08006b64
 8000a04:	08006b6c 	.word	0x08006b6c
 8000a08:	08006b7c 	.word	0x08006b7c
 8000a0c:	08006b24 	.word	0x08006b24
 8000a10:	08006ba8 	.word	0x08006ba8
 8000a14:	08006bc0 	.word	0x08006bc0
 8000a18:	08006bc8 	.word	0x08006bc8
 8000a1c:	08006bdc 	.word	0x08006bdc
 8000a20:	08006be4 	.word	0x08006be4
 8000a24:	08006bfc 	.word	0x08006bfc
 8000a28:	08006c10 	.word	0x08006c10
 8000a2c:	08006c20 	.word	0x08006c20
 8000a30:	08006c2c 	.word	0x08006c2c
 8000a34:	08006c3c 	.word	0x08006c3c

08000a38 <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8000a3c:	2112      	movs	r1, #18
 8000a3e:	4824      	ldr	r0, [pc, #144]	; (8000ad0 <collectMiddlewareInfo+0x98>)
 8000a40:	f7ff febe 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8000a44:	210a      	movs	r1, #10
 8000a46:	2005      	movs	r0, #5
 8000a48:	f7ff fece 	bl	80007e8 <uartTransmitNumber>
	uartTransmit(".", 1);
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	4821      	ldr	r0, [pc, #132]	; (8000ad4 <collectMiddlewareInfo+0x9c>)
 8000a50:	f7ff feb6 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8000a54:	210a      	movs	r1, #10
 8000a56:	2001      	movs	r0, #1
 8000a58:	f7ff fec6 	bl	80007e8 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8000a5c:	2110      	movs	r1, #16
 8000a5e:	481e      	ldr	r0, [pc, #120]	; (8000ad8 <collectMiddlewareInfo+0xa0>)
 8000a60:	f7ff feae 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8000a64:	f002 f82c 	bl	8002ac0 <HAL_GetHalVersion>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	0e1b      	lsrs	r3, r3, #24
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	210a      	movs	r1, #10
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff feb9 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000a76:	2101      	movs	r1, #1
 8000a78:	4816      	ldr	r0, [pc, #88]	; (8000ad4 <collectMiddlewareInfo+0x9c>)
 8000a7a:	f7ff fea1 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000a7e:	f002 f81f 	bl	8002ac0 <HAL_GetHalVersion>
 8000a82:	4603      	mov	r3, r0
 8000a84:	0c1b      	lsrs	r3, r3, #16
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	210a      	movs	r1, #10
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff feac 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000a90:	2101      	movs	r1, #1
 8000a92:	4810      	ldr	r0, [pc, #64]	; (8000ad4 <collectMiddlewareInfo+0x9c>)
 8000a94:	f7ff fe94 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000a98:	f002 f812 	bl	8002ac0 <HAL_GetHalVersion>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	0a1b      	lsrs	r3, r3, #8
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	210a      	movs	r1, #10
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fe9f 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000aaa:	2101      	movs	r1, #1
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <collectMiddlewareInfo+0x9c>)
 8000aae:	f7ff fe87 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000ab2:	f002 f805 	bl	8002ac0 <HAL_GetHalVersion>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	210a      	movs	r1, #10
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fe93 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <collectMiddlewareInfo+0xa4>)
 8000ac6:	f7ff fe7b 	bl	80007c0 <uartTransmit>
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	08006c48 	.word	0x08006c48
 8000ad4:	08006c5c 	.word	0x08006c5c
 8000ad8:	08006c60 	.word	0x08006c60
 8000adc:	08006b24 	.word	0x08006b24

08000ae0 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 8000ae4:	2114      	movs	r1, #20
 8000ae6:	4814      	ldr	r0, [pc, #80]	; (8000b38 <collectGitcounts+0x58>)
 8000ae8:	f7ff fe6a 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8000aec:	2103      	movs	r1, #3
 8000aee:	4813      	ldr	r0, [pc, #76]	; (8000b3c <collectGitcounts+0x5c>)
 8000af0:	f7ff fe66 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 8000af4:	2116      	movs	r1, #22
 8000af6:	4812      	ldr	r0, [pc, #72]	; (8000b40 <collectGitcounts+0x60>)
 8000af8:	f7ff fe62 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8000afc:	2103      	movs	r1, #3
 8000afe:	4811      	ldr	r0, [pc, #68]	; (8000b44 <collectGitcounts+0x64>)
 8000b00:	f7ff fe5e 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 8000b04:	211c      	movs	r1, #28
 8000b06:	4810      	ldr	r0, [pc, #64]	; (8000b48 <collectGitcounts+0x68>)
 8000b08:	f7ff fe5a 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8000b0c:	2103      	movs	r1, #3
 8000b0e:	480f      	ldr	r0, [pc, #60]	; (8000b4c <collectGitcounts+0x6c>)
 8000b10:	f7ff fe56 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000b14:	2115      	movs	r1, #21
 8000b16:	480e      	ldr	r0, [pc, #56]	; (8000b50 <collectGitcounts+0x70>)
 8000b18:	f7ff fe52 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <collectGitcounts+0x74>)
 8000b20:	f7ff fe4e 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000b24:	2114      	movs	r1, #20
 8000b26:	480c      	ldr	r0, [pc, #48]	; (8000b58 <collectGitcounts+0x78>)
 8000b28:	f7ff fe4a 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	480b      	ldr	r0, [pc, #44]	; (8000b5c <collectGitcounts+0x7c>)
 8000b30:	f7ff fe46 	bl	80007c0 <uartTransmit>
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	08006c70 	.word	0x08006c70
 8000b3c:	08006c84 	.word	0x08006c84
 8000b40:	08006c88 	.word	0x08006c88
 8000b44:	08006ca0 	.word	0x08006ca0
 8000b48:	08006ca4 	.word	0x08006ca4
 8000b4c:	08006cc0 	.word	0x08006cc0
 8000b50:	08006ba8 	.word	0x08006ba8
 8000b54:	08006cc4 	.word	0x08006cc4
 8000b58:	08006bc8 	.word	0x08006bc8
 8000b5c:	08006cc8 	.word	0x08006cc8

08000b60 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000b64:	2111      	movs	r1, #17
 8000b66:	480e      	ldr	r0, [pc, #56]	; (8000ba0 <collectSystemInfo+0x40>)
 8000b68:	f7ff fe2a 	bl	80007c0 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000b6c:	f7ff fe5c 	bl	8000828 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000b70:	2111      	movs	r1, #17
 8000b72:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <collectSystemInfo+0x44>)
 8000b74:	f7ff fe24 	bl	80007c0 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8000b78:	f7ff feec 	bl	8000954 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000b7c:	2113      	movs	r1, #19
 8000b7e:	480a      	ldr	r0, [pc, #40]	; (8000ba8 <collectSystemInfo+0x48>)
 8000b80:	f7ff fe1e 	bl	80007c0 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000b84:	f7ff ff58 	bl	8000a38 <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8000b88:	2113      	movs	r1, #19
 8000b8a:	4808      	ldr	r0, [pc, #32]	; (8000bac <collectSystemInfo+0x4c>)
 8000b8c:	f7ff fe18 	bl	80007c0 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8000b90:	f7ff ffa6 	bl	8000ae0 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 8000b94:	2103      	movs	r1, #3
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <collectSystemInfo+0x50>)
 8000b98:	f7ff fe12 	bl	80007c0 <uartTransmit>
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	08006ccc 	.word	0x08006ccc
 8000ba4:	08006ce0 	.word	0x08006ce0
 8000ba8:	08006cf4 	.word	0x08006cf4
 8000bac:	08006d08 	.word	0x08006d08
 8000bb0:	08006d1c 	.word	0x08006d1c

08000bb4 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000bbe:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <readResetSource+0xa0>)
 8000bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d002      	beq.n	8000bd0 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000bd0:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <readResetSource+0xa0>)
 8000bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d002      	beq.n	8000be2 <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	3302      	adds	r3, #2
 8000be0:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <readResetSource+0xa0>)
 8000be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	da02      	bge.n	8000bf0 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	3304      	adds	r3, #4
 8000bee:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000bf0:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <readResetSource+0xa0>)
 8000bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d002      	beq.n	8000c02 <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	3308      	adds	r3, #8
 8000c00:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <readResetSource+0xa0>)
 8000c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d002      	beq.n	8000c14 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	3310      	adds	r3, #16
 8000c12:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <readResetSource+0xa0>)
 8000c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d002      	beq.n	8000c26 <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	3320      	adds	r3, #32
 8000c24:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <readResetSource+0xa0>)
 8000c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d002      	beq.n	8000c38 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	3340      	adds	r3, #64	; 0x40
 8000c36:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <readResetSource+0xa0>)
 8000c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c3c:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <readResetSource+0xa0>)
 8000c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c42:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8000c44:	79fb      	ldrb	r3, [r7, #7]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800

08000c58 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8000c62:	2106      	movs	r1, #6
 8000c64:	482a      	ldr	r0, [pc, #168]	; (8000d10 <printResetSource+0xb8>)
 8000c66:	f7ff fdab 	bl	80007c0 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d104      	bne.n	8000c7a <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8000c70:	210f      	movs	r1, #15
 8000c72:	4828      	ldr	r0, [pc, #160]	; (8000d14 <printResetSource+0xbc>)
 8000c74:	f7ff fda4 	bl	80007c0 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8000c78:	e046      	b.n	8000d08 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000c84:	2118      	movs	r1, #24
 8000c86:	4824      	ldr	r0, [pc, #144]	; (8000d18 <printResetSource+0xc0>)
 8000c88:	f7ff fd9a 	bl	80007c0 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d003      	beq.n	8000c9e <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000c96:	2116      	movs	r1, #22
 8000c98:	4820      	ldr	r0, [pc, #128]	; (8000d1c <printResetSource+0xc4>)
 8000c9a:	f7ff fd91 	bl	80007c0 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 0304 	and.w	r3, r3, #4
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d003      	beq.n	8000cb0 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8000ca8:	210a      	movs	r1, #10
 8000caa:	481d      	ldr	r0, [pc, #116]	; (8000d20 <printResetSource+0xc8>)
 8000cac:	f7ff fd88 	bl	80007c0 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8000cba:	2110      	movs	r1, #16
 8000cbc:	4819      	ldr	r0, [pc, #100]	; (8000d24 <printResetSource+0xcc>)
 8000cbe:	f7ff fd7f 	bl	80007c0 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d003      	beq.n	8000cd4 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000ccc:	210f      	movs	r1, #15
 8000cce:	4816      	ldr	r0, [pc, #88]	; (8000d28 <printResetSource+0xd0>)
 8000cd0:	f7ff fd76 	bl	80007c0 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f003 0320 	and.w	r3, r3, #32
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000cde:	210f      	movs	r1, #15
 8000ce0:	4812      	ldr	r0, [pc, #72]	; (8000d2c <printResetSource+0xd4>)
 8000ce2:	f7ff fd6d 	bl	80007c0 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d003      	beq.n	8000cf8 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000cf0:	210a      	movs	r1, #10
 8000cf2:	480f      	ldr	r0, [pc, #60]	; (8000d30 <printResetSource+0xd8>)
 8000cf4:	f7ff fd64 	bl	80007c0 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	da03      	bge.n	8000d08 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000d00:	2105      	movs	r1, #5
 8000d02:	480c      	ldr	r0, [pc, #48]	; (8000d34 <printResetSource+0xdc>)
 8000d04:	f7ff fd5c 	bl	80007c0 <uartTransmit>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	08006d20 	.word	0x08006d20
 8000d14:	08006d28 	.word	0x08006d28
 8000d18:	08006d38 	.word	0x08006d38
 8000d1c:	08006d54 	.word	0x08006d54
 8000d20:	08006d6c 	.word	0x08006d6c
 8000d24:	08006d78 	.word	0x08006d78
 8000d28:	08006d8c 	.word	0x08006d8c
 8000d2c:	08006d9c 	.word	0x08006d9c
 8000d30:	08006dac 	.word	0x08006dac
 8000d34:	08006db8 	.word	0x08006db8

08000d38 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d44:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d013      	beq.n	8000d78 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d50:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d54:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d58:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d00b      	beq.n	8000d78 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d60:	e000      	b.n	8000d64 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d62:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0f9      	beq.n	8000d62 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d6e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d78:	687b      	ldr	r3, [r7, #4]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <ADC_Gaspedal>:
//----------------------------------------------------------------------

// Gaspedal einlesen
//----------------------------------------------------------------------
uint16_t ADC_Gaspedal(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC von Gaspedal einlesen\n");
 8000d8e:	481d      	ldr	r0, [pc, #116]	; (8000e04 <ADC_Gaspedal+0x7c>)
 8000d90:	f000 f930 	bl	8000ff4 <ITM_SendString>
#endif

	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_6;
 8000da4:	2306      	movs	r3, #6
 8000da6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000da8:	2301      	movs	r3, #1
 8000daa:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000dac:	2301      	movs	r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	4619      	mov	r1, r3
 8000db4:	4814      	ldr	r0, [pc, #80]	; (8000e08 <ADC_Gaspedal+0x80>)
 8000db6:	f002 f8a9 	bl	8002f0c <HAL_ADC_ConfigChannel>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <ADC_Gaspedal+0x3c>
	{
		Error_Handler();
 8000dc0:	f001 fc44 	bl	800264c <Error_Handler>
	}

	// ADC Starten und Wert einlesen
	HAL_ADC_Start(&hadc1);
 8000dc4:	4810      	ldr	r0, [pc, #64]	; (8000e08 <ADC_Gaspedal+0x80>)
 8000dc6:	f001 ff07 	bl	8002bd8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000dca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dce:	480e      	ldr	r0, [pc, #56]	; (8000e08 <ADC_Gaspedal+0x80>)
 8000dd0:	f002 f804 	bl	8002ddc <HAL_ADC_PollForConversion>
	ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000dd4:	480c      	ldr	r0, [pc, #48]	; (8000e08 <ADC_Gaspedal+0x80>)
 8000dd6:	f002 f88c 	bl	8002ef2 <HAL_ADC_GetValue>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	82fb      	strh	r3, [r7, #22]
	HAL_ADC_Stop(&hadc1);
 8000dde:	480a      	ldr	r0, [pc, #40]	; (8000e08 <ADC_Gaspedal+0x80>)
 8000de0:	f001 ffc8 	bl	8002d74 <HAL_ADC_Stop>

#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC-Wert Gaspedal:\t");
 8000de4:	4809      	ldr	r0, [pc, #36]	; (8000e0c <ADC_Gaspedal+0x84>)
 8000de6:	f000 f905 	bl	8000ff4 <ITM_SendString>
	ITM_SendNumber(ADC_Data);
 8000dea:	8afb      	ldrh	r3, [r7, #22]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 f90b 	bl	8001008 <ITM_SendNumber>
	ITM_SendChar('\n');
 8000df2:	200a      	movs	r0, #10
 8000df4:	f7ff ffa0 	bl	8000d38 <ITM_SendChar>
#endif

	//ADC Wert zurueck geben
	return ADC_Data;
 8000df8:	8afb      	ldrh	r3, [r7, #22]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	08006dc0 	.word	0x08006dc0
 8000e08:	20000058 	.word	0x20000058
 8000e0c:	08006ddc 	.word	0x08006ddc

08000e10 <ADC_Bremsdruck>:
//----------------------------------------------------------------------

// Bremsdruck einlesen
//----------------------------------------------------------------------
uint16_t ADC_Bremsdruck(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC von Bremsdruck einlesen\n");
 8000e16:	481d      	ldr	r0, [pc, #116]	; (8000e8c <ADC_Bremsdruck+0x7c>)
 8000e18:	f000 f8ec 	bl	8000ff4 <ITM_SendString>
#endif

	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_14;
 8000e2c:	230e      	movs	r3, #14
 8000e2e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000e30:	2301      	movs	r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000e34:	2301      	movs	r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4814      	ldr	r0, [pc, #80]	; (8000e90 <ADC_Bremsdruck+0x80>)
 8000e3e:	f002 f865 	bl	8002f0c <HAL_ADC_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <ADC_Bremsdruck+0x3c>
	{
		Error_Handler();
 8000e48:	f001 fc00 	bl	800264c <Error_Handler>
	}

	// ADC Starten und Wert einlesen
	HAL_ADC_Start(&hadc1);
 8000e4c:	4810      	ldr	r0, [pc, #64]	; (8000e90 <ADC_Bremsdruck+0x80>)
 8000e4e:	f001 fec3 	bl	8002bd8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000e52:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e56:	480e      	ldr	r0, [pc, #56]	; (8000e90 <ADC_Bremsdruck+0x80>)
 8000e58:	f001 ffc0 	bl	8002ddc <HAL_ADC_PollForConversion>
	ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000e5c:	480c      	ldr	r0, [pc, #48]	; (8000e90 <ADC_Bremsdruck+0x80>)
 8000e5e:	f002 f848 	bl	8002ef2 <HAL_ADC_GetValue>
 8000e62:	4603      	mov	r3, r0
 8000e64:	82fb      	strh	r3, [r7, #22]
	HAL_ADC_Stop(&hadc1);
 8000e66:	480a      	ldr	r0, [pc, #40]	; (8000e90 <ADC_Bremsdruck+0x80>)
 8000e68:	f001 ff84 	bl	8002d74 <HAL_ADC_Stop>

#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC-Wert Bremsdruck:\t");
 8000e6c:	4809      	ldr	r0, [pc, #36]	; (8000e94 <ADC_Bremsdruck+0x84>)
 8000e6e:	f000 f8c1 	bl	8000ff4 <ITM_SendString>
	ITM_SendNumber(ADC_Data);
 8000e72:	8afb      	ldrh	r3, [r7, #22]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 f8c7 	bl	8001008 <ITM_SendNumber>
	ITM_SendChar('\n');
 8000e7a:	200a      	movs	r0, #10
 8000e7c:	f7ff ff5c 	bl	8000d38 <ITM_SendChar>
#endif

	//ADC Wert zurueck geben
	return ADC_Data;
 8000e80:	8afb      	ldrh	r3, [r7, #22]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	08006df0 	.word	0x08006df0
 8000e90:	20000058 	.word	0x20000058
 8000e94:	08006e10 	.word	0x08006e10

08000e98 <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <software_error>:
//----------------------------------------------------------------------

// Diagnose Funktion falls ein Fehler auftritt
//----------------------------------------------------------------------
void software_error(uint8_t errorcode)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eba:	b672      	cpsid	i
}
 8000ebc:	bf00      	nop
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8000ebe:	4a1e      	ldr	r2, [pc, #120]	; (8000f38 <software_error+0x88>)
 8000ec0:	7853      	ldrb	r3, [r2, #1]
 8000ec2:	f043 0308 	orr.w	r3, r3, #8
 8000ec6:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <software_error+0x88>)
 8000eca:	785b      	ldrb	r3, [r3, #1]
 8000ecc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	2104      	movs	r1, #4
 8000ed6:	4819      	ldr	r0, [pc, #100]	; (8000f3c <software_error+0x8c>)
 8000ed8:	f003 fb98 	bl	800460c <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8000edc:	4a16      	ldr	r2, [pc, #88]	; (8000f38 <software_error+0x88>)
 8000ede:	7853      	ldrb	r3, [r2, #1]
 8000ee0:	f36f 1304 	bfc	r3, #4, #1
 8000ee4:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// OK LED ausschalten
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <software_error+0x88>)
 8000ee8:	785b      	ldrb	r3, [r3, #1]
 8000eea:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ef6:	4811      	ldr	r0, [pc, #68]	; (8000f3c <software_error+0x8c>)
 8000ef8:	f003 fb88 	bl	800460c <HAL_GPIO_WritePin>

	// Schalte SDC_Motor aus
	system_out.MotorSDC = 0;												// Zuruecksetzen Variable
 8000efc:	4a10      	ldr	r2, [pc, #64]	; (8000f40 <software_error+0x90>)
 8000efe:	7813      	ldrb	r3, [r2, #0]
 8000f00:	f36f 1345 	bfc	r3, #5, #1
 8000f04:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, system_out.MotorSDC);// SDC oeffnen
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <software_error+0x90>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	461a      	mov	r2, r3
 8000f12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f16:	480b      	ldr	r0, [pc, #44]	; (8000f44 <software_error+0x94>)
 8000f18:	f003 fb78 	bl	800460c <HAL_GPIO_WritePin>
#ifdef DEBUG																// Serielle Kommunukation nur waehrend Debugging
#define SOFTERRORMESSAGE			"\nSoftware Error Handler ausgeloest\n"	// Ausgabe das Fehler aufgetreten ist
	uartTransmit(SOFTERRORMESSAGE,sizeof(SOFTERRORMESSAGE));
 8000f1c:	2124      	movs	r1, #36	; 0x24
 8000f1e:	480a      	ldr	r0, [pc, #40]	; (8000f48 <software_error+0x98>)
 8000f20:	f7ff fc4e 	bl	80007c0 <uartTransmit>

#define ERRORCODE					"Error Code:\t"							// Ausgabe des Fehlers anhand von Fehlercode
	uartTransmit(ERRORCODE,sizeof(ERRORCODE));
 8000f24:	210d      	movs	r1, #13
 8000f26:	4809      	ldr	r0, [pc, #36]	; (8000f4c <software_error+0x9c>)
 8000f28:	f7ff fc4a 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(errorcode, 10);										// Fehlercode ausgeben
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	210a      	movs	r1, #10
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fc59 	bl	80007e8 <uartTransmitNumber>
#endif
	while (1);																// Endlosschleife
 8000f36:	e7fe      	b.n	8000f36 <software_error+0x86>
 8000f38:	20000050 	.word	0x20000050
 8000f3c:	40020400 	.word	0x40020400
 8000f40:	20000048 	.word	0x20000048
 8000f44:	40021000 	.word	0x40021000
 8000f48:	08006e28 	.word	0x08006e28
 8000f4c:	08006e4c 	.word	0x08006e4c

08000f50 <software_error_debug>:
//----------------------------------------------------------------------

// Diagnose Funktion falls ein Fehler auftritt (Nur Debugzwecke)
//----------------------------------------------------------------------
void software_error_debug(uint8_t errorcode)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8000f5a:	4a20      	ldr	r2, [pc, #128]	; (8000fdc <software_error_debug+0x8c>)
 8000f5c:	7853      	ldrb	r3, [r2, #1]
 8000f5e:	f043 0308 	orr.w	r3, r3, #8
 8000f62:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8000f64:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <software_error_debug+0x8c>)
 8000f66:	785b      	ldrb	r3, [r3, #1]
 8000f68:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	461a      	mov	r2, r3
 8000f70:	2104      	movs	r1, #4
 8000f72:	481b      	ldr	r0, [pc, #108]	; (8000fe0 <software_error_debug+0x90>)
 8000f74:	f003 fb4a 	bl	800460c <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8000f78:	4a18      	ldr	r2, [pc, #96]	; (8000fdc <software_error_debug+0x8c>)
 8000f7a:	7853      	ldrb	r3, [r2, #1]
 8000f7c:	f36f 1304 	bfc	r3, #4, #1
 8000f80:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// OK LED ausschalten
 8000f82:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <software_error_debug+0x8c>)
 8000f84:	785b      	ldrb	r3, [r3, #1]
 8000f86:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f92:	4813      	ldr	r0, [pc, #76]	; (8000fe0 <software_error_debug+0x90>)
 8000f94:	f003 fb3a 	bl	800460c <HAL_GPIO_WritePin>

	// Schalte SDC_Motor aus
	system_out.MotorSDC = 0;												// Zuruecksetzen Variable
 8000f98:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <software_error_debug+0x94>)
 8000f9a:	7813      	ldrb	r3, [r2, #0]
 8000f9c:	f36f 1345 	bfc	r3, #5, #1
 8000fa0:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, system_out.MotorSDC);// SDC oeffnen
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <software_error_debug+0x94>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fb2:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <software_error_debug+0x98>)
 8000fb4:	f003 fb2a 	bl	800460c <HAL_GPIO_WritePin>
#ifdef DEBUG																// Serielle Kommunukation nur waehrend Debugging
#define SOFTERRORMESSAGE			"\nSoftware Error Handler ausgeloest\n"	// Ausgabe das Fehler aufgetreten ist
	uartTransmit(SOFTERRORMESSAGE,sizeof(SOFTERRORMESSAGE));
 8000fb8:	2124      	movs	r1, #36	; 0x24
 8000fba:	480c      	ldr	r0, [pc, #48]	; (8000fec <software_error_debug+0x9c>)
 8000fbc:	f7ff fc00 	bl	80007c0 <uartTransmit>

#define ERRORCODE					"Error Code:\t"							// Ausgabe des Fehlers anhand von Fehlercode
	uartTransmit(ERRORCODE,sizeof(ERRORCODE));
 8000fc0:	210d      	movs	r1, #13
 8000fc2:	480b      	ldr	r0, [pc, #44]	; (8000ff0 <software_error_debug+0xa0>)
 8000fc4:	f7ff fbfc 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(errorcode, 10);										// Fehlercode ausgeben
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	210a      	movs	r1, #10
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fc0b 	bl	80007e8 <uartTransmitNumber>
#endif
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000050 	.word	0x20000050
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	20000048 	.word	0x20000048
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	08006e28 	.word	0x08006e28
 8000ff0:	08006e4c 	.word	0x08006e4c

08000ff4 <ITM_SendString>:
// Nachricht SWO ITM Data Console
// Core Clock := Maximalfrequenz ; HCLK fuer Serial Wire Viewer
// Im String #GRN# oder #RED# oder #ORG# erscheint die Nachricht in einer Farbe
//----------------------------------------------------------------------
void ITM_SendString(char *text)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	{
		ITM_SendChar(*text);												// Sende ITM Zeichen
		text++;																// Pointer hochzaehlen
	}
#endif
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <ITM_SendNumber>:
//----------------------------------------------------------------------

// Debug Nummer ueber SWO senden
//----------------------------------------------------------------------
void ITM_SendNumber(long number)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	for(; i > 0; i--)
	{
		ITM_SendChar('0' + buf[i-1]);
	}
#endif
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <ITM_SendChar>:
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001024:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001028:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	2b00      	cmp	r3, #0
 8001032:	d013      	beq.n	800105c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001034:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001038:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800103c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001040:	2b00      	cmp	r3, #0
 8001042:	d00b      	beq.n	800105c <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 8001044:	e000      	b.n	8001048 <ITM_SendChar+0x2c>
      __NOP();
 8001046:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001048:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0f9      	beq.n	8001046 <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001052:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	701a      	strb	r2, [r3, #0]
  return (ch);
 800105c:	687b      	ldr	r3, [r7, #4]
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <readall_inputs>:
//----------------------------------------------------------------------

// Alle Eingaenge einlesen und speichern
//----------------------------------------------------------------------
void readall_inputs(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
#ifdef DEBUG_INPUT
	ITM_SendString("Lese Inputs ein\n");
 8001070:	48cf      	ldr	r0, [pc, #828]	; (80013b0 <readall_inputs+0x344>)
 8001072:	f7ff ffbf 	bl	8000ff4 <ITM_SendString>
#endif

	// Systemeingaenge einlesen
	system_in.Kickdown = HAL_GPIO_ReadPin(KICKDOWN_GPIO_Port, KICKDOWN_Pin);					// Eingang Gaspedal getreten
 8001076:	f44f 7180 	mov.w	r1, #256	; 0x100
 800107a:	48ce      	ldr	r0, [pc, #824]	; (80013b4 <readall_inputs+0x348>)
 800107c:	f003 faae 	bl	80045dc <HAL_GPIO_ReadPin>
 8001080:	4603      	mov	r3, r0
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	b2d9      	uxtb	r1, r3
 8001088:	4acb      	ldr	r2, [pc, #812]	; (80013b8 <readall_inputs+0x34c>)
 800108a:	7813      	ldrb	r3, [r2, #0]
 800108c:	f361 0300 	bfi	r3, r1, #0, #1
 8001090:	7013      	strb	r3, [r2, #0]
	system_in.Leerlauf = HAL_GPIO_ReadPin(LEERLAUF_GPIO_Port, LEERLAUF_Pin);					// Eingang Gaspedal nicht getreten
 8001092:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001096:	48c7      	ldr	r0, [pc, #796]	; (80013b4 <readall_inputs+0x348>)
 8001098:	f003 faa0 	bl	80045dc <HAL_GPIO_ReadPin>
 800109c:	4603      	mov	r3, r0
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	b2d9      	uxtb	r1, r3
 80010a4:	4ac4      	ldr	r2, [pc, #784]	; (80013b8 <readall_inputs+0x34c>)
 80010a6:	7813      	ldrb	r3, [r2, #0]
 80010a8:	f361 0341 	bfi	r3, r1, #1, #1
 80010ac:	7013      	strb	r3, [r2, #0]
	system_in.BremseNO = HAL_GPIO_ReadPin(BREMSE_NO_GPIO_Port, BREMSE_NO_Pin);					// Eingang Bremse nicht getreten
 80010ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b2:	48c0      	ldr	r0, [pc, #768]	; (80013b4 <readall_inputs+0x348>)
 80010b4:	f003 fa92 	bl	80045dc <HAL_GPIO_ReadPin>
 80010b8:	4603      	mov	r3, r0
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	b2d9      	uxtb	r1, r3
 80010c0:	4abd      	ldr	r2, [pc, #756]	; (80013b8 <readall_inputs+0x34c>)
 80010c2:	7813      	ldrb	r3, [r2, #0]
 80010c4:	f361 0382 	bfi	r3, r1, #2, #1
 80010c8:	7013      	strb	r3, [r2, #0]
	system_in.BremseNC = HAL_GPIO_ReadPin(BREMSE_NC_GPIO_Port, BREMSE_NC_Pin);					// Eingang Bremse getreten
 80010ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ce:	48b9      	ldr	r0, [pc, #740]	; (80013b4 <readall_inputs+0x348>)
 80010d0:	f003 fa84 	bl	80045dc <HAL_GPIO_ReadPin>
 80010d4:	4603      	mov	r3, r0
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	b2d9      	uxtb	r1, r3
 80010dc:	4ab6      	ldr	r2, [pc, #728]	; (80013b8 <readall_inputs+0x34c>)
 80010de:	7813      	ldrb	r3, [r2, #0]
 80010e0:	f361 03c3 	bfi	r3, r1, #3, #1
 80010e4:	7013      	strb	r3, [r2, #0]
	system_in.Kupplung = HAL_GPIO_ReadPin(KUPPLUNG_NO_GPIO_Port, KUPPLUNG_NO_Pin);				// Eingang Kupplung nicht getreten
 80010e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ea:	48b2      	ldr	r0, [pc, #712]	; (80013b4 <readall_inputs+0x348>)
 80010ec:	f003 fa76 	bl	80045dc <HAL_GPIO_ReadPin>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	b2d9      	uxtb	r1, r3
 80010f8:	4aaf      	ldr	r2, [pc, #700]	; (80013b8 <readall_inputs+0x34c>)
 80010fa:	7813      	ldrb	r3, [r2, #0]
 80010fc:	f361 1304 	bfi	r3, r1, #4, #1
 8001100:	7013      	strb	r3, [r2, #0]
	system_in.Recuperation = HAL_GPIO_ReadPin(RECUPERATION_GPIO_Port, RECUPERATION_Pin);		// Eingang Recuperation
 8001102:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001106:	48ad      	ldr	r0, [pc, #692]	; (80013bc <readall_inputs+0x350>)
 8001108:	f003 fa68 	bl	80045dc <HAL_GPIO_ReadPin>
 800110c:	4603      	mov	r3, r0
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	b2d9      	uxtb	r1, r3
 8001114:	4aa8      	ldr	r2, [pc, #672]	; (80013b8 <readall_inputs+0x34c>)
 8001116:	7813      	ldrb	r3, [r2, #0]
 8001118:	f361 1345 	bfi	r3, r1, #5, #1
 800111c:	7013      	strb	r3, [r2, #0]
	system_in.ECON = HAL_GPIO_ReadPin(ECON_GPIO_Port, ECON_Pin);								// Eingang Klima
 800111e:	2102      	movs	r1, #2
 8001120:	48a6      	ldr	r0, [pc, #664]	; (80013bc <readall_inputs+0x350>)
 8001122:	f003 fa5b 	bl	80045dc <HAL_GPIO_ReadPin>
 8001126:	4603      	mov	r3, r0
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	b2d9      	uxtb	r1, r3
 800112e:	4aa2      	ldr	r2, [pc, #648]	; (80013b8 <readall_inputs+0x34c>)
 8001130:	7813      	ldrb	r3, [r2, #0]
 8001132:	f361 1386 	bfi	r3, r1, #6, #1
 8001136:	7013      	strb	r3, [r2, #0]
	system_in.Anlasser = HAL_GPIO_ReadPin(ANLASSER_GPIO_Port, ANLASSER_Pin);					// Eingang Zuendschloss, Motor starten
 8001138:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800113c:	48a0      	ldr	r0, [pc, #640]	; (80013c0 <readall_inputs+0x354>)
 800113e:	f003 fa4d 	bl	80045dc <HAL_GPIO_ReadPin>
 8001142:	4603      	mov	r3, r0
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	b2d9      	uxtb	r1, r3
 800114a:	4a9b      	ldr	r2, [pc, #620]	; (80013b8 <readall_inputs+0x34c>)
 800114c:	7813      	ldrb	r3, [r2, #0]
 800114e:	f361 13c7 	bfi	r3, r1, #7, #1
 8001152:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8001154:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001158:	489a      	ldr	r0, [pc, #616]	; (80013c4 <readall_inputs+0x358>)
 800115a:	f003 fa3f 	bl	80045dc <HAL_GPIO_ReadPin>
 800115e:	4603      	mov	r3, r0
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	b2d9      	uxtb	r1, r3
 8001166:	4a94      	ldr	r2, [pc, #592]	; (80013b8 <readall_inputs+0x34c>)
 8001168:	7853      	ldrb	r3, [r2, #1]
 800116a:	f361 0300 	bfi	r3, r1, #0, #1
 800116e:	7053      	strb	r3, [r2, #1]
	system_in.DCDC_Inst = HAL_GPIO_ReadPin(DCDC_INSTRUCTION_GPIO_Port, DCDC_INSTRUCTION_Pin);	// DCDC Wandler funktioniert einwandfrei
 8001170:	2101      	movs	r1, #1
 8001172:	4895      	ldr	r0, [pc, #596]	; (80013c8 <readall_inputs+0x35c>)
 8001174:	f003 fa32 	bl	80045dc <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	b2d9      	uxtb	r1, r3
 8001180:	4a8d      	ldr	r2, [pc, #564]	; (80013b8 <readall_inputs+0x34c>)
 8001182:	7853      	ldrb	r3, [r2, #1]
 8001184:	f361 0341 	bfi	r3, r1, #1, #1
 8001188:	7053      	strb	r3, [r2, #1]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 800118a:	2101      	movs	r1, #1
 800118c:	488b      	ldr	r0, [pc, #556]	; (80013bc <readall_inputs+0x350>)
 800118e:	f003 fa25 	bl	80045dc <HAL_GPIO_ReadPin>
 8001192:	4603      	mov	r3, r0
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	b2d9      	uxtb	r1, r3
 800119a:	4a87      	ldr	r2, [pc, #540]	; (80013b8 <readall_inputs+0x34c>)
 800119c:	7853      	ldrb	r3, [r2, #1]
 800119e:	f361 0382 	bfi	r3, r1, #2, #1
 80011a2:	7053      	strb	r3, [r2, #1]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 80011a4:	2140      	movs	r1, #64	; 0x40
 80011a6:	4883      	ldr	r0, [pc, #524]	; (80013b4 <readall_inputs+0x348>)
 80011a8:	f003 fa18 	bl	80045dc <HAL_GPIO_ReadPin>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	b2d9      	uxtb	r1, r3
 80011b4:	4a80      	ldr	r2, [pc, #512]	; (80013b8 <readall_inputs+0x34c>)
 80011b6:	7853      	ldrb	r3, [r2, #1]
 80011b8:	f361 03c3 	bfi	r3, r1, #3, #1
 80011bc:	7053      	strb	r3, [r2, #1]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 80011be:	2101      	movs	r1, #1
 80011c0:	4882      	ldr	r0, [pc, #520]	; (80013cc <readall_inputs+0x360>)
 80011c2:	f003 fa0b 	bl	80045dc <HAL_GPIO_ReadPin>
 80011c6:	4603      	mov	r3, r0
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	b2d9      	uxtb	r1, r3
 80011ce:	4a7a      	ldr	r2, [pc, #488]	; (80013b8 <readall_inputs+0x34c>)
 80011d0:	7853      	ldrb	r3, [r2, #1]
 80011d2:	f361 1304 	bfi	r3, r1, #4, #1
 80011d6:	7053      	strb	r3, [r2, #1]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 80011d8:	2104      	movs	r1, #4
 80011da:	487c      	ldr	r0, [pc, #496]	; (80013cc <readall_inputs+0x360>)
 80011dc:	f003 f9fe 	bl	80045dc <HAL_GPIO_ReadPin>
 80011e0:	4603      	mov	r3, r0
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	b2d9      	uxtb	r1, r3
 80011e8:	4a73      	ldr	r2, [pc, #460]	; (80013b8 <readall_inputs+0x34c>)
 80011ea:	7853      	ldrb	r3, [r2, #1]
 80011ec:	f361 1345 	bfi	r3, r1, #5, #1
 80011f0:	7053      	strb	r3, [r2, #1]
//	system_in.Bremsdruck_NO = HAL_GPIO_ReadPin(Bremsdruck_NO_GPIO_Port, Bremsdruck_NO_Pin);		// Bremsdruck nicht zu hoch
//	system_in.Bremsdruck_NC = HAL_GPIO_ReadPin(Bremsdruck_NC_GPIO_Port, Bremsdruck_NC_Pin);		// Bremsdruck zu hoch

	// SDC-Eingaenge einlesen
	sdc_in.EmergencyRun = HAL_GPIO_ReadPin(EMERGENCY_RUN_GPIO_Port, EMERGENCY_RUN_Pin);			// Emergency Run, Akku
 80011f2:	2102      	movs	r1, #2
 80011f4:	4875      	ldr	r0, [pc, #468]	; (80013cc <readall_inputs+0x360>)
 80011f6:	f003 f9f1 	bl	80045dc <HAL_GPIO_ReadPin>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	b2d9      	uxtb	r1, r3
 8001202:	4a73      	ldr	r2, [pc, #460]	; (80013d0 <readall_inputs+0x364>)
 8001204:	7813      	ldrb	r3, [r2, #0]
 8001206:	f361 0300 	bfi	r3, r1, #0, #1
 800120a:	7013      	strb	r3, [r2, #0]
	sdc_in.SDC0 = HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin);						// Shutdown-Circuit, OK
 800120c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001210:	4868      	ldr	r0, [pc, #416]	; (80013b4 <readall_inputs+0x348>)
 8001212:	f003 f9e3 	bl	80045dc <HAL_GPIO_ReadPin>
 8001216:	4603      	mov	r3, r0
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	b2d9      	uxtb	r1, r3
 800121e:	4a6c      	ldr	r2, [pc, #432]	; (80013d0 <readall_inputs+0x364>)
 8001220:	7813      	ldrb	r3, [r2, #0]
 8001222:	f361 0341 	bfi	r3, r1, #1, #1
 8001226:	7013      	strb	r3, [r2, #0]
	sdc_in.Akku1SDC = HAL_GPIO_ReadPin(SENSE_SDC_AKKU_GPIO_Port, SENSE_SDC_AKKU_Pin);			// Shutdown-Circuit Akku, OK
 8001228:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800122c:	4861      	ldr	r0, [pc, #388]	; (80013b4 <readall_inputs+0x348>)
 800122e:	f003 f9d5 	bl	80045dc <HAL_GPIO_ReadPin>
 8001232:	4603      	mov	r3, r0
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	b2d9      	uxtb	r1, r3
 800123a:	4a65      	ldr	r2, [pc, #404]	; (80013d0 <readall_inputs+0x364>)
 800123c:	7813      	ldrb	r3, [r2, #0]
 800123e:	f361 0382 	bfi	r3, r1, #2, #1
 8001242:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8001244:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001248:	485d      	ldr	r0, [pc, #372]	; (80013c0 <readall_inputs+0x354>)
 800124a:	f003 f9c7 	bl	80045dc <HAL_GPIO_ReadPin>
 800124e:	4603      	mov	r3, r0
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	b2d9      	uxtb	r1, r3
 8001256:	4a5e      	ldr	r2, [pc, #376]	; (80013d0 <readall_inputs+0x364>)
 8001258:	7813      	ldrb	r3, [r2, #0]
 800125a:	f361 03c3 	bfi	r3, r1, #3, #1
 800125e:	7013      	strb	r3, [r2, #0]
	sdc_in.DCDC_Fault = HAL_GPIO_ReadPin(DCDC_FAULT_GPIO_Port, DCDC_FAULT_Pin);					// DCDC Wandler funktioniert nicht richtig
 8001260:	2102      	movs	r1, #2
 8001262:	4859      	ldr	r0, [pc, #356]	; (80013c8 <readall_inputs+0x35c>)
 8001264:	f003 f9ba 	bl	80045dc <HAL_GPIO_ReadPin>
 8001268:	4603      	mov	r3, r0
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	b2d9      	uxtb	r1, r3
 8001270:	4a57      	ldr	r2, [pc, #348]	; (80013d0 <readall_inputs+0x364>)
 8001272:	7813      	ldrb	r3, [r2, #0]
 8001274:	f361 1304 	bfi	r3, r1, #4, #1
 8001278:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.ASR1 = HAL_GPIO_ReadPin(ASR_IN1_GPIO_Port, ASR_IN1_Pin);							// ASR Eingang Mittelkonsole
 800127a:	2110      	movs	r1, #16
 800127c:	4852      	ldr	r0, [pc, #328]	; (80013c8 <readall_inputs+0x35c>)
 800127e:	f003 f9ad 	bl	80045dc <HAL_GPIO_ReadPin>
 8001282:	4603      	mov	r3, r0
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	b2d9      	uxtb	r1, r3
 800128a:	4a52      	ldr	r2, [pc, #328]	; (80013d4 <readall_inputs+0x368>)
 800128c:	7813      	ldrb	r3, [r2, #0]
 800128e:	f361 0300 	bfi	r3, r1, #0, #1
 8001292:	7013      	strb	r3, [r2, #0]
	komfort_in.ASR2 = HAL_GPIO_ReadPin(ASR_IN2_GPIO_Port, ASR_IN2_Pin);							// ASR Eingang Mittelkonsole
 8001294:	2110      	movs	r1, #16
 8001296:	484b      	ldr	r0, [pc, #300]	; (80013c4 <readall_inputs+0x358>)
 8001298:	f003 f9a0 	bl	80045dc <HAL_GPIO_ReadPin>
 800129c:	4603      	mov	r3, r0
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	b2d9      	uxtb	r1, r3
 80012a4:	4a4b      	ldr	r2, [pc, #300]	; (80013d4 <readall_inputs+0x368>)
 80012a6:	7813      	ldrb	r3, [r2, #0]
 80012a8:	f361 0341 	bfi	r3, r1, #1, #1
 80012ac:	7013      	strb	r3, [r2, #0]
	komfort_in.ECO = HAL_GPIO_ReadPin(ECO_GPIO_Port, ECO_Pin);									// ECO Eingang Mittelkonsole
 80012ae:	2108      	movs	r1, #8
 80012b0:	4840      	ldr	r0, [pc, #256]	; (80013b4 <readall_inputs+0x348>)
 80012b2:	f003 f993 	bl	80045dc <HAL_GPIO_ReadPin>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	b2d9      	uxtb	r1, r3
 80012be:	4a45      	ldr	r2, [pc, #276]	; (80013d4 <readall_inputs+0x368>)
 80012c0:	7813      	ldrb	r3, [r2, #0]
 80012c2:	f361 0382 	bfi	r3, r1, #2, #1
 80012c6:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Rst_In = HAL_GPIO_ReadPin(BC_RESET_IN_GPIO_Port, BC_RESET_IN_Pin);			// Boardcomputer Reset Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 80012c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012cc:	483e      	ldr	r0, [pc, #248]	; (80013c8 <readall_inputs+0x35c>)
 80012ce:	f003 f985 	bl	80045dc <HAL_GPIO_ReadPin>
 80012d2:	4603      	mov	r3, r0
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	b2d9      	uxtb	r1, r3
 80012da:	4a3e      	ldr	r2, [pc, #248]	; (80013d4 <readall_inputs+0x368>)
 80012dc:	7813      	ldrb	r3, [r2, #0]
 80012de:	f361 03c3 	bfi	r3, r1, #3, #1
 80012e2:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Up_In = HAL_GPIO_ReadPin(BC_UP_IN_GPIO_Port, BC_UP_IN_Pin);					// Boardcomputer Rauf Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 80012e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012e8:	4838      	ldr	r0, [pc, #224]	; (80013cc <readall_inputs+0x360>)
 80012ea:	f003 f977 	bl	80045dc <HAL_GPIO_ReadPin>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	b2d9      	uxtb	r1, r3
 80012f6:	4a37      	ldr	r2, [pc, #220]	; (80013d4 <readall_inputs+0x368>)
 80012f8:	7813      	ldrb	r3, [r2, #0]
 80012fa:	f361 1304 	bfi	r3, r1, #4, #1
 80012fe:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Down_In = HAL_GPIO_ReadPin(BC_DOWN_IN_GPIO_Port, BC_DOWN_IN_Pin);				// Boardcomputer Runter Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8001300:	2110      	movs	r1, #16
 8001302:	482c      	ldr	r0, [pc, #176]	; (80013b4 <readall_inputs+0x348>)
 8001304:	f003 f96a 	bl	80045dc <HAL_GPIO_ReadPin>
 8001308:	4603      	mov	r3, r0
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	b2d9      	uxtb	r1, r3
 8001310:	4a30      	ldr	r2, [pc, #192]	; (80013d4 <readall_inputs+0x368>)
 8001312:	7813      	ldrb	r3, [r2, #0]
 8001314:	f361 1345 	bfi	r3, r1, #5, #1
 8001318:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn1 = HAL_GPIO_ReadPin(BAMOCAR_IN1_GPIO_Port, BAMOCAR_IN1_Pin);				// Eingang Bamocar 1
 800131a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800131e:	4829      	ldr	r0, [pc, #164]	; (80013c4 <readall_inputs+0x358>)
 8001320:	f003 f95c 	bl	80045dc <HAL_GPIO_ReadPin>
 8001324:	4603      	mov	r3, r0
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	b2d9      	uxtb	r1, r3
 800132c:	4a29      	ldr	r2, [pc, #164]	; (80013d4 <readall_inputs+0x368>)
 800132e:	7813      	ldrb	r3, [r2, #0]
 8001330:	f361 1386 	bfi	r3, r1, #6, #1
 8001334:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn2 = HAL_GPIO_ReadPin(BAMOCAR_IN2_GPIO_Port, BAMOCAR_IN2_Pin);				// Eingang Bamocar 2
 8001336:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800133a:	4822      	ldr	r0, [pc, #136]	; (80013c4 <readall_inputs+0x358>)
 800133c:	f003 f94e 	bl	80045dc <HAL_GPIO_ReadPin>
 8001340:	4603      	mov	r3, r0
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	b2d9      	uxtb	r1, r3
 8001348:	4a22      	ldr	r2, [pc, #136]	; (80013d4 <readall_inputs+0x368>)
 800134a:	7813      	ldrb	r3, [r2, #0]
 800134c:	f361 13c7 	bfi	r3, r1, #7, #1
 8001350:	7013      	strb	r3, [r2, #0]
	komfort_in.Enter = HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin);							// Encoder Taster Enter Eingang Mittelconsole
 8001352:	2180      	movs	r1, #128	; 0x80
 8001354:	4820      	ldr	r0, [pc, #128]	; (80013d8 <readall_inputs+0x36c>)
 8001356:	f003 f941 	bl	80045dc <HAL_GPIO_ReadPin>
 800135a:	4603      	mov	r3, r0
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	b2d9      	uxtb	r1, r3
 8001362:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <readall_inputs+0x368>)
 8001364:	7853      	ldrb	r3, [r2, #1]
 8001366:	f361 0300 	bfi	r3, r1, #0, #1
 800136a:	7053      	strb	r3, [r2, #1]
	komfort_in.OutA = HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTA_Pin);								// Encoder OUTA Eingang Mittelconsole
 800136c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001370:	4816      	ldr	r0, [pc, #88]	; (80013cc <readall_inputs+0x360>)
 8001372:	f003 f933 	bl	80045dc <HAL_GPIO_ReadPin>
 8001376:	4603      	mov	r3, r0
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	b2d9      	uxtb	r1, r3
 800137e:	4a15      	ldr	r2, [pc, #84]	; (80013d4 <readall_inputs+0x368>)
 8001380:	7853      	ldrb	r3, [r2, #1]
 8001382:	f361 0341 	bfi	r3, r1, #1, #1
 8001386:	7053      	strb	r3, [r2, #1]
	komfort_in.OutB = HAL_GPIO_ReadPin(OUTB_GPIO_Port, OUTB_Pin);								// Encoder OUTB Eingang Mittelconsole
 8001388:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800138c:	480f      	ldr	r0, [pc, #60]	; (80013cc <readall_inputs+0x360>)
 800138e:	f003 f925 	bl	80045dc <HAL_GPIO_ReadPin>
 8001392:	4603      	mov	r3, r0
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	b2d9      	uxtb	r1, r3
 800139a:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <readall_inputs+0x368>)
 800139c:	7853      	ldrb	r3, [r2, #1]
 800139e:	f361 0382 	bfi	r3, r1, #2, #1
 80013a2:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA1 = HAL_GPIO_ReadPin(GRA1_GPIO_Port, GRA1_Pin);								// Tempomat 1 Eingang
 80013a4:	2120      	movs	r1, #32
 80013a6:	4808      	ldr	r0, [pc, #32]	; (80013c8 <readall_inputs+0x35c>)
 80013a8:	f003 f918 	bl	80045dc <HAL_GPIO_ReadPin>
 80013ac:	4603      	mov	r3, r0
 80013ae:	e015      	b.n	80013dc <readall_inputs+0x370>
 80013b0:	08006e5c 	.word	0x08006e5c
 80013b4:	40021000 	.word	0x40021000
 80013b8:	2000003c 	.word	0x2000003c
 80013bc:	40021400 	.word	0x40021400
 80013c0:	40020400 	.word	0x40020400
 80013c4:	40020c00 	.word	0x40020c00
 80013c8:	40021800 	.word	0x40021800
 80013cc:	40020000 	.word	0x40020000
 80013d0:	20000040 	.word	0x20000040
 80013d4:	20000044 	.word	0x20000044
 80013d8:	40020800 	.word	0x40020800
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	b2d9      	uxtb	r1, r3
 80013e2:	4a30      	ldr	r2, [pc, #192]	; (80014a4 <readall_inputs+0x438>)
 80013e4:	7853      	ldrb	r3, [r2, #1]
 80013e6:	f361 03c3 	bfi	r3, r1, #3, #1
 80013ea:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA2 = HAL_GPIO_ReadPin(GRA2_GPIO_Port, GRA2_Pin);								// Tempomat 2 Eingang
 80013ec:	2140      	movs	r1, #64	; 0x40
 80013ee:	482e      	ldr	r0, [pc, #184]	; (80014a8 <readall_inputs+0x43c>)
 80013f0:	f003 f8f4 	bl	80045dc <HAL_GPIO_ReadPin>
 80013f4:	4603      	mov	r3, r0
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	b2d9      	uxtb	r1, r3
 80013fc:	4a29      	ldr	r2, [pc, #164]	; (80014a4 <readall_inputs+0x438>)
 80013fe:	7853      	ldrb	r3, [r2, #1]
 8001400:	f361 1304 	bfi	r3, r1, #4, #1
 8001404:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA3 = HAL_GPIO_ReadPin(GRA3_GPIO_Port, GRA3_Pin);								// Tempomat 3 Eingang
 8001406:	2180      	movs	r1, #128	; 0x80
 8001408:	4827      	ldr	r0, [pc, #156]	; (80014a8 <readall_inputs+0x43c>)
 800140a:	f003 f8e7 	bl	80045dc <HAL_GPIO_ReadPin>
 800140e:	4603      	mov	r3, r0
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	b2d9      	uxtb	r1, r3
 8001416:	4a23      	ldr	r2, [pc, #140]	; (80014a4 <readall_inputs+0x438>)
 8001418:	7853      	ldrb	r3, [r2, #1]
 800141a:	f361 1345 	bfi	r3, r1, #5, #1
 800141e:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA4 = HAL_GPIO_ReadPin(GRA4_GPIO_Port, GRA4_Pin);								// Tempomat 4 Eingang
 8001420:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001424:	4820      	ldr	r0, [pc, #128]	; (80014a8 <readall_inputs+0x43c>)
 8001426:	f003 f8d9 	bl	80045dc <HAL_GPIO_ReadPin>
 800142a:	4603      	mov	r3, r0
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	b2d9      	uxtb	r1, r3
 8001432:	4a1c      	ldr	r2, [pc, #112]	; (80014a4 <readall_inputs+0x438>)
 8001434:	7853      	ldrb	r3, [r2, #1]
 8001436:	f361 1386 	bfi	r3, r1, #6, #1
 800143a:	7053      	strb	r3, [r2, #1]
	komfort_in.Durchfluss = HAL_GPIO_ReadPin(DURCHFLUSS_GPIO_Port, DURCHFLUSS_Pin);				// Durchflusssensor Eingang
 800143c:	2120      	movs	r1, #32
 800143e:	481b      	ldr	r0, [pc, #108]	; (80014ac <readall_inputs+0x440>)
 8001440:	f003 f8cc 	bl	80045dc <HAL_GPIO_ReadPin>
 8001444:	4603      	mov	r3, r0
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	b2d9      	uxtb	r1, r3
 800144c:	4a15      	ldr	r2, [pc, #84]	; (80014a4 <readall_inputs+0x438>)
 800144e:	7853      	ldrb	r3, [r2, #1]
 8001450:	f361 13c7 	bfi	r3, r1, #7, #1
 8001454:	7053      	strb	r3, [r2, #1]

#ifdef DEBUG_INPUT
	ITM_SendString("Eingaenge gelesen.\n");
 8001456:	4816      	ldr	r0, [pc, #88]	; (80014b0 <readall_inputs+0x444>)
 8001458:	f7ff fdcc 	bl	8000ff4 <ITM_SendString>
	ITM_SendString("system_in:\t");
 800145c:	4815      	ldr	r0, [pc, #84]	; (80014b4 <readall_inputs+0x448>)
 800145e:	f7ff fdc9 	bl	8000ff4 <ITM_SendString>
	ITM_SendNumber(system_in.systeminput);
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <readall_inputs+0x44c>)
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fdce 	bl	8001008 <ITM_SendNumber>
	ITM_SendChar('\n');
 800146c:	200a      	movs	r0, #10
 800146e:	f7ff fdd5 	bl	800101c <ITM_SendChar>
	ITM_SendString("sdc_in:\t");
 8001472:	4812      	ldr	r0, [pc, #72]	; (80014bc <readall_inputs+0x450>)
 8001474:	f7ff fdbe 	bl	8000ff4 <ITM_SendString>
	ITM_SendNumber(sdc_in.sdcinput);
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <readall_inputs+0x454>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fdc3 	bl	8001008 <ITM_SendNumber>
	ITM_SendChar('\n');
 8001482:	200a      	movs	r0, #10
 8001484:	f7ff fdca 	bl	800101c <ITM_SendChar>
	ITM_SendString("komfort_in:\t");
 8001488:	480e      	ldr	r0, [pc, #56]	; (80014c4 <readall_inputs+0x458>)
 800148a:	f7ff fdb3 	bl	8000ff4 <ITM_SendString>
	ITM_SendNumber(komfort_in.komfortinput);
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <readall_inputs+0x438>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fdb8 	bl	8001008 <ITM_SendNumber>
	ITM_SendChar('\n');
 8001498:	200a      	movs	r0, #10
 800149a:	f7ff fdbf 	bl	800101c <ITM_SendChar>
#endif
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000044 	.word	0x20000044
 80014a8:	40021800 	.word	0x40021800
 80014ac:	40021000 	.word	0x40021000
 80014b0:	08006e70 	.word	0x08006e70
 80014b4:	08006e84 	.word	0x08006e84
 80014b8:	2000003c 	.word	0x2000003c
 80014bc:	08006e90 	.word	0x08006e90
 80014c0:	20000040 	.word	0x20000040
 80014c4:	08006e9c 	.word	0x08006e9c

080014c8 <readAnlasser>:
//----------------------------------------------------------------------

// Anlasser einlesen, Wert in Variable speichern, bis KL15 abfaellt
//----------------------------------------------------------------------
void readAnlasser(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
	if (system_in.Anlasser == 1)
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <readAnlasser+0x50>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d005      	beq.n	80014e6 <readAnlasser+0x1e>
	{
		sdc_in.Anlasser = 1;
 80014da:	4a10      	ldr	r2, [pc, #64]	; (800151c <readAnlasser+0x54>)
 80014dc:	7813      	ldrb	r3, [r2, #0]
 80014de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014e2:	7013      	strb	r3, [r2, #0]
	}
	else if ((sdc_in.Anlasser == 1) && (system_in.KL15 != 1))
	{
		sdc_in.Anlasser = 0;
	}
}
 80014e4:	e012      	b.n	800150c <readAnlasser+0x44>
	else if ((sdc_in.Anlasser == 1) && (system_in.KL15 != 1))
 80014e6:	4b0d      	ldr	r3, [pc, #52]	; (800151c <readAnlasser+0x54>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00b      	beq.n	800150c <readAnlasser+0x44>
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <readAnlasser+0x50>)
 80014f6:	785b      	ldrb	r3, [r3, #1]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d104      	bne.n	800150c <readAnlasser+0x44>
		sdc_in.Anlasser = 0;
 8001502:	4a06      	ldr	r2, [pc, #24]	; (800151c <readAnlasser+0x54>)
 8001504:	7813      	ldrb	r3, [r2, #0]
 8001506:	f36f 1386 	bfc	r3, #6, #1
 800150a:	7013      	strb	r3, [r2, #0]
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	2000003c 	.word	0x2000003c
 800151c:	20000040 	.word	0x20000040

08001520 <millis>:
//----------------------------------------------------------------------
#include "millis.h"
//----------------------------------------------------------------------

uint32_t millis(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001524:	f001 fa9c 	bl	8002a60 <HAL_GetTick>
 8001528:	4603      	mov	r3, r0
}
 800152a:	4618      	mov	r0, r3
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);							// Teste Green LED, an
 8001534:	2201      	movs	r2, #1
 8001536:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800153a:	481b      	ldr	r0, [pc, #108]	; (80015a8 <testPCB_Leds+0x78>)
 800153c:	f003 f866 	bl	800460c <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 8001540:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001544:	f001 fa98 	bl	8002a78 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);							// Teste Green LED, aus
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800154e:	4816      	ldr	r0, [pc, #88]	; (80015a8 <testPCB_Leds+0x78>)
 8001550:	f003 f85c 	bl	800460c <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 8001554:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001558:	f001 fa8e 	bl	8002a78 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);								// Teste Blue LED, an
 800155c:	2201      	movs	r2, #1
 800155e:	2180      	movs	r1, #128	; 0x80
 8001560:	4811      	ldr	r0, [pc, #68]	; (80015a8 <testPCB_Leds+0x78>)
 8001562:	f003 f853 	bl	800460c <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 8001566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800156a:	f001 fa85 	bl	8002a78 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);							// Teste Blue LED, aus
 800156e:	2200      	movs	r2, #0
 8001570:	2180      	movs	r1, #128	; 0x80
 8001572:	480d      	ldr	r0, [pc, #52]	; (80015a8 <testPCB_Leds+0x78>)
 8001574:	f003 f84a 	bl	800460c <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 8001578:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800157c:	f001 fa7c 	bl	8002a78 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);								// Teste Red LED, an
 8001580:	2201      	movs	r2, #1
 8001582:	2104      	movs	r1, #4
 8001584:	4808      	ldr	r0, [pc, #32]	; (80015a8 <testPCB_Leds+0x78>)
 8001586:	f003 f841 	bl	800460c <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 800158a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800158e:	f001 fa73 	bl	8002a78 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);								// Teste Red LED, aus
 8001592:	2200      	movs	r2, #0
 8001594:	2104      	movs	r1, #4
 8001596:	4804      	ldr	r0, [pc, #16]	; (80015a8 <testPCB_Leds+0x78>)
 8001598:	f003 f838 	bl	800460c <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 800159c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015a0:	f001 fa6a 	bl	8002a78 <HAL_Delay>
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40020400 	.word	0x40020400

080015ac <testCockpit_Leds>:
//----------------------------------------------------------------------

// Teste Cockpit LEDs
//----------------------------------------------------------------------
void testCockpit_Leds(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(ANHAENGER_GPIO_Port, ANHAENGER_Pin, GPIO_PIN_SET);							// Teste Anhaenger LED, an (Cockpit ECO)
 80015b0:	2201      	movs	r2, #1
 80015b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015b6:	4813      	ldr	r0, [pc, #76]	; (8001604 <testCockpit_Leds+0x58>)
 80015b8:	f003 f828 	bl	800460c <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 80015bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015c0:	f001 fa5a 	bl	8002a78 <HAL_Delay>
    HAL_GPIO_WritePin(ANHAENGER_GPIO_Port, ANHAENGER_Pin, GPIO_PIN_RESET);							// Teste Anhaenger LED, aus (Cockpit ECO)
 80015c4:	2200      	movs	r2, #0
 80015c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ca:	480e      	ldr	r0, [pc, #56]	; (8001604 <testCockpit_Leds+0x58>)
 80015cc:	f003 f81e 	bl	800460c <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 80015d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015d4:	f001 fa50 	bl	8002a78 <HAL_Delay>
    HAL_GPIO_WritePin(RESERVE_OUT_GPIO_Port, RESERVE_OUT_Pin, GPIO_PIN_SET);						// Teste Reserve LED, an (Cockpit Niveauregulierung)
 80015d8:	2201      	movs	r2, #1
 80015da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015de:	4809      	ldr	r0, [pc, #36]	; (8001604 <testCockpit_Leds+0x58>)
 80015e0:	f003 f814 	bl	800460c <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 80015e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015e8:	f001 fa46 	bl	8002a78 <HAL_Delay>
    HAL_GPIO_WritePin(RESERVE_OUT_GPIO_Port, RESERVE_OUT_Pin, GPIO_PIN_RESET);						// Teste Reserve LED, aus (Cockpit Niveauregulierung)
 80015ec:	2200      	movs	r2, #0
 80015ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015f2:	4804      	ldr	r0, [pc, #16]	; (8001604 <testCockpit_Leds+0x58>)
 80015f4:	f003 f80a 	bl	800460c <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 80015f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015fc:	f001 fa3c 	bl	8002a78 <HAL_Delay>
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40020c00 	.word	0x40020c00

08001608 <pwm_oelstand>:
//----------------------------------------------------------------------

// PWM fuer Oelstandsensor am Kombiinstrument
//----------------------------------------------------------------------
void pwm_oelstand(uint16_t time)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	80fb      	strh	r3, [r7, #6]
	// Auswahl wie viele Sekunden vergangen
	switch (time)																					// Zeit wird uebergeben
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	2b4b      	cmp	r3, #75	; 0x4b
 8001616:	d01c      	beq.n	8001652 <pwm_oelstand+0x4a>
 8001618:	2b4b      	cmp	r3, #75	; 0x4b
 800161a:	dc20      	bgt.n	800165e <pwm_oelstand+0x56>
 800161c:	2b2d      	cmp	r3, #45	; 0x2d
 800161e:	d012      	beq.n	8001646 <pwm_oelstand+0x3e>
 8001620:	2b2d      	cmp	r3, #45	; 0x2d
 8001622:	dc1c      	bgt.n	800165e <pwm_oelstand+0x56>
 8001624:	2b00      	cmp	r3, #0
 8001626:	d002      	beq.n	800162e <pwm_oelstand+0x26>
 8001628:	2b0f      	cmp	r3, #15
 800162a:	d006      	beq.n	800163a <pwm_oelstand+0x32>
			break;
		case 75: // 5x15 ms = 75 ms
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 75ms Oelstandsensor Ausgang high
			break;
		default:
			break;
 800162c:	e017      	b.n	800165e <pwm_oelstand+0x56>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_RESET);			// Bei 0ms Oelstandsensor Ausgang low
 800162e:	2200      	movs	r2, #0
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	480d      	ldr	r0, [pc, #52]	; (8001668 <pwm_oelstand+0x60>)
 8001634:	f002 ffea 	bl	800460c <HAL_GPIO_WritePin>
			break;
 8001638:	e012      	b.n	8001660 <pwm_oelstand+0x58>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 15ms Oelstandsensor Ausgang high
 800163a:	2201      	movs	r2, #1
 800163c:	2180      	movs	r1, #128	; 0x80
 800163e:	480a      	ldr	r0, [pc, #40]	; (8001668 <pwm_oelstand+0x60>)
 8001640:	f002 ffe4 	bl	800460c <HAL_GPIO_WritePin>
			break;
 8001644:	e00c      	b.n	8001660 <pwm_oelstand+0x58>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_RESET);			// Bei 45ms Oelstandsensor Ausgang low
 8001646:	2200      	movs	r2, #0
 8001648:	2180      	movs	r1, #128	; 0x80
 800164a:	4807      	ldr	r0, [pc, #28]	; (8001668 <pwm_oelstand+0x60>)
 800164c:	f002 ffde 	bl	800460c <HAL_GPIO_WritePin>
			break;
 8001650:	e006      	b.n	8001660 <pwm_oelstand+0x58>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 75ms Oelstandsensor Ausgang high
 8001652:	2201      	movs	r2, #1
 8001654:	2180      	movs	r1, #128	; 0x80
 8001656:	4804      	ldr	r0, [pc, #16]	; (8001668 <pwm_oelstand+0x60>)
 8001658:	f002 ffd8 	bl	800460c <HAL_GPIO_WritePin>
			break;
 800165c:	e000      	b.n	8001660 <pwm_oelstand+0x58>
			break;
 800165e:	bf00      	nop
	}
	// Nach 405ms wird das ganze wiederholt
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40020c00 	.word	0x40020c00

0800166c <cockpit_default>:
//----------------------------------------------------------------------

// Setze Cockpit auf default, alle Fehler OK
//----------------------------------------------------------------------
void cockpit_default(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	leuchten_out.Ruechwarn = 1;																		// Ruecklichtwarnung setzen
 8001670:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <cockpit_default+0x68>)
 8001672:	7813      	ldrb	r3, [r2, #0]
 8001674:	f043 0310 	orr.w	r3, r3, #16
 8001678:	7013      	strb	r3, [r2, #0]
	leuchten_out.Wischwarn = 1;																		// Wischwasserwarnung setzen
 800167a:	4a16      	ldr	r2, [pc, #88]	; (80016d4 <cockpit_default+0x68>)
 800167c:	7813      	ldrb	r3, [r2, #0]
 800167e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001682:	7013      	strb	r3, [r2, #0]
	leuchten_out.Bremswarn = 1;																		// Bremslichtwarnung setzen
 8001684:	4a13      	ldr	r2, [pc, #76]	; (80016d4 <cockpit_default+0x68>)
 8001686:	7813      	ldrb	r3, [r2, #0]
 8001688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800168c:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, leuchten_out.Ruechwarn);			// Fehlermeldung fuer Ruecklichtwarnung einschalten
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <cockpit_default+0x68>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001696:	b2db      	uxtb	r3, r3
 8001698:	461a      	mov	r2, r3
 800169a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800169e:	480e      	ldr	r0, [pc, #56]	; (80016d8 <cockpit_default+0x6c>)
 80016a0:	f002 ffb4 	bl	800460c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WISCHWARNUNG_GPIO_Port, WISCHWARNUNG_Pin, leuchten_out.Wischwarn);			// Fehlermeldung fuer Wischwasserwarnung einschalten
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <cockpit_default+0x68>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	461a      	mov	r2, r3
 80016b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b4:	4809      	ldr	r0, [pc, #36]	; (80016dc <cockpit_default+0x70>)
 80016b6:	f002 ffa9 	bl	800460c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BREMSWARNUNG_GPIO_Port, BREMSWARNUNG_Pin, leuchten_out.Bremswarn);			// Fehlermeldung fuer Bremslichtwarnung einschalten
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <cockpit_default+0x68>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ca:	4804      	ldr	r0, [pc, #16]	; (80016dc <cockpit_default+0x70>)
 80016cc:	f002 ff9e 	bl	800460c <HAL_GPIO_WritePin>
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000050 	.word	0x20000050
 80016d8:	40020000 	.word	0x40020000
 80016dc:	40021800 	.word	0x40021800

080016e0 <testSDC>:
//----------------------------------------------------------------------

// Testen der Spannung am Shutdown-Circuit, Signal 1 = offen, Signal = 0 geschlossen
//----------------------------------------------------------------------
void testSDC(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, GPIO_PIN_SET);					// Einschalten von Shutdown-Circuit zum testen
 80016e4:	2201      	movs	r2, #1
 80016e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ea:	4811      	ldr	r0, [pc, #68]	; (8001730 <testSDC+0x50>)
 80016ec:	f002 ff8e 	bl	800460c <HAL_GPIO_WritePin>
	HAL_Delay(100);																					// Wartezeit zum setzen
 80016f0:	2064      	movs	r0, #100	; 0x64
 80016f2:	f001 f9c1 	bl	8002a78 <HAL_Delay>
	if (HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin) == 1)								// Einlesen von SDC0 Eingang
 80016f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016fa:	480d      	ldr	r0, [pc, #52]	; (8001730 <testSDC+0x50>)
 80016fc:	f002 ff6e 	bl	80045dc <HAL_GPIO_ReadPin>
 8001700:	4603      	mov	r3, r0
 8001702:	2b01      	cmp	r3, #1
 8001704:	d103      	bne.n	800170e <testSDC+0x2e>
	{
#ifndef DEBUG_SDC
		software_error(ERROR_SDC_SPANNUNG);															// Sollte Sicherung kaputt oder Kurzschluss, dann Fehlerausgeben
#else
#warning Das Abschalten des Softwarefehlers kann unter Umstaenden zu Beschaedigung der HW fuehren.
		software_error_debug(ERROR_SDC_SPANNUNG);													// Errorfunktion stoppt Programm nicht
 8001706:	2003      	movs	r0, #3
 8001708:	f7ff fc22 	bl	8000f50 <software_error_debug>
 800170c:	e004      	b.n	8001718 <testSDC+0x38>
#endif
	}
	else
	{
	  	sdc_in.SDC12V = 1;																			// SDC Spannungsversorgung OK
 800170e:	4a09      	ldr	r2, [pc, #36]	; (8001734 <testSDC+0x54>)
 8001710:	7813      	ldrb	r3, [r2, #0]
 8001712:	f043 0320 	orr.w	r3, r3, #32
 8001716:	7013      	strb	r3, [r2, #0]
	}
	HAL_Delay(100);																					// Wartezeit zum setzen
 8001718:	2064      	movs	r0, #100	; 0x64
 800171a:	f001 f9ad 	bl	8002a78 <HAL_Delay>
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, GPIO_PIN_RESET);					// Auschalten von Shutdown-Circuit
 800171e:	2200      	movs	r2, #0
 8001720:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <testSDC+0x50>)
 8001726:	f002 ff71 	bl	800460c <HAL_GPIO_WritePin>
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000
 8001734:	20000040 	.word	0x20000040

08001738 <readTrottle>:
//----------------------------------------------------------------------

// Gaspedal auswerten
//----------------------------------------------------------------------
uint16_t readTrottle(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
	// Variablen anlegen
	uint16_t ADC_Gas = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	80fb      	strh	r3, [r7, #6]

	// Pruefen ob Variable Anlasser aktiv ist
	if (sdc_in.Anlasser == 1)												// Nur aktiv, wenn KL15 an und Anlasser einmal betaetigt.
 8001742:	4b34      	ldr	r3, [pc, #208]	; (8001814 <readTrottle+0xdc>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	d05c      	beq.n	800180a <readTrottle+0xd2>
	{
		// Gaspedal einlesen
		ADC_Gas = ADC_Gaspedal();
 8001750:	f7ff fb1a 	bl	8000d88 <ADC_Gaspedal>
 8001754:	4603      	mov	r3, r0
 8001756:	80fb      	strh	r3, [r7, #6]

		// Pruefen ob Kupplung getreten wurde
		if (system_in.Kupplung == 1)										// Wenn Kupplung nicht getreten wurde == 1
 8001758:	4b2f      	ldr	r3, [pc, #188]	; (8001818 <readTrottle+0xe0>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	f003 0310 	and.w	r3, r3, #16
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d04f      	beq.n	8001806 <readTrottle+0xce>
		{
			// Wenn Leerlauf und Kickdown aktiv Plausibilitaetsfehler
			if ((system_in.Leerlauf == 1) && (system_in.Kickdown == 1))
 8001766:	4b2c      	ldr	r3, [pc, #176]	; (8001818 <readTrottle+0xe0>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00e      	beq.n	8001792 <readTrottle+0x5a>
 8001774:	4b28      	ldr	r3, [pc, #160]	; (8001818 <readTrottle+0xe0>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d007      	beq.n	8001792 <readTrottle+0x5a>
			{
				// Fehlermeldung auf Uart ausgeben
#define TROTTLE_INVALID				"Error_Gaspedal_1 Plausibilitaetsfehler: Kickdown und Leerlauf"
				uartTransmit(TROTTLE_INVALID, sizeof(TROTTLE_INVALID));
 8001782:	213e      	movs	r1, #62	; 0x3e
 8001784:	4825      	ldr	r0, [pc, #148]	; (800181c <readTrottle+0xe4>)
 8001786:	f7ff f81b 	bl	80007c0 <uartTransmit>
				// Gaspedal invalide
				software_error(ERROR_GASPEDAL);
 800178a:	2001      	movs	r0, #1
 800178c:	f7ff fb90 	bl	8000eb0 <software_error>
 8001790:	e03b      	b.n	800180a <readTrottle+0xd2>
			}
			// Threshold Wert vergleichen / Threshold Wert >= THRESHOLD und Leerlauf aktiv
			else if ((system_in.Leerlauf == 1) && (ADC_Gas >= GAS_THRESHOLD))
 8001792:	4b21      	ldr	r3, [pc, #132]	; (8001818 <readTrottle+0xe0>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	d008      	beq.n	80017b2 <readTrottle+0x7a>
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80017a6:	d304      	bcc.n	80017b2 <readTrottle+0x7a>
			{
				// Wenn Wert groesser THRESHOLD ist, dann THRESHOLD vom ADC-Wert abziehen
				ADC_Gas -= GAS_THRESHOLD;
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017ae:	80fb      	strh	r3, [r7, #6]
 80017b0:	e02b      	b.n	800180a <readTrottle+0xd2>
			}
			// Threshold Wert vergleichen / Threshold Wert < THRESHOLD und Leerlauf aktiv
			else if ((system_in.Leerlauf == 1) && (ADC_Gas < GAS_THRESHOLD))
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <readTrottle+0xe0>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d006      	beq.n	80017ce <readTrottle+0x96>
 80017c0:	88fb      	ldrh	r3, [r7, #6]
 80017c2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80017c6:	d202      	bcs.n	80017ce <readTrottle+0x96>
			{
				// Wenn der Wert kleine als THRESHOLD ist, dann ADC ignorieren, alle Werte sind 0
				ADC_Gas = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	80fb      	strh	r3, [r7, #6]
 80017cc:	e01d      	b.n	800180a <readTrottle+0xd2>
			}
			// Threshold Wert vergleichen / Threshold Wert < THRESHOLD und Kickdown aktiv
			else if ((system_in.Kickdown == 1) && (ADC_Gas < (GAS_MAX_ADC - GAS_THRESHOLD)))
 80017ce:	4b12      	ldr	r3, [pc, #72]	; (8001818 <readTrottle+0xe0>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d004      	beq.n	80017e6 <readTrottle+0xae>
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	f640 62d2 	movw	r2, #3794	; 0xed2
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d911      	bls.n	800180a <readTrottle+0xd2>
			{
				// Wenn Wert kleiner THRESHOLD ist

			}
			// Threshold Wert vergleichen / Threshold Wert > THRESHOLD und Kickdown aktiv
			else if ((system_in.Kickdown == 1) && (ADC_Gas >= (GAS_MAX_ADC - GAS_THRESHOLD)))
 80017e6:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <readTrottle+0xe0>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00a      	beq.n	800180a <readTrottle+0xd2>
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	f640 62d2 	movw	r2, #3794	; 0xed2
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d905      	bls.n	800180a <readTrottle+0xd2>
			{
				// Wenn Wert gleich THRESHOLD ist
				ADC_Gas = GAS_MAX_ADC;
 80017fe:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001802:	80fb      	strh	r3, [r7, #6]
 8001804:	e001      	b.n	800180a <readTrottle+0xd2>
		}
		// Wenn Kupplung getreten == 0
		else
		{
			// Wenn Kupplung oder Bremse getreten
			ADC_Gas = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	80fb      	strh	r3, [r7, #6]
		}
	}

	return ADC_Gas;
 800180a:	88fb      	ldrh	r3, [r7, #6]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000040 	.word	0x20000040
 8001818:	2000003c 	.word	0x2000003c
 800181c:	08006eac 	.word	0x08006eac

08001820 <readBrake>:
//----------------------------------------------------------------------

// Bremse auswerten
//----------------------------------------------------------------------
void readBrake(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
	// Variablen anlegen
	uint16_t ADC_Bremse = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	80fb      	strh	r3, [r7, #6]

	// Gaspedal auf Plausibilitaet pruefen
	if ((system_in.BremseNO == 1) && (system_in.BremseNC != 1))				// Bremse nicht getreten
 800182a:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <readBrake+0x78>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d006      	beq.n	8001846 <readBrake+0x26>
 8001838:	4b17      	ldr	r3, [pc, #92]	; (8001898 <readBrake+0x78>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d024      	beq.n	8001890 <readBrake+0x70>
	{

	}
	else if ((system_in.BremseNO != 1) && (system_in.BremseNC == 1))		// Bremse voll getreten
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <readBrake+0x78>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	d106      	bne.n	8001862 <readBrake+0x42>
 8001854:	4b10      	ldr	r3, [pc, #64]	; (8001898 <readBrake+0x78>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d116      	bne.n	8001890 <readBrake+0x70>
	{

	}
	else if ((system_in.BremseNO != 1) && (system_in.BremseNC != 1))		// Bremse teilweise getreten
 8001862:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <readBrake+0x78>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10b      	bne.n	8001888 <readBrake+0x68>
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <readBrake+0x78>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d104      	bne.n	8001888 <readBrake+0x68>
	{
		// Bremsdruck einlesen
		ADC_Bremse = ADC_Bremsdruck();
 800187e:	f7ff fac7 	bl	8000e10 <ADC_Bremsdruck>
 8001882:	4603      	mov	r3, r0
 8001884:	80fb      	strh	r3, [r7, #6]
 8001886:	e003      	b.n	8001890 <readBrake+0x70>
	}
	else																	// Falls beide Schalter betaetigt sind
	{
		// Bremse invalide
		software_error(ERROR_BREMSPEDAL);
 8001888:	2002      	movs	r0, #2
 800188a:	f7ff fb11 	bl	8000eb0 <software_error>
	}
}
 800188e:	bf00      	nop
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	2000003c 	.word	0x2000003c

0800189c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018a2:	463b      	mov	r3, r7
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018ae:	4b64      	ldr	r3, [pc, #400]	; (8001a40 <MX_ADC1_Init+0x1a4>)
 80018b0:	4a64      	ldr	r2, [pc, #400]	; (8001a44 <MX_ADC1_Init+0x1a8>)
 80018b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018b4:	4b62      	ldr	r3, [pc, #392]	; (8001a40 <MX_ADC1_Init+0x1a4>)
 80018b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018bc:	4b60      	ldr	r3, [pc, #384]	; (8001a40 <MX_ADC1_Init+0x1a4>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80018c2:	4b5f      	ldr	r3, [pc, #380]	; (8001a40 <MX_ADC1_Init+0x1a4>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018c8:	4b5d      	ldr	r3, [pc, #372]	; (8001a40 <MX_ADC1_Init+0x1a4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018ce:	4b5c      	ldr	r3, [pc, #368]	; (8001a40 <MX_ADC1_Init+0x1a4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018d6:	4b5a      	ldr	r3, [pc, #360]	; (8001a40 <MX_ADC1_Init+0x1a4>)
 80018d8:	2200      	movs	r2, #0
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018dc:	4b58      	ldr	r3, [pc, #352]	; (8001a40 <MX_ADC1_Init+0x1a4>)
 80018de:	4a5a      	ldr	r2, [pc, #360]	; (8001a48 <MX_ADC1_Init+0x1ac>)
 80018e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018e2:	4b57      	ldr	r3, [pc, #348]	; (8001a40 <MX_ADC1_Init+0x1a4>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 80018e8:	4b55      	ldr	r3, [pc, #340]	; (8001a40 <MX_ADC1_Init+0x1a4>)
 80018ea:	220a      	movs	r2, #10
 80018ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018ee:	4b54      	ldr	r3, [pc, #336]	; (8001a40 <MX_ADC1_Init+0x1a4>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018f6:	4b52      	ldr	r3, [pc, #328]	; (8001a40 <MX_ADC1_Init+0x1a4>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018fc:	4850      	ldr	r0, [pc, #320]	; (8001a40 <MX_ADC1_Init+0x1a4>)
 80018fe:	f001 f927 	bl	8002b50 <HAL_ADC_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001908:	f000 fea0 	bl	800264c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800190c:	230e      	movs	r3, #14
 800190e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001910:	2301      	movs	r3, #1
 8001912:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001914:	2301      	movs	r3, #1
 8001916:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001918:	463b      	mov	r3, r7
 800191a:	4619      	mov	r1, r3
 800191c:	4848      	ldr	r0, [pc, #288]	; (8001a40 <MX_ADC1_Init+0x1a4>)
 800191e:	f001 faf5 	bl	8002f0c <HAL_ADC_ConfigChannel>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001928:	f000 fe90 	bl	800264c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800192c:	2306      	movs	r3, #6
 800192e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001930:	2302      	movs	r3, #2
 8001932:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001934:	463b      	mov	r3, r7
 8001936:	4619      	mov	r1, r3
 8001938:	4841      	ldr	r0, [pc, #260]	; (8001a40 <MX_ADC1_Init+0x1a4>)
 800193a:	f001 fae7 	bl	8002f0c <HAL_ADC_ConfigChannel>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001944:	f000 fe82 	bl	800264c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001948:	2304      	movs	r3, #4
 800194a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800194c:	2303      	movs	r3, #3
 800194e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001950:	2302      	movs	r3, #2
 8001952:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001954:	463b      	mov	r3, r7
 8001956:	4619      	mov	r1, r3
 8001958:	4839      	ldr	r0, [pc, #228]	; (8001a40 <MX_ADC1_Init+0x1a4>)
 800195a:	f001 fad7 	bl	8002f0c <HAL_ADC_ConfigChannel>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001964:	f000 fe72 	bl	800264c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001968:	2305      	movs	r3, #5
 800196a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800196c:	2304      	movs	r3, #4
 800196e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001970:	463b      	mov	r3, r7
 8001972:	4619      	mov	r1, r3
 8001974:	4832      	ldr	r0, [pc, #200]	; (8001a40 <MX_ADC1_Init+0x1a4>)
 8001976:	f001 fac9 	bl	8002f0c <HAL_ADC_ConfigChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001980:	f000 fe64 	bl	800264c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001984:	230f      	movs	r3, #15
 8001986:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001988:	2305      	movs	r3, #5
 800198a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800198c:	2301      	movs	r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001990:	463b      	mov	r3, r7
 8001992:	4619      	mov	r1, r3
 8001994:	482a      	ldr	r0, [pc, #168]	; (8001a40 <MX_ADC1_Init+0x1a4>)
 8001996:	f001 fab9 	bl	8002f0c <HAL_ADC_ConfigChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80019a0:	f000 fe54 	bl	800264c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80019a4:	2303      	movs	r3, #3
 80019a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80019a8:	2306      	movs	r3, #6
 80019aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80019ac:	2303      	movs	r3, #3
 80019ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019b0:	463b      	mov	r3, r7
 80019b2:	4619      	mov	r1, r3
 80019b4:	4822      	ldr	r0, [pc, #136]	; (8001a40 <MX_ADC1_Init+0x1a4>)
 80019b6:	f001 faa9 	bl	8002f0c <HAL_ADC_ConfigChannel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 80019c0:	f000 fe44 	bl	800264c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80019c4:	2307      	movs	r3, #7
 80019c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80019c8:	2307      	movs	r3, #7
 80019ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019cc:	463b      	mov	r3, r7
 80019ce:	4619      	mov	r1, r3
 80019d0:	481b      	ldr	r0, [pc, #108]	; (8001a40 <MX_ADC1_Init+0x1a4>)
 80019d2:	f001 fa9b 	bl	8002f0c <HAL_ADC_ConfigChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 80019dc:	f000 fe36 	bl	800264c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <MX_ADC1_Init+0x1b0>)
 80019e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80019e4:	2308      	movs	r3, #8
 80019e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019e8:	463b      	mov	r3, r7
 80019ea:	4619      	mov	r1, r3
 80019ec:	4814      	ldr	r0, [pc, #80]	; (8001a40 <MX_ADC1_Init+0x1a4>)
 80019ee:	f001 fa8d 	bl	8002f0c <HAL_ADC_ConfigChannel>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 80019f8:	f000 fe28 	bl	800264c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80019fc:	2308      	movs	r3, #8
 80019fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001a00:	2309      	movs	r3, #9
 8001a02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001a04:	2301      	movs	r3, #1
 8001a06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a08:	463b      	mov	r3, r7
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	480c      	ldr	r0, [pc, #48]	; (8001a40 <MX_ADC1_Init+0x1a4>)
 8001a0e:	f001 fa7d 	bl	8002f0c <HAL_ADC_ConfigChannel>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_ADC1_Init+0x180>
  {
    Error_Handler();
 8001a18:	f000 fe18 	bl	800264c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001a1c:	2309      	movs	r3, #9
 8001a1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001a20:	230a      	movs	r3, #10
 8001a22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a24:	463b      	mov	r3, r7
 8001a26:	4619      	mov	r1, r3
 8001a28:	4805      	ldr	r0, [pc, #20]	; (8001a40 <MX_ADC1_Init+0x1a4>)
 8001a2a:	f001 fa6f 	bl	8002f0c <HAL_ADC_ConfigChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_ADC1_Init+0x19c>
  {
    Error_Handler();
 8001a34:	f000 fe0a 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a38:	bf00      	nop
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000058 	.word	0x20000058
 8001a44:	40012000 	.word	0x40012000
 8001a48:	0f000001 	.word	0x0f000001
 8001a4c:	10000012 	.word	0x10000012

08001a50 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08c      	sub	sp, #48	; 0x30
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a2d      	ldr	r2, [pc, #180]	; (8001b24 <HAL_ADC_MspInit+0xd4>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d153      	bne.n	8001b1a <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a72:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <HAL_ADC_MspInit+0xd8>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	4a2c      	ldr	r2, [pc, #176]	; (8001b28 <HAL_ADC_MspInit+0xd8>)
 8001a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7e:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <HAL_ADC_MspInit+0xd8>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a86:	61bb      	str	r3, [r7, #24]
 8001a88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	4b27      	ldr	r3, [pc, #156]	; (8001b28 <HAL_ADC_MspInit+0xd8>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a26      	ldr	r2, [pc, #152]	; (8001b28 <HAL_ADC_MspInit+0xd8>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <HAL_ADC_MspInit+0xd8>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa2:	4b21      	ldr	r3, [pc, #132]	; (8001b28 <HAL_ADC_MspInit+0xd8>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a20      	ldr	r2, [pc, #128]	; (8001b28 <HAL_ADC_MspInit+0xd8>)
 8001aa8:	f043 0304 	orr.w	r3, r3, #4
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <HAL_ADC_MspInit+0xd8>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aba:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <HAL_ADC_MspInit+0xd8>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a1a      	ldr	r2, [pc, #104]	; (8001b28 <HAL_ADC_MspInit+0xd8>)
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <HAL_ADC_MspInit+0xd8>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SENSE_KL15_Pin|SENSE_KUEHLWASSER_Pin|SENSE_KLIMA_FLAP_Pin|SENSE_GAS_Pin
 8001ad2:	23f8      	movs	r3, #248	; 0xf8
 8001ad4:	61fb      	str	r3, [r7, #28]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4811      	ldr	r0, [pc, #68]	; (8001b2c <HAL_ADC_MspInit+0xdc>)
 8001ae6:	f002 fbcd 	bl	8004284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_DRUCK_Pin|SENSE_DRUCK_TEMP_Pin;
 8001aea:	2330      	movs	r3, #48	; 0x30
 8001aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aee:	2303      	movs	r3, #3
 8001af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af6:	f107 031c 	add.w	r3, r7, #28
 8001afa:	4619      	mov	r1, r3
 8001afc:	480c      	ldr	r0, [pc, #48]	; (8001b30 <HAL_ADC_MspInit+0xe0>)
 8001afe:	f002 fbc1 	bl	8004284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_RETURN_Pin|SENSE_INFO_Pin;
 8001b02:	2303      	movs	r3, #3
 8001b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b06:	2303      	movs	r3, #3
 8001b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0e:	f107 031c 	add.w	r3, r7, #28
 8001b12:	4619      	mov	r1, r3
 8001b14:	4807      	ldr	r0, [pc, #28]	; (8001b34 <HAL_ADC_MspInit+0xe4>)
 8001b16:	f002 fbb5 	bl	8004284 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	3730      	adds	r7, #48	; 0x30
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40012000 	.word	0x40012000
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	40020800 	.word	0x40020800
 8001b34:	40020400 	.word	0x40020400

08001b38 <MX_CAN3_Init>:

CAN_HandleTypeDef hcan3;

/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001b3c:	4b33      	ldr	r3, [pc, #204]	; (8001c0c <MX_CAN3_Init+0xd4>)
 8001b3e:	4a34      	ldr	r2, [pc, #208]	; (8001c10 <MX_CAN3_Init+0xd8>)
 8001b40:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001b42:	4b32      	ldr	r3, [pc, #200]	; (8001c0c <MX_CAN3_Init+0xd4>)
 8001b44:	2206      	movs	r2, #6
 8001b46:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001b48:	4b30      	ldr	r3, [pc, #192]	; (8001c0c <MX_CAN3_Init+0xd4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b4e:	4b2f      	ldr	r3, [pc, #188]	; (8001c0c <MX_CAN3_Init+0xd4>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001b54:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <MX_CAN3_Init+0xd4>)
 8001b56:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001b5a:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001b5c:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <MX_CAN3_Init+0xd4>)
 8001b5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b62:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001b64:	4b29      	ldr	r3, [pc, #164]	; (8001c0c <MX_CAN3_Init+0xd4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001b6a:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <MX_CAN3_Init+0xd4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001b70:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <MX_CAN3_Init+0xd4>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001b76:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <MX_CAN3_Init+0xd4>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001b7c:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <MX_CAN3_Init+0xd4>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001b82:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <MX_CAN3_Init+0xd4>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001b88:	4820      	ldr	r0, [pc, #128]	; (8001c0c <MX_CAN3_Init+0xd4>)
 8001b8a:	f001 fc0f 	bl	80033ac <HAL_CAN_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001b94:	f000 fd5a 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */
	// Starte CAN Bus
	if((HAL_CAN_Start(&hcan3)) != HAL_OK)
 8001b98:	481c      	ldr	r0, [pc, #112]	; (8001c0c <MX_CAN3_Init+0xd4>)
 8001b9a:	f001 fdef 	bl	800377c <HAL_CAN_Start>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_CAN3_Init+0x70>
	{
		// Fehler beim Starten des CAN-Busses
		Error_Handler();
 8001ba4:	f000 fd52 	bl	800264c <Error_Handler>
	}

	// Aktiviere Interrupts fuer CAN Bus
	if((HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_FULL)) != HAL_OK)
 8001ba8:	2104      	movs	r1, #4
 8001baa:	4818      	ldr	r0, [pc, #96]	; (8001c0c <MX_CAN3_Init+0xd4>)
 8001bac:	f002 f80c 	bl	8003bc8 <HAL_CAN_ActivateNotification>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_CAN3_Init+0x82>
	{
		// Fehler in der Initialisierung des CAN Interrupts
		Error_Handler();
 8001bb6:	f000 fd49 	bl	800264c <Error_Handler>
	}

	// Filter Bank initialisieren um Daten zu empfangen
	// Akzeptiere alle CAN-Pakete
	sFilterConfig.FilterBank = 0;
 8001bba:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <MX_CAN3_Init+0xdc>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001bc0:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <MX_CAN3_Init+0xdc>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001bc6:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <MX_CAN3_Init+0xdc>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0111 << 5;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <MX_CAN3_Init+0xdc>)
 8001bce:	f242 2220 	movw	r2, #8736	; 0x2220
 8001bd2:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0;
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <MX_CAN3_Init+0xdc>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0111 << 5;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <MX_CAN3_Init+0xdc>)
 8001bdc:	f242 2220 	movw	r2, #8736	; 0x2220
 8001be0:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0;
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <MX_CAN3_Init+0xdc>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = 0;
 8001be8:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <MX_CAN3_Init+0xdc>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <MX_CAN3_Init+0xdc>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	621a      	str	r2, [r3, #32]

	// Filter Bank schreiben
	if((HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 8001bf4:	4907      	ldr	r1, [pc, #28]	; (8001c14 <MX_CAN3_Init+0xdc>)
 8001bf6:	4805      	ldr	r0, [pc, #20]	; (8001c0c <MX_CAN3_Init+0xd4>)
 8001bf8:	f001 fcd4 	bl	80035a4 <HAL_CAN_ConfigFilter>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_CAN3_Init+0xce>
	{
		// Fehler beim konfigurieren der Filterbank fuer den CAN-Bus
		Error_Handler();
 8001c02:	f000 fd23 	bl	800264c <Error_Handler>
	}

  /* USER CODE END CAN3_Init 2 */

}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200000c8 	.word	0x200000c8
 8001c10:	40003400 	.word	0x40003400
 8001c14:	200000a0 	.word	0x200000a0

08001c18 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN3)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a1b      	ldr	r2, [pc, #108]	; (8001ca4 <HAL_CAN_MspInit+0x8c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d130      	bne.n	8001c9c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN3_MspInit 0 */

  /* USER CODE END CAN3_MspInit 0 */
    /* CAN3 clock enable */
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <HAL_CAN_MspInit+0x90>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	4a1a      	ldr	r2, [pc, #104]	; (8001ca8 <HAL_CAN_MspInit+0x90>)
 8001c40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c44:	6413      	str	r3, [r2, #64]	; 0x40
 8001c46:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <HAL_CAN_MspInit+0x90>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <HAL_CAN_MspInit+0x90>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <HAL_CAN_MspInit+0x90>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_CAN_MspInit+0x90>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
    /**CAN3 GPIO Configuration
    PA8     ------> CAN3_RX
    PA15     ------> CAN3_TX
    */
    GPIO_InitStruct.Pin = ACAN_RX_Pin|ACAN_TX_Pin;
 8001c6a:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001c7c:	230b      	movs	r3, #11
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	4619      	mov	r1, r3
 8001c86:	4809      	ldr	r0, [pc, #36]	; (8001cac <HAL_CAN_MspInit+0x94>)
 8001c88:	f002 fafc 	bl	8004284 <HAL_GPIO_Init>

    /* CAN3 interrupt Init */
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2100      	movs	r1, #0
 8001c90:	2069      	movs	r0, #105	; 0x69
 8001c92:	f002 fac0 	bl	8004216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 8001c96:	2069      	movs	r0, #105	; 0x69
 8001c98:	f002 fad9 	bl	800424e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	3728      	adds	r7, #40	; 0x28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40003400 	.word	0x40003400
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40020000 	.word	0x40020000

08001cb0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08e      	sub	sp, #56	; 0x38
 8001cb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	60da      	str	r2, [r3, #12]
 8001cc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cc6:	4bb6      	ldr	r3, [pc, #728]	; (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4ab5      	ldr	r2, [pc, #724]	; (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001ccc:	f043 0310 	orr.w	r3, r3, #16
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4bb3      	ldr	r3, [pc, #716]	; (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	623b      	str	r3, [r7, #32]
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cde:	4bb0      	ldr	r3, [pc, #704]	; (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4aaf      	ldr	r2, [pc, #700]	; (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001ce4:	f043 0304 	orr.w	r3, r3, #4
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4bad      	ldr	r3, [pc, #692]	; (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	61fb      	str	r3, [r7, #28]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cf6:	4baa      	ldr	r3, [pc, #680]	; (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4aa9      	ldr	r2, [pc, #676]	; (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001cfc:	f043 0320 	orr.w	r3, r3, #32
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4ba7      	ldr	r3, [pc, #668]	; (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0320 	and.w	r3, r3, #32
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d0e:	4ba4      	ldr	r3, [pc, #656]	; (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4aa3      	ldr	r2, [pc, #652]	; (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4ba1      	ldr	r3, [pc, #644]	; (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d26:	4b9e      	ldr	r3, [pc, #632]	; (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a9d      	ldr	r2, [pc, #628]	; (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b9b      	ldr	r3, [pc, #620]	; (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3e:	4b98      	ldr	r3, [pc, #608]	; (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a97      	ldr	r2, [pc, #604]	; (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001d44:	f043 0302 	orr.w	r3, r3, #2
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b95      	ldr	r3, [pc, #596]	; (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d56:	4b92      	ldr	r3, [pc, #584]	; (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a91      	ldr	r2, [pc, #580]	; (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b8f      	ldr	r3, [pc, #572]	; (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d6e:	4b8c      	ldr	r3, [pc, #560]	; (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a8b      	ldr	r2, [pc, #556]	; (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001d74:	f043 0308 	orr.w	r3, r3, #8
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b89      	ldr	r3, [pc, #548]	; (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 8001d86:	2200      	movs	r2, #0
 8001d88:	f248 0187 	movw	r1, #32903	; 0x8087
 8001d8c:	4885      	ldr	r0, [pc, #532]	; (8001fa4 <MX_GPIO_Init+0x2f4>)
 8001d8e:	f002 fc3d 	bl	800460c <HAL_GPIO_WritePin>
                          |DIGITAL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_ON_Pin|WS2812_Pin, GPIO_PIN_RESET);
 8001d92:	2200      	movs	r2, #0
 8001d94:	f242 0108 	movw	r1, #8200	; 0x2008
 8001d98:	4883      	ldr	r0, [pc, #524]	; (8001fa8 <MX_GPIO_Init+0x2f8>)
 8001d9a:	f002 fc37 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f24f 013c 	movw	r1, #61500	; 0xf03c
 8001da4:	4881      	ldr	r0, [pc, #516]	; (8001fac <MX_GPIO_Init+0x2fc>)
 8001da6:	f002 fc31 	bl	800460c <HAL_GPIO_WritePin>
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 8001daa:	2200      	movs	r2, #0
 8001dac:	f647 0194 	movw	r1, #30868	; 0x7894
 8001db0:	487f      	ldr	r0, [pc, #508]	; (8001fb0 <MX_GPIO_Init+0x300>)
 8001db2:	f002 fc2b 	bl	800460c <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 8001db6:	2200      	movs	r2, #0
 8001db8:	f64e 2188 	movw	r1, #60040	; 0xea88
 8001dbc:	487d      	ldr	r0, [pc, #500]	; (8001fb4 <MX_GPIO_Init+0x304>)
 8001dbe:	f002 fc25 	bl	800460c <HAL_GPIO_WritePin>
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f64e 610c 	movw	r1, #60940	; 0xee0c
 8001dc8:	487b      	ldr	r0, [pc, #492]	; (8001fb8 <MX_GPIO_Init+0x308>)
 8001dca:	f002 fc1f 	bl	800460c <HAL_GPIO_WritePin>
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, GPIO_PIN_RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dd4:	4879      	ldr	r0, [pc, #484]	; (8001fbc <MX_GPIO_Init+0x30c>)
 8001dd6:	f002 fc19 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 8001dda:	f248 0387 	movw	r3, #32903	; 0x8087
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
                          |DIGITAL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de0:	2301      	movs	r3, #1
 8001de2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de8:	2300      	movs	r3, #0
 8001dea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df0:	4619      	mov	r1, r3
 8001df2:	486c      	ldr	r0, [pc, #432]	; (8001fa4 <MX_GPIO_Init+0x2f4>)
 8001df4:	f002 fa46 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ECO_Pin|BC_DOWN_IN_Pin|DURCHFLUSS_Pin|BUTTON2_Pin
 8001df8:	f647 7378 	movw	r3, #32632	; 0x7f78
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
                          |KICKDOWN_Pin|LEERLAUF_Pin|KUPPLUNG_NO_Pin|BREMSE_NC_Pin
                          |BREMSE_NO_Pin|SENSE_SDC_AKKU_Pin|SENSE_SDC_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4865      	ldr	r0, [pc, #404]	; (8001fa4 <MX_GPIO_Init+0x2f4>)
 8001e0e:	f002 fa39 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 8001e12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8001e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e28:	4619      	mov	r1, r3
 8001e2a:	485f      	ldr	r0, [pc, #380]	; (8001fa8 <MX_GPIO_Init+0x2f8>)
 8001e2c:	f002 fa2a 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001e30:	f64d 7347 	movw	r3, #57159	; 0xdf47
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|SD_SW_Pin|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e36:	2303      	movs	r3, #3
 8001e38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e42:	4619      	mov	r1, r3
 8001e44:	4858      	ldr	r0, [pc, #352]	; (8001fa8 <MX_GPIO_Init+0x2f8>)
 8001e46:	f002 fa1d 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|ECON_Pin|RECUPERATION_Pin;
 8001e4a:	f640 0303 	movw	r3, #2051	; 0x803
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4853      	ldr	r0, [pc, #332]	; (8001fac <MX_GPIO_Init+0x2fc>)
 8001e60:	f002 fa10 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 8001e64:	f24f 033c 	movw	r3, #61500	; 0xf03c
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	484b      	ldr	r0, [pc, #300]	; (8001fac <MX_GPIO_Init+0x2fc>)
 8001e7e:	f002 fa01 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PF10 */
  GPIO_InitStruct.Pin = SPI5_CS_Pin|SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin
 8001e82:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e94:	4619      	mov	r1, r3
 8001e96:	4845      	ldr	r0, [pc, #276]	; (8001fac <MX_GPIO_Init+0x2fc>)
 8001e98:	f002 f9f4 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS2812_Pin;
 8001e9c:	2308      	movs	r3, #8
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 8001eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	483d      	ldr	r0, [pc, #244]	; (8001fa8 <MX_GPIO_Init+0x2f8>)
 8001eb4:	f002 f9e6 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|EMERGENCY_RUN_Pin|HW_WAKE_Pin|OUTA_Pin
 8001eb8:	f640 6307 	movw	r3, #3591	; 0xe07
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTB_Pin|BC_UP_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eca:	4619      	mov	r1, r3
 8001ecc:	483b      	ldr	r0, [pc, #236]	; (8001fbc <MX_GPIO_Init+0x30c>)
 8001ece:	f002 f9d9 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 8001ed2:	f647 0394 	movw	r3, #30868	; 0x7894
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4831      	ldr	r0, [pc, #196]	; (8001fb0 <MX_GPIO_Init+0x300>)
 8001eec:	f002 f9ca 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DCDC_INSTRUCTION_Pin|DCDC_FAULT_Pin|ASR_IN1_Pin|GRA1_Pin
 8001ef0:	f241 13f3 	movw	r3, #4595	; 0x11f3
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GRA2_Pin|GRA3_Pin|GRA4_Pin|BC_RESET_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f02:	4619      	mov	r1, r3
 8001f04:	482c      	ldr	r0, [pc, #176]	; (8001fb8 <MX_GPIO_Init+0x308>)
 8001f06:	f002 f9bd 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSE_SDC_BTB_Pin|ANLASSER_Pin;
 8001f0a:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f10:	2300      	movs	r3, #0
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4824      	ldr	r0, [pc, #144]	; (8001fb0 <MX_GPIO_Init+0x300>)
 8001f20:	f002 f9b0 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KL15_Pin|BAMOCAR_IN2_Pin|BAMOCAR_IN1_Pin|ASR_IN2_Pin;
 8001f24:	f241 5310 	movw	r3, #5392	; 0x1510
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f36:	4619      	mov	r1, r3
 8001f38:	481e      	ldr	r0, [pc, #120]	; (8001fb4 <MX_GPIO_Init+0x304>)
 8001f3a:	f002 f9a3 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 8001f3e:	f64e 2388 	movw	r3, #60040	; 0xea88
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f44:	2301      	movs	r3, #1
 8001f46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f54:	4619      	mov	r1, r3
 8001f56:	4817      	ldr	r0, [pc, #92]	; (8001fb4 <MX_GPIO_Init+0x304>)
 8001f58:	f002 f994 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 8001f5c:	f64e 630c 	movw	r3, #60940	; 0xee0c
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f62:	2301      	movs	r3, #1
 8001f64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f72:	4619      	mov	r1, r3
 8001f74:	4810      	ldr	r0, [pc, #64]	; (8001fb8 <MX_GPIO_Init+0x308>)
 8001f76:	f002 f985 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 8001f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4806      	ldr	r0, [pc, #24]	; (8001fa8 <MX_GPIO_Init+0x2f8>)
 8001f8e:	f002 f979 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RUECKWARNUNG_Pin;
 8001f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e00f      	b.n	8001fc0 <MX_GPIO_Init+0x310>
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40020800 	.word	0x40020800
 8001fac:	40021400 	.word	0x40021400
 8001fb0:	40020400 	.word	0x40020400
 8001fb4:	40020c00 	.word	0x40020c00
 8001fb8:	40021800 	.word	0x40021800
 8001fbc:	40020000 	.word	0x40020000
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RUECKWARNUNG_GPIO_Port, &GPIO_InitStruct);
 8001fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fca:	4619      	mov	r1, r3
 8001fcc:	480f      	ldr	r0, [pc, #60]	; (800200c <MX_GPIO_Init+0x35c>)
 8001fce:	f002 f959 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_TX_Pin|CAN1_RX_Pin|SD_CMD_Pin;
 8001fd2:	2307      	movs	r3, #7
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480a      	ldr	r0, [pc, #40]	; (8002010 <MX_GPIO_Init+0x360>)
 8001fe6:	f002 f94d 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CAN2_TX_Pin|CAN2_RX_Pin|I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001fea:	f44f 7358 	mov.w	r3, #864	; 0x360
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4805      	ldr	r0, [pc, #20]	; (8002014 <MX_GPIO_Init+0x364>)
 8002000:	f002 f940 	bl	8004284 <HAL_GPIO_Init>

}
 8002004:	bf00      	nop
 8002006:	3738      	adds	r7, #56	; 0x38
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40020000 	.word	0x40020000
 8002010:	40020c00 	.word	0x40020c00
 8002014:	40020400 	.word	0x40020400

08002018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002018:	b5b0      	push	{r4, r5, r7, lr}
 800201a:	b0ac      	sub	sp, #176	; 0xb0
 800201c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800201e:	f000 fcce 	bl	80029be <HAL_Init>

  /* USER CODE BEGIN Init */

	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[6] = {0}, InData[6] = {0}, status, tmp[4], task = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002028:	2300      	movs	r3, #0
 800202a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800202e:	2300      	movs	r3, #0
 8002030:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002034:	2300      	movs	r3, #0
 8002036:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 800203a:	2300      	movs	r3, #0
 800203c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	uint16_t count = 0, gas_adc = 0, gas_mean = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8002046:	2300      	movs	r3, #0
 8002048:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800204c:	2300      	movs	r3, #0
 800204e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  	uint32_t lastcan = 0, lastsendcan = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002058:	2300      	movs	r3, #0
 800205a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  	// Erstelle Can-Nachrichten
    // Sendenachricht erstellen
  	CAN_TxHeaderTypeDef TxMessage = {0x123, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 800205e:	4b74      	ldr	r3, [pc, #464]	; (8002230 <main+0x218>)
 8002060:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8002064:	461d      	mov	r5, r3
 8002066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800206a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800206e:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet digitale Ausgaenge erstellen
  	CAN_TxHeaderTypeDef TxOutput = {MOTOR_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 6, DISABLE};
 8002072:	4b70      	ldr	r3, [pc, #448]	; (8002234 <main+0x21c>)
 8002074:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8002078:	461d      	mov	r5, r3
 800207a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800207c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800207e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002082:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet digitale Eingaenge erstellen
  	CAN_TxHeaderTypeDef TxInput = {MOTOR_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 6, DISABLE};
 8002086:	4b6c      	ldr	r3, [pc, #432]	; (8002238 <main+0x220>)
 8002088:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800208c:	461d      	mov	r5, r3
 800208e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002092:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002096:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet Motor1 erstellen
  	CAN_TxHeaderTypeDef TxMotor1 = {MOTOR_CAN_DREHZAHL, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 800209a:	4b68      	ldr	r3, [pc, #416]	; (800223c <main+0x224>)
 800209c:	f107 041c 	add.w	r4, r7, #28
 80020a0:	461d      	mov	r5, r3
 80020a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80020aa:	e884 0003 	stmia.w	r4, {r0, r1}
  	// Sendenachricht Motorsteuergeraet an Bamocar erstellen
  	CAN_TxHeaderTypeDef TxBamocar = {BAMOCAR_TX_ID, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 80020ae:	4b64      	ldr	r3, [pc, #400]	; (8002240 <main+0x228>)
 80020b0:	1d3c      	adds	r4, r7, #4
 80020b2:	461d      	mov	r5, r3
 80020b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80020bc:	e884 0003 	stmia.w	r4, {r0, r1}

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020c0:	f000 fa16 	bl	80024f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020c4:	f7ff fdf4 	bl	8001cb0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80020c8:	f000 fbc2 	bl	8002850 <MX_USART2_UART_Init>
  MX_CAN3_Init();
 80020cc:	f7ff fd34 	bl	8001b38 <MX_CAN3_Init>
  MX_ADC1_Init();
 80020d0:	f7ff fbe4 	bl	800189c <MX_ADC1_Init>
  MX_TIM6_Init();
 80020d4:	f000 fb60 	bl	8002798 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  	// Start Timer 6 Interrupt
  	HAL_TIM_Base_Start_IT(&htim6);
 80020d8:	485a      	ldr	r0, [pc, #360]	; (8002244 <main+0x22c>)
 80020da:	f003 fc15 	bl	8005908 <HAL_TIM_Base_Start_IT>

  	// Schreibe Resetquelle auf die Konsole
#ifdef DEBUG
	printResetSource(readResetSource());
 80020de:	f7fe fd69 	bl	8000bb4 <readResetSource>
 80020e2:	4603      	mov	r3, r0
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe fdb7 	bl	8000c58 <printResetSource>

  	// Teste serielle Schnittstelle
  	#define TEST_STRING_UART	"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
  	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 80020ea:	213a      	movs	r1, #58	; 0x3a
 80020ec:	4856      	ldr	r0, [pc, #344]	; (8002248 <main+0x230>)
 80020ee:	f7fe fb67 	bl	80007c0 <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 80020f2:	f7fe fd35 	bl	8000b60 <collectSystemInfo>
#endif

	// Leds Testen
  	testPCB_Leds();
 80020f6:	f7ff fa1b 	bl	8001530 <testPCB_Leds>
	testCockpit_Leds();
 80020fa:	f7ff fa57 	bl	80015ac <testCockpit_Leds>

  	// Testen der Versorgungsspannung am Shutdown-Circuit
  	testSDC();
 80020fe:	f7ff faef 	bl	80016e0 <testSDC>

  	// Alle Fehler Cockpit loeschen
  	cockpit_default();
 8002102:	f7ff fab3 	bl	800166c <cockpit_default>
  	// Setze LED Green
  	leuchten_out.GreenLed = 1;
 8002106:	4a51      	ldr	r2, [pc, #324]	; (800224c <main+0x234>)
 8002108:	7853      	ldrb	r3, [r2, #1]
 800210a:	f043 0310 	orr.w	r3, r3, #16
 800210e:	7053      	strb	r3, [r2, #1]
  	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 8002110:	4b4e      	ldr	r3, [pc, #312]	; (800224c <main+0x234>)
 8002112:	785b      	ldrb	r3, [r3, #1]
 8002114:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002118:	b2db      	uxtb	r3, r3
 800211a:	461a      	mov	r2, r3
 800211c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002120:	484b      	ldr	r0, [pc, #300]	; (8002250 <main+0x238>)
 8002122:	f002 fa73 	bl	800460c <HAL_GPIO_WritePin>

  	// Lese alle Eingaenge
  	readall_inputs();
 8002126:	f7fe ffa1 	bl	800106c <readall_inputs>

    // Sendenachricht 0x123 mit Dummy-Daten fuellen
  	for (uint8_t j = 0; j < 8; j++)
 800212a:	2300      	movs	r3, #0
 800212c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8002130:	e00e      	b.n	8002150 <main+0x138>
  		TxData[j] = (j + 1);
 8002132:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002136:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 800213a:	3201      	adds	r2, #1
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	33b0      	adds	r3, #176	; 0xb0
 8002140:	443b      	add	r3, r7
 8002142:	f803 2c20 	strb.w	r2, [r3, #-32]
  	for (uint8_t j = 0; j < 8; j++)
 8002146:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800214a:	3301      	adds	r3, #1
 800214c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8002150:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002154:	2b07      	cmp	r3, #7
 8002156:	d9ec      	bls.n	8002132 <main+0x11a>

  	// Starte While-Schleife
#define MAINWHILE				"\nStarte While Schleife\n"
  	uartTransmit(MAINWHILE, sizeof(MAINWHILE));
 8002158:	2118      	movs	r1, #24
 800215a:	483e      	ldr	r0, [pc, #248]	; (8002254 <main+0x23c>)
 800215c:	f7fe fb30 	bl	80007c0 <uartTransmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 8002160:	4b3d      	ldr	r3, [pc, #244]	; (8002258 <main+0x240>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b01      	cmp	r3, #1
 8002168:	d10a      	bne.n	8002180 <main+0x168>
		{
			count++;																	// Zaehler count hochzaehlen
 800216a:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800216e:	3301      	adds	r3, #1
 8002170:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
			millisekunden_flag_1 = 0;													// Setze Millisekunden-Flag zurueck
 8002174:	4b38      	ldr	r3, [pc, #224]	; (8002258 <main+0x240>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]

			// Setze Flag start, nur wenn millisekunden Flag gesetzt war
			task = 1;
 800217a:	2301      	movs	r3, #1
 800217c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		}

		// PWM Oelstandsensor Kombiinstrument ausgeben
		pwm_oelstand(count);
 8002180:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fa3f 	bl	8001608 <pwm_oelstand>

		// Task wird alle 20 Millisekunden ausgefuehrt
		if (((count % 20) == 0) && (task == 1))
 800218a:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 800218e:	4b33      	ldr	r3, [pc, #204]	; (800225c <main+0x244>)
 8002190:	fba3 1302 	umull	r1, r3, r3, r2
 8002194:	0919      	lsrs	r1, r3, #4
 8002196:	460b      	mov	r3, r1
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d112      	bne.n	80021cc <main+0x1b4>
 80021a6:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d10e      	bne.n	80021cc <main+0x1b4>
		{
			// Sende Nachricht Motor1
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMotor1, motor1.output, (uint32_t *)CAN_TX_MAILBOX0);
 80021ae:	f107 011c 	add.w	r1, r7, #28
 80021b2:	2301      	movs	r3, #1
 80021b4:	4a2a      	ldr	r2, [pc, #168]	; (8002260 <main+0x248>)
 80021b6:	482b      	ldr	r0, [pc, #172]	; (8002264 <main+0x24c>)
 80021b8:	f001 fb24 	bl	8003804 <HAL_CAN_AddTxMessage>
 80021bc:	4603      	mov	r3, r0
 80021be:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			hal_error(status);
 80021c2:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe fe66 	bl	8000e98 <hal_error>
		}

		// Task wird alle 100 Millisekunden ausgefuehrt
		if (((count % 100) == 0) && (task == 1))
 80021cc:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80021d0:	4a25      	ldr	r2, [pc, #148]	; (8002268 <main+0x250>)
 80021d2:	fba2 1203 	umull	r1, r2, r2, r3
 80021d6:	0952      	lsrs	r2, r2, #5
 80021d8:	2164      	movs	r1, #100	; 0x64
 80021da:	fb01 f202 	mul.w	r2, r1, r2
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d160      	bne.n	80022a8 <main+0x290>
 80021e6:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d15c      	bne.n	80022a8 <main+0x290>
		{
			// alle Inputs einlesen
			readall_inputs();
 80021ee:	f7fe ff3d 	bl	800106c <readall_inputs>

			// Anlasser abfragen
			readAnlasser();
 80021f2:	f7ff f969 	bl	80014c8 <readAnlasser>

			// Bremse pruefen
			readBrake();
 80021f6:	f7ff fb13 	bl	8001820 <readBrake>

			// Gaspedal pruefen
			gas_adc = readTrottle();
 80021fa:	f7ff fa9d 	bl	8001738 <readTrottle>
 80021fe:	4603      	mov	r3, r0
 8002200:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c

			// Abfrage ob Mittelwertbildung
			if (gas_adc > 0)															// Wenn Gaspedal Plausible dann Mittelwertbildung
 8002204:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002208:	2b00      	cmp	r3, #0
 800220a:	d031      	beq.n	8002270 <main+0x258>
			{
				// Mittelwert bilden (https://nestedsoftware.com/2018/03/20/calculating-a-moving-average-on-streaming-data-5a7k.22879.html)
				// Mittelwertbildung aus 10 Werten (Weniger die 10 verkleineren, Mehr die 10 vergroeßern)
				gas_mean = (gas_mean + ((gas_adc - gas_mean)/10));
 800220c:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8002210:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	4a15      	ldr	r2, [pc, #84]	; (800226c <main+0x254>)
 8002218:	fb82 1203 	smull	r1, r2, r2, r3
 800221c:	1092      	asrs	r2, r2, #2
 800221e:	17db      	asrs	r3, r3, #31
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	b29a      	uxth	r2, r3
 8002224:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8002228:	4413      	add	r3, r2
 800222a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800222e:	e022      	b.n	8002276 <main+0x25e>
 8002230:	08006f7c 	.word	0x08006f7c
 8002234:	08006f94 	.word	0x08006f94
 8002238:	08006fac 	.word	0x08006fac
 800223c:	08006fc4 	.word	0x08006fc4
 8002240:	08006fdc 	.word	0x08006fdc
 8002244:	20000120 	.word	0x20000120
 8002248:	08006eec 	.word	0x08006eec
 800224c:	20000050 	.word	0x20000050
 8002250:	40020400 	.word	0x40020400
 8002254:	08006f28 	.word	0x08006f28
 8002258:	20000114 	.word	0x20000114
 800225c:	cccccccd 	.word	0xcccccccd
 8002260:	20000118 	.word	0x20000118
 8002264:	200000c8 	.word	0x200000c8
 8002268:	51eb851f 	.word	0x51eb851f
 800226c:	66666667 	.word	0x66666667
			}
			else																		// Wenn Gaspedal unplausible oder Kupplung getreten
			{
				gas_mean = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			}

			// Daten in Bamocarformat umwandeln
			tmp[0] = 0x90;
 8002276:	2390      	movs	r3, #144	; 0x90
 8002278:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
			tmp[1] = ((gas_mean) >> 8);
 800227c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8002280:	0a1b      	lsrs	r3, r3, #8
 8002282:	b29b      	uxth	r3, r3
 8002284:	b2db      	uxtb	r3, r3
 8002286:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
			tmp[2] = (gas_mean);
 800228a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800228e:	b2db      	uxtb	r3, r3
 8002290:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

			// Drehmoment an Bamocar senden
			status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
 8002294:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8002298:	1d39      	adds	r1, r7, #4
 800229a:	2301      	movs	r3, #1
 800229c:	4883      	ldr	r0, [pc, #524]	; (80024ac <main+0x494>)
 800229e:	f001 fab1 	bl	8003804 <HAL_CAN_AddTxMessage>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			//hal_error(status);
		}

		// Task wird alle 200 Millisekunden ausgefuehrt
		if (((count % 200) == 0) && (task == 1))
 80022a8:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80022ac:	4a80      	ldr	r2, [pc, #512]	; (80024b0 <main+0x498>)
 80022ae:	fba2 1203 	umull	r1, r2, r2, r3
 80022b2:	0992      	lsrs	r2, r2, #6
 80022b4:	21c8      	movs	r1, #200	; 0xc8
 80022b6:	fb01 f202 	mul.w	r2, r1, r2
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	b29b      	uxth	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d172      	bne.n	80023a8 <main+0x390>
 80022c2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d16e      	bne.n	80023a8 <main+0x390>
		{
			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 80022ca:	4b7a      	ldr	r3, [pc, #488]	; (80024b4 <main+0x49c>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
			OutData[1] = highcurrent_out.high_out;
 80022d2:	4b79      	ldr	r3, [pc, #484]	; (80024b8 <main+0x4a0>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
			OutData[2] = (leuchten_out.ledoutput >> 8);
 80022da:	4b78      	ldr	r3, [pc, #480]	; (80024bc <main+0x4a4>)
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			OutData[3] = leuchten_out.ledoutput;
 80022e8:	4b74      	ldr	r3, [pc, #464]	; (80024bc <main+0x4a4>)
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			OutData[4] = komfort_out.komfortoutput;
 80022f2:	4b73      	ldr	r3, [pc, #460]	; (80024c0 <main+0x4a8>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			OutData[5] ++;
 80022fa:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80022fe:	3301      	adds	r3, #1
 8002300:	b2db      	uxtb	r3, r3
 8002302:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX2);
 8002306:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800230a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800230e:	2304      	movs	r3, #4
 8002310:	4866      	ldr	r0, [pc, #408]	; (80024ac <main+0x494>)
 8002312:	f001 fa77 	bl	8003804 <HAL_CAN_AddTxMessage>
 8002316:	4603      	mov	r3, r0
 8002318:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			//hal_error(status);

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] ++;
 800231c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8002320:	3301      	adds	r3, #1
 8002322:	b2db      	uxtb	r3, r3
 8002324:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
			InData[1] = (system_in.systeminput >> 8);
 8002328:	4b66      	ldr	r3, [pc, #408]	; (80024c4 <main+0x4ac>)
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	0a1b      	lsrs	r3, r3, #8
 800232e:	b29b      	uxth	r3, r3
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
			InData[2] = system_in.systeminput;
 8002336:	4b63      	ldr	r3, [pc, #396]	; (80024c4 <main+0x4ac>)
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			InData[3] = sdc_in.sdcinput;
 8002340:	4b61      	ldr	r3, [pc, #388]	; (80024c8 <main+0x4b0>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			InData[4] = (komfort_in.komfortinput >> 8);
 8002348:	4b60      	ldr	r3, [pc, #384]	; (80024cc <main+0x4b4>)
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	b29b      	uxth	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
			InData[5] = komfort_in.komfortinput;
 8002356:	4b5d      	ldr	r3, [pc, #372]	; (80024cc <main+0x4b4>)
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

			HAL_Delay(10);
 8002360:	200a      	movs	r0, #10
 8002362:	f000 fb89 	bl	8002a78 <HAL_Delay>

			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX1);
 8002366:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800236a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800236e:	2302      	movs	r3, #2
 8002370:	484e      	ldr	r0, [pc, #312]	; (80024ac <main+0x494>)
 8002372:	f001 fa47 	bl	8003804 <HAL_CAN_AddTxMessage>
 8002376:	4603      	mov	r3, r0
 8002378:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			//hal_error(status);

			// Bamocar Fehler auslesen
			tmp[0] = 0x3D;
 800237c:	233d      	movs	r3, #61	; 0x3d
 800237e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
			tmp[1] = 0x8F;
 8002382:	238f      	movs	r3, #143	; 0x8f
 8002384:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
			tmp[2] = 0x00;
 8002388:	2300      	movs	r3, #0
 800238a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

			// Befehl Fehler auslesen an Bamocar senden
			status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
 800238e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8002392:	1d39      	adds	r1, r7, #4
 8002394:	2301      	movs	r3, #1
 8002396:	4845      	ldr	r0, [pc, #276]	; (80024ac <main+0x494>)
 8002398:	f001 fa34 	bl	8003804 <HAL_CAN_AddTxMessage>
 800239c:	4603      	mov	r3, r0
 800239e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			//hal_error(status);

			// Variable count auf 0 zuruecksetzen
			count = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
		}

		// Zuruecksetzen Flag start
		task = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf


	  	// Task wird alle 5 Millisekunden ausgefuehrt
	  	if (millis() - lastcan >= 5)
 80023ae:	f7ff f8b7 	bl	8001520 <millis>
 80023b2:	4602      	mov	r2, r0
 80023b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d95b      	bls.n	8002476 <main+0x45e>
		{
	  		HAL_CAN_GetRxMessage(&hcan3, CAN_RX_FIFO0, &RxMessage, TxData);
 80023be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80023c2:	4a43      	ldr	r2, [pc, #268]	; (80024d0 <main+0x4b8>)
 80023c4:	2100      	movs	r1, #0
 80023c6:	4839      	ldr	r0, [pc, #228]	; (80024ac <main+0x494>)
 80023c8:	f001 faec 	bl	80039a4 <HAL_CAN_GetRxMessage>

			// Wenn Nachricht ueber den CAN-Bus empfangen wurden
			if (can_change == 1)
 80023cc:	4b41      	ldr	r3, [pc, #260]	; (80024d4 <main+0x4bc>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d14f      	bne.n	8002476 <main+0x45e>
			{
				// Nachricht ID ueber UART ausgeben
				uartTransmitNumber(RxMessage.StdId, 16);
 80023d6:	4b3e      	ldr	r3, [pc, #248]	; (80024d0 <main+0x4b8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2110      	movs	r1, #16
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe fa03 	bl	80007e8 <uartTransmitNumber>
				uartTransmit("\t", 1);
 80023e2:	2101      	movs	r1, #1
 80023e4:	483c      	ldr	r0, [pc, #240]	; (80024d8 <main+0x4c0>)
 80023e6:	f7fe f9eb 	bl	80007c0 <uartTransmit>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 80023ea:	2300      	movs	r3, #0
 80023ec:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 80023f0:	e00c      	b.n	800240c <main+0x3f4>
				{
					uartTransmitNumber(RxData[i], 16);
 80023f2:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80023f6:	4a39      	ldr	r2, [pc, #228]	; (80024dc <main+0x4c4>)
 80023f8:	5cd3      	ldrb	r3, [r2, r3]
 80023fa:	2110      	movs	r1, #16
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe f9f3 	bl	80007e8 <uartTransmitNumber>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 8002402:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8002406:	3301      	adds	r3, #1
 8002408:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 800240c:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 8002410:	4b2f      	ldr	r3, [pc, #188]	; (80024d0 <main+0x4b8>)
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	429a      	cmp	r2, r3
 8002416:	d3ec      	bcc.n	80023f2 <main+0x3da>
				}
				uartTransmit("\n", 1);
 8002418:	2101      	movs	r1, #1
 800241a:	4831      	ldr	r0, [pc, #196]	; (80024e0 <main+0x4c8>)
 800241c:	f7fe f9d0 	bl	80007c0 <uartTransmit>

				// Sortieren der IDs nach Geraeten
				switch (RxMessage.StdId)
 8002420:	4b2b      	ldr	r3, [pc, #172]	; (80024d0 <main+0x4b8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f240 1211 	movw	r2, #273	; 0x111
 8002428:	4293      	cmp	r3, r2
 800242a:	d00b      	beq.n	8002444 <main+0x42c>
 800242c:	f240 1281 	movw	r2, #385	; 0x181
 8002430:	4293      	cmp	r3, r2
 8002432:	d10c      	bne.n	800244e <main+0x436>
				{
					case BAMOCAR_RX_ID:
						BAMOCAN_ID(&RxData[0], RxMessage.DLC);
 8002434:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <main+0x4b8>)
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	4619      	mov	r1, r3
 800243c:	4827      	ldr	r0, [pc, #156]	; (80024dc <main+0x4c4>)
 800243e:	f7fe f885 	bl	800054c <BAMOCAN_ID>
						break;
 8002442:	e009      	b.n	8002458 <main+0x440>
					case 0x111:
						uartTransmit("CAN-ID Computer config\n", 23);
 8002444:	2117      	movs	r1, #23
 8002446:	4827      	ldr	r0, [pc, #156]	; (80024e4 <main+0x4cc>)
 8002448:	f7fe f9ba 	bl	80007c0 <uartTransmit>
						break;
 800244c:	e004      	b.n	8002458 <main+0x440>
					default:
						uartTransmit("CAN-ID nicht verfuegbar\n", 24);
 800244e:	2118      	movs	r1, #24
 8002450:	4825      	ldr	r0, [pc, #148]	; (80024e8 <main+0x4d0>)
 8002452:	f7fe f9b5 	bl	80007c0 <uartTransmit>
						break;
 8002456:	bf00      	nop
				}

				// Drehzahl ausgeben
				TxData[2] = motor1.output[2];
 8002458:	4b24      	ldr	r3, [pc, #144]	; (80024ec <main+0x4d4>)
 800245a:	789b      	ldrb	r3, [r3, #2]
 800245c:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
				TxData[3] = motor1.output[3];
 8002460:	4b22      	ldr	r3, [pc, #136]	; (80024ec <main+0x4d4>)
 8002462:	78db      	ldrb	r3, [r3, #3]
 8002464:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
				lastcan = millis();
 8002468:	f7ff f85a 	bl	8001520 <millis>
 800246c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

				can_change = 0;
 8002470:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <main+0x4bc>)
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
			}
		}

#ifdef DEBUG
		// Sende CAN Nachricht auf CAN-Bus / Teste CAN-BUS
		if (millis() - lastsendcan >= 1000)
 8002476:	f7ff f853 	bl	8001520 <millis>
 800247a:	4602      	mov	r2, r0
 800247c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002486:	f4ff ae6b 	bcc.w	8002160 <main+0x148>
		{
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 800248a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800248e:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8002492:	2301      	movs	r3, #1
 8002494:	4805      	ldr	r0, [pc, #20]	; (80024ac <main+0x494>)
 8002496:	f001 f9b5 	bl	8003804 <HAL_CAN_AddTxMessage>
 800249a:	4603      	mov	r3, r0
 800249c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			//hal_error(status);
			lastsendcan = millis();
 80024a0:	f7ff f83e 	bl	8001520 <millis>
 80024a4:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
		if (millisekunden_flag_1 == 1)
 80024a8:	e65a      	b.n	8002160 <main+0x148>
 80024aa:	bf00      	nop
 80024ac:	200000c8 	.word	0x200000c8
 80024b0:	51eb851f 	.word	0x51eb851f
 80024b4:	20000048 	.word	0x20000048
 80024b8:	2000004c 	.word	0x2000004c
 80024bc:	20000050 	.word	0x20000050
 80024c0:	20000054 	.word	0x20000054
 80024c4:	2000003c 	.word	0x2000003c
 80024c8:	20000040 	.word	0x20000040
 80024cc:	20000044 	.word	0x20000044
 80024d0:	200000f0 	.word	0x200000f0
 80024d4:	20000115 	.word	0x20000115
 80024d8:	08006f40 	.word	0x08006f40
 80024dc:	2000010c 	.word	0x2000010c
 80024e0:	08006f44 	.word	0x08006f44
 80024e4:	08006f48 	.word	0x08006f48
 80024e8:	08006f60 	.word	0x08006f60
 80024ec:	20000118 	.word	0x20000118

080024f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b094      	sub	sp, #80	; 0x50
 80024f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024f6:	f107 031c 	add.w	r3, r7, #28
 80024fa:	2234      	movs	r2, #52	; 0x34
 80024fc:	2100      	movs	r1, #0
 80024fe:	4618      	mov	r0, r3
 8002500:	f004 fa1e 	bl	8006940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002504:	f107 0308 	add.w	r3, r7, #8
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002514:	4b2c      	ldr	r3, [pc, #176]	; (80025c8 <SystemClock_Config+0xd8>)
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	4a2b      	ldr	r2, [pc, #172]	; (80025c8 <SystemClock_Config+0xd8>)
 800251a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251e:	6413      	str	r3, [r2, #64]	; 0x40
 8002520:	4b29      	ldr	r3, [pc, #164]	; (80025c8 <SystemClock_Config+0xd8>)
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002528:	607b      	str	r3, [r7, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800252c:	4b27      	ldr	r3, [pc, #156]	; (80025cc <SystemClock_Config+0xdc>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a26      	ldr	r2, [pc, #152]	; (80025cc <SystemClock_Config+0xdc>)
 8002532:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b24      	ldr	r3, [pc, #144]	; (80025cc <SystemClock_Config+0xdc>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002540:	603b      	str	r3, [r7, #0]
 8002542:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002544:	2301      	movs	r3, #1
 8002546:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800254c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800254e:	2302      	movs	r3, #2
 8002550:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002552:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002556:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002558:	2319      	movs	r3, #25
 800255a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 800255c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002560:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002562:	2302      	movs	r3, #2
 8002564:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002566:	2302      	movs	r3, #2
 8002568:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800256a:	2302      	movs	r3, #2
 800256c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800256e:	f107 031c 	add.w	r3, r7, #28
 8002572:	4618      	mov	r0, r3
 8002574:	f002 f8b4 	bl	80046e0 <HAL_RCC_OscConfig>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800257e:	f000 f865 	bl	800264c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002582:	f002 f85d 	bl	8004640 <HAL_PWREx_EnableOverDrive>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800258c:	f000 f85e 	bl	800264c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002590:	230f      	movs	r3, #15
 8002592:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002594:	2302      	movs	r3, #2
 8002596:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002598:	2300      	movs	r3, #0
 800259a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800259c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80025a8:	f107 0308 	add.w	r3, r7, #8
 80025ac:	2107      	movs	r1, #7
 80025ae:	4618      	mov	r0, r3
 80025b0:	f002 fb44 	bl	8004c3c <HAL_RCC_ClockConfig>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <SystemClock_Config+0xce>
  {
    Error_Handler();
 80025ba:	f000 f847 	bl	800264c <Error_Handler>
  }
}
 80025be:	bf00      	nop
 80025c0:	3750      	adds	r7, #80	; 0x50
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40007000 	.word	0x40007000

080025d0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
// Interrupts
// Can-Interrupt: Nachricht wartet
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	// Nachricht aus Speicher auslesen
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80025da:	4a07      	ldr	r2, [pc, #28]	; (80025f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80025dc:	2100      	movs	r1, #0
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f001 f9e0 	bl	80039a4 <HAL_CAN_GetRxMessage>
	can_change = 1;
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	701a      	strb	r2, [r3, #0]
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	2000010c 	.word	0x2000010c
 80025f8:	200000f0 	.word	0x200000f0
 80025fc:	20000115 	.word	0x20000115

08002600 <HAL_CAN_RxFifo0FullCallback>:

// Can-Interrupt: Fifo0 ist voll
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
	// Fifo0 voll
	uartTransmit("Fifo0 von CAN3 ist voll\n", 24);
 8002608:	2118      	movs	r1, #24
 800260a:	4804      	ldr	r0, [pc, #16]	; (800261c <HAL_CAN_RxFifo0FullCallback+0x1c>)
 800260c:	f7fe f8d8 	bl	80007c0 <uartTransmit>

	Error_Handler();
 8002610:	f000 f81c 	bl	800264c <Error_Handler>
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	08006ff4 	.word	0x08006ff4

08002620 <HAL_TIM_PeriodElapsedCallback>:

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)																	// Wenn Timer 6 den ueberlauf ausgeloest hat
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a06      	ldr	r2, [pc, #24]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d102      	bne.n	8002636 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;														// Setze Millisekunden Flag
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
	}
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20000120 	.word	0x20000120
 8002648:	20000114 	.word	0x20000114

0800264c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002650:	b672      	cpsid	i
}
 8002652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8002654:	4a11      	ldr	r2, [pc, #68]	; (800269c <Error_Handler+0x50>)
 8002656:	7853      	ldrb	r3, [r2, #1]
 8002658:	f043 0308 	orr.w	r3, r3, #8
 800265c:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 800265e:	4b0f      	ldr	r3, [pc, #60]	; (800269c <Error_Handler+0x50>)
 8002660:	785b      	ldrb	r3, [r3, #1]
 8002662:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002666:	b2db      	uxtb	r3, r3
 8002668:	461a      	mov	r2, r3
 800266a:	2104      	movs	r1, #4
 800266c:	480c      	ldr	r0, [pc, #48]	; (80026a0 <Error_Handler+0x54>)
 800266e:	f001 ffcd 	bl	800460c <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8002672:	4a0a      	ldr	r2, [pc, #40]	; (800269c <Error_Handler+0x50>)
 8002674:	7853      	ldrb	r3, [r2, #1]
 8002676:	f36f 1304 	bfc	r3, #4, #1
 800267a:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 800267c:	4b07      	ldr	r3, [pc, #28]	; (800269c <Error_Handler+0x50>)
 800267e:	785b      	ldrb	r3, [r3, #1]
 8002680:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002684:	b2db      	uxtb	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800268c:	4804      	ldr	r0, [pc, #16]	; (80026a0 <Error_Handler+0x54>)
 800268e:	f001 ffbd 	bl	800460c <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 8002692:	2122      	movs	r1, #34	; 0x22
 8002694:	4803      	ldr	r0, [pc, #12]	; (80026a4 <Error_Handler+0x58>)
 8002696:	f7fe f893 	bl	80007c0 <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1);
 800269a:	e7fe      	b.n	800269a <Error_Handler+0x4e>
 800269c:	20000050 	.word	0x20000050
 80026a0:	40020400 	.word	0x40020400
 80026a4:	08007010 	.word	0x08007010

080026a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80026ae:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <HAL_MspInit+0x44>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	4a0e      	ldr	r2, [pc, #56]	; (80026ec <HAL_MspInit+0x44>)
 80026b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ba:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <HAL_MspInit+0x44>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c2:	607b      	str	r3, [r7, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_MspInit+0x44>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	4a08      	ldr	r2, [pc, #32]	; (80026ec <HAL_MspInit+0x44>)
 80026cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d0:	6453      	str	r3, [r2, #68]	; 0x44
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_MspInit+0x44>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800

080026f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026f4:	e7fe      	b.n	80026f4 <NMI_Handler+0x4>

080026f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026f6:	b480      	push	{r7}
 80026f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026fa:	e7fe      	b.n	80026fa <HardFault_Handler+0x4>

080026fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002700:	e7fe      	b.n	8002700 <MemManage_Handler+0x4>

08002702 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002706:	e7fe      	b.n	8002706 <BusFault_Handler+0x4>

08002708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800270c:	e7fe      	b.n	800270c <UsageFault_Handler+0x4>

0800270e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800273c:	f000 f97c 	bl	8002a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}

08002744 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002748:	4802      	ldr	r0, [pc, #8]	; (8002754 <TIM6_DAC_IRQHandler+0x10>)
 800274a:	f003 f955 	bl	80059f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000120 	.word	0x20000120

08002758 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 800275c:	4802      	ldr	r0, [pc, #8]	; (8002768 <CAN3_RX0_IRQHandler+0x10>)
 800275e:	f001 fa59 	bl	8003c14 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	200000c8 	.word	0x200000c8

0800276c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <SystemInit+0x28>)
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002776:	4a07      	ldr	r2, [pc, #28]	; (8002794 <SystemInit+0x28>)
 8002778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800277c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002780:	4b04      	ldr	r3, [pc, #16]	; (8002794 <SystemInit+0x28>)
 8002782:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002786:	609a      	str	r2, [r3, #8]
#endif
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800279e:	1d3b      	adds	r3, r7, #4
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80027a8:	4b14      	ldr	r3, [pc, #80]	; (80027fc <MX_TIM6_Init+0x64>)
 80027aa:	4a15      	ldr	r2, [pc, #84]	; (8002800 <MX_TIM6_Init+0x68>)
 80027ac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27-1;
 80027ae:	4b13      	ldr	r3, [pc, #76]	; (80027fc <MX_TIM6_Init+0x64>)
 80027b0:	221a      	movs	r2, #26
 80027b2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b4:	4b11      	ldr	r3, [pc, #68]	; (80027fc <MX_TIM6_Init+0x64>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000-1;
 80027ba:	4b10      	ldr	r3, [pc, #64]	; (80027fc <MX_TIM6_Init+0x64>)
 80027bc:	f640 729f 	movw	r2, #3999	; 0xf9f
 80027c0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <MX_TIM6_Init+0x64>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80027c8:	480c      	ldr	r0, [pc, #48]	; (80027fc <MX_TIM6_Init+0x64>)
 80027ca:	f003 f845 	bl	8005858 <HAL_TIM_Base_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80027d4:	f7ff ff3a 	bl	800264c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d8:	2300      	movs	r3, #0
 80027da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80027e0:	1d3b      	adds	r3, r7, #4
 80027e2:	4619      	mov	r1, r3
 80027e4:	4805      	ldr	r0, [pc, #20]	; (80027fc <MX_TIM6_Init+0x64>)
 80027e6:	f003 faef 	bl	8005dc8 <HAL_TIMEx_MasterConfigSynchronization>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80027f0:	f7ff ff2c 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80027f4:	bf00      	nop
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000120 	.word	0x20000120
 8002800:	40001000 	.word	0x40001000

08002804 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0d      	ldr	r2, [pc, #52]	; (8002848 <HAL_TIM_Base_MspInit+0x44>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d113      	bne.n	800283e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002816:	4b0d      	ldr	r3, [pc, #52]	; (800284c <HAL_TIM_Base_MspInit+0x48>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	4a0c      	ldr	r2, [pc, #48]	; (800284c <HAL_TIM_Base_MspInit+0x48>)
 800281c:	f043 0310 	orr.w	r3, r3, #16
 8002820:	6413      	str	r3, [r2, #64]	; 0x40
 8002822:	4b0a      	ldr	r3, [pc, #40]	; (800284c <HAL_TIM_Base_MspInit+0x48>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	2100      	movs	r1, #0
 8002832:	2036      	movs	r0, #54	; 0x36
 8002834:	f001 fcef 	bl	8004216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002838:	2036      	movs	r0, #54	; 0x36
 800283a:	f001 fd08 	bl	800424e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800283e:	bf00      	nop
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40001000 	.word	0x40001000
 800284c:	40023800 	.word	0x40023800

08002850 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002854:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <MX_USART2_UART_Init+0x58>)
 8002856:	4a15      	ldr	r2, [pc, #84]	; (80028ac <MX_USART2_UART_Init+0x5c>)
 8002858:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800285a:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <MX_USART2_UART_Init+0x58>)
 800285c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002860:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002862:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <MX_USART2_UART_Init+0x58>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002868:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <MX_USART2_UART_Init+0x58>)
 800286a:	2200      	movs	r2, #0
 800286c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800286e:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <MX_USART2_UART_Init+0x58>)
 8002870:	2200      	movs	r2, #0
 8002872:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <MX_USART2_UART_Init+0x58>)
 8002876:	220c      	movs	r2, #12
 8002878:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800287a:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <MX_USART2_UART_Init+0x58>)
 800287c:	2200      	movs	r2, #0
 800287e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002880:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <MX_USART2_UART_Init+0x58>)
 8002882:	2200      	movs	r2, #0
 8002884:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002886:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <MX_USART2_UART_Init+0x58>)
 8002888:	2200      	movs	r2, #0
 800288a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <MX_USART2_UART_Init+0x58>)
 800288e:	2200      	movs	r2, #0
 8002890:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002892:	4805      	ldr	r0, [pc, #20]	; (80028a8 <MX_USART2_UART_Init+0x58>)
 8002894:	f003 fb44 	bl	8005f20 <HAL_UART_Init>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800289e:	f7ff fed5 	bl	800264c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	2000016c 	.word	0x2000016c
 80028ac:	40004400 	.word	0x40004400

080028b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b0ae      	sub	sp, #184	; 0xb8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	2290      	movs	r2, #144	; 0x90
 80028ce:	2100      	movs	r1, #0
 80028d0:	4618      	mov	r0, r3
 80028d2:	f004 f835 	bl	8006940 <memset>
  if(uartHandle->Instance==USART2)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a21      	ldr	r2, [pc, #132]	; (8002960 <HAL_UART_MspInit+0xb0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d13a      	bne.n	8002956 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80028e0:	2380      	movs	r3, #128	; 0x80
 80028e2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80028e4:	2300      	movs	r3, #0
 80028e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	4618      	mov	r0, r3
 80028ee:	f002 fb8b 	bl	8005008 <HAL_RCCEx_PeriphCLKConfig>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80028f8:	f7ff fea8 	bl	800264c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028fc:	4b19      	ldr	r3, [pc, #100]	; (8002964 <HAL_UART_MspInit+0xb4>)
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	4a18      	ldr	r2, [pc, #96]	; (8002964 <HAL_UART_MspInit+0xb4>)
 8002902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002906:	6413      	str	r3, [r2, #64]	; 0x40
 8002908:	4b16      	ldr	r3, [pc, #88]	; (8002964 <HAL_UART_MspInit+0xb4>)
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002914:	4b13      	ldr	r3, [pc, #76]	; (8002964 <HAL_UART_MspInit+0xb4>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	4a12      	ldr	r2, [pc, #72]	; (8002964 <HAL_UART_MspInit+0xb4>)
 800291a:	f043 0308 	orr.w	r3, r3, #8
 800291e:	6313      	str	r3, [r2, #48]	; 0x30
 8002920:	4b10      	ldr	r3, [pc, #64]	; (8002964 <HAL_UART_MspInit+0xb4>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART2TX_Pin|DEBUG_UART2RX_Pin;
 800292c:	2360      	movs	r3, #96	; 0x60
 800292e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002932:	2302      	movs	r3, #2
 8002934:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293e:	2303      	movs	r3, #3
 8002940:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002944:	2307      	movs	r3, #7
 8002946:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800294a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800294e:	4619      	mov	r1, r3
 8002950:	4805      	ldr	r0, [pc, #20]	; (8002968 <HAL_UART_MspInit+0xb8>)
 8002952:	f001 fc97 	bl	8004284 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002956:	bf00      	nop
 8002958:	37b8      	adds	r7, #184	; 0xb8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40004400 	.word	0x40004400
 8002964:	40023800 	.word	0x40023800
 8002968:	40020c00 	.word	0x40020c00

0800296c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800296c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002970:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002972:	e003      	b.n	800297c <LoopCopyDataInit>

08002974 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002974:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002976:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002978:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800297a:	3104      	adds	r1, #4

0800297c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800297c:	480b      	ldr	r0, [pc, #44]	; (80029ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800297e:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002980:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002982:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002984:	d3f6      	bcc.n	8002974 <CopyDataInit>
  ldr  r2, =_sbss
 8002986:	4a0b      	ldr	r2, [pc, #44]	; (80029b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002988:	e002      	b.n	8002990 <LoopFillZerobss>

0800298a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800298a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800298c:	f842 3b04 	str.w	r3, [r2], #4

08002990 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002992:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002994:	d3f9      	bcc.n	800298a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002996:	f7ff fee9 	bl	800276c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800299a:	f003 ffad 	bl	80068f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800299e:	f7ff fb3b 	bl	8002018 <main>
  bx  lr    
 80029a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029a4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80029a8:	08007084 	.word	0x08007084
  ldr  r0, =_sdata
 80029ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80029b0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80029b4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80029b8:	200001f8 	.word	0x200001f8

080029bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029bc:	e7fe      	b.n	80029bc <ADC_IRQHandler>

080029be <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029c2:	2003      	movs	r0, #3
 80029c4:	f001 fc1c 	bl	8004200 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029c8:	2000      	movs	r0, #0
 80029ca:	f000 f805 	bl	80029d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029ce:	f7ff fe6b 	bl	80026a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029e0:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <HAL_InitTick+0x54>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_InitTick+0x58>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	4619      	mov	r1, r3
 80029ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80029f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f6:	4618      	mov	r0, r3
 80029f8:	f001 fc37 	bl	800426a <HAL_SYSTICK_Config>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e00e      	b.n	8002a24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b0f      	cmp	r3, #15
 8002a0a:	d80a      	bhi.n	8002a22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	f04f 30ff 	mov.w	r0, #4294967295
 8002a14:	f001 fbff 	bl	8004216 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a18:	4a06      	ldr	r2, [pc, #24]	; (8002a34 <HAL_InitTick+0x5c>)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e000      	b.n	8002a24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	20000008 	.word	0x20000008
 8002a34:	20000004 	.word	0x20000004

08002a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_IncTick+0x20>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	461a      	mov	r2, r3
 8002a42:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_IncTick+0x24>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4413      	add	r3, r2
 8002a48:	4a04      	ldr	r2, [pc, #16]	; (8002a5c <HAL_IncTick+0x24>)
 8002a4a:	6013      	str	r3, [r2, #0]
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	20000008 	.word	0x20000008
 8002a5c:	200001f4 	.word	0x200001f4

08002a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return uwTick;
 8002a64:	4b03      	ldr	r3, [pc, #12]	; (8002a74 <HAL_GetTick+0x14>)
 8002a66:	681b      	ldr	r3, [r3, #0]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	200001f4 	.word	0x200001f4

08002a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a80:	f7ff ffee 	bl	8002a60 <HAL_GetTick>
 8002a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a90:	d005      	beq.n	8002a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a92:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <HAL_Delay+0x44>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a9e:	bf00      	nop
 8002aa0:	f7ff ffde 	bl	8002a60 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d8f7      	bhi.n	8002aa0 <HAL_Delay+0x28>
  {
  }
}
 8002ab0:	bf00      	nop
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20000008 	.word	0x20000008

08002ac0 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 8002ac4:	4b02      	ldr	r3, [pc, #8]	; (8002ad0 <HAL_GetHalVersion+0x10>)
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	01030000 	.word	0x01030000

08002ad4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8002ad8:	4b03      	ldr	r3, [pc, #12]	; (8002ae8 <HAL_GetREVID+0x14>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	0c1b      	lsrs	r3, r3, #16
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	e0042000 	.word	0xe0042000

08002aec <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <HAL_GetDEVID+0x18>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	e0042000 	.word	0xe0042000

08002b08 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8002b0c:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <HAL_GetUIDw0+0x14>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	1ff0f420 	.word	0x1ff0f420

08002b20 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002b24:	4b03      	ldr	r3, [pc, #12]	; (8002b34 <HAL_GetUIDw1+0x14>)
 8002b26:	681b      	ldr	r3, [r3, #0]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	1ff0f424 	.word	0x1ff0f424

08002b38 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002b3c:	4b03      	ldr	r3, [pc, #12]	; (8002b4c <HAL_GetUIDw2+0x14>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	1ff0f428 	.word	0x1ff0f428

08002b50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e031      	b.n	8002bca <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d109      	bne.n	8002b82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7fe ff6e 	bl	8001a50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d116      	bne.n	8002bbc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b92:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <HAL_ADC_Init+0x84>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	f043 0202 	orr.w	r2, r3, #2
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 fb0a 	bl	80031b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f023 0303 	bic.w	r3, r3, #3
 8002bb2:	f043 0201 	orr.w	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
 8002bba:	e001      	b.n	8002bc0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	ffffeefd 	.word	0xffffeefd

08002bd8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <HAL_ADC_Start+0x1a>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e0ad      	b.n	8002d4e <HAL_ADC_Start+0x176>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d018      	beq.n	8002c3a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002c18:	4b50      	ldr	r3, [pc, #320]	; (8002d5c <HAL_ADC_Start+0x184>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a50      	ldr	r2, [pc, #320]	; (8002d60 <HAL_ADC_Start+0x188>)
 8002c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c22:	0c9a      	lsrs	r2, r3, #18
 8002c24:	4613      	mov	r3, r2
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4413      	add	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002c2c:	e002      	b.n	8002c34 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	3b01      	subs	r3, #1
 8002c32:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f9      	bne.n	8002c2e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d175      	bne.n	8002d34 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c4c:	4b45      	ldr	r3, [pc, #276]	; (8002d64 <HAL_ADC_Start+0x18c>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d007      	beq.n	8002c76 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c6e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c82:	d106      	bne.n	8002c92 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c88:	f023 0206 	bic.w	r2, r3, #6
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	645a      	str	r2, [r3, #68]	; 0x44
 8002c90:	e002      	b.n	8002c98 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ca8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002caa:	4b2f      	ldr	r3, [pc, #188]	; (8002d68 <HAL_ADC_Start+0x190>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10f      	bne.n	8002cd6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d143      	bne.n	8002d4c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	e03a      	b.n	8002d4c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a24      	ldr	r2, [pc, #144]	; (8002d6c <HAL_ADC_Start+0x194>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d10e      	bne.n	8002cfe <HAL_ADC_Start+0x126>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d107      	bne.n	8002cfe <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cfc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002cfe:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <HAL_ADC_Start+0x190>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d120      	bne.n	8002d4c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a18      	ldr	r2, [pc, #96]	; (8002d70 <HAL_ADC_Start+0x198>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d11b      	bne.n	8002d4c <HAL_ADC_Start+0x174>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d114      	bne.n	8002d4c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	e00b      	b.n	8002d4c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	f043 0210 	orr.w	r2, r3, #16
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d44:	f043 0201 	orr.w	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000000 	.word	0x20000000
 8002d60:	431bde83 	.word	0x431bde83
 8002d64:	fffff8fe 	.word	0xfffff8fe
 8002d68:	40012300 	.word	0x40012300
 8002d6c:	40012000 	.word	0x40012000
 8002d70:	40012200 	.word	0x40012200

08002d74 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_ADC_Stop+0x16>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e01f      	b.n	8002dca <HAL_ADC_Stop+0x56>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0201 	bic.w	r2, r2, #1
 8002da0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d107      	bne.n	8002dc0 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002db4:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <HAL_ADC_Stop+0x64>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	f043 0201 	orr.w	r2, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	ffffeefe 	.word	0xffffeefe

08002ddc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df8:	d113      	bne.n	8002e22 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e08:	d10b      	bne.n	8002e22 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f043 0220 	orr.w	r2, r3, #32
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e063      	b.n	8002eea <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002e22:	f7ff fe1d 	bl	8002a60 <HAL_GetTick>
 8002e26:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e28:	e021      	b.n	8002e6e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d01d      	beq.n	8002e6e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d007      	beq.n	8002e48 <HAL_ADC_PollForConversion+0x6c>
 8002e38:	f7ff fe12 	bl	8002a60 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d212      	bcs.n	8002e6e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d00b      	beq.n	8002e6e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f043 0204 	orr.w	r2, r3, #4
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e03d      	b.n	8002eea <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d1d6      	bne.n	8002e2a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0212 	mvn.w	r2, #18
 8002e84:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d123      	bne.n	8002ee8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d11f      	bne.n	8002ee8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d006      	beq.n	8002ec4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d111      	bne.n	8002ee8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d105      	bne.n	8002ee8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	f043 0201 	orr.w	r2, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x1c>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e136      	b.n	8003196 <HAL_ADC_ConfigChannel+0x28a>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b09      	cmp	r3, #9
 8002f36:	d93a      	bls.n	8002fae <HAL_ADC_ConfigChannel+0xa2>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f40:	d035      	beq.n	8002fae <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68d9      	ldr	r1, [r3, #12]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	4613      	mov	r3, r2
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4413      	add	r3, r2
 8002f56:	3b1e      	subs	r3, #30
 8002f58:	2207      	movs	r2, #7
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43da      	mvns	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	400a      	ands	r2, r1
 8002f66:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a8d      	ldr	r2, [pc, #564]	; (80031a4 <HAL_ADC_ConfigChannel+0x298>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d10a      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68d9      	ldr	r1, [r3, #12]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	061a      	lsls	r2, r3, #24
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f86:	e035      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68d9      	ldr	r1, [r3, #12]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	4618      	mov	r0, r3
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	4403      	add	r3, r0
 8002fa0:	3b1e      	subs	r3, #30
 8002fa2:	409a      	lsls	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fac:	e022      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6919      	ldr	r1, [r3, #16]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4413      	add	r3, r2
 8002fc2:	2207      	movs	r2, #7
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43da      	mvns	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	400a      	ands	r2, r1
 8002fd0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6919      	ldr	r1, [r3, #16]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	4403      	add	r3, r0
 8002fea:	409a      	lsls	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b06      	cmp	r3, #6
 8002ffa:	d824      	bhi.n	8003046 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	3b05      	subs	r3, #5
 800300e:	221f      	movs	r2, #31
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43da      	mvns	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	400a      	ands	r2, r1
 800301c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	b29b      	uxth	r3, r3
 800302a:	4618      	mov	r0, r3
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	3b05      	subs	r3, #5
 8003038:	fa00 f203 	lsl.w	r2, r0, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	635a      	str	r2, [r3, #52]	; 0x34
 8003044:	e04c      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b0c      	cmp	r3, #12
 800304c:	d824      	bhi.n	8003098 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	3b23      	subs	r3, #35	; 0x23
 8003060:	221f      	movs	r2, #31
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43da      	mvns	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	400a      	ands	r2, r1
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	b29b      	uxth	r3, r3
 800307c:	4618      	mov	r0, r3
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	3b23      	subs	r3, #35	; 0x23
 800308a:	fa00 f203 	lsl.w	r2, r0, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	631a      	str	r2, [r3, #48]	; 0x30
 8003096:	e023      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	3b41      	subs	r3, #65	; 0x41
 80030aa:	221f      	movs	r2, #31
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43da      	mvns	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	400a      	ands	r2, r1
 80030b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	4618      	mov	r0, r3
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	3b41      	subs	r3, #65	; 0x41
 80030d4:	fa00 f203 	lsl.w	r2, r0, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a30      	ldr	r2, [pc, #192]	; (80031a8 <HAL_ADC_ConfigChannel+0x29c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d10a      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x1f4>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030f2:	d105      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80030f4:	4b2d      	ldr	r3, [pc, #180]	; (80031ac <HAL_ADC_ConfigChannel+0x2a0>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4a2c      	ldr	r2, [pc, #176]	; (80031ac <HAL_ADC_ConfigChannel+0x2a0>)
 80030fa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80030fe:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a28      	ldr	r2, [pc, #160]	; (80031a8 <HAL_ADC_ConfigChannel+0x29c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d10f      	bne.n	800312a <HAL_ADC_ConfigChannel+0x21e>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b12      	cmp	r3, #18
 8003110:	d10b      	bne.n	800312a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003112:	4b26      	ldr	r3, [pc, #152]	; (80031ac <HAL_ADC_ConfigChannel+0x2a0>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4a25      	ldr	r2, [pc, #148]	; (80031ac <HAL_ADC_ConfigChannel+0x2a0>)
 8003118:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800311c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800311e:	4b23      	ldr	r3, [pc, #140]	; (80031ac <HAL_ADC_ConfigChannel+0x2a0>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	4a22      	ldr	r2, [pc, #136]	; (80031ac <HAL_ADC_ConfigChannel+0x2a0>)
 8003124:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003128:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1e      	ldr	r2, [pc, #120]	; (80031a8 <HAL_ADC_ConfigChannel+0x29c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d12b      	bne.n	800318c <HAL_ADC_ConfigChannel+0x280>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a1a      	ldr	r2, [pc, #104]	; (80031a4 <HAL_ADC_ConfigChannel+0x298>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d003      	beq.n	8003146 <HAL_ADC_ConfigChannel+0x23a>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b11      	cmp	r3, #17
 8003144:	d122      	bne.n	800318c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003146:	4b19      	ldr	r3, [pc, #100]	; (80031ac <HAL_ADC_ConfigChannel+0x2a0>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	4a18      	ldr	r2, [pc, #96]	; (80031ac <HAL_ADC_ConfigChannel+0x2a0>)
 800314c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003150:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003152:	4b16      	ldr	r3, [pc, #88]	; (80031ac <HAL_ADC_ConfigChannel+0x2a0>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	4a15      	ldr	r2, [pc, #84]	; (80031ac <HAL_ADC_ConfigChannel+0x2a0>)
 8003158:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800315c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a10      	ldr	r2, [pc, #64]	; (80031a4 <HAL_ADC_ConfigChannel+0x298>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d111      	bne.n	800318c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003168:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <HAL_ADC_ConfigChannel+0x2a4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a11      	ldr	r2, [pc, #68]	; (80031b4 <HAL_ADC_ConfigChannel+0x2a8>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	0c9a      	lsrs	r2, r3, #18
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800317e:	e002      	b.n	8003186 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	3b01      	subs	r3, #1
 8003184:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1f9      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	10000012 	.word	0x10000012
 80031a8:	40012000 	.word	0x40012000
 80031ac:	40012300 	.word	0x40012300
 80031b0:	20000000 	.word	0x20000000
 80031b4:	431bde83 	.word	0x431bde83

080031b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80031c0:	4b78      	ldr	r3, [pc, #480]	; (80033a4 <ADC_Init+0x1ec>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4a77      	ldr	r2, [pc, #476]	; (80033a4 <ADC_Init+0x1ec>)
 80031c6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80031ca:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80031cc:	4b75      	ldr	r3, [pc, #468]	; (80033a4 <ADC_Init+0x1ec>)
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	4973      	ldr	r1, [pc, #460]	; (80033a4 <ADC_Init+0x1ec>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6859      	ldr	r1, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	021a      	lsls	r2, r3, #8
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800320c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6859      	ldr	r1, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800322e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6899      	ldr	r1, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003246:	4a58      	ldr	r2, [pc, #352]	; (80033a8 <ADC_Init+0x1f0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d022      	beq.n	8003292 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800325a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6899      	ldr	r1, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800327c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6899      	ldr	r1, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	e00f      	b.n	80032b2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0202 	bic.w	r2, r2, #2
 80032c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6899      	ldr	r1, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	005a      	lsls	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d01b      	beq.n	8003318 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6859      	ldr	r1, [r3, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	3b01      	subs	r3, #1
 800330c:	035a      	lsls	r2, r3, #13
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	e007      	b.n	8003328 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003326:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003336:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	3b01      	subs	r3, #1
 8003344:	051a      	lsls	r2, r3, #20
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800335c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6899      	ldr	r1, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800336a:	025a      	lsls	r2, r3, #9
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003382:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6899      	ldr	r1, [r3, #8]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	029a      	lsls	r2, r3, #10
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	609a      	str	r2, [r3, #8]
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	40012300 	.word	0x40012300
 80033a8:	0f000001 	.word	0x0f000001

080033ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e0ed      	b.n	800359a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d102      	bne.n	80033d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7fe fc24 	bl	8001c18 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033e0:	f7ff fb3e 	bl	8002a60 <HAL_GetTick>
 80033e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80033e6:	e012      	b.n	800340e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033e8:	f7ff fb3a 	bl	8002a60 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b0a      	cmp	r3, #10
 80033f4:	d90b      	bls.n	800340e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2205      	movs	r2, #5
 8003406:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e0c5      	b.n	800359a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0e5      	beq.n	80033e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0202 	bic.w	r2, r2, #2
 800342a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800342c:	f7ff fb18 	bl	8002a60 <HAL_GetTick>
 8003430:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003432:	e012      	b.n	800345a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003434:	f7ff fb14 	bl	8002a60 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b0a      	cmp	r3, #10
 8003440:	d90b      	bls.n	800345a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2205      	movs	r2, #5
 8003452:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e09f      	b.n	800359a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1e5      	bne.n	8003434 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	7e1b      	ldrb	r3, [r3, #24]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d108      	bne.n	8003482 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	e007      	b.n	8003492 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003490:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	7e5b      	ldrb	r3, [r3, #25]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d108      	bne.n	80034ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	e007      	b.n	80034bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	7e9b      	ldrb	r3, [r3, #26]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d108      	bne.n	80034d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0220 	orr.w	r2, r2, #32
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	e007      	b.n	80034e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0220 	bic.w	r2, r2, #32
 80034e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	7edb      	ldrb	r3, [r3, #27]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d108      	bne.n	8003500 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0210 	bic.w	r2, r2, #16
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	e007      	b.n	8003510 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0210 	orr.w	r2, r2, #16
 800350e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	7f1b      	ldrb	r3, [r3, #28]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d108      	bne.n	800352a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0208 	orr.w	r2, r2, #8
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	e007      	b.n	800353a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0208 	bic.w	r2, r2, #8
 8003538:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	7f5b      	ldrb	r3, [r3, #29]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d108      	bne.n	8003554 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 0204 	orr.w	r2, r2, #4
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	e007      	b.n	8003564 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0204 	bic.w	r2, r2, #4
 8003562:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	ea42 0103 	orr.w	r1, r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	1e5a      	subs	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ba:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80035bc:	7cfb      	ldrb	r3, [r7, #19]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d003      	beq.n	80035ca <HAL_CAN_ConfigFilter+0x26>
 80035c2:	7cfb      	ldrb	r3, [r7, #19]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	f040 80c7 	bne.w	8003758 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a69      	ldr	r2, [pc, #420]	; (8003774 <HAL_CAN_ConfigFilter+0x1d0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d001      	beq.n	80035d8 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80035d4:	4b68      	ldr	r3, [pc, #416]	; (8003778 <HAL_CAN_ConfigFilter+0x1d4>)
 80035d6:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80035de:	f043 0201 	orr.w	r2, r3, #1
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	4a63      	ldr	r2, [pc, #396]	; (8003778 <HAL_CAN_ConfigFilter+0x1d4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d111      	bne.n	8003614 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80035f6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	021b      	lsls	r3, r3, #8
 800360c:	431a      	orrs	r2, r3
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	2201      	movs	r2, #1
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	43db      	mvns	r3, r3
 800362e:	401a      	ands	r2, r3
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d123      	bne.n	8003686 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	43db      	mvns	r3, r3
 8003648:	401a      	ands	r2, r3
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003660:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	3248      	adds	r2, #72	; 0x48
 8003666:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800367a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800367c:	6979      	ldr	r1, [r7, #20]
 800367e:	3348      	adds	r3, #72	; 0x48
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	440b      	add	r3, r1
 8003684:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d122      	bne.n	80036d4 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	431a      	orrs	r2, r3
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80036ae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	3248      	adds	r2, #72	; 0x48
 80036b4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036c8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036ca:	6979      	ldr	r1, [r7, #20]
 80036cc:	3348      	adds	r3, #72	; 0x48
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	440b      	add	r3, r1
 80036d2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d109      	bne.n	80036f0 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	43db      	mvns	r3, r3
 80036e6:	401a      	ands	r2, r3
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80036ee:	e007      	b.n	8003700 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	431a      	orrs	r2, r3
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d109      	bne.n	800371c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	43db      	mvns	r3, r3
 8003712:	401a      	ands	r2, r3
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800371a:	e007      	b.n	800372c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	431a      	orrs	r2, r3
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d107      	bne.n	8003744 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	431a      	orrs	r2, r3
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800374a:	f023 0201 	bic.w	r2, r3, #1
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	e006      	b.n	8003766 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
  }
}
 8003766:	4618      	mov	r0, r3
 8003768:	371c      	adds	r7, #28
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40003400 	.word	0x40003400
 8003778:	40006400 	.word	0x40006400

0800377c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3020 	ldrb.w	r3, [r3, #32]
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b01      	cmp	r3, #1
 800378e:	d12e      	bne.n	80037ee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0201 	bic.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037a8:	f7ff f95a 	bl	8002a60 <HAL_GetTick>
 80037ac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80037ae:	e012      	b.n	80037d6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037b0:	f7ff f956 	bl	8002a60 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b0a      	cmp	r3, #10
 80037bc:	d90b      	bls.n	80037d6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2205      	movs	r2, #5
 80037ce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e012      	b.n	80037fc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e5      	bne.n	80037b0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	e006      	b.n	80037fc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
  }
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	; 0x24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003818:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003822:	7ffb      	ldrb	r3, [r7, #31]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d003      	beq.n	8003830 <HAL_CAN_AddTxMessage+0x2c>
 8003828:	7ffb      	ldrb	r3, [r7, #31]
 800382a:	2b02      	cmp	r3, #2
 800382c:	f040 80ad 	bne.w	800398a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003840:	2b00      	cmp	r3, #0
 8003842:	d105      	bne.n	8003850 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 8095 	beq.w	800397a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	0e1b      	lsrs	r3, r3, #24
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800385a:	2201      	movs	r2, #1
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	409a      	lsls	r2, r3
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10d      	bne.n	8003888 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003876:	68f9      	ldr	r1, [r7, #12]
 8003878:	6809      	ldr	r1, [r1, #0]
 800387a:	431a      	orrs	r2, r3
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	3318      	adds	r3, #24
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	440b      	add	r3, r1
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	e00f      	b.n	80038a8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003892:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003898:	68f9      	ldr	r1, [r7, #12]
 800389a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800389c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	3318      	adds	r3, #24
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	440b      	add	r3, r1
 80038a6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6819      	ldr	r1, [r3, #0]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	3318      	adds	r3, #24
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	440b      	add	r3, r1
 80038b8:	3304      	adds	r3, #4
 80038ba:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	7d1b      	ldrb	r3, [r3, #20]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d111      	bne.n	80038e8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	3318      	adds	r3, #24
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	4413      	add	r3, r2
 80038d0:	3304      	adds	r3, #4
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	6811      	ldr	r1, [r2, #0]
 80038d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	3318      	adds	r3, #24
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	440b      	add	r3, r1
 80038e4:	3304      	adds	r3, #4
 80038e6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3307      	adds	r3, #7
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	061a      	lsls	r2, r3, #24
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3306      	adds	r3, #6
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	041b      	lsls	r3, r3, #16
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3305      	adds	r3, #5
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	021b      	lsls	r3, r3, #8
 8003902:	4313      	orrs	r3, r2
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	3204      	adds	r2, #4
 8003908:	7812      	ldrb	r2, [r2, #0]
 800390a:	4610      	mov	r0, r2
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	6811      	ldr	r1, [r2, #0]
 8003910:	ea43 0200 	orr.w	r2, r3, r0
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	440b      	add	r3, r1
 800391a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800391e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3303      	adds	r3, #3
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	061a      	lsls	r2, r3, #24
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3302      	adds	r3, #2
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	041b      	lsls	r3, r3, #16
 8003930:	431a      	orrs	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3301      	adds	r3, #1
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	021b      	lsls	r3, r3, #8
 800393a:	4313      	orrs	r3, r2
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	7812      	ldrb	r2, [r2, #0]
 8003940:	4610      	mov	r0, r2
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	6811      	ldr	r1, [r2, #0]
 8003946:	ea43 0200 	orr.w	r2, r3, r0
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	440b      	add	r3, r1
 8003950:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003954:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	3318      	adds	r3, #24
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	4413      	add	r3, r2
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	6811      	ldr	r1, [r2, #0]
 8003968:	f043 0201 	orr.w	r2, r3, #1
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	3318      	adds	r3, #24
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	440b      	add	r3, r1
 8003974:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	e00e      	b.n	8003998 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e006      	b.n	8003998 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
  }
}
 8003998:	4618      	mov	r0, r3
 800399a:	3724      	adds	r7, #36	; 0x24
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039b8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80039ba:	7dfb      	ldrb	r3, [r7, #23]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d003      	beq.n	80039c8 <HAL_CAN_GetRxMessage+0x24>
 80039c0:	7dfb      	ldrb	r3, [r7, #23]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	f040 80f3 	bne.w	8003bae <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10e      	bne.n	80039ec <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d116      	bne.n	8003a0a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0e7      	b.n	8003bbc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d107      	bne.n	8003a0a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e0d8      	b.n	8003bbc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	331b      	adds	r3, #27
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	4413      	add	r3, r2
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0204 	and.w	r2, r3, #4
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10c      	bne.n	8003a42 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	331b      	adds	r3, #27
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	4413      	add	r3, r2
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	0d5b      	lsrs	r3, r3, #21
 8003a38:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	e00b      	b.n	8003a5a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	331b      	adds	r3, #27
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	4413      	add	r3, r2
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	08db      	lsrs	r3, r3, #3
 8003a52:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	331b      	adds	r3, #27
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	4413      	add	r3, r2
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0202 	and.w	r2, r3, #2
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	331b      	adds	r3, #27
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	4413      	add	r3, r2
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 020f 	and.w	r2, r3, #15
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	331b      	adds	r3, #27
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	4413      	add	r3, r2
 8003a94:	3304      	adds	r3, #4
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	0a1b      	lsrs	r3, r3, #8
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	331b      	adds	r3, #27
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	4413      	add	r3, r2
 8003aac:	3304      	adds	r3, #4
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	0c1b      	lsrs	r3, r3, #16
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	0a1a      	lsrs	r2, r3, #8
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	b2d2      	uxtb	r2, r2
 8003ae6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	0c1a      	lsrs	r2, r3, #16
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	3302      	adds	r3, #2
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	0e1a      	lsrs	r2, r3, #24
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	3303      	adds	r3, #3
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	0a1a      	lsrs	r2, r3, #8
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	3305      	adds	r3, #5
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	0c1a      	lsrs	r2, r3, #16
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	3306      	adds	r3, #6
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	0e1a      	lsrs	r2, r3, #24
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	3307      	adds	r3, #7
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d108      	bne.n	8003b9a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0220 	orr.w	r2, r2, #32
 8003b96:	60da      	str	r2, [r3, #12]
 8003b98:	e007      	b.n	8003baa <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0220 	orr.w	r2, r2, #32
 8003ba8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	e006      	b.n	8003bbc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
  }
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	371c      	adds	r7, #28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bd8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d002      	beq.n	8003be6 <HAL_CAN_ActivateNotification+0x1e>
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d109      	bne.n	8003bfa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6959      	ldr	r1, [r3, #20]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	e006      	b.n	8003c08 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
  }
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08a      	sub	sp, #40	; 0x28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d07c      	beq.n	8003d54 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d023      	beq.n	8003cac <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f983 	bl	8003f82 <HAL_CAN_TxMailbox0CompleteCallback>
 8003c7c:	e016      	b.n	8003cac <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d004      	beq.n	8003c92 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c90:	e00c      	b.n	8003cac <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d004      	beq.n	8003ca6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca4:	e002      	b.n	8003cac <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f989 	bl	8003fbe <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d024      	beq.n	8003d00 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cbe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f963 	bl	8003f96 <HAL_CAN_TxMailbox1CompleteCallback>
 8003cd0:	e016      	b.n	8003d00 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d004      	beq.n	8003ce6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce4:	e00c      	b.n	8003d00 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d004      	beq.n	8003cfa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf8:	e002      	b.n	8003d00 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f969 	bl	8003fd2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d024      	beq.n	8003d54 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f943 	bl	8003faa <HAL_CAN_TxMailbox2CompleteCallback>
 8003d24:	e016      	b.n	8003d54 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d004      	beq.n	8003d3a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
 8003d38:	e00c      	b.n	8003d54 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d004      	beq.n	8003d4e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4c:	e002      	b.n	8003d54 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f949 	bl	8003fe6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00c      	beq.n	8003d78 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f003 0310 	and.w	r3, r3, #16
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d007      	beq.n	8003d78 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2210      	movs	r2, #16
 8003d76:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00b      	beq.n	8003d9a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d006      	beq.n	8003d9a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2208      	movs	r2, #8
 8003d92:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7fe fc33 	bl	8002600 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d009      	beq.n	8003db8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fe fc0c 	bl	80025d0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00c      	beq.n	8003ddc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d007      	beq.n	8003ddc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2210      	movs	r2, #16
 8003dda:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00b      	beq.n	8003dfe <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d006      	beq.n	8003dfe <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2208      	movs	r2, #8
 8003df6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f908 	bl	800400e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d009      	beq.n	8003e1c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f8ef 	bl	8003ffa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00b      	beq.n	8003e3e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d006      	beq.n	8003e3e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2210      	movs	r2, #16
 8003e36:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f8f2 	bl	8004022 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00b      	beq.n	8003e60 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d006      	beq.n	8003e60 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2208      	movs	r2, #8
 8003e58:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f8eb 	bl	8004036 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d07b      	beq.n	8003f62 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d072      	beq.n	8003f5a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d008      	beq.n	8003e90 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	f043 0301 	orr.w	r3, r3, #1
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d008      	beq.n	8003eac <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	f043 0302 	orr.w	r3, r3, #2
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d008      	beq.n	8003ec8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	f043 0304 	orr.w	r3, r3, #4
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d043      	beq.n	8003f5a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d03e      	beq.n	8003f5a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ee2:	2b60      	cmp	r3, #96	; 0x60
 8003ee4:	d02b      	beq.n	8003f3e <HAL_CAN_IRQHandler+0x32a>
 8003ee6:	2b60      	cmp	r3, #96	; 0x60
 8003ee8:	d82e      	bhi.n	8003f48 <HAL_CAN_IRQHandler+0x334>
 8003eea:	2b50      	cmp	r3, #80	; 0x50
 8003eec:	d022      	beq.n	8003f34 <HAL_CAN_IRQHandler+0x320>
 8003eee:	2b50      	cmp	r3, #80	; 0x50
 8003ef0:	d82a      	bhi.n	8003f48 <HAL_CAN_IRQHandler+0x334>
 8003ef2:	2b40      	cmp	r3, #64	; 0x40
 8003ef4:	d019      	beq.n	8003f2a <HAL_CAN_IRQHandler+0x316>
 8003ef6:	2b40      	cmp	r3, #64	; 0x40
 8003ef8:	d826      	bhi.n	8003f48 <HAL_CAN_IRQHandler+0x334>
 8003efa:	2b30      	cmp	r3, #48	; 0x30
 8003efc:	d010      	beq.n	8003f20 <HAL_CAN_IRQHandler+0x30c>
 8003efe:	2b30      	cmp	r3, #48	; 0x30
 8003f00:	d822      	bhi.n	8003f48 <HAL_CAN_IRQHandler+0x334>
 8003f02:	2b10      	cmp	r3, #16
 8003f04:	d002      	beq.n	8003f0c <HAL_CAN_IRQHandler+0x2f8>
 8003f06:	2b20      	cmp	r3, #32
 8003f08:	d005      	beq.n	8003f16 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003f0a:	e01d      	b.n	8003f48 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	f043 0308 	orr.w	r3, r3, #8
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f14:	e019      	b.n	8003f4a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	f043 0310 	orr.w	r3, r3, #16
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f1e:	e014      	b.n	8003f4a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	f043 0320 	orr.w	r3, r3, #32
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f28:	e00f      	b.n	8003f4a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f32:	e00a      	b.n	8003f4a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f3a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f3c:	e005      	b.n	8003f4a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f46:	e000      	b.n	8003f4a <HAL_CAN_IRQHandler+0x336>
            break;
 8003f48:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699a      	ldr	r2, [r3, #24]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f58:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2204      	movs	r2, #4
 8003f60:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d008      	beq.n	8003f7a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f868 	bl	800404a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003f7a:	bf00      	nop
 8003f7c:	3728      	adds	r7, #40	; 0x28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
	...

08004060 <__NVIC_SetPriorityGrouping>:
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004070:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <__NVIC_SetPriorityGrouping+0x40>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800407c:	4013      	ands	r3, r2
 800407e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004088:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <__NVIC_SetPriorityGrouping+0x44>)
 800408a:	4313      	orrs	r3, r2
 800408c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800408e:	4a04      	ldr	r2, [pc, #16]	; (80040a0 <__NVIC_SetPriorityGrouping+0x40>)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	60d3      	str	r3, [r2, #12]
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	e000ed00 	.word	0xe000ed00
 80040a4:	05fa0000 	.word	0x05fa0000

080040a8 <__NVIC_GetPriorityGrouping>:
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040ac:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <__NVIC_GetPriorityGrouping+0x18>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	0a1b      	lsrs	r3, r3, #8
 80040b2:	f003 0307 	and.w	r3, r3, #7
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	e000ed00 	.word	0xe000ed00

080040c4 <__NVIC_EnableIRQ>:
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	4603      	mov	r3, r0
 80040cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	db0b      	blt.n	80040ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040d6:	79fb      	ldrb	r3, [r7, #7]
 80040d8:	f003 021f 	and.w	r2, r3, #31
 80040dc:	4907      	ldr	r1, [pc, #28]	; (80040fc <__NVIC_EnableIRQ+0x38>)
 80040de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	2001      	movs	r0, #1
 80040e6:	fa00 f202 	lsl.w	r2, r0, r2
 80040ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	e000e100 	.word	0xe000e100

08004100 <__NVIC_SetPriority>:
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	4603      	mov	r3, r0
 8004108:	6039      	str	r1, [r7, #0]
 800410a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800410c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004110:	2b00      	cmp	r3, #0
 8004112:	db0a      	blt.n	800412a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	b2da      	uxtb	r2, r3
 8004118:	490c      	ldr	r1, [pc, #48]	; (800414c <__NVIC_SetPriority+0x4c>)
 800411a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411e:	0112      	lsls	r2, r2, #4
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	440b      	add	r3, r1
 8004124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004128:	e00a      	b.n	8004140 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	b2da      	uxtb	r2, r3
 800412e:	4908      	ldr	r1, [pc, #32]	; (8004150 <__NVIC_SetPriority+0x50>)
 8004130:	79fb      	ldrb	r3, [r7, #7]
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	3b04      	subs	r3, #4
 8004138:	0112      	lsls	r2, r2, #4
 800413a:	b2d2      	uxtb	r2, r2
 800413c:	440b      	add	r3, r1
 800413e:	761a      	strb	r2, [r3, #24]
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	e000e100 	.word	0xe000e100
 8004150:	e000ed00 	.word	0xe000ed00

08004154 <NVIC_EncodePriority>:
{
 8004154:	b480      	push	{r7}
 8004156:	b089      	sub	sp, #36	; 0x24
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f1c3 0307 	rsb	r3, r3, #7
 800416e:	2b04      	cmp	r3, #4
 8004170:	bf28      	it	cs
 8004172:	2304      	movcs	r3, #4
 8004174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	3304      	adds	r3, #4
 800417a:	2b06      	cmp	r3, #6
 800417c:	d902      	bls.n	8004184 <NVIC_EncodePriority+0x30>
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	3b03      	subs	r3, #3
 8004182:	e000      	b.n	8004186 <NVIC_EncodePriority+0x32>
 8004184:	2300      	movs	r3, #0
 8004186:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004188:	f04f 32ff 	mov.w	r2, #4294967295
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	43da      	mvns	r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	401a      	ands	r2, r3
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800419c:	f04f 31ff 	mov.w	r1, #4294967295
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	fa01 f303 	lsl.w	r3, r1, r3
 80041a6:	43d9      	mvns	r1, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041ac:	4313      	orrs	r3, r2
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3724      	adds	r7, #36	; 0x24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
	...

080041bc <SysTick_Config>:
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041cc:	d301      	bcc.n	80041d2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80041ce:	2301      	movs	r3, #1
 80041d0:	e00f      	b.n	80041f2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041d2:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <SysTick_Config+0x40>)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041da:	210f      	movs	r1, #15
 80041dc:	f04f 30ff 	mov.w	r0, #4294967295
 80041e0:	f7ff ff8e 	bl	8004100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041e4:	4b05      	ldr	r3, [pc, #20]	; (80041fc <SysTick_Config+0x40>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041ea:	4b04      	ldr	r3, [pc, #16]	; (80041fc <SysTick_Config+0x40>)
 80041ec:	2207      	movs	r2, #7
 80041ee:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	e000e010 	.word	0xe000e010

08004200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff ff29 	bl	8004060 <__NVIC_SetPriorityGrouping>
}
 800420e:	bf00      	nop
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004216:	b580      	push	{r7, lr}
 8004218:	b086      	sub	sp, #24
 800421a:	af00      	add	r7, sp, #0
 800421c:	4603      	mov	r3, r0
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	607a      	str	r2, [r7, #4]
 8004222:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004228:	f7ff ff3e 	bl	80040a8 <__NVIC_GetPriorityGrouping>
 800422c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	68b9      	ldr	r1, [r7, #8]
 8004232:	6978      	ldr	r0, [r7, #20]
 8004234:	f7ff ff8e 	bl	8004154 <NVIC_EncodePriority>
 8004238:	4602      	mov	r2, r0
 800423a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800423e:	4611      	mov	r1, r2
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff ff5d 	bl	8004100 <__NVIC_SetPriority>
}
 8004246:	bf00      	nop
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b082      	sub	sp, #8
 8004252:	af00      	add	r7, sp, #0
 8004254:	4603      	mov	r3, r0
 8004256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff ff31 	bl	80040c4 <__NVIC_EnableIRQ>
}
 8004262:	bf00      	nop
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b082      	sub	sp, #8
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7ff ffa2 	bl	80041bc <SysTick_Config>
 8004278:	4603      	mov	r3, r0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004284:	b480      	push	{r7}
 8004286:	b089      	sub	sp, #36	; 0x24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800428e:	2300      	movs	r3, #0
 8004290:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004292:	2300      	movs	r3, #0
 8004294:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004296:	2300      	movs	r3, #0
 8004298:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800429a:	2300      	movs	r3, #0
 800429c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800429e:	2300      	movs	r3, #0
 80042a0:	61fb      	str	r3, [r7, #28]
 80042a2:	e175      	b.n	8004590 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80042a4:	2201      	movs	r2, #1
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4013      	ands	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	429a      	cmp	r2, r3
 80042be:	f040 8164 	bne.w	800458a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d005      	beq.n	80042da <HAL_GPIO_Init+0x56>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d130      	bne.n	800433c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	2203      	movs	r2, #3
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	43db      	mvns	r3, r3
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	4013      	ands	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	4313      	orrs	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004310:	2201      	movs	r2, #1
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	43db      	mvns	r3, r3
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	4013      	ands	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	091b      	lsrs	r3, r3, #4
 8004326:	f003 0201 	and.w	r2, r3, #1
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	4313      	orrs	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 0303 	and.w	r3, r3, #3
 8004344:	2b03      	cmp	r3, #3
 8004346:	d017      	beq.n	8004378 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	2203      	movs	r2, #3
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	43db      	mvns	r3, r3
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4013      	ands	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	4313      	orrs	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f003 0303 	and.w	r3, r3, #3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d123      	bne.n	80043cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	08da      	lsrs	r2, r3, #3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3208      	adds	r2, #8
 800438c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	220f      	movs	r2, #15
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	43db      	mvns	r3, r3
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4013      	ands	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	08da      	lsrs	r2, r3, #3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3208      	adds	r2, #8
 80043c6:	69b9      	ldr	r1, [r7, #24]
 80043c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	2203      	movs	r2, #3
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	43db      	mvns	r3, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	4013      	ands	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f003 0203 	and.w	r2, r3, #3
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 80be 	beq.w	800458a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800440e:	4b66      	ldr	r3, [pc, #408]	; (80045a8 <HAL_GPIO_Init+0x324>)
 8004410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004412:	4a65      	ldr	r2, [pc, #404]	; (80045a8 <HAL_GPIO_Init+0x324>)
 8004414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004418:	6453      	str	r3, [r2, #68]	; 0x44
 800441a:	4b63      	ldr	r3, [pc, #396]	; (80045a8 <HAL_GPIO_Init+0x324>)
 800441c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004426:	4a61      	ldr	r2, [pc, #388]	; (80045ac <HAL_GPIO_Init+0x328>)
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	089b      	lsrs	r3, r3, #2
 800442c:	3302      	adds	r3, #2
 800442e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004432:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	220f      	movs	r2, #15
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	43db      	mvns	r3, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4013      	ands	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a58      	ldr	r2, [pc, #352]	; (80045b0 <HAL_GPIO_Init+0x32c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d037      	beq.n	80044c2 <HAL_GPIO_Init+0x23e>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a57      	ldr	r2, [pc, #348]	; (80045b4 <HAL_GPIO_Init+0x330>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d031      	beq.n	80044be <HAL_GPIO_Init+0x23a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a56      	ldr	r2, [pc, #344]	; (80045b8 <HAL_GPIO_Init+0x334>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d02b      	beq.n	80044ba <HAL_GPIO_Init+0x236>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a55      	ldr	r2, [pc, #340]	; (80045bc <HAL_GPIO_Init+0x338>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d025      	beq.n	80044b6 <HAL_GPIO_Init+0x232>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a54      	ldr	r2, [pc, #336]	; (80045c0 <HAL_GPIO_Init+0x33c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d01f      	beq.n	80044b2 <HAL_GPIO_Init+0x22e>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a53      	ldr	r2, [pc, #332]	; (80045c4 <HAL_GPIO_Init+0x340>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d019      	beq.n	80044ae <HAL_GPIO_Init+0x22a>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a52      	ldr	r2, [pc, #328]	; (80045c8 <HAL_GPIO_Init+0x344>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d013      	beq.n	80044aa <HAL_GPIO_Init+0x226>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a51      	ldr	r2, [pc, #324]	; (80045cc <HAL_GPIO_Init+0x348>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00d      	beq.n	80044a6 <HAL_GPIO_Init+0x222>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a50      	ldr	r2, [pc, #320]	; (80045d0 <HAL_GPIO_Init+0x34c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d007      	beq.n	80044a2 <HAL_GPIO_Init+0x21e>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a4f      	ldr	r2, [pc, #316]	; (80045d4 <HAL_GPIO_Init+0x350>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d101      	bne.n	800449e <HAL_GPIO_Init+0x21a>
 800449a:	2309      	movs	r3, #9
 800449c:	e012      	b.n	80044c4 <HAL_GPIO_Init+0x240>
 800449e:	230a      	movs	r3, #10
 80044a0:	e010      	b.n	80044c4 <HAL_GPIO_Init+0x240>
 80044a2:	2308      	movs	r3, #8
 80044a4:	e00e      	b.n	80044c4 <HAL_GPIO_Init+0x240>
 80044a6:	2307      	movs	r3, #7
 80044a8:	e00c      	b.n	80044c4 <HAL_GPIO_Init+0x240>
 80044aa:	2306      	movs	r3, #6
 80044ac:	e00a      	b.n	80044c4 <HAL_GPIO_Init+0x240>
 80044ae:	2305      	movs	r3, #5
 80044b0:	e008      	b.n	80044c4 <HAL_GPIO_Init+0x240>
 80044b2:	2304      	movs	r3, #4
 80044b4:	e006      	b.n	80044c4 <HAL_GPIO_Init+0x240>
 80044b6:	2303      	movs	r3, #3
 80044b8:	e004      	b.n	80044c4 <HAL_GPIO_Init+0x240>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e002      	b.n	80044c4 <HAL_GPIO_Init+0x240>
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <HAL_GPIO_Init+0x240>
 80044c2:	2300      	movs	r3, #0
 80044c4:	69fa      	ldr	r2, [r7, #28]
 80044c6:	f002 0203 	and.w	r2, r2, #3
 80044ca:	0092      	lsls	r2, r2, #2
 80044cc:	4093      	lsls	r3, r2
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80044d4:	4935      	ldr	r1, [pc, #212]	; (80045ac <HAL_GPIO_Init+0x328>)
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	089b      	lsrs	r3, r3, #2
 80044da:	3302      	adds	r3, #2
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044e2:	4b3d      	ldr	r3, [pc, #244]	; (80045d8 <HAL_GPIO_Init+0x354>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	43db      	mvns	r3, r3
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	4013      	ands	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004506:	4a34      	ldr	r2, [pc, #208]	; (80045d8 <HAL_GPIO_Init+0x354>)
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800450c:	4b32      	ldr	r3, [pc, #200]	; (80045d8 <HAL_GPIO_Init+0x354>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	43db      	mvns	r3, r3
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	4013      	ands	r3, r2
 800451a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004530:	4a29      	ldr	r2, [pc, #164]	; (80045d8 <HAL_GPIO_Init+0x354>)
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004536:	4b28      	ldr	r3, [pc, #160]	; (80045d8 <HAL_GPIO_Init+0x354>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	43db      	mvns	r3, r3
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	4013      	ands	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	4313      	orrs	r3, r2
 8004558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800455a:	4a1f      	ldr	r2, [pc, #124]	; (80045d8 <HAL_GPIO_Init+0x354>)
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004560:	4b1d      	ldr	r3, [pc, #116]	; (80045d8 <HAL_GPIO_Init+0x354>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	43db      	mvns	r3, r3
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	4013      	ands	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004584:	4a14      	ldr	r2, [pc, #80]	; (80045d8 <HAL_GPIO_Init+0x354>)
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	3301      	adds	r3, #1
 800458e:	61fb      	str	r3, [r7, #28]
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	2b0f      	cmp	r3, #15
 8004594:	f67f ae86 	bls.w	80042a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004598:	bf00      	nop
 800459a:	bf00      	nop
 800459c:	3724      	adds	r7, #36	; 0x24
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40023800 	.word	0x40023800
 80045ac:	40013800 	.word	0x40013800
 80045b0:	40020000 	.word	0x40020000
 80045b4:	40020400 	.word	0x40020400
 80045b8:	40020800 	.word	0x40020800
 80045bc:	40020c00 	.word	0x40020c00
 80045c0:	40021000 	.word	0x40021000
 80045c4:	40021400 	.word	0x40021400
 80045c8:	40021800 	.word	0x40021800
 80045cc:	40021c00 	.word	0x40021c00
 80045d0:	40022000 	.word	0x40022000
 80045d4:	40022400 	.word	0x40022400
 80045d8:	40013c00 	.word	0x40013c00

080045dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	887b      	ldrh	r3, [r7, #2]
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
 80045f8:	e001      	b.n	80045fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045fa:	2300      	movs	r3, #0
 80045fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	807b      	strh	r3, [r7, #2]
 8004618:	4613      	mov	r3, r2
 800461a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800461c:	787b      	ldrb	r3, [r7, #1]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004622:	887a      	ldrh	r2, [r7, #2]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004628:	e003      	b.n	8004632 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800462a:	887b      	ldrh	r3, [r7, #2]
 800462c:	041a      	lsls	r2, r3, #16
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	619a      	str	r2, [r3, #24]
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
	...

08004640 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004646:	2300      	movs	r3, #0
 8004648:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800464a:	4b23      	ldr	r3, [pc, #140]	; (80046d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	4a22      	ldr	r2, [pc, #136]	; (80046d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004654:	6413      	str	r3, [r2, #64]	; 0x40
 8004656:	4b20      	ldr	r3, [pc, #128]	; (80046d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004662:	4b1e      	ldr	r3, [pc, #120]	; (80046dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a1d      	ldr	r2, [pc, #116]	; (80046dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800466c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800466e:	f7fe f9f7 	bl	8002a60 <HAL_GetTick>
 8004672:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004674:	e009      	b.n	800468a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004676:	f7fe f9f3 	bl	8002a60 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004684:	d901      	bls.n	800468a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e022      	b.n	80046d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800468a:	4b14      	ldr	r3, [pc, #80]	; (80046dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004696:	d1ee      	bne.n	8004676 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004698:	4b10      	ldr	r3, [pc, #64]	; (80046dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a0f      	ldr	r2, [pc, #60]	; (80046dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800469e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046a4:	f7fe f9dc 	bl	8002a60 <HAL_GetTick>
 80046a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046aa:	e009      	b.n	80046c0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046ac:	f7fe f9d8 	bl	8002a60 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046ba:	d901      	bls.n	80046c0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e007      	b.n	80046d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <HAL_PWREx_EnableOverDrive+0x9c>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046cc:	d1ee      	bne.n	80046ac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40023800 	.word	0x40023800
 80046dc:	40007000 	.word	0x40007000

080046e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80046e8:	2300      	movs	r3, #0
 80046ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e29b      	b.n	8004c2e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 8087 	beq.w	8004812 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004704:	4b96      	ldr	r3, [pc, #600]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 030c 	and.w	r3, r3, #12
 800470c:	2b04      	cmp	r3, #4
 800470e:	d00c      	beq.n	800472a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004710:	4b93      	ldr	r3, [pc, #588]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 030c 	and.w	r3, r3, #12
 8004718:	2b08      	cmp	r3, #8
 800471a:	d112      	bne.n	8004742 <HAL_RCC_OscConfig+0x62>
 800471c:	4b90      	ldr	r3, [pc, #576]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004724:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004728:	d10b      	bne.n	8004742 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800472a:	4b8d      	ldr	r3, [pc, #564]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d06c      	beq.n	8004810 <HAL_RCC_OscConfig+0x130>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d168      	bne.n	8004810 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e275      	b.n	8004c2e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800474a:	d106      	bne.n	800475a <HAL_RCC_OscConfig+0x7a>
 800474c:	4b84      	ldr	r3, [pc, #528]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a83      	ldr	r2, [pc, #524]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 8004752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	e02e      	b.n	80047b8 <HAL_RCC_OscConfig+0xd8>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10c      	bne.n	800477c <HAL_RCC_OscConfig+0x9c>
 8004762:	4b7f      	ldr	r3, [pc, #508]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a7e      	ldr	r2, [pc, #504]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 8004768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	4b7c      	ldr	r3, [pc, #496]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a7b      	ldr	r2, [pc, #492]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 8004774:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	e01d      	b.n	80047b8 <HAL_RCC_OscConfig+0xd8>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004784:	d10c      	bne.n	80047a0 <HAL_RCC_OscConfig+0xc0>
 8004786:	4b76      	ldr	r3, [pc, #472]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a75      	ldr	r2, [pc, #468]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 800478c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	4b73      	ldr	r3, [pc, #460]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a72      	ldr	r2, [pc, #456]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 8004798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	e00b      	b.n	80047b8 <HAL_RCC_OscConfig+0xd8>
 80047a0:	4b6f      	ldr	r3, [pc, #444]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a6e      	ldr	r2, [pc, #440]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 80047a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	4b6c      	ldr	r3, [pc, #432]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a6b      	ldr	r2, [pc, #428]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 80047b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d013      	beq.n	80047e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c0:	f7fe f94e 	bl	8002a60 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c8:	f7fe f94a 	bl	8002a60 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b64      	cmp	r3, #100	; 0x64
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e229      	b.n	8004c2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047da:	4b61      	ldr	r3, [pc, #388]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0f0      	beq.n	80047c8 <HAL_RCC_OscConfig+0xe8>
 80047e6:	e014      	b.n	8004812 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e8:	f7fe f93a 	bl	8002a60 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047f0:	f7fe f936 	bl	8002a60 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b64      	cmp	r3, #100	; 0x64
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e215      	b.n	8004c2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004802:	4b57      	ldr	r3, [pc, #348]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1f0      	bne.n	80047f0 <HAL_RCC_OscConfig+0x110>
 800480e:	e000      	b.n	8004812 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d069      	beq.n	80048f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800481e:	4b50      	ldr	r3, [pc, #320]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 030c 	and.w	r3, r3, #12
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00b      	beq.n	8004842 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800482a:	4b4d      	ldr	r3, [pc, #308]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 030c 	and.w	r3, r3, #12
 8004832:	2b08      	cmp	r3, #8
 8004834:	d11c      	bne.n	8004870 <HAL_RCC_OscConfig+0x190>
 8004836:	4b4a      	ldr	r3, [pc, #296]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d116      	bne.n	8004870 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004842:	4b47      	ldr	r3, [pc, #284]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d005      	beq.n	800485a <HAL_RCC_OscConfig+0x17a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d001      	beq.n	800485a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e1e9      	b.n	8004c2e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800485a:	4b41      	ldr	r3, [pc, #260]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	493d      	ldr	r1, [pc, #244]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 800486a:	4313      	orrs	r3, r2
 800486c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800486e:	e040      	b.n	80048f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d023      	beq.n	80048c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004878:	4b39      	ldr	r3, [pc, #228]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a38      	ldr	r2, [pc, #224]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 800487e:	f043 0301 	orr.w	r3, r3, #1
 8004882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004884:	f7fe f8ec 	bl	8002a60 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800488c:	f7fe f8e8 	bl	8002a60 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e1c7      	b.n	8004c2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800489e:	4b30      	ldr	r3, [pc, #192]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0f0      	beq.n	800488c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048aa:	4b2d      	ldr	r3, [pc, #180]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	4929      	ldr	r1, [pc, #164]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	600b      	str	r3, [r1, #0]
 80048be:	e018      	b.n	80048f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048c0:	4b27      	ldr	r3, [pc, #156]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a26      	ldr	r2, [pc, #152]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 80048c6:	f023 0301 	bic.w	r3, r3, #1
 80048ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048cc:	f7fe f8c8 	bl	8002a60 <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048d4:	f7fe f8c4 	bl	8002a60 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e1a3      	b.n	8004c2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048e6:	4b1e      	ldr	r3, [pc, #120]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f0      	bne.n	80048d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d038      	beq.n	8004970 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d019      	beq.n	800493a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004906:	4b16      	ldr	r3, [pc, #88]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 8004908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800490a:	4a15      	ldr	r2, [pc, #84]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 800490c:	f043 0301 	orr.w	r3, r3, #1
 8004910:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004912:	f7fe f8a5 	bl	8002a60 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800491a:	f7fe f8a1 	bl	8002a60 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e180      	b.n	8004c2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800492c:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 800492e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0f0      	beq.n	800491a <HAL_RCC_OscConfig+0x23a>
 8004938:	e01a      	b.n	8004970 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800493a:	4b09      	ldr	r3, [pc, #36]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 800493c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800493e:	4a08      	ldr	r2, [pc, #32]	; (8004960 <HAL_RCC_OscConfig+0x280>)
 8004940:	f023 0301 	bic.w	r3, r3, #1
 8004944:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004946:	f7fe f88b 	bl	8002a60 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800494c:	e00a      	b.n	8004964 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800494e:	f7fe f887 	bl	8002a60 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d903      	bls.n	8004964 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e166      	b.n	8004c2e <HAL_RCC_OscConfig+0x54e>
 8004960:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004964:	4b92      	ldr	r3, [pc, #584]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1ee      	bne.n	800494e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 80a4 	beq.w	8004ac6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800497e:	4b8c      	ldr	r3, [pc, #560]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10d      	bne.n	80049a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800498a:	4b89      	ldr	r3, [pc, #548]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	4a88      	ldr	r2, [pc, #544]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004994:	6413      	str	r3, [r2, #64]	; 0x40
 8004996:	4b86      	ldr	r3, [pc, #536]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499e:	60bb      	str	r3, [r7, #8]
 80049a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049a2:	2301      	movs	r3, #1
 80049a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049a6:	4b83      	ldr	r3, [pc, #524]	; (8004bb4 <HAL_RCC_OscConfig+0x4d4>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d118      	bne.n	80049e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80049b2:	4b80      	ldr	r3, [pc, #512]	; (8004bb4 <HAL_RCC_OscConfig+0x4d4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a7f      	ldr	r2, [pc, #508]	; (8004bb4 <HAL_RCC_OscConfig+0x4d4>)
 80049b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049be:	f7fe f84f 	bl	8002a60 <HAL_GetTick>
 80049c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049c4:	e008      	b.n	80049d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049c6:	f7fe f84b 	bl	8002a60 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b64      	cmp	r3, #100	; 0x64
 80049d2:	d901      	bls.n	80049d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e12a      	b.n	8004c2e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049d8:	4b76      	ldr	r3, [pc, #472]	; (8004bb4 <HAL_RCC_OscConfig+0x4d4>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0f0      	beq.n	80049c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d106      	bne.n	80049fa <HAL_RCC_OscConfig+0x31a>
 80049ec:	4b70      	ldr	r3, [pc, #448]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 80049ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f0:	4a6f      	ldr	r2, [pc, #444]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 80049f2:	f043 0301 	orr.w	r3, r3, #1
 80049f6:	6713      	str	r3, [r2, #112]	; 0x70
 80049f8:	e02d      	b.n	8004a56 <HAL_RCC_OscConfig+0x376>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10c      	bne.n	8004a1c <HAL_RCC_OscConfig+0x33c>
 8004a02:	4b6b      	ldr	r3, [pc, #428]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a06:	4a6a      	ldr	r2, [pc, #424]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004a08:	f023 0301 	bic.w	r3, r3, #1
 8004a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a0e:	4b68      	ldr	r3, [pc, #416]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a12:	4a67      	ldr	r2, [pc, #412]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004a14:	f023 0304 	bic.w	r3, r3, #4
 8004a18:	6713      	str	r3, [r2, #112]	; 0x70
 8004a1a:	e01c      	b.n	8004a56 <HAL_RCC_OscConfig+0x376>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	2b05      	cmp	r3, #5
 8004a22:	d10c      	bne.n	8004a3e <HAL_RCC_OscConfig+0x35e>
 8004a24:	4b62      	ldr	r3, [pc, #392]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a28:	4a61      	ldr	r2, [pc, #388]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004a2a:	f043 0304 	orr.w	r3, r3, #4
 8004a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a30:	4b5f      	ldr	r3, [pc, #380]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a34:	4a5e      	ldr	r2, [pc, #376]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a3c:	e00b      	b.n	8004a56 <HAL_RCC_OscConfig+0x376>
 8004a3e:	4b5c      	ldr	r3, [pc, #368]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a42:	4a5b      	ldr	r2, [pc, #364]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004a44:	f023 0301 	bic.w	r3, r3, #1
 8004a48:	6713      	str	r3, [r2, #112]	; 0x70
 8004a4a:	4b59      	ldr	r3, [pc, #356]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4e:	4a58      	ldr	r2, [pc, #352]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004a50:	f023 0304 	bic.w	r3, r3, #4
 8004a54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d015      	beq.n	8004a8a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5e:	f7fd ffff 	bl	8002a60 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a64:	e00a      	b.n	8004a7c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a66:	f7fd fffb 	bl	8002a60 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e0d8      	b.n	8004c2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a7c:	4b4c      	ldr	r3, [pc, #304]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0ee      	beq.n	8004a66 <HAL_RCC_OscConfig+0x386>
 8004a88:	e014      	b.n	8004ab4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8a:	f7fd ffe9 	bl	8002a60 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a90:	e00a      	b.n	8004aa8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a92:	f7fd ffe5 	bl	8002a60 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e0c2      	b.n	8004c2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aa8:	4b41      	ldr	r3, [pc, #260]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1ee      	bne.n	8004a92 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ab4:	7dfb      	ldrb	r3, [r7, #23]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d105      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aba:	4b3d      	ldr	r3, [pc, #244]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	4a3c      	ldr	r2, [pc, #240]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ac4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 80ae 	beq.w	8004c2c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ad0:	4b37      	ldr	r3, [pc, #220]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 030c 	and.w	r3, r3, #12
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d06d      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d14b      	bne.n	8004b7c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ae4:	4b32      	ldr	r3, [pc, #200]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a31      	ldr	r2, [pc, #196]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af0:	f7fd ffb6 	bl	8002a60 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af8:	f7fd ffb2 	bl	8002a60 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e091      	b.n	8004c2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b0a:	4b29      	ldr	r3, [pc, #164]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1f0      	bne.n	8004af8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69da      	ldr	r2, [r3, #28]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	019b      	lsls	r3, r3, #6
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2c:	085b      	lsrs	r3, r3, #1
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	041b      	lsls	r3, r3, #16
 8004b32:	431a      	orrs	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	061b      	lsls	r3, r3, #24
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b40:	071b      	lsls	r3, r3, #28
 8004b42:	491b      	ldr	r1, [pc, #108]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b48:	4b19      	ldr	r3, [pc, #100]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a18      	ldr	r2, [pc, #96]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b54:	f7fd ff84 	bl	8002a60 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b5c:	f7fd ff80 	bl	8002a60 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e05f      	b.n	8004c2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b6e:	4b10      	ldr	r3, [pc, #64]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0x47c>
 8004b7a:	e057      	b.n	8004c2c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b7c:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a0b      	ldr	r2, [pc, #44]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004b82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b88:	f7fd ff6a 	bl	8002a60 <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b90:	f7fd ff66 	bl	8002a60 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e045      	b.n	8004c2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ba2:	4b03      	ldr	r3, [pc, #12]	; (8004bb0 <HAL_RCC_OscConfig+0x4d0>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1f0      	bne.n	8004b90 <HAL_RCC_OscConfig+0x4b0>
 8004bae:	e03d      	b.n	8004c2c <HAL_RCC_OscConfig+0x54c>
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004bb8:	4b1f      	ldr	r3, [pc, #124]	; (8004c38 <HAL_RCC_OscConfig+0x558>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d030      	beq.n	8004c28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d129      	bne.n	8004c28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d122      	bne.n	8004c28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004be8:	4013      	ands	r3, r2
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d119      	bne.n	8004c28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	085b      	lsrs	r3, r3, #1
 8004c00:	3b01      	subs	r3, #1
 8004c02:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d10f      	bne.n	8004c28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c12:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d107      	bne.n	8004c28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d001      	beq.n	8004c2c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e000      	b.n	8004c2e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40023800 	.word	0x40023800

08004c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e0d0      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c54:	4b6a      	ldr	r3, [pc, #424]	; (8004e00 <HAL_RCC_ClockConfig+0x1c4>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d910      	bls.n	8004c84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c62:	4b67      	ldr	r3, [pc, #412]	; (8004e00 <HAL_RCC_ClockConfig+0x1c4>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f023 020f 	bic.w	r2, r3, #15
 8004c6a:	4965      	ldr	r1, [pc, #404]	; (8004e00 <HAL_RCC_ClockConfig+0x1c4>)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c72:	4b63      	ldr	r3, [pc, #396]	; (8004e00 <HAL_RCC_ClockConfig+0x1c4>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d001      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0b8      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d020      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d005      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c9c:	4b59      	ldr	r3, [pc, #356]	; (8004e04 <HAL_RCC_ClockConfig+0x1c8>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	4a58      	ldr	r2, [pc, #352]	; (8004e04 <HAL_RCC_ClockConfig+0x1c8>)
 8004ca2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ca6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d005      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cb4:	4b53      	ldr	r3, [pc, #332]	; (8004e04 <HAL_RCC_ClockConfig+0x1c8>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	4a52      	ldr	r2, [pc, #328]	; (8004e04 <HAL_RCC_ClockConfig+0x1c8>)
 8004cba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cbe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cc0:	4b50      	ldr	r3, [pc, #320]	; (8004e04 <HAL_RCC_ClockConfig+0x1c8>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	494d      	ldr	r1, [pc, #308]	; (8004e04 <HAL_RCC_ClockConfig+0x1c8>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d040      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d107      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ce6:	4b47      	ldr	r3, [pc, #284]	; (8004e04 <HAL_RCC_ClockConfig+0x1c8>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d115      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e07f      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d107      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cfe:	4b41      	ldr	r3, [pc, #260]	; (8004e04 <HAL_RCC_ClockConfig+0x1c8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d109      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e073      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d0e:	4b3d      	ldr	r3, [pc, #244]	; (8004e04 <HAL_RCC_ClockConfig+0x1c8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e06b      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d1e:	4b39      	ldr	r3, [pc, #228]	; (8004e04 <HAL_RCC_ClockConfig+0x1c8>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f023 0203 	bic.w	r2, r3, #3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	4936      	ldr	r1, [pc, #216]	; (8004e04 <HAL_RCC_ClockConfig+0x1c8>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d30:	f7fd fe96 	bl	8002a60 <HAL_GetTick>
 8004d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d36:	e00a      	b.n	8004d4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d38:	f7fd fe92 	bl	8002a60 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e053      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d4e:	4b2d      	ldr	r3, [pc, #180]	; (8004e04 <HAL_RCC_ClockConfig+0x1c8>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 020c 	and.w	r2, r3, #12
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d1eb      	bne.n	8004d38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d60:	4b27      	ldr	r3, [pc, #156]	; (8004e00 <HAL_RCC_ClockConfig+0x1c4>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 030f 	and.w	r3, r3, #15
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d210      	bcs.n	8004d90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d6e:	4b24      	ldr	r3, [pc, #144]	; (8004e00 <HAL_RCC_ClockConfig+0x1c4>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f023 020f 	bic.w	r2, r3, #15
 8004d76:	4922      	ldr	r1, [pc, #136]	; (8004e00 <HAL_RCC_ClockConfig+0x1c4>)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d7e:	4b20      	ldr	r3, [pc, #128]	; (8004e00 <HAL_RCC_ClockConfig+0x1c4>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d001      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e032      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d008      	beq.n	8004dae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d9c:	4b19      	ldr	r3, [pc, #100]	; (8004e04 <HAL_RCC_ClockConfig+0x1c8>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	4916      	ldr	r1, [pc, #88]	; (8004e04 <HAL_RCC_ClockConfig+0x1c8>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d009      	beq.n	8004dce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004dba:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <HAL_RCC_ClockConfig+0x1c8>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	490e      	ldr	r1, [pc, #56]	; (8004e04 <HAL_RCC_ClockConfig+0x1c8>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dce:	f000 f821 	bl	8004e14 <HAL_RCC_GetSysClockFreq>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <HAL_RCC_ClockConfig+0x1c8>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	091b      	lsrs	r3, r3, #4
 8004dda:	f003 030f 	and.w	r3, r3, #15
 8004dde:	490a      	ldr	r1, [pc, #40]	; (8004e08 <HAL_RCC_ClockConfig+0x1cc>)
 8004de0:	5ccb      	ldrb	r3, [r1, r3]
 8004de2:	fa22 f303 	lsr.w	r3, r2, r3
 8004de6:	4a09      	ldr	r2, [pc, #36]	; (8004e0c <HAL_RCC_ClockConfig+0x1d0>)
 8004de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dea:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <HAL_RCC_ClockConfig+0x1d4>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fd fdf2 	bl	80029d8 <HAL_InitTick>

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40023c00 	.word	0x40023c00
 8004e04:	40023800 	.word	0x40023800
 8004e08:	08007034 	.word	0x08007034
 8004e0c:	20000000 	.word	0x20000000
 8004e10:	20000004 	.word	0x20000004

08004e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e18:	b090      	sub	sp, #64	; 0x40
 8004e1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e20:	2300      	movs	r3, #0
 8004e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e24:	2300      	movs	r3, #0
 8004e26:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e2c:	4b59      	ldr	r3, [pc, #356]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 030c 	and.w	r3, r3, #12
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	d00d      	beq.n	8004e54 <HAL_RCC_GetSysClockFreq+0x40>
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	f200 80a1 	bhi.w	8004f80 <HAL_RCC_GetSysClockFreq+0x16c>
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <HAL_RCC_GetSysClockFreq+0x34>
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d003      	beq.n	8004e4e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e46:	e09b      	b.n	8004f80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e48:	4b53      	ldr	r3, [pc, #332]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e4a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e4c:	e09b      	b.n	8004f86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e4e:	4b53      	ldr	r3, [pc, #332]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x188>)
 8004e50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e52:	e098      	b.n	8004f86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e54:	4b4f      	ldr	r3, [pc, #316]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e5c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004e5e:	4b4d      	ldr	r3, [pc, #308]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d028      	beq.n	8004ebc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e6a:	4b4a      	ldr	r3, [pc, #296]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	099b      	lsrs	r3, r3, #6
 8004e70:	2200      	movs	r2, #0
 8004e72:	623b      	str	r3, [r7, #32]
 8004e74:	627a      	str	r2, [r7, #36]	; 0x24
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	4b47      	ldr	r3, [pc, #284]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x188>)
 8004e80:	fb03 f201 	mul.w	r2, r3, r1
 8004e84:	2300      	movs	r3, #0
 8004e86:	fb00 f303 	mul.w	r3, r0, r3
 8004e8a:	4413      	add	r3, r2
 8004e8c:	4a43      	ldr	r2, [pc, #268]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x188>)
 8004e8e:	fba0 1202 	umull	r1, r2, r0, r2
 8004e92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e94:	460a      	mov	r2, r1
 8004e96:	62ba      	str	r2, [r7, #40]	; 0x28
 8004e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e9a:	4413      	add	r3, r2
 8004e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	61bb      	str	r3, [r7, #24]
 8004ea4:	61fa      	str	r2, [r7, #28]
 8004ea6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eaa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004eae:	f7fb f9cb 	bl	8000248 <__aeabi_uldivmod>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eba:	e053      	b.n	8004f64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ebc:	4b35      	ldr	r3, [pc, #212]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	099b      	lsrs	r3, r3, #6
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	617a      	str	r2, [r7, #20]
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ece:	f04f 0b00 	mov.w	fp, #0
 8004ed2:	4652      	mov	r2, sl
 8004ed4:	465b      	mov	r3, fp
 8004ed6:	f04f 0000 	mov.w	r0, #0
 8004eda:	f04f 0100 	mov.w	r1, #0
 8004ede:	0159      	lsls	r1, r3, #5
 8004ee0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ee4:	0150      	lsls	r0, r2, #5
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	ebb2 080a 	subs.w	r8, r2, sl
 8004eee:	eb63 090b 	sbc.w	r9, r3, fp
 8004ef2:	f04f 0200 	mov.w	r2, #0
 8004ef6:	f04f 0300 	mov.w	r3, #0
 8004efa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004efe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004f02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004f06:	ebb2 0408 	subs.w	r4, r2, r8
 8004f0a:	eb63 0509 	sbc.w	r5, r3, r9
 8004f0e:	f04f 0200 	mov.w	r2, #0
 8004f12:	f04f 0300 	mov.w	r3, #0
 8004f16:	00eb      	lsls	r3, r5, #3
 8004f18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f1c:	00e2      	lsls	r2, r4, #3
 8004f1e:	4614      	mov	r4, r2
 8004f20:	461d      	mov	r5, r3
 8004f22:	eb14 030a 	adds.w	r3, r4, sl
 8004f26:	603b      	str	r3, [r7, #0]
 8004f28:	eb45 030b 	adc.w	r3, r5, fp
 8004f2c:	607b      	str	r3, [r7, #4]
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	f04f 0300 	mov.w	r3, #0
 8004f36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	028b      	lsls	r3, r1, #10
 8004f3e:	4621      	mov	r1, r4
 8004f40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f44:	4621      	mov	r1, r4
 8004f46:	028a      	lsls	r2, r1, #10
 8004f48:	4610      	mov	r0, r2
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4e:	2200      	movs	r2, #0
 8004f50:	60bb      	str	r3, [r7, #8]
 8004f52:	60fa      	str	r2, [r7, #12]
 8004f54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f58:	f7fb f976 	bl	8000248 <__aeabi_uldivmod>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4613      	mov	r3, r2
 8004f62:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004f64:	4b0b      	ldr	r3, [pc, #44]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	0c1b      	lsrs	r3, r3, #16
 8004f6a:	f003 0303 	and.w	r3, r3, #3
 8004f6e:	3301      	adds	r3, #1
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004f74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f7e:	e002      	b.n	8004f86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f80:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f82:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3740      	adds	r7, #64	; 0x40
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f92:	bf00      	nop
 8004f94:	40023800 	.word	0x40023800
 8004f98:	00f42400 	.word	0x00f42400
 8004f9c:	017d7840 	.word	0x017d7840

08004fa0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fa4:	4b03      	ldr	r3, [pc, #12]	; (8004fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	20000000 	.word	0x20000000

08004fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fbc:	f7ff fff0 	bl	8004fa0 <HAL_RCC_GetHCLKFreq>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	0a9b      	lsrs	r3, r3, #10
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	4903      	ldr	r1, [pc, #12]	; (8004fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fce:	5ccb      	ldrb	r3, [r1, r3]
 8004fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	08007044 	.word	0x08007044

08004fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fe4:	f7ff ffdc 	bl	8004fa0 <HAL_RCC_GetHCLKFreq>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	4b05      	ldr	r3, [pc, #20]	; (8005000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	0b5b      	lsrs	r3, r3, #13
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	4903      	ldr	r1, [pc, #12]	; (8005004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ff6:	5ccb      	ldrb	r3, [r1, r3]
 8004ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40023800 	.word	0x40023800
 8005004:	08007044 	.word	0x08007044

08005008 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005010:	2300      	movs	r3, #0
 8005012:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005014:	2300      	movs	r3, #0
 8005016:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005018:	2300      	movs	r3, #0
 800501a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800501c:	2300      	movs	r3, #0
 800501e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005020:	2300      	movs	r3, #0
 8005022:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b00      	cmp	r3, #0
 800502e:	d012      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005030:	4b69      	ldr	r3, [pc, #420]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	4a68      	ldr	r2, [pc, #416]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005036:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800503a:	6093      	str	r3, [r2, #8]
 800503c:	4b66      	ldr	r3, [pc, #408]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005044:	4964      	ldr	r1, [pc, #400]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005046:	4313      	orrs	r3, r2
 8005048:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005052:	2301      	movs	r3, #1
 8005054:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d017      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005062:	4b5d      	ldr	r3, [pc, #372]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005068:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005070:	4959      	ldr	r1, [pc, #356]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005080:	d101      	bne.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005082:	2301      	movs	r3, #1
 8005084:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800508e:	2301      	movs	r3, #1
 8005090:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d017      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800509e:	4b4e      	ldr	r3, [pc, #312]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ac:	494a      	ldr	r1, [pc, #296]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050bc:	d101      	bne.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80050be:	2301      	movs	r3, #1
 80050c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80050ca:	2301      	movs	r3, #1
 80050cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80050da:	2301      	movs	r3, #1
 80050dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f000 808b 	beq.w	8005202 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050ec:	4b3a      	ldr	r3, [pc, #232]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f0:	4a39      	ldr	r2, [pc, #228]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f6:	6413      	str	r3, [r2, #64]	; 0x40
 80050f8:	4b37      	ldr	r3, [pc, #220]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005100:	60bb      	str	r3, [r7, #8]
 8005102:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005104:	4b35      	ldr	r3, [pc, #212]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a34      	ldr	r2, [pc, #208]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800510a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800510e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005110:	f7fd fca6 	bl	8002a60 <HAL_GetTick>
 8005114:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005116:	e008      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005118:	f7fd fca2 	bl	8002a60 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b64      	cmp	r3, #100	; 0x64
 8005124:	d901      	bls.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e38f      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800512a:	4b2c      	ldr	r3, [pc, #176]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0f0      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005136:	4b28      	ldr	r3, [pc, #160]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800513e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d035      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	429a      	cmp	r2, r3
 8005152:	d02e      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005154:	4b20      	ldr	r3, [pc, #128]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800515c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800515e:	4b1e      	ldr	r3, [pc, #120]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005162:	4a1d      	ldr	r2, [pc, #116]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005168:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800516a:	4b1b      	ldr	r3, [pc, #108]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800516c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516e:	4a1a      	ldr	r2, [pc, #104]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005174:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005176:	4a18      	ldr	r2, [pc, #96]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800517c:	4b16      	ldr	r3, [pc, #88]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800517e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b01      	cmp	r3, #1
 8005186:	d114      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005188:	f7fd fc6a 	bl	8002a60 <HAL_GetTick>
 800518c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800518e:	e00a      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005190:	f7fd fc66 	bl	8002a60 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	f241 3288 	movw	r2, #5000	; 0x1388
 800519e:	4293      	cmp	r3, r2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e351      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051a6:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0ee      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051be:	d111      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80051c0:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80051cc:	4b04      	ldr	r3, [pc, #16]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80051ce:	400b      	ands	r3, r1
 80051d0:	4901      	ldr	r1, [pc, #4]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	608b      	str	r3, [r1, #8]
 80051d6:	e00b      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80051d8:	40023800 	.word	0x40023800
 80051dc:	40007000 	.word	0x40007000
 80051e0:	0ffffcff 	.word	0x0ffffcff
 80051e4:	4bac      	ldr	r3, [pc, #688]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	4aab      	ldr	r2, [pc, #684]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80051ee:	6093      	str	r3, [r2, #8]
 80051f0:	4ba9      	ldr	r3, [pc, #676]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051fc:	49a6      	ldr	r1, [pc, #664]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0310 	and.w	r3, r3, #16
 800520a:	2b00      	cmp	r3, #0
 800520c:	d010      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800520e:	4ba2      	ldr	r3, [pc, #648]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005214:	4aa0      	ldr	r2, [pc, #640]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005216:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800521a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800521e:	4b9e      	ldr	r3, [pc, #632]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005220:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005228:	499b      	ldr	r1, [pc, #620]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800522a:	4313      	orrs	r3, r2
 800522c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00a      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800523c:	4b96      	ldr	r3, [pc, #600]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800523e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005242:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800524a:	4993      	ldr	r1, [pc, #588]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800524c:	4313      	orrs	r3, r2
 800524e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800525e:	4b8e      	ldr	r3, [pc, #568]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005264:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800526c:	498a      	ldr	r1, [pc, #552]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00a      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005280:	4b85      	ldr	r3, [pc, #532]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005286:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800528e:	4982      	ldr	r1, [pc, #520]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005290:	4313      	orrs	r3, r2
 8005292:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052a2:	4b7d      	ldr	r3, [pc, #500]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b0:	4979      	ldr	r1, [pc, #484]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00a      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052c4:	4b74      	ldr	r3, [pc, #464]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ca:	f023 0203 	bic.w	r2, r3, #3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d2:	4971      	ldr	r1, [pc, #452]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052e6:	4b6c      	ldr	r3, [pc, #432]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ec:	f023 020c 	bic.w	r2, r3, #12
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052f4:	4968      	ldr	r1, [pc, #416]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005308:	4b63      	ldr	r3, [pc, #396]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800530a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005316:	4960      	ldr	r1, [pc, #384]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005318:	4313      	orrs	r3, r2
 800531a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800532a:	4b5b      	ldr	r3, [pc, #364]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800532c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005330:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005338:	4957      	ldr	r1, [pc, #348]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800534c:	4b52      	ldr	r3, [pc, #328]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800534e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005352:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535a:	494f      	ldr	r1, [pc, #316]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800536e:	4b4a      	ldr	r3, [pc, #296]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005374:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537c:	4946      	ldr	r1, [pc, #280]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800537e:	4313      	orrs	r3, r2
 8005380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005390:	4b41      	ldr	r3, [pc, #260]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005396:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800539e:	493e      	ldr	r1, [pc, #248]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80053b2:	4b39      	ldr	r3, [pc, #228]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c0:	4935      	ldr	r1, [pc, #212]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053d4:	4b30      	ldr	r3, [pc, #192]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053e2:	492d      	ldr	r1, [pc, #180]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d011      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80053f6:	4b28      	ldr	r3, [pc, #160]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005404:	4924      	ldr	r1, [pc, #144]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005410:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005414:	d101      	bne.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005416:	2301      	movs	r3, #1
 8005418:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005426:	2301      	movs	r3, #1
 8005428:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00a      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005436:	4b18      	ldr	r3, [pc, #96]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005444:	4914      	ldr	r1, [pc, #80]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005446:	4313      	orrs	r3, r2
 8005448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00b      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005458:	4b0f      	ldr	r3, [pc, #60]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800545a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005468:	490b      	ldr	r1, [pc, #44]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800546a:	4313      	orrs	r3, r2
 800546c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00f      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800547c:	4b06      	ldr	r3, [pc, #24]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800547e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005482:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800548c:	4902      	ldr	r1, [pc, #8]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005494:	e002      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005496:	bf00      	nop
 8005498:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00b      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80054a8:	4b8a      	ldr	r3, [pc, #552]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b8:	4986      	ldr	r1, [pc, #536]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00b      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80054cc:	4b81      	ldr	r3, [pc, #516]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054dc:	497d      	ldr	r1, [pc, #500]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d006      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 80d6 	beq.w	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80054f8:	4b76      	ldr	r3, [pc, #472]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a75      	ldr	r2, [pc, #468]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005502:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005504:	f7fd faac 	bl	8002a60 <HAL_GetTick>
 8005508:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800550a:	e008      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800550c:	f7fd faa8 	bl	8002a60 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b64      	cmp	r3, #100	; 0x64
 8005518:	d901      	bls.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e195      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800551e:	4b6d      	ldr	r3, [pc, #436]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1f0      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d021      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800553a:	2b00      	cmp	r3, #0
 800553c:	d11d      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800553e:	4b65      	ldr	r3, [pc, #404]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005544:	0c1b      	lsrs	r3, r3, #16
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800554c:	4b61      	ldr	r3, [pc, #388]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800554e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005552:	0e1b      	lsrs	r3, r3, #24
 8005554:	f003 030f 	and.w	r3, r3, #15
 8005558:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	019a      	lsls	r2, r3, #6
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	041b      	lsls	r3, r3, #16
 8005564:	431a      	orrs	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	061b      	lsls	r3, r3, #24
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	071b      	lsls	r3, r3, #28
 8005572:	4958      	ldr	r1, [pc, #352]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005574:	4313      	orrs	r3, r2
 8005576:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d004      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800558e:	d00a      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005598:	2b00      	cmp	r3, #0
 800559a:	d02e      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055a4:	d129      	bne.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80055a6:	4b4b      	ldr	r3, [pc, #300]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ac:	0c1b      	lsrs	r3, r3, #16
 80055ae:	f003 0303 	and.w	r3, r3, #3
 80055b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80055b4:	4b47      	ldr	r3, [pc, #284]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ba:	0f1b      	lsrs	r3, r3, #28
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	019a      	lsls	r2, r3, #6
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	041b      	lsls	r3, r3, #16
 80055cc:	431a      	orrs	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	061b      	lsls	r3, r3, #24
 80055d4:	431a      	orrs	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	071b      	lsls	r3, r3, #28
 80055da:	493e      	ldr	r1, [pc, #248]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80055e2:	4b3c      	ldr	r3, [pc, #240]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055e8:	f023 021f 	bic.w	r2, r3, #31
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	3b01      	subs	r3, #1
 80055f2:	4938      	ldr	r1, [pc, #224]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d01d      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005606:	4b33      	ldr	r3, [pc, #204]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800560c:	0e1b      	lsrs	r3, r3, #24
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005614:	4b2f      	ldr	r3, [pc, #188]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800561a:	0f1b      	lsrs	r3, r3, #28
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	019a      	lsls	r2, r3, #6
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	041b      	lsls	r3, r3, #16
 800562e:	431a      	orrs	r2, r3
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	061b      	lsls	r3, r3, #24
 8005634:	431a      	orrs	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	071b      	lsls	r3, r3, #28
 800563a:	4926      	ldr	r1, [pc, #152]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d011      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	019a      	lsls	r2, r3, #6
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	041b      	lsls	r3, r3, #16
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	061b      	lsls	r3, r3, #24
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	071b      	lsls	r3, r3, #28
 800566a:	491a      	ldr	r1, [pc, #104]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800566c:	4313      	orrs	r3, r2
 800566e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005672:	4b18      	ldr	r3, [pc, #96]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a17      	ldr	r2, [pc, #92]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005678:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800567c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800567e:	f7fd f9ef 	bl	8002a60 <HAL_GetTick>
 8005682:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005684:	e008      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005686:	f7fd f9eb 	bl	8002a60 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b64      	cmp	r3, #100	; 0x64
 8005692:	d901      	bls.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e0d8      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005698:	4b0e      	ldr	r3, [pc, #56]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0f0      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	f040 80ce 	bne.w	8005848 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80056ac:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a08      	ldr	r2, [pc, #32]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b8:	f7fd f9d2 	bl	8002a60 <HAL_GetTick>
 80056bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80056be:	e00b      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80056c0:	f7fd f9ce 	bl	8002a60 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b64      	cmp	r3, #100	; 0x64
 80056cc:	d904      	bls.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e0bb      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80056d2:	bf00      	nop
 80056d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80056d8:	4b5e      	ldr	r3, [pc, #376]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056e4:	d0ec      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d009      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005702:	2b00      	cmp	r3, #0
 8005704:	d02e      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	2b00      	cmp	r3, #0
 800570c:	d12a      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800570e:	4b51      	ldr	r3, [pc, #324]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005714:	0c1b      	lsrs	r3, r3, #16
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800571c:	4b4d      	ldr	r3, [pc, #308]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800571e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005722:	0f1b      	lsrs	r3, r3, #28
 8005724:	f003 0307 	and.w	r3, r3, #7
 8005728:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	019a      	lsls	r2, r3, #6
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	041b      	lsls	r3, r3, #16
 8005734:	431a      	orrs	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	061b      	lsls	r3, r3, #24
 800573c:	431a      	orrs	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	071b      	lsls	r3, r3, #28
 8005742:	4944      	ldr	r1, [pc, #272]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005744:	4313      	orrs	r3, r2
 8005746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800574a:	4b42      	ldr	r3, [pc, #264]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800574c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005750:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005758:	3b01      	subs	r3, #1
 800575a:	021b      	lsls	r3, r3, #8
 800575c:	493d      	ldr	r1, [pc, #244]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800575e:	4313      	orrs	r3, r2
 8005760:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d022      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005774:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005778:	d11d      	bne.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800577a:	4b36      	ldr	r3, [pc, #216]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800577c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005780:	0e1b      	lsrs	r3, r3, #24
 8005782:	f003 030f 	and.w	r3, r3, #15
 8005786:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005788:	4b32      	ldr	r3, [pc, #200]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800578a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578e:	0f1b      	lsrs	r3, r3, #28
 8005790:	f003 0307 	and.w	r3, r3, #7
 8005794:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	019a      	lsls	r2, r3, #6
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	041b      	lsls	r3, r3, #16
 80057a2:	431a      	orrs	r2, r3
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	061b      	lsls	r3, r3, #24
 80057a8:	431a      	orrs	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	071b      	lsls	r3, r3, #28
 80057ae:	4929      	ldr	r1, [pc, #164]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0308 	and.w	r3, r3, #8
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d028      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80057c2:	4b24      	ldr	r3, [pc, #144]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c8:	0e1b      	lsrs	r3, r3, #24
 80057ca:	f003 030f 	and.w	r3, r3, #15
 80057ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80057d0:	4b20      	ldr	r3, [pc, #128]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d6:	0c1b      	lsrs	r3, r3, #16
 80057d8:	f003 0303 	and.w	r3, r3, #3
 80057dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	019a      	lsls	r2, r3, #6
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	041b      	lsls	r3, r3, #16
 80057e8:	431a      	orrs	r2, r3
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	061b      	lsls	r3, r3, #24
 80057ee:	431a      	orrs	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	071b      	lsls	r3, r3, #28
 80057f6:	4917      	ldr	r1, [pc, #92]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80057fe:	4b15      	ldr	r3, [pc, #84]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005804:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580c:	4911      	ldr	r1, [pc, #68]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800580e:	4313      	orrs	r3, r2
 8005810:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005814:	4b0f      	ldr	r3, [pc, #60]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a0e      	ldr	r2, [pc, #56]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800581a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800581e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005820:	f7fd f91e 	bl	8002a60 <HAL_GetTick>
 8005824:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005826:	e008      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005828:	f7fd f91a 	bl	8002a60 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b64      	cmp	r3, #100	; 0x64
 8005834:	d901      	bls.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e007      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800583a:	4b06      	ldr	r3, [pc, #24]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005846:	d1ef      	bne.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3720      	adds	r7, #32
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	40023800 	.word	0x40023800

08005858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e049      	b.n	80058fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fc ffc0 	bl	8002804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3304      	adds	r3, #4
 8005894:	4619      	mov	r1, r3
 8005896:	4610      	mov	r0, r2
 8005898:	f000 f9f6 	bl	8005c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
	...

08005908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b01      	cmp	r3, #1
 800591a:	d001      	beq.n	8005920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e054      	b.n	80059ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68da      	ldr	r2, [r3, #12]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0201 	orr.w	r2, r2, #1
 8005936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a26      	ldr	r2, [pc, #152]	; (80059d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d022      	beq.n	8005988 <HAL_TIM_Base_Start_IT+0x80>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800594a:	d01d      	beq.n	8005988 <HAL_TIM_Base_Start_IT+0x80>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a22      	ldr	r2, [pc, #136]	; (80059dc <HAL_TIM_Base_Start_IT+0xd4>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d018      	beq.n	8005988 <HAL_TIM_Base_Start_IT+0x80>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a21      	ldr	r2, [pc, #132]	; (80059e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d013      	beq.n	8005988 <HAL_TIM_Base_Start_IT+0x80>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a1f      	ldr	r2, [pc, #124]	; (80059e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00e      	beq.n	8005988 <HAL_TIM_Base_Start_IT+0x80>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a1e      	ldr	r2, [pc, #120]	; (80059e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d009      	beq.n	8005988 <HAL_TIM_Base_Start_IT+0x80>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1c      	ldr	r2, [pc, #112]	; (80059ec <HAL_TIM_Base_Start_IT+0xe4>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d004      	beq.n	8005988 <HAL_TIM_Base_Start_IT+0x80>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a1b      	ldr	r2, [pc, #108]	; (80059f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d115      	bne.n	80059b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689a      	ldr	r2, [r3, #8]
 800598e:	4b19      	ldr	r3, [pc, #100]	; (80059f4 <HAL_TIM_Base_Start_IT+0xec>)
 8005990:	4013      	ands	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b06      	cmp	r3, #6
 8005998:	d015      	beq.n	80059c6 <HAL_TIM_Base_Start_IT+0xbe>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059a0:	d011      	beq.n	80059c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f042 0201 	orr.w	r2, r2, #1
 80059b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b2:	e008      	b.n	80059c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	e000      	b.n	80059c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	40010000 	.word	0x40010000
 80059dc:	40000400 	.word	0x40000400
 80059e0:	40000800 	.word	0x40000800
 80059e4:	40000c00 	.word	0x40000c00
 80059e8:	40010400 	.word	0x40010400
 80059ec:	40014000 	.word	0x40014000
 80059f0:	40001800 	.word	0x40001800
 80059f4:	00010007 	.word	0x00010007

080059f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d122      	bne.n	8005a54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d11b      	bne.n	8005a54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f06f 0202 	mvn.w	r2, #2
 8005a24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	f003 0303 	and.w	r3, r3, #3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f905 	bl	8005c4a <HAL_TIM_IC_CaptureCallback>
 8005a40:	e005      	b.n	8005a4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f8f7 	bl	8005c36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f908 	bl	8005c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	f003 0304 	and.w	r3, r3, #4
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d122      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b04      	cmp	r3, #4
 8005a6e:	d11b      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f06f 0204 	mvn.w	r2, #4
 8005a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f8db 	bl	8005c4a <HAL_TIM_IC_CaptureCallback>
 8005a94:	e005      	b.n	8005aa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f8cd 	bl	8005c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f8de 	bl	8005c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	2b08      	cmp	r3, #8
 8005ab4:	d122      	bne.n	8005afc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f003 0308 	and.w	r3, r3, #8
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	d11b      	bne.n	8005afc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f06f 0208 	mvn.w	r2, #8
 8005acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2204      	movs	r2, #4
 8005ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	f003 0303 	and.w	r3, r3, #3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f8b1 	bl	8005c4a <HAL_TIM_IC_CaptureCallback>
 8005ae8:	e005      	b.n	8005af6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f8a3 	bl	8005c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f8b4 	bl	8005c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f003 0310 	and.w	r3, r3, #16
 8005b06:	2b10      	cmp	r3, #16
 8005b08:	d122      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f003 0310 	and.w	r3, r3, #16
 8005b14:	2b10      	cmp	r3, #16
 8005b16:	d11b      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f06f 0210 	mvn.w	r2, #16
 8005b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2208      	movs	r2, #8
 8005b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d003      	beq.n	8005b3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f887 	bl	8005c4a <HAL_TIM_IC_CaptureCallback>
 8005b3c:	e005      	b.n	8005b4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f879 	bl	8005c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f88a 	bl	8005c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d10e      	bne.n	8005b7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d107      	bne.n	8005b7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f06f 0201 	mvn.w	r2, #1
 8005b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7fc fd52 	bl	8002620 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b86:	2b80      	cmp	r3, #128	; 0x80
 8005b88:	d10e      	bne.n	8005ba8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b94:	2b80      	cmp	r3, #128	; 0x80
 8005b96:	d107      	bne.n	8005ba8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f9a8 	bl	8005ef8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb6:	d10e      	bne.n	8005bd6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc2:	2b80      	cmp	r3, #128	; 0x80
 8005bc4:	d107      	bne.n	8005bd6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f99b 	bl	8005f0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be0:	2b40      	cmp	r3, #64	; 0x40
 8005be2:	d10e      	bne.n	8005c02 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bee:	2b40      	cmp	r3, #64	; 0x40
 8005bf0:	d107      	bne.n	8005c02 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f838 	bl	8005c72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	f003 0320 	and.w	r3, r3, #32
 8005c0c:	2b20      	cmp	r3, #32
 8005c0e:	d10e      	bne.n	8005c2e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f003 0320 	and.w	r3, r3, #32
 8005c1a:	2b20      	cmp	r3, #32
 8005c1c:	d107      	bne.n	8005c2e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f06f 0220 	mvn.w	r2, #32
 8005c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f95b 	bl	8005ee4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c2e:	bf00      	nop
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c3e:	bf00      	nop
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c66:	bf00      	nop
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
	...

08005c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a40      	ldr	r2, [pc, #256]	; (8005d9c <TIM_Base_SetConfig+0x114>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d013      	beq.n	8005cc8 <TIM_Base_SetConfig+0x40>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca6:	d00f      	beq.n	8005cc8 <TIM_Base_SetConfig+0x40>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a3d      	ldr	r2, [pc, #244]	; (8005da0 <TIM_Base_SetConfig+0x118>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d00b      	beq.n	8005cc8 <TIM_Base_SetConfig+0x40>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a3c      	ldr	r2, [pc, #240]	; (8005da4 <TIM_Base_SetConfig+0x11c>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d007      	beq.n	8005cc8 <TIM_Base_SetConfig+0x40>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a3b      	ldr	r2, [pc, #236]	; (8005da8 <TIM_Base_SetConfig+0x120>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d003      	beq.n	8005cc8 <TIM_Base_SetConfig+0x40>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a3a      	ldr	r2, [pc, #232]	; (8005dac <TIM_Base_SetConfig+0x124>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d108      	bne.n	8005cda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a2f      	ldr	r2, [pc, #188]	; (8005d9c <TIM_Base_SetConfig+0x114>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d02b      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce8:	d027      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a2c      	ldr	r2, [pc, #176]	; (8005da0 <TIM_Base_SetConfig+0x118>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d023      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a2b      	ldr	r2, [pc, #172]	; (8005da4 <TIM_Base_SetConfig+0x11c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d01f      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a2a      	ldr	r2, [pc, #168]	; (8005da8 <TIM_Base_SetConfig+0x120>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d01b      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a29      	ldr	r2, [pc, #164]	; (8005dac <TIM_Base_SetConfig+0x124>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d017      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a28      	ldr	r2, [pc, #160]	; (8005db0 <TIM_Base_SetConfig+0x128>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d013      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a27      	ldr	r2, [pc, #156]	; (8005db4 <TIM_Base_SetConfig+0x12c>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d00f      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a26      	ldr	r2, [pc, #152]	; (8005db8 <TIM_Base_SetConfig+0x130>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d00b      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a25      	ldr	r2, [pc, #148]	; (8005dbc <TIM_Base_SetConfig+0x134>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d007      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a24      	ldr	r2, [pc, #144]	; (8005dc0 <TIM_Base_SetConfig+0x138>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d003      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a23      	ldr	r2, [pc, #140]	; (8005dc4 <TIM_Base_SetConfig+0x13c>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d108      	bne.n	8005d4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a0a      	ldr	r2, [pc, #40]	; (8005d9c <TIM_Base_SetConfig+0x114>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d003      	beq.n	8005d80 <TIM_Base_SetConfig+0xf8>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a0c      	ldr	r2, [pc, #48]	; (8005dac <TIM_Base_SetConfig+0x124>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d103      	bne.n	8005d88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	691a      	ldr	r2, [r3, #16]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	615a      	str	r2, [r3, #20]
}
 8005d8e:	bf00      	nop
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40010000 	.word	0x40010000
 8005da0:	40000400 	.word	0x40000400
 8005da4:	40000800 	.word	0x40000800
 8005da8:	40000c00 	.word	0x40000c00
 8005dac:	40010400 	.word	0x40010400
 8005db0:	40014000 	.word	0x40014000
 8005db4:	40014400 	.word	0x40014400
 8005db8:	40014800 	.word	0x40014800
 8005dbc:	40001800 	.word	0x40001800
 8005dc0:	40001c00 	.word	0x40001c00
 8005dc4:	40002000 	.word	0x40002000

08005dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e06d      	b.n	8005ebc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a30      	ldr	r2, [pc, #192]	; (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d004      	beq.n	8005e14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a2f      	ldr	r2, [pc, #188]	; (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d108      	bne.n	8005e26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a20      	ldr	r2, [pc, #128]	; (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d022      	beq.n	8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e52:	d01d      	beq.n	8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a1d      	ldr	r2, [pc, #116]	; (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d018      	beq.n	8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a1c      	ldr	r2, [pc, #112]	; (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d013      	beq.n	8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a1a      	ldr	r2, [pc, #104]	; (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d00e      	beq.n	8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a15      	ldr	r2, [pc, #84]	; (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d009      	beq.n	8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a16      	ldr	r2, [pc, #88]	; (8005edc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d004      	beq.n	8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a15      	ldr	r2, [pc, #84]	; (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d10c      	bne.n	8005eaa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	40010000 	.word	0x40010000
 8005ecc:	40010400 	.word	0x40010400
 8005ed0:	40000400 	.word	0x40000400
 8005ed4:	40000800 	.word	0x40000800
 8005ed8:	40000c00 	.word	0x40000c00
 8005edc:	40014000 	.word	0x40014000
 8005ee0:	40001800 	.word	0x40001800

08005ee4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e040      	b.n	8005fb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d106      	bne.n	8005f48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7fc fcb4 	bl	80028b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2224      	movs	r2, #36	; 0x24
 8005f4c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f022 0201 	bic.w	r2, r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f8b0 	bl	80060c4 <UART_SetConfig>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d101      	bne.n	8005f6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e022      	b.n	8005fb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fb08 	bl	800658c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689a      	ldr	r2, [r3, #8]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0201 	orr.w	r2, r2, #1
 8005faa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fb8f 	bl	80066d0 <UART_CheckIdleState>
 8005fb2:	4603      	mov	r3, r0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b08a      	sub	sp, #40	; 0x28
 8005fc0:	af02      	add	r7, sp, #8
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fd0:	2b20      	cmp	r3, #32
 8005fd2:	d171      	bne.n	80060b8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d002      	beq.n	8005fe0 <HAL_UART_Transmit+0x24>
 8005fda:	88fb      	ldrh	r3, [r7, #6]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e06a      	b.n	80060ba <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2221      	movs	r2, #33	; 0x21
 8005ff0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ff2:	f7fc fd35 	bl	8002a60 <HAL_GetTick>
 8005ff6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	88fa      	ldrh	r2, [r7, #6]
 8005ffc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	88fa      	ldrh	r2, [r7, #6]
 8006004:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006010:	d108      	bne.n	8006024 <HAL_UART_Transmit+0x68>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d104      	bne.n	8006024 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800601a:	2300      	movs	r3, #0
 800601c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	61bb      	str	r3, [r7, #24]
 8006022:	e003      	b.n	800602c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006028:	2300      	movs	r3, #0
 800602a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800602c:	e02c      	b.n	8006088 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2200      	movs	r2, #0
 8006036:	2180      	movs	r1, #128	; 0x80
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 fb96 	bl	800676a <UART_WaitOnFlagUntilTimeout>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e038      	b.n	80060ba <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10b      	bne.n	8006066 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	461a      	mov	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800605c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	3302      	adds	r3, #2
 8006062:	61bb      	str	r3, [r7, #24]
 8006064:	e007      	b.n	8006076 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	781a      	ldrb	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	3301      	adds	r3, #1
 8006074:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800607c:	b29b      	uxth	r3, r3
 800607e:	3b01      	subs	r3, #1
 8006080:	b29a      	uxth	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800608e:	b29b      	uxth	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1cc      	bne.n	800602e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	2200      	movs	r2, #0
 800609c:	2140      	movs	r1, #64	; 0x40
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 fb63 	bl	800676a <UART_WaitOnFlagUntilTimeout>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e005      	b.n	80060ba <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2220      	movs	r2, #32
 80060b2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	e000      	b.n	80060ba <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80060b8:	2302      	movs	r3, #2
  }
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3720      	adds	r7, #32
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
	...

080060c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b088      	sub	sp, #32
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060cc:	2300      	movs	r3, #0
 80060ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	431a      	orrs	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	4ba6      	ldr	r3, [pc, #664]	; (8006388 <UART_SetConfig+0x2c4>)
 80060f0:	4013      	ands	r3, r2
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	6812      	ldr	r2, [r2, #0]
 80060f6:	6979      	ldr	r1, [r7, #20]
 80060f8:	430b      	orrs	r3, r1
 80060fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68da      	ldr	r2, [r3, #12]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a1b      	ldr	r3, [r3, #32]
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	4313      	orrs	r3, r2
 8006120:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	430a      	orrs	r2, r1
 8006134:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a94      	ldr	r2, [pc, #592]	; (800638c <UART_SetConfig+0x2c8>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d120      	bne.n	8006182 <UART_SetConfig+0xbe>
 8006140:	4b93      	ldr	r3, [pc, #588]	; (8006390 <UART_SetConfig+0x2cc>)
 8006142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	2b03      	cmp	r3, #3
 800614c:	d816      	bhi.n	800617c <UART_SetConfig+0xb8>
 800614e:	a201      	add	r2, pc, #4	; (adr r2, 8006154 <UART_SetConfig+0x90>)
 8006150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006154:	08006165 	.word	0x08006165
 8006158:	08006171 	.word	0x08006171
 800615c:	0800616b 	.word	0x0800616b
 8006160:	08006177 	.word	0x08006177
 8006164:	2301      	movs	r3, #1
 8006166:	77fb      	strb	r3, [r7, #31]
 8006168:	e150      	b.n	800640c <UART_SetConfig+0x348>
 800616a:	2302      	movs	r3, #2
 800616c:	77fb      	strb	r3, [r7, #31]
 800616e:	e14d      	b.n	800640c <UART_SetConfig+0x348>
 8006170:	2304      	movs	r3, #4
 8006172:	77fb      	strb	r3, [r7, #31]
 8006174:	e14a      	b.n	800640c <UART_SetConfig+0x348>
 8006176:	2308      	movs	r3, #8
 8006178:	77fb      	strb	r3, [r7, #31]
 800617a:	e147      	b.n	800640c <UART_SetConfig+0x348>
 800617c:	2310      	movs	r3, #16
 800617e:	77fb      	strb	r3, [r7, #31]
 8006180:	e144      	b.n	800640c <UART_SetConfig+0x348>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a83      	ldr	r2, [pc, #524]	; (8006394 <UART_SetConfig+0x2d0>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d132      	bne.n	80061f2 <UART_SetConfig+0x12e>
 800618c:	4b80      	ldr	r3, [pc, #512]	; (8006390 <UART_SetConfig+0x2cc>)
 800618e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006192:	f003 030c 	and.w	r3, r3, #12
 8006196:	2b0c      	cmp	r3, #12
 8006198:	d828      	bhi.n	80061ec <UART_SetConfig+0x128>
 800619a:	a201      	add	r2, pc, #4	; (adr r2, 80061a0 <UART_SetConfig+0xdc>)
 800619c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a0:	080061d5 	.word	0x080061d5
 80061a4:	080061ed 	.word	0x080061ed
 80061a8:	080061ed 	.word	0x080061ed
 80061ac:	080061ed 	.word	0x080061ed
 80061b0:	080061e1 	.word	0x080061e1
 80061b4:	080061ed 	.word	0x080061ed
 80061b8:	080061ed 	.word	0x080061ed
 80061bc:	080061ed 	.word	0x080061ed
 80061c0:	080061db 	.word	0x080061db
 80061c4:	080061ed 	.word	0x080061ed
 80061c8:	080061ed 	.word	0x080061ed
 80061cc:	080061ed 	.word	0x080061ed
 80061d0:	080061e7 	.word	0x080061e7
 80061d4:	2300      	movs	r3, #0
 80061d6:	77fb      	strb	r3, [r7, #31]
 80061d8:	e118      	b.n	800640c <UART_SetConfig+0x348>
 80061da:	2302      	movs	r3, #2
 80061dc:	77fb      	strb	r3, [r7, #31]
 80061de:	e115      	b.n	800640c <UART_SetConfig+0x348>
 80061e0:	2304      	movs	r3, #4
 80061e2:	77fb      	strb	r3, [r7, #31]
 80061e4:	e112      	b.n	800640c <UART_SetConfig+0x348>
 80061e6:	2308      	movs	r3, #8
 80061e8:	77fb      	strb	r3, [r7, #31]
 80061ea:	e10f      	b.n	800640c <UART_SetConfig+0x348>
 80061ec:	2310      	movs	r3, #16
 80061ee:	77fb      	strb	r3, [r7, #31]
 80061f0:	e10c      	b.n	800640c <UART_SetConfig+0x348>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a68      	ldr	r2, [pc, #416]	; (8006398 <UART_SetConfig+0x2d4>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d120      	bne.n	800623e <UART_SetConfig+0x17a>
 80061fc:	4b64      	ldr	r3, [pc, #400]	; (8006390 <UART_SetConfig+0x2cc>)
 80061fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006202:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006206:	2b30      	cmp	r3, #48	; 0x30
 8006208:	d013      	beq.n	8006232 <UART_SetConfig+0x16e>
 800620a:	2b30      	cmp	r3, #48	; 0x30
 800620c:	d814      	bhi.n	8006238 <UART_SetConfig+0x174>
 800620e:	2b20      	cmp	r3, #32
 8006210:	d009      	beq.n	8006226 <UART_SetConfig+0x162>
 8006212:	2b20      	cmp	r3, #32
 8006214:	d810      	bhi.n	8006238 <UART_SetConfig+0x174>
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <UART_SetConfig+0x15c>
 800621a:	2b10      	cmp	r3, #16
 800621c:	d006      	beq.n	800622c <UART_SetConfig+0x168>
 800621e:	e00b      	b.n	8006238 <UART_SetConfig+0x174>
 8006220:	2300      	movs	r3, #0
 8006222:	77fb      	strb	r3, [r7, #31]
 8006224:	e0f2      	b.n	800640c <UART_SetConfig+0x348>
 8006226:	2302      	movs	r3, #2
 8006228:	77fb      	strb	r3, [r7, #31]
 800622a:	e0ef      	b.n	800640c <UART_SetConfig+0x348>
 800622c:	2304      	movs	r3, #4
 800622e:	77fb      	strb	r3, [r7, #31]
 8006230:	e0ec      	b.n	800640c <UART_SetConfig+0x348>
 8006232:	2308      	movs	r3, #8
 8006234:	77fb      	strb	r3, [r7, #31]
 8006236:	e0e9      	b.n	800640c <UART_SetConfig+0x348>
 8006238:	2310      	movs	r3, #16
 800623a:	77fb      	strb	r3, [r7, #31]
 800623c:	e0e6      	b.n	800640c <UART_SetConfig+0x348>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a56      	ldr	r2, [pc, #344]	; (800639c <UART_SetConfig+0x2d8>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d120      	bne.n	800628a <UART_SetConfig+0x1c6>
 8006248:	4b51      	ldr	r3, [pc, #324]	; (8006390 <UART_SetConfig+0x2cc>)
 800624a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800624e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006252:	2bc0      	cmp	r3, #192	; 0xc0
 8006254:	d013      	beq.n	800627e <UART_SetConfig+0x1ba>
 8006256:	2bc0      	cmp	r3, #192	; 0xc0
 8006258:	d814      	bhi.n	8006284 <UART_SetConfig+0x1c0>
 800625a:	2b80      	cmp	r3, #128	; 0x80
 800625c:	d009      	beq.n	8006272 <UART_SetConfig+0x1ae>
 800625e:	2b80      	cmp	r3, #128	; 0x80
 8006260:	d810      	bhi.n	8006284 <UART_SetConfig+0x1c0>
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <UART_SetConfig+0x1a8>
 8006266:	2b40      	cmp	r3, #64	; 0x40
 8006268:	d006      	beq.n	8006278 <UART_SetConfig+0x1b4>
 800626a:	e00b      	b.n	8006284 <UART_SetConfig+0x1c0>
 800626c:	2300      	movs	r3, #0
 800626e:	77fb      	strb	r3, [r7, #31]
 8006270:	e0cc      	b.n	800640c <UART_SetConfig+0x348>
 8006272:	2302      	movs	r3, #2
 8006274:	77fb      	strb	r3, [r7, #31]
 8006276:	e0c9      	b.n	800640c <UART_SetConfig+0x348>
 8006278:	2304      	movs	r3, #4
 800627a:	77fb      	strb	r3, [r7, #31]
 800627c:	e0c6      	b.n	800640c <UART_SetConfig+0x348>
 800627e:	2308      	movs	r3, #8
 8006280:	77fb      	strb	r3, [r7, #31]
 8006282:	e0c3      	b.n	800640c <UART_SetConfig+0x348>
 8006284:	2310      	movs	r3, #16
 8006286:	77fb      	strb	r3, [r7, #31]
 8006288:	e0c0      	b.n	800640c <UART_SetConfig+0x348>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a44      	ldr	r2, [pc, #272]	; (80063a0 <UART_SetConfig+0x2dc>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d125      	bne.n	80062e0 <UART_SetConfig+0x21c>
 8006294:	4b3e      	ldr	r3, [pc, #248]	; (8006390 <UART_SetConfig+0x2cc>)
 8006296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800629a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800629e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062a2:	d017      	beq.n	80062d4 <UART_SetConfig+0x210>
 80062a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062a8:	d817      	bhi.n	80062da <UART_SetConfig+0x216>
 80062aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ae:	d00b      	beq.n	80062c8 <UART_SetConfig+0x204>
 80062b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062b4:	d811      	bhi.n	80062da <UART_SetConfig+0x216>
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <UART_SetConfig+0x1fe>
 80062ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062be:	d006      	beq.n	80062ce <UART_SetConfig+0x20a>
 80062c0:	e00b      	b.n	80062da <UART_SetConfig+0x216>
 80062c2:	2300      	movs	r3, #0
 80062c4:	77fb      	strb	r3, [r7, #31]
 80062c6:	e0a1      	b.n	800640c <UART_SetConfig+0x348>
 80062c8:	2302      	movs	r3, #2
 80062ca:	77fb      	strb	r3, [r7, #31]
 80062cc:	e09e      	b.n	800640c <UART_SetConfig+0x348>
 80062ce:	2304      	movs	r3, #4
 80062d0:	77fb      	strb	r3, [r7, #31]
 80062d2:	e09b      	b.n	800640c <UART_SetConfig+0x348>
 80062d4:	2308      	movs	r3, #8
 80062d6:	77fb      	strb	r3, [r7, #31]
 80062d8:	e098      	b.n	800640c <UART_SetConfig+0x348>
 80062da:	2310      	movs	r3, #16
 80062dc:	77fb      	strb	r3, [r7, #31]
 80062de:	e095      	b.n	800640c <UART_SetConfig+0x348>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a2f      	ldr	r2, [pc, #188]	; (80063a4 <UART_SetConfig+0x2e0>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d125      	bne.n	8006336 <UART_SetConfig+0x272>
 80062ea:	4b29      	ldr	r3, [pc, #164]	; (8006390 <UART_SetConfig+0x2cc>)
 80062ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80062f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062f8:	d017      	beq.n	800632a <UART_SetConfig+0x266>
 80062fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062fe:	d817      	bhi.n	8006330 <UART_SetConfig+0x26c>
 8006300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006304:	d00b      	beq.n	800631e <UART_SetConfig+0x25a>
 8006306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800630a:	d811      	bhi.n	8006330 <UART_SetConfig+0x26c>
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <UART_SetConfig+0x254>
 8006310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006314:	d006      	beq.n	8006324 <UART_SetConfig+0x260>
 8006316:	e00b      	b.n	8006330 <UART_SetConfig+0x26c>
 8006318:	2301      	movs	r3, #1
 800631a:	77fb      	strb	r3, [r7, #31]
 800631c:	e076      	b.n	800640c <UART_SetConfig+0x348>
 800631e:	2302      	movs	r3, #2
 8006320:	77fb      	strb	r3, [r7, #31]
 8006322:	e073      	b.n	800640c <UART_SetConfig+0x348>
 8006324:	2304      	movs	r3, #4
 8006326:	77fb      	strb	r3, [r7, #31]
 8006328:	e070      	b.n	800640c <UART_SetConfig+0x348>
 800632a:	2308      	movs	r3, #8
 800632c:	77fb      	strb	r3, [r7, #31]
 800632e:	e06d      	b.n	800640c <UART_SetConfig+0x348>
 8006330:	2310      	movs	r3, #16
 8006332:	77fb      	strb	r3, [r7, #31]
 8006334:	e06a      	b.n	800640c <UART_SetConfig+0x348>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a1b      	ldr	r2, [pc, #108]	; (80063a8 <UART_SetConfig+0x2e4>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d138      	bne.n	80063b2 <UART_SetConfig+0x2ee>
 8006340:	4b13      	ldr	r3, [pc, #76]	; (8006390 <UART_SetConfig+0x2cc>)
 8006342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006346:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800634a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800634e:	d017      	beq.n	8006380 <UART_SetConfig+0x2bc>
 8006350:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006354:	d82a      	bhi.n	80063ac <UART_SetConfig+0x2e8>
 8006356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800635a:	d00b      	beq.n	8006374 <UART_SetConfig+0x2b0>
 800635c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006360:	d824      	bhi.n	80063ac <UART_SetConfig+0x2e8>
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <UART_SetConfig+0x2aa>
 8006366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636a:	d006      	beq.n	800637a <UART_SetConfig+0x2b6>
 800636c:	e01e      	b.n	80063ac <UART_SetConfig+0x2e8>
 800636e:	2300      	movs	r3, #0
 8006370:	77fb      	strb	r3, [r7, #31]
 8006372:	e04b      	b.n	800640c <UART_SetConfig+0x348>
 8006374:	2302      	movs	r3, #2
 8006376:	77fb      	strb	r3, [r7, #31]
 8006378:	e048      	b.n	800640c <UART_SetConfig+0x348>
 800637a:	2304      	movs	r3, #4
 800637c:	77fb      	strb	r3, [r7, #31]
 800637e:	e045      	b.n	800640c <UART_SetConfig+0x348>
 8006380:	2308      	movs	r3, #8
 8006382:	77fb      	strb	r3, [r7, #31]
 8006384:	e042      	b.n	800640c <UART_SetConfig+0x348>
 8006386:	bf00      	nop
 8006388:	efff69f3 	.word	0xefff69f3
 800638c:	40011000 	.word	0x40011000
 8006390:	40023800 	.word	0x40023800
 8006394:	40004400 	.word	0x40004400
 8006398:	40004800 	.word	0x40004800
 800639c:	40004c00 	.word	0x40004c00
 80063a0:	40005000 	.word	0x40005000
 80063a4:	40011400 	.word	0x40011400
 80063a8:	40007800 	.word	0x40007800
 80063ac:	2310      	movs	r3, #16
 80063ae:	77fb      	strb	r3, [r7, #31]
 80063b0:	e02c      	b.n	800640c <UART_SetConfig+0x348>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a72      	ldr	r2, [pc, #456]	; (8006580 <UART_SetConfig+0x4bc>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d125      	bne.n	8006408 <UART_SetConfig+0x344>
 80063bc:	4b71      	ldr	r3, [pc, #452]	; (8006584 <UART_SetConfig+0x4c0>)
 80063be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80063c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80063ca:	d017      	beq.n	80063fc <UART_SetConfig+0x338>
 80063cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80063d0:	d817      	bhi.n	8006402 <UART_SetConfig+0x33e>
 80063d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063d6:	d00b      	beq.n	80063f0 <UART_SetConfig+0x32c>
 80063d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063dc:	d811      	bhi.n	8006402 <UART_SetConfig+0x33e>
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <UART_SetConfig+0x326>
 80063e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063e6:	d006      	beq.n	80063f6 <UART_SetConfig+0x332>
 80063e8:	e00b      	b.n	8006402 <UART_SetConfig+0x33e>
 80063ea:	2300      	movs	r3, #0
 80063ec:	77fb      	strb	r3, [r7, #31]
 80063ee:	e00d      	b.n	800640c <UART_SetConfig+0x348>
 80063f0:	2302      	movs	r3, #2
 80063f2:	77fb      	strb	r3, [r7, #31]
 80063f4:	e00a      	b.n	800640c <UART_SetConfig+0x348>
 80063f6:	2304      	movs	r3, #4
 80063f8:	77fb      	strb	r3, [r7, #31]
 80063fa:	e007      	b.n	800640c <UART_SetConfig+0x348>
 80063fc:	2308      	movs	r3, #8
 80063fe:	77fb      	strb	r3, [r7, #31]
 8006400:	e004      	b.n	800640c <UART_SetConfig+0x348>
 8006402:	2310      	movs	r3, #16
 8006404:	77fb      	strb	r3, [r7, #31]
 8006406:	e001      	b.n	800640c <UART_SetConfig+0x348>
 8006408:	2310      	movs	r3, #16
 800640a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006414:	d15b      	bne.n	80064ce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006416:	7ffb      	ldrb	r3, [r7, #31]
 8006418:	2b08      	cmp	r3, #8
 800641a:	d828      	bhi.n	800646e <UART_SetConfig+0x3aa>
 800641c:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <UART_SetConfig+0x360>)
 800641e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006422:	bf00      	nop
 8006424:	08006449 	.word	0x08006449
 8006428:	08006451 	.word	0x08006451
 800642c:	08006459 	.word	0x08006459
 8006430:	0800646f 	.word	0x0800646f
 8006434:	0800645f 	.word	0x0800645f
 8006438:	0800646f 	.word	0x0800646f
 800643c:	0800646f 	.word	0x0800646f
 8006440:	0800646f 	.word	0x0800646f
 8006444:	08006467 	.word	0x08006467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006448:	f7fe fdb6 	bl	8004fb8 <HAL_RCC_GetPCLK1Freq>
 800644c:	61b8      	str	r0, [r7, #24]
        break;
 800644e:	e013      	b.n	8006478 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006450:	f7fe fdc6 	bl	8004fe0 <HAL_RCC_GetPCLK2Freq>
 8006454:	61b8      	str	r0, [r7, #24]
        break;
 8006456:	e00f      	b.n	8006478 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006458:	4b4b      	ldr	r3, [pc, #300]	; (8006588 <UART_SetConfig+0x4c4>)
 800645a:	61bb      	str	r3, [r7, #24]
        break;
 800645c:	e00c      	b.n	8006478 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800645e:	f7fe fcd9 	bl	8004e14 <HAL_RCC_GetSysClockFreq>
 8006462:	61b8      	str	r0, [r7, #24]
        break;
 8006464:	e008      	b.n	8006478 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800646a:	61bb      	str	r3, [r7, #24]
        break;
 800646c:	e004      	b.n	8006478 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	77bb      	strb	r3, [r7, #30]
        break;
 8006476:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d074      	beq.n	8006568 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	005a      	lsls	r2, r3, #1
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	085b      	lsrs	r3, r3, #1
 8006488:	441a      	add	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006492:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	2b0f      	cmp	r3, #15
 8006498:	d916      	bls.n	80064c8 <UART_SetConfig+0x404>
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a0:	d212      	bcs.n	80064c8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	f023 030f 	bic.w	r3, r3, #15
 80064aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	085b      	lsrs	r3, r3, #1
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	f003 0307 	and.w	r3, r3, #7
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	89fb      	ldrh	r3, [r7, #14]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	89fa      	ldrh	r2, [r7, #14]
 80064c4:	60da      	str	r2, [r3, #12]
 80064c6:	e04f      	b.n	8006568 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	77bb      	strb	r3, [r7, #30]
 80064cc:	e04c      	b.n	8006568 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064ce:	7ffb      	ldrb	r3, [r7, #31]
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	d828      	bhi.n	8006526 <UART_SetConfig+0x462>
 80064d4:	a201      	add	r2, pc, #4	; (adr r2, 80064dc <UART_SetConfig+0x418>)
 80064d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064da:	bf00      	nop
 80064dc:	08006501 	.word	0x08006501
 80064e0:	08006509 	.word	0x08006509
 80064e4:	08006511 	.word	0x08006511
 80064e8:	08006527 	.word	0x08006527
 80064ec:	08006517 	.word	0x08006517
 80064f0:	08006527 	.word	0x08006527
 80064f4:	08006527 	.word	0x08006527
 80064f8:	08006527 	.word	0x08006527
 80064fc:	0800651f 	.word	0x0800651f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006500:	f7fe fd5a 	bl	8004fb8 <HAL_RCC_GetPCLK1Freq>
 8006504:	61b8      	str	r0, [r7, #24]
        break;
 8006506:	e013      	b.n	8006530 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006508:	f7fe fd6a 	bl	8004fe0 <HAL_RCC_GetPCLK2Freq>
 800650c:	61b8      	str	r0, [r7, #24]
        break;
 800650e:	e00f      	b.n	8006530 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006510:	4b1d      	ldr	r3, [pc, #116]	; (8006588 <UART_SetConfig+0x4c4>)
 8006512:	61bb      	str	r3, [r7, #24]
        break;
 8006514:	e00c      	b.n	8006530 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006516:	f7fe fc7d 	bl	8004e14 <HAL_RCC_GetSysClockFreq>
 800651a:	61b8      	str	r0, [r7, #24]
        break;
 800651c:	e008      	b.n	8006530 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800651e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006522:	61bb      	str	r3, [r7, #24]
        break;
 8006524:	e004      	b.n	8006530 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006526:	2300      	movs	r3, #0
 8006528:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	77bb      	strb	r3, [r7, #30]
        break;
 800652e:	bf00      	nop
    }

    if (pclk != 0U)
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d018      	beq.n	8006568 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	085a      	lsrs	r2, r3, #1
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	441a      	add	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	fbb2 f3f3 	udiv	r3, r2, r3
 8006548:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	2b0f      	cmp	r3, #15
 800654e:	d909      	bls.n	8006564 <UART_SetConfig+0x4a0>
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006556:	d205      	bcs.n	8006564 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	b29a      	uxth	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	60da      	str	r2, [r3, #12]
 8006562:	e001      	b.n	8006568 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006574:	7fbb      	ldrb	r3, [r7, #30]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3720      	adds	r7, #32
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	40007c00 	.word	0x40007c00
 8006584:	40023800 	.word	0x40023800
 8006588:	00f42400 	.word	0x00f42400

0800658c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00a      	beq.n	80065b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00a      	beq.n	80065d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065dc:	f003 0304 	and.w	r3, r3, #4
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00a      	beq.n	80065fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	f003 0308 	and.w	r3, r3, #8
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00a      	beq.n	800661c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	430a      	orrs	r2, r1
 800661a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	f003 0310 	and.w	r3, r3, #16
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00a      	beq.n	800663e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006642:	f003 0320 	and.w	r3, r3, #32
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00a      	beq.n	8006660 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006668:	2b00      	cmp	r3, #0
 800666a:	d01a      	beq.n	80066a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800668a:	d10a      	bne.n	80066a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00a      	beq.n	80066c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	430a      	orrs	r2, r1
 80066c2:	605a      	str	r2, [r3, #4]
  }
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af02      	add	r7, sp, #8
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066e0:	f7fc f9be 	bl	8002a60 <HAL_GetTick>
 80066e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0308 	and.w	r3, r3, #8
 80066f0:	2b08      	cmp	r3, #8
 80066f2:	d10e      	bne.n	8006712 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f831 	bl	800676a <UART_WaitOnFlagUntilTimeout>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e027      	b.n	8006762 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	2b04      	cmp	r3, #4
 800671e:	d10e      	bne.n	800673e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006720:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f81b 	bl	800676a <UART_WaitOnFlagUntilTimeout>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e011      	b.n	8006762 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2220      	movs	r2, #32
 8006742:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2220      	movs	r2, #32
 8006748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b09c      	sub	sp, #112	; 0x70
 800676e:	af00      	add	r7, sp, #0
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	60b9      	str	r1, [r7, #8]
 8006774:	603b      	str	r3, [r7, #0]
 8006776:	4613      	mov	r3, r2
 8006778:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800677a:	e0a7      	b.n	80068cc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800677c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800677e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006782:	f000 80a3 	beq.w	80068cc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006786:	f7fc f96b 	bl	8002a60 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006792:	429a      	cmp	r2, r3
 8006794:	d302      	bcc.n	800679c <UART_WaitOnFlagUntilTimeout+0x32>
 8006796:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006798:	2b00      	cmp	r3, #0
 800679a:	d13f      	bne.n	800681c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067a4:	e853 3f00 	ldrex	r3, [r3]
 80067a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067b0:	667b      	str	r3, [r7, #100]	; 0x64
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80067c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1e6      	bne.n	800679c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3308      	adds	r3, #8
 80067d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e0:	f023 0301 	bic.w	r3, r3, #1
 80067e4:	663b      	str	r3, [r7, #96]	; 0x60
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3308      	adds	r3, #8
 80067ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80067f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067f6:	e841 2300 	strex	r3, r2, [r1]
 80067fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80067fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1e5      	bne.n	80067ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2220      	movs	r2, #32
 8006806:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2220      	movs	r2, #32
 800680c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e068      	b.n	80068ee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0304 	and.w	r3, r3, #4
 8006826:	2b00      	cmp	r3, #0
 8006828:	d050      	beq.n	80068cc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	69db      	ldr	r3, [r3, #28]
 8006830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006838:	d148      	bne.n	80068cc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006842:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006854:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006858:	66fb      	str	r3, [r7, #108]	; 0x6c
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006862:	637b      	str	r3, [r7, #52]	; 0x34
 8006864:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006866:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006868:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e6      	bne.n	8006844 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3308      	adds	r3, #8
 800687c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	e853 3f00 	ldrex	r3, [r3]
 8006884:	613b      	str	r3, [r7, #16]
   return(result);
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f023 0301 	bic.w	r3, r3, #1
 800688c:	66bb      	str	r3, [r7, #104]	; 0x68
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3308      	adds	r3, #8
 8006894:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006896:	623a      	str	r2, [r7, #32]
 8006898:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689a:	69f9      	ldr	r1, [r7, #28]
 800689c:	6a3a      	ldr	r2, [r7, #32]
 800689e:	e841 2300 	strex	r3, r2, [r1]
 80068a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1e5      	bne.n	8006876 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2220      	movs	r2, #32
 80068ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2220      	movs	r2, #32
 80068b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2220      	movs	r2, #32
 80068bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e010      	b.n	80068ee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	69da      	ldr	r2, [r3, #28]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	4013      	ands	r3, r2
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	429a      	cmp	r2, r3
 80068da:	bf0c      	ite	eq
 80068dc:	2301      	moveq	r3, #1
 80068de:	2300      	movne	r3, #0
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	461a      	mov	r2, r3
 80068e4:	79fb      	ldrb	r3, [r7, #7]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	f43f af48 	beq.w	800677c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3770      	adds	r7, #112	; 0x70
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
	...

080068f8 <__libc_init_array>:
 80068f8:	b570      	push	{r4, r5, r6, lr}
 80068fa:	4d0d      	ldr	r5, [pc, #52]	; (8006930 <__libc_init_array+0x38>)
 80068fc:	4c0d      	ldr	r4, [pc, #52]	; (8006934 <__libc_init_array+0x3c>)
 80068fe:	1b64      	subs	r4, r4, r5
 8006900:	10a4      	asrs	r4, r4, #2
 8006902:	2600      	movs	r6, #0
 8006904:	42a6      	cmp	r6, r4
 8006906:	d109      	bne.n	800691c <__libc_init_array+0x24>
 8006908:	4d0b      	ldr	r5, [pc, #44]	; (8006938 <__libc_init_array+0x40>)
 800690a:	4c0c      	ldr	r4, [pc, #48]	; (800693c <__libc_init_array+0x44>)
 800690c:	f000 f864 	bl	80069d8 <_init>
 8006910:	1b64      	subs	r4, r4, r5
 8006912:	10a4      	asrs	r4, r4, #2
 8006914:	2600      	movs	r6, #0
 8006916:	42a6      	cmp	r6, r4
 8006918:	d105      	bne.n	8006926 <__libc_init_array+0x2e>
 800691a:	bd70      	pop	{r4, r5, r6, pc}
 800691c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006920:	4798      	blx	r3
 8006922:	3601      	adds	r6, #1
 8006924:	e7ee      	b.n	8006904 <__libc_init_array+0xc>
 8006926:	f855 3b04 	ldr.w	r3, [r5], #4
 800692a:	4798      	blx	r3
 800692c:	3601      	adds	r6, #1
 800692e:	e7f2      	b.n	8006916 <__libc_init_array+0x1e>
 8006930:	0800707c 	.word	0x0800707c
 8006934:	0800707c 	.word	0x0800707c
 8006938:	0800707c 	.word	0x0800707c
 800693c:	08007080 	.word	0x08007080

08006940 <memset>:
 8006940:	4402      	add	r2, r0
 8006942:	4603      	mov	r3, r0
 8006944:	4293      	cmp	r3, r2
 8006946:	d100      	bne.n	800694a <memset+0xa>
 8006948:	4770      	bx	lr
 800694a:	f803 1b01 	strb.w	r1, [r3], #1
 800694e:	e7f9      	b.n	8006944 <memset+0x4>

08006950 <__utoa>:
 8006950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006952:	4c1f      	ldr	r4, [pc, #124]	; (80069d0 <__utoa+0x80>)
 8006954:	b08b      	sub	sp, #44	; 0x2c
 8006956:	4605      	mov	r5, r0
 8006958:	460b      	mov	r3, r1
 800695a:	466e      	mov	r6, sp
 800695c:	f104 0c20 	add.w	ip, r4, #32
 8006960:	6820      	ldr	r0, [r4, #0]
 8006962:	6861      	ldr	r1, [r4, #4]
 8006964:	4637      	mov	r7, r6
 8006966:	c703      	stmia	r7!, {r0, r1}
 8006968:	3408      	adds	r4, #8
 800696a:	4564      	cmp	r4, ip
 800696c:	463e      	mov	r6, r7
 800696e:	d1f7      	bne.n	8006960 <__utoa+0x10>
 8006970:	7921      	ldrb	r1, [r4, #4]
 8006972:	7139      	strb	r1, [r7, #4]
 8006974:	1e91      	subs	r1, r2, #2
 8006976:	6820      	ldr	r0, [r4, #0]
 8006978:	6038      	str	r0, [r7, #0]
 800697a:	2922      	cmp	r1, #34	; 0x22
 800697c:	f04f 0100 	mov.w	r1, #0
 8006980:	d904      	bls.n	800698c <__utoa+0x3c>
 8006982:	7019      	strb	r1, [r3, #0]
 8006984:	460b      	mov	r3, r1
 8006986:	4618      	mov	r0, r3
 8006988:	b00b      	add	sp, #44	; 0x2c
 800698a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800698c:	1e58      	subs	r0, r3, #1
 800698e:	4684      	mov	ip, r0
 8006990:	fbb5 f7f2 	udiv	r7, r5, r2
 8006994:	fb02 5617 	mls	r6, r2, r7, r5
 8006998:	3628      	adds	r6, #40	; 0x28
 800699a:	446e      	add	r6, sp
 800699c:	460c      	mov	r4, r1
 800699e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80069a2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80069a6:	462e      	mov	r6, r5
 80069a8:	42b2      	cmp	r2, r6
 80069aa:	f101 0101 	add.w	r1, r1, #1
 80069ae:	463d      	mov	r5, r7
 80069b0:	d9ee      	bls.n	8006990 <__utoa+0x40>
 80069b2:	2200      	movs	r2, #0
 80069b4:	545a      	strb	r2, [r3, r1]
 80069b6:	1919      	adds	r1, r3, r4
 80069b8:	1aa5      	subs	r5, r4, r2
 80069ba:	42aa      	cmp	r2, r5
 80069bc:	dae3      	bge.n	8006986 <__utoa+0x36>
 80069be:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80069c2:	780e      	ldrb	r6, [r1, #0]
 80069c4:	7006      	strb	r6, [r0, #0]
 80069c6:	3201      	adds	r2, #1
 80069c8:	f801 5901 	strb.w	r5, [r1], #-1
 80069cc:	e7f4      	b.n	80069b8 <__utoa+0x68>
 80069ce:	bf00      	nop
 80069d0:	0800704c 	.word	0x0800704c

080069d4 <utoa>:
 80069d4:	f7ff bfbc 	b.w	8006950 <__utoa>

080069d8 <_init>:
 80069d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069da:	bf00      	nop
 80069dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069de:	bc08      	pop	{r3}
 80069e0:	469e      	mov	lr, r3
 80069e2:	4770      	bx	lr

080069e4 <_fini>:
 80069e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e6:	bf00      	nop
 80069e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ea:	bc08      	pop	{r3}
 80069ec:	469e      	mov	lr, r3
 80069ee:	4770      	bx	lr
