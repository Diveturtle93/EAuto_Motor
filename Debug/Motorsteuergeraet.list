
Motorsteuergeraet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006154  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  0800634c  0800634c  0001634c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006904  08006904  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006904  08006904  00016904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800690c  0800690c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800690c  0800690c  0001690c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006910  08006910  00016910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  2000000c  08006920  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08006920  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000198a4  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039d5  00000000  00000000  000398de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  0003d2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  0003e3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c85d  00000000  00000000  0003f370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017fc8  00000000  00000000  0006bbcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107e18  00000000  00000000  00083b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018b9ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004494  00000000  00000000  0018ba00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006334 	.word	0x08006334

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08006334 	.word	0x08006334

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <BAMOCAN_ID>:
//----------------------------------------------------------------------

// Ermittle Register nach Empfang Bamocar CAN-ID
//----------------------------------------------------------------------
void BAMOCAN_ID(uint8_t* data, uint8_t dlc)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	460b      	mov	r3, r1
 800054a:	70fb      	strb	r3, [r7, #3]
	uint8_t Reg = data[0];
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	733b      	strb	r3, [r7, #12]
	uint16_t speed = 0, strom;
 8000552:	2300      	movs	r3, #0
 8000554:	817b      	strh	r3, [r7, #10]

	// Waehlen welches Register gesendet wurde
	switch (Reg)
 8000556:	7b3b      	ldrb	r3, [r7, #12]
 8000558:	2bd8      	cmp	r3, #216	; 0xd8
 800055a:	f000 80be 	beq.w	80006da <BAMOCAN_ID+0x19a>
 800055e:	2bd8      	cmp	r3, #216	; 0xd8
 8000560:	f300 8100 	bgt.w	8000764 <BAMOCAN_ID+0x224>
 8000564:	2ba8      	cmp	r3, #168	; 0xa8
 8000566:	d012      	beq.n	800058e <BAMOCAN_ID+0x4e>
 8000568:	2ba8      	cmp	r3, #168	; 0xa8
 800056a:	f300 80fb 	bgt.w	8000764 <BAMOCAN_ID+0x224>
 800056e:	2b8f      	cmp	r3, #143	; 0x8f
 8000570:	d077      	beq.n	8000662 <BAMOCAN_ID+0x122>
 8000572:	2b8f      	cmp	r3, #143	; 0x8f
 8000574:	f300 80f6 	bgt.w	8000764 <BAMOCAN_ID+0x224>
 8000578:	2b5f      	cmp	r3, #95	; 0x5f
 800057a:	d025      	beq.n	80005c8 <BAMOCAN_ID+0x88>
 800057c:	2b5f      	cmp	r3, #95	; 0x5f
 800057e:	f300 80f1 	bgt.w	8000764 <BAMOCAN_ID+0x224>
 8000582:	2b1b      	cmp	r3, #27
 8000584:	f000 80d4 	beq.w	8000730 <BAMOCAN_ID+0x1f0>
 8000588:	2b40      	cmp	r3, #64	; 0x40
 800058a:	d037      	beq.n	80005fc <BAMOCAN_ID+0xbc>
 800058c:	e0ea      	b.n	8000764 <BAMOCAN_ID+0x224>
	{
		// Drehzahl vom Bamocar bekommen
		case BAMOCAR_REG_N_ACT_FILTER:
			speed = ((data[2]<<8) + data[1]);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	3302      	adds	r3, #2
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	b29b      	uxth	r3, r3
 8000596:	021b      	lsls	r3, r3, #8
 8000598:	b29a      	uxth	r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3301      	adds	r3, #1
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	4413      	add	r3, r2
 80005a4:	817b      	strh	r3, [r7, #10]
			motor1.Drehzahl = speed;
 80005a6:	4a74      	ldr	r2, [pc, #464]	; (8000778 <BAMOCAN_ID+0x238>)
 80005a8:	897b      	ldrh	r3, [r7, #10]
 80005aa:	8053      	strh	r3, [r2, #2]
// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Motordrehzahl\n", 14);
 80005ac:	210e      	movs	r1, #14
 80005ae:	4873      	ldr	r0, [pc, #460]	; (800077c <BAMOCAN_ID+0x23c>)
 80005b0:	f000 f900 	bl	80007b4 <uartTransmit>
			uartTransmitNumber(speed, 10);
 80005b4:	897b      	ldrh	r3, [r7, #10]
 80005b6:	210a      	movs	r1, #10
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f90f 	bl	80007dc <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005be:	2101      	movs	r1, #1
 80005c0:	486f      	ldr	r0, [pc, #444]	; (8000780 <BAMOCAN_ID+0x240>)
 80005c2:	f000 f8f7 	bl	80007b4 <uartTransmit>
#endif

			break;
 80005c6:	e0d2      	b.n	800076e <BAMOCAN_ID+0x22e>

		// Stromwert von Bamocar bekommen
		case BAMOCAR_REG_I_ACT_FILTER:
			strom = ((data[2]<<8) + data[1]);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3302      	adds	r3, #2
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	021b      	lsls	r3, r3, #8
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3301      	adds	r3, #1
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	4413      	add	r3, r2
 80005de:	813b      	strh	r3, [r7, #8]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Motorstrom\n", 11);
 80005e0:	210b      	movs	r1, #11
 80005e2:	4868      	ldr	r0, [pc, #416]	; (8000784 <BAMOCAN_ID+0x244>)
 80005e4:	f000 f8e6 	bl	80007b4 <uartTransmit>
			uartTransmitNumber(strom, 10);
 80005e8:	893b      	ldrh	r3, [r7, #8]
 80005ea:	210a      	movs	r1, #10
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f8f5 	bl	80007dc <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005f2:	2101      	movs	r1, #1
 80005f4:	4862      	ldr	r0, [pc, #392]	; (8000780 <BAMOCAN_ID+0x240>)
 80005f6:	f000 f8dd 	bl	80007b4 <uartTransmit>
#endif

			break;
 80005fa:	e0b8      	b.n	800076e <BAMOCAN_ID+0x22e>

		// Statusregister von Bamocar bekommen
		case BAMOCAR_REG_STATUS:
			bamocar_stat.status1 = ((data[4] << 24) + (data[3] << 16) + (data[2] << 8) + data[1]);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3304      	adds	r3, #4
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	061a      	lsls	r2, r3, #24
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3303      	adds	r3, #3
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	041b      	lsls	r3, r3, #16
 800060c:	441a      	add	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	3302      	adds	r3, #2
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	021b      	lsls	r3, r3, #8
 8000616:	4413      	add	r3, r2
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	3201      	adds	r2, #1
 800061c:	7812      	ldrb	r2, [r2, #0]
 800061e:	4413      	add	r3, r2
 8000620:	461a      	mov	r2, r3
 8000622:	4b59      	ldr	r3, [pc, #356]	; (8000788 <BAMOCAN_ID+0x248>)
 8000624:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Status\n", 15);
 8000626:	210f      	movs	r1, #15
 8000628:	4858      	ldr	r0, [pc, #352]	; (800078c <BAMOCAN_ID+0x24c>)
 800062a:	f000 f8c3 	bl	80007b4 <uartTransmit>
			for (uint8_t i = 4; i > 0; i--)
 800062e:	2304      	movs	r3, #4
 8000630:	73fb      	strb	r3, [r7, #15]
 8000632:	e00e      	b.n	8000652 <BAMOCAN_ID+0x112>
			{
				uartTransmitNumber(bamocar_stat.status[i-1], 16);
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	3b01      	subs	r3, #1
 8000638:	4a53      	ldr	r2, [pc, #332]	; (8000788 <BAMOCAN_ID+0x248>)
 800063a:	5cd3      	ldrb	r3, [r2, r3]
 800063c:	2110      	movs	r1, #16
 800063e:	4618      	mov	r0, r3
 8000640:	f000 f8cc 	bl	80007dc <uartTransmitNumber>
				uartTransmit(" ", 1);
 8000644:	2101      	movs	r1, #1
 8000646:	4852      	ldr	r0, [pc, #328]	; (8000790 <BAMOCAN_ID+0x250>)
 8000648:	f000 f8b4 	bl	80007b4 <uartTransmit>
			for (uint8_t i = 4; i > 0; i--)
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	3b01      	subs	r3, #1
 8000650:	73fb      	strb	r3, [r7, #15]
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1ed      	bne.n	8000634 <BAMOCAN_ID+0xf4>
			}
			uartTransmit("\n", 1);
 8000658:	2101      	movs	r1, #1
 800065a:	4849      	ldr	r0, [pc, #292]	; (8000780 <BAMOCAN_ID+0x240>)
 800065c:	f000 f8aa 	bl	80007b4 <uartTransmit>
#endif

			break;
 8000660:	e085      	b.n	800076e <BAMOCAN_ID+0x22e>

		// Errorregister von Bamocar bekommen
		case BAMOCAR_REG_ERROR:
			bamocar_error.error1 = ((data[2] << 8) + data[1]);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	3302      	adds	r3, #2
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b29b      	uxth	r3, r3
 800066a:	021b      	lsls	r3, r3, #8
 800066c:	b29a      	uxth	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3301      	adds	r3, #1
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b29b      	uxth	r3, r3
 8000676:	4413      	add	r3, r2
 8000678:	b29a      	uxth	r2, r3
 800067a:	4b46      	ldr	r3, [pc, #280]	; (8000794 <BAMOCAN_ID+0x254>)
 800067c:	801a      	strh	r2, [r3, #0]
			bamocar_warnung.warnung1 = ((data[4] << 8) + data[3]);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	3304      	adds	r3, #4
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b29b      	uxth	r3, r3
 8000686:	021b      	lsls	r3, r3, #8
 8000688:	b29a      	uxth	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3303      	adds	r3, #3
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	b29b      	uxth	r3, r3
 8000692:	4413      	add	r3, r2
 8000694:	b29a      	uxth	r2, r3
 8000696:	4b40      	ldr	r3, [pc, #256]	; (8000798 <BAMOCAN_ID+0x258>)
 8000698:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Error\n", 14);
 800069a:	210e      	movs	r1, #14
 800069c:	483f      	ldr	r0, [pc, #252]	; (800079c <BAMOCAN_ID+0x25c>)
 800069e:	f000 f889 	bl	80007b4 <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006a2:	2300      	movs	r3, #0
 80006a4:	73bb      	strb	r3, [r7, #14]
 80006a6:	e010      	b.n	80006ca <BAMOCAN_ID+0x18a>
			{
				uartTransmitNumber(data[1+i], 16);
 80006a8:	7bbb      	ldrb	r3, [r7, #14]
 80006aa:	3301      	adds	r3, #1
 80006ac:	461a      	mov	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2110      	movs	r1, #16
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 f890 	bl	80007dc <uartTransmitNumber>
				uartTransmit(" ", 1);
 80006bc:	2101      	movs	r1, #1
 80006be:	4834      	ldr	r0, [pc, #208]	; (8000790 <BAMOCAN_ID+0x250>)
 80006c0:	f000 f878 	bl	80007b4 <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006c4:	7bbb      	ldrb	r3, [r7, #14]
 80006c6:	3301      	adds	r3, #1
 80006c8:	73bb      	strb	r3, [r7, #14]
 80006ca:	7bbb      	ldrb	r3, [r7, #14]
 80006cc:	2b03      	cmp	r3, #3
 80006ce:	d9eb      	bls.n	80006a8 <BAMOCAN_ID+0x168>
			}
			uartTransmit("\n", 1);
 80006d0:	2101      	movs	r1, #1
 80006d2:	482b      	ldr	r0, [pc, #172]	; (8000780 <BAMOCAN_ID+0x240>)
 80006d4:	f000 f86e 	bl	80007b4 <uartTransmit>
#endif

			break;
 80006d8:	e049      	b.n	800076e <BAMOCAN_ID+0x22e>

		// Status IO Register von Bamocar bekommen
		case BAMOCAR_REG_STATUS_IO:
			bamocar_statIO.status1 = ((data[2] << 8) + data[1]);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3302      	adds	r3, #2
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	021b      	lsls	r3, r3, #8
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3301      	adds	r3, #1
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	4413      	add	r3, r2
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	4b2b      	ldr	r3, [pc, #172]	; (80007a0 <BAMOCAN_ID+0x260>)
 80006f4:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar IO Status\n", 18);
 80006f6:	2112      	movs	r1, #18
 80006f8:	482a      	ldr	r0, [pc, #168]	; (80007a4 <BAMOCAN_ID+0x264>)
 80006fa:	f000 f85b 	bl	80007b4 <uartTransmit>
			for (uint8_t i = 0; i < 2; i++)
 80006fe:	2300      	movs	r3, #0
 8000700:	737b      	strb	r3, [r7, #13]
 8000702:	e00d      	b.n	8000720 <BAMOCAN_ID+0x1e0>
			{
				uartTransmitNumber(bamocar_statIO.status[i], 16);
 8000704:	7b7b      	ldrb	r3, [r7, #13]
 8000706:	4a26      	ldr	r2, [pc, #152]	; (80007a0 <BAMOCAN_ID+0x260>)
 8000708:	5cd3      	ldrb	r3, [r2, r3]
 800070a:	2110      	movs	r1, #16
 800070c:	4618      	mov	r0, r3
 800070e:	f000 f865 	bl	80007dc <uartTransmitNumber>
				uartTransmit(" ", 1);
 8000712:	2101      	movs	r1, #1
 8000714:	481e      	ldr	r0, [pc, #120]	; (8000790 <BAMOCAN_ID+0x250>)
 8000716:	f000 f84d 	bl	80007b4 <uartTransmit>
			for (uint8_t i = 0; i < 2; i++)
 800071a:	7b7b      	ldrb	r3, [r7, #13]
 800071c:	3301      	adds	r3, #1
 800071e:	737b      	strb	r3, [r7, #13]
 8000720:	7b7b      	ldrb	r3, [r7, #13]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d9ee      	bls.n	8000704 <BAMOCAN_ID+0x1c4>
			}
			uartTransmit("\n", 1);
 8000726:	2101      	movs	r1, #1
 8000728:	4815      	ldr	r0, [pc, #84]	; (8000780 <BAMOCAN_ID+0x240>)
 800072a:	f000 f843 	bl	80007b4 <uartTransmit>
#endif

			break;
 800072e:	e01e      	b.n	800076e <BAMOCAN_ID+0x22e>

		// Firmware von Bamocar ausgelesen
		case BAMOCAR_REG_FIRMWARE:
			bamocar_data.data = ((data[2]<<8) + data[1]);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3302      	adds	r3, #2
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	021b      	lsls	r3, r3, #8
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	3201      	adds	r2, #1
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	4413      	add	r3, r2
 8000740:	461a      	mov	r2, r3
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <BAMOCAN_ID+0x268>)
 8000744:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Firmware\n", 9);
 8000746:	2109      	movs	r1, #9
 8000748:	4818      	ldr	r0, [pc, #96]	; (80007ac <BAMOCAN_ID+0x26c>)
 800074a:	f000 f833 	bl	80007b4 <uartTransmit>
			uartTransmitNumber(bamocar_data.data, 16);
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <BAMOCAN_ID+0x268>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2110      	movs	r1, #16
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f841 	bl	80007dc <uartTransmitNumber>
			uartTransmit("\n", 1);
 800075a:	2101      	movs	r1, #1
 800075c:	4808      	ldr	r0, [pc, #32]	; (8000780 <BAMOCAN_ID+0x240>)
 800075e:	f000 f829 	bl	80007b4 <uartTransmit>
#endif

			break;
 8000762:	e004      	b.n	800076e <BAMOCAN_ID+0x22e>

		// Register fuer Bamocar nicht definiert, Fehler
		default:
			uartTransmit("Bamocar Register nicht definiert\n", 33);
 8000764:	2121      	movs	r1, #33	; 0x21
 8000766:	4812      	ldr	r0, [pc, #72]	; (80007b0 <BAMOCAN_ID+0x270>)
 8000768:	f000 f824 	bl	80007b4 <uartTransmit>
			break;
 800076c:	bf00      	nop
	}
}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000044 	.word	0x20000044
 800077c:	0800634c 	.word	0x0800634c
 8000780:	0800635c 	.word	0x0800635c
 8000784:	08006360 	.word	0x08006360
 8000788:	2000004c 	.word	0x2000004c
 800078c:	0800636c 	.word	0x0800636c
 8000790:	0800637c 	.word	0x0800637c
 8000794:	2000003c 	.word	0x2000003c
 8000798:	20000038 	.word	0x20000038
 800079c:	08006380 	.word	0x08006380
 80007a0:	20000034 	.word	0x20000034
 80007a4:	08006390 	.word	0x08006390
 80007a8:	20000040 	.word	0x20000040
 80007ac:	080063a4 	.word	0x080063a4
 80007b0:	080063b0 	.word	0x080063b0

080007b4 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <uartTransmit+0x24>)
 80007ca:	f005 f8e5 	bl	8005998 <HAL_UART_Transmit>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000174 	.word	0x20000174

080007dc <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4619      	mov	r1, r3
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f005 fd9e 	bl	8006330 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fd1d 	bl	8000238 <strlen>
 80007fe:	4603      	mov	r3, r0
 8000800:	b29a      	uxth	r2, r3
 8000802:	f107 010c 	add.w	r1, r7, #12
 8000806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080a:	4803      	ldr	r0, [pc, #12]	; (8000818 <uartTransmitNumber+0x3c>)
 800080c:	f005 f8c4 	bl	8005998 <HAL_UART_Transmit>
}
 8000810:	bf00      	nop
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000174 	.word	0x20000174

0800081c <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 8000822:	2113      	movs	r1, #19
 8000824:	483b      	ldr	r0, [pc, #236]	; (8000914 <collectHardwareInfo+0xf8>)
 8000826:	f7ff ffc5 	bl	80007b4 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 800082a:	f001 fe5f 	bl	80024ec <HAL_GetDEVID>
 800082e:	4603      	mov	r3, r0
 8000830:	210a      	movs	r1, #10
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff ffd2 	bl	80007dc <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8000838:	2115      	movs	r1, #21
 800083a:	4837      	ldr	r0, [pc, #220]	; (8000918 <collectHardwareInfo+0xfc>)
 800083c:	f7ff ffba 	bl	80007b4 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 8000840:	f001 fe48 	bl	80024d4 <HAL_GetREVID>
 8000844:	4603      	mov	r3, r0
 8000846:	f242 0201 	movw	r2, #8193	; 0x2001
 800084a:	4293      	cmp	r3, r2
 800084c:	d016      	beq.n	800087c <collectHardwareInfo+0x60>
 800084e:	f242 0201 	movw	r2, #8193	; 0x2001
 8000852:	4293      	cmp	r3, r2
 8000854:	d817      	bhi.n	8000886 <collectHardwareInfo+0x6a>
 8000856:	f241 0201 	movw	r2, #4097	; 0x1001
 800085a:	4293      	cmp	r3, r2
 800085c:	d004      	beq.n	8000868 <collectHardwareInfo+0x4c>
 800085e:	f241 0203 	movw	r2, #4099	; 0x1003
 8000862:	4293      	cmp	r3, r2
 8000864:	d005      	beq.n	8000872 <collectHardwareInfo+0x56>
 8000866:	e00e      	b.n	8000886 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8000868:	2101      	movs	r1, #1
 800086a:	482c      	ldr	r0, [pc, #176]	; (800091c <collectHardwareInfo+0x100>)
 800086c:	f7ff ffa2 	bl	80007b4 <uartTransmit>
			break;
 8000870:	e011      	b.n	8000896 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 8000872:	2101      	movs	r1, #1
 8000874:	482a      	ldr	r0, [pc, #168]	; (8000920 <collectHardwareInfo+0x104>)
 8000876:	f7ff ff9d 	bl	80007b4 <uartTransmit>
			break;
 800087a:	e00c      	b.n	8000896 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 800087c:	2101      	movs	r1, #1
 800087e:	4829      	ldr	r0, [pc, #164]	; (8000924 <collectHardwareInfo+0x108>)
 8000880:	f7ff ff98 	bl	80007b4 <uartTransmit>
			break;
 8000884:	e007      	b.n	8000896 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 8000886:	f001 fe25 	bl	80024d4 <HAL_GetREVID>
 800088a:	4603      	mov	r3, r0
 800088c:	210a      	movs	r1, #10
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ffa4 	bl	80007dc <uartTransmitNumber>
			break;
 8000894:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 8000896:	2113      	movs	r1, #19
 8000898:	4823      	ldr	r0, [pc, #140]	; (8000928 <collectHardwareInfo+0x10c>)
 800089a:	f7ff ff8b 	bl	80007b4 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 800089e:	f003 ffb7 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 80008a2:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a21      	ldr	r2, [pc, #132]	; (800092c <collectHardwareInfo+0x110>)
 80008a8:	fba2 2303 	umull	r2, r3, r2, r3
 80008ac:	0c9b      	lsrs	r3, r3, #18
 80008ae:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 80008b0:	210a      	movs	r1, #10
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f7ff ff92 	bl	80007dc <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80008b8:	2104      	movs	r1, #4
 80008ba:	481d      	ldr	r0, [pc, #116]	; (8000930 <collectHardwareInfo+0x114>)
 80008bc:	f7ff ff7a 	bl	80007b4 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80008c0:	210f      	movs	r1, #15
 80008c2:	481c      	ldr	r0, [pc, #112]	; (8000934 <collectHardwareInfo+0x118>)
 80008c4:	f7ff ff76 	bl	80007b4 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 80008c8:	f001 fe1e 	bl	8002508 <HAL_GetUIDw0>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2110      	movs	r1, #16
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff83 	bl	80007dc <uartTransmitNumber>

	uartTransmit(" ", 1);
 80008d6:	2101      	movs	r1, #1
 80008d8:	4817      	ldr	r0, [pc, #92]	; (8000938 <collectHardwareInfo+0x11c>)
 80008da:	f7ff ff6b 	bl	80007b4 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 80008de:	f001 fe1f 	bl	8002520 <HAL_GetUIDw1>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2110      	movs	r1, #16
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff ff78 	bl	80007dc <uartTransmitNumber>

	uartTransmit(" ", 1);
 80008ec:	2101      	movs	r1, #1
 80008ee:	4812      	ldr	r0, [pc, #72]	; (8000938 <collectHardwareInfo+0x11c>)
 80008f0:	f7ff ff60 	bl	80007b4 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 80008f4:	f001 fe20 	bl	8002538 <HAL_GetUIDw2>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2110      	movs	r1, #16
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ff6d 	bl	80007dc <uartTransmitNumber>

	uartTransmit("\n", 1);
 8000902:	2101      	movs	r1, #1
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <collectHardwareInfo+0x120>)
 8000906:	f7ff ff55 	bl	80007b4 <uartTransmit>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	0800642c 	.word	0x0800642c
 8000918:	08006440 	.word	0x08006440
 800091c:	08006458 	.word	0x08006458
 8000920:	0800645c 	.word	0x0800645c
 8000924:	08006460 	.word	0x08006460
 8000928:	08006464 	.word	0x08006464
 800092c:	431bde83 	.word	0x431bde83
 8000930:	08006478 	.word	0x08006478
 8000934:	08006480 	.word	0x08006480
 8000938:	08006490 	.word	0x08006490
 800093c:	08006494 	.word	0x08006494

08000940 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 8000944:	210f      	movs	r1, #15
 8000946:	4826      	ldr	r0, [pc, #152]	; (80009e0 <collectSoftwareInfo+0xa0>)
 8000948:	f7ff ff34 	bl	80007b4 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 800094c:	2108      	movs	r1, #8
 800094e:	4825      	ldr	r0, [pc, #148]	; (80009e4 <collectSoftwareInfo+0xa4>)
 8000950:	f7ff ff30 	bl	80007b4 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000954:	210f      	movs	r1, #15
 8000956:	4824      	ldr	r0, [pc, #144]	; (80009e8 <collectSoftwareInfo+0xa8>)
 8000958:	f7ff ff2c 	bl	80007b4 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 800095c:	2104      	movs	r1, #4
 800095e:	4823      	ldr	r0, [pc, #140]	; (80009ec <collectSoftwareInfo+0xac>)
 8000960:	f7ff ff28 	bl	80007b4 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000964:	210d      	movs	r1, #13
 8000966:	4822      	ldr	r0, [pc, #136]	; (80009f0 <collectSoftwareInfo+0xb0>)
 8000968:	f7ff ff24 	bl	80007b4 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 800096c:	2129      	movs	r1, #41	; 0x29
 800096e:	4821      	ldr	r0, [pc, #132]	; (80009f4 <collectSoftwareInfo+0xb4>)
 8000970:	f7ff ff20 	bl	80007b4 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000974:	2101      	movs	r1, #1
 8000976:	4820      	ldr	r0, [pc, #128]	; (80009f8 <collectSoftwareInfo+0xb8>)
 8000978:	f7ff ff1c 	bl	80007b4 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 800097c:	2115      	movs	r1, #21
 800097e:	481f      	ldr	r0, [pc, #124]	; (80009fc <collectSoftwareInfo+0xbc>)
 8000980:	f7ff ff18 	bl	80007b4 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 8000984:	2105      	movs	r1, #5
 8000986:	481e      	ldr	r0, [pc, #120]	; (8000a00 <collectSoftwareInfo+0xc0>)
 8000988:	f7ff ff14 	bl	80007b4 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 800098c:	2114      	movs	r1, #20
 800098e:	481d      	ldr	r0, [pc, #116]	; (8000a04 <collectSoftwareInfo+0xc4>)
 8000990:	f7ff ff10 	bl	80007b4 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 8000994:	2108      	movs	r1, #8
 8000996:	481c      	ldr	r0, [pc, #112]	; (8000a08 <collectSoftwareInfo+0xc8>)
 8000998:	f7ff ff0c 	bl	80007b4 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 800099c:	2115      	movs	r1, #21
 800099e:	481b      	ldr	r0, [pc, #108]	; (8000a0c <collectSoftwareInfo+0xcc>)
 80009a0:	f7ff ff08 	bl	80007b4 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 80009a4:	2111      	movs	r1, #17
 80009a6:	481a      	ldr	r0, [pc, #104]	; (8000a10 <collectSoftwareInfo+0xd0>)
 80009a8:	f7ff ff04 	bl	80007b4 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80009ac:	2101      	movs	r1, #1
 80009ae:	4812      	ldr	r0, [pc, #72]	; (80009f8 <collectSoftwareInfo+0xb8>)
 80009b0:	f7ff ff00 	bl	80007b4 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80009b4:	210f      	movs	r1, #15
 80009b6:	4817      	ldr	r0, [pc, #92]	; (8000a14 <collectSoftwareInfo+0xd4>)
 80009b8:	f7ff fefc 	bl	80007b4 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 80009bc:	210b      	movs	r1, #11
 80009be:	4816      	ldr	r0, [pc, #88]	; (8000a18 <collectSoftwareInfo+0xd8>)
 80009c0:	f7ff fef8 	bl	80007b4 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80009c4:	210f      	movs	r1, #15
 80009c6:	4815      	ldr	r0, [pc, #84]	; (8000a1c <collectSoftwareInfo+0xdc>)
 80009c8:	f7ff fef4 	bl	80007b4 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 80009cc:	2109      	movs	r1, #9
 80009ce:	4814      	ldr	r0, [pc, #80]	; (8000a20 <collectSoftwareInfo+0xe0>)
 80009d0:	f7ff fef0 	bl	80007b4 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80009d4:	2101      	movs	r1, #1
 80009d6:	4808      	ldr	r0, [pc, #32]	; (80009f8 <collectSoftwareInfo+0xb8>)
 80009d8:	f7ff feec 	bl	80007b4 <uartTransmit>
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	08006498 	.word	0x08006498
 80009e4:	080064a8 	.word	0x080064a8
 80009e8:	080064b0 	.word	0x080064b0
 80009ec:	080064c0 	.word	0x080064c0
 80009f0:	080064c4 	.word	0x080064c4
 80009f4:	080064d4 	.word	0x080064d4
 80009f8:	08006494 	.word	0x08006494
 80009fc:	08006500 	.word	0x08006500
 8000a00:	08006518 	.word	0x08006518
 8000a04:	08006520 	.word	0x08006520
 8000a08:	08006534 	.word	0x08006534
 8000a0c:	0800653c 	.word	0x0800653c
 8000a10:	08006554 	.word	0x08006554
 8000a14:	08006568 	.word	0x08006568
 8000a18:	08006578 	.word	0x08006578
 8000a1c:	08006584 	.word	0x08006584
 8000a20:	08006594 	.word	0x08006594

08000a24 <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8000a28:	2112      	movs	r1, #18
 8000a2a:	4824      	ldr	r0, [pc, #144]	; (8000abc <collectMiddlewareInfo+0x98>)
 8000a2c:	f7ff fec2 	bl	80007b4 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8000a30:	210a      	movs	r1, #10
 8000a32:	2005      	movs	r0, #5
 8000a34:	f7ff fed2 	bl	80007dc <uartTransmitNumber>
	uartTransmit(".", 1);
 8000a38:	2101      	movs	r1, #1
 8000a3a:	4821      	ldr	r0, [pc, #132]	; (8000ac0 <collectMiddlewareInfo+0x9c>)
 8000a3c:	f7ff feba 	bl	80007b4 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8000a40:	210a      	movs	r1, #10
 8000a42:	2001      	movs	r0, #1
 8000a44:	f7ff feca 	bl	80007dc <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8000a48:	2110      	movs	r1, #16
 8000a4a:	481e      	ldr	r0, [pc, #120]	; (8000ac4 <collectMiddlewareInfo+0xa0>)
 8000a4c:	f7ff feb2 	bl	80007b4 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8000a50:	f001 fd36 	bl	80024c0 <HAL_GetHalVersion>
 8000a54:	4603      	mov	r3, r0
 8000a56:	0e1b      	lsrs	r3, r3, #24
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	210a      	movs	r1, #10
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff febd 	bl	80007dc <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000a62:	2101      	movs	r1, #1
 8000a64:	4816      	ldr	r0, [pc, #88]	; (8000ac0 <collectMiddlewareInfo+0x9c>)
 8000a66:	f7ff fea5 	bl	80007b4 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000a6a:	f001 fd29 	bl	80024c0 <HAL_GetHalVersion>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	0c1b      	lsrs	r3, r3, #16
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	210a      	movs	r1, #10
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff feb0 	bl	80007dc <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	4810      	ldr	r0, [pc, #64]	; (8000ac0 <collectMiddlewareInfo+0x9c>)
 8000a80:	f7ff fe98 	bl	80007b4 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000a84:	f001 fd1c 	bl	80024c0 <HAL_GetHalVersion>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	0a1b      	lsrs	r3, r3, #8
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	210a      	movs	r1, #10
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fea3 	bl	80007dc <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000a96:	2101      	movs	r1, #1
 8000a98:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <collectMiddlewareInfo+0x9c>)
 8000a9a:	f7ff fe8b 	bl	80007b4 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000a9e:	f001 fd0f 	bl	80024c0 <HAL_GetHalVersion>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	210a      	movs	r1, #10
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fe97 	bl	80007dc <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 8000aae:	2101      	movs	r1, #1
 8000ab0:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <collectMiddlewareInfo+0xa4>)
 8000ab2:	f7ff fe7f 	bl	80007b4 <uartTransmit>
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	080065a0 	.word	0x080065a0
 8000ac0:	080065b4 	.word	0x080065b4
 8000ac4:	080065b8 	.word	0x080065b8
 8000ac8:	08006494 	.word	0x08006494

08000acc <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 8000ad0:	2114      	movs	r1, #20
 8000ad2:	4814      	ldr	r0, [pc, #80]	; (8000b24 <collectGitcounts+0x58>)
 8000ad4:	f7ff fe6e 	bl	80007b4 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8000ad8:	2103      	movs	r1, #3
 8000ada:	4813      	ldr	r0, [pc, #76]	; (8000b28 <collectGitcounts+0x5c>)
 8000adc:	f7ff fe6a 	bl	80007b4 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 8000ae0:	2116      	movs	r1, #22
 8000ae2:	4812      	ldr	r0, [pc, #72]	; (8000b2c <collectGitcounts+0x60>)
 8000ae4:	f7ff fe66 	bl	80007b4 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8000ae8:	2103      	movs	r1, #3
 8000aea:	4811      	ldr	r0, [pc, #68]	; (8000b30 <collectGitcounts+0x64>)
 8000aec:	f7ff fe62 	bl	80007b4 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 8000af0:	211c      	movs	r1, #28
 8000af2:	4810      	ldr	r0, [pc, #64]	; (8000b34 <collectGitcounts+0x68>)
 8000af4:	f7ff fe5e 	bl	80007b4 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8000af8:	2103      	movs	r1, #3
 8000afa:	480f      	ldr	r0, [pc, #60]	; (8000b38 <collectGitcounts+0x6c>)
 8000afc:	f7ff fe5a 	bl	80007b4 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000b00:	2115      	movs	r1, #21
 8000b02:	480e      	ldr	r0, [pc, #56]	; (8000b3c <collectGitcounts+0x70>)
 8000b04:	f7ff fe56 	bl	80007b4 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8000b08:	2102      	movs	r1, #2
 8000b0a:	480d      	ldr	r0, [pc, #52]	; (8000b40 <collectGitcounts+0x74>)
 8000b0c:	f7ff fe52 	bl	80007b4 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000b10:	2114      	movs	r1, #20
 8000b12:	480c      	ldr	r0, [pc, #48]	; (8000b44 <collectGitcounts+0x78>)
 8000b14:	f7ff fe4e 	bl	80007b4 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 8000b18:	2102      	movs	r1, #2
 8000b1a:	480b      	ldr	r0, [pc, #44]	; (8000b48 <collectGitcounts+0x7c>)
 8000b1c:	f7ff fe4a 	bl	80007b4 <uartTransmit>
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	080065c8 	.word	0x080065c8
 8000b28:	080065dc 	.word	0x080065dc
 8000b2c:	080065e0 	.word	0x080065e0
 8000b30:	080065f8 	.word	0x080065f8
 8000b34:	080065fc 	.word	0x080065fc
 8000b38:	08006618 	.word	0x08006618
 8000b3c:	08006500 	.word	0x08006500
 8000b40:	0800661c 	.word	0x0800661c
 8000b44:	08006520 	.word	0x08006520
 8000b48:	08006620 	.word	0x08006620

08000b4c <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000b50:	2111      	movs	r1, #17
 8000b52:	480e      	ldr	r0, [pc, #56]	; (8000b8c <collectSystemInfo+0x40>)
 8000b54:	f7ff fe2e 	bl	80007b4 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000b58:	f7ff fe60 	bl	800081c <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000b5c:	2111      	movs	r1, #17
 8000b5e:	480c      	ldr	r0, [pc, #48]	; (8000b90 <collectSystemInfo+0x44>)
 8000b60:	f7ff fe28 	bl	80007b4 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8000b64:	f7ff feec 	bl	8000940 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000b68:	2113      	movs	r1, #19
 8000b6a:	480a      	ldr	r0, [pc, #40]	; (8000b94 <collectSystemInfo+0x48>)
 8000b6c:	f7ff fe22 	bl	80007b4 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000b70:	f7ff ff58 	bl	8000a24 <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8000b74:	2113      	movs	r1, #19
 8000b76:	4808      	ldr	r0, [pc, #32]	; (8000b98 <collectSystemInfo+0x4c>)
 8000b78:	f7ff fe1c 	bl	80007b4 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8000b7c:	f7ff ffa6 	bl	8000acc <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 8000b80:	2103      	movs	r1, #3
 8000b82:	4806      	ldr	r0, [pc, #24]	; (8000b9c <collectSystemInfo+0x50>)
 8000b84:	f7ff fe16 	bl	80007b4 <uartTransmit>
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	08006624 	.word	0x08006624
 8000b90:	08006638 	.word	0x08006638
 8000b94:	0800664c 	.word	0x0800664c
 8000b98:	08006660 	.word	0x08006660
 8000b9c:	08006674 	.word	0x08006674

08000ba0 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000baa:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <readResetSource+0xa0>)
 8000bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d002      	beq.n	8000bbc <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000bbc:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <readResetSource+0xa0>)
 8000bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d002      	beq.n	8000bce <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	3302      	adds	r3, #2
 8000bcc:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8000bce:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <readResetSource+0xa0>)
 8000bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	da02      	bge.n	8000bdc <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <readResetSource+0xa0>)
 8000bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d002      	beq.n	8000bee <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	3308      	adds	r3, #8
 8000bec:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <readResetSource+0xa0>)
 8000bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d002      	beq.n	8000c00 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	3310      	adds	r3, #16
 8000bfe:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <readResetSource+0xa0>)
 8000c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d002      	beq.n	8000c12 <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	3320      	adds	r3, #32
 8000c10:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <readResetSource+0xa0>)
 8000c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d002      	beq.n	8000c24 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	3340      	adds	r3, #64	; 0x40
 8000c22:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <readResetSource+0xa0>)
 8000c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c28:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <readResetSource+0xa0>)
 8000c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c2e:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8000c30:	79fb      	ldrb	r3, [r7, #7]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800

08000c44 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8000c4e:	2106      	movs	r1, #6
 8000c50:	482a      	ldr	r0, [pc, #168]	; (8000cfc <printResetSource+0xb8>)
 8000c52:	f7ff fdaf 	bl	80007b4 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d104      	bne.n	8000c66 <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8000c5c:	210f      	movs	r1, #15
 8000c5e:	4828      	ldr	r0, [pc, #160]	; (8000d00 <printResetSource+0xbc>)
 8000c60:	f7ff fda8 	bl	80007b4 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8000c64:	e046      	b.n	8000cf4 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d003      	beq.n	8000c78 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000c70:	2118      	movs	r1, #24
 8000c72:	4824      	ldr	r0, [pc, #144]	; (8000d04 <printResetSource+0xc0>)
 8000c74:	f7ff fd9e 	bl	80007b4 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d003      	beq.n	8000c8a <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000c82:	2116      	movs	r1, #22
 8000c84:	4820      	ldr	r0, [pc, #128]	; (8000d08 <printResetSource+0xc4>)
 8000c86:	f7ff fd95 	bl	80007b4 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d003      	beq.n	8000c9c <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8000c94:	210a      	movs	r1, #10
 8000c96:	481d      	ldr	r0, [pc, #116]	; (8000d0c <printResetSource+0xc8>)
 8000c98:	f7ff fd8c 	bl	80007b4 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	f003 0308 	and.w	r3, r3, #8
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8000ca6:	2110      	movs	r1, #16
 8000ca8:	4819      	ldr	r0, [pc, #100]	; (8000d10 <printResetSource+0xcc>)
 8000caa:	f7ff fd83 	bl	80007b4 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	f003 0310 	and.w	r3, r3, #16
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000cb8:	210f      	movs	r1, #15
 8000cba:	4816      	ldr	r0, [pc, #88]	; (8000d14 <printResetSource+0xd0>)
 8000cbc:	f7ff fd7a 	bl	80007b4 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 0320 	and.w	r3, r3, #32
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d003      	beq.n	8000cd2 <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000cca:	210f      	movs	r1, #15
 8000ccc:	4812      	ldr	r0, [pc, #72]	; (8000d18 <printResetSource+0xd4>)
 8000cce:	f7ff fd71 	bl	80007b4 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d003      	beq.n	8000ce4 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000cdc:	210a      	movs	r1, #10
 8000cde:	480f      	ldr	r0, [pc, #60]	; (8000d1c <printResetSource+0xd8>)
 8000ce0:	f7ff fd68 	bl	80007b4 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	da03      	bge.n	8000cf4 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000cec:	2105      	movs	r1, #5
 8000cee:	480c      	ldr	r0, [pc, #48]	; (8000d20 <printResetSource+0xdc>)
 8000cf0:	f7ff fd60 	bl	80007b4 <uartTransmit>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	08006678 	.word	0x08006678
 8000d00:	08006680 	.word	0x08006680
 8000d04:	08006690 	.word	0x08006690
 8000d08:	080066ac 	.word	0x080066ac
 8000d0c:	080066c4 	.word	0x080066c4
 8000d10:	080066d0 	.word	0x080066d0
 8000d14:	080066e4 	.word	0x080066e4
 8000d18:	080066f4 	.word	0x080066f4
 8000d1c:	08006704 	.word	0x08006704
 8000d20:	08006710 	.word	0x08006710

08000d24 <ADC_Gaspedal>:
//----------------------------------------------------------------------

// Gaspedal einlesen
//----------------------------------------------------------------------
uint16_t ADC_Gaspedal(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_6;
 8000d3a:	2306      	movs	r3, #6
 8000d3c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000d42:	2301      	movs	r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480e      	ldr	r0, [pc, #56]	; (8000d84 <ADC_Gaspedal+0x60>)
 8000d4c:	f001 fdde 	bl	800290c <HAL_ADC_ConfigChannel>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <ADC_Gaspedal+0x36>
	{
		Error_Handler();
 8000d56:	f001 f993 	bl	8002080 <Error_Handler>
	}

	// ADC Starten und Wert einlesen
	HAL_ADC_Start(&hadc1);
 8000d5a:	480a      	ldr	r0, [pc, #40]	; (8000d84 <ADC_Gaspedal+0x60>)
 8000d5c:	f001 fc3c 	bl	80025d8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000d60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d64:	4807      	ldr	r0, [pc, #28]	; (8000d84 <ADC_Gaspedal+0x60>)
 8000d66:	f001 fd39 	bl	80027dc <HAL_ADC_PollForConversion>
	ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000d6a:	4806      	ldr	r0, [pc, #24]	; (8000d84 <ADC_Gaspedal+0x60>)
 8000d6c:	f001 fdc1 	bl	80028f2 <HAL_ADC_GetValue>
 8000d70:	4603      	mov	r3, r0
 8000d72:	82fb      	strh	r3, [r7, #22]
	HAL_ADC_Stop(&hadc1);
 8000d74:	4803      	ldr	r0, [pc, #12]	; (8000d84 <ADC_Gaspedal+0x60>)
 8000d76:	f001 fcfd 	bl	8002774 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000d7a:	8afb      	ldrh	r3, [r7, #22]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	2000006c 	.word	0x2000006c

08000d88 <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (status == HAL_OK) {													// HAL OK
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d104      	bne.n	8000da2 <hal_error+0x1a>
		uartTransmit("HAL OK\n", 7);
 8000d98:	2107      	movs	r1, #7
 8000d9a:	480f      	ldr	r0, [pc, #60]	; (8000dd8 <hal_error+0x50>)
 8000d9c:	f7ff fd0a 	bl	80007b4 <uartTransmit>
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 8000da0:	e016      	b.n	8000dd0 <hal_error+0x48>
	else if (status == HAL_ERROR) {											// HAL Error
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d104      	bne.n	8000db2 <hal_error+0x2a>
		uartTransmit("HAL ERROR\n", 10);
 8000da8:	210a      	movs	r1, #10
 8000daa:	480c      	ldr	r0, [pc, #48]	; (8000ddc <hal_error+0x54>)
 8000dac:	f7ff fd02 	bl	80007b4 <uartTransmit>
}
 8000db0:	e00e      	b.n	8000dd0 <hal_error+0x48>
	else if (status == HAL_BUSY) {											// HAL Beschaeftigt
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d104      	bne.n	8000dc2 <hal_error+0x3a>
		uartTransmit("HAL BUSY\n", 9);
 8000db8:	2109      	movs	r1, #9
 8000dba:	4809      	ldr	r0, [pc, #36]	; (8000de0 <hal_error+0x58>)
 8000dbc:	f7ff fcfa 	bl	80007b4 <uartTransmit>
}
 8000dc0:	e006      	b.n	8000dd0 <hal_error+0x48>
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d103      	bne.n	8000dd0 <hal_error+0x48>
		uartTransmit("HAL TIMEOUT\n", 12);
 8000dc8:	210c      	movs	r1, #12
 8000dca:	4806      	ldr	r0, [pc, #24]	; (8000de4 <hal_error+0x5c>)
 8000dcc:	f7ff fcf2 	bl	80007b4 <uartTransmit>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	08006718 	.word	0x08006718
 8000ddc:	08006720 	.word	0x08006720
 8000de0:	0800672c 	.word	0x0800672c
 8000de4:	08006738 	.word	0x08006738

08000de8 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.Kickdown = HAL_GPIO_ReadPin(KICKDOWN_GPIO_Port, KICKDOWN_Pin);					// Eingang Gaspedal getreten
 8000dec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df0:	48ce      	ldr	r0, [pc, #824]	; (800112c <readall_inputs+0x344>)
 8000df2:	f003 f8f1 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8000df6:	4603      	mov	r3, r0
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	b2d9      	uxtb	r1, r3
 8000dfe:	4acc      	ldr	r2, [pc, #816]	; (8001130 <readall_inputs+0x348>)
 8000e00:	7813      	ldrb	r3, [r2, #0]
 8000e02:	f361 0300 	bfi	r3, r1, #0, #1
 8000e06:	7013      	strb	r3, [r2, #0]
	system_in.Leerlauf = HAL_GPIO_ReadPin(LEERLAUF_GPIO_Port, LEERLAUF_Pin);					// Eingang Gaspedal nicht getreten
 8000e08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e0c:	48c7      	ldr	r0, [pc, #796]	; (800112c <readall_inputs+0x344>)
 8000e0e:	f003 f8e3 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8000e12:	4603      	mov	r3, r0
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	b2d9      	uxtb	r1, r3
 8000e1a:	4ac5      	ldr	r2, [pc, #788]	; (8001130 <readall_inputs+0x348>)
 8000e1c:	7813      	ldrb	r3, [r2, #0]
 8000e1e:	f361 0341 	bfi	r3, r1, #1, #1
 8000e22:	7013      	strb	r3, [r2, #0]
	system_in.BremseNO = HAL_GPIO_ReadPin(BREMSE_NO_GPIO_Port, BREMSE_NO_Pin);					// Eingang Bremse nicht getreten
 8000e24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e28:	48c0      	ldr	r0, [pc, #768]	; (800112c <readall_inputs+0x344>)
 8000e2a:	f003 f8d5 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	b2d9      	uxtb	r1, r3
 8000e36:	4abe      	ldr	r2, [pc, #760]	; (8001130 <readall_inputs+0x348>)
 8000e38:	7813      	ldrb	r3, [r2, #0]
 8000e3a:	f361 0382 	bfi	r3, r1, #2, #1
 8000e3e:	7013      	strb	r3, [r2, #0]
	system_in.BremseNC = HAL_GPIO_ReadPin(BREMSE_NC_GPIO_Port, BREMSE_NC_Pin);					// Eingang Bremse getreten
 8000e40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e44:	48b9      	ldr	r0, [pc, #740]	; (800112c <readall_inputs+0x344>)
 8000e46:	f003 f8c7 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	b2d9      	uxtb	r1, r3
 8000e52:	4ab7      	ldr	r2, [pc, #732]	; (8001130 <readall_inputs+0x348>)
 8000e54:	7813      	ldrb	r3, [r2, #0]
 8000e56:	f361 03c3 	bfi	r3, r1, #3, #1
 8000e5a:	7013      	strb	r3, [r2, #0]
	system_in.Kupplung = HAL_GPIO_ReadPin(KUPPLUNG_NO_GPIO_Port, KUPPLUNG_NO_Pin);				// Eingang Kupplung nicht getreten
 8000e5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e60:	48b2      	ldr	r0, [pc, #712]	; (800112c <readall_inputs+0x344>)
 8000e62:	f003 f8b9 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8000e66:	4603      	mov	r3, r0
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	b2d9      	uxtb	r1, r3
 8000e6e:	4ab0      	ldr	r2, [pc, #704]	; (8001130 <readall_inputs+0x348>)
 8000e70:	7813      	ldrb	r3, [r2, #0]
 8000e72:	f361 1304 	bfi	r3, r1, #4, #1
 8000e76:	7013      	strb	r3, [r2, #0]
	system_in.Recuperation = HAL_GPIO_ReadPin(RECUPERATION_GPIO_Port, RECUPERATION_Pin);		// Eingang Recuperation
 8000e78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e7c:	48ad      	ldr	r0, [pc, #692]	; (8001134 <readall_inputs+0x34c>)
 8000e7e:	f003 f8ab 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8000e82:	4603      	mov	r3, r0
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	b2d9      	uxtb	r1, r3
 8000e8a:	4aa9      	ldr	r2, [pc, #676]	; (8001130 <readall_inputs+0x348>)
 8000e8c:	7813      	ldrb	r3, [r2, #0]
 8000e8e:	f361 1345 	bfi	r3, r1, #5, #1
 8000e92:	7013      	strb	r3, [r2, #0]
	system_in.ECON = HAL_GPIO_ReadPin(ECON_GPIO_Port, ECON_Pin);								// Eingang Klima
 8000e94:	2102      	movs	r1, #2
 8000e96:	48a7      	ldr	r0, [pc, #668]	; (8001134 <readall_inputs+0x34c>)
 8000e98:	f003 f89e 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	b2d9      	uxtb	r1, r3
 8000ea4:	4aa2      	ldr	r2, [pc, #648]	; (8001130 <readall_inputs+0x348>)
 8000ea6:	7813      	ldrb	r3, [r2, #0]
 8000ea8:	f361 1386 	bfi	r3, r1, #6, #1
 8000eac:	7013      	strb	r3, [r2, #0]
	system_in.Anlasser = HAL_GPIO_ReadPin(ANLASSER_GPIO_Port, ANLASSER_Pin);					// Eingang Zuendschloss, Motor starten
 8000eae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eb2:	48a1      	ldr	r0, [pc, #644]	; (8001138 <readall_inputs+0x350>)
 8000eb4:	f003 f890 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	b2d9      	uxtb	r1, r3
 8000ec0:	4a9b      	ldr	r2, [pc, #620]	; (8001130 <readall_inputs+0x348>)
 8000ec2:	7813      	ldrb	r3, [r2, #0]
 8000ec4:	f361 13c7 	bfi	r3, r1, #7, #1
 8000ec8:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8000eca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ece:	489b      	ldr	r0, [pc, #620]	; (800113c <readall_inputs+0x354>)
 8000ed0:	f003 f882 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	b2d9      	uxtb	r1, r3
 8000edc:	4a94      	ldr	r2, [pc, #592]	; (8001130 <readall_inputs+0x348>)
 8000ede:	7853      	ldrb	r3, [r2, #1]
 8000ee0:	f361 0300 	bfi	r3, r1, #0, #1
 8000ee4:	7053      	strb	r3, [r2, #1]
	system_in.DCDC_Inst = HAL_GPIO_ReadPin(DCDC_INSTRUCTION_GPIO_Port, DCDC_INSTRUCTION_Pin);	// DCDC Wandler funktioniert einwandfrei
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	4895      	ldr	r0, [pc, #596]	; (8001140 <readall_inputs+0x358>)
 8000eea:	f003 f875 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	b2d9      	uxtb	r1, r3
 8000ef6:	4a8e      	ldr	r2, [pc, #568]	; (8001130 <readall_inputs+0x348>)
 8000ef8:	7853      	ldrb	r3, [r2, #1]
 8000efa:	f361 0341 	bfi	r3, r1, #1, #1
 8000efe:	7053      	strb	r3, [r2, #1]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8000f00:	2101      	movs	r1, #1
 8000f02:	488c      	ldr	r0, [pc, #560]	; (8001134 <readall_inputs+0x34c>)
 8000f04:	f003 f868 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	b2d9      	uxtb	r1, r3
 8000f10:	4a87      	ldr	r2, [pc, #540]	; (8001130 <readall_inputs+0x348>)
 8000f12:	7853      	ldrb	r3, [r2, #1]
 8000f14:	f361 0382 	bfi	r3, r1, #2, #1
 8000f18:	7053      	strb	r3, [r2, #1]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8000f1a:	2140      	movs	r1, #64	; 0x40
 8000f1c:	4883      	ldr	r0, [pc, #524]	; (800112c <readall_inputs+0x344>)
 8000f1e:	f003 f85b 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8000f22:	4603      	mov	r3, r0
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	b2d9      	uxtb	r1, r3
 8000f2a:	4a81      	ldr	r2, [pc, #516]	; (8001130 <readall_inputs+0x348>)
 8000f2c:	7853      	ldrb	r3, [r2, #1]
 8000f2e:	f361 03c3 	bfi	r3, r1, #3, #1
 8000f32:	7053      	strb	r3, [r2, #1]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8000f34:	2101      	movs	r1, #1
 8000f36:	4883      	ldr	r0, [pc, #524]	; (8001144 <readall_inputs+0x35c>)
 8000f38:	f003 f84e 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	b2d9      	uxtb	r1, r3
 8000f44:	4a7a      	ldr	r2, [pc, #488]	; (8001130 <readall_inputs+0x348>)
 8000f46:	7853      	ldrb	r3, [r2, #1]
 8000f48:	f361 1304 	bfi	r3, r1, #4, #1
 8000f4c:	7053      	strb	r3, [r2, #1]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8000f4e:	2104      	movs	r1, #4
 8000f50:	487c      	ldr	r0, [pc, #496]	; (8001144 <readall_inputs+0x35c>)
 8000f52:	f003 f841 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8000f56:	4603      	mov	r3, r0
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	b2d9      	uxtb	r1, r3
 8000f5e:	4a74      	ldr	r2, [pc, #464]	; (8001130 <readall_inputs+0x348>)
 8000f60:	7853      	ldrb	r3, [r2, #1]
 8000f62:	f361 1345 	bfi	r3, r1, #5, #1
 8000f66:	7053      	strb	r3, [r2, #1]
//	system_in.Bremsdruck_NO = HAL_GPIO_ReadPin(Bremsdruck_NO_GPIO_Port, Bremsdruck_NO_Pin);		// Bremsdruck nicht zu hoch
//	system_in.Bremsdruck_NC = HAL_GPIO_ReadPin(Bremsdruck_NC_GPIO_Port, Bremsdruck_NC_Pin);		// Bremsdruck zu hoch

	// SDC-Eingaenge einlesen
	sdc_in.EmergencyRun = HAL_GPIO_ReadPin(EMERGENCY_RUN_GPIO_Port, EMERGENCY_RUN_Pin);			// Emergency Run, Akku
 8000f68:	2102      	movs	r1, #2
 8000f6a:	4876      	ldr	r0, [pc, #472]	; (8001144 <readall_inputs+0x35c>)
 8000f6c:	f003 f834 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8000f70:	4603      	mov	r3, r0
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	b2d9      	uxtb	r1, r3
 8000f78:	4a73      	ldr	r2, [pc, #460]	; (8001148 <readall_inputs+0x360>)
 8000f7a:	7813      	ldrb	r3, [r2, #0]
 8000f7c:	f361 0300 	bfi	r3, r1, #0, #1
 8000f80:	7013      	strb	r3, [r2, #0]
	sdc_in.SDC0 = HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin);						// Shutdown-Circuit, OK
 8000f82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f86:	4869      	ldr	r0, [pc, #420]	; (800112c <readall_inputs+0x344>)
 8000f88:	f003 f826 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	b2d9      	uxtb	r1, r3
 8000f94:	4a6c      	ldr	r2, [pc, #432]	; (8001148 <readall_inputs+0x360>)
 8000f96:	7813      	ldrb	r3, [r2, #0]
 8000f98:	f361 0341 	bfi	r3, r1, #1, #1
 8000f9c:	7013      	strb	r3, [r2, #0]
	sdc_in.AkkuSDC = HAL_GPIO_ReadPin(SENSE_SDC_AKKU_GPIO_Port, SENSE_SDC_AKKU_Pin);			// Shutdown-Circuit Akku, OK
 8000f9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa2:	4862      	ldr	r0, [pc, #392]	; (800112c <readall_inputs+0x344>)
 8000fa4:	f003 f818 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	b2d9      	uxtb	r1, r3
 8000fb0:	4a65      	ldr	r2, [pc, #404]	; (8001148 <readall_inputs+0x360>)
 8000fb2:	7813      	ldrb	r3, [r2, #0]
 8000fb4:	f361 0382 	bfi	r3, r1, #2, #1
 8000fb8:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8000fba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fbe:	485e      	ldr	r0, [pc, #376]	; (8001138 <readall_inputs+0x350>)
 8000fc0:	f003 f80a 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	b2d9      	uxtb	r1, r3
 8000fcc:	4a5e      	ldr	r2, [pc, #376]	; (8001148 <readall_inputs+0x360>)
 8000fce:	7813      	ldrb	r3, [r2, #0]
 8000fd0:	f361 03c3 	bfi	r3, r1, #3, #1
 8000fd4:	7013      	strb	r3, [r2, #0]
	sdc_in.DCDC_Fault = HAL_GPIO_ReadPin(DCDC_FAULT_GPIO_Port, DCDC_FAULT_Pin);					// DCDC Wandler funktioniert nicht richtig
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	4859      	ldr	r0, [pc, #356]	; (8001140 <readall_inputs+0x358>)
 8000fda:	f002 fffd 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	b2d9      	uxtb	r1, r3
 8000fe6:	4a58      	ldr	r2, [pc, #352]	; (8001148 <readall_inputs+0x360>)
 8000fe8:	7813      	ldrb	r3, [r2, #0]
 8000fea:	f361 1304 	bfi	r3, r1, #4, #1
 8000fee:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.ASR1 = HAL_GPIO_ReadPin(ASR_IN1_GPIO_Port, ASR_IN1_Pin);							// ASR Eingang Mittelkonsole
 8000ff0:	2110      	movs	r1, #16
 8000ff2:	4853      	ldr	r0, [pc, #332]	; (8001140 <readall_inputs+0x358>)
 8000ff4:	f002 fff0 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	b2d9      	uxtb	r1, r3
 8001000:	4a52      	ldr	r2, [pc, #328]	; (800114c <readall_inputs+0x364>)
 8001002:	7813      	ldrb	r3, [r2, #0]
 8001004:	f361 0300 	bfi	r3, r1, #0, #1
 8001008:	7013      	strb	r3, [r2, #0]
	komfort_in.ASR2 = HAL_GPIO_ReadPin(ASR_IN2_GPIO_Port, ASR_IN2_Pin);							// ASR Eingang Mittelkonsole
 800100a:	2110      	movs	r1, #16
 800100c:	484b      	ldr	r0, [pc, #300]	; (800113c <readall_inputs+0x354>)
 800100e:	f002 ffe3 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8001012:	4603      	mov	r3, r0
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	b2d9      	uxtb	r1, r3
 800101a:	4a4c      	ldr	r2, [pc, #304]	; (800114c <readall_inputs+0x364>)
 800101c:	7813      	ldrb	r3, [r2, #0]
 800101e:	f361 0341 	bfi	r3, r1, #1, #1
 8001022:	7013      	strb	r3, [r2, #0]
	komfort_in.ECO = HAL_GPIO_ReadPin(ECO_GPIO_Port, ECO_Pin);									// ECO Eingang Mittelkonsole
 8001024:	2108      	movs	r1, #8
 8001026:	4841      	ldr	r0, [pc, #260]	; (800112c <readall_inputs+0x344>)
 8001028:	f002 ffd6 	bl	8003fd8 <HAL_GPIO_ReadPin>
 800102c:	4603      	mov	r3, r0
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	b2d9      	uxtb	r1, r3
 8001034:	4a45      	ldr	r2, [pc, #276]	; (800114c <readall_inputs+0x364>)
 8001036:	7813      	ldrb	r3, [r2, #0]
 8001038:	f361 0382 	bfi	r3, r1, #2, #1
 800103c:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Rst_In = HAL_GPIO_ReadPin(BC_RESET_IN_GPIO_Port, BC_RESET_IN_Pin);			// Boardcomputer Reset Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 800103e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001042:	483f      	ldr	r0, [pc, #252]	; (8001140 <readall_inputs+0x358>)
 8001044:	f002 ffc8 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8001048:	4603      	mov	r3, r0
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	b2d9      	uxtb	r1, r3
 8001050:	4a3e      	ldr	r2, [pc, #248]	; (800114c <readall_inputs+0x364>)
 8001052:	7813      	ldrb	r3, [r2, #0]
 8001054:	f361 03c3 	bfi	r3, r1, #3, #1
 8001058:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Up_In = HAL_GPIO_ReadPin(BC_UP_IN_GPIO_Port, BC_UP_IN_Pin);					// Boardcomputer Rauf Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 800105a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800105e:	4839      	ldr	r0, [pc, #228]	; (8001144 <readall_inputs+0x35c>)
 8001060:	f002 ffba 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8001064:	4603      	mov	r3, r0
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	b2d9      	uxtb	r1, r3
 800106c:	4a37      	ldr	r2, [pc, #220]	; (800114c <readall_inputs+0x364>)
 800106e:	7813      	ldrb	r3, [r2, #0]
 8001070:	f361 1304 	bfi	r3, r1, #4, #1
 8001074:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Down_In = HAL_GPIO_ReadPin(BC_DOWN_IN_GPIO_Port, BC_DOWN_IN_Pin);				// Boardcomputer Runter Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8001076:	2110      	movs	r1, #16
 8001078:	482c      	ldr	r0, [pc, #176]	; (800112c <readall_inputs+0x344>)
 800107a:	f002 ffad 	bl	8003fd8 <HAL_GPIO_ReadPin>
 800107e:	4603      	mov	r3, r0
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	b2d9      	uxtb	r1, r3
 8001086:	4a31      	ldr	r2, [pc, #196]	; (800114c <readall_inputs+0x364>)
 8001088:	7813      	ldrb	r3, [r2, #0]
 800108a:	f361 1345 	bfi	r3, r1, #5, #1
 800108e:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn1 = HAL_GPIO_ReadPin(BAMOCAR_IN1_GPIO_Port, BAMOCAR_IN1_Pin);				// Eingang Bamocar 1
 8001090:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001094:	4829      	ldr	r0, [pc, #164]	; (800113c <readall_inputs+0x354>)
 8001096:	f002 ff9f 	bl	8003fd8 <HAL_GPIO_ReadPin>
 800109a:	4603      	mov	r3, r0
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	b2d9      	uxtb	r1, r3
 80010a2:	4a2a      	ldr	r2, [pc, #168]	; (800114c <readall_inputs+0x364>)
 80010a4:	7813      	ldrb	r3, [r2, #0]
 80010a6:	f361 1386 	bfi	r3, r1, #6, #1
 80010aa:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn2 = HAL_GPIO_ReadPin(BAMOCAR_IN2_GPIO_Port, BAMOCAR_IN2_Pin);				// Eingang Bamocar 2
 80010ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010b0:	4822      	ldr	r0, [pc, #136]	; (800113c <readall_inputs+0x354>)
 80010b2:	f002 ff91 	bl	8003fd8 <HAL_GPIO_ReadPin>
 80010b6:	4603      	mov	r3, r0
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	b2d9      	uxtb	r1, r3
 80010be:	4a23      	ldr	r2, [pc, #140]	; (800114c <readall_inputs+0x364>)
 80010c0:	7813      	ldrb	r3, [r2, #0]
 80010c2:	f361 13c7 	bfi	r3, r1, #7, #1
 80010c6:	7013      	strb	r3, [r2, #0]
	komfort_in.Enter = HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin);							// Encoder Taster Enter Eingang Mittelconsole
 80010c8:	2180      	movs	r1, #128	; 0x80
 80010ca:	4821      	ldr	r0, [pc, #132]	; (8001150 <readall_inputs+0x368>)
 80010cc:	f002 ff84 	bl	8003fd8 <HAL_GPIO_ReadPin>
 80010d0:	4603      	mov	r3, r0
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	b2d9      	uxtb	r1, r3
 80010d8:	4a1c      	ldr	r2, [pc, #112]	; (800114c <readall_inputs+0x364>)
 80010da:	7853      	ldrb	r3, [r2, #1]
 80010dc:	f361 0300 	bfi	r3, r1, #0, #1
 80010e0:	7053      	strb	r3, [r2, #1]
	komfort_in.OutA = HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTA_Pin);								// Encoder OUTA Eingang Mittelconsole
 80010e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e6:	4817      	ldr	r0, [pc, #92]	; (8001144 <readall_inputs+0x35c>)
 80010e8:	f002 ff76 	bl	8003fd8 <HAL_GPIO_ReadPin>
 80010ec:	4603      	mov	r3, r0
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	b2d9      	uxtb	r1, r3
 80010f4:	4a15      	ldr	r2, [pc, #84]	; (800114c <readall_inputs+0x364>)
 80010f6:	7853      	ldrb	r3, [r2, #1]
 80010f8:	f361 0341 	bfi	r3, r1, #1, #1
 80010fc:	7053      	strb	r3, [r2, #1]
	komfort_in.OutB = HAL_GPIO_ReadPin(OUTB_GPIO_Port, OUTB_Pin);								// Encoder OUTB Eingang Mittelconsole
 80010fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001102:	4810      	ldr	r0, [pc, #64]	; (8001144 <readall_inputs+0x35c>)
 8001104:	f002 ff68 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8001108:	4603      	mov	r3, r0
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	b2d9      	uxtb	r1, r3
 8001110:	4a0e      	ldr	r2, [pc, #56]	; (800114c <readall_inputs+0x364>)
 8001112:	7853      	ldrb	r3, [r2, #1]
 8001114:	f361 0382 	bfi	r3, r1, #2, #1
 8001118:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA1 = HAL_GPIO_ReadPin(GRA1_GPIO_Port, GRA1_Pin);								// Tempomat 1 Eingang
 800111a:	2120      	movs	r1, #32
 800111c:	4808      	ldr	r0, [pc, #32]	; (8001140 <readall_inputs+0x358>)
 800111e:	f002 ff5b 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8001122:	4603      	mov	r3, r0
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	b2d9      	uxtb	r1, r3
 800112a:	e013      	b.n	8001154 <readall_inputs+0x36c>
 800112c:	40021000 	.word	0x40021000
 8001130:	20000060 	.word	0x20000060
 8001134:	40021400 	.word	0x40021400
 8001138:	40020400 	.word	0x40020400
 800113c:	40020c00 	.word	0x40020c00
 8001140:	40021800 	.word	0x40021800
 8001144:	40020000 	.word	0x40020000
 8001148:	20000068 	.word	0x20000068
 800114c:	20000064 	.word	0x20000064
 8001150:	40020800 	.word	0x40020800
 8001154:	4a1d      	ldr	r2, [pc, #116]	; (80011cc <readall_inputs+0x3e4>)
 8001156:	7853      	ldrb	r3, [r2, #1]
 8001158:	f361 03c3 	bfi	r3, r1, #3, #1
 800115c:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA2 = HAL_GPIO_ReadPin(GRA2_GPIO_Port, GRA2_Pin);								// Tempomat 2 Eingang
 800115e:	2140      	movs	r1, #64	; 0x40
 8001160:	481b      	ldr	r0, [pc, #108]	; (80011d0 <readall_inputs+0x3e8>)
 8001162:	f002 ff39 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8001166:	4603      	mov	r3, r0
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	b2d9      	uxtb	r1, r3
 800116e:	4a17      	ldr	r2, [pc, #92]	; (80011cc <readall_inputs+0x3e4>)
 8001170:	7853      	ldrb	r3, [r2, #1]
 8001172:	f361 1304 	bfi	r3, r1, #4, #1
 8001176:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA3 = HAL_GPIO_ReadPin(GRA3_GPIO_Port, GRA3_Pin);								// Tempomat 3 Eingang
 8001178:	2180      	movs	r1, #128	; 0x80
 800117a:	4815      	ldr	r0, [pc, #84]	; (80011d0 <readall_inputs+0x3e8>)
 800117c:	f002 ff2c 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8001180:	4603      	mov	r3, r0
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	b2d9      	uxtb	r1, r3
 8001188:	4a10      	ldr	r2, [pc, #64]	; (80011cc <readall_inputs+0x3e4>)
 800118a:	7853      	ldrb	r3, [r2, #1]
 800118c:	f361 1345 	bfi	r3, r1, #5, #1
 8001190:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA4 = HAL_GPIO_ReadPin(GRA4_GPIO_Port, GRA4_Pin);								// Tempomat 4 Eingang
 8001192:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001196:	480e      	ldr	r0, [pc, #56]	; (80011d0 <readall_inputs+0x3e8>)
 8001198:	f002 ff1e 	bl	8003fd8 <HAL_GPIO_ReadPin>
 800119c:	4603      	mov	r3, r0
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	b2d9      	uxtb	r1, r3
 80011a4:	4a09      	ldr	r2, [pc, #36]	; (80011cc <readall_inputs+0x3e4>)
 80011a6:	7853      	ldrb	r3, [r2, #1]
 80011a8:	f361 1386 	bfi	r3, r1, #6, #1
 80011ac:	7053      	strb	r3, [r2, #1]
	komfort_in.Durchfluss = HAL_GPIO_ReadPin(DURCHFLUSS_GPIO_Port, DURCHFLUSS_Pin);				// Durchflusssensor Eingang
 80011ae:	2120      	movs	r1, #32
 80011b0:	4808      	ldr	r0, [pc, #32]	; (80011d4 <readall_inputs+0x3ec>)
 80011b2:	f002 ff11 	bl	8003fd8 <HAL_GPIO_ReadPin>
 80011b6:	4603      	mov	r3, r0
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	b2d9      	uxtb	r1, r3
 80011be:	4a03      	ldr	r2, [pc, #12]	; (80011cc <readall_inputs+0x3e4>)
 80011c0:	7853      	ldrb	r3, [r2, #1]
 80011c2:	f361 13c7 	bfi	r3, r1, #7, #1
 80011c6:	7053      	strb	r3, [r2, #1]
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000064 	.word	0x20000064
 80011d0:	40021800 	.word	0x40021800
 80011d4:	40021000 	.word	0x40021000

080011d8 <millis>:
//----------------------------------------------------------------------
#include "millis.h"
//----------------------------------------------------------------------

uint32_t millis(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80011dc:	f001 f940 	bl	8002460 <HAL_GetTick>
 80011e0:	4603      	mov	r3, r0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 80011ec:	2201      	movs	r2, #1
 80011ee:	2180      	movs	r1, #128	; 0x80
 80011f0:	481b      	ldr	r0, [pc, #108]	; (8001260 <testPCB_Leds+0x78>)
 80011f2:	f002 ff09 	bl	8004008 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80011f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011fa:	f001 f93d 	bl	8002478 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	2180      	movs	r1, #128	; 0x80
 8001202:	4817      	ldr	r0, [pc, #92]	; (8001260 <testPCB_Leds+0x78>)
 8001204:	f002 ff00 	bl	8004008 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001208:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800120c:	f001 f934 	bl	8002478 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8001210:	2201      	movs	r2, #1
 8001212:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001216:	4812      	ldr	r0, [pc, #72]	; (8001260 <testPCB_Leds+0x78>)
 8001218:	f002 fef6 	bl	8004008 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 800121c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001220:	f001 f92a 	bl	8002478 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800122a:	480d      	ldr	r0, [pc, #52]	; (8001260 <testPCB_Leds+0x78>)
 800122c:	f002 feec 	bl	8004008 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001230:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001234:	f001 f920 	bl	8002478 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001238:	2201      	movs	r2, #1
 800123a:	2104      	movs	r1, #4
 800123c:	4808      	ldr	r0, [pc, #32]	; (8001260 <testPCB_Leds+0x78>)
 800123e:	f002 fee3 	bl	8004008 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001246:	f001 f917 	bl	8002478 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	2104      	movs	r1, #4
 800124e:	4804      	ldr	r0, [pc, #16]	; (8001260 <testPCB_Leds+0x78>)
 8001250:	f002 feda 	bl	8004008 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001254:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001258:	f001 f90e 	bl	8002478 <HAL_Delay>
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40020400 	.word	0x40020400

08001264 <readTrottle>:
//----------------------------------------------------------------------

// Gaspedal auswerten
//----------------------------------------------------------------------
uint16_t readTrottle(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
	// Variablen anlegen
	uint16_t ADC_Gas = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	80fb      	strh	r3, [r7, #6]
//
//	}
//	else if ((system_in.Kickdown == 1))										// Gaspedal nicht oder teilweise getreten
//	{
//		// Gaspedal einlesen
		ADC_Gas = ADC_Gaspedal();
 800126e:	f7ff fd59 	bl	8000d24 <ADC_Gaspedal>
 8001272:	4603      	mov	r3, r0
 8001274:	80fb      	strh	r3, [r7, #6]
//	{
//		// Gaspedal invalide
//		software_error(ERROR_GASPEDAL);
//	}

	if (ADC_Gas < 300)
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800127c:	d201      	bcs.n	8001282 <readTrottle+0x1e>
	{
		ADC_Gas = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	80fb      	strh	r3, [r7, #6]
	}

	if (ADC_Gas >= 300)
 8001282:	88fb      	ldrh	r3, [r7, #6]
 8001284:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001288:	d303      	bcc.n	8001292 <readTrottle+0x2e>
	{
		ADC_Gas -= 300;
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001290:	80fb      	strh	r3, [r7, #6]
	}

	if (ADC_Gas >= 1000)
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001298:	d302      	bcc.n	80012a0 <readTrottle+0x3c>
	{
		ADC_Gas = 1000;
 800129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129e:	80fb      	strh	r3, [r7, #6]
	}

	return ADC_Gas;
 80012a0:	88fb      	ldrh	r3, [r7, #6]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012b2:	463b      	mov	r3, r7
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012be:	4b64      	ldr	r3, [pc, #400]	; (8001450 <MX_ADC1_Init+0x1a4>)
 80012c0:	4a64      	ldr	r2, [pc, #400]	; (8001454 <MX_ADC1_Init+0x1a8>)
 80012c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012c4:	4b62      	ldr	r3, [pc, #392]	; (8001450 <MX_ADC1_Init+0x1a4>)
 80012c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012cc:	4b60      	ldr	r3, [pc, #384]	; (8001450 <MX_ADC1_Init+0x1a4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012d2:	4b5f      	ldr	r3, [pc, #380]	; (8001450 <MX_ADC1_Init+0x1a4>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012d8:	4b5d      	ldr	r3, [pc, #372]	; (8001450 <MX_ADC1_Init+0x1a4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012de:	4b5c      	ldr	r3, [pc, #368]	; (8001450 <MX_ADC1_Init+0x1a4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012e6:	4b5a      	ldr	r3, [pc, #360]	; (8001450 <MX_ADC1_Init+0x1a4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ec:	4b58      	ldr	r3, [pc, #352]	; (8001450 <MX_ADC1_Init+0x1a4>)
 80012ee:	4a5a      	ldr	r2, [pc, #360]	; (8001458 <MX_ADC1_Init+0x1ac>)
 80012f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012f2:	4b57      	ldr	r3, [pc, #348]	; (8001450 <MX_ADC1_Init+0x1a4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 80012f8:	4b55      	ldr	r3, [pc, #340]	; (8001450 <MX_ADC1_Init+0x1a4>)
 80012fa:	220a      	movs	r2, #10
 80012fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012fe:	4b54      	ldr	r3, [pc, #336]	; (8001450 <MX_ADC1_Init+0x1a4>)
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001306:	4b52      	ldr	r3, [pc, #328]	; (8001450 <MX_ADC1_Init+0x1a4>)
 8001308:	2201      	movs	r2, #1
 800130a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800130c:	4850      	ldr	r0, [pc, #320]	; (8001450 <MX_ADC1_Init+0x1a4>)
 800130e:	f001 f91f 	bl	8002550 <HAL_ADC_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001318:	f000 feb2 	bl	8002080 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800131c:	230e      	movs	r3, #14
 800131e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001320:	2301      	movs	r3, #1
 8001322:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001324:	2301      	movs	r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001328:	463b      	mov	r3, r7
 800132a:	4619      	mov	r1, r3
 800132c:	4848      	ldr	r0, [pc, #288]	; (8001450 <MX_ADC1_Init+0x1a4>)
 800132e:	f001 faed 	bl	800290c <HAL_ADC_ConfigChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001338:	f000 fea2 	bl	8002080 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800133c:	2306      	movs	r3, #6
 800133e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001340:	2302      	movs	r3, #2
 8001342:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001344:	463b      	mov	r3, r7
 8001346:	4619      	mov	r1, r3
 8001348:	4841      	ldr	r0, [pc, #260]	; (8001450 <MX_ADC1_Init+0x1a4>)
 800134a:	f001 fadf 	bl	800290c <HAL_ADC_ConfigChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001354:	f000 fe94 	bl	8002080 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001358:	2304      	movs	r3, #4
 800135a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800135c:	2303      	movs	r3, #3
 800135e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001360:	2302      	movs	r3, #2
 8001362:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001364:	463b      	mov	r3, r7
 8001366:	4619      	mov	r1, r3
 8001368:	4839      	ldr	r0, [pc, #228]	; (8001450 <MX_ADC1_Init+0x1a4>)
 800136a:	f001 facf 	bl	800290c <HAL_ADC_ConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001374:	f000 fe84 	bl	8002080 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001378:	2305      	movs	r3, #5
 800137a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800137c:	2304      	movs	r3, #4
 800137e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001380:	463b      	mov	r3, r7
 8001382:	4619      	mov	r1, r3
 8001384:	4832      	ldr	r0, [pc, #200]	; (8001450 <MX_ADC1_Init+0x1a4>)
 8001386:	f001 fac1 	bl	800290c <HAL_ADC_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001390:	f000 fe76 	bl	8002080 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001394:	230f      	movs	r3, #15
 8001396:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001398:	2305      	movs	r3, #5
 800139a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800139c:	2301      	movs	r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a0:	463b      	mov	r3, r7
 80013a2:	4619      	mov	r1, r3
 80013a4:	482a      	ldr	r0, [pc, #168]	; (8001450 <MX_ADC1_Init+0x1a4>)
 80013a6:	f001 fab1 	bl	800290c <HAL_ADC_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80013b0:	f000 fe66 	bl	8002080 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013b4:	2303      	movs	r3, #3
 80013b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80013b8:	2306      	movs	r3, #6
 80013ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80013bc:	2303      	movs	r3, #3
 80013be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	4619      	mov	r1, r3
 80013c4:	4822      	ldr	r0, [pc, #136]	; (8001450 <MX_ADC1_Init+0x1a4>)
 80013c6:	f001 faa1 	bl	800290c <HAL_ADC_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 80013d0:	f000 fe56 	bl	8002080 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80013d4:	2307      	movs	r3, #7
 80013d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80013d8:	2307      	movs	r3, #7
 80013da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013dc:	463b      	mov	r3, r7
 80013de:	4619      	mov	r1, r3
 80013e0:	481b      	ldr	r0, [pc, #108]	; (8001450 <MX_ADC1_Init+0x1a4>)
 80013e2:	f001 fa93 	bl	800290c <HAL_ADC_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 80013ec:	f000 fe48 	bl	8002080 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80013f0:	4b1a      	ldr	r3, [pc, #104]	; (800145c <MX_ADC1_Init+0x1b0>)
 80013f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80013f4:	2308      	movs	r3, #8
 80013f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f8:	463b      	mov	r3, r7
 80013fa:	4619      	mov	r1, r3
 80013fc:	4814      	ldr	r0, [pc, #80]	; (8001450 <MX_ADC1_Init+0x1a4>)
 80013fe:	f001 fa85 	bl	800290c <HAL_ADC_ConfigChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 8001408:	f000 fe3a 	bl	8002080 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800140c:	2308      	movs	r3, #8
 800140e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001410:	2309      	movs	r3, #9
 8001412:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001414:	2301      	movs	r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001418:	463b      	mov	r3, r7
 800141a:	4619      	mov	r1, r3
 800141c:	480c      	ldr	r0, [pc, #48]	; (8001450 <MX_ADC1_Init+0x1a4>)
 800141e:	f001 fa75 	bl	800290c <HAL_ADC_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_ADC1_Init+0x180>
  {
    Error_Handler();
 8001428:	f000 fe2a 	bl	8002080 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800142c:	2309      	movs	r3, #9
 800142e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001430:	230a      	movs	r3, #10
 8001432:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001434:	463b      	mov	r3, r7
 8001436:	4619      	mov	r1, r3
 8001438:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_ADC1_Init+0x1a4>)
 800143a:	f001 fa67 	bl	800290c <HAL_ADC_ConfigChannel>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_ADC1_Init+0x19c>
  {
    Error_Handler();
 8001444:	f000 fe1c 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000006c 	.word	0x2000006c
 8001454:	40012000 	.word	0x40012000
 8001458:	0f000001 	.word	0x0f000001
 800145c:	10000012 	.word	0x10000012

08001460 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08c      	sub	sp, #48	; 0x30
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a2d      	ldr	r2, [pc, #180]	; (8001534 <HAL_ADC_MspInit+0xd4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d153      	bne.n	800152a <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001482:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <HAL_ADC_MspInit+0xd8>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	4a2c      	ldr	r2, [pc, #176]	; (8001538 <HAL_ADC_MspInit+0xd8>)
 8001488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148c:	6453      	str	r3, [r2, #68]	; 0x44
 800148e:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <HAL_ADC_MspInit+0xd8>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001496:	61bb      	str	r3, [r7, #24]
 8001498:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	4b27      	ldr	r3, [pc, #156]	; (8001538 <HAL_ADC_MspInit+0xd8>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a26      	ldr	r2, [pc, #152]	; (8001538 <HAL_ADC_MspInit+0xd8>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b24      	ldr	r3, [pc, #144]	; (8001538 <HAL_ADC_MspInit+0xd8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	4b21      	ldr	r3, [pc, #132]	; (8001538 <HAL_ADC_MspInit+0xd8>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a20      	ldr	r2, [pc, #128]	; (8001538 <HAL_ADC_MspInit+0xd8>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <HAL_ADC_MspInit+0xd8>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <HAL_ADC_MspInit+0xd8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a1a      	ldr	r2, [pc, #104]	; (8001538 <HAL_ADC_MspInit+0xd8>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b18      	ldr	r3, [pc, #96]	; (8001538 <HAL_ADC_MspInit+0xd8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SENSE_KL15_Pin|SENSE_KUEHLWASSER_Pin|SENSE_KLIMA_FLAP_Pin|SENSE_GAS_Pin
 80014e2:	23f8      	movs	r3, #248	; 0xf8
 80014e4:	61fb      	str	r3, [r7, #28]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e6:	2303      	movs	r3, #3
 80014e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	f107 031c 	add.w	r3, r7, #28
 80014f2:	4619      	mov	r1, r3
 80014f4:	4811      	ldr	r0, [pc, #68]	; (800153c <HAL_ADC_MspInit+0xdc>)
 80014f6:	f002 fbc3 	bl	8003c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_DRUCK_Pin|SENSE_DRUCK_TEMP_Pin;
 80014fa:	2330      	movs	r3, #48	; 0x30
 80014fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014fe:	2303      	movs	r3, #3
 8001500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	4619      	mov	r1, r3
 800150c:	480c      	ldr	r0, [pc, #48]	; (8001540 <HAL_ADC_MspInit+0xe0>)
 800150e:	f002 fbb7 	bl	8003c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_RETURN_Pin|SENSE_INFO_Pin;
 8001512:	2303      	movs	r3, #3
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001516:	2303      	movs	r3, #3
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	f107 031c 	add.w	r3, r7, #28
 8001522:	4619      	mov	r1, r3
 8001524:	4807      	ldr	r0, [pc, #28]	; (8001544 <HAL_ADC_MspInit+0xe4>)
 8001526:	f002 fbab 	bl	8003c80 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800152a:	bf00      	nop
 800152c:	3730      	adds	r7, #48	; 0x30
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40012000 	.word	0x40012000
 8001538:	40023800 	.word	0x40023800
 800153c:	40020000 	.word	0x40020000
 8001540:	40020800 	.word	0x40020800
 8001544:	40020400 	.word	0x40020400

08001548 <MX_CAN3_Init>:

CAN_HandleTypeDef hcan3;

/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 800154c:	4b33      	ldr	r3, [pc, #204]	; (800161c <MX_CAN3_Init+0xd4>)
 800154e:	4a34      	ldr	r2, [pc, #208]	; (8001620 <MX_CAN3_Init+0xd8>)
 8001550:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001552:	4b32      	ldr	r3, [pc, #200]	; (800161c <MX_CAN3_Init+0xd4>)
 8001554:	2206      	movs	r2, #6
 8001556:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001558:	4b30      	ldr	r3, [pc, #192]	; (800161c <MX_CAN3_Init+0xd4>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800155e:	4b2f      	ldr	r3, [pc, #188]	; (800161c <MX_CAN3_Init+0xd4>)
 8001560:	2200      	movs	r2, #0
 8001562:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001564:	4b2d      	ldr	r3, [pc, #180]	; (800161c <MX_CAN3_Init+0xd4>)
 8001566:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800156a:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 800156c:	4b2b      	ldr	r3, [pc, #172]	; (800161c <MX_CAN3_Init+0xd4>)
 800156e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001572:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001574:	4b29      	ldr	r3, [pc, #164]	; (800161c <MX_CAN3_Init+0xd4>)
 8001576:	2200      	movs	r2, #0
 8001578:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 800157a:	4b28      	ldr	r3, [pc, #160]	; (800161c <MX_CAN3_Init+0xd4>)
 800157c:	2200      	movs	r2, #0
 800157e:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001580:	4b26      	ldr	r3, [pc, #152]	; (800161c <MX_CAN3_Init+0xd4>)
 8001582:	2200      	movs	r2, #0
 8001584:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001586:	4b25      	ldr	r3, [pc, #148]	; (800161c <MX_CAN3_Init+0xd4>)
 8001588:	2200      	movs	r2, #0
 800158a:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 800158c:	4b23      	ldr	r3, [pc, #140]	; (800161c <MX_CAN3_Init+0xd4>)
 800158e:	2200      	movs	r2, #0
 8001590:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001592:	4b22      	ldr	r3, [pc, #136]	; (800161c <MX_CAN3_Init+0xd4>)
 8001594:	2200      	movs	r2, #0
 8001596:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001598:	4820      	ldr	r0, [pc, #128]	; (800161c <MX_CAN3_Init+0xd4>)
 800159a:	f001 fbfb 	bl	8002d94 <HAL_CAN_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 80015a4:	f000 fd6c 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */
	// Starte CAN Bus
	if((HAL_CAN_Start(&hcan3)) != HAL_OK)
 80015a8:	481c      	ldr	r0, [pc, #112]	; (800161c <MX_CAN3_Init+0xd4>)
 80015aa:	f001 fddb 	bl	8003164 <HAL_CAN_Start>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_CAN3_Init+0x70>
	{
		// Fehler beim Starten des CAN-Busses
		Error_Handler();
 80015b4:	f000 fd64 	bl	8002080 <Error_Handler>
	}

	// Aktiviere Interrupts fuer CAN Bus
	if((HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_FULL)) != HAL_OK)
 80015b8:	2104      	movs	r1, #4
 80015ba:	4818      	ldr	r0, [pc, #96]	; (800161c <MX_CAN3_Init+0xd4>)
 80015bc:	f002 f803 	bl	80035c6 <HAL_CAN_ActivateNotification>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_CAN3_Init+0x82>
	{
		// Fehler in der Initialisierung des CAN Interrupts
		Error_Handler();
 80015c6:	f000 fd5b 	bl	8002080 <Error_Handler>
	}

	// Filter Bank initialisieren um Daten zu empfangen
	// Akzeptiere alle CAN-Pakete
	sFilterConfig.FilterBank = 0;
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <MX_CAN3_Init+0xdc>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80015d0:	4b14      	ldr	r3, [pc, #80]	; (8001624 <MX_CAN3_Init+0xdc>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <MX_CAN3_Init+0xdc>)
 80015d8:	2201      	movs	r2, #1
 80015da:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0420 << 5;
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MX_CAN3_Init+0xdc>)
 80015de:	f44f 4204 	mov.w	r2, #33792	; 0x8400
 80015e2:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <MX_CAN3_Init+0xdc>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0420 << 5;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <MX_CAN3_Init+0xdc>)
 80015ec:	f44f 4204 	mov.w	r2, #33792	; 0x8400
 80015f0:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0;
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_CAN3_Init+0xdc>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = 0;
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <MX_CAN3_Init+0xdc>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_CAN3_Init+0xdc>)
 8001600:	2201      	movs	r2, #1
 8001602:	621a      	str	r2, [r3, #32]

	// Filter Bank schreiben
	if((HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 8001604:	4907      	ldr	r1, [pc, #28]	; (8001624 <MX_CAN3_Init+0xdc>)
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_CAN3_Init+0xd4>)
 8001608:	f001 fcc0 	bl	8002f8c <HAL_CAN_ConfigFilter>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_CAN3_Init+0xce>
	{
		// Fehler beim konfigurieren der Filterbank fuer den CAN-Bus
		Error_Handler();
 8001612:	f000 fd35 	bl	8002080 <Error_Handler>
	}

  /* USER CODE END CAN3_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200000dc 	.word	0x200000dc
 8001620:	40003400 	.word	0x40003400
 8001624:	200000b4 	.word	0x200000b4

08001628 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08c      	sub	sp, #48	; 0x30
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 031c 	add.w	r3, r7, #28
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN3)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a27      	ldr	r2, [pc, #156]	; (80016e4 <HAL_CAN_MspInit+0xbc>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d148      	bne.n	80016dc <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN3_MspInit 0 */

  /* USER CODE END CAN3_MspInit 0 */
    /* CAN3 clock enable */
    __HAL_RCC_CAN3_CLK_ENABLE();
 800164a:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <HAL_CAN_MspInit+0xc0>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a26      	ldr	r2, [pc, #152]	; (80016e8 <HAL_CAN_MspInit+0xc0>)
 8001650:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
 8001656:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <HAL_CAN_MspInit+0xc0>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001662:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <HAL_CAN_MspInit+0xc0>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a20      	ldr	r2, [pc, #128]	; (80016e8 <HAL_CAN_MspInit+0xc0>)
 8001668:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <HAL_CAN_MspInit+0xc0>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800167a:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <HAL_CAN_MspInit+0xc0>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a1a      	ldr	r2, [pc, #104]	; (80016e8 <HAL_CAN_MspInit+0xc0>)
 8001680:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <HAL_CAN_MspInit+0xc0>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_CAN_MspInit+0xc0>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a14      	ldr	r2, [pc, #80]	; (80016e8 <HAL_CAN_MspInit+0xc0>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_CAN_MspInit+0xc0>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN3 GPIO Configuration
    PA8     ------> CAN3_RX
    PA15     ------> CAN3_TX
    */
    GPIO_InitStruct.Pin = ACAN_RX_Pin|ACAN_TX_Pin;
 80016aa:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80016ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b8:	2303      	movs	r3, #3
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80016bc:	230b      	movs	r3, #11
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c0:	f107 031c 	add.w	r3, r7, #28
 80016c4:	4619      	mov	r1, r3
 80016c6:	4809      	ldr	r0, [pc, #36]	; (80016ec <HAL_CAN_MspInit+0xc4>)
 80016c8:	f002 fada 	bl	8003c80 <HAL_GPIO_Init>

    /* CAN3 interrupt Init */
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2100      	movs	r1, #0
 80016d0:	2069      	movs	r0, #105	; 0x69
 80016d2:	f002 fa9e 	bl	8003c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 80016d6:	2069      	movs	r0, #105	; 0x69
 80016d8:	f002 fab7 	bl	8003c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 80016dc:	bf00      	nop
 80016de:	3730      	adds	r7, #48	; 0x30
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40003400 	.word	0x40003400
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020000 	.word	0x40020000

080016f0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08e      	sub	sp, #56	; 0x38
 80016f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001706:	4bb6      	ldr	r3, [pc, #728]	; (80019e0 <MX_GPIO_Init+0x2f0>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4ab5      	ldr	r2, [pc, #724]	; (80019e0 <MX_GPIO_Init+0x2f0>)
 800170c:	f043 0310 	orr.w	r3, r3, #16
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4bb3      	ldr	r3, [pc, #716]	; (80019e0 <MX_GPIO_Init+0x2f0>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	623b      	str	r3, [r7, #32]
 800171c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171e:	4bb0      	ldr	r3, [pc, #704]	; (80019e0 <MX_GPIO_Init+0x2f0>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4aaf      	ldr	r2, [pc, #700]	; (80019e0 <MX_GPIO_Init+0x2f0>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4bad      	ldr	r3, [pc, #692]	; (80019e0 <MX_GPIO_Init+0x2f0>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	61fb      	str	r3, [r7, #28]
 8001734:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001736:	4baa      	ldr	r3, [pc, #680]	; (80019e0 <MX_GPIO_Init+0x2f0>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4aa9      	ldr	r2, [pc, #676]	; (80019e0 <MX_GPIO_Init+0x2f0>)
 800173c:	f043 0320 	orr.w	r3, r3, #32
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4ba7      	ldr	r3, [pc, #668]	; (80019e0 <MX_GPIO_Init+0x2f0>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0320 	and.w	r3, r3, #32
 800174a:	61bb      	str	r3, [r7, #24]
 800174c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800174e:	4ba4      	ldr	r3, [pc, #656]	; (80019e0 <MX_GPIO_Init+0x2f0>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4aa3      	ldr	r2, [pc, #652]	; (80019e0 <MX_GPIO_Init+0x2f0>)
 8001754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4ba1      	ldr	r3, [pc, #644]	; (80019e0 <MX_GPIO_Init+0x2f0>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	4b9e      	ldr	r3, [pc, #632]	; (80019e0 <MX_GPIO_Init+0x2f0>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a9d      	ldr	r2, [pc, #628]	; (80019e0 <MX_GPIO_Init+0x2f0>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b9b      	ldr	r3, [pc, #620]	; (80019e0 <MX_GPIO_Init+0x2f0>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177e:	4b98      	ldr	r3, [pc, #608]	; (80019e0 <MX_GPIO_Init+0x2f0>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a97      	ldr	r2, [pc, #604]	; (80019e0 <MX_GPIO_Init+0x2f0>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b95      	ldr	r3, [pc, #596]	; (80019e0 <MX_GPIO_Init+0x2f0>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001796:	4b92      	ldr	r3, [pc, #584]	; (80019e0 <MX_GPIO_Init+0x2f0>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a91      	ldr	r2, [pc, #580]	; (80019e0 <MX_GPIO_Init+0x2f0>)
 800179c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b8f      	ldr	r3, [pc, #572]	; (80019e0 <MX_GPIO_Init+0x2f0>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ae:	4b8c      	ldr	r3, [pc, #560]	; (80019e0 <MX_GPIO_Init+0x2f0>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a8b      	ldr	r2, [pc, #556]	; (80019e0 <MX_GPIO_Init+0x2f0>)
 80017b4:	f043 0308 	orr.w	r3, r3, #8
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b89      	ldr	r3, [pc, #548]	; (80019e0 <MX_GPIO_Init+0x2f0>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 80017c6:	2200      	movs	r2, #0
 80017c8:	f248 0187 	movw	r1, #32903	; 0x8087
 80017cc:	4885      	ldr	r0, [pc, #532]	; (80019e4 <MX_GPIO_Init+0x2f4>)
 80017ce:	f002 fc1b 	bl	8004008 <HAL_GPIO_WritePin>
                          |DIGITAL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_ON_Pin|WS2812_Pin, GPIO_PIN_RESET);
 80017d2:	2200      	movs	r2, #0
 80017d4:	f242 0108 	movw	r1, #8200	; 0x2008
 80017d8:	4883      	ldr	r0, [pc, #524]	; (80019e8 <MX_GPIO_Init+0x2f8>)
 80017da:	f002 fc15 	bl	8004008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 80017de:	2200      	movs	r2, #0
 80017e0:	f24f 013c 	movw	r1, #61500	; 0xf03c
 80017e4:	4881      	ldr	r0, [pc, #516]	; (80019ec <MX_GPIO_Init+0x2fc>)
 80017e6:	f002 fc0f 	bl	8004008 <HAL_GPIO_WritePin>
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 80017ea:	2200      	movs	r2, #0
 80017ec:	f647 0194 	movw	r1, #30868	; 0x7894
 80017f0:	487f      	ldr	r0, [pc, #508]	; (80019f0 <MX_GPIO_Init+0x300>)
 80017f2:	f002 fc09 	bl	8004008 <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 80017f6:	2200      	movs	r2, #0
 80017f8:	f64e 2188 	movw	r1, #60040	; 0xea88
 80017fc:	487d      	ldr	r0, [pc, #500]	; (80019f4 <MX_GPIO_Init+0x304>)
 80017fe:	f002 fc03 	bl	8004008 <HAL_GPIO_WritePin>
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 8001802:	2200      	movs	r2, #0
 8001804:	f64e 610c 	movw	r1, #60940	; 0xee0c
 8001808:	487b      	ldr	r0, [pc, #492]	; (80019f8 <MX_GPIO_Init+0x308>)
 800180a:	f002 fbfd 	bl	8004008 <HAL_GPIO_WritePin>
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, GPIO_PIN_RESET);
 800180e:	2200      	movs	r2, #0
 8001810:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001814:	4879      	ldr	r0, [pc, #484]	; (80019fc <MX_GPIO_Init+0x30c>)
 8001816:	f002 fbf7 	bl	8004008 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 800181a:	f248 0387 	movw	r3, #32903	; 0x8087
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DIGITAL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001820:	2301      	movs	r3, #1
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800182c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001830:	4619      	mov	r1, r3
 8001832:	486c      	ldr	r0, [pc, #432]	; (80019e4 <MX_GPIO_Init+0x2f4>)
 8001834:	f002 fa24 	bl	8003c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ECO_Pin|BC_DOWN_IN_Pin|DURCHFLUSS_Pin|BUTTON2_Pin
 8001838:	f647 7378 	movw	r3, #32632	; 0x7f78
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
                          |KICKDOWN_Pin|LEERLAUF_Pin|KUPPLUNG_NO_Pin|BREMSE_NC_Pin
                          |BREMSE_NO_Pin|SENSE_SDC_AKKU_Pin|SENSE_SDC_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183e:	2300      	movs	r3, #0
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184a:	4619      	mov	r1, r3
 800184c:	4865      	ldr	r0, [pc, #404]	; (80019e4 <MX_GPIO_Init+0x2f4>)
 800184e:	f002 fa17 	bl	8003c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 8001852:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001858:	2301      	movs	r3, #1
 800185a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8001864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001868:	4619      	mov	r1, r3
 800186a:	485f      	ldr	r0, [pc, #380]	; (80019e8 <MX_GPIO_Init+0x2f8>)
 800186c:	f002 fa08 	bl	8003c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001870:	f64d 7347 	movw	r3, #57159	; 0xdf47
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|SD_SW_Pin|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001876:	2303      	movs	r3, #3
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001882:	4619      	mov	r1, r3
 8001884:	4858      	ldr	r0, [pc, #352]	; (80019e8 <MX_GPIO_Init+0x2f8>)
 8001886:	f002 f9fb 	bl	8003c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|ECON_Pin|RECUPERATION_Pin;
 800188a:	f640 0303 	movw	r3, #2051	; 0x803
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001890:	2300      	movs	r3, #0
 8001892:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189c:	4619      	mov	r1, r3
 800189e:	4853      	ldr	r0, [pc, #332]	; (80019ec <MX_GPIO_Init+0x2fc>)
 80018a0:	f002 f9ee 	bl	8003c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 80018a4:	f24f 033c 	movw	r3, #61500	; 0xf03c
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018aa:	2301      	movs	r3, #1
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ba:	4619      	mov	r1, r3
 80018bc:	484b      	ldr	r0, [pc, #300]	; (80019ec <MX_GPIO_Init+0x2fc>)
 80018be:	f002 f9df 	bl	8003c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PF10 */
  GPIO_InitStruct.Pin = SPI5_CS_Pin|SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin
 80018c2:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c8:	2303      	movs	r3, #3
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d4:	4619      	mov	r1, r3
 80018d6:	4845      	ldr	r0, [pc, #276]	; (80019ec <MX_GPIO_Init+0x2fc>)
 80018d8:	f002 f9d2 	bl	8003c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS2812_Pin;
 80018dc:	2308      	movs	r3, #8
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e0:	2301      	movs	r3, #1
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e8:	2302      	movs	r3, #2
 80018ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 80018ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f0:	4619      	mov	r1, r3
 80018f2:	483d      	ldr	r0, [pc, #244]	; (80019e8 <MX_GPIO_Init+0x2f8>)
 80018f4:	f002 f9c4 	bl	8003c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|EMERGENCY_RUN_Pin|HW_WAKE_Pin|OUTA_Pin
 80018f8:	f640 6307 	movw	r3, #3591	; 0xe07
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTB_Pin|BC_UP_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fe:	2300      	movs	r3, #0
 8001900:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190a:	4619      	mov	r1, r3
 800190c:	483b      	ldr	r0, [pc, #236]	; (80019fc <MX_GPIO_Init+0x30c>)
 800190e:	f002 f9b7 	bl	8003c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 8001912:	f647 0394 	movw	r3, #30868	; 0x7894
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001918:	2301      	movs	r3, #1
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001928:	4619      	mov	r1, r3
 800192a:	4831      	ldr	r0, [pc, #196]	; (80019f0 <MX_GPIO_Init+0x300>)
 800192c:	f002 f9a8 	bl	8003c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DCDC_INSTRUCTION_Pin|DCDC_FAULT_Pin|ASR_IN1_Pin|GRA1_Pin
 8001930:	f241 13f3 	movw	r3, #4595	; 0x11f3
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
                          |GRA2_Pin|GRA3_Pin|GRA4_Pin|BC_RESET_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001936:	2300      	movs	r3, #0
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800193e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001942:	4619      	mov	r1, r3
 8001944:	482c      	ldr	r0, [pc, #176]	; (80019f8 <MX_GPIO_Init+0x308>)
 8001946:	f002 f99b 	bl	8003c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSE_SDC_BTB_Pin|ANLASSER_Pin;
 800194a:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001950:	2300      	movs	r3, #0
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800195c:	4619      	mov	r1, r3
 800195e:	4824      	ldr	r0, [pc, #144]	; (80019f0 <MX_GPIO_Init+0x300>)
 8001960:	f002 f98e 	bl	8003c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KL15_Pin|BAMOCAR_IN2_Pin|BAMOCAR_IN1_Pin|ASR_IN2_Pin;
 8001964:	f241 5310 	movw	r3, #5392	; 0x1510
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196a:	2300      	movs	r3, #0
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001976:	4619      	mov	r1, r3
 8001978:	481e      	ldr	r0, [pc, #120]	; (80019f4 <MX_GPIO_Init+0x304>)
 800197a:	f002 f981 	bl	8003c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 800197e:	f64e 2388 	movw	r3, #60040	; 0xea88
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001984:	2301      	movs	r3, #1
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2300      	movs	r3, #0
 800198e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001994:	4619      	mov	r1, r3
 8001996:	4817      	ldr	r0, [pc, #92]	; (80019f4 <MX_GPIO_Init+0x304>)
 8001998:	f002 f972 	bl	8003c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 800199c:	f64e 630c 	movw	r3, #60940	; 0xee0c
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b2:	4619      	mov	r1, r3
 80019b4:	4810      	ldr	r0, [pc, #64]	; (80019f8 <MX_GPIO_Init+0x308>)
 80019b6:	f002 f963 	bl	8003c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019be:	2300      	movs	r3, #0
 80019c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ca:	4619      	mov	r1, r3
 80019cc:	4806      	ldr	r0, [pc, #24]	; (80019e8 <MX_GPIO_Init+0x2f8>)
 80019ce:	f002 f957 	bl	8003c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RUECKWARNUNG_Pin;
 80019d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d8:	2301      	movs	r3, #1
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	e00f      	b.n	8001a00 <MX_GPIO_Init+0x310>
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40020800 	.word	0x40020800
 80019ec:	40021400 	.word	0x40021400
 80019f0:	40020400 	.word	0x40020400
 80019f4:	40020c00 	.word	0x40020c00
 80019f8:	40021800 	.word	0x40021800
 80019fc:	40020000 	.word	0x40020000
 8001a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RUECKWARNUNG_GPIO_Port, &GPIO_InitStruct);
 8001a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	480f      	ldr	r0, [pc, #60]	; (8001a4c <MX_GPIO_Init+0x35c>)
 8001a0e:	f002 f937 	bl	8003c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_TX_Pin|CAN1_RX_Pin|SD_CMD_Pin;
 8001a12:	2307      	movs	r3, #7
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a16:	2303      	movs	r3, #3
 8001a18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a22:	4619      	mov	r1, r3
 8001a24:	480a      	ldr	r0, [pc, #40]	; (8001a50 <MX_GPIO_Init+0x360>)
 8001a26:	f002 f92b 	bl	8003c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CAN2_TX_Pin|CAN2_RX_Pin|I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001a2a:	f44f 7358 	mov.w	r3, #864	; 0x360
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a30:	2303      	movs	r3, #3
 8001a32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <MX_GPIO_Init+0x364>)
 8001a40:	f002 f91e 	bl	8003c80 <HAL_GPIO_Init>

}
 8001a44:	bf00      	nop
 8001a46:	3738      	adds	r7, #56	; 0x38
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40020000 	.word	0x40020000
 8001a50:	40020c00 	.word	0x40020c00
 8001a54:	40020400 	.word	0x40020400

08001a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a58:	b5b0      	push	{r4, r5, r7, lr}
 8001a5a:	b0ac      	sub	sp, #176	; 0xb0
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a5e:	f000 fcae 	bl	80023be <HAL_Init>

  /* USER CODE BEGIN Init */

	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[5] = {0}, InData[5] = {0}, status, tmp[4], task = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a74:	2300      	movs	r3, #0
 8001a76:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	uint16_t count = 0, gas_adc = 0, gas_mean = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8001a86:	2300      	movs	r3, #0
 8001a88:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  	uint32_t lastcan = 0, lastsendcan = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  	// Erstelle Can-Nachrichten
  	CAN_TxHeaderTypeDef TxMessage = {0x123, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8001a9e:	4bc1      	ldr	r3, [pc, #772]	; (8001da4 <main+0x34c>)
 8001aa0:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001aa4:	461d      	mov	r5, r3
 8001aa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aaa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001aae:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxOutput = {MOTOR_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 6, DISABLE};
 8001ab2:	4bbd      	ldr	r3, [pc, #756]	; (8001da8 <main+0x350>)
 8001ab4:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001ab8:	461d      	mov	r5, r3
 8001aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001abe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ac2:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxInput = {MOTOR_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 6, DISABLE};
 8001ac6:	4bb9      	ldr	r3, [pc, #740]	; (8001dac <main+0x354>)
 8001ac8:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001acc:	461d      	mov	r5, r3
 8001ace:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ad0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ad6:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxMotor1 = {MOTOR_CAN_DREHZAHL, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8001ada:	4bb5      	ldr	r3, [pc, #724]	; (8001db0 <main+0x358>)
 8001adc:	f107 041c 	add.w	r4, r7, #28
 8001ae0:	461d      	mov	r5, r3
 8001ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001aea:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxBamocar = {BAMOCAR_TX_ID, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 8001aee:	4bb1      	ldr	r3, [pc, #708]	; (8001db4 <main+0x35c>)
 8001af0:	1d3c      	adds	r4, r7, #4
 8001af2:	461d      	mov	r5, r3
 8001af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001af8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001afc:	e884 0003 	stmia.w	r4, {r0, r1}


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b00:	f000 f9ec 	bl	8001edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b04:	f7ff fdf4 	bl	80016f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b08:	f000 fbbc 	bl	8002284 <MX_USART2_UART_Init>
  MX_CAN3_Init();
 8001b0c:	f7ff fd1c 	bl	8001548 <MX_CAN3_Init>
  MX_ADC1_Init();
 8001b10:	f7ff fbcc 	bl	80012ac <MX_ADC1_Init>
  MX_TIM6_Init();
 8001b14:	f000 fb5a 	bl	80021cc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  	// Start Timer 6 Interrupt
  	HAL_TIM_Base_Start_IT(&htim6);
 8001b18:	48a7      	ldr	r0, [pc, #668]	; (8001db8 <main+0x360>)
 8001b1a:	f003 fbe3 	bl	80052e4 <HAL_TIM_Base_Start_IT>

  	// Schreibe Resetquelle auf die Konsole
#ifdef DEBUG
	printResetSource(readResetSource());
 8001b1e:	f7ff f83f 	bl	8000ba0 <readResetSource>
 8001b22:	4603      	mov	r3, r0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff f88d 	bl	8000c44 <printResetSource>

  	/* Teste serielle Schnittstelle*/
  	#define TEST_STRING_UART	"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
  	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 8001b2a:	213a      	movs	r1, #58	; 0x3a
 8001b2c:	48a3      	ldr	r0, [pc, #652]	; (8001dbc <main+0x364>)
 8001b2e:	f7fe fe41 	bl	80007b4 <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 8001b32:	f7ff f80b 	bl	8000b4c <collectSystemInfo>
#endif

	// Leds Testen
  	testPCB_Leds();
 8001b36:	f7ff fb57 	bl	80011e8 <testPCB_Leds>

  	// Lese alle Eingaenge
  	readall_inputs();
 8001b3a:	f7ff f955 	bl	8000de8 <readall_inputs>

  	// Daten fuer TxMassage erstellen
  	for (uint8_t j = 0; j < 8; j++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8001b44:	e00f      	b.n	8001b66 <main+0x10e>
  		TxData[j] = (j + 1);
 8001b46:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001b4a:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8001b4e:	3201      	adds	r2, #1
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8001b56:	440b      	add	r3, r1
 8001b58:	f803 2c20 	strb.w	r2, [r3, #-32]
  	for (uint8_t j = 0; j < 8; j++)
 8001b5c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001b60:	3301      	adds	r3, #1
 8001b62:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8001b66:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001b6a:	2b07      	cmp	r3, #7
 8001b6c:	d9eb      	bls.n	8001b46 <main+0xee>

  	// Starte While-Schleife
#define MAINWHILE				"\nStarte While Schleife\n"
  	uartTransmit(MAINWHILE, sizeof(MAINWHILE));
 8001b6e:	2118      	movs	r1, #24
 8001b70:	4893      	ldr	r0, [pc, #588]	; (8001dc0 <main+0x368>)
 8001b72:	f7fe fe1f 	bl	80007b4 <uartTransmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 8001b76:	4b93      	ldr	r3, [pc, #588]	; (8001dc4 <main+0x36c>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d10a      	bne.n	8001b96 <main+0x13e>
		{
			count++;													// Zaehler count hochzaehlen
 8001b80:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001b84:	3301      	adds	r3, #1
 8001b86:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
			millisekunden_flag_1 = 0;									// Setze Millisekunden-Flag zurueck
 8001b8a:	4b8e      	ldr	r3, [pc, #568]	; (8001dc4 <main+0x36c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]

			task = 1;
 8001b90:	2301      	movs	r3, #1
 8001b92:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		}

		// Task wird alle 50 Millisekunden ausgefuehrt
		if (((count % 20) == 0) && (task == 1))
 8001b96:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8001b9a:	4b8b      	ldr	r3, [pc, #556]	; (8001dc8 <main+0x370>)
 8001b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8001ba0:	0919      	lsrs	r1, r3, #4
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d112      	bne.n	8001bd8 <main+0x180>
 8001bb2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d10e      	bne.n	8001bd8 <main+0x180>
		{
			// Sende Nachricht Motor1
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMotor1, motor1.output, (uint32_t *)CAN_TX_MAILBOX0);
 8001bba:	f107 011c 	add.w	r1, r7, #28
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	4a82      	ldr	r2, [pc, #520]	; (8001dcc <main+0x374>)
 8001bc2:	4883      	ldr	r0, [pc, #524]	; (8001dd0 <main+0x378>)
 8001bc4:	f001 fb12 	bl	80031ec <HAL_CAN_AddTxMessage>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			hal_error(status);
 8001bce:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff f8d8 	bl	8000d88 <hal_error>
		}

		// Task wird alle 100 Millisekunden ausgefuehrt
		if (((count % 100) == 0) && (task == 1))
 8001bd8:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001bdc:	4a7d      	ldr	r2, [pc, #500]	; (8001dd4 <main+0x37c>)
 8001bde:	fba2 1203 	umull	r1, r2, r2, r3
 8001be2:	0952      	lsrs	r2, r2, #5
 8001be4:	2164      	movs	r1, #100	; 0x64
 8001be6:	fb01 f202 	mul.w	r2, r1, r2
 8001bea:	1a9b      	subs	r3, r3, r2
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d134      	bne.n	8001c5c <main+0x204>
 8001bf2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d130      	bne.n	8001c5c <main+0x204>
		{
			// alle Inputs einlesen
			readall_inputs();
 8001bfa:	f7ff f8f5 	bl	8000de8 <readall_inputs>

			// Bremse pruefen
//			readBrake();

			// Gaspedal pruefen
			gas_adc = readTrottle();
 8001bfe:	f7ff fb31 	bl	8001264 <readTrottle>
 8001c02:	4603      	mov	r3, r0
 8001c04:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c

			// Mittelwert bilden (https://nestedsoftware.com/2018/03/20/calculating-a-moving-average-on-streaming-data-5a7k.22879.html)
			// Mittelwertbildung aus 10 Werten (Weniger die 10 verkleineren, Mehr die 10 vergrößern)
			gas_mean = (gas_mean + ((gas_adc - gas_mean)/10));
 8001c08:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8001c0c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	4a71      	ldr	r2, [pc, #452]	; (8001dd8 <main+0x380>)
 8001c14:	fb82 1203 	smull	r1, r2, r2, r3
 8001c18:	1092      	asrs	r2, r2, #2
 8001c1a:	17db      	asrs	r3, r3, #31
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8001c24:	4413      	add	r3, r2
 8001c26:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa

			// Daten in Bamocarformat umwandeln
			tmp[0] = 0x90;
 8001c2a:	2390      	movs	r3, #144	; 0x90
 8001c2c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
			tmp[1] = (gas_mean);
 8001c30:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
			tmp[2] = ((gas_mean) >> 8);
 8001c3a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8001c3e:	0a1b      	lsrs	r3, r3, #8
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

			// Drehmoment an Bamocar senden
			status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
 8001c48:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001c4c:	1d39      	adds	r1, r7, #4
 8001c4e:	2301      	movs	r3, #1
 8001c50:	485f      	ldr	r0, [pc, #380]	; (8001dd0 <main+0x378>)
 8001c52:	f001 facb 	bl	80031ec <HAL_CAN_AddTxMessage>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			//hal_error(status);
		}

		// Task wird alle 200 Millisekunden ausgefuehrt
		if (((count % 200) == 0) && (task == 1))
 8001c5c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001c60:	4a5c      	ldr	r2, [pc, #368]	; (8001dd4 <main+0x37c>)
 8001c62:	fba2 1203 	umull	r1, r2, r2, r3
 8001c66:	0992      	lsrs	r2, r2, #6
 8001c68:	21c8      	movs	r1, #200	; 0xc8
 8001c6a:	fb01 f202 	mul.w	r2, r1, r2
 8001c6e:	1a9b      	subs	r3, r3, r2
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d16f      	bne.n	8001d56 <main+0x2fe>
 8001c76:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d16b      	bne.n	8001d56 <main+0x2fe>
		{
			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 8001c7e:	4b57      	ldr	r3, [pc, #348]	; (8001ddc <main+0x384>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
			OutData[1] = highcurrent_out.high_out;
 8001c86:	4b56      	ldr	r3, [pc, #344]	; (8001de0 <main+0x388>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
			OutData[2] = (leuchten_out.ledoutput >> 8);
 8001c8e:	4b55      	ldr	r3, [pc, #340]	; (8001de4 <main+0x38c>)
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	0a1b      	lsrs	r3, r3, #8
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			OutData[3] = leuchten_out.ledoutput;
 8001c9c:	4b51      	ldr	r3, [pc, #324]	; (8001de4 <main+0x38c>)
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			OutData[4] = komfort_out.komfortoutput;
 8001ca6:	4b50      	ldr	r3, [pc, #320]	; (8001de8 <main+0x390>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			OutData[5] ++;
 8001cae:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX2);
 8001cba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001cbe:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	4842      	ldr	r0, [pc, #264]	; (8001dd0 <main+0x378>)
 8001cc6:	f001 fa91 	bl	80031ec <HAL_CAN_AddTxMessage>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			//hal_error(status);

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] ++;
 8001cd0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
			InData[1] = (system_in.systeminput >> 8);
 8001cdc:	4b43      	ldr	r3, [pc, #268]	; (8001dec <main+0x394>)
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	0a1b      	lsrs	r3, r3, #8
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
			InData[2] = system_in.systeminput;
 8001cea:	4b40      	ldr	r3, [pc, #256]	; (8001dec <main+0x394>)
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			InData[3] = sdc_in.sdcinput;
 8001cf4:	4b3e      	ldr	r3, [pc, #248]	; (8001df0 <main+0x398>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			InData[4] = (komfort_in.komfortinput >> 8);
 8001cfc:	4b3d      	ldr	r3, [pc, #244]	; (8001df4 <main+0x39c>)
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
			InData[5] = komfort_in.komfortinput;
 8001d0a:	4b3a      	ldr	r3, [pc, #232]	; (8001df4 <main+0x39c>)
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX1);
 8001d14:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001d18:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	482c      	ldr	r0, [pc, #176]	; (8001dd0 <main+0x378>)
 8001d20:	f001 fa64 	bl	80031ec <HAL_CAN_AddTxMessage>
 8001d24:	4603      	mov	r3, r0
 8001d26:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			//hal_error(status);

			// Bamocar Fehler auslesen
			tmp[0] = 0x3D;
 8001d2a:	233d      	movs	r3, #61	; 0x3d
 8001d2c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
			tmp[1] = 0x8F;
 8001d30:	238f      	movs	r3, #143	; 0x8f
 8001d32:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
			tmp[2] = 0x00;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

			// Befehl Fehler auslesen an Bamocar senden
			status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
 8001d3c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001d40:	1d39      	adds	r1, r7, #4
 8001d42:	2301      	movs	r3, #1
 8001d44:	4822      	ldr	r0, [pc, #136]	; (8001dd0 <main+0x378>)
 8001d46:	f001 fa51 	bl	80031ec <HAL_CAN_AddTxMessage>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			//hal_error(status);

			// Variable count auf 0 zuruecksetzen
			count = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
		}

		task = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf


	  	// Task wird alle 5 Millisekunden ausgefuehrt
	  	if (millis() - lastcan >= 5)
 8001d5c:	f7ff fa3c 	bl	80011d8 <millis>
 8001d60:	4602      	mov	r2, r0
 8001d62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	f240 808d 	bls.w	8001e88 <main+0x430>
		{
	  		HAL_CAN_GetRxMessage(&hcan3, CAN_RX_FIFO0, &RxMessage, TxData);
 8001d6e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d72:	4a21      	ldr	r2, [pc, #132]	; (8001df8 <main+0x3a0>)
 8001d74:	2100      	movs	r1, #0
 8001d76:	4816      	ldr	r0, [pc, #88]	; (8001dd0 <main+0x378>)
 8001d78:	f001 fb13 	bl	80033a2 <HAL_CAN_GetRxMessage>

			// Wenn Nachricht ueber den CAN-Bus empfangen wurden
			if (can_change == 1)
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <main+0x3a4>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	f040 8080 	bne.w	8001e88 <main+0x430>
			{
				// Nachricht ID ueber UART ausgeben
				uartTransmitNumber(RxMessage.StdId, 16);
 8001d88:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <main+0x3a0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2110      	movs	r1, #16
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fd24 	bl	80007dc <uartTransmitNumber>
				uartTransmit("\t", 1);
 8001d94:	2101      	movs	r1, #1
 8001d96:	481a      	ldr	r0, [pc, #104]	; (8001e00 <main+0x3a8>)
 8001d98:	f7fe fd0c 	bl	80007b4 <uartTransmit>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8001da2:	e03c      	b.n	8001e1e <main+0x3c6>
 8001da4:	0800680c 	.word	0x0800680c
 8001da8:	08006824 	.word	0x08006824
 8001dac:	0800683c 	.word	0x0800683c
 8001db0:	08006854 	.word	0x08006854
 8001db4:	0800686c 	.word	0x0800686c
 8001db8:	20000128 	.word	0x20000128
 8001dbc:	0800677c 	.word	0x0800677c
 8001dc0:	080067b8 	.word	0x080067b8
 8001dc4:	20000028 	.word	0x20000028
 8001dc8:	cccccccd 	.word	0xcccccccd
 8001dcc:	20000044 	.word	0x20000044
 8001dd0:	200000dc 	.word	0x200000dc
 8001dd4:	51eb851f 	.word	0x51eb851f
 8001dd8:	66666667 	.word	0x66666667
 8001ddc:	20000054 	.word	0x20000054
 8001de0:	20000058 	.word	0x20000058
 8001de4:	2000005c 	.word	0x2000005c
 8001de8:	20000050 	.word	0x20000050
 8001dec:	20000060 	.word	0x20000060
 8001df0:	20000068 	.word	0x20000068
 8001df4:	20000064 	.word	0x20000064
 8001df8:	2000010c 	.word	0x2000010c
 8001dfc:	20000029 	.word	0x20000029
 8001e00:	080067d0 	.word	0x080067d0
				{
					uartTransmitNumber(RxData[i], 16);
 8001e04:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8001e08:	4a2c      	ldr	r2, [pc, #176]	; (8001ebc <main+0x464>)
 8001e0a:	5cd3      	ldrb	r3, [r2, r3]
 8001e0c:	2110      	movs	r1, #16
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fce4 	bl	80007dc <uartTransmitNumber>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 8001e14:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8001e18:	3301      	adds	r3, #1
 8001e1a:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8001e1e:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 8001e22:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <main+0x468>)
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d3ec      	bcc.n	8001e04 <main+0x3ac>
				}
				uartTransmit("\n", 1);
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	4825      	ldr	r0, [pc, #148]	; (8001ec4 <main+0x46c>)
 8001e2e:	f7fe fcc1 	bl	80007b4 <uartTransmit>

				// Sortieren der IDs nach Geraeten
				switch (RxMessage.StdId)
 8001e32:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <main+0x468>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f240 1211 	movw	r2, #273	; 0x111
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d00b      	beq.n	8001e56 <main+0x3fe>
 8001e3e:	f240 1281 	movw	r2, #385	; 0x181
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d10c      	bne.n	8001e60 <main+0x408>
				{
					case BAMOCAR_RX_ID:
						BAMOCAN_ID(&RxData[0], RxMessage.DLC);
 8001e46:	4b1e      	ldr	r3, [pc, #120]	; (8001ec0 <main+0x468>)
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	481b      	ldr	r0, [pc, #108]	; (8001ebc <main+0x464>)
 8001e50:	f7fe fb76 	bl	8000540 <BAMOCAN_ID>
						break;
 8001e54:	e009      	b.n	8001e6a <main+0x412>
					case 0x111:
						uartTransmit("CAN-ID Computer config\n", 23);
 8001e56:	2117      	movs	r1, #23
 8001e58:	481b      	ldr	r0, [pc, #108]	; (8001ec8 <main+0x470>)
 8001e5a:	f7fe fcab 	bl	80007b4 <uartTransmit>
						break;
 8001e5e:	e004      	b.n	8001e6a <main+0x412>
					default:
						uartTransmit("CAN-ID nicht verfuegbar\n", 24);
 8001e60:	2118      	movs	r1, #24
 8001e62:	481a      	ldr	r0, [pc, #104]	; (8001ecc <main+0x474>)
 8001e64:	f7fe fca6 	bl	80007b4 <uartTransmit>
						break;
 8001e68:	bf00      	nop
				}

				TxData[2] = motor1.output[2];
 8001e6a:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <main+0x478>)
 8001e6c:	789b      	ldrb	r3, [r3, #2]
 8001e6e:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
				TxData[3] = motor1.output[3];
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <main+0x478>)
 8001e74:	78db      	ldrb	r3, [r3, #3]
 8001e76:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
				lastcan = millis();
 8001e7a:	f7ff f9ad 	bl	80011d8 <millis>
 8001e7e:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

				can_change = 0;
 8001e82:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <main+0x47c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
			}
		}

#ifdef DEBUG
		// Sende CAN Nachricht auf CAN-Bus / Teste CAN-BUS
		if (millis() - lastsendcan >= 1000)
 8001e88:	f7ff f9a6 	bl	80011d8 <millis>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e98:	f4ff ae6d 	bcc.w	8001b76 <main+0x11e>
		{
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 8001e9c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001ea0:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	480c      	ldr	r0, [pc, #48]	; (8001ed8 <main+0x480>)
 8001ea8:	f001 f9a0 	bl	80031ec <HAL_CAN_AddTxMessage>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			//hal_error(status);
			lastsendcan = millis();
 8001eb2:	f7ff f991 	bl	80011d8 <millis>
 8001eb6:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
		if (millisekunden_flag_1 == 1)
 8001eba:	e65c      	b.n	8001b76 <main+0x11e>
 8001ebc:	20000104 	.word	0x20000104
 8001ec0:	2000010c 	.word	0x2000010c
 8001ec4:	080067d4 	.word	0x080067d4
 8001ec8:	080067d8 	.word	0x080067d8
 8001ecc:	080067f0 	.word	0x080067f0
 8001ed0:	20000044 	.word	0x20000044
 8001ed4:	20000029 	.word	0x20000029
 8001ed8:	200000dc 	.word	0x200000dc

08001edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b0b8      	sub	sp, #224	; 0xe0
 8001ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ee2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ee6:	2234      	movs	r2, #52	; 0x34
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4618      	mov	r0, r3
 8001eec:	f004 f9d6 	bl	800629c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ef0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f00:	f107 0308 	add.w	r3, r7, #8
 8001f04:	2290      	movs	r2, #144	; 0x90
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f004 f9c7 	bl	800629c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0e:	4b3b      	ldr	r3, [pc, #236]	; (8001ffc <SystemClock_Config+0x120>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a3a      	ldr	r2, [pc, #232]	; (8001ffc <SystemClock_Config+0x120>)
 8001f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b38      	ldr	r3, [pc, #224]	; (8001ffc <SystemClock_Config+0x120>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f26:	4b36      	ldr	r3, [pc, #216]	; (8002000 <SystemClock_Config+0x124>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f2e:	4a34      	ldr	r2, [pc, #208]	; (8002000 <SystemClock_Config+0x124>)
 8001f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	4b32      	ldr	r3, [pc, #200]	; (8002000 <SystemClock_Config+0x124>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f42:	2301      	movs	r3, #1
 8001f44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f50:	2302      	movs	r3, #2
 8001f52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001f5e:	2319      	movs	r3, #25
 8001f60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001f64:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001f68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f72:	2302      	movs	r3, #2
 8001f74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f7e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f82:	4618      	mov	r0, r3
 8001f84:	f002 f8aa 	bl	80040dc <HAL_RCC_OscConfig>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001f8e:	f000 f877 	bl	8002080 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f92:	f002 f853 	bl	800403c <HAL_PWREx_EnableOverDrive>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001f9c:	f000 f870 	bl	8002080 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fa0:	230f      	movs	r3, #15
 8001fa2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001fc0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001fc4:	2103      	movs	r1, #3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f002 fb36 	bl	8004638 <HAL_RCC_ClockConfig>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001fd2:	f000 f855 	bl	8002080 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fde:	f107 0308 	add.w	r3, r7, #8
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f002 fcfe 	bl	80049e4 <HAL_RCCEx_PeriphCLKConfig>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8001fee:	f000 f847 	bl	8002080 <Error_Handler>
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	37e0      	adds	r7, #224	; 0xe0
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40007000 	.word	0x40007000

08002004 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
// Interrupts
// Can-Interrupt: Nachricht wartet
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	// Nachricht aus Speicher auslesen
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800200e:	4a07      	ldr	r2, [pc, #28]	; (800202c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8002010:	2100      	movs	r1, #0
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f001 f9c5 	bl	80033a2 <HAL_CAN_GetRxMessage>
	can_change = 1;
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000104 	.word	0x20000104
 800202c:	2000010c 	.word	0x2000010c
 8002030:	20000029 	.word	0x20000029

08002034 <HAL_CAN_RxFifo0FullCallback>:

// Can-Interrupt: Fifo0 ist voll
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	// Fifo0 voll
	uartTransmit("Fifo0 von CAN3 ist voll\n", 24);
 800203c:	2118      	movs	r1, #24
 800203e:	4804      	ldr	r0, [pc, #16]	; (8002050 <HAL_CAN_RxFifo0FullCallback+0x1c>)
 8002040:	f7fe fbb8 	bl	80007b4 <uartTransmit>

	Error_Handler();
 8002044:	f000 f81c 	bl	8002080 <Error_Handler>
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	08006884 	.word	0x08006884

08002054 <HAL_TIM_PeriodElapsedCallback>:

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a06      	ldr	r2, [pc, #24]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d102      	bne.n	800206a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]
	}
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	20000128 	.word	0x20000128
 800207c:	20000028 	.word	0x20000028

08002080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002084:	b672      	cpsid	i
}
 8002086:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8002088:	4a11      	ldr	r2, [pc, #68]	; (80020d0 <Error_Handler+0x50>)
 800208a:	7853      	ldrb	r3, [r2, #1]
 800208c:	f043 0308 	orr.w	r3, r3, #8
 8002090:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8002092:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <Error_Handler+0x50>)
 8002094:	785b      	ldrb	r3, [r3, #1]
 8002096:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800209a:	b2db      	uxtb	r3, r3
 800209c:	461a      	mov	r2, r3
 800209e:	2104      	movs	r1, #4
 80020a0:	480c      	ldr	r0, [pc, #48]	; (80020d4 <Error_Handler+0x54>)
 80020a2:	f001 ffb1 	bl	8004008 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 80020a6:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <Error_Handler+0x50>)
 80020a8:	7853      	ldrb	r3, [r2, #1]
 80020aa:	f36f 1304 	bfc	r3, #4, #1
 80020ae:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 80020b0:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <Error_Handler+0x50>)
 80020b2:	785b      	ldrb	r3, [r3, #1]
 80020b4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020c0:	4804      	ldr	r0, [pc, #16]	; (80020d4 <Error_Handler+0x54>)
 80020c2:	f001 ffa1 	bl	8004008 <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 80020c6:	2122      	movs	r1, #34	; 0x22
 80020c8:	4803      	ldr	r0, [pc, #12]	; (80020d8 <Error_Handler+0x58>)
 80020ca:	f7fe fb73 	bl	80007b4 <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1);
 80020ce:	e7fe      	b.n	80020ce <Error_Handler+0x4e>
 80020d0:	2000005c 	.word	0x2000005c
 80020d4:	40020400 	.word	0x40020400
 80020d8:	080068a0 	.word	0x080068a0

080020dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80020e2:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <HAL_MspInit+0x44>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a0e      	ldr	r2, [pc, #56]	; (8002120 <HAL_MspInit+0x44>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <HAL_MspInit+0x44>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <HAL_MspInit+0x44>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	4a08      	ldr	r2, [pc, #32]	; (8002120 <HAL_MspInit+0x44>)
 8002100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002104:	6453      	str	r3, [r2, #68]	; 0x44
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_MspInit+0x44>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800

08002124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002128:	e7fe      	b.n	8002128 <NMI_Handler+0x4>

0800212a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800212e:	e7fe      	b.n	800212e <HardFault_Handler+0x4>

08002130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002134:	e7fe      	b.n	8002134 <MemManage_Handler+0x4>

08002136 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800213a:	e7fe      	b.n	800213a <BusFault_Handler+0x4>

0800213c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002140:	e7fe      	b.n	8002140 <UsageFault_Handler+0x4>

08002142 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002170:	f000 f962 	bl	8002438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002174:	bf00      	nop
 8002176:	bd80      	pop	{r7, pc}

08002178 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800217c:	4802      	ldr	r0, [pc, #8]	; (8002188 <TIM6_DAC_IRQHandler+0x10>)
 800217e:	f003 f929 	bl	80053d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000128 	.word	0x20000128

0800218c <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <CAN3_RX0_IRQHandler+0x10>)
 8002192:	f001 fa3e 	bl	8003612 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200000dc 	.word	0x200000dc

080021a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <SystemInit+0x28>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	4a07      	ldr	r2, [pc, #28]	; (80021c8 <SystemInit+0x28>)
 80021ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <SystemInit+0x28>)
 80021b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021ba:	609a      	str	r2, [r3, #8]
#endif
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80021dc:	4b14      	ldr	r3, [pc, #80]	; (8002230 <MX_TIM6_Init+0x64>)
 80021de:	4a15      	ldr	r2, [pc, #84]	; (8002234 <MX_TIM6_Init+0x68>)
 80021e0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27 - 1;
 80021e2:	4b13      	ldr	r3, [pc, #76]	; (8002230 <MX_TIM6_Init+0x64>)
 80021e4:	221a      	movs	r2, #26
 80021e6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <MX_TIM6_Init+0x64>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000 - 1;
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <MX_TIM6_Init+0x64>)
 80021f0:	f640 729f 	movw	r2, #3999	; 0xf9f
 80021f4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021f6:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <MX_TIM6_Init+0x64>)
 80021f8:	2280      	movs	r2, #128	; 0x80
 80021fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80021fc:	480c      	ldr	r0, [pc, #48]	; (8002230 <MX_TIM6_Init+0x64>)
 80021fe:	f003 f819 	bl	8005234 <HAL_TIM_Base_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002208:	f7ff ff3a 	bl	8002080 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800220c:	2300      	movs	r3, #0
 800220e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002214:	1d3b      	adds	r3, r7, #4
 8002216:	4619      	mov	r1, r3
 8002218:	4805      	ldr	r0, [pc, #20]	; (8002230 <MX_TIM6_Init+0x64>)
 800221a:	f003 fac3 	bl	80057a4 <HAL_TIMEx_MasterConfigSynchronization>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002224:	f7ff ff2c 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002228:	bf00      	nop
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000128 	.word	0x20000128
 8002234:	40001000 	.word	0x40001000

08002238 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0d      	ldr	r2, [pc, #52]	; (800227c <HAL_TIM_Base_MspInit+0x44>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d113      	bne.n	8002272 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800224a:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <HAL_TIM_Base_MspInit+0x48>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	4a0c      	ldr	r2, [pc, #48]	; (8002280 <HAL_TIM_Base_MspInit+0x48>)
 8002250:	f043 0310 	orr.w	r3, r3, #16
 8002254:	6413      	str	r3, [r2, #64]	; 0x40
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <HAL_TIM_Base_MspInit+0x48>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002262:	2200      	movs	r2, #0
 8002264:	2100      	movs	r1, #0
 8002266:	2036      	movs	r0, #54	; 0x36
 8002268:	f001 fcd3 	bl	8003c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800226c:	2036      	movs	r0, #54	; 0x36
 800226e:	f001 fcec 	bl	8003c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40001000 	.word	0x40001000
 8002280:	40023800 	.word	0x40023800

08002284 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002288:	4b14      	ldr	r3, [pc, #80]	; (80022dc <MX_USART2_UART_Init+0x58>)
 800228a:	4a15      	ldr	r2, [pc, #84]	; (80022e0 <MX_USART2_UART_Init+0x5c>)
 800228c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800228e:	4b13      	ldr	r3, [pc, #76]	; (80022dc <MX_USART2_UART_Init+0x58>)
 8002290:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002294:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <MX_USART2_UART_Init+0x58>)
 8002298:	2200      	movs	r2, #0
 800229a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <MX_USART2_UART_Init+0x58>)
 800229e:	2200      	movs	r2, #0
 80022a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <MX_USART2_UART_Init+0x58>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <MX_USART2_UART_Init+0x58>)
 80022aa:	220c      	movs	r2, #12
 80022ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <MX_USART2_UART_Init+0x58>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b4:	4b09      	ldr	r3, [pc, #36]	; (80022dc <MX_USART2_UART_Init+0x58>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ba:	4b08      	ldr	r3, [pc, #32]	; (80022dc <MX_USART2_UART_Init+0x58>)
 80022bc:	2200      	movs	r2, #0
 80022be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <MX_USART2_UART_Init+0x58>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022c6:	4805      	ldr	r0, [pc, #20]	; (80022dc <MX_USART2_UART_Init+0x58>)
 80022c8:	f003 fb18 	bl	80058fc <HAL_UART_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80022d2:	f7ff fed5 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000174 	.word	0x20000174
 80022e0:	40004400 	.word	0x40004400

080022e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08a      	sub	sp, #40	; 0x28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 0314 	add.w	r3, r7, #20
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a17      	ldr	r2, [pc, #92]	; (8002360 <HAL_UART_MspInit+0x7c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d127      	bne.n	8002356 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002306:	4b17      	ldr	r3, [pc, #92]	; (8002364 <HAL_UART_MspInit+0x80>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	4a16      	ldr	r2, [pc, #88]	; (8002364 <HAL_UART_MspInit+0x80>)
 800230c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002310:	6413      	str	r3, [r2, #64]	; 0x40
 8002312:	4b14      	ldr	r3, [pc, #80]	; (8002364 <HAL_UART_MspInit+0x80>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800231e:	4b11      	ldr	r3, [pc, #68]	; (8002364 <HAL_UART_MspInit+0x80>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4a10      	ldr	r2, [pc, #64]	; (8002364 <HAL_UART_MspInit+0x80>)
 8002324:	f043 0308 	orr.w	r3, r3, #8
 8002328:	6313      	str	r3, [r2, #48]	; 0x30
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <HAL_UART_MspInit+0x80>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART2TX_Pin|DEBUG_UART2RX_Pin;
 8002336:	2360      	movs	r3, #96	; 0x60
 8002338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233a:	2302      	movs	r3, #2
 800233c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002342:	2303      	movs	r3, #3
 8002344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002346:	2307      	movs	r3, #7
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800234a:	f107 0314 	add.w	r3, r7, #20
 800234e:	4619      	mov	r1, r3
 8002350:	4805      	ldr	r0, [pc, #20]	; (8002368 <HAL_UART_MspInit+0x84>)
 8002352:	f001 fc95 	bl	8003c80 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002356:	bf00      	nop
 8002358:	3728      	adds	r7, #40	; 0x28
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40004400 	.word	0x40004400
 8002364:	40023800 	.word	0x40023800
 8002368:	40020c00 	.word	0x40020c00

0800236c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800236c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002370:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002372:	e003      	b.n	800237c <LoopCopyDataInit>

08002374 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002376:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002378:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800237a:	3104      	adds	r1, #4

0800237c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800237c:	480b      	ldr	r0, [pc, #44]	; (80023ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800237e:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002380:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002382:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002384:	d3f6      	bcc.n	8002374 <CopyDataInit>
  ldr  r2, =_sbss
 8002386:	4a0b      	ldr	r2, [pc, #44]	; (80023b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002388:	e002      	b.n	8002390 <LoopFillZerobss>

0800238a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800238a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800238c:	f842 3b04 	str.w	r3, [r2], #4

08002390 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002390:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002392:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002394:	d3f9      	bcc.n	800238a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002396:	f7ff ff03 	bl	80021a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800239a:	f003 ff5b 	bl	8006254 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800239e:	f7ff fb5b 	bl	8001a58 <main>
  bx  lr    
 80023a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023a4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80023a8:	08006914 	.word	0x08006914
  ldr  r0, =_sdata
 80023ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80023b0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80023b4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80023b8:	200001fc 	.word	0x200001fc

080023bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023bc:	e7fe      	b.n	80023bc <ADC_IRQHandler>

080023be <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c2:	2003      	movs	r0, #3
 80023c4:	f001 fc1a 	bl	8003bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023c8:	2000      	movs	r0, #0
 80023ca:	f000 f805 	bl	80023d8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80023ce:	f7ff fe85 	bl	80020dc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023e0:	4b12      	ldr	r3, [pc, #72]	; (800242c <HAL_InitTick+0x54>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b12      	ldr	r3, [pc, #72]	; (8002430 <HAL_InitTick+0x58>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	4619      	mov	r1, r3
 80023ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80023f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f6:	4618      	mov	r0, r3
 80023f8:	f001 fc35 	bl	8003c66 <HAL_SYSTICK_Config>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e00e      	b.n	8002424 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b0f      	cmp	r3, #15
 800240a:	d80a      	bhi.n	8002422 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800240c:	2200      	movs	r2, #0
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	f04f 30ff 	mov.w	r0, #4294967295
 8002414:	f001 fbfd 	bl	8003c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002418:	4a06      	ldr	r2, [pc, #24]	; (8002434 <HAL_InitTick+0x5c>)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	e000      	b.n	8002424 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
}
 8002424:	4618      	mov	r0, r3
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000000 	.word	0x20000000
 8002430:	20000008 	.word	0x20000008
 8002434:	20000004 	.word	0x20000004

08002438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_IncTick+0x20>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_IncTick+0x24>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4413      	add	r3, r2
 8002448:	4a04      	ldr	r2, [pc, #16]	; (800245c <HAL_IncTick+0x24>)
 800244a:	6013      	str	r3, [r2, #0]
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000008 	.word	0x20000008
 800245c:	200001f8 	.word	0x200001f8

08002460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return uwTick;
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <HAL_GetTick+0x14>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	200001f8 	.word	0x200001f8

08002478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002480:	f7ff ffee 	bl	8002460 <HAL_GetTick>
 8002484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002490:	d005      	beq.n	800249e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <HAL_Delay+0x44>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4413      	add	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800249e:	bf00      	nop
 80024a0:	f7ff ffde 	bl	8002460 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d8f7      	bhi.n	80024a0 <HAL_Delay+0x28>
  {
  }
}
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000008 	.word	0x20000008

080024c0 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
 return __STM32F7xx_HAL_VERSION;
 80024c4:	4b02      	ldr	r3, [pc, #8]	; (80024d0 <HAL_GetHalVersion+0x10>)
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	01020900 	.word	0x01020900

080024d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 80024d8:	4b03      	ldr	r3, [pc, #12]	; (80024e8 <HAL_GetREVID+0x14>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	0c1b      	lsrs	r3, r3, #16
}
 80024de:	4618      	mov	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e0042000 	.word	0xe0042000

080024ec <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80024f0:	4b04      	ldr	r3, [pc, #16]	; (8002504 <HAL_GetDEVID+0x18>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e0042000 	.word	0xe0042000

08002508 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 800250c:	4b03      	ldr	r3, [pc, #12]	; (800251c <HAL_GetUIDw0+0x14>)
 800250e:	681b      	ldr	r3, [r3, #0]
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	1ff0f420 	.word	0x1ff0f420

08002520 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002524:	4b03      	ldr	r3, [pc, #12]	; (8002534 <HAL_GetUIDw1+0x14>)
 8002526:	681b      	ldr	r3, [r3, #0]
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	1ff0f424 	.word	0x1ff0f424

08002538 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <HAL_GetUIDw2+0x14>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	1ff0f428 	.word	0x1ff0f428

08002550 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e031      	b.n	80025ca <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	2b00      	cmp	r3, #0
 800256c:	d109      	bne.n	8002582 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fe ff76 	bl	8001460 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	2b00      	cmp	r3, #0
 800258c:	d116      	bne.n	80025bc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002592:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <HAL_ADC_Init+0x84>)
 8002594:	4013      	ands	r3, r2
 8002596:	f043 0202 	orr.w	r2, r3, #2
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 fafe 	bl	8002ba0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f023 0303 	bic.w	r3, r3, #3
 80025b2:	f043 0201 	orr.w	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	641a      	str	r2, [r3, #64]	; 0x40
 80025ba:	e001      	b.n	80025c0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	ffffeefd 	.word	0xffffeefd

080025d8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <HAL_ADC_Start+0x1a>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e0ad      	b.n	800274e <HAL_ADC_Start+0x176>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b01      	cmp	r3, #1
 8002606:	d018      	beq.n	800263a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002618:	4b50      	ldr	r3, [pc, #320]	; (800275c <HAL_ADC_Start+0x184>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a50      	ldr	r2, [pc, #320]	; (8002760 <HAL_ADC_Start+0x188>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	0c9a      	lsrs	r2, r3, #18
 8002624:	4613      	mov	r3, r2
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	4413      	add	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800262c:	e002      	b.n	8002634 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	3b01      	subs	r3, #1
 8002632:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f9      	bne.n	800262e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b01      	cmp	r3, #1
 8002646:	d175      	bne.n	8002734 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800264c:	4b45      	ldr	r3, [pc, #276]	; (8002764 <HAL_ADC_Start+0x18c>)
 800264e:	4013      	ands	r3, r2
 8002650:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002662:	2b00      	cmp	r3, #0
 8002664:	d007      	beq.n	8002676 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800266e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800267e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002682:	d106      	bne.n	8002692 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002688:	f023 0206 	bic.w	r2, r3, #6
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	645a      	str	r2, [r3, #68]	; 0x44
 8002690:	e002      	b.n	8002698 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026a8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80026aa:	4b2f      	ldr	r3, [pc, #188]	; (8002768 <HAL_ADC_Start+0x190>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 031f 	and.w	r3, r3, #31
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10f      	bne.n	80026d6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d143      	bne.n	800274c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	e03a      	b.n	800274c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a24      	ldr	r2, [pc, #144]	; (800276c <HAL_ADC_Start+0x194>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d10e      	bne.n	80026fe <HAL_ADC_Start+0x126>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d107      	bne.n	80026fe <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026fc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80026fe:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <HAL_ADC_Start+0x190>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b00      	cmp	r3, #0
 8002708:	d120      	bne.n	800274c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a18      	ldr	r2, [pc, #96]	; (8002770 <HAL_ADC_Start+0x198>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d11b      	bne.n	800274c <HAL_ADC_Start+0x174>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d114      	bne.n	800274c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002730:	609a      	str	r2, [r3, #8]
 8002732:	e00b      	b.n	800274c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	f043 0210 	orr.w	r2, r3, #16
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002744:	f043 0201 	orr.w	r2, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000000 	.word	0x20000000
 8002760:	431bde83 	.word	0x431bde83
 8002764:	fffff8fe 	.word	0xfffff8fe
 8002768:	40012300 	.word	0x40012300
 800276c:	40012000 	.word	0x40012000
 8002770:	40012200 	.word	0x40012200

08002774 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_ADC_Stop+0x16>
 8002786:	2302      	movs	r3, #2
 8002788:	e01f      	b.n	80027ca <HAL_ADC_Stop+0x56>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0201 	bic.w	r2, r2, #1
 80027a0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d107      	bne.n	80027c0 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <HAL_ADC_Stop+0x64>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	f043 0201 	orr.w	r2, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	ffffeefe 	.word	0xffffeefe

080027dc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f8:	d113      	bne.n	8002822 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002808:	d10b      	bne.n	8002822 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f043 0220 	orr.w	r2, r3, #32
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e063      	b.n	80028ea <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002822:	f7ff fe1d 	bl	8002460 <HAL_GetTick>
 8002826:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002828:	e021      	b.n	800286e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002830:	d01d      	beq.n	800286e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d007      	beq.n	8002848 <HAL_ADC_PollForConversion+0x6c>
 8002838:	f7ff fe12 	bl	8002460 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d212      	bcs.n	800286e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b02      	cmp	r3, #2
 8002854:	d00b      	beq.n	800286e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f043 0204 	orr.w	r2, r3, #4
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e03d      	b.n	80028ea <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b02      	cmp	r3, #2
 800287a:	d1d6      	bne.n	800282a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f06f 0212 	mvn.w	r2, #18
 8002884:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d123      	bne.n	80028e8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d11f      	bne.n	80028e8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d006      	beq.n	80028c4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d111      	bne.n	80028e8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d105      	bne.n	80028e8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f043 0201 	orr.w	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x1c>
 8002924:	2302      	movs	r3, #2
 8002926:	e12a      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x272>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b09      	cmp	r3, #9
 8002936:	d93a      	bls.n	80029ae <HAL_ADC_ConfigChannel+0xa2>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002940:	d035      	beq.n	80029ae <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68d9      	ldr	r1, [r3, #12]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	b29b      	uxth	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	4613      	mov	r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4413      	add	r3, r2
 8002956:	3b1e      	subs	r3, #30
 8002958:	2207      	movs	r2, #7
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43da      	mvns	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	400a      	ands	r2, r1
 8002966:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a87      	ldr	r2, [pc, #540]	; (8002b8c <HAL_ADC_ConfigChannel+0x280>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d10a      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68d9      	ldr	r1, [r3, #12]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	061a      	lsls	r2, r3, #24
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002986:	e035      	b.n	80029f4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68d9      	ldr	r1, [r3, #12]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	4618      	mov	r0, r3
 800299a:	4603      	mov	r3, r0
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4403      	add	r3, r0
 80029a0:	3b1e      	subs	r3, #30
 80029a2:	409a      	lsls	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029ac:	e022      	b.n	80029f4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6919      	ldr	r1, [r3, #16]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	4613      	mov	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4413      	add	r3, r2
 80029c2:	2207      	movs	r2, #7
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43da      	mvns	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	400a      	ands	r2, r1
 80029d0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6919      	ldr	r1, [r3, #16]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	4618      	mov	r0, r3
 80029e4:	4603      	mov	r3, r0
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	4403      	add	r3, r0
 80029ea:	409a      	lsls	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b06      	cmp	r3, #6
 80029fa:	d824      	bhi.n	8002a46 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3b05      	subs	r3, #5
 8002a0e:	221f      	movs	r2, #31
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43da      	mvns	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	400a      	ands	r2, r1
 8002a1c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	3b05      	subs	r3, #5
 8002a38:	fa00 f203 	lsl.w	r2, r0, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	635a      	str	r2, [r3, #52]	; 0x34
 8002a44:	e04c      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b0c      	cmp	r3, #12
 8002a4c:	d824      	bhi.n	8002a98 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3b23      	subs	r3, #35	; 0x23
 8002a60:	221f      	movs	r2, #31
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43da      	mvns	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	3b23      	subs	r3, #35	; 0x23
 8002a8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	631a      	str	r2, [r3, #48]	; 0x30
 8002a96:	e023      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3b41      	subs	r3, #65	; 0x41
 8002aaa:	221f      	movs	r2, #31
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43da      	mvns	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	400a      	ands	r2, r1
 8002ab8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3b41      	subs	r3, #65	; 0x41
 8002ad4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a2a      	ldr	r2, [pc, #168]	; (8002b90 <HAL_ADC_ConfigChannel+0x284>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d10a      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x1f4>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002af2:	d105      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002af4:	4b27      	ldr	r3, [pc, #156]	; (8002b94 <HAL_ADC_ConfigChannel+0x288>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	4a26      	ldr	r2, [pc, #152]	; (8002b94 <HAL_ADC_ConfigChannel+0x288>)
 8002afa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002afe:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a22      	ldr	r2, [pc, #136]	; (8002b90 <HAL_ADC_ConfigChannel+0x284>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d109      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x212>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b12      	cmp	r3, #18
 8002b10:	d105      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002b12:	4b20      	ldr	r3, [pc, #128]	; (8002b94 <HAL_ADC_ConfigChannel+0x288>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4a1f      	ldr	r2, [pc, #124]	; (8002b94 <HAL_ADC_ConfigChannel+0x288>)
 8002b18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b1c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a1b      	ldr	r2, [pc, #108]	; (8002b90 <HAL_ADC_ConfigChannel+0x284>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d125      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x268>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a17      	ldr	r2, [pc, #92]	; (8002b8c <HAL_ADC_ConfigChannel+0x280>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d003      	beq.n	8002b3a <HAL_ADC_ConfigChannel+0x22e>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b11      	cmp	r3, #17
 8002b38:	d11c      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002b3a:	4b16      	ldr	r3, [pc, #88]	; (8002b94 <HAL_ADC_ConfigChannel+0x288>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4a15      	ldr	r2, [pc, #84]	; (8002b94 <HAL_ADC_ConfigChannel+0x288>)
 8002b40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b44:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a10      	ldr	r2, [pc, #64]	; (8002b8c <HAL_ADC_ConfigChannel+0x280>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d111      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002b50:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <HAL_ADC_ConfigChannel+0x28c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a11      	ldr	r2, [pc, #68]	; (8002b9c <HAL_ADC_ConfigChannel+0x290>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	0c9a      	lsrs	r2, r3, #18
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b66:	e002      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f9      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	10000012 	.word	0x10000012
 8002b90:	40012000 	.word	0x40012000
 8002b94:	40012300 	.word	0x40012300
 8002b98:	20000000 	.word	0x20000000
 8002b9c:	431bde83 	.word	0x431bde83

08002ba0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002ba8:	4b78      	ldr	r3, [pc, #480]	; (8002d8c <ADC_Init+0x1ec>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	4a77      	ldr	r2, [pc, #476]	; (8002d8c <ADC_Init+0x1ec>)
 8002bae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002bb2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002bb4:	4b75      	ldr	r3, [pc, #468]	; (8002d8c <ADC_Init+0x1ec>)
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	4973      	ldr	r1, [pc, #460]	; (8002d8c <ADC_Init+0x1ec>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6859      	ldr	r1, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	021a      	lsls	r2, r3, #8
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002bf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6859      	ldr	r1, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6899      	ldr	r1, [r3, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2e:	4a58      	ldr	r2, [pc, #352]	; (8002d90 <ADC_Init+0x1f0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d022      	beq.n	8002c7a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6899      	ldr	r1, [r3, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6899      	ldr	r1, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	e00f      	b.n	8002c9a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c98:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0202 	bic.w	r2, r2, #2
 8002ca8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6899      	ldr	r1, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	005a      	lsls	r2, r3, #1
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d01b      	beq.n	8002d00 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cd6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ce6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6859      	ldr	r1, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	035a      	lsls	r2, r3, #13
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	e007      	b.n	8002d10 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	051a      	lsls	r2, r3, #20
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6899      	ldr	r1, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d52:	025a      	lsls	r2, r3, #9
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6899      	ldr	r1, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	029a      	lsls	r2, r3, #10
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	609a      	str	r2, [r3, #8]
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	40012300 	.word	0x40012300
 8002d90:	0f000001 	.word	0x0f000001

08002d94 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e0ed      	b.n	8002f82 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d102      	bne.n	8002db8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fe fc38 	bl	8001628 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0202 	bic.w	r2, r2, #2
 8002dc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dc8:	f7ff fb4a 	bl	8002460 <HAL_GetTick>
 8002dcc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002dce:	e012      	b.n	8002df6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002dd0:	f7ff fb46 	bl	8002460 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b0a      	cmp	r3, #10
 8002ddc:	d90b      	bls.n	8002df6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2205      	movs	r2, #5
 8002dee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e0c5      	b.n	8002f82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1e5      	bne.n	8002dd0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e14:	f7ff fb24 	bl	8002460 <HAL_GetTick>
 8002e18:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e1a:	e012      	b.n	8002e42 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e1c:	f7ff fb20 	bl	8002460 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b0a      	cmp	r3, #10
 8002e28:	d90b      	bls.n	8002e42 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2205      	movs	r2, #5
 8002e3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e09f      	b.n	8002f82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0e5      	beq.n	8002e1c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	7e1b      	ldrb	r3, [r3, #24]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d108      	bne.n	8002e6a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	e007      	b.n	8002e7a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	7e5b      	ldrb	r3, [r3, #25]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d108      	bne.n	8002e94 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	e007      	b.n	8002ea4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ea2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	7e9b      	ldrb	r3, [r3, #26]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d108      	bne.n	8002ebe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0220 	orr.w	r2, r2, #32
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	e007      	b.n	8002ece <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0220 	bic.w	r2, r2, #32
 8002ecc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	7edb      	ldrb	r3, [r3, #27]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d108      	bne.n	8002ee8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0210 	bic.w	r2, r2, #16
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	e007      	b.n	8002ef8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0210 	orr.w	r2, r2, #16
 8002ef6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	7f1b      	ldrb	r3, [r3, #28]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d108      	bne.n	8002f12 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0208 	orr.w	r2, r2, #8
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	e007      	b.n	8002f22 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0208 	bic.w	r2, r2, #8
 8002f20:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	7f5b      	ldrb	r3, [r3, #29]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d108      	bne.n	8002f3c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 0204 	orr.w	r2, r2, #4
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	e007      	b.n	8002f4c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0204 	bic.w	r2, r2, #4
 8002f4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	ea42 0103 	orr.w	r1, r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	1e5a      	subs	r2, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fa2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002fa4:	7cfb      	ldrb	r3, [r7, #19]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d003      	beq.n	8002fb2 <HAL_CAN_ConfigFilter+0x26>
 8002faa:	7cfb      	ldrb	r3, [r7, #19]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	f040 80c7 	bne.w	8003140 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a69      	ldr	r2, [pc, #420]	; (800315c <HAL_CAN_ConfigFilter+0x1d0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d001      	beq.n	8002fc0 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002fbc:	4b68      	ldr	r3, [pc, #416]	; (8003160 <HAL_CAN_ConfigFilter+0x1d4>)
 8002fbe:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002fc6:	f043 0201 	orr.w	r2, r3, #1
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	4a63      	ldr	r2, [pc, #396]	; (8003160 <HAL_CAN_ConfigFilter+0x1d4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d111      	bne.n	8002ffc <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002fde:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	021b      	lsls	r3, r3, #8
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	2201      	movs	r2, #1
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	43db      	mvns	r3, r3
 8003016:	401a      	ands	r2, r3
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d123      	bne.n	800306e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	43db      	mvns	r3, r3
 8003030:	401a      	ands	r2, r3
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003048:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	3248      	adds	r2, #72	; 0x48
 800304e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003062:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003064:	6979      	ldr	r1, [r7, #20]
 8003066:	3348      	adds	r3, #72	; 0x48
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	440b      	add	r3, r1
 800306c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d122      	bne.n	80030bc <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	431a      	orrs	r2, r3
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003096:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	3248      	adds	r2, #72	; 0x48
 800309c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030b0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030b2:	6979      	ldr	r1, [r7, #20]
 80030b4:	3348      	adds	r3, #72	; 0x48
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	440b      	add	r3, r1
 80030ba:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d109      	bne.n	80030d8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	43db      	mvns	r3, r3
 80030ce:	401a      	ands	r2, r3
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80030d6:	e007      	b.n	80030e8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	431a      	orrs	r2, r3
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d109      	bne.n	8003104 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	401a      	ands	r2, r3
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003102:	e007      	b.n	8003114 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	431a      	orrs	r2, r3
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d107      	bne.n	800312c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	431a      	orrs	r2, r3
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003132:	f023 0201 	bic.w	r2, r3, #1
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	e006      	b.n	800314e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
  }
}
 800314e:	4618      	mov	r0, r3
 8003150:	371c      	adds	r7, #28
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40003400 	.word	0x40003400
 8003160:	40006400 	.word	0x40006400

08003164 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b01      	cmp	r3, #1
 8003176:	d12e      	bne.n	80031d6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0201 	bic.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003190:	f7ff f966 	bl	8002460 <HAL_GetTick>
 8003194:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003196:	e012      	b.n	80031be <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003198:	f7ff f962 	bl	8002460 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b0a      	cmp	r3, #10
 80031a4:	d90b      	bls.n	80031be <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2205      	movs	r2, #5
 80031b6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e012      	b.n	80031e4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1e5      	bne.n	8003198 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80031d2:	2300      	movs	r3, #0
 80031d4:	e006      	b.n	80031e4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
  }
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b089      	sub	sp, #36	; 0x24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003200:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800320a:	7ffb      	ldrb	r3, [r7, #31]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d003      	beq.n	8003218 <HAL_CAN_AddTxMessage+0x2c>
 8003210:	7ffb      	ldrb	r3, [r7, #31]
 8003212:	2b02      	cmp	r3, #2
 8003214:	f040 80b8 	bne.w	8003388 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10a      	bne.n	8003238 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003228:	2b00      	cmp	r3, #0
 800322a:	d105      	bne.n	8003238 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 80a0 	beq.w	8003378 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	0e1b      	lsrs	r3, r3, #24
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d907      	bls.n	8003258 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e09e      	b.n	8003396 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003258:	2201      	movs	r2, #1
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	409a      	lsls	r2, r3
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10d      	bne.n	8003286 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003274:	68f9      	ldr	r1, [r7, #12]
 8003276:	6809      	ldr	r1, [r1, #0]
 8003278:	431a      	orrs	r2, r3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	3318      	adds	r3, #24
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	440b      	add	r3, r1
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	e00f      	b.n	80032a6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003290:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003296:	68f9      	ldr	r1, [r7, #12]
 8003298:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800329a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	3318      	adds	r3, #24
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	440b      	add	r3, r1
 80032a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6819      	ldr	r1, [r3, #0]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	3318      	adds	r3, #24
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	440b      	add	r3, r1
 80032b6:	3304      	adds	r3, #4
 80032b8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	7d1b      	ldrb	r3, [r3, #20]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d111      	bne.n	80032e6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	3318      	adds	r3, #24
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	4413      	add	r3, r2
 80032ce:	3304      	adds	r3, #4
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	6811      	ldr	r1, [r2, #0]
 80032d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	3318      	adds	r3, #24
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	440b      	add	r3, r1
 80032e2:	3304      	adds	r3, #4
 80032e4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3307      	adds	r3, #7
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	061a      	lsls	r2, r3, #24
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3306      	adds	r3, #6
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	041b      	lsls	r3, r3, #16
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3305      	adds	r3, #5
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	021b      	lsls	r3, r3, #8
 8003300:	4313      	orrs	r3, r2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	3204      	adds	r2, #4
 8003306:	7812      	ldrb	r2, [r2, #0]
 8003308:	4610      	mov	r0, r2
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	6811      	ldr	r1, [r2, #0]
 800330e:	ea43 0200 	orr.w	r2, r3, r0
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	440b      	add	r3, r1
 8003318:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800331c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3303      	adds	r3, #3
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	061a      	lsls	r2, r3, #24
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	3302      	adds	r3, #2
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	041b      	lsls	r3, r3, #16
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3301      	adds	r3, #1
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	4313      	orrs	r3, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	7812      	ldrb	r2, [r2, #0]
 800333e:	4610      	mov	r0, r2
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	6811      	ldr	r1, [r2, #0]
 8003344:	ea43 0200 	orr.w	r2, r3, r0
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	440b      	add	r3, r1
 800334e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003352:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	3318      	adds	r3, #24
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	4413      	add	r3, r2
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	6811      	ldr	r1, [r2, #0]
 8003366:	f043 0201 	orr.w	r2, r3, #1
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	3318      	adds	r3, #24
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	440b      	add	r3, r1
 8003372:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	e00e      	b.n	8003396 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e006      	b.n	8003396 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
  }
}
 8003396:	4618      	mov	r0, r3
 8003398:	3724      	adds	r7, #36	; 0x24
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80033a2:	b480      	push	{r7}
 80033a4:	b087      	sub	sp, #28
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033b6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80033b8:	7dfb      	ldrb	r3, [r7, #23]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d003      	beq.n	80033c6 <HAL_CAN_GetRxMessage+0x24>
 80033be:	7dfb      	ldrb	r3, [r7, #23]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	f040 80f3 	bne.w	80035ac <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10e      	bne.n	80033ea <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d116      	bne.n	8003408 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e0e7      	b.n	80035ba <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d107      	bne.n	8003408 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0d8      	b.n	80035ba <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	331b      	adds	r3, #27
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	4413      	add	r3, r2
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0204 	and.w	r2, r3, #4
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10c      	bne.n	8003440 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	331b      	adds	r3, #27
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	4413      	add	r3, r2
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	0d5b      	lsrs	r3, r3, #21
 8003436:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	e00b      	b.n	8003458 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	331b      	adds	r3, #27
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	4413      	add	r3, r2
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	08db      	lsrs	r3, r3, #3
 8003450:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	331b      	adds	r3, #27
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	4413      	add	r3, r2
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0202 	and.w	r2, r3, #2
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	331b      	adds	r3, #27
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	4413      	add	r3, r2
 800347a:	3304      	adds	r3, #4
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 020f 	and.w	r2, r3, #15
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	331b      	adds	r3, #27
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	4413      	add	r3, r2
 8003492:	3304      	adds	r3, #4
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	0a1b      	lsrs	r3, r3, #8
 8003498:	b2da      	uxtb	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	331b      	adds	r3, #27
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	4413      	add	r3, r2
 80034aa:	3304      	adds	r3, #4
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	0c1b      	lsrs	r3, r3, #16
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	4413      	add	r3, r2
 80034c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	0a1a      	lsrs	r2, r3, #8
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	3301      	adds	r3, #1
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	0c1a      	lsrs	r2, r3, #16
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	3302      	adds	r3, #2
 80034fc:	b2d2      	uxtb	r2, r2
 80034fe:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	4413      	add	r3, r2
 800350a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	0e1a      	lsrs	r2, r3, #24
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	3303      	adds	r3, #3
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	4413      	add	r3, r2
 8003524:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	3304      	adds	r3, #4
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	4413      	add	r3, r2
 800353c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	0a1a      	lsrs	r2, r3, #8
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	3305      	adds	r3, #5
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	4413      	add	r3, r2
 8003556:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	0c1a      	lsrs	r2, r3, #16
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	3306      	adds	r3, #6
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	4413      	add	r3, r2
 8003570:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	0e1a      	lsrs	r2, r3, #24
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	3307      	adds	r3, #7
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d108      	bne.n	8003598 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0220 	orr.w	r2, r2, #32
 8003594:	60da      	str	r2, [r3, #12]
 8003596:	e007      	b.n	80035a8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0220 	orr.w	r2, r2, #32
 80035a6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	e006      	b.n	80035ba <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
  }
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b085      	sub	sp, #20
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035d6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d002      	beq.n	80035e4 <HAL_CAN_ActivateNotification+0x1e>
 80035de:	7bfb      	ldrb	r3, [r7, #15]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d109      	bne.n	80035f8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6959      	ldr	r1, [r3, #20]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	e006      	b.n	8003606 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
  }
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b08a      	sub	sp, #40	; 0x28
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800361a:	2300      	movs	r3, #0
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d07c      	beq.n	8003752 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d023      	beq.n	80036aa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2201      	movs	r2, #1
 8003668:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f983 	bl	8003980 <HAL_CAN_TxMailbox0CompleteCallback>
 800367a:	e016      	b.n	80036aa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	d004      	beq.n	8003690 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
 800368e:	e00c      	b.n	80036aa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d004      	beq.n	80036a4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
 80036a2:	e002      	b.n	80036aa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f989 	bl	80039bc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d024      	beq.n	80036fe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f963 	bl	8003994 <HAL_CAN_TxMailbox1CompleteCallback>
 80036ce:	e016      	b.n	80036fe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d004      	beq.n	80036e4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
 80036e2:	e00c      	b.n	80036fe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d004      	beq.n	80036f8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
 80036f6:	e002      	b.n	80036fe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f969 	bl	80039d0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d024      	beq.n	8003752 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003710:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f943 	bl	80039a8 <HAL_CAN_TxMailbox2CompleteCallback>
 8003722:	e016      	b.n	8003752 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d004      	beq.n	8003738 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
 8003736:	e00c      	b.n	8003752 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d004      	beq.n	800374c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
 800374a:	e002      	b.n	8003752 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f949 	bl	80039e4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00c      	beq.n	8003776 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b00      	cmp	r3, #0
 8003764:	d007      	beq.n	8003776 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800376c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2210      	movs	r2, #16
 8003774:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00b      	beq.n	8003798 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d006      	beq.n	8003798 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2208      	movs	r2, #8
 8003790:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fe fc4e 	bl	8002034 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7fe fc27 	bl	8002004 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00c      	beq.n	80037da <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d007      	beq.n	80037da <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2210      	movs	r2, #16
 80037d8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	f003 0320 	and.w	r3, r3, #32
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00b      	beq.n	80037fc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d006      	beq.n	80037fc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2208      	movs	r2, #8
 80037f4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f908 	bl	8003a0c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b00      	cmp	r3, #0
 8003804:	d009      	beq.n	800381a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f8ef 	bl	80039f8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00b      	beq.n	800383c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b00      	cmp	r3, #0
 800382c:	d006      	beq.n	800383c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2210      	movs	r2, #16
 8003834:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f8f2 	bl	8003a20 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00b      	beq.n	800385e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b00      	cmp	r3, #0
 800384e:	d006      	beq.n	800385e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2208      	movs	r2, #8
 8003856:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f8eb 	bl	8003a34 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d07b      	beq.n	8003960 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b00      	cmp	r3, #0
 8003870:	d072      	beq.n	8003958 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	f043 0302 	orr.w	r3, r3, #2
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	f043 0304 	orr.w	r3, r3, #4
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d043      	beq.n	8003958 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d03e      	beq.n	8003958 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038e0:	2b60      	cmp	r3, #96	; 0x60
 80038e2:	d02b      	beq.n	800393c <HAL_CAN_IRQHandler+0x32a>
 80038e4:	2b60      	cmp	r3, #96	; 0x60
 80038e6:	d82e      	bhi.n	8003946 <HAL_CAN_IRQHandler+0x334>
 80038e8:	2b50      	cmp	r3, #80	; 0x50
 80038ea:	d022      	beq.n	8003932 <HAL_CAN_IRQHandler+0x320>
 80038ec:	2b50      	cmp	r3, #80	; 0x50
 80038ee:	d82a      	bhi.n	8003946 <HAL_CAN_IRQHandler+0x334>
 80038f0:	2b40      	cmp	r3, #64	; 0x40
 80038f2:	d019      	beq.n	8003928 <HAL_CAN_IRQHandler+0x316>
 80038f4:	2b40      	cmp	r3, #64	; 0x40
 80038f6:	d826      	bhi.n	8003946 <HAL_CAN_IRQHandler+0x334>
 80038f8:	2b30      	cmp	r3, #48	; 0x30
 80038fa:	d010      	beq.n	800391e <HAL_CAN_IRQHandler+0x30c>
 80038fc:	2b30      	cmp	r3, #48	; 0x30
 80038fe:	d822      	bhi.n	8003946 <HAL_CAN_IRQHandler+0x334>
 8003900:	2b10      	cmp	r3, #16
 8003902:	d002      	beq.n	800390a <HAL_CAN_IRQHandler+0x2f8>
 8003904:	2b20      	cmp	r3, #32
 8003906:	d005      	beq.n	8003914 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003908:	e01d      	b.n	8003946 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	f043 0308 	orr.w	r3, r3, #8
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003912:	e019      	b.n	8003948 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	f043 0310 	orr.w	r3, r3, #16
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800391c:	e014      	b.n	8003948 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	f043 0320 	orr.w	r3, r3, #32
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003926:	e00f      	b.n	8003948 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003930:	e00a      	b.n	8003948 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800393a:	e005      	b.n	8003948 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003944:	e000      	b.n	8003948 <HAL_CAN_IRQHandler+0x336>
            break;
 8003946:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003956:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2204      	movs	r2, #4
 800395e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	431a      	orrs	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f868 	bl	8003a48 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003978:	bf00      	nop
 800397a:	3728      	adds	r7, #40	; 0x28
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <__NVIC_SetPriorityGrouping+0x40>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a78:	4013      	ands	r3, r2
 8003a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003a84:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a8a:	4a04      	ldr	r2, [pc, #16]	; (8003a9c <__NVIC_SetPriorityGrouping+0x40>)
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	60d3      	str	r3, [r2, #12]
}
 8003a90:	bf00      	nop
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	e000ed00 	.word	0xe000ed00
 8003aa0:	05fa0000 	.word	0x05fa0000

08003aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003aa8:	4b04      	ldr	r3, [pc, #16]	; (8003abc <__NVIC_GetPriorityGrouping+0x18>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	0a1b      	lsrs	r3, r3, #8
 8003aae:	f003 0307 	and.w	r3, r3, #7
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	db0b      	blt.n	8003aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ad2:	79fb      	ldrb	r3, [r7, #7]
 8003ad4:	f003 021f 	and.w	r2, r3, #31
 8003ad8:	4907      	ldr	r1, [pc, #28]	; (8003af8 <__NVIC_EnableIRQ+0x38>)
 8003ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ade:	095b      	lsrs	r3, r3, #5
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	e000e100 	.word	0xe000e100

08003afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	6039      	str	r1, [r7, #0]
 8003b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	db0a      	blt.n	8003b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	490c      	ldr	r1, [pc, #48]	; (8003b48 <__NVIC_SetPriority+0x4c>)
 8003b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1a:	0112      	lsls	r2, r2, #4
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	440b      	add	r3, r1
 8003b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b24:	e00a      	b.n	8003b3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	4908      	ldr	r1, [pc, #32]	; (8003b4c <__NVIC_SetPriority+0x50>)
 8003b2c:	79fb      	ldrb	r3, [r7, #7]
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	3b04      	subs	r3, #4
 8003b34:	0112      	lsls	r2, r2, #4
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	440b      	add	r3, r1
 8003b3a:	761a      	strb	r2, [r3, #24]
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	e000e100 	.word	0xe000e100
 8003b4c:	e000ed00 	.word	0xe000ed00

08003b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b089      	sub	sp, #36	; 0x24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f1c3 0307 	rsb	r3, r3, #7
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	bf28      	it	cs
 8003b6e:	2304      	movcs	r3, #4
 8003b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	3304      	adds	r3, #4
 8003b76:	2b06      	cmp	r3, #6
 8003b78:	d902      	bls.n	8003b80 <NVIC_EncodePriority+0x30>
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	3b03      	subs	r3, #3
 8003b7e:	e000      	b.n	8003b82 <NVIC_EncodePriority+0x32>
 8003b80:	2300      	movs	r3, #0
 8003b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b84:	f04f 32ff 	mov.w	r2, #4294967295
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	43da      	mvns	r2, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	401a      	ands	r2, r3
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b98:	f04f 31ff 	mov.w	r1, #4294967295
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba2:	43d9      	mvns	r1, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba8:	4313      	orrs	r3, r2
         );
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3724      	adds	r7, #36	; 0x24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bc8:	d301      	bcc.n	8003bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e00f      	b.n	8003bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bce:	4a0a      	ldr	r2, [pc, #40]	; (8003bf8 <SysTick_Config+0x40>)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bd6:	210f      	movs	r1, #15
 8003bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bdc:	f7ff ff8e 	bl	8003afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003be0:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <SysTick_Config+0x40>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003be6:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <SysTick_Config+0x40>)
 8003be8:	2207      	movs	r2, #7
 8003bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	e000e010 	.word	0xe000e010

08003bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff ff29 	bl	8003a5c <__NVIC_SetPriorityGrouping>
}
 8003c0a:	bf00      	nop
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b086      	sub	sp, #24
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	4603      	mov	r3, r0
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	607a      	str	r2, [r7, #4]
 8003c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c24:	f7ff ff3e 	bl	8003aa4 <__NVIC_GetPriorityGrouping>
 8003c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	6978      	ldr	r0, [r7, #20]
 8003c30:	f7ff ff8e 	bl	8003b50 <NVIC_EncodePriority>
 8003c34:	4602      	mov	r2, r0
 8003c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff ff5d 	bl	8003afc <__NVIC_SetPriority>
}
 8003c42:	bf00      	nop
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b082      	sub	sp, #8
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	4603      	mov	r3, r0
 8003c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff ff31 	bl	8003ac0 <__NVIC_EnableIRQ>
}
 8003c5e:	bf00      	nop
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b082      	sub	sp, #8
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff ffa2 	bl	8003bb8 <SysTick_Config>
 8003c74:	4603      	mov	r3, r0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b089      	sub	sp, #36	; 0x24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003c92:	2300      	movs	r3, #0
 8003c94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003c96:	2300      	movs	r3, #0
 8003c98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61fb      	str	r3, [r7, #28]
 8003c9e:	e175      	b.n	8003f8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	f040 8164 	bne.w	8003f86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d00b      	beq.n	8003cde <HAL_GPIO_Init+0x5e>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d007      	beq.n	8003cde <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cd2:	2b11      	cmp	r3, #17
 8003cd4:	d003      	beq.n	8003cde <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b12      	cmp	r3, #18
 8003cdc:	d130      	bne.n	8003d40 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	2203      	movs	r2, #3
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d14:	2201      	movs	r2, #1
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4013      	ands	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	091b      	lsrs	r3, r3, #4
 8003d2a:	f003 0201 	and.w	r2, r3, #1
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	2203      	movs	r2, #3
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	43db      	mvns	r3, r3
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4013      	ands	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d003      	beq.n	8003d80 <HAL_GPIO_Init+0x100>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b12      	cmp	r3, #18
 8003d7e:	d123      	bne.n	8003dc8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	08da      	lsrs	r2, r3, #3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3208      	adds	r2, #8
 8003d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	220f      	movs	r2, #15
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	08da      	lsrs	r2, r3, #3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3208      	adds	r2, #8
 8003dc2:	69b9      	ldr	r1, [r7, #24]
 8003dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	2203      	movs	r2, #3
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 0203 	and.w	r2, r3, #3
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 80be 	beq.w	8003f86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e0a:	4b66      	ldr	r3, [pc, #408]	; (8003fa4 <HAL_GPIO_Init+0x324>)
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0e:	4a65      	ldr	r2, [pc, #404]	; (8003fa4 <HAL_GPIO_Init+0x324>)
 8003e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e14:	6453      	str	r3, [r2, #68]	; 0x44
 8003e16:	4b63      	ldr	r3, [pc, #396]	; (8003fa4 <HAL_GPIO_Init+0x324>)
 8003e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e22:	4a61      	ldr	r2, [pc, #388]	; (8003fa8 <HAL_GPIO_Init+0x328>)
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	089b      	lsrs	r3, r3, #2
 8003e28:	3302      	adds	r3, #2
 8003e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	220f      	movs	r2, #15
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	4013      	ands	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a58      	ldr	r2, [pc, #352]	; (8003fac <HAL_GPIO_Init+0x32c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d037      	beq.n	8003ebe <HAL_GPIO_Init+0x23e>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a57      	ldr	r2, [pc, #348]	; (8003fb0 <HAL_GPIO_Init+0x330>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d031      	beq.n	8003eba <HAL_GPIO_Init+0x23a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a56      	ldr	r2, [pc, #344]	; (8003fb4 <HAL_GPIO_Init+0x334>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d02b      	beq.n	8003eb6 <HAL_GPIO_Init+0x236>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a55      	ldr	r2, [pc, #340]	; (8003fb8 <HAL_GPIO_Init+0x338>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d025      	beq.n	8003eb2 <HAL_GPIO_Init+0x232>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a54      	ldr	r2, [pc, #336]	; (8003fbc <HAL_GPIO_Init+0x33c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d01f      	beq.n	8003eae <HAL_GPIO_Init+0x22e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a53      	ldr	r2, [pc, #332]	; (8003fc0 <HAL_GPIO_Init+0x340>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d019      	beq.n	8003eaa <HAL_GPIO_Init+0x22a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a52      	ldr	r2, [pc, #328]	; (8003fc4 <HAL_GPIO_Init+0x344>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <HAL_GPIO_Init+0x226>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a51      	ldr	r2, [pc, #324]	; (8003fc8 <HAL_GPIO_Init+0x348>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00d      	beq.n	8003ea2 <HAL_GPIO_Init+0x222>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a50      	ldr	r2, [pc, #320]	; (8003fcc <HAL_GPIO_Init+0x34c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d007      	beq.n	8003e9e <HAL_GPIO_Init+0x21e>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a4f      	ldr	r2, [pc, #316]	; (8003fd0 <HAL_GPIO_Init+0x350>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d101      	bne.n	8003e9a <HAL_GPIO_Init+0x21a>
 8003e96:	2309      	movs	r3, #9
 8003e98:	e012      	b.n	8003ec0 <HAL_GPIO_Init+0x240>
 8003e9a:	230a      	movs	r3, #10
 8003e9c:	e010      	b.n	8003ec0 <HAL_GPIO_Init+0x240>
 8003e9e:	2308      	movs	r3, #8
 8003ea0:	e00e      	b.n	8003ec0 <HAL_GPIO_Init+0x240>
 8003ea2:	2307      	movs	r3, #7
 8003ea4:	e00c      	b.n	8003ec0 <HAL_GPIO_Init+0x240>
 8003ea6:	2306      	movs	r3, #6
 8003ea8:	e00a      	b.n	8003ec0 <HAL_GPIO_Init+0x240>
 8003eaa:	2305      	movs	r3, #5
 8003eac:	e008      	b.n	8003ec0 <HAL_GPIO_Init+0x240>
 8003eae:	2304      	movs	r3, #4
 8003eb0:	e006      	b.n	8003ec0 <HAL_GPIO_Init+0x240>
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e004      	b.n	8003ec0 <HAL_GPIO_Init+0x240>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e002      	b.n	8003ec0 <HAL_GPIO_Init+0x240>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <HAL_GPIO_Init+0x240>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	69fa      	ldr	r2, [r7, #28]
 8003ec2:	f002 0203 	and.w	r2, r2, #3
 8003ec6:	0092      	lsls	r2, r2, #2
 8003ec8:	4093      	lsls	r3, r2
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ed0:	4935      	ldr	r1, [pc, #212]	; (8003fa8 <HAL_GPIO_Init+0x328>)
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	089b      	lsrs	r3, r3, #2
 8003ed6:	3302      	adds	r3, #2
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ede:	4b3d      	ldr	r3, [pc, #244]	; (8003fd4 <HAL_GPIO_Init+0x354>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4013      	ands	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f02:	4a34      	ldr	r2, [pc, #208]	; (8003fd4 <HAL_GPIO_Init+0x354>)
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f08:	4b32      	ldr	r3, [pc, #200]	; (8003fd4 <HAL_GPIO_Init+0x354>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	43db      	mvns	r3, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4013      	ands	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f2c:	4a29      	ldr	r2, [pc, #164]	; (8003fd4 <HAL_GPIO_Init+0x354>)
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f32:	4b28      	ldr	r3, [pc, #160]	; (8003fd4 <HAL_GPIO_Init+0x354>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f56:	4a1f      	ldr	r2, [pc, #124]	; (8003fd4 <HAL_GPIO_Init+0x354>)
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f5c:	4b1d      	ldr	r3, [pc, #116]	; (8003fd4 <HAL_GPIO_Init+0x354>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f80:	4a14      	ldr	r2, [pc, #80]	; (8003fd4 <HAL_GPIO_Init+0x354>)
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	61fb      	str	r3, [r7, #28]
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	2b0f      	cmp	r3, #15
 8003f90:	f67f ae86 	bls.w	8003ca0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop
 8003f98:	3724      	adds	r7, #36	; 0x24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	40013800 	.word	0x40013800
 8003fac:	40020000 	.word	0x40020000
 8003fb0:	40020400 	.word	0x40020400
 8003fb4:	40020800 	.word	0x40020800
 8003fb8:	40020c00 	.word	0x40020c00
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	40021400 	.word	0x40021400
 8003fc4:	40021800 	.word	0x40021800
 8003fc8:	40021c00 	.word	0x40021c00
 8003fcc:	40022000 	.word	0x40022000
 8003fd0:	40022400 	.word	0x40022400
 8003fd4:	40013c00 	.word	0x40013c00

08003fd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691a      	ldr	r2, [r3, #16]
 8003fe8:	887b      	ldrh	r3, [r7, #2]
 8003fea:	4013      	ands	r3, r2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
 8003ff4:	e001      	b.n	8003ffa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	807b      	strh	r3, [r7, #2]
 8004014:	4613      	mov	r3, r2
 8004016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004018:	787b      	ldrb	r3, [r7, #1]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800401e:	887a      	ldrh	r2, [r7, #2]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004024:	e003      	b.n	800402e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004026:	887b      	ldrh	r3, [r7, #2]
 8004028:	041a      	lsls	r2, r3, #16
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	619a      	str	r2, [r3, #24]
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
	...

0800403c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004042:	2300      	movs	r3, #0
 8004044:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004046:	4b23      	ldr	r3, [pc, #140]	; (80040d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	4a22      	ldr	r2, [pc, #136]	; (80040d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800404c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004050:	6413      	str	r3, [r2, #64]	; 0x40
 8004052:	4b20      	ldr	r3, [pc, #128]	; (80040d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800405e:	4b1e      	ldr	r3, [pc, #120]	; (80040d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a1d      	ldr	r2, [pc, #116]	; (80040d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004068:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800406a:	f7fe f9f9 	bl	8002460 <HAL_GetTick>
 800406e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004070:	e009      	b.n	8004086 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004072:	f7fe f9f5 	bl	8002460 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004080:	d901      	bls.n	8004086 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e022      	b.n	80040cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004086:	4b14      	ldr	r3, [pc, #80]	; (80040d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800408e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004092:	d1ee      	bne.n	8004072 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004094:	4b10      	ldr	r3, [pc, #64]	; (80040d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a0f      	ldr	r2, [pc, #60]	; (80040d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800409a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800409e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040a0:	f7fe f9de 	bl	8002460 <HAL_GetTick>
 80040a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040a6:	e009      	b.n	80040bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040a8:	f7fe f9da 	bl	8002460 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040b6:	d901      	bls.n	80040bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e007      	b.n	80040cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040c8:	d1ee      	bne.n	80040a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40023800 	.word	0x40023800
 80040d8:	40007000 	.word	0x40007000

080040dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80040e4:	2300      	movs	r3, #0
 80040e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e29b      	b.n	800462a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 8087 	beq.w	800420e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004100:	4b96      	ldr	r3, [pc, #600]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 030c 	and.w	r3, r3, #12
 8004108:	2b04      	cmp	r3, #4
 800410a:	d00c      	beq.n	8004126 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800410c:	4b93      	ldr	r3, [pc, #588]	; (800435c <HAL_RCC_OscConfig+0x280>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 030c 	and.w	r3, r3, #12
 8004114:	2b08      	cmp	r3, #8
 8004116:	d112      	bne.n	800413e <HAL_RCC_OscConfig+0x62>
 8004118:	4b90      	ldr	r3, [pc, #576]	; (800435c <HAL_RCC_OscConfig+0x280>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004120:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004124:	d10b      	bne.n	800413e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004126:	4b8d      	ldr	r3, [pc, #564]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d06c      	beq.n	800420c <HAL_RCC_OscConfig+0x130>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d168      	bne.n	800420c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e275      	b.n	800462a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004146:	d106      	bne.n	8004156 <HAL_RCC_OscConfig+0x7a>
 8004148:	4b84      	ldr	r3, [pc, #528]	; (800435c <HAL_RCC_OscConfig+0x280>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a83      	ldr	r2, [pc, #524]	; (800435c <HAL_RCC_OscConfig+0x280>)
 800414e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	e02e      	b.n	80041b4 <HAL_RCC_OscConfig+0xd8>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10c      	bne.n	8004178 <HAL_RCC_OscConfig+0x9c>
 800415e:	4b7f      	ldr	r3, [pc, #508]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a7e      	ldr	r2, [pc, #504]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	4b7c      	ldr	r3, [pc, #496]	; (800435c <HAL_RCC_OscConfig+0x280>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a7b      	ldr	r2, [pc, #492]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004170:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	e01d      	b.n	80041b4 <HAL_RCC_OscConfig+0xd8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004180:	d10c      	bne.n	800419c <HAL_RCC_OscConfig+0xc0>
 8004182:	4b76      	ldr	r3, [pc, #472]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a75      	ldr	r2, [pc, #468]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	4b73      	ldr	r3, [pc, #460]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a72      	ldr	r2, [pc, #456]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	e00b      	b.n	80041b4 <HAL_RCC_OscConfig+0xd8>
 800419c:	4b6f      	ldr	r3, [pc, #444]	; (800435c <HAL_RCC_OscConfig+0x280>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a6e      	ldr	r2, [pc, #440]	; (800435c <HAL_RCC_OscConfig+0x280>)
 80041a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	4b6c      	ldr	r3, [pc, #432]	; (800435c <HAL_RCC_OscConfig+0x280>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a6b      	ldr	r2, [pc, #428]	; (800435c <HAL_RCC_OscConfig+0x280>)
 80041ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d013      	beq.n	80041e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041bc:	f7fe f950 	bl	8002460 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041c4:	f7fe f94c 	bl	8002460 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b64      	cmp	r3, #100	; 0x64
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e229      	b.n	800462a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d6:	4b61      	ldr	r3, [pc, #388]	; (800435c <HAL_RCC_OscConfig+0x280>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0f0      	beq.n	80041c4 <HAL_RCC_OscConfig+0xe8>
 80041e2:	e014      	b.n	800420e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e4:	f7fe f93c 	bl	8002460 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041ec:	f7fe f938 	bl	8002460 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b64      	cmp	r3, #100	; 0x64
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e215      	b.n	800462a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fe:	4b57      	ldr	r3, [pc, #348]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f0      	bne.n	80041ec <HAL_RCC_OscConfig+0x110>
 800420a:	e000      	b.n	800420e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800420c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d069      	beq.n	80042ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800421a:	4b50      	ldr	r3, [pc, #320]	; (800435c <HAL_RCC_OscConfig+0x280>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 030c 	and.w	r3, r3, #12
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00b      	beq.n	800423e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004226:	4b4d      	ldr	r3, [pc, #308]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 030c 	and.w	r3, r3, #12
 800422e:	2b08      	cmp	r3, #8
 8004230:	d11c      	bne.n	800426c <HAL_RCC_OscConfig+0x190>
 8004232:	4b4a      	ldr	r3, [pc, #296]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d116      	bne.n	800426c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800423e:	4b47      	ldr	r3, [pc, #284]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d005      	beq.n	8004256 <HAL_RCC_OscConfig+0x17a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d001      	beq.n	8004256 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e1e9      	b.n	800462a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004256:	4b41      	ldr	r3, [pc, #260]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	493d      	ldr	r1, [pc, #244]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004266:	4313      	orrs	r3, r2
 8004268:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800426a:	e040      	b.n	80042ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d023      	beq.n	80042bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004274:	4b39      	ldr	r3, [pc, #228]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a38      	ldr	r2, [pc, #224]	; (800435c <HAL_RCC_OscConfig+0x280>)
 800427a:	f043 0301 	orr.w	r3, r3, #1
 800427e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004280:	f7fe f8ee 	bl	8002460 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004288:	f7fe f8ea 	bl	8002460 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e1c7      	b.n	800462a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429a:	4b30      	ldr	r3, [pc, #192]	; (800435c <HAL_RCC_OscConfig+0x280>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0f0      	beq.n	8004288 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a6:	4b2d      	ldr	r3, [pc, #180]	; (800435c <HAL_RCC_OscConfig+0x280>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	4929      	ldr	r1, [pc, #164]	; (800435c <HAL_RCC_OscConfig+0x280>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	600b      	str	r3, [r1, #0]
 80042ba:	e018      	b.n	80042ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042bc:	4b27      	ldr	r3, [pc, #156]	; (800435c <HAL_RCC_OscConfig+0x280>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a26      	ldr	r2, [pc, #152]	; (800435c <HAL_RCC_OscConfig+0x280>)
 80042c2:	f023 0301 	bic.w	r3, r3, #1
 80042c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c8:	f7fe f8ca 	bl	8002460 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042d0:	f7fe f8c6 	bl	8002460 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e1a3      	b.n	800462a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042e2:	4b1e      	ldr	r3, [pc, #120]	; (800435c <HAL_RCC_OscConfig+0x280>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1f0      	bne.n	80042d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d038      	beq.n	800436c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d019      	beq.n	8004336 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004302:	4b16      	ldr	r3, [pc, #88]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004306:	4a15      	ldr	r2, [pc, #84]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430e:	f7fe f8a7 	bl	8002460 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004316:	f7fe f8a3 	bl	8002460 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e180      	b.n	800462a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004328:	4b0c      	ldr	r3, [pc, #48]	; (800435c <HAL_RCC_OscConfig+0x280>)
 800432a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0f0      	beq.n	8004316 <HAL_RCC_OscConfig+0x23a>
 8004334:	e01a      	b.n	800436c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004336:	4b09      	ldr	r3, [pc, #36]	; (800435c <HAL_RCC_OscConfig+0x280>)
 8004338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800433a:	4a08      	ldr	r2, [pc, #32]	; (800435c <HAL_RCC_OscConfig+0x280>)
 800433c:	f023 0301 	bic.w	r3, r3, #1
 8004340:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004342:	f7fe f88d 	bl	8002460 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004348:	e00a      	b.n	8004360 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800434a:	f7fe f889 	bl	8002460 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d903      	bls.n	8004360 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e166      	b.n	800462a <HAL_RCC_OscConfig+0x54e>
 800435c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004360:	4b92      	ldr	r3, [pc, #584]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 8004362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1ee      	bne.n	800434a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80a4 	beq.w	80044c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800437a:	4b8c      	ldr	r3, [pc, #560]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10d      	bne.n	80043a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004386:	4b89      	ldr	r3, [pc, #548]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	4a88      	ldr	r2, [pc, #544]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 800438c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004390:	6413      	str	r3, [r2, #64]	; 0x40
 8004392:	4b86      	ldr	r3, [pc, #536]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439a:	60bb      	str	r3, [r7, #8]
 800439c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800439e:	2301      	movs	r3, #1
 80043a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043a2:	4b83      	ldr	r3, [pc, #524]	; (80045b0 <HAL_RCC_OscConfig+0x4d4>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d118      	bne.n	80043e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80043ae:	4b80      	ldr	r3, [pc, #512]	; (80045b0 <HAL_RCC_OscConfig+0x4d4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a7f      	ldr	r2, [pc, #508]	; (80045b0 <HAL_RCC_OscConfig+0x4d4>)
 80043b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ba:	f7fe f851 	bl	8002460 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c2:	f7fe f84d 	bl	8002460 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b64      	cmp	r3, #100	; 0x64
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e12a      	b.n	800462a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043d4:	4b76      	ldr	r3, [pc, #472]	; (80045b0 <HAL_RCC_OscConfig+0x4d4>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d106      	bne.n	80043f6 <HAL_RCC_OscConfig+0x31a>
 80043e8:	4b70      	ldr	r3, [pc, #448]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 80043ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ec:	4a6f      	ldr	r2, [pc, #444]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 80043ee:	f043 0301 	orr.w	r3, r3, #1
 80043f2:	6713      	str	r3, [r2, #112]	; 0x70
 80043f4:	e02d      	b.n	8004452 <HAL_RCC_OscConfig+0x376>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10c      	bne.n	8004418 <HAL_RCC_OscConfig+0x33c>
 80043fe:	4b6b      	ldr	r3, [pc, #428]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 8004400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004402:	4a6a      	ldr	r2, [pc, #424]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 8004404:	f023 0301 	bic.w	r3, r3, #1
 8004408:	6713      	str	r3, [r2, #112]	; 0x70
 800440a:	4b68      	ldr	r3, [pc, #416]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	4a67      	ldr	r2, [pc, #412]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 8004410:	f023 0304 	bic.w	r3, r3, #4
 8004414:	6713      	str	r3, [r2, #112]	; 0x70
 8004416:	e01c      	b.n	8004452 <HAL_RCC_OscConfig+0x376>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2b05      	cmp	r3, #5
 800441e:	d10c      	bne.n	800443a <HAL_RCC_OscConfig+0x35e>
 8004420:	4b62      	ldr	r3, [pc, #392]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004424:	4a61      	ldr	r2, [pc, #388]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 8004426:	f043 0304 	orr.w	r3, r3, #4
 800442a:	6713      	str	r3, [r2, #112]	; 0x70
 800442c:	4b5f      	ldr	r3, [pc, #380]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 800442e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004430:	4a5e      	ldr	r2, [pc, #376]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 8004432:	f043 0301 	orr.w	r3, r3, #1
 8004436:	6713      	str	r3, [r2, #112]	; 0x70
 8004438:	e00b      	b.n	8004452 <HAL_RCC_OscConfig+0x376>
 800443a:	4b5c      	ldr	r3, [pc, #368]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 800443c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443e:	4a5b      	ldr	r2, [pc, #364]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 8004440:	f023 0301 	bic.w	r3, r3, #1
 8004444:	6713      	str	r3, [r2, #112]	; 0x70
 8004446:	4b59      	ldr	r3, [pc, #356]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 8004448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444a:	4a58      	ldr	r2, [pc, #352]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 800444c:	f023 0304 	bic.w	r3, r3, #4
 8004450:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d015      	beq.n	8004486 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445a:	f7fe f801 	bl	8002460 <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004460:	e00a      	b.n	8004478 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004462:	f7fd fffd 	bl	8002460 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004470:	4293      	cmp	r3, r2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e0d8      	b.n	800462a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004478:	4b4c      	ldr	r3, [pc, #304]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 800447a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0ee      	beq.n	8004462 <HAL_RCC_OscConfig+0x386>
 8004484:	e014      	b.n	80044b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004486:	f7fd ffeb 	bl	8002460 <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800448c:	e00a      	b.n	80044a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800448e:	f7fd ffe7 	bl	8002460 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	f241 3288 	movw	r2, #5000	; 0x1388
 800449c:	4293      	cmp	r3, r2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e0c2      	b.n	800462a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044a4:	4b41      	ldr	r3, [pc, #260]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 80044a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1ee      	bne.n	800448e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044b0:	7dfb      	ldrb	r3, [r7, #23]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d105      	bne.n	80044c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044b6:	4b3d      	ldr	r3, [pc, #244]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	4a3c      	ldr	r2, [pc, #240]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 80044bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 80ae 	beq.w	8004628 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044cc:	4b37      	ldr	r3, [pc, #220]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 030c 	and.w	r3, r3, #12
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d06d      	beq.n	80045b4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d14b      	bne.n	8004578 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e0:	4b32      	ldr	r3, [pc, #200]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a31      	ldr	r2, [pc, #196]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 80044e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ec:	f7fd ffb8 	bl	8002460 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f4:	f7fd ffb4 	bl	8002460 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e091      	b.n	800462a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004506:	4b29      	ldr	r3, [pc, #164]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f0      	bne.n	80044f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69da      	ldr	r2, [r3, #28]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	019b      	lsls	r3, r3, #6
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004528:	085b      	lsrs	r3, r3, #1
 800452a:	3b01      	subs	r3, #1
 800452c:	041b      	lsls	r3, r3, #16
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	061b      	lsls	r3, r3, #24
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453c:	071b      	lsls	r3, r3, #28
 800453e:	491b      	ldr	r1, [pc, #108]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 8004540:	4313      	orrs	r3, r2
 8004542:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004544:	4b19      	ldr	r3, [pc, #100]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a18      	ldr	r2, [pc, #96]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 800454a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800454e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004550:	f7fd ff86 	bl	8002460 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004558:	f7fd ff82 	bl	8002460 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e05f      	b.n	800462a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800456a:	4b10      	ldr	r3, [pc, #64]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0f0      	beq.n	8004558 <HAL_RCC_OscConfig+0x47c>
 8004576:	e057      	b.n	8004628 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004578:	4b0c      	ldr	r3, [pc, #48]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a0b      	ldr	r2, [pc, #44]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 800457e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004584:	f7fd ff6c 	bl	8002460 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800458c:	f7fd ff68 	bl	8002460 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e045      	b.n	800462a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459e:	4b03      	ldr	r3, [pc, #12]	; (80045ac <HAL_RCC_OscConfig+0x4d0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x4b0>
 80045aa:	e03d      	b.n	8004628 <HAL_RCC_OscConfig+0x54c>
 80045ac:	40023800 	.word	0x40023800
 80045b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80045b4:	4b1f      	ldr	r3, [pc, #124]	; (8004634 <HAL_RCC_OscConfig+0x558>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d030      	beq.n	8004624 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d129      	bne.n	8004624 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045da:	429a      	cmp	r2, r3
 80045dc:	d122      	bne.n	8004624 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045e4:	4013      	ands	r3, r2
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d119      	bne.n	8004624 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fa:	085b      	lsrs	r3, r3, #1
 80045fc:	3b01      	subs	r3, #1
 80045fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004600:	429a      	cmp	r2, r3
 8004602:	d10f      	bne.n	8004624 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004610:	429a      	cmp	r2, r3
 8004612:	d107      	bne.n	8004624 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004620:	429a      	cmp	r2, r3
 8004622:	d001      	beq.n	8004628 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e000      	b.n	800462a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	40023800 	.word	0x40023800

08004638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e0d0      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004650:	4b6a      	ldr	r3, [pc, #424]	; (80047fc <HAL_RCC_ClockConfig+0x1c4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 030f 	and.w	r3, r3, #15
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d910      	bls.n	8004680 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465e:	4b67      	ldr	r3, [pc, #412]	; (80047fc <HAL_RCC_ClockConfig+0x1c4>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f023 020f 	bic.w	r2, r3, #15
 8004666:	4965      	ldr	r1, [pc, #404]	; (80047fc <HAL_RCC_ClockConfig+0x1c4>)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	4313      	orrs	r3, r2
 800466c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800466e:	4b63      	ldr	r3, [pc, #396]	; (80047fc <HAL_RCC_ClockConfig+0x1c4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	429a      	cmp	r2, r3
 800467a:	d001      	beq.n	8004680 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e0b8      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d020      	beq.n	80046ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b00      	cmp	r3, #0
 8004696:	d005      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004698:	4b59      	ldr	r3, [pc, #356]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	4a58      	ldr	r2, [pc, #352]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 800469e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d005      	beq.n	80046bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046b0:	4b53      	ldr	r3, [pc, #332]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	4a52      	ldr	r2, [pc, #328]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 80046b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046bc:	4b50      	ldr	r3, [pc, #320]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	494d      	ldr	r1, [pc, #308]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d040      	beq.n	800475c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d107      	bne.n	80046f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e2:	4b47      	ldr	r3, [pc, #284]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d115      	bne.n	800471a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e07f      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d107      	bne.n	800470a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046fa:	4b41      	ldr	r3, [pc, #260]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d109      	bne.n	800471a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e073      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800470a:	4b3d      	ldr	r3, [pc, #244]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e06b      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800471a:	4b39      	ldr	r3, [pc, #228]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f023 0203 	bic.w	r2, r3, #3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	4936      	ldr	r1, [pc, #216]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 8004728:	4313      	orrs	r3, r2
 800472a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800472c:	f7fd fe98 	bl	8002460 <HAL_GetTick>
 8004730:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004732:	e00a      	b.n	800474a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004734:	f7fd fe94 	bl	8002460 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004742:	4293      	cmp	r3, r2
 8004744:	d901      	bls.n	800474a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e053      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800474a:	4b2d      	ldr	r3, [pc, #180]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 020c 	and.w	r2, r3, #12
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	429a      	cmp	r2, r3
 800475a:	d1eb      	bne.n	8004734 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800475c:	4b27      	ldr	r3, [pc, #156]	; (80047fc <HAL_RCC_ClockConfig+0x1c4>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 030f 	and.w	r3, r3, #15
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d210      	bcs.n	800478c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476a:	4b24      	ldr	r3, [pc, #144]	; (80047fc <HAL_RCC_ClockConfig+0x1c4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f023 020f 	bic.w	r2, r3, #15
 8004772:	4922      	ldr	r1, [pc, #136]	; (80047fc <HAL_RCC_ClockConfig+0x1c4>)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	4313      	orrs	r3, r2
 8004778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800477a:	4b20      	ldr	r3, [pc, #128]	; (80047fc <HAL_RCC_ClockConfig+0x1c4>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	429a      	cmp	r2, r3
 8004786:	d001      	beq.n	800478c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e032      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b00      	cmp	r3, #0
 8004796:	d008      	beq.n	80047aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004798:	4b19      	ldr	r3, [pc, #100]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	4916      	ldr	r1, [pc, #88]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d009      	beq.n	80047ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047b6:	4b12      	ldr	r3, [pc, #72]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	490e      	ldr	r1, [pc, #56]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047ca:	f000 f821 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 80047ce:	4602      	mov	r2, r0
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	091b      	lsrs	r3, r3, #4
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	490a      	ldr	r1, [pc, #40]	; (8004804 <HAL_RCC_ClockConfig+0x1cc>)
 80047dc:	5ccb      	ldrb	r3, [r1, r3]
 80047de:	fa22 f303 	lsr.w	r3, r2, r3
 80047e2:	4a09      	ldr	r2, [pc, #36]	; (8004808 <HAL_RCC_ClockConfig+0x1d0>)
 80047e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047e6:	4b09      	ldr	r3, [pc, #36]	; (800480c <HAL_RCC_ClockConfig+0x1d4>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fd fdf4 	bl	80023d8 <HAL_InitTick>

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	40023c00 	.word	0x40023c00
 8004800:	40023800 	.word	0x40023800
 8004804:	080068c4 	.word	0x080068c4
 8004808:	20000000 	.word	0x20000000
 800480c:	20000004 	.word	0x20000004

08004810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004810:	b5b0      	push	{r4, r5, r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004816:	2100      	movs	r1, #0
 8004818:	6079      	str	r1, [r7, #4]
 800481a:	2100      	movs	r1, #0
 800481c:	60f9      	str	r1, [r7, #12]
 800481e:	2100      	movs	r1, #0
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004822:	2100      	movs	r1, #0
 8004824:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004826:	4952      	ldr	r1, [pc, #328]	; (8004970 <HAL_RCC_GetSysClockFreq+0x160>)
 8004828:	6889      	ldr	r1, [r1, #8]
 800482a:	f001 010c 	and.w	r1, r1, #12
 800482e:	2908      	cmp	r1, #8
 8004830:	d00d      	beq.n	800484e <HAL_RCC_GetSysClockFreq+0x3e>
 8004832:	2908      	cmp	r1, #8
 8004834:	f200 8094 	bhi.w	8004960 <HAL_RCC_GetSysClockFreq+0x150>
 8004838:	2900      	cmp	r1, #0
 800483a:	d002      	beq.n	8004842 <HAL_RCC_GetSysClockFreq+0x32>
 800483c:	2904      	cmp	r1, #4
 800483e:	d003      	beq.n	8004848 <HAL_RCC_GetSysClockFreq+0x38>
 8004840:	e08e      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004842:	4b4c      	ldr	r3, [pc, #304]	; (8004974 <HAL_RCC_GetSysClockFreq+0x164>)
 8004844:	60bb      	str	r3, [r7, #8]
      break;
 8004846:	e08e      	b.n	8004966 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004848:	4b4b      	ldr	r3, [pc, #300]	; (8004978 <HAL_RCC_GetSysClockFreq+0x168>)
 800484a:	60bb      	str	r3, [r7, #8]
      break;
 800484c:	e08b      	b.n	8004966 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800484e:	4948      	ldr	r1, [pc, #288]	; (8004970 <HAL_RCC_GetSysClockFreq+0x160>)
 8004850:	6849      	ldr	r1, [r1, #4]
 8004852:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004856:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004858:	4945      	ldr	r1, [pc, #276]	; (8004970 <HAL_RCC_GetSysClockFreq+0x160>)
 800485a:	6849      	ldr	r1, [r1, #4]
 800485c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004860:	2900      	cmp	r1, #0
 8004862:	d024      	beq.n	80048ae <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004864:	4942      	ldr	r1, [pc, #264]	; (8004970 <HAL_RCC_GetSysClockFreq+0x160>)
 8004866:	6849      	ldr	r1, [r1, #4]
 8004868:	0989      	lsrs	r1, r1, #6
 800486a:	4608      	mov	r0, r1
 800486c:	f04f 0100 	mov.w	r1, #0
 8004870:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004874:	f04f 0500 	mov.w	r5, #0
 8004878:	ea00 0204 	and.w	r2, r0, r4
 800487c:	ea01 0305 	and.w	r3, r1, r5
 8004880:	493d      	ldr	r1, [pc, #244]	; (8004978 <HAL_RCC_GetSysClockFreq+0x168>)
 8004882:	fb01 f003 	mul.w	r0, r1, r3
 8004886:	2100      	movs	r1, #0
 8004888:	fb01 f102 	mul.w	r1, r1, r2
 800488c:	1844      	adds	r4, r0, r1
 800488e:	493a      	ldr	r1, [pc, #232]	; (8004978 <HAL_RCC_GetSysClockFreq+0x168>)
 8004890:	fba2 0101 	umull	r0, r1, r2, r1
 8004894:	1863      	adds	r3, r4, r1
 8004896:	4619      	mov	r1, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	461a      	mov	r2, r3
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	f7fb fcd2 	bl	8000248 <__aeabi_uldivmod>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4613      	mov	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	e04a      	b.n	8004944 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ae:	4b30      	ldr	r3, [pc, #192]	; (8004970 <HAL_RCC_GetSysClockFreq+0x160>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	099b      	lsrs	r3, r3, #6
 80048b4:	461a      	mov	r2, r3
 80048b6:	f04f 0300 	mov.w	r3, #0
 80048ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80048be:	f04f 0100 	mov.w	r1, #0
 80048c2:	ea02 0400 	and.w	r4, r2, r0
 80048c6:	ea03 0501 	and.w	r5, r3, r1
 80048ca:	4620      	mov	r0, r4
 80048cc:	4629      	mov	r1, r5
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	014b      	lsls	r3, r1, #5
 80048d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048dc:	0142      	lsls	r2, r0, #5
 80048de:	4610      	mov	r0, r2
 80048e0:	4619      	mov	r1, r3
 80048e2:	1b00      	subs	r0, r0, r4
 80048e4:	eb61 0105 	sbc.w	r1, r1, r5
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	f04f 0300 	mov.w	r3, #0
 80048f0:	018b      	lsls	r3, r1, #6
 80048f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048f6:	0182      	lsls	r2, r0, #6
 80048f8:	1a12      	subs	r2, r2, r0
 80048fa:	eb63 0301 	sbc.w	r3, r3, r1
 80048fe:	f04f 0000 	mov.w	r0, #0
 8004902:	f04f 0100 	mov.w	r1, #0
 8004906:	00d9      	lsls	r1, r3, #3
 8004908:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800490c:	00d0      	lsls	r0, r2, #3
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	1912      	adds	r2, r2, r4
 8004914:	eb45 0303 	adc.w	r3, r5, r3
 8004918:	f04f 0000 	mov.w	r0, #0
 800491c:	f04f 0100 	mov.w	r1, #0
 8004920:	0299      	lsls	r1, r3, #10
 8004922:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004926:	0290      	lsls	r0, r2, #10
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4610      	mov	r0, r2
 800492e:	4619      	mov	r1, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	461a      	mov	r2, r3
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	f7fb fc86 	bl	8000248 <__aeabi_uldivmod>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4613      	mov	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004944:	4b0a      	ldr	r3, [pc, #40]	; (8004970 <HAL_RCC_GetSysClockFreq+0x160>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	0c1b      	lsrs	r3, r3, #16
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	3301      	adds	r3, #1
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	fbb2 f3f3 	udiv	r3, r2, r3
 800495c:	60bb      	str	r3, [r7, #8]
      break;
 800495e:	e002      	b.n	8004966 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004960:	4b04      	ldr	r3, [pc, #16]	; (8004974 <HAL_RCC_GetSysClockFreq+0x164>)
 8004962:	60bb      	str	r3, [r7, #8]
      break;
 8004964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004966:	68bb      	ldr	r3, [r7, #8]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bdb0      	pop	{r4, r5, r7, pc}
 8004970:	40023800 	.word	0x40023800
 8004974:	00f42400 	.word	0x00f42400
 8004978:	017d7840 	.word	0x017d7840

0800497c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004980:	4b03      	ldr	r3, [pc, #12]	; (8004990 <HAL_RCC_GetHCLKFreq+0x14>)
 8004982:	681b      	ldr	r3, [r3, #0]
}
 8004984:	4618      	mov	r0, r3
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	20000000 	.word	0x20000000

08004994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004998:	f7ff fff0 	bl	800497c <HAL_RCC_GetHCLKFreq>
 800499c:	4602      	mov	r2, r0
 800499e:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	0a9b      	lsrs	r3, r3, #10
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	4903      	ldr	r1, [pc, #12]	; (80049b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049aa:	5ccb      	ldrb	r3, [r1, r3]
 80049ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	40023800 	.word	0x40023800
 80049b8:	080068d4 	.word	0x080068d4

080049bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049c0:	f7ff ffdc 	bl	800497c <HAL_RCC_GetHCLKFreq>
 80049c4:	4602      	mov	r2, r0
 80049c6:	4b05      	ldr	r3, [pc, #20]	; (80049dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	0b5b      	lsrs	r3, r3, #13
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	4903      	ldr	r1, [pc, #12]	; (80049e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049d2:	5ccb      	ldrb	r3, [r1, r3]
 80049d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049d8:	4618      	mov	r0, r3
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40023800 	.word	0x40023800
 80049e0:	080068d4 	.word	0x080068d4

080049e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80049f0:	2300      	movs	r3, #0
 80049f2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80049fc:	2300      	movs	r3, #0
 80049fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d012      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a0c:	4b69      	ldr	r3, [pc, #420]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	4a68      	ldr	r2, [pc, #416]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a12:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004a16:	6093      	str	r3, [r2, #8]
 8004a18:	4b66      	ldr	r3, [pc, #408]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a20:	4964      	ldr	r1, [pc, #400]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d017      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a3e:	4b5d      	ldr	r3, [pc, #372]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4c:	4959      	ldr	r1, [pc, #356]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a5c:	d101      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d017      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a7a:	4b4e      	ldr	r3, [pc, #312]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	494a      	ldr	r1, [pc, #296]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a98:	d101      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0320 	and.w	r3, r3, #32
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 808b 	beq.w	8004bde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ac8:	4b3a      	ldr	r3, [pc, #232]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004acc:	4a39      	ldr	r2, [pc, #228]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ad4:	4b37      	ldr	r3, [pc, #220]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004adc:	60bb      	str	r3, [r7, #8]
 8004ade:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ae0:	4b35      	ldr	r3, [pc, #212]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a34      	ldr	r2, [pc, #208]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aec:	f7fd fcb8 	bl	8002460 <HAL_GetTick>
 8004af0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004af2:	e008      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004af4:	f7fd fcb4 	bl	8002460 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b64      	cmp	r3, #100	; 0x64
 8004b00:	d901      	bls.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e38f      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b06:	4b2c      	ldr	r3, [pc, #176]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d0f0      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b12:	4b28      	ldr	r3, [pc, #160]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b1a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d035      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d02e      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b30:	4b20      	ldr	r3, [pc, #128]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b38:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b3a:	4b1e      	ldr	r3, [pc, #120]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3e:	4a1d      	ldr	r2, [pc, #116]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b44:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b46:	4b1b      	ldr	r3, [pc, #108]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4a:	4a1a      	ldr	r2, [pc, #104]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004b52:	4a18      	ldr	r2, [pc, #96]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b58:	4b16      	ldr	r3, [pc, #88]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d114      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b64:	f7fd fc7c 	bl	8002460 <HAL_GetTick>
 8004b68:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b6a:	e00a      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b6c:	f7fd fc78 	bl	8002460 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e351      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b82:	4b0c      	ldr	r3, [pc, #48]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0ee      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b9a:	d111      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004b9c:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ba8:	4b04      	ldr	r3, [pc, #16]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004baa:	400b      	ands	r3, r1
 8004bac:	4901      	ldr	r1, [pc, #4]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	608b      	str	r3, [r1, #8]
 8004bb2:	e00b      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	40007000 	.word	0x40007000
 8004bbc:	0ffffcff 	.word	0x0ffffcff
 8004bc0:	4bb3      	ldr	r3, [pc, #716]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	4ab2      	ldr	r2, [pc, #712]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bc6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004bca:	6093      	str	r3, [r2, #8]
 8004bcc:	4bb0      	ldr	r3, [pc, #704]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bd8:	49ad      	ldr	r1, [pc, #692]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d010      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bea:	4ba9      	ldr	r3, [pc, #676]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bf0:	4aa7      	ldr	r2, [pc, #668]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bf6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004bfa:	4ba5      	ldr	r3, [pc, #660]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bfc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c04:	49a2      	ldr	r1, [pc, #648]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00a      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c18:	4b9d      	ldr	r3, [pc, #628]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c26:	499a      	ldr	r1, [pc, #616]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c3a:	4b95      	ldr	r3, [pc, #596]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c48:	4991      	ldr	r1, [pc, #580]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c5c:	4b8c      	ldr	r3, [pc, #560]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c6a:	4989      	ldr	r1, [pc, #548]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c7e:	4b84      	ldr	r3, [pc, #528]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8c:	4980      	ldr	r1, [pc, #512]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00a      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ca0:	4b7b      	ldr	r3, [pc, #492]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca6:	f023 0203 	bic.w	r2, r3, #3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cae:	4978      	ldr	r1, [pc, #480]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00a      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cc2:	4b73      	ldr	r3, [pc, #460]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc8:	f023 020c 	bic.w	r2, r3, #12
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd0:	496f      	ldr	r1, [pc, #444]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00a      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ce4:	4b6a      	ldr	r3, [pc, #424]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf2:	4967      	ldr	r1, [pc, #412]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d06:	4b62      	ldr	r3, [pc, #392]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d14:	495e      	ldr	r1, [pc, #376]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d28:	4b59      	ldr	r3, [pc, #356]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d36:	4956      	ldr	r1, [pc, #344]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d4a:	4b51      	ldr	r3, [pc, #324]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d50:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d58:	494d      	ldr	r1, [pc, #308]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d6c:	4b48      	ldr	r3, [pc, #288]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7a:	4945      	ldr	r1, [pc, #276]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004d8e:	4b40      	ldr	r3, [pc, #256]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d9c:	493c      	ldr	r1, [pc, #240]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00a      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004db0:	4b37      	ldr	r3, [pc, #220]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dbe:	4934      	ldr	r1, [pc, #208]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d011      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004dd2:	4b2f      	ldr	r3, [pc, #188]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004de0:	492b      	ldr	r1, [pc, #172]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004df0:	d101      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004df2:	2301      	movs	r3, #1
 8004df4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0308 	and.w	r3, r3, #8
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004e02:	2301      	movs	r3, #1
 8004e04:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e12:	4b1f      	ldr	r3, [pc, #124]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e18:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e20:	491b      	ldr	r1, [pc, #108]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00b      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e34:	4b16      	ldr	r3, [pc, #88]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e44:	4912      	ldr	r1, [pc, #72]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00b      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004e58:	4b0d      	ldr	r3, [pc, #52]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e68:	4909      	ldr	r1, [pc, #36]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00f      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e7c:	4b04      	ldr	r3, [pc, #16]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e82:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8c:	e002      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004e8e:	bf00      	nop
 8004e90:	40023800 	.word	0x40023800
 8004e94:	4986      	ldr	r1, [pc, #536]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00b      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004ea8:	4b81      	ldr	r3, [pc, #516]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eb8:	497d      	ldr	r1, [pc, #500]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d006      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 80d6 	beq.w	8005080 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ed4:	4b76      	ldr	r3, [pc, #472]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a75      	ldr	r2, [pc, #468]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ede:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ee0:	f7fd fabe 	bl	8002460 <HAL_GetTick>
 8004ee4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ee6:	e008      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ee8:	f7fd faba 	bl	8002460 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b64      	cmp	r3, #100	; 0x64
 8004ef4:	d901      	bls.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e195      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004efa:	4b6d      	ldr	r3, [pc, #436]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1f0      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d021      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d11d      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f1a:	4b65      	ldr	r3, [pc, #404]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f20:	0c1b      	lsrs	r3, r3, #16
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f28:	4b61      	ldr	r3, [pc, #388]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f2e:	0e1b      	lsrs	r3, r3, #24
 8004f30:	f003 030f 	and.w	r3, r3, #15
 8004f34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	019a      	lsls	r2, r3, #6
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	041b      	lsls	r3, r3, #16
 8004f40:	431a      	orrs	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	061b      	lsls	r3, r3, #24
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	071b      	lsls	r3, r3, #28
 8004f4e:	4958      	ldr	r1, [pc, #352]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d004      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f6a:	d00a      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d02e      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f80:	d129      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f82:	4b4b      	ldr	r3, [pc, #300]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f88:	0c1b      	lsrs	r3, r3, #16
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f90:	4b47      	ldr	r3, [pc, #284]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f96:	0f1b      	lsrs	r3, r3, #28
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	019a      	lsls	r2, r3, #6
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	041b      	lsls	r3, r3, #16
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	061b      	lsls	r3, r3, #24
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	071b      	lsls	r3, r3, #28
 8004fb6:	493e      	ldr	r1, [pc, #248]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004fbe:	4b3c      	ldr	r3, [pc, #240]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fc4:	f023 021f 	bic.w	r2, r3, #31
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	4938      	ldr	r1, [pc, #224]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d01d      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fe2:	4b33      	ldr	r3, [pc, #204]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fe8:	0e1b      	lsrs	r3, r3, #24
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ff0:	4b2f      	ldr	r3, [pc, #188]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ff6:	0f1b      	lsrs	r3, r3, #28
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	019a      	lsls	r2, r3, #6
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	041b      	lsls	r3, r3, #16
 800500a:	431a      	orrs	r2, r3
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	061b      	lsls	r3, r3, #24
 8005010:	431a      	orrs	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	071b      	lsls	r3, r3, #28
 8005016:	4926      	ldr	r1, [pc, #152]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d011      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	019a      	lsls	r2, r3, #6
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	041b      	lsls	r3, r3, #16
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	061b      	lsls	r3, r3, #24
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	071b      	lsls	r3, r3, #28
 8005046:	491a      	ldr	r1, [pc, #104]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005048:	4313      	orrs	r3, r2
 800504a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800504e:	4b18      	ldr	r3, [pc, #96]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a17      	ldr	r2, [pc, #92]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005054:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005058:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800505a:	f7fd fa01 	bl	8002460 <HAL_GetTick>
 800505e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005060:	e008      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005062:	f7fd f9fd 	bl	8002460 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b64      	cmp	r3, #100	; 0x64
 800506e:	d901      	bls.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e0d8      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005074:	4b0e      	ldr	r3, [pc, #56]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d0f0      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	2b01      	cmp	r3, #1
 8005084:	f040 80ce 	bne.w	8005224 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005088:	4b09      	ldr	r3, [pc, #36]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a08      	ldr	r2, [pc, #32]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800508e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005092:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005094:	f7fd f9e4 	bl	8002460 <HAL_GetTick>
 8005098:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800509a:	e00b      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800509c:	f7fd f9e0 	bl	8002460 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b64      	cmp	r3, #100	; 0x64
 80050a8:	d904      	bls.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e0bb      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80050ae:	bf00      	nop
 80050b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050b4:	4b5e      	ldr	r3, [pc, #376]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050c0:	d0ec      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d009      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d02e      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d12a      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050ea:	4b51      	ldr	r3, [pc, #324]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f0:	0c1b      	lsrs	r3, r3, #16
 80050f2:	f003 0303 	and.w	r3, r3, #3
 80050f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050f8:	4b4d      	ldr	r3, [pc, #308]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fe:	0f1b      	lsrs	r3, r3, #28
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	019a      	lsls	r2, r3, #6
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	041b      	lsls	r3, r3, #16
 8005110:	431a      	orrs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	061b      	lsls	r3, r3, #24
 8005118:	431a      	orrs	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	071b      	lsls	r3, r3, #28
 800511e:	4944      	ldr	r1, [pc, #272]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005120:	4313      	orrs	r3, r2
 8005122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005126:	4b42      	ldr	r3, [pc, #264]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800512c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005134:	3b01      	subs	r3, #1
 8005136:	021b      	lsls	r3, r3, #8
 8005138:	493d      	ldr	r1, [pc, #244]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800513a:	4313      	orrs	r3, r2
 800513c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d022      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005150:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005154:	d11d      	bne.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005156:	4b36      	ldr	r3, [pc, #216]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515c:	0e1b      	lsrs	r3, r3, #24
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005164:	4b32      	ldr	r3, [pc, #200]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516a:	0f1b      	lsrs	r3, r3, #28
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	019a      	lsls	r2, r3, #6
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	041b      	lsls	r3, r3, #16
 800517e:	431a      	orrs	r2, r3
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	061b      	lsls	r3, r3, #24
 8005184:	431a      	orrs	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	071b      	lsls	r3, r3, #28
 800518a:	4929      	ldr	r1, [pc, #164]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d028      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800519e:	4b24      	ldr	r3, [pc, #144]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a4:	0e1b      	lsrs	r3, r3, #24
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051ac:	4b20      	ldr	r3, [pc, #128]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b2:	0c1b      	lsrs	r3, r3, #16
 80051b4:	f003 0303 	and.w	r3, r3, #3
 80051b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	019a      	lsls	r2, r3, #6
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	041b      	lsls	r3, r3, #16
 80051c4:	431a      	orrs	r2, r3
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	061b      	lsls	r3, r3, #24
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	071b      	lsls	r3, r3, #28
 80051d2:	4917      	ldr	r1, [pc, #92]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051da:	4b15      	ldr	r3, [pc, #84]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e8:	4911      	ldr	r1, [pc, #68]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051f0:	4b0f      	ldr	r3, [pc, #60]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a0e      	ldr	r2, [pc, #56]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051fc:	f7fd f930 	bl	8002460 <HAL_GetTick>
 8005200:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005202:	e008      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005204:	f7fd f92c 	bl	8002460 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b64      	cmp	r3, #100	; 0x64
 8005210:	d901      	bls.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e007      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005216:	4b06      	ldr	r3, [pc, #24]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800521e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005222:	d1ef      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3720      	adds	r7, #32
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40023800 	.word	0x40023800

08005234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e049      	b.n	80052da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fc ffec 	bl	8002238 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3304      	adds	r3, #4
 8005270:	4619      	mov	r1, r3
 8005272:	4610      	mov	r0, r2
 8005274:	f000 f9f6 	bl	8005664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
	...

080052e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d001      	beq.n	80052fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e054      	b.n	80053a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a26      	ldr	r2, [pc, #152]	; (80053b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d022      	beq.n	8005364 <HAL_TIM_Base_Start_IT+0x80>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005326:	d01d      	beq.n	8005364 <HAL_TIM_Base_Start_IT+0x80>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a22      	ldr	r2, [pc, #136]	; (80053b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d018      	beq.n	8005364 <HAL_TIM_Base_Start_IT+0x80>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a21      	ldr	r2, [pc, #132]	; (80053bc <HAL_TIM_Base_Start_IT+0xd8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d013      	beq.n	8005364 <HAL_TIM_Base_Start_IT+0x80>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a1f      	ldr	r2, [pc, #124]	; (80053c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00e      	beq.n	8005364 <HAL_TIM_Base_Start_IT+0x80>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a1e      	ldr	r2, [pc, #120]	; (80053c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d009      	beq.n	8005364 <HAL_TIM_Base_Start_IT+0x80>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a1c      	ldr	r2, [pc, #112]	; (80053c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d004      	beq.n	8005364 <HAL_TIM_Base_Start_IT+0x80>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a1b      	ldr	r2, [pc, #108]	; (80053cc <HAL_TIM_Base_Start_IT+0xe8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d115      	bne.n	8005390 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	4b19      	ldr	r3, [pc, #100]	; (80053d0 <HAL_TIM_Base_Start_IT+0xec>)
 800536c:	4013      	ands	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2b06      	cmp	r3, #6
 8005374:	d015      	beq.n	80053a2 <HAL_TIM_Base_Start_IT+0xbe>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800537c:	d011      	beq.n	80053a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f042 0201 	orr.w	r2, r2, #1
 800538c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800538e:	e008      	b.n	80053a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0201 	orr.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	e000      	b.n	80053a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40010000 	.word	0x40010000
 80053b8:	40000400 	.word	0x40000400
 80053bc:	40000800 	.word	0x40000800
 80053c0:	40000c00 	.word	0x40000c00
 80053c4:	40010400 	.word	0x40010400
 80053c8:	40014000 	.word	0x40014000
 80053cc:	40001800 	.word	0x40001800
 80053d0:	00010007 	.word	0x00010007

080053d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d122      	bne.n	8005430 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d11b      	bne.n	8005430 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0202 	mvn.w	r2, #2
 8005400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f905 	bl	8005626 <HAL_TIM_IC_CaptureCallback>
 800541c:	e005      	b.n	800542a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f8f7 	bl	8005612 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f908 	bl	800563a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f003 0304 	and.w	r3, r3, #4
 800543a:	2b04      	cmp	r3, #4
 800543c:	d122      	bne.n	8005484 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b04      	cmp	r3, #4
 800544a:	d11b      	bne.n	8005484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f06f 0204 	mvn.w	r2, #4
 8005454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2202      	movs	r2, #2
 800545a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f8db 	bl	8005626 <HAL_TIM_IC_CaptureCallback>
 8005470:	e005      	b.n	800547e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f8cd 	bl	8005612 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f8de 	bl	800563a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f003 0308 	and.w	r3, r3, #8
 800548e:	2b08      	cmp	r3, #8
 8005490:	d122      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f003 0308 	and.w	r3, r3, #8
 800549c:	2b08      	cmp	r3, #8
 800549e:	d11b      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f06f 0208 	mvn.w	r2, #8
 80054a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2204      	movs	r2, #4
 80054ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	f003 0303 	and.w	r3, r3, #3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f8b1 	bl	8005626 <HAL_TIM_IC_CaptureCallback>
 80054c4:	e005      	b.n	80054d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f8a3 	bl	8005612 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f8b4 	bl	800563a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f003 0310 	and.w	r3, r3, #16
 80054e2:	2b10      	cmp	r3, #16
 80054e4:	d122      	bne.n	800552c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f003 0310 	and.w	r3, r3, #16
 80054f0:	2b10      	cmp	r3, #16
 80054f2:	d11b      	bne.n	800552c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f06f 0210 	mvn.w	r2, #16
 80054fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2208      	movs	r2, #8
 8005502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f887 	bl	8005626 <HAL_TIM_IC_CaptureCallback>
 8005518:	e005      	b.n	8005526 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f879 	bl	8005612 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f88a 	bl	800563a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b01      	cmp	r3, #1
 8005538:	d10e      	bne.n	8005558 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b01      	cmp	r3, #1
 8005546:	d107      	bne.n	8005558 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f06f 0201 	mvn.w	r2, #1
 8005550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7fc fd7e 	bl	8002054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005562:	2b80      	cmp	r3, #128	; 0x80
 8005564:	d10e      	bne.n	8005584 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005570:	2b80      	cmp	r3, #128	; 0x80
 8005572:	d107      	bne.n	8005584 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800557c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f9a8 	bl	80058d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005592:	d10e      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559e:	2b80      	cmp	r3, #128	; 0x80
 80055a0:	d107      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80055aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f99b 	bl	80058e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055bc:	2b40      	cmp	r3, #64	; 0x40
 80055be:	d10e      	bne.n	80055de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ca:	2b40      	cmp	r3, #64	; 0x40
 80055cc:	d107      	bne.n	80055de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f838 	bl	800564e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	f003 0320 	and.w	r3, r3, #32
 80055e8:	2b20      	cmp	r3, #32
 80055ea:	d10e      	bne.n	800560a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f003 0320 	and.w	r3, r3, #32
 80055f6:	2b20      	cmp	r3, #32
 80055f8:	d107      	bne.n	800560a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f06f 0220 	mvn.w	r2, #32
 8005602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f95b 	bl	80058c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800560a:	bf00      	nop
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005656:	bf00      	nop
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
	...

08005664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a40      	ldr	r2, [pc, #256]	; (8005778 <TIM_Base_SetConfig+0x114>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d013      	beq.n	80056a4 <TIM_Base_SetConfig+0x40>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005682:	d00f      	beq.n	80056a4 <TIM_Base_SetConfig+0x40>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a3d      	ldr	r2, [pc, #244]	; (800577c <TIM_Base_SetConfig+0x118>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d00b      	beq.n	80056a4 <TIM_Base_SetConfig+0x40>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a3c      	ldr	r2, [pc, #240]	; (8005780 <TIM_Base_SetConfig+0x11c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d007      	beq.n	80056a4 <TIM_Base_SetConfig+0x40>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a3b      	ldr	r2, [pc, #236]	; (8005784 <TIM_Base_SetConfig+0x120>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d003      	beq.n	80056a4 <TIM_Base_SetConfig+0x40>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a3a      	ldr	r2, [pc, #232]	; (8005788 <TIM_Base_SetConfig+0x124>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d108      	bne.n	80056b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a2f      	ldr	r2, [pc, #188]	; (8005778 <TIM_Base_SetConfig+0x114>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d02b      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c4:	d027      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a2c      	ldr	r2, [pc, #176]	; (800577c <TIM_Base_SetConfig+0x118>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d023      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a2b      	ldr	r2, [pc, #172]	; (8005780 <TIM_Base_SetConfig+0x11c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d01f      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a2a      	ldr	r2, [pc, #168]	; (8005784 <TIM_Base_SetConfig+0x120>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d01b      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a29      	ldr	r2, [pc, #164]	; (8005788 <TIM_Base_SetConfig+0x124>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d017      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a28      	ldr	r2, [pc, #160]	; (800578c <TIM_Base_SetConfig+0x128>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d013      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a27      	ldr	r2, [pc, #156]	; (8005790 <TIM_Base_SetConfig+0x12c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00f      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a26      	ldr	r2, [pc, #152]	; (8005794 <TIM_Base_SetConfig+0x130>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00b      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a25      	ldr	r2, [pc, #148]	; (8005798 <TIM_Base_SetConfig+0x134>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d007      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a24      	ldr	r2, [pc, #144]	; (800579c <TIM_Base_SetConfig+0x138>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d003      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a23      	ldr	r2, [pc, #140]	; (80057a0 <TIM_Base_SetConfig+0x13c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d108      	bne.n	8005728 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800571c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	4313      	orrs	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a0a      	ldr	r2, [pc, #40]	; (8005778 <TIM_Base_SetConfig+0x114>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d003      	beq.n	800575c <TIM_Base_SetConfig+0xf8>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a0c      	ldr	r2, [pc, #48]	; (8005788 <TIM_Base_SetConfig+0x124>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d103      	bne.n	8005764 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	691a      	ldr	r2, [r3, #16]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	615a      	str	r2, [r3, #20]
}
 800576a:	bf00      	nop
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	40010000 	.word	0x40010000
 800577c:	40000400 	.word	0x40000400
 8005780:	40000800 	.word	0x40000800
 8005784:	40000c00 	.word	0x40000c00
 8005788:	40010400 	.word	0x40010400
 800578c:	40014000 	.word	0x40014000
 8005790:	40014400 	.word	0x40014400
 8005794:	40014800 	.word	0x40014800
 8005798:	40001800 	.word	0x40001800
 800579c:	40001c00 	.word	0x40001c00
 80057a0:	40002000 	.word	0x40002000

080057a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d101      	bne.n	80057bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057b8:	2302      	movs	r3, #2
 80057ba:	e06d      	b.n	8005898 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a30      	ldr	r2, [pc, #192]	; (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d004      	beq.n	80057f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a2f      	ldr	r2, [pc, #188]	; (80058a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d108      	bne.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005808:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	4313      	orrs	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a20      	ldr	r2, [pc, #128]	; (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d022      	beq.n	800586c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800582e:	d01d      	beq.n	800586c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a1d      	ldr	r2, [pc, #116]	; (80058ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d018      	beq.n	800586c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a1c      	ldr	r2, [pc, #112]	; (80058b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d013      	beq.n	800586c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a1a      	ldr	r2, [pc, #104]	; (80058b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d00e      	beq.n	800586c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a15      	ldr	r2, [pc, #84]	; (80058a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d009      	beq.n	800586c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a16      	ldr	r2, [pc, #88]	; (80058b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d004      	beq.n	800586c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a15      	ldr	r2, [pc, #84]	; (80058bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d10c      	bne.n	8005886 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005872:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	4313      	orrs	r3, r2
 800587c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	40010000 	.word	0x40010000
 80058a8:	40010400 	.word	0x40010400
 80058ac:	40000400 	.word	0x40000400
 80058b0:	40000800 	.word	0x40000800
 80058b4:	40000c00 	.word	0x40000c00
 80058b8:	40014000 	.word	0x40014000
 80058bc:	40001800 	.word	0x40001800

080058c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e040      	b.n	8005990 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005912:	2b00      	cmp	r3, #0
 8005914:	d106      	bne.n	8005924 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7fc fce0 	bl	80022e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2224      	movs	r2, #36	; 0x24
 8005928:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 0201 	bic.w	r2, r2, #1
 8005938:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f8c0 	bl	8005ac0 <UART_SetConfig>
 8005940:	4603      	mov	r3, r0
 8005942:	2b01      	cmp	r3, #1
 8005944:	d101      	bne.n	800594a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e022      	b.n	8005990 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fb16 	bl	8005f84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005966:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005976:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0201 	orr.w	r2, r2, #1
 8005986:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 fb9d 	bl	80060c8 <UART_CheckIdleState>
 800598e:	4603      	mov	r3, r0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b08a      	sub	sp, #40	; 0x28
 800599c:	af02      	add	r7, sp, #8
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	4613      	mov	r3, r2
 80059a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ac:	2b20      	cmp	r3, #32
 80059ae:	f040 8081 	bne.w	8005ab4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <HAL_UART_Transmit+0x26>
 80059b8:	88fb      	ldrh	r3, [r7, #6]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e079      	b.n	8005ab6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d101      	bne.n	80059d0 <HAL_UART_Transmit+0x38>
 80059cc:	2302      	movs	r3, #2
 80059ce:	e072      	b.n	8005ab6 <HAL_UART_Transmit+0x11e>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2221      	movs	r2, #33	; 0x21
 80059e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059e6:	f7fc fd3b 	bl	8002460 <HAL_GetTick>
 80059ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	88fa      	ldrh	r2, [r7, #6]
 80059f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	88fa      	ldrh	r2, [r7, #6]
 80059f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a04:	d108      	bne.n	8005a18 <HAL_UART_Transmit+0x80>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d104      	bne.n	8005a18 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	61bb      	str	r3, [r7, #24]
 8005a16:	e003      	b.n	8005a20 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005a28:	e02c      	b.n	8005a84 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2200      	movs	r2, #0
 8005a32:	2180      	movs	r1, #128	; 0x80
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 fb90 	bl	800615a <UART_WaitOnFlagUntilTimeout>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e038      	b.n	8005ab6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10b      	bne.n	8005a62 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	3302      	adds	r3, #2
 8005a5e:	61bb      	str	r3, [r7, #24]
 8005a60:	e007      	b.n	8005a72 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	781a      	ldrb	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1cc      	bne.n	8005a2a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2200      	movs	r2, #0
 8005a98:	2140      	movs	r1, #64	; 0x40
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 fb5d 	bl	800615a <UART_WaitOnFlagUntilTimeout>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e005      	b.n	8005ab6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2220      	movs	r2, #32
 8005aae:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	e000      	b.n	8005ab6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005ab4:	2302      	movs	r3, #2
  }
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3720      	adds	r7, #32
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
	...

08005ac0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	4ba7      	ldr	r3, [pc, #668]	; (8005d88 <UART_SetConfig+0x2c8>)
 8005aec:	4013      	ands	r3, r2
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6812      	ldr	r2, [r2, #0]
 8005af2:	6979      	ldr	r1, [r7, #20]
 8005af4:	430b      	orrs	r3, r1
 8005af6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68da      	ldr	r2, [r3, #12]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a95      	ldr	r2, [pc, #596]	; (8005d8c <UART_SetConfig+0x2cc>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d120      	bne.n	8005b7e <UART_SetConfig+0xbe>
 8005b3c:	4b94      	ldr	r3, [pc, #592]	; (8005d90 <UART_SetConfig+0x2d0>)
 8005b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b42:	f003 0303 	and.w	r3, r3, #3
 8005b46:	2b03      	cmp	r3, #3
 8005b48:	d816      	bhi.n	8005b78 <UART_SetConfig+0xb8>
 8005b4a:	a201      	add	r2, pc, #4	; (adr r2, 8005b50 <UART_SetConfig+0x90>)
 8005b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b50:	08005b61 	.word	0x08005b61
 8005b54:	08005b6d 	.word	0x08005b6d
 8005b58:	08005b67 	.word	0x08005b67
 8005b5c:	08005b73 	.word	0x08005b73
 8005b60:	2301      	movs	r3, #1
 8005b62:	77fb      	strb	r3, [r7, #31]
 8005b64:	e14f      	b.n	8005e06 <UART_SetConfig+0x346>
 8005b66:	2302      	movs	r3, #2
 8005b68:	77fb      	strb	r3, [r7, #31]
 8005b6a:	e14c      	b.n	8005e06 <UART_SetConfig+0x346>
 8005b6c:	2304      	movs	r3, #4
 8005b6e:	77fb      	strb	r3, [r7, #31]
 8005b70:	e149      	b.n	8005e06 <UART_SetConfig+0x346>
 8005b72:	2308      	movs	r3, #8
 8005b74:	77fb      	strb	r3, [r7, #31]
 8005b76:	e146      	b.n	8005e06 <UART_SetConfig+0x346>
 8005b78:	2310      	movs	r3, #16
 8005b7a:	77fb      	strb	r3, [r7, #31]
 8005b7c:	e143      	b.n	8005e06 <UART_SetConfig+0x346>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a84      	ldr	r2, [pc, #528]	; (8005d94 <UART_SetConfig+0x2d4>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d132      	bne.n	8005bee <UART_SetConfig+0x12e>
 8005b88:	4b81      	ldr	r3, [pc, #516]	; (8005d90 <UART_SetConfig+0x2d0>)
 8005b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8e:	f003 030c 	and.w	r3, r3, #12
 8005b92:	2b0c      	cmp	r3, #12
 8005b94:	d828      	bhi.n	8005be8 <UART_SetConfig+0x128>
 8005b96:	a201      	add	r2, pc, #4	; (adr r2, 8005b9c <UART_SetConfig+0xdc>)
 8005b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9c:	08005bd1 	.word	0x08005bd1
 8005ba0:	08005be9 	.word	0x08005be9
 8005ba4:	08005be9 	.word	0x08005be9
 8005ba8:	08005be9 	.word	0x08005be9
 8005bac:	08005bdd 	.word	0x08005bdd
 8005bb0:	08005be9 	.word	0x08005be9
 8005bb4:	08005be9 	.word	0x08005be9
 8005bb8:	08005be9 	.word	0x08005be9
 8005bbc:	08005bd7 	.word	0x08005bd7
 8005bc0:	08005be9 	.word	0x08005be9
 8005bc4:	08005be9 	.word	0x08005be9
 8005bc8:	08005be9 	.word	0x08005be9
 8005bcc:	08005be3 	.word	0x08005be3
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	77fb      	strb	r3, [r7, #31]
 8005bd4:	e117      	b.n	8005e06 <UART_SetConfig+0x346>
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	77fb      	strb	r3, [r7, #31]
 8005bda:	e114      	b.n	8005e06 <UART_SetConfig+0x346>
 8005bdc:	2304      	movs	r3, #4
 8005bde:	77fb      	strb	r3, [r7, #31]
 8005be0:	e111      	b.n	8005e06 <UART_SetConfig+0x346>
 8005be2:	2308      	movs	r3, #8
 8005be4:	77fb      	strb	r3, [r7, #31]
 8005be6:	e10e      	b.n	8005e06 <UART_SetConfig+0x346>
 8005be8:	2310      	movs	r3, #16
 8005bea:	77fb      	strb	r3, [r7, #31]
 8005bec:	e10b      	b.n	8005e06 <UART_SetConfig+0x346>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a69      	ldr	r2, [pc, #420]	; (8005d98 <UART_SetConfig+0x2d8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d120      	bne.n	8005c3a <UART_SetConfig+0x17a>
 8005bf8:	4b65      	ldr	r3, [pc, #404]	; (8005d90 <UART_SetConfig+0x2d0>)
 8005bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bfe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c02:	2b30      	cmp	r3, #48	; 0x30
 8005c04:	d013      	beq.n	8005c2e <UART_SetConfig+0x16e>
 8005c06:	2b30      	cmp	r3, #48	; 0x30
 8005c08:	d814      	bhi.n	8005c34 <UART_SetConfig+0x174>
 8005c0a:	2b20      	cmp	r3, #32
 8005c0c:	d009      	beq.n	8005c22 <UART_SetConfig+0x162>
 8005c0e:	2b20      	cmp	r3, #32
 8005c10:	d810      	bhi.n	8005c34 <UART_SetConfig+0x174>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <UART_SetConfig+0x15c>
 8005c16:	2b10      	cmp	r3, #16
 8005c18:	d006      	beq.n	8005c28 <UART_SetConfig+0x168>
 8005c1a:	e00b      	b.n	8005c34 <UART_SetConfig+0x174>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	77fb      	strb	r3, [r7, #31]
 8005c20:	e0f1      	b.n	8005e06 <UART_SetConfig+0x346>
 8005c22:	2302      	movs	r3, #2
 8005c24:	77fb      	strb	r3, [r7, #31]
 8005c26:	e0ee      	b.n	8005e06 <UART_SetConfig+0x346>
 8005c28:	2304      	movs	r3, #4
 8005c2a:	77fb      	strb	r3, [r7, #31]
 8005c2c:	e0eb      	b.n	8005e06 <UART_SetConfig+0x346>
 8005c2e:	2308      	movs	r3, #8
 8005c30:	77fb      	strb	r3, [r7, #31]
 8005c32:	e0e8      	b.n	8005e06 <UART_SetConfig+0x346>
 8005c34:	2310      	movs	r3, #16
 8005c36:	77fb      	strb	r3, [r7, #31]
 8005c38:	e0e5      	b.n	8005e06 <UART_SetConfig+0x346>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a57      	ldr	r2, [pc, #348]	; (8005d9c <UART_SetConfig+0x2dc>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d120      	bne.n	8005c86 <UART_SetConfig+0x1c6>
 8005c44:	4b52      	ldr	r3, [pc, #328]	; (8005d90 <UART_SetConfig+0x2d0>)
 8005c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c4e:	2bc0      	cmp	r3, #192	; 0xc0
 8005c50:	d013      	beq.n	8005c7a <UART_SetConfig+0x1ba>
 8005c52:	2bc0      	cmp	r3, #192	; 0xc0
 8005c54:	d814      	bhi.n	8005c80 <UART_SetConfig+0x1c0>
 8005c56:	2b80      	cmp	r3, #128	; 0x80
 8005c58:	d009      	beq.n	8005c6e <UART_SetConfig+0x1ae>
 8005c5a:	2b80      	cmp	r3, #128	; 0x80
 8005c5c:	d810      	bhi.n	8005c80 <UART_SetConfig+0x1c0>
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d002      	beq.n	8005c68 <UART_SetConfig+0x1a8>
 8005c62:	2b40      	cmp	r3, #64	; 0x40
 8005c64:	d006      	beq.n	8005c74 <UART_SetConfig+0x1b4>
 8005c66:	e00b      	b.n	8005c80 <UART_SetConfig+0x1c0>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	77fb      	strb	r3, [r7, #31]
 8005c6c:	e0cb      	b.n	8005e06 <UART_SetConfig+0x346>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	77fb      	strb	r3, [r7, #31]
 8005c72:	e0c8      	b.n	8005e06 <UART_SetConfig+0x346>
 8005c74:	2304      	movs	r3, #4
 8005c76:	77fb      	strb	r3, [r7, #31]
 8005c78:	e0c5      	b.n	8005e06 <UART_SetConfig+0x346>
 8005c7a:	2308      	movs	r3, #8
 8005c7c:	77fb      	strb	r3, [r7, #31]
 8005c7e:	e0c2      	b.n	8005e06 <UART_SetConfig+0x346>
 8005c80:	2310      	movs	r3, #16
 8005c82:	77fb      	strb	r3, [r7, #31]
 8005c84:	e0bf      	b.n	8005e06 <UART_SetConfig+0x346>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a45      	ldr	r2, [pc, #276]	; (8005da0 <UART_SetConfig+0x2e0>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d125      	bne.n	8005cdc <UART_SetConfig+0x21c>
 8005c90:	4b3f      	ldr	r3, [pc, #252]	; (8005d90 <UART_SetConfig+0x2d0>)
 8005c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c9e:	d017      	beq.n	8005cd0 <UART_SetConfig+0x210>
 8005ca0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ca4:	d817      	bhi.n	8005cd6 <UART_SetConfig+0x216>
 8005ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005caa:	d00b      	beq.n	8005cc4 <UART_SetConfig+0x204>
 8005cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb0:	d811      	bhi.n	8005cd6 <UART_SetConfig+0x216>
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <UART_SetConfig+0x1fe>
 8005cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cba:	d006      	beq.n	8005cca <UART_SetConfig+0x20a>
 8005cbc:	e00b      	b.n	8005cd6 <UART_SetConfig+0x216>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	77fb      	strb	r3, [r7, #31]
 8005cc2:	e0a0      	b.n	8005e06 <UART_SetConfig+0x346>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	77fb      	strb	r3, [r7, #31]
 8005cc8:	e09d      	b.n	8005e06 <UART_SetConfig+0x346>
 8005cca:	2304      	movs	r3, #4
 8005ccc:	77fb      	strb	r3, [r7, #31]
 8005cce:	e09a      	b.n	8005e06 <UART_SetConfig+0x346>
 8005cd0:	2308      	movs	r3, #8
 8005cd2:	77fb      	strb	r3, [r7, #31]
 8005cd4:	e097      	b.n	8005e06 <UART_SetConfig+0x346>
 8005cd6:	2310      	movs	r3, #16
 8005cd8:	77fb      	strb	r3, [r7, #31]
 8005cda:	e094      	b.n	8005e06 <UART_SetConfig+0x346>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a30      	ldr	r2, [pc, #192]	; (8005da4 <UART_SetConfig+0x2e4>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d125      	bne.n	8005d32 <UART_SetConfig+0x272>
 8005ce6:	4b2a      	ldr	r3, [pc, #168]	; (8005d90 <UART_SetConfig+0x2d0>)
 8005ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cf0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cf4:	d017      	beq.n	8005d26 <UART_SetConfig+0x266>
 8005cf6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cfa:	d817      	bhi.n	8005d2c <UART_SetConfig+0x26c>
 8005cfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d00:	d00b      	beq.n	8005d1a <UART_SetConfig+0x25a>
 8005d02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d06:	d811      	bhi.n	8005d2c <UART_SetConfig+0x26c>
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <UART_SetConfig+0x254>
 8005d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d10:	d006      	beq.n	8005d20 <UART_SetConfig+0x260>
 8005d12:	e00b      	b.n	8005d2c <UART_SetConfig+0x26c>
 8005d14:	2301      	movs	r3, #1
 8005d16:	77fb      	strb	r3, [r7, #31]
 8005d18:	e075      	b.n	8005e06 <UART_SetConfig+0x346>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	77fb      	strb	r3, [r7, #31]
 8005d1e:	e072      	b.n	8005e06 <UART_SetConfig+0x346>
 8005d20:	2304      	movs	r3, #4
 8005d22:	77fb      	strb	r3, [r7, #31]
 8005d24:	e06f      	b.n	8005e06 <UART_SetConfig+0x346>
 8005d26:	2308      	movs	r3, #8
 8005d28:	77fb      	strb	r3, [r7, #31]
 8005d2a:	e06c      	b.n	8005e06 <UART_SetConfig+0x346>
 8005d2c:	2310      	movs	r3, #16
 8005d2e:	77fb      	strb	r3, [r7, #31]
 8005d30:	e069      	b.n	8005e06 <UART_SetConfig+0x346>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a1c      	ldr	r2, [pc, #112]	; (8005da8 <UART_SetConfig+0x2e8>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d137      	bne.n	8005dac <UART_SetConfig+0x2ec>
 8005d3c:	4b14      	ldr	r3, [pc, #80]	; (8005d90 <UART_SetConfig+0x2d0>)
 8005d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d42:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005d46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d4a:	d017      	beq.n	8005d7c <UART_SetConfig+0x2bc>
 8005d4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d50:	d817      	bhi.n	8005d82 <UART_SetConfig+0x2c2>
 8005d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d56:	d00b      	beq.n	8005d70 <UART_SetConfig+0x2b0>
 8005d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d5c:	d811      	bhi.n	8005d82 <UART_SetConfig+0x2c2>
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <UART_SetConfig+0x2aa>
 8005d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d66:	d006      	beq.n	8005d76 <UART_SetConfig+0x2b6>
 8005d68:	e00b      	b.n	8005d82 <UART_SetConfig+0x2c2>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	77fb      	strb	r3, [r7, #31]
 8005d6e:	e04a      	b.n	8005e06 <UART_SetConfig+0x346>
 8005d70:	2302      	movs	r3, #2
 8005d72:	77fb      	strb	r3, [r7, #31]
 8005d74:	e047      	b.n	8005e06 <UART_SetConfig+0x346>
 8005d76:	2304      	movs	r3, #4
 8005d78:	77fb      	strb	r3, [r7, #31]
 8005d7a:	e044      	b.n	8005e06 <UART_SetConfig+0x346>
 8005d7c:	2308      	movs	r3, #8
 8005d7e:	77fb      	strb	r3, [r7, #31]
 8005d80:	e041      	b.n	8005e06 <UART_SetConfig+0x346>
 8005d82:	2310      	movs	r3, #16
 8005d84:	77fb      	strb	r3, [r7, #31]
 8005d86:	e03e      	b.n	8005e06 <UART_SetConfig+0x346>
 8005d88:	efff69f3 	.word	0xefff69f3
 8005d8c:	40011000 	.word	0x40011000
 8005d90:	40023800 	.word	0x40023800
 8005d94:	40004400 	.word	0x40004400
 8005d98:	40004800 	.word	0x40004800
 8005d9c:	40004c00 	.word	0x40004c00
 8005da0:	40005000 	.word	0x40005000
 8005da4:	40011400 	.word	0x40011400
 8005da8:	40007800 	.word	0x40007800
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a71      	ldr	r2, [pc, #452]	; (8005f78 <UART_SetConfig+0x4b8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d125      	bne.n	8005e02 <UART_SetConfig+0x342>
 8005db6:	4b71      	ldr	r3, [pc, #452]	; (8005f7c <UART_SetConfig+0x4bc>)
 8005db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005dc0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005dc4:	d017      	beq.n	8005df6 <UART_SetConfig+0x336>
 8005dc6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005dca:	d817      	bhi.n	8005dfc <UART_SetConfig+0x33c>
 8005dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dd0:	d00b      	beq.n	8005dea <UART_SetConfig+0x32a>
 8005dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dd6:	d811      	bhi.n	8005dfc <UART_SetConfig+0x33c>
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <UART_SetConfig+0x324>
 8005ddc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005de0:	d006      	beq.n	8005df0 <UART_SetConfig+0x330>
 8005de2:	e00b      	b.n	8005dfc <UART_SetConfig+0x33c>
 8005de4:	2300      	movs	r3, #0
 8005de6:	77fb      	strb	r3, [r7, #31]
 8005de8:	e00d      	b.n	8005e06 <UART_SetConfig+0x346>
 8005dea:	2302      	movs	r3, #2
 8005dec:	77fb      	strb	r3, [r7, #31]
 8005dee:	e00a      	b.n	8005e06 <UART_SetConfig+0x346>
 8005df0:	2304      	movs	r3, #4
 8005df2:	77fb      	strb	r3, [r7, #31]
 8005df4:	e007      	b.n	8005e06 <UART_SetConfig+0x346>
 8005df6:	2308      	movs	r3, #8
 8005df8:	77fb      	strb	r3, [r7, #31]
 8005dfa:	e004      	b.n	8005e06 <UART_SetConfig+0x346>
 8005dfc:	2310      	movs	r3, #16
 8005dfe:	77fb      	strb	r3, [r7, #31]
 8005e00:	e001      	b.n	8005e06 <UART_SetConfig+0x346>
 8005e02:	2310      	movs	r3, #16
 8005e04:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e0e:	d15b      	bne.n	8005ec8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005e10:	7ffb      	ldrb	r3, [r7, #31]
 8005e12:	2b08      	cmp	r3, #8
 8005e14:	d827      	bhi.n	8005e66 <UART_SetConfig+0x3a6>
 8005e16:	a201      	add	r2, pc, #4	; (adr r2, 8005e1c <UART_SetConfig+0x35c>)
 8005e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1c:	08005e41 	.word	0x08005e41
 8005e20:	08005e49 	.word	0x08005e49
 8005e24:	08005e51 	.word	0x08005e51
 8005e28:	08005e67 	.word	0x08005e67
 8005e2c:	08005e57 	.word	0x08005e57
 8005e30:	08005e67 	.word	0x08005e67
 8005e34:	08005e67 	.word	0x08005e67
 8005e38:	08005e67 	.word	0x08005e67
 8005e3c:	08005e5f 	.word	0x08005e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e40:	f7fe fda8 	bl	8004994 <HAL_RCC_GetPCLK1Freq>
 8005e44:	61b8      	str	r0, [r7, #24]
        break;
 8005e46:	e013      	b.n	8005e70 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e48:	f7fe fdb8 	bl	80049bc <HAL_RCC_GetPCLK2Freq>
 8005e4c:	61b8      	str	r0, [r7, #24]
        break;
 8005e4e:	e00f      	b.n	8005e70 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e50:	4b4b      	ldr	r3, [pc, #300]	; (8005f80 <UART_SetConfig+0x4c0>)
 8005e52:	61bb      	str	r3, [r7, #24]
        break;
 8005e54:	e00c      	b.n	8005e70 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e56:	f7fe fcdb 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8005e5a:	61b8      	str	r0, [r7, #24]
        break;
 8005e5c:	e008      	b.n	8005e70 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e62:	61bb      	str	r3, [r7, #24]
        break;
 8005e64:	e004      	b.n	8005e70 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	77bb      	strb	r3, [r7, #30]
        break;
 8005e6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d074      	beq.n	8005f60 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	005a      	lsls	r2, r3, #1
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	085b      	lsrs	r3, r3, #1
 8005e80:	441a      	add	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	2b0f      	cmp	r3, #15
 8005e92:	d916      	bls.n	8005ec2 <UART_SetConfig+0x402>
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e9a:	d212      	bcs.n	8005ec2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	f023 030f 	bic.w	r3, r3, #15
 8005ea4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	085b      	lsrs	r3, r3, #1
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	f003 0307 	and.w	r3, r3, #7
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	89fb      	ldrh	r3, [r7, #14]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	89fa      	ldrh	r2, [r7, #14]
 8005ebe:	60da      	str	r2, [r3, #12]
 8005ec0:	e04e      	b.n	8005f60 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	77bb      	strb	r3, [r7, #30]
 8005ec6:	e04b      	b.n	8005f60 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ec8:	7ffb      	ldrb	r3, [r7, #31]
 8005eca:	2b08      	cmp	r3, #8
 8005ecc:	d827      	bhi.n	8005f1e <UART_SetConfig+0x45e>
 8005ece:	a201      	add	r2, pc, #4	; (adr r2, 8005ed4 <UART_SetConfig+0x414>)
 8005ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed4:	08005ef9 	.word	0x08005ef9
 8005ed8:	08005f01 	.word	0x08005f01
 8005edc:	08005f09 	.word	0x08005f09
 8005ee0:	08005f1f 	.word	0x08005f1f
 8005ee4:	08005f0f 	.word	0x08005f0f
 8005ee8:	08005f1f 	.word	0x08005f1f
 8005eec:	08005f1f 	.word	0x08005f1f
 8005ef0:	08005f1f 	.word	0x08005f1f
 8005ef4:	08005f17 	.word	0x08005f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ef8:	f7fe fd4c 	bl	8004994 <HAL_RCC_GetPCLK1Freq>
 8005efc:	61b8      	str	r0, [r7, #24]
        break;
 8005efe:	e013      	b.n	8005f28 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f00:	f7fe fd5c 	bl	80049bc <HAL_RCC_GetPCLK2Freq>
 8005f04:	61b8      	str	r0, [r7, #24]
        break;
 8005f06:	e00f      	b.n	8005f28 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f08:	4b1d      	ldr	r3, [pc, #116]	; (8005f80 <UART_SetConfig+0x4c0>)
 8005f0a:	61bb      	str	r3, [r7, #24]
        break;
 8005f0c:	e00c      	b.n	8005f28 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f0e:	f7fe fc7f 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8005f12:	61b8      	str	r0, [r7, #24]
        break;
 8005f14:	e008      	b.n	8005f28 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f1a:	61bb      	str	r3, [r7, #24]
        break;
 8005f1c:	e004      	b.n	8005f28 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	77bb      	strb	r3, [r7, #30]
        break;
 8005f26:	bf00      	nop
    }

    if (pclk != 0U)
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d018      	beq.n	8005f60 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	085a      	lsrs	r2, r3, #1
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	441a      	add	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	2b0f      	cmp	r3, #15
 8005f48:	d908      	bls.n	8005f5c <UART_SetConfig+0x49c>
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f50:	d204      	bcs.n	8005f5c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	60da      	str	r2, [r3, #12]
 8005f5a:	e001      	b.n	8005f60 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3720      	adds	r7, #32
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	40007c00 	.word	0x40007c00
 8005f7c:	40023800 	.word	0x40023800
 8005f80:	00f42400 	.word	0x00f42400

08005f84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00a      	beq.n	8005fae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00a      	beq.n	8005ff2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	f003 0308 	and.w	r3, r3, #8
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00a      	beq.n	8006014 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	f003 0310 	and.w	r3, r3, #16
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00a      	beq.n	8006036 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603a:	f003 0320 	and.w	r3, r3, #32
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00a      	beq.n	8006058 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006060:	2b00      	cmp	r3, #0
 8006062:	d01a      	beq.n	800609a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006082:	d10a      	bne.n	800609a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	430a      	orrs	r2, r1
 8006098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00a      	beq.n	80060bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	430a      	orrs	r2, r1
 80060ba:	605a      	str	r2, [r3, #4]
  }
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af02      	add	r7, sp, #8
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060d8:	f7fc f9c2 	bl	8002460 <HAL_GetTick>
 80060dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0308 	and.w	r3, r3, #8
 80060e8:	2b08      	cmp	r3, #8
 80060ea:	d10e      	bne.n	800610a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f82d 	bl	800615a <UART_WaitOnFlagUntilTimeout>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e023      	b.n	8006152 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0304 	and.w	r3, r3, #4
 8006114:	2b04      	cmp	r3, #4
 8006116:	d10e      	bne.n	8006136 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006118:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f817 	bl	800615a <UART_WaitOnFlagUntilTimeout>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e00d      	b.n	8006152 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2220      	movs	r2, #32
 800613a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2220      	movs	r2, #32
 8006140:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b084      	sub	sp, #16
 800615e:	af00      	add	r7, sp, #0
 8006160:	60f8      	str	r0, [r7, #12]
 8006162:	60b9      	str	r1, [r7, #8]
 8006164:	603b      	str	r3, [r7, #0]
 8006166:	4613      	mov	r3, r2
 8006168:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800616a:	e05e      	b.n	800622a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006172:	d05a      	beq.n	800622a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006174:	f7fc f974 	bl	8002460 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	69ba      	ldr	r2, [r7, #24]
 8006180:	429a      	cmp	r2, r3
 8006182:	d302      	bcc.n	800618a <UART_WaitOnFlagUntilTimeout+0x30>
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d11b      	bne.n	80061c2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006198:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f022 0201 	bic.w	r2, r2, #1
 80061a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2220      	movs	r2, #32
 80061ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2220      	movs	r2, #32
 80061b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e043      	b.n	800624a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0304 	and.w	r3, r3, #4
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d02c      	beq.n	800622a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061de:	d124      	bne.n	800622a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061f8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689a      	ldr	r2, [r3, #8]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0201 	bic.w	r2, r2, #1
 8006208:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2220      	movs	r2, #32
 800620e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2220      	movs	r2, #32
 8006214:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2220      	movs	r2, #32
 800621a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e00f      	b.n	800624a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69da      	ldr	r2, [r3, #28]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	4013      	ands	r3, r2
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	429a      	cmp	r2, r3
 8006238:	bf0c      	ite	eq
 800623a:	2301      	moveq	r3, #1
 800623c:	2300      	movne	r3, #0
 800623e:	b2db      	uxtb	r3, r3
 8006240:	461a      	mov	r2, r3
 8006242:	79fb      	ldrb	r3, [r7, #7]
 8006244:	429a      	cmp	r2, r3
 8006246:	d091      	beq.n	800616c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
	...

08006254 <__libc_init_array>:
 8006254:	b570      	push	{r4, r5, r6, lr}
 8006256:	4d0d      	ldr	r5, [pc, #52]	; (800628c <__libc_init_array+0x38>)
 8006258:	4c0d      	ldr	r4, [pc, #52]	; (8006290 <__libc_init_array+0x3c>)
 800625a:	1b64      	subs	r4, r4, r5
 800625c:	10a4      	asrs	r4, r4, #2
 800625e:	2600      	movs	r6, #0
 8006260:	42a6      	cmp	r6, r4
 8006262:	d109      	bne.n	8006278 <__libc_init_array+0x24>
 8006264:	4d0b      	ldr	r5, [pc, #44]	; (8006294 <__libc_init_array+0x40>)
 8006266:	4c0c      	ldr	r4, [pc, #48]	; (8006298 <__libc_init_array+0x44>)
 8006268:	f000 f864 	bl	8006334 <_init>
 800626c:	1b64      	subs	r4, r4, r5
 800626e:	10a4      	asrs	r4, r4, #2
 8006270:	2600      	movs	r6, #0
 8006272:	42a6      	cmp	r6, r4
 8006274:	d105      	bne.n	8006282 <__libc_init_array+0x2e>
 8006276:	bd70      	pop	{r4, r5, r6, pc}
 8006278:	f855 3b04 	ldr.w	r3, [r5], #4
 800627c:	4798      	blx	r3
 800627e:	3601      	adds	r6, #1
 8006280:	e7ee      	b.n	8006260 <__libc_init_array+0xc>
 8006282:	f855 3b04 	ldr.w	r3, [r5], #4
 8006286:	4798      	blx	r3
 8006288:	3601      	adds	r6, #1
 800628a:	e7f2      	b.n	8006272 <__libc_init_array+0x1e>
 800628c:	0800690c 	.word	0x0800690c
 8006290:	0800690c 	.word	0x0800690c
 8006294:	0800690c 	.word	0x0800690c
 8006298:	08006910 	.word	0x08006910

0800629c <memset>:
 800629c:	4402      	add	r2, r0
 800629e:	4603      	mov	r3, r0
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d100      	bne.n	80062a6 <memset+0xa>
 80062a4:	4770      	bx	lr
 80062a6:	f803 1b01 	strb.w	r1, [r3], #1
 80062aa:	e7f9      	b.n	80062a0 <memset+0x4>

080062ac <__utoa>:
 80062ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ae:	4c1f      	ldr	r4, [pc, #124]	; (800632c <__utoa+0x80>)
 80062b0:	b08b      	sub	sp, #44	; 0x2c
 80062b2:	4605      	mov	r5, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	466e      	mov	r6, sp
 80062b8:	f104 0c20 	add.w	ip, r4, #32
 80062bc:	6820      	ldr	r0, [r4, #0]
 80062be:	6861      	ldr	r1, [r4, #4]
 80062c0:	4637      	mov	r7, r6
 80062c2:	c703      	stmia	r7!, {r0, r1}
 80062c4:	3408      	adds	r4, #8
 80062c6:	4564      	cmp	r4, ip
 80062c8:	463e      	mov	r6, r7
 80062ca:	d1f7      	bne.n	80062bc <__utoa+0x10>
 80062cc:	7921      	ldrb	r1, [r4, #4]
 80062ce:	7139      	strb	r1, [r7, #4]
 80062d0:	1e91      	subs	r1, r2, #2
 80062d2:	6820      	ldr	r0, [r4, #0]
 80062d4:	6038      	str	r0, [r7, #0]
 80062d6:	2922      	cmp	r1, #34	; 0x22
 80062d8:	f04f 0100 	mov.w	r1, #0
 80062dc:	d904      	bls.n	80062e8 <__utoa+0x3c>
 80062de:	7019      	strb	r1, [r3, #0]
 80062e0:	460b      	mov	r3, r1
 80062e2:	4618      	mov	r0, r3
 80062e4:	b00b      	add	sp, #44	; 0x2c
 80062e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062e8:	1e58      	subs	r0, r3, #1
 80062ea:	4684      	mov	ip, r0
 80062ec:	fbb5 f7f2 	udiv	r7, r5, r2
 80062f0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80062f4:	fb02 5617 	mls	r6, r2, r7, r5
 80062f8:	4476      	add	r6, lr
 80062fa:	460c      	mov	r4, r1
 80062fc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006300:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006304:	462e      	mov	r6, r5
 8006306:	42b2      	cmp	r2, r6
 8006308:	f101 0101 	add.w	r1, r1, #1
 800630c:	463d      	mov	r5, r7
 800630e:	d9ed      	bls.n	80062ec <__utoa+0x40>
 8006310:	2200      	movs	r2, #0
 8006312:	545a      	strb	r2, [r3, r1]
 8006314:	1919      	adds	r1, r3, r4
 8006316:	1aa5      	subs	r5, r4, r2
 8006318:	42aa      	cmp	r2, r5
 800631a:	dae2      	bge.n	80062e2 <__utoa+0x36>
 800631c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006320:	780e      	ldrb	r6, [r1, #0]
 8006322:	7006      	strb	r6, [r0, #0]
 8006324:	3201      	adds	r2, #1
 8006326:	f801 5901 	strb.w	r5, [r1], #-1
 800632a:	e7f4      	b.n	8006316 <__utoa+0x6a>
 800632c:	080068dc 	.word	0x080068dc

08006330 <utoa>:
 8006330:	f7ff bfbc 	b.w	80062ac <__utoa>

08006334 <_init>:
 8006334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006336:	bf00      	nop
 8006338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800633a:	bc08      	pop	{r3}
 800633c:	469e      	mov	lr, r3
 800633e:	4770      	bx	lr

08006340 <_fini>:
 8006340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006342:	bf00      	nop
 8006344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006346:	bc08      	pop	{r3}
 8006348:	469e      	mov	lr, r3
 800634a:	4770      	bx	lr
