
Motorsteuergeraet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f6c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  08008164  08008164  00018164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800891c  0800891c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800891c  0800891c  0001891c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008924  08008924  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008924  08008924  00018924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008928  08008928  00018928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800892c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  2000000c  08008938  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08008938  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a5b5  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d2f  00000000  00000000  0003a5ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  0003e320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d0  00000000  00000000  0003f5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c9e1  00000000  00000000  00040678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001acdf  00000000  00000000  0006d059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108dce  00000000  00000000  00087d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00190b06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a64  00000000  00000000  00190b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800814c 	.word	0x0800814c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800814c 	.word	0x0800814c

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <BAMOCAN_ID>:
//----------------------------------------------------------------------

// Ermittle Register nach Empfang Bamocar CAN-ID
//----------------------------------------------------------------------
void BAMOCAN_ID(uint8_t* data, uint8_t dlc)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	460b      	mov	r3, r1
 8000556:	70fb      	strb	r3, [r7, #3]
	uint8_t Reg = data[0];
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	733b      	strb	r3, [r7, #12]
	uint16_t speed = 0, strom;
 800055e:	2300      	movs	r3, #0
 8000560:	817b      	strh	r3, [r7, #10]

	// Waehlen welches Register gesendet wurde
	switch (Reg)
 8000562:	7b3b      	ldrb	r3, [r7, #12]
 8000564:	2bd8      	cmp	r3, #216	; 0xd8
 8000566:	f000 80be 	beq.w	80006e6 <BAMOCAN_ID+0x19a>
 800056a:	2bd8      	cmp	r3, #216	; 0xd8
 800056c:	f300 8100 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 8000570:	2ba8      	cmp	r3, #168	; 0xa8
 8000572:	d012      	beq.n	800059a <BAMOCAN_ID+0x4e>
 8000574:	2ba8      	cmp	r3, #168	; 0xa8
 8000576:	f300 80fb 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 800057a:	2b8f      	cmp	r3, #143	; 0x8f
 800057c:	d077      	beq.n	800066e <BAMOCAN_ID+0x122>
 800057e:	2b8f      	cmp	r3, #143	; 0x8f
 8000580:	f300 80f6 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 8000584:	2b5f      	cmp	r3, #95	; 0x5f
 8000586:	d025      	beq.n	80005d4 <BAMOCAN_ID+0x88>
 8000588:	2b5f      	cmp	r3, #95	; 0x5f
 800058a:	f300 80f1 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 800058e:	2b1b      	cmp	r3, #27
 8000590:	f000 80d4 	beq.w	800073c <BAMOCAN_ID+0x1f0>
 8000594:	2b40      	cmp	r3, #64	; 0x40
 8000596:	d037      	beq.n	8000608 <BAMOCAN_ID+0xbc>
 8000598:	e0ea      	b.n	8000770 <BAMOCAN_ID+0x224>
	{
		// Drehzahl vom Bamocar bekommen
		case BAMOCAR_REG_N_ACT_FILTER:
			speed = ((data[2]<<8) + data[1]);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3302      	adds	r3, #2
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	021b      	lsls	r3, r3, #8
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	3301      	adds	r3, #1
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	4413      	add	r3, r2
 80005b0:	817b      	strh	r3, [r7, #10]
			motor1.Drehzahl = speed;
 80005b2:	4a74      	ldr	r2, [pc, #464]	; (8000784 <BAMOCAN_ID+0x238>)
 80005b4:	897b      	ldrh	r3, [r7, #10]
 80005b6:	8053      	strh	r3, [r2, #2]
// Uart Ausgabe
#ifdef DEBUG_BAMOCAR
			uartTransmit("Motordrehzahl\n", 14);
 80005b8:	210e      	movs	r1, #14
 80005ba:	4873      	ldr	r0, [pc, #460]	; (8000788 <BAMOCAN_ID+0x23c>)
 80005bc:	f000 f900 	bl	80007c0 <uartTransmit>
			uartTransmitNumber(speed, 10);
 80005c0:	897b      	ldrh	r3, [r7, #10]
 80005c2:	210a      	movs	r1, #10
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f90f 	bl	80007e8 <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005ca:	2101      	movs	r1, #1
 80005cc:	486f      	ldr	r0, [pc, #444]	; (800078c <BAMOCAN_ID+0x240>)
 80005ce:	f000 f8f7 	bl	80007c0 <uartTransmit>
#endif
			break;
 80005d2:	e0d2      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Stromwert von Bamocar bekommen
		case BAMOCAR_REG_I_ACT_FILTER:
			strom = ((data[2]<<8) + data[1]);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3302      	adds	r3, #2
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	021b      	lsls	r3, r3, #8
 80005de:	b29a      	uxth	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3301      	adds	r3, #1
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	4413      	add	r3, r2
 80005ea:	813b      	strh	r3, [r7, #8]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Motorstrom\n", 11);
 80005ec:	210b      	movs	r1, #11
 80005ee:	4868      	ldr	r0, [pc, #416]	; (8000790 <BAMOCAN_ID+0x244>)
 80005f0:	f000 f8e6 	bl	80007c0 <uartTransmit>
			uartTransmitNumber(strom, 10);
 80005f4:	893b      	ldrh	r3, [r7, #8]
 80005f6:	210a      	movs	r1, #10
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 f8f5 	bl	80007e8 <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005fe:	2101      	movs	r1, #1
 8000600:	4862      	ldr	r0, [pc, #392]	; (800078c <BAMOCAN_ID+0x240>)
 8000602:	f000 f8dd 	bl	80007c0 <uartTransmit>
#endif

			break;
 8000606:	e0b8      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Statusregister von Bamocar bekommen
		case BAMOCAR_REG_STATUS:
			bamocar_stat.status1 = ((data[4] << 24) + (data[3] << 16) + (data[2] << 8) + data[1]);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3304      	adds	r3, #4
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	061a      	lsls	r2, r3, #24
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3303      	adds	r3, #3
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	041b      	lsls	r3, r3, #16
 8000618:	441a      	add	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	3302      	adds	r3, #2
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	4413      	add	r3, r2
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	3201      	adds	r2, #1
 8000628:	7812      	ldrb	r2, [r2, #0]
 800062a:	4413      	add	r3, r2
 800062c:	461a      	mov	r2, r3
 800062e:	4b59      	ldr	r3, [pc, #356]	; (8000794 <BAMOCAN_ID+0x248>)
 8000630:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Status\n", 15);
 8000632:	210f      	movs	r1, #15
 8000634:	4858      	ldr	r0, [pc, #352]	; (8000798 <BAMOCAN_ID+0x24c>)
 8000636:	f000 f8c3 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 4; i > 0; i--)
 800063a:	2304      	movs	r3, #4
 800063c:	73fb      	strb	r3, [r7, #15]
 800063e:	e00e      	b.n	800065e <BAMOCAN_ID+0x112>
			{
				uartTransmitNumber(bamocar_stat.status[i-1], 16);
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	3b01      	subs	r3, #1
 8000644:	4a53      	ldr	r2, [pc, #332]	; (8000794 <BAMOCAN_ID+0x248>)
 8000646:	5cd3      	ldrb	r3, [r2, r3]
 8000648:	2110      	movs	r1, #16
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f8cc 	bl	80007e8 <uartTransmitNumber>
				uartTransmit(" ", 1);
 8000650:	2101      	movs	r1, #1
 8000652:	4852      	ldr	r0, [pc, #328]	; (800079c <BAMOCAN_ID+0x250>)
 8000654:	f000 f8b4 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 4; i > 0; i--)
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	3b01      	subs	r3, #1
 800065c:	73fb      	strb	r3, [r7, #15]
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d1ed      	bne.n	8000640 <BAMOCAN_ID+0xf4>
			}
			uartTransmit("\n", 1);
 8000664:	2101      	movs	r1, #1
 8000666:	4849      	ldr	r0, [pc, #292]	; (800078c <BAMOCAN_ID+0x240>)
 8000668:	f000 f8aa 	bl	80007c0 <uartTransmit>
#endif

			break;
 800066c:	e085      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Errorregister von Bamocar bekommen
		case BAMOCAR_REG_ERROR:
			bamocar_error.error1 = ((data[2] << 8) + data[1]);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3302      	adds	r3, #2
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b29b      	uxth	r3, r3
 8000676:	021b      	lsls	r3, r3, #8
 8000678:	b29a      	uxth	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	3301      	adds	r3, #1
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b29b      	uxth	r3, r3
 8000682:	4413      	add	r3, r2
 8000684:	b29a      	uxth	r2, r3
 8000686:	4b46      	ldr	r3, [pc, #280]	; (80007a0 <BAMOCAN_ID+0x254>)
 8000688:	801a      	strh	r2, [r3, #0]
			bamocar_warnung.warnung1 = ((data[4] << 8) + data[3]);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3304      	adds	r3, #4
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	b29b      	uxth	r3, r3
 8000692:	021b      	lsls	r3, r3, #8
 8000694:	b29a      	uxth	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3303      	adds	r3, #3
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b29b      	uxth	r3, r3
 800069e:	4413      	add	r3, r2
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	4b40      	ldr	r3, [pc, #256]	; (80007a4 <BAMOCAN_ID+0x258>)
 80006a4:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Error\n", 14);
 80006a6:	210e      	movs	r1, #14
 80006a8:	483f      	ldr	r0, [pc, #252]	; (80007a8 <BAMOCAN_ID+0x25c>)
 80006aa:	f000 f889 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	73bb      	strb	r3, [r7, #14]
 80006b2:	e010      	b.n	80006d6 <BAMOCAN_ID+0x18a>
			{
				uartTransmitNumber(data[1+i], 16);
 80006b4:	7bbb      	ldrb	r3, [r7, #14]
 80006b6:	3301      	adds	r3, #1
 80006b8:	461a      	mov	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2110      	movs	r1, #16
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 f890 	bl	80007e8 <uartTransmitNumber>
				uartTransmit(" ", 1);
 80006c8:	2101      	movs	r1, #1
 80006ca:	4834      	ldr	r0, [pc, #208]	; (800079c <BAMOCAN_ID+0x250>)
 80006cc:	f000 f878 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006d0:	7bbb      	ldrb	r3, [r7, #14]
 80006d2:	3301      	adds	r3, #1
 80006d4:	73bb      	strb	r3, [r7, #14]
 80006d6:	7bbb      	ldrb	r3, [r7, #14]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	d9eb      	bls.n	80006b4 <BAMOCAN_ID+0x168>
			}
			uartTransmit("\n", 1);
 80006dc:	2101      	movs	r1, #1
 80006de:	482b      	ldr	r0, [pc, #172]	; (800078c <BAMOCAN_ID+0x240>)
 80006e0:	f000 f86e 	bl	80007c0 <uartTransmit>
#endif

			break;
 80006e4:	e049      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Status IO Register von Bamocar bekommen
		case BAMOCAR_REG_STATUS_IO:
			bamocar_IOstatus.status1 = ((data[2] << 8) + data[1]);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3302      	adds	r3, #2
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	021b      	lsls	r3, r3, #8
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3301      	adds	r3, #1
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	4413      	add	r3, r2
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <BAMOCAN_ID+0x260>)
 8000700:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar IO Status\n", 18);
 8000702:	2112      	movs	r1, #18
 8000704:	482a      	ldr	r0, [pc, #168]	; (80007b0 <BAMOCAN_ID+0x264>)
 8000706:	f000 f85b 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 2; i++)
 800070a:	2300      	movs	r3, #0
 800070c:	737b      	strb	r3, [r7, #13]
 800070e:	e00d      	b.n	800072c <BAMOCAN_ID+0x1e0>
			{
				uartTransmitNumber(bamocar_IOstatus.status[i], 16);
 8000710:	7b7b      	ldrb	r3, [r7, #13]
 8000712:	4a26      	ldr	r2, [pc, #152]	; (80007ac <BAMOCAN_ID+0x260>)
 8000714:	5cd3      	ldrb	r3, [r2, r3]
 8000716:	2110      	movs	r1, #16
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f865 	bl	80007e8 <uartTransmitNumber>
				uartTransmit(" ", 1);
 800071e:	2101      	movs	r1, #1
 8000720:	481e      	ldr	r0, [pc, #120]	; (800079c <BAMOCAN_ID+0x250>)
 8000722:	f000 f84d 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 2; i++)
 8000726:	7b7b      	ldrb	r3, [r7, #13]
 8000728:	3301      	adds	r3, #1
 800072a:	737b      	strb	r3, [r7, #13]
 800072c:	7b7b      	ldrb	r3, [r7, #13]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d9ee      	bls.n	8000710 <BAMOCAN_ID+0x1c4>
			}
			uartTransmit("\n", 1);
 8000732:	2101      	movs	r1, #1
 8000734:	4815      	ldr	r0, [pc, #84]	; (800078c <BAMOCAN_ID+0x240>)
 8000736:	f000 f843 	bl	80007c0 <uartTransmit>
#endif

			break;
 800073a:	e01e      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Firmware von Bamocar ausgelesen
		case BAMOCAR_REG_FIRMWARE:
			bamocar_data.data = ((data[2]<<8) + data[1]);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3302      	adds	r3, #2
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	021b      	lsls	r3, r3, #8
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	3201      	adds	r2, #1
 8000748:	7812      	ldrb	r2, [r2, #0]
 800074a:	4413      	add	r3, r2
 800074c:	461a      	mov	r2, r3
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <BAMOCAN_ID+0x268>)
 8000750:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Firmware\n", 9);
 8000752:	2109      	movs	r1, #9
 8000754:	4818      	ldr	r0, [pc, #96]	; (80007b8 <BAMOCAN_ID+0x26c>)
 8000756:	f000 f833 	bl	80007c0 <uartTransmit>
			uartTransmitNumber(bamocar_data.data, 16);
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <BAMOCAN_ID+0x268>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2110      	movs	r1, #16
 8000760:	4618      	mov	r0, r3
 8000762:	f000 f841 	bl	80007e8 <uartTransmitNumber>
			uartTransmit("\n", 1);
 8000766:	2101      	movs	r1, #1
 8000768:	4808      	ldr	r0, [pc, #32]	; (800078c <BAMOCAN_ID+0x240>)
 800076a:	f000 f829 	bl	80007c0 <uartTransmit>
#endif

			break;
 800076e:	e004      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Register fuer Bamocar nicht definiert, Fehler
		default:
			uartTransmit("Bamocar Register nicht definiert\n", 33);
 8000770:	2121      	movs	r1, #33	; 0x21
 8000772:	4812      	ldr	r0, [pc, #72]	; (80007bc <BAMOCAN_ID+0x270>)
 8000774:	f000 f824 	bl	80007c0 <uartTransmit>
			break;
 8000778:	bf00      	nop
	}
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	2000015c 	.word	0x2000015c
 8000788:	08008164 	.word	0x08008164
 800078c:	08008174 	.word	0x08008174
 8000790:	08008178 	.word	0x08008178
 8000794:	2000002c 	.word	0x2000002c
 8000798:	08008184 	.word	0x08008184
 800079c:	08008194 	.word	0x08008194
 80007a0:	20000030 	.word	0x20000030
 80007a4:	20000034 	.word	0x20000034
 80007a8:	08008198 	.word	0x08008198
 80007ac:	20000028 	.word	0x20000028
 80007b0:	080081a8 	.word	0x080081a8
 80007b4:	20000038 	.word	0x20000038
 80007b8:	080081bc 	.word	0x080081bc
 80007bc:	080081c8 	.word	0x080081c8

080007c0 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	4803      	ldr	r0, [pc, #12]	; (80007e4 <uartTransmit+0x24>)
 80007d6:	f006 f985 	bl	8006ae4 <HAL_UART_Transmit>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200001b0 	.word	0x200001b0

080007e8 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4619      	mov	r1, r3
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f007 fca4 	bl	8008148 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fd17 	bl	8000238 <strlen>
 800080a:	4603      	mov	r3, r0
 800080c:	b29a      	uxth	r2, r3
 800080e:	f107 010c 	add.w	r1, r7, #12
 8000812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000816:	4803      	ldr	r0, [pc, #12]	; (8000824 <uartTransmitNumber+0x3c>)
 8000818:	f006 f964 	bl	8006ae4 <HAL_UART_Transmit>
}
 800081c:	bf00      	nop
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200001b0 	.word	0x200001b0

08000828 <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 800082e:	2114      	movs	r1, #20
 8000830:	483d      	ldr	r0, [pc, #244]	; (8000928 <collectHardwareInfo+0x100>)
 8000832:	f7ff ffc5 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 8000836:	f002 fe1d 	bl	8003474 <HAL_GetDEVID>
 800083a:	4603      	mov	r3, r0
 800083c:	210a      	movs	r1, #10
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ffd2 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8000844:	2116      	movs	r1, #22
 8000846:	4839      	ldr	r0, [pc, #228]	; (800092c <collectHardwareInfo+0x104>)
 8000848:	f7ff ffba 	bl	80007c0 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 800084c:	f002 fe06 	bl	800345c <HAL_GetREVID>
 8000850:	4603      	mov	r3, r0
 8000852:	f242 0201 	movw	r2, #8193	; 0x2001
 8000856:	4293      	cmp	r3, r2
 8000858:	d016      	beq.n	8000888 <collectHardwareInfo+0x60>
 800085a:	f242 0201 	movw	r2, #8193	; 0x2001
 800085e:	4293      	cmp	r3, r2
 8000860:	d817      	bhi.n	8000892 <collectHardwareInfo+0x6a>
 8000862:	f241 0201 	movw	r2, #4097	; 0x1001
 8000866:	4293      	cmp	r3, r2
 8000868:	d004      	beq.n	8000874 <collectHardwareInfo+0x4c>
 800086a:	f241 0203 	movw	r2, #4099	; 0x1003
 800086e:	4293      	cmp	r3, r2
 8000870:	d005      	beq.n	800087e <collectHardwareInfo+0x56>
 8000872:	e00e      	b.n	8000892 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8000874:	2101      	movs	r1, #1
 8000876:	482e      	ldr	r0, [pc, #184]	; (8000930 <collectHardwareInfo+0x108>)
 8000878:	f7ff ffa2 	bl	80007c0 <uartTransmit>
			break;
 800087c:	e011      	b.n	80008a2 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 800087e:	2101      	movs	r1, #1
 8000880:	482c      	ldr	r0, [pc, #176]	; (8000934 <collectHardwareInfo+0x10c>)
 8000882:	f7ff ff9d 	bl	80007c0 <uartTransmit>
			break;
 8000886:	e00c      	b.n	80008a2 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000888:	2101      	movs	r1, #1
 800088a:	482b      	ldr	r0, [pc, #172]	; (8000938 <collectHardwareInfo+0x110>)
 800088c:	f7ff ff98 	bl	80007c0 <uartTransmit>
			break;
 8000890:	e007      	b.n	80008a2 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 8000892:	f002 fde3 	bl	800345c <HAL_GetREVID>
 8000896:	4603      	mov	r3, r0
 8000898:	210a      	movs	r1, #10
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ffa4 	bl	80007e8 <uartTransmitNumber>
			break;
 80008a0:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 80008a2:	2114      	movs	r1, #20
 80008a4:	4825      	ldr	r0, [pc, #148]	; (800093c <collectHardwareInfo+0x114>)
 80008a6:	f7ff ff8b 	bl	80007c0 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 80008aa:	f005 f847 	bl	800593c <HAL_RCC_GetSysClockFreq>
 80008ae:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a23      	ldr	r2, [pc, #140]	; (8000940 <collectHardwareInfo+0x118>)
 80008b4:	fba2 2303 	umull	r2, r3, r2, r3
 80008b8:	0c9b      	lsrs	r3, r3, #18
 80008ba:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 80008bc:	210a      	movs	r1, #10
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ff92 	bl	80007e8 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80008c4:	2104      	movs	r1, #4
 80008c6:	481f      	ldr	r0, [pc, #124]	; (8000944 <collectHardwareInfo+0x11c>)
 80008c8:	f7ff ff7a 	bl	80007c0 <uartTransmit>


	uartTransmit("\n", 1);
 80008cc:	2101      	movs	r1, #1
 80008ce:	481e      	ldr	r0, [pc, #120]	; (8000948 <collectHardwareInfo+0x120>)
 80008d0:	f7ff ff76 	bl	80007c0 <uartTransmit>
	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80008d4:	2110      	movs	r1, #16
 80008d6:	481d      	ldr	r0, [pc, #116]	; (800094c <collectHardwareInfo+0x124>)
 80008d8:	f7ff ff72 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 80008dc:	f002 fdd8 	bl	8003490 <HAL_GetUIDw0>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2110      	movs	r1, #16
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff7f 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80008ea:	2101      	movs	r1, #1
 80008ec:	4818      	ldr	r0, [pc, #96]	; (8000950 <collectHardwareInfo+0x128>)
 80008ee:	f7ff ff67 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 80008f2:	f002 fdd9 	bl	80034a8 <HAL_GetUIDw1>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2110      	movs	r1, #16
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ff74 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000900:	2101      	movs	r1, #1
 8000902:	4813      	ldr	r0, [pc, #76]	; (8000950 <collectHardwareInfo+0x128>)
 8000904:	f7ff ff5c 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000908:	f002 fdda 	bl	80034c0 <HAL_GetUIDw2>
 800090c:	4603      	mov	r3, r0
 800090e:	2110      	movs	r1, #16
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ff69 	bl	80007e8 <uartTransmitNumber>

	uartTransmit("\n", 1);
 8000916:	2101      	movs	r1, #1
 8000918:	480b      	ldr	r0, [pc, #44]	; (8000948 <collectHardwareInfo+0x120>)
 800091a:	f7ff ff51 	bl	80007c0 <uartTransmit>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	08008244 	.word	0x08008244
 800092c:	08008258 	.word	0x08008258
 8000930:	08008270 	.word	0x08008270
 8000934:	08008274 	.word	0x08008274
 8000938:	08008278 	.word	0x08008278
 800093c:	0800827c 	.word	0x0800827c
 8000940:	431bde83 	.word	0x431bde83
 8000944:	08008290 	.word	0x08008290
 8000948:	08008298 	.word	0x08008298
 800094c:	0800829c 	.word	0x0800829c
 8000950:	080082ac 	.word	0x080082ac

08000954 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 8000958:	2110      	movs	r1, #16
 800095a:	4826      	ldr	r0, [pc, #152]	; (80009f4 <collectSoftwareInfo+0xa0>)
 800095c:	f7ff ff30 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000960:	2108      	movs	r1, #8
 8000962:	4825      	ldr	r0, [pc, #148]	; (80009f8 <collectSoftwareInfo+0xa4>)
 8000964:	f7ff ff2c 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000968:	2110      	movs	r1, #16
 800096a:	4824      	ldr	r0, [pc, #144]	; (80009fc <collectSoftwareInfo+0xa8>)
 800096c:	f7ff ff28 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000970:	2106      	movs	r1, #6
 8000972:	4823      	ldr	r0, [pc, #140]	; (8000a00 <collectSoftwareInfo+0xac>)
 8000974:	f7ff ff24 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000978:	210e      	movs	r1, #14
 800097a:	4822      	ldr	r0, [pc, #136]	; (8000a04 <collectSoftwareInfo+0xb0>)
 800097c:	f7ff ff20 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 8000980:	2129      	movs	r1, #41	; 0x29
 8000982:	4821      	ldr	r0, [pc, #132]	; (8000a08 <collectSoftwareInfo+0xb4>)
 8000984:	f7ff ff1c 	bl	80007c0 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000988:	2101      	movs	r1, #1
 800098a:	4820      	ldr	r0, [pc, #128]	; (8000a0c <collectSoftwareInfo+0xb8>)
 800098c:	f7ff ff18 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000990:	2115      	movs	r1, #21
 8000992:	481f      	ldr	r0, [pc, #124]	; (8000a10 <collectSoftwareInfo+0xbc>)
 8000994:	f7ff ff14 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 8000998:	210e      	movs	r1, #14
 800099a:	481e      	ldr	r0, [pc, #120]	; (8000a14 <collectSoftwareInfo+0xc0>)
 800099c:	f7ff ff10 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 80009a0:	2114      	movs	r1, #20
 80009a2:	481d      	ldr	r0, [pc, #116]	; (8000a18 <collectSoftwareInfo+0xc4>)
 80009a4:	f7ff ff0c 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 80009a8:	2129      	movs	r1, #41	; 0x29
 80009aa:	481c      	ldr	r0, [pc, #112]	; (8000a1c <collectSoftwareInfo+0xc8>)
 80009ac:	f7ff ff08 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 80009b0:	2115      	movs	r1, #21
 80009b2:	481b      	ldr	r0, [pc, #108]	; (8000a20 <collectSoftwareInfo+0xcc>)
 80009b4:	f7ff ff04 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 80009b8:	2115      	movs	r1, #21
 80009ba:	481a      	ldr	r0, [pc, #104]	; (8000a24 <collectSoftwareInfo+0xd0>)
 80009bc:	f7ff ff00 	bl	80007c0 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80009c0:	2101      	movs	r1, #1
 80009c2:	4812      	ldr	r0, [pc, #72]	; (8000a0c <collectSoftwareInfo+0xb8>)
 80009c4:	f7ff fefc 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80009c8:	2110      	movs	r1, #16
 80009ca:	4817      	ldr	r0, [pc, #92]	; (8000a28 <collectSoftwareInfo+0xd4>)
 80009cc:	f7ff fef8 	bl	80007c0 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 80009d0:	210b      	movs	r1, #11
 80009d2:	4816      	ldr	r0, [pc, #88]	; (8000a2c <collectSoftwareInfo+0xd8>)
 80009d4:	f7ff fef4 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80009d8:	2110      	movs	r1, #16
 80009da:	4815      	ldr	r0, [pc, #84]	; (8000a30 <collectSoftwareInfo+0xdc>)
 80009dc:	f7ff fef0 	bl	80007c0 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 80009e0:	2109      	movs	r1, #9
 80009e2:	4814      	ldr	r0, [pc, #80]	; (8000a34 <collectSoftwareInfo+0xe0>)
 80009e4:	f7ff feec 	bl	80007c0 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80009e8:	2101      	movs	r1, #1
 80009ea:	4808      	ldr	r0, [pc, #32]	; (8000a0c <collectSoftwareInfo+0xb8>)
 80009ec:	f7ff fee8 	bl	80007c0 <uartTransmit>
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	080082b0 	.word	0x080082b0
 80009f8:	080082c0 	.word	0x080082c0
 80009fc:	080082c8 	.word	0x080082c8
 8000a00:	080082d8 	.word	0x080082d8
 8000a04:	080082e0 	.word	0x080082e0
 8000a08:	080082f0 	.word	0x080082f0
 8000a0c:	08008298 	.word	0x08008298
 8000a10:	0800831c 	.word	0x0800831c
 8000a14:	08008334 	.word	0x08008334
 8000a18:	08008344 	.word	0x08008344
 8000a1c:	08008358 	.word	0x08008358
 8000a20:	08008384 	.word	0x08008384
 8000a24:	0800839c 	.word	0x0800839c
 8000a28:	080083b4 	.word	0x080083b4
 8000a2c:	080083c4 	.word	0x080083c4
 8000a30:	080083d0 	.word	0x080083d0
 8000a34:	080083e0 	.word	0x080083e0

08000a38 <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8000a3c:	2113      	movs	r1, #19
 8000a3e:	4824      	ldr	r0, [pc, #144]	; (8000ad0 <collectMiddlewareInfo+0x98>)
 8000a40:	f7ff febe 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8000a44:	210a      	movs	r1, #10
 8000a46:	2005      	movs	r0, #5
 8000a48:	f7ff fece 	bl	80007e8 <uartTransmitNumber>
	uartTransmit(".", 1);
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	4821      	ldr	r0, [pc, #132]	; (8000ad4 <collectMiddlewareInfo+0x9c>)
 8000a50:	f7ff feb6 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8000a54:	210a      	movs	r1, #10
 8000a56:	2001      	movs	r0, #1
 8000a58:	f7ff fec6 	bl	80007e8 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8000a5c:	2111      	movs	r1, #17
 8000a5e:	481e      	ldr	r0, [pc, #120]	; (8000ad8 <collectMiddlewareInfo+0xa0>)
 8000a60:	f7ff feae 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8000a64:	f002 fcf0 	bl	8003448 <HAL_GetHalVersion>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	0e1b      	lsrs	r3, r3, #24
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	210a      	movs	r1, #10
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff feb9 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000a76:	2101      	movs	r1, #1
 8000a78:	4816      	ldr	r0, [pc, #88]	; (8000ad4 <collectMiddlewareInfo+0x9c>)
 8000a7a:	f7ff fea1 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000a7e:	f002 fce3 	bl	8003448 <HAL_GetHalVersion>
 8000a82:	4603      	mov	r3, r0
 8000a84:	0c1b      	lsrs	r3, r3, #16
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	210a      	movs	r1, #10
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff feac 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000a90:	2101      	movs	r1, #1
 8000a92:	4810      	ldr	r0, [pc, #64]	; (8000ad4 <collectMiddlewareInfo+0x9c>)
 8000a94:	f7ff fe94 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000a98:	f002 fcd6 	bl	8003448 <HAL_GetHalVersion>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	0a1b      	lsrs	r3, r3, #8
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	210a      	movs	r1, #10
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fe9f 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000aaa:	2101      	movs	r1, #1
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <collectMiddlewareInfo+0x9c>)
 8000aae:	f7ff fe87 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000ab2:	f002 fcc9 	bl	8003448 <HAL_GetHalVersion>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	210a      	movs	r1, #10
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fe93 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <collectMiddlewareInfo+0xa4>)
 8000ac6:	f7ff fe7b 	bl	80007c0 <uartTransmit>
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	080083ec 	.word	0x080083ec
 8000ad4:	08008400 	.word	0x08008400
 8000ad8:	08008404 	.word	0x08008404
 8000adc:	08008298 	.word	0x08008298

08000ae0 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 8000ae4:	2114      	movs	r1, #20
 8000ae6:	4814      	ldr	r0, [pc, #80]	; (8000b38 <collectGitcounts+0x58>)
 8000ae8:	f7ff fe6a 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8000aec:	2103      	movs	r1, #3
 8000aee:	4813      	ldr	r0, [pc, #76]	; (8000b3c <collectGitcounts+0x5c>)
 8000af0:	f7ff fe66 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 8000af4:	2116      	movs	r1, #22
 8000af6:	4812      	ldr	r0, [pc, #72]	; (8000b40 <collectGitcounts+0x60>)
 8000af8:	f7ff fe62 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8000afc:	2103      	movs	r1, #3
 8000afe:	4811      	ldr	r0, [pc, #68]	; (8000b44 <collectGitcounts+0x64>)
 8000b00:	f7ff fe5e 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 8000b04:	211b      	movs	r1, #27
 8000b06:	4810      	ldr	r0, [pc, #64]	; (8000b48 <collectGitcounts+0x68>)
 8000b08:	f7ff fe5a 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8000b0c:	2103      	movs	r1, #3
 8000b0e:	480f      	ldr	r0, [pc, #60]	; (8000b4c <collectGitcounts+0x6c>)
 8000b10:	f7ff fe56 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000b14:	2115      	movs	r1, #21
 8000b16:	480e      	ldr	r0, [pc, #56]	; (8000b50 <collectGitcounts+0x70>)
 8000b18:	f7ff fe52 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <collectGitcounts+0x74>)
 8000b20:	f7ff fe4e 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000b24:	2114      	movs	r1, #20
 8000b26:	480c      	ldr	r0, [pc, #48]	; (8000b58 <collectGitcounts+0x78>)
 8000b28:	f7ff fe4a 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 8000b2c:	2103      	movs	r1, #3
 8000b2e:	480b      	ldr	r0, [pc, #44]	; (8000b5c <collectGitcounts+0x7c>)
 8000b30:	f7ff fe46 	bl	80007c0 <uartTransmit>
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	08008418 	.word	0x08008418
 8000b3c:	0800842c 	.word	0x0800842c
 8000b40:	08008430 	.word	0x08008430
 8000b44:	08008448 	.word	0x08008448
 8000b48:	0800844c 	.word	0x0800844c
 8000b4c:	08008468 	.word	0x08008468
 8000b50:	0800831c 	.word	0x0800831c
 8000b54:	0800846c 	.word	0x0800846c
 8000b58:	08008344 	.word	0x08008344
 8000b5c:	08008470 	.word	0x08008470

08000b60 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000b64:	2111      	movs	r1, #17
 8000b66:	480e      	ldr	r0, [pc, #56]	; (8000ba0 <collectSystemInfo+0x40>)
 8000b68:	f7ff fe2a 	bl	80007c0 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000b6c:	f7ff fe5c 	bl	8000828 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000b70:	2111      	movs	r1, #17
 8000b72:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <collectSystemInfo+0x44>)
 8000b74:	f7ff fe24 	bl	80007c0 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8000b78:	f7ff feec 	bl	8000954 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000b7c:	2113      	movs	r1, #19
 8000b7e:	480a      	ldr	r0, [pc, #40]	; (8000ba8 <collectSystemInfo+0x48>)
 8000b80:	f7ff fe1e 	bl	80007c0 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000b84:	f7ff ff58 	bl	8000a38 <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8000b88:	2113      	movs	r1, #19
 8000b8a:	4808      	ldr	r0, [pc, #32]	; (8000bac <collectSystemInfo+0x4c>)
 8000b8c:	f7ff fe18 	bl	80007c0 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8000b90:	f7ff ffa6 	bl	8000ae0 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 8000b94:	2103      	movs	r1, #3
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <collectSystemInfo+0x50>)
 8000b98:	f7ff fe12 	bl	80007c0 <uartTransmit>
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	08008474 	.word	0x08008474
 8000ba4:	08008488 	.word	0x08008488
 8000ba8:	0800849c 	.word	0x0800849c
 8000bac:	080084b0 	.word	0x080084b0
 8000bb0:	080084c4 	.word	0x080084c4

08000bb4 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000bbe:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <readResetSource+0xa0>)
 8000bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d002      	beq.n	8000bd0 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000bd0:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <readResetSource+0xa0>)
 8000bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d002      	beq.n	8000be2 <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	3302      	adds	r3, #2
 8000be0:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <readResetSource+0xa0>)
 8000be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	da02      	bge.n	8000bf0 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	3304      	adds	r3, #4
 8000bee:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000bf0:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <readResetSource+0xa0>)
 8000bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d002      	beq.n	8000c02 <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	3308      	adds	r3, #8
 8000c00:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <readResetSource+0xa0>)
 8000c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d002      	beq.n	8000c14 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	3310      	adds	r3, #16
 8000c12:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <readResetSource+0xa0>)
 8000c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d002      	beq.n	8000c26 <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	3320      	adds	r3, #32
 8000c24:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <readResetSource+0xa0>)
 8000c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d002      	beq.n	8000c38 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	3340      	adds	r3, #64	; 0x40
 8000c36:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <readResetSource+0xa0>)
 8000c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c3c:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <readResetSource+0xa0>)
 8000c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c42:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8000c44:	79fb      	ldrb	r3, [r7, #7]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800

08000c58 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8000c62:	2106      	movs	r1, #6
 8000c64:	482a      	ldr	r0, [pc, #168]	; (8000d10 <printResetSource+0xb8>)
 8000c66:	f7ff fdab 	bl	80007c0 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d104      	bne.n	8000c7a <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8000c70:	210f      	movs	r1, #15
 8000c72:	4828      	ldr	r0, [pc, #160]	; (8000d14 <printResetSource+0xbc>)
 8000c74:	f7ff fda4 	bl	80007c0 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8000c78:	e046      	b.n	8000d08 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000c84:	2118      	movs	r1, #24
 8000c86:	4824      	ldr	r0, [pc, #144]	; (8000d18 <printResetSource+0xc0>)
 8000c88:	f7ff fd9a 	bl	80007c0 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d003      	beq.n	8000c9e <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000c96:	2116      	movs	r1, #22
 8000c98:	4820      	ldr	r0, [pc, #128]	; (8000d1c <printResetSource+0xc4>)
 8000c9a:	f7ff fd91 	bl	80007c0 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 0304 	and.w	r3, r3, #4
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d003      	beq.n	8000cb0 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8000ca8:	210a      	movs	r1, #10
 8000caa:	481d      	ldr	r0, [pc, #116]	; (8000d20 <printResetSource+0xc8>)
 8000cac:	f7ff fd88 	bl	80007c0 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8000cba:	2110      	movs	r1, #16
 8000cbc:	4819      	ldr	r0, [pc, #100]	; (8000d24 <printResetSource+0xcc>)
 8000cbe:	f7ff fd7f 	bl	80007c0 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d003      	beq.n	8000cd4 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000ccc:	210f      	movs	r1, #15
 8000cce:	4816      	ldr	r0, [pc, #88]	; (8000d28 <printResetSource+0xd0>)
 8000cd0:	f7ff fd76 	bl	80007c0 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f003 0320 	and.w	r3, r3, #32
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000cde:	210f      	movs	r1, #15
 8000ce0:	4812      	ldr	r0, [pc, #72]	; (8000d2c <printResetSource+0xd4>)
 8000ce2:	f7ff fd6d 	bl	80007c0 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d003      	beq.n	8000cf8 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000cf0:	210a      	movs	r1, #10
 8000cf2:	480f      	ldr	r0, [pc, #60]	; (8000d30 <printResetSource+0xd8>)
 8000cf4:	f7ff fd64 	bl	80007c0 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	da03      	bge.n	8000d08 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000d00:	2105      	movs	r1, #5
 8000d02:	480c      	ldr	r0, [pc, #48]	; (8000d34 <printResetSource+0xdc>)
 8000d04:	f7ff fd5c 	bl	80007c0 <uartTransmit>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	080084c8 	.word	0x080084c8
 8000d14:	080084d0 	.word	0x080084d0
 8000d18:	080084e0 	.word	0x080084e0
 8000d1c:	080084fc 	.word	0x080084fc
 8000d20:	08008514 	.word	0x08008514
 8000d24:	08008520 	.word	0x08008520
 8000d28:	08008534 	.word	0x08008534
 8000d2c:	08008544 	.word	0x08008544
 8000d30:	08008554 	.word	0x08008554
 8000d34:	08008560 	.word	0x08008560

08000d38 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d44:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d013      	beq.n	8000d78 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d50:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d54:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d58:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d00b      	beq.n	8000d78 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d60:	e000      	b.n	8000d64 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d62:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0f9      	beq.n	8000d62 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d6e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d78:	687b      	ldr	r3, [r7, #4]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <ADC_Gaspedal>:
//----------------------------------------------------------------------

// Gaspedal einlesen
//----------------------------------------------------------------------
uint16_t ADC_Gaspedal(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC von Gaspedal einlesen\n");
 8000d8e:	4820      	ldr	r0, [pc, #128]	; (8000e10 <ADC_Gaspedal+0x88>)
 8000d90:	f000 fafe 	bl	8001390 <ITM_SendString>
#endif

	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_6;
 8000da4:	2306      	movs	r3, #6
 8000da6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000da8:	2301      	movs	r3, #1
 8000daa:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000dac:	2301      	movs	r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	4619      	mov	r1, r3
 8000db4:	4817      	ldr	r0, [pc, #92]	; (8000e14 <ADC_Gaspedal+0x8c>)
 8000db6:	f002 fd6d 	bl	8003894 <HAL_ADC_ConfigChannel>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <ADC_Gaspedal+0x3c>
	{
		Error_Handler();
 8000dc0:	f002 f8f6 	bl	8002fb0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);
 8000dc4:	4813      	ldr	r0, [pc, #76]	; (8000e14 <ADC_Gaspedal+0x8c>)
 8000dc6:	f002 fbcb 	bl	8003560 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000dca:	2164      	movs	r1, #100	; 0x64
 8000dcc:	4811      	ldr	r0, [pc, #68]	; (8000e14 <ADC_Gaspedal+0x8c>)
 8000dce:	f002 fcc9 	bl	8003764 <HAL_ADC_PollForConversion>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d105      	bne.n	8000de4 <ADC_Gaspedal+0x5c>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000dd8:	480e      	ldr	r0, [pc, #56]	; (8000e14 <ADC_Gaspedal+0x8c>)
 8000dda:	f002 fd4e 	bl	800387a <HAL_ADC_GetValue>
 8000dde:	4603      	mov	r3, r0
 8000de0:	82fb      	strh	r3, [r7, #22]
 8000de2:	e002      	b.n	8000dea <ADC_Gaspedal+0x62>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000de4:	2004      	movs	r0, #4
 8000de6:	f000 fa31 	bl	800124c <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000dea:	480a      	ldr	r0, [pc, #40]	; (8000e14 <ADC_Gaspedal+0x8c>)
 8000dec:	f002 fc86 	bl	80036fc <HAL_ADC_Stop>

#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC-Wert Gaspedal:\t");
 8000df0:	4809      	ldr	r0, [pc, #36]	; (8000e18 <ADC_Gaspedal+0x90>)
 8000df2:	f000 facd 	bl	8001390 <ITM_SendString>
	ITM_SendNumber(ADC_Data);
 8000df6:	8afb      	ldrh	r3, [r7, #22]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 fad3 	bl	80013a4 <ITM_SendNumber>
	ITM_SendChar('\n');
 8000dfe:	200a      	movs	r0, #10
 8000e00:	f7ff ff9a 	bl	8000d38 <ITM_SendChar>
#endif

	//ADC Wert zurueck geben
	return ADC_Data;
 8000e04:	8afb      	ldrh	r3, [r7, #22]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	08008568 	.word	0x08008568
 8000e14:	20000058 	.word	0x20000058
 8000e18:	08008584 	.word	0x08008584

08000e1c <ADC_Bremsdruck>:
//----------------------------------------------------------------------

// Bremsdruck einlesen
//----------------------------------------------------------------------
uint16_t ADC_Bremsdruck(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC von Bremsdruck einlesen\n");
 8000e22:	4820      	ldr	r0, [pc, #128]	; (8000ea4 <ADC_Bremsdruck+0x88>)
 8000e24:	f000 fab4 	bl	8001390 <ITM_SendString>
#endif

	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_14;
 8000e38:	230e      	movs	r3, #14
 8000e3a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000e40:	2301      	movs	r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	4619      	mov	r1, r3
 8000e48:	4817      	ldr	r0, [pc, #92]	; (8000ea8 <ADC_Bremsdruck+0x8c>)
 8000e4a:	f002 fd23 	bl	8003894 <HAL_ADC_ConfigChannel>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <ADC_Bremsdruck+0x3c>
	{
		Error_Handler();
 8000e54:	f002 f8ac 	bl	8002fb0 <Error_Handler>
	}
	
	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000e58:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <ADC_Bremsdruck+0x8c>)
 8000e5a:	f002 fb81 	bl	8003560 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000e5e:	2164      	movs	r1, #100	; 0x64
 8000e60:	4811      	ldr	r0, [pc, #68]	; (8000ea8 <ADC_Bremsdruck+0x8c>)
 8000e62:	f002 fc7f 	bl	8003764 <HAL_ADC_PollForConversion>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d105      	bne.n	8000e78 <ADC_Bremsdruck+0x5c>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000e6c:	480e      	ldr	r0, [pc, #56]	; (8000ea8 <ADC_Bremsdruck+0x8c>)
 8000e6e:	f002 fd04 	bl	800387a <HAL_ADC_GetValue>
 8000e72:	4603      	mov	r3, r0
 8000e74:	82fb      	strh	r3, [r7, #22]
 8000e76:	e002      	b.n	8000e7e <ADC_Bremsdruck+0x62>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000e78:	2004      	movs	r0, #4
 8000e7a:	f000 f9e7 	bl	800124c <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000e7e:	480a      	ldr	r0, [pc, #40]	; (8000ea8 <ADC_Bremsdruck+0x8c>)
 8000e80:	f002 fc3c 	bl	80036fc <HAL_ADC_Stop>

#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC-Wert Bremsdruck:\t");
 8000e84:	4809      	ldr	r0, [pc, #36]	; (8000eac <ADC_Bremsdruck+0x90>)
 8000e86:	f000 fa83 	bl	8001390 <ITM_SendString>
	ITM_SendNumber(ADC_Data);
 8000e8a:	8afb      	ldrh	r3, [r7, #22]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 fa89 	bl	80013a4 <ITM_SendNumber>
	ITM_SendChar('\n');
 8000e92:	200a      	movs	r0, #10
 8000e94:	f7ff ff50 	bl	8000d38 <ITM_SendChar>
#endif

	//ADC Wert zurueck geben
	return ADC_Data;
 8000e98:	8afb      	ldrh	r3, [r7, #22]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	08008598 	.word	0x08008598
 8000ea8:	20000058 	.word	0x20000058
 8000eac:	080085b8 	.word	0x080085b8

08000eb0 <ADC_KL15>:
//----------------------------------------------------------------------

// Spannung KL15 einlesen
//----------------------------------------------------------------------
uint16_t ADC_KL15 (void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_3;										// ADC Kanal einstellen
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000eca:	2301      	movs	r3, #1
 8000ecc:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8000ece:	2301      	movs	r3, #1
 8000ed0:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4811      	ldr	r0, [pc, #68]	; (8000f1c <ADC_KL15+0x6c>)
 8000ed8:	f002 fcdc 	bl	8003894 <HAL_ADC_ConfigChannel>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <ADC_KL15+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000ee2:	f002 f865 	bl	8002fb0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000ee6:	480d      	ldr	r0, [pc, #52]	; (8000f1c <ADC_KL15+0x6c>)
 8000ee8:	f002 fb3a 	bl	8003560 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000eec:	2164      	movs	r1, #100	; 0x64
 8000eee:	480b      	ldr	r0, [pc, #44]	; (8000f1c <ADC_KL15+0x6c>)
 8000ef0:	f002 fc38 	bl	8003764 <HAL_ADC_PollForConversion>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d105      	bne.n	8000f06 <ADC_KL15+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000efa:	4808      	ldr	r0, [pc, #32]	; (8000f1c <ADC_KL15+0x6c>)
 8000efc:	f002 fcbd 	bl	800387a <HAL_ADC_GetValue>
 8000f00:	4603      	mov	r3, r0
 8000f02:	82fb      	strh	r3, [r7, #22]
 8000f04:	e002      	b.n	8000f0c <ADC_KL15+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000f06:	2004      	movs	r0, #4
 8000f08:	f000 f9a0 	bl	800124c <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000f0c:	4803      	ldr	r0, [pc, #12]	; (8000f1c <ADC_KL15+0x6c>)
 8000f0e:	f002 fbf5 	bl	80036fc <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000f12:	8afb      	ldrh	r3, [r7, #22]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000058 	.word	0x20000058

08000f20 <ADC_Kuhlwassertemperatur>:
//----------------------------------------------------------------------

// Kuehlwassertemperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_Kuhlwassertemperatur (void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_4;										// ADC Kanal einstellen
 8000f36:	2304      	movs	r3, #4
 8000f38:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8000f3e:	2301      	movs	r3, #1
 8000f40:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	4619      	mov	r1, r3
 8000f46:	4811      	ldr	r0, [pc, #68]	; (8000f8c <ADC_Kuhlwassertemperatur+0x6c>)
 8000f48:	f002 fca4 	bl	8003894 <HAL_ADC_ConfigChannel>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <ADC_Kuhlwassertemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000f52:	f002 f82d 	bl	8002fb0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000f56:	480d      	ldr	r0, [pc, #52]	; (8000f8c <ADC_Kuhlwassertemperatur+0x6c>)
 8000f58:	f002 fb02 	bl	8003560 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000f5c:	2164      	movs	r1, #100	; 0x64
 8000f5e:	480b      	ldr	r0, [pc, #44]	; (8000f8c <ADC_Kuhlwassertemperatur+0x6c>)
 8000f60:	f002 fc00 	bl	8003764 <HAL_ADC_PollForConversion>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d105      	bne.n	8000f76 <ADC_Kuhlwassertemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000f6a:	4808      	ldr	r0, [pc, #32]	; (8000f8c <ADC_Kuhlwassertemperatur+0x6c>)
 8000f6c:	f002 fc85 	bl	800387a <HAL_ADC_GetValue>
 8000f70:	4603      	mov	r3, r0
 8000f72:	82fb      	strh	r3, [r7, #22]
 8000f74:	e002      	b.n	8000f7c <ADC_Kuhlwassertemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000f76:	2004      	movs	r0, #4
 8000f78:	f000 f968 	bl	800124c <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <ADC_Kuhlwassertemperatur+0x6c>)
 8000f7e:	f002 fbbd 	bl	80036fc <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000f82:	8afb      	ldrh	r3, [r7, #22]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000058 	.word	0x20000058

08000f90 <ADC_Klimaflap>:
//----------------------------------------------------------------------

// Klimaflapstellung einlesen (Position ueber Poti)
//----------------------------------------------------------------------
uint16_t ADC_Klimaflap (void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_5;										// ADC Kanal einstellen
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000faa:	2301      	movs	r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8000fae:	2301      	movs	r3, #1
 8000fb0:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4811      	ldr	r0, [pc, #68]	; (8000ffc <ADC_Klimaflap+0x6c>)
 8000fb8:	f002 fc6c 	bl	8003894 <HAL_ADC_ConfigChannel>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <ADC_Klimaflap+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000fc2:	f001 fff5 	bl	8002fb0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000fc6:	480d      	ldr	r0, [pc, #52]	; (8000ffc <ADC_Klimaflap+0x6c>)
 8000fc8:	f002 faca 	bl	8003560 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000fcc:	2164      	movs	r1, #100	; 0x64
 8000fce:	480b      	ldr	r0, [pc, #44]	; (8000ffc <ADC_Klimaflap+0x6c>)
 8000fd0:	f002 fbc8 	bl	8003764 <HAL_ADC_PollForConversion>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d105      	bne.n	8000fe6 <ADC_Klimaflap+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000fda:	4808      	ldr	r0, [pc, #32]	; (8000ffc <ADC_Klimaflap+0x6c>)
 8000fdc:	f002 fc4d 	bl	800387a <HAL_ADC_GetValue>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	82fb      	strh	r3, [r7, #22]
 8000fe4:	e002      	b.n	8000fec <ADC_Klimaflap+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000fe6:	2004      	movs	r0, #4
 8000fe8:	f000 f930 	bl	800124c <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000fec:	4803      	ldr	r0, [pc, #12]	; (8000ffc <ADC_Klimaflap+0x6c>)
 8000fee:	f002 fb85 	bl	80036fc <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000ff2:	8afb      	ldrh	r3, [r7, #22]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000058 	.word	0x20000058

08001000 <ADC_PCBTemperatur>:
//----------------------------------------------------------------------

// PCB Temperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_PCBTemperatur (void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_7;										// ADC Kanal einstellen
 8001016:	2307      	movs	r3, #7
 8001018:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 800101a:	2301      	movs	r3, #1
 800101c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 800101e:	2301      	movs	r3, #1
 8001020:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	4619      	mov	r1, r3
 8001026:	4811      	ldr	r0, [pc, #68]	; (800106c <ADC_PCBTemperatur+0x6c>)
 8001028:	f002 fc34 	bl	8003894 <HAL_ADC_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <ADC_PCBTemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8001032:	f001 ffbd 	bl	8002fb0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8001036:	480d      	ldr	r0, [pc, #52]	; (800106c <ADC_PCBTemperatur+0x6c>)
 8001038:	f002 fa92 	bl	8003560 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 800103c:	2164      	movs	r1, #100	; 0x64
 800103e:	480b      	ldr	r0, [pc, #44]	; (800106c <ADC_PCBTemperatur+0x6c>)
 8001040:	f002 fb90 	bl	8003764 <HAL_ADC_PollForConversion>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d105      	bne.n	8001056 <ADC_PCBTemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 800104a:	4808      	ldr	r0, [pc, #32]	; (800106c <ADC_PCBTemperatur+0x6c>)
 800104c:	f002 fc15 	bl	800387a <HAL_ADC_GetValue>
 8001050:	4603      	mov	r3, r0
 8001052:	82fb      	strh	r3, [r7, #22]
 8001054:	e002      	b.n	800105c <ADC_PCBTemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8001056:	2004      	movs	r0, #4
 8001058:	f000 f8f8 	bl	800124c <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 800105c:	4803      	ldr	r0, [pc, #12]	; (800106c <ADC_PCBTemperatur+0x6c>)
 800105e:	f002 fb4d 	bl	80036fc <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8001062:	8afb      	ldrh	r3, [r7, #22]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000058 	.word	0x20000058

08001070 <ADC_Return>:
//----------------------------------------------------------------------

// Navibedienelement Return einlesen (2 Schalter mit unterschiedlichen Widerstaenden)
//----------------------------------------------------------------------
uint16_t ADC_Return (void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_8;										// ADC Kanal einstellen
 8001086:	2308      	movs	r3, #8
 8001088:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 800108a:	2301      	movs	r3, #1
 800108c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 800108e:	2301      	movs	r3, #1
 8001090:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	4619      	mov	r1, r3
 8001096:	4811      	ldr	r0, [pc, #68]	; (80010dc <ADC_Return+0x6c>)
 8001098:	f002 fbfc 	bl	8003894 <HAL_ADC_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <ADC_Return+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 80010a2:	f001 ff85 	bl	8002fb0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 80010a6:	480d      	ldr	r0, [pc, #52]	; (80010dc <ADC_Return+0x6c>)
 80010a8:	f002 fa5a 	bl	8003560 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 80010ac:	2164      	movs	r1, #100	; 0x64
 80010ae:	480b      	ldr	r0, [pc, #44]	; (80010dc <ADC_Return+0x6c>)
 80010b0:	f002 fb58 	bl	8003764 <HAL_ADC_PollForConversion>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d105      	bne.n	80010c6 <ADC_Return+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 80010ba:	4808      	ldr	r0, [pc, #32]	; (80010dc <ADC_Return+0x6c>)
 80010bc:	f002 fbdd 	bl	800387a <HAL_ADC_GetValue>
 80010c0:	4603      	mov	r3, r0
 80010c2:	82fb      	strh	r3, [r7, #22]
 80010c4:	e002      	b.n	80010cc <ADC_Return+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 80010c6:	2004      	movs	r0, #4
 80010c8:	f000 f8c0 	bl	800124c <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 80010cc:	4803      	ldr	r0, [pc, #12]	; (80010dc <ADC_Return+0x6c>)
 80010ce:	f002 fb15 	bl	80036fc <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 80010d2:	8afb      	ldrh	r3, [r7, #22]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000058 	.word	0x20000058

080010e0 <ADC_Info>:
//----------------------------------------------------------------------

// Navibedienelement Info einlesen (2 Schalter mit unterschiedlichen Widerstaenden)
//----------------------------------------------------------------------
uint16_t ADC_Info (void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_9;										// ADC Kanal einstellen
 80010f6:	2309      	movs	r3, #9
 80010f8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 80010fa:	2301      	movs	r3, #1
 80010fc:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 80010fe:	2301      	movs	r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	4619      	mov	r1, r3
 8001106:	4811      	ldr	r0, [pc, #68]	; (800114c <ADC_Info+0x6c>)
 8001108:	f002 fbc4 	bl	8003894 <HAL_ADC_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <ADC_Info+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8001112:	f001 ff4d 	bl	8002fb0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8001116:	480d      	ldr	r0, [pc, #52]	; (800114c <ADC_Info+0x6c>)
 8001118:	f002 fa22 	bl	8003560 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 800111c:	2164      	movs	r1, #100	; 0x64
 800111e:	480b      	ldr	r0, [pc, #44]	; (800114c <ADC_Info+0x6c>)
 8001120:	f002 fb20 	bl	8003764 <HAL_ADC_PollForConversion>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d105      	bne.n	8001136 <ADC_Info+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 800112a:	4808      	ldr	r0, [pc, #32]	; (800114c <ADC_Info+0x6c>)
 800112c:	f002 fba5 	bl	800387a <HAL_ADC_GetValue>
 8001130:	4603      	mov	r3, r0
 8001132:	82fb      	strh	r3, [r7, #22]
 8001134:	e002      	b.n	800113c <ADC_Info+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8001136:	2004      	movs	r0, #4
 8001138:	f000 f888 	bl	800124c <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 800113c:	4803      	ldr	r0, [pc, #12]	; (800114c <ADC_Info+0x6c>)
 800113e:	f002 fadd 	bl	80036fc <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8001142:	8afb      	ldrh	r3, [r7, #22]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000058 	.word	0x20000058

08001150 <ADC_Bremsdrucktemperatur>:
//----------------------------------------------------------------------

// Bremsdrucktemperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_Bremsdrucktemperatur (void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_15;										// ADC Kanal einstellen
 8001166:	230f      	movs	r3, #15
 8001168:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 800116a:	2301      	movs	r3, #1
 800116c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 800116e:	2301      	movs	r3, #1
 8001170:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	4619      	mov	r1, r3
 8001176:	4811      	ldr	r0, [pc, #68]	; (80011bc <ADC_Bremsdrucktemperatur+0x6c>)
 8001178:	f002 fb8c 	bl	8003894 <HAL_ADC_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <ADC_Bremsdrucktemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8001182:	f001 ff15 	bl	8002fb0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8001186:	480d      	ldr	r0, [pc, #52]	; (80011bc <ADC_Bremsdrucktemperatur+0x6c>)
 8001188:	f002 f9ea 	bl	8003560 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 800118c:	2164      	movs	r1, #100	; 0x64
 800118e:	480b      	ldr	r0, [pc, #44]	; (80011bc <ADC_Bremsdrucktemperatur+0x6c>)
 8001190:	f002 fae8 	bl	8003764 <HAL_ADC_PollForConversion>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d105      	bne.n	80011a6 <ADC_Bremsdrucktemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 800119a:	4808      	ldr	r0, [pc, #32]	; (80011bc <ADC_Bremsdrucktemperatur+0x6c>)
 800119c:	f002 fb6d 	bl	800387a <HAL_ADC_GetValue>
 80011a0:	4603      	mov	r3, r0
 80011a2:	82fb      	strh	r3, [r7, #22]
 80011a4:	e002      	b.n	80011ac <ADC_Bremsdrucktemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 80011a6:	2004      	movs	r0, #4
 80011a8:	f000 f850 	bl	800124c <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 80011ac:	4803      	ldr	r0, [pc, #12]	; (80011bc <ADC_Bremsdrucktemperatur+0x6c>)
 80011ae:	f002 faa5 	bl	80036fc <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 80011b2:	8afb      	ldrh	r3, [r7, #22]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000058 	.word	0x20000058

080011c0 <ADC_STMTemperatur>:
//----------------------------------------------------------------------

// STM32 Temperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_STMTemperatur (void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;								// ADC Kanal einstellen
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <ADC_STMTemperatur+0x6c>)
 80011d8:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 80011da:	2301      	movs	r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 80011de:	2301      	movs	r3, #1
 80011e0:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	4619      	mov	r1, r3
 80011e6:	4812      	ldr	r0, [pc, #72]	; (8001230 <ADC_STMTemperatur+0x70>)
 80011e8:	f002 fb54 	bl	8003894 <HAL_ADC_ConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <ADC_STMTemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 80011f2:	f001 fedd 	bl	8002fb0 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 80011f6:	480e      	ldr	r0, [pc, #56]	; (8001230 <ADC_STMTemperatur+0x70>)
 80011f8:	f002 f9b2 	bl	8003560 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 80011fc:	2164      	movs	r1, #100	; 0x64
 80011fe:	480c      	ldr	r0, [pc, #48]	; (8001230 <ADC_STMTemperatur+0x70>)
 8001200:	f002 fab0 	bl	8003764 <HAL_ADC_PollForConversion>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d105      	bne.n	8001216 <ADC_STMTemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 800120a:	4809      	ldr	r0, [pc, #36]	; (8001230 <ADC_STMTemperatur+0x70>)
 800120c:	f002 fb35 	bl	800387a <HAL_ADC_GetValue>
 8001210:	4603      	mov	r3, r0
 8001212:	82fb      	strh	r3, [r7, #22]
 8001214:	e002      	b.n	800121c <ADC_STMTemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8001216:	2004      	movs	r0, #4
 8001218:	f000 f818 	bl	800124c <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 800121c:	4804      	ldr	r0, [pc, #16]	; (8001230 <ADC_STMTemperatur+0x70>)
 800121e:	f002 fa6d 	bl	80036fc <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8001222:	8afb      	ldrh	r3, [r7, #22]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	10000012 	.word	0x10000012
 8001230:	20000058 	.word	0x20000058

08001234 <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <software_error>:
//----------------------------------------------------------------------

// Diagnose Funktion falls ein Fehler auftritt
//----------------------------------------------------------------------
void software_error(uint8_t errorcode)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001256:	b672      	cpsid	i
}
 8001258:	bf00      	nop
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 800125a:	4a1e      	ldr	r2, [pc, #120]	; (80012d4 <software_error+0x88>)
 800125c:	7853      	ldrb	r3, [r2, #1]
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <software_error+0x88>)
 8001266:	785b      	ldrb	r3, [r3, #1]
 8001268:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800126c:	b2db      	uxtb	r3, r3
 800126e:	461a      	mov	r2, r3
 8001270:	2104      	movs	r1, #4
 8001272:	4819      	ldr	r0, [pc, #100]	; (80012d8 <software_error+0x8c>)
 8001274:	f003 ff44 	bl	8005100 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8001278:	4a16      	ldr	r2, [pc, #88]	; (80012d4 <software_error+0x88>)
 800127a:	7853      	ldrb	r3, [r2, #1]
 800127c:	f36f 1304 	bfc	r3, #4, #1
 8001280:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// OK LED ausschalten
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <software_error+0x88>)
 8001284:	785b      	ldrb	r3, [r3, #1]
 8001286:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800128a:	b2db      	uxtb	r3, r3
 800128c:	461a      	mov	r2, r3
 800128e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001292:	4811      	ldr	r0, [pc, #68]	; (80012d8 <software_error+0x8c>)
 8001294:	f003 ff34 	bl	8005100 <HAL_GPIO_WritePin>

	// Schalte SDC_Motor aus
	system_out.MotorSDC = 0;												// Zuruecksetzen Variable
 8001298:	4a10      	ldr	r2, [pc, #64]	; (80012dc <software_error+0x90>)
 800129a:	7813      	ldrb	r3, [r2, #0]
 800129c:	f36f 1345 	bfc	r3, #5, #1
 80012a0:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, system_out.MotorSDC);// SDC oeffnen
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <software_error+0x90>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	461a      	mov	r2, r3
 80012ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012b2:	480b      	ldr	r0, [pc, #44]	; (80012e0 <software_error+0x94>)
 80012b4:	f003 ff24 	bl	8005100 <HAL_GPIO_WritePin>
#ifdef DEBUG																// Serielle Kommunukation nur waehrend Debugging
#define SOFTERRORMESSAGE			"\nSoftware Error Handler ausgeloest\n"	// Ausgabe das Fehler aufgetreten ist
	uartTransmit(SOFTERRORMESSAGE,sizeof(SOFTERRORMESSAGE));
 80012b8:	2124      	movs	r1, #36	; 0x24
 80012ba:	480a      	ldr	r0, [pc, #40]	; (80012e4 <software_error+0x98>)
 80012bc:	f7ff fa80 	bl	80007c0 <uartTransmit>

#define ERRORCODE					"Error Code:\t"							// Ausgabe des Fehlers anhand von Fehlercode
	uartTransmit(ERRORCODE,sizeof(ERRORCODE));
 80012c0:	210d      	movs	r1, #13
 80012c2:	4809      	ldr	r0, [pc, #36]	; (80012e8 <software_error+0x9c>)
 80012c4:	f7ff fa7c 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(errorcode, 10);										// Fehlercode ausgeben
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	210a      	movs	r1, #10
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fa8b 	bl	80007e8 <uartTransmitNumber>
#endif
	while (1);																// Endlosschleife
 80012d2:	e7fe      	b.n	80012d2 <software_error+0x86>
 80012d4:	20000050 	.word	0x20000050
 80012d8:	40020400 	.word	0x40020400
 80012dc:	20000048 	.word	0x20000048
 80012e0:	40021000 	.word	0x40021000
 80012e4:	080085d0 	.word	0x080085d0
 80012e8:	080085f4 	.word	0x080085f4

080012ec <software_error_debug>:
//----------------------------------------------------------------------

// Diagnose Funktion falls ein Fehler auftritt (Nur Debugzwecke)
//----------------------------------------------------------------------
void software_error_debug(uint8_t errorcode)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 80012f6:	4a20      	ldr	r2, [pc, #128]	; (8001378 <software_error_debug+0x8c>)
 80012f8:	7853      	ldrb	r3, [r2, #1]
 80012fa:	f043 0308 	orr.w	r3, r3, #8
 80012fe:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8001300:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <software_error_debug+0x8c>)
 8001302:	785b      	ldrb	r3, [r3, #1]
 8001304:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001308:	b2db      	uxtb	r3, r3
 800130a:	461a      	mov	r2, r3
 800130c:	2104      	movs	r1, #4
 800130e:	481b      	ldr	r0, [pc, #108]	; (800137c <software_error_debug+0x90>)
 8001310:	f003 fef6 	bl	8005100 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8001314:	4a18      	ldr	r2, [pc, #96]	; (8001378 <software_error_debug+0x8c>)
 8001316:	7853      	ldrb	r3, [r2, #1]
 8001318:	f36f 1304 	bfc	r3, #4, #1
 800131c:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// OK LED ausschalten
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <software_error_debug+0x8c>)
 8001320:	785b      	ldrb	r3, [r3, #1]
 8001322:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001326:	b2db      	uxtb	r3, r3
 8001328:	461a      	mov	r2, r3
 800132a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800132e:	4813      	ldr	r0, [pc, #76]	; (800137c <software_error_debug+0x90>)
 8001330:	f003 fee6 	bl	8005100 <HAL_GPIO_WritePin>

	// Schalte SDC_Motor aus
	system_out.MotorSDC = 0;												// Zuruecksetzen Variable
 8001334:	4a12      	ldr	r2, [pc, #72]	; (8001380 <software_error_debug+0x94>)
 8001336:	7813      	ldrb	r3, [r2, #0]
 8001338:	f36f 1345 	bfc	r3, #5, #1
 800133c:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, system_out.MotorSDC);// SDC oeffnen
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <software_error_debug+0x94>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001346:	b2db      	uxtb	r3, r3
 8001348:	461a      	mov	r2, r3
 800134a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800134e:	480d      	ldr	r0, [pc, #52]	; (8001384 <software_error_debug+0x98>)
 8001350:	f003 fed6 	bl	8005100 <HAL_GPIO_WritePin>
#ifdef DEBUG																// Serielle Kommunukation nur waehrend Debugging
#define SOFTERRORMESSAGE			"\nSoftware Error Handler ausgeloest\n"	// Ausgabe das Fehler aufgetreten ist
	uartTransmit(SOFTERRORMESSAGE,sizeof(SOFTERRORMESSAGE));
 8001354:	2124      	movs	r1, #36	; 0x24
 8001356:	480c      	ldr	r0, [pc, #48]	; (8001388 <software_error_debug+0x9c>)
 8001358:	f7ff fa32 	bl	80007c0 <uartTransmit>

#define ERRORCODE					"Error Code:\t"							// Ausgabe des Fehlers anhand von Fehlercode
	uartTransmit(ERRORCODE,sizeof(ERRORCODE));
 800135c:	210d      	movs	r1, #13
 800135e:	480b      	ldr	r0, [pc, #44]	; (800138c <software_error_debug+0xa0>)
 8001360:	f7ff fa2e 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(errorcode, 10);										// Fehlercode ausgeben
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	210a      	movs	r1, #10
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fa3d 	bl	80007e8 <uartTransmitNumber>
#endif
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000050 	.word	0x20000050
 800137c:	40020400 	.word	0x40020400
 8001380:	20000048 	.word	0x20000048
 8001384:	40021000 	.word	0x40021000
 8001388:	080085d0 	.word	0x080085d0
 800138c:	080085f4 	.word	0x080085f4

08001390 <ITM_SendString>:
// Nachricht SWO ITM Data Console
// Core Clock := Maximalfrequenz ; HCLK fuer Serial Wire Viewer
// Im String #GRN# oder #RED# oder #ORG# erscheint die Nachricht in einer Farbe
//----------------------------------------------------------------------
void ITM_SendString(char *text)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	{
		ITM_SendChar(*text);												// Sende ITM Zeichen
		text++;																// Pointer hochzaehlen
	}
#endif
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <ITM_SendNumber>:
//----------------------------------------------------------------------

// Debug Nummer ueber SWO senden
//----------------------------------------------------------------------
void ITM_SendNumber(long number)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	for(; i > 0; i--)
	{
		ITM_SendChar('0' + buf[i-1]);
	}
#endif
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <ITM_SendChar>:
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013c4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d013      	beq.n	80013f8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80013d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013d4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80013d8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00b      	beq.n	80013f8 <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 80013e0:	e000      	b.n	80013e4 <ITM_SendChar+0x2c>
      __NOP();
 80013e2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80013e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f9      	beq.n	80013e2 <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80013ee:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	701a      	strb	r2, [r3, #0]
  return (ch);
 80013f8:	687b      	ldr	r3, [r7, #4]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <readall_inputs>:
//----------------------------------------------------------------------

// Alle Eingaenge einlesen und speichern
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
#ifdef DEBUG_INPUT
	ITM_SendString("Lese Inputs ein\n");
 800140c:	48cf      	ldr	r0, [pc, #828]	; (800174c <readall_inputs+0x344>)
 800140e:	f7ff ffbf 	bl	8001390 <ITM_SendString>
#endif

	// Systemeingaenge einlesen
	system_in.Kickdown = HAL_GPIO_ReadPin(KICKDOWN_GPIO_Port, KICKDOWN_Pin);					// Eingang Gaspedal getreten
 8001412:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001416:	48ce      	ldr	r0, [pc, #824]	; (8001750 <readall_inputs+0x348>)
 8001418:	f003 fe5a 	bl	80050d0 <HAL_GPIO_ReadPin>
 800141c:	4603      	mov	r3, r0
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	b2d9      	uxtb	r1, r3
 8001424:	4acb      	ldr	r2, [pc, #812]	; (8001754 <readall_inputs+0x34c>)
 8001426:	7813      	ldrb	r3, [r2, #0]
 8001428:	f361 0300 	bfi	r3, r1, #0, #1
 800142c:	7013      	strb	r3, [r2, #0]
	system_in.Leerlauf = HAL_GPIO_ReadPin(LEERLAUF_GPIO_Port, LEERLAUF_Pin);					// Eingang Gaspedal nicht getreten
 800142e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001432:	48c7      	ldr	r0, [pc, #796]	; (8001750 <readall_inputs+0x348>)
 8001434:	f003 fe4c 	bl	80050d0 <HAL_GPIO_ReadPin>
 8001438:	4603      	mov	r3, r0
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	b2d9      	uxtb	r1, r3
 8001440:	4ac4      	ldr	r2, [pc, #784]	; (8001754 <readall_inputs+0x34c>)
 8001442:	7813      	ldrb	r3, [r2, #0]
 8001444:	f361 0341 	bfi	r3, r1, #1, #1
 8001448:	7013      	strb	r3, [r2, #0]
	system_in.BremseNO = HAL_GPIO_ReadPin(BREMSE_NO_GPIO_Port, BREMSE_NO_Pin);					// Eingang Bremse nicht getreten
 800144a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800144e:	48c0      	ldr	r0, [pc, #768]	; (8001750 <readall_inputs+0x348>)
 8001450:	f003 fe3e 	bl	80050d0 <HAL_GPIO_ReadPin>
 8001454:	4603      	mov	r3, r0
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	b2d9      	uxtb	r1, r3
 800145c:	4abd      	ldr	r2, [pc, #756]	; (8001754 <readall_inputs+0x34c>)
 800145e:	7813      	ldrb	r3, [r2, #0]
 8001460:	f361 0382 	bfi	r3, r1, #2, #1
 8001464:	7013      	strb	r3, [r2, #0]
	system_in.BremseNC = HAL_GPIO_ReadPin(BREMSE_NC_GPIO_Port, BREMSE_NC_Pin);					// Eingang Bremse getreten
 8001466:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800146a:	48b9      	ldr	r0, [pc, #740]	; (8001750 <readall_inputs+0x348>)
 800146c:	f003 fe30 	bl	80050d0 <HAL_GPIO_ReadPin>
 8001470:	4603      	mov	r3, r0
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	b2d9      	uxtb	r1, r3
 8001478:	4ab6      	ldr	r2, [pc, #728]	; (8001754 <readall_inputs+0x34c>)
 800147a:	7813      	ldrb	r3, [r2, #0]
 800147c:	f361 03c3 	bfi	r3, r1, #3, #1
 8001480:	7013      	strb	r3, [r2, #0]
	system_in.Kupplung = HAL_GPIO_ReadPin(KUPPLUNG_NO_GPIO_Port, KUPPLUNG_NO_Pin);				// Eingang Kupplung nicht getreten
 8001482:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001486:	48b2      	ldr	r0, [pc, #712]	; (8001750 <readall_inputs+0x348>)
 8001488:	f003 fe22 	bl	80050d0 <HAL_GPIO_ReadPin>
 800148c:	4603      	mov	r3, r0
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	b2d9      	uxtb	r1, r3
 8001494:	4aaf      	ldr	r2, [pc, #700]	; (8001754 <readall_inputs+0x34c>)
 8001496:	7813      	ldrb	r3, [r2, #0]
 8001498:	f361 1304 	bfi	r3, r1, #4, #1
 800149c:	7013      	strb	r3, [r2, #0]
	system_in.Recuperation = HAL_GPIO_ReadPin(RECUPERATION_GPIO_Port, RECUPERATION_Pin);		// Eingang Recuperation
 800149e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014a2:	48ad      	ldr	r0, [pc, #692]	; (8001758 <readall_inputs+0x350>)
 80014a4:	f003 fe14 	bl	80050d0 <HAL_GPIO_ReadPin>
 80014a8:	4603      	mov	r3, r0
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	b2d9      	uxtb	r1, r3
 80014b0:	4aa8      	ldr	r2, [pc, #672]	; (8001754 <readall_inputs+0x34c>)
 80014b2:	7813      	ldrb	r3, [r2, #0]
 80014b4:	f361 1345 	bfi	r3, r1, #5, #1
 80014b8:	7013      	strb	r3, [r2, #0]
	system_in.ECON = HAL_GPIO_ReadPin(ECON_GPIO_Port, ECON_Pin);								// Eingang Klima
 80014ba:	2102      	movs	r1, #2
 80014bc:	48a6      	ldr	r0, [pc, #664]	; (8001758 <readall_inputs+0x350>)
 80014be:	f003 fe07 	bl	80050d0 <HAL_GPIO_ReadPin>
 80014c2:	4603      	mov	r3, r0
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	b2d9      	uxtb	r1, r3
 80014ca:	4aa2      	ldr	r2, [pc, #648]	; (8001754 <readall_inputs+0x34c>)
 80014cc:	7813      	ldrb	r3, [r2, #0]
 80014ce:	f361 1386 	bfi	r3, r1, #6, #1
 80014d2:	7013      	strb	r3, [r2, #0]
	system_in.Anlasser = HAL_GPIO_ReadPin(ANLASSER_GPIO_Port, ANLASSER_Pin);					// Eingang Zuendschloss, Motor starten
 80014d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014d8:	48a0      	ldr	r0, [pc, #640]	; (800175c <readall_inputs+0x354>)
 80014da:	f003 fdf9 	bl	80050d0 <HAL_GPIO_ReadPin>
 80014de:	4603      	mov	r3, r0
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	b2d9      	uxtb	r1, r3
 80014e6:	4a9b      	ldr	r2, [pc, #620]	; (8001754 <readall_inputs+0x34c>)
 80014e8:	7813      	ldrb	r3, [r2, #0]
 80014ea:	f361 13c7 	bfi	r3, r1, #7, #1
 80014ee:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 80014f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f4:	4899      	ldr	r0, [pc, #612]	; (800175c <readall_inputs+0x354>)
 80014f6:	f003 fdeb 	bl	80050d0 <HAL_GPIO_ReadPin>
 80014fa:	4603      	mov	r3, r0
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	b2d9      	uxtb	r1, r3
 8001502:	4a94      	ldr	r2, [pc, #592]	; (8001754 <readall_inputs+0x34c>)
 8001504:	7853      	ldrb	r3, [r2, #1]
 8001506:	f361 0300 	bfi	r3, r1, #0, #1
 800150a:	7053      	strb	r3, [r2, #1]
	system_in.DCDC_Inst = HAL_GPIO_ReadPin(DCDC_INSTRUCTION_GPIO_Port, DCDC_INSTRUCTION_Pin);	// DCDC Wandler funktioniert einwandfrei
 800150c:	2101      	movs	r1, #1
 800150e:	4894      	ldr	r0, [pc, #592]	; (8001760 <readall_inputs+0x358>)
 8001510:	f003 fdde 	bl	80050d0 <HAL_GPIO_ReadPin>
 8001514:	4603      	mov	r3, r0
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	b2d9      	uxtb	r1, r3
 800151c:	4a8d      	ldr	r2, [pc, #564]	; (8001754 <readall_inputs+0x34c>)
 800151e:	7853      	ldrb	r3, [r2, #1]
 8001520:	f361 0341 	bfi	r3, r1, #1, #1
 8001524:	7053      	strb	r3, [r2, #1]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8001526:	2101      	movs	r1, #1
 8001528:	488b      	ldr	r0, [pc, #556]	; (8001758 <readall_inputs+0x350>)
 800152a:	f003 fdd1 	bl	80050d0 <HAL_GPIO_ReadPin>
 800152e:	4603      	mov	r3, r0
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	b2d9      	uxtb	r1, r3
 8001536:	4a87      	ldr	r2, [pc, #540]	; (8001754 <readall_inputs+0x34c>)
 8001538:	7853      	ldrb	r3, [r2, #1]
 800153a:	f361 0382 	bfi	r3, r1, #2, #1
 800153e:	7053      	strb	r3, [r2, #1]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8001540:	2140      	movs	r1, #64	; 0x40
 8001542:	4883      	ldr	r0, [pc, #524]	; (8001750 <readall_inputs+0x348>)
 8001544:	f003 fdc4 	bl	80050d0 <HAL_GPIO_ReadPin>
 8001548:	4603      	mov	r3, r0
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	b2d9      	uxtb	r1, r3
 8001550:	4a80      	ldr	r2, [pc, #512]	; (8001754 <readall_inputs+0x34c>)
 8001552:	7853      	ldrb	r3, [r2, #1]
 8001554:	f361 03c3 	bfi	r3, r1, #3, #1
 8001558:	7053      	strb	r3, [r2, #1]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 800155a:	2101      	movs	r1, #1
 800155c:	4881      	ldr	r0, [pc, #516]	; (8001764 <readall_inputs+0x35c>)
 800155e:	f003 fdb7 	bl	80050d0 <HAL_GPIO_ReadPin>
 8001562:	4603      	mov	r3, r0
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	b2d9      	uxtb	r1, r3
 800156a:	4a7a      	ldr	r2, [pc, #488]	; (8001754 <readall_inputs+0x34c>)
 800156c:	7853      	ldrb	r3, [r2, #1]
 800156e:	f361 1304 	bfi	r3, r1, #4, #1
 8001572:	7053      	strb	r3, [r2, #1]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8001574:	2104      	movs	r1, #4
 8001576:	487b      	ldr	r0, [pc, #492]	; (8001764 <readall_inputs+0x35c>)
 8001578:	f003 fdaa 	bl	80050d0 <HAL_GPIO_ReadPin>
 800157c:	4603      	mov	r3, r0
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	b2d9      	uxtb	r1, r3
 8001584:	4a73      	ldr	r2, [pc, #460]	; (8001754 <readall_inputs+0x34c>)
 8001586:	7853      	ldrb	r3, [r2, #1]
 8001588:	f361 1345 	bfi	r3, r1, #5, #1
 800158c:	7053      	strb	r3, [r2, #1]
//	system_in.Bremsdruck_NO = HAL_GPIO_ReadPin(Bremsdruck_NO_GPIO_Port, Bremsdruck_NO_Pin);		// Bremsdruck nicht zu hoch
//	system_in.Bremsdruck_NC = HAL_GPIO_ReadPin(Bremsdruck_NC_GPIO_Port, Bremsdruck_NC_Pin);		// Bremsdruck zu hoch

	// SDC-Eingaenge einlesen
	sdc_in.EmergencyRun = HAL_GPIO_ReadPin(EMERGENCY_RUN_GPIO_Port, EMERGENCY_RUN_Pin);			// Emergency Run, Akku
 800158e:	2102      	movs	r1, #2
 8001590:	4874      	ldr	r0, [pc, #464]	; (8001764 <readall_inputs+0x35c>)
 8001592:	f003 fd9d 	bl	80050d0 <HAL_GPIO_ReadPin>
 8001596:	4603      	mov	r3, r0
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	b2d9      	uxtb	r1, r3
 800159e:	4a72      	ldr	r2, [pc, #456]	; (8001768 <readall_inputs+0x360>)
 80015a0:	7813      	ldrb	r3, [r2, #0]
 80015a2:	f361 0300 	bfi	r3, r1, #0, #1
 80015a6:	7013      	strb	r3, [r2, #0]
	sdc_in.SDC0 = HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin);						// Shutdown-Circuit, OK
 80015a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ac:	4868      	ldr	r0, [pc, #416]	; (8001750 <readall_inputs+0x348>)
 80015ae:	f003 fd8f 	bl	80050d0 <HAL_GPIO_ReadPin>
 80015b2:	4603      	mov	r3, r0
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	b2d9      	uxtb	r1, r3
 80015ba:	4a6b      	ldr	r2, [pc, #428]	; (8001768 <readall_inputs+0x360>)
 80015bc:	7813      	ldrb	r3, [r2, #0]
 80015be:	f361 0341 	bfi	r3, r1, #1, #1
 80015c2:	7013      	strb	r3, [r2, #0]
	sdc_in.Akku1SDC = HAL_GPIO_ReadPin(SENSE_SDC_AKKU_GPIO_Port, SENSE_SDC_AKKU_Pin);			// Shutdown-Circuit Akku, OK
 80015c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015c8:	4861      	ldr	r0, [pc, #388]	; (8001750 <readall_inputs+0x348>)
 80015ca:	f003 fd81 	bl	80050d0 <HAL_GPIO_ReadPin>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	b2d9      	uxtb	r1, r3
 80015d6:	4a64      	ldr	r2, [pc, #400]	; (8001768 <readall_inputs+0x360>)
 80015d8:	7813      	ldrb	r3, [r2, #0]
 80015da:	f361 0382 	bfi	r3, r1, #2, #1
 80015de:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 80015e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015e4:	4861      	ldr	r0, [pc, #388]	; (800176c <readall_inputs+0x364>)
 80015e6:	f003 fd73 	bl	80050d0 <HAL_GPIO_ReadPin>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	b2d9      	uxtb	r1, r3
 80015f2:	4a5d      	ldr	r2, [pc, #372]	; (8001768 <readall_inputs+0x360>)
 80015f4:	7813      	ldrb	r3, [r2, #0]
 80015f6:	f361 03c3 	bfi	r3, r1, #3, #1
 80015fa:	7013      	strb	r3, [r2, #0]
	sdc_in.DCDC_Fault = HAL_GPIO_ReadPin(DCDC_FAULT_GPIO_Port, DCDC_FAULT_Pin);					// DCDC Wandler funktioniert nicht richtig
 80015fc:	2102      	movs	r1, #2
 80015fe:	4858      	ldr	r0, [pc, #352]	; (8001760 <readall_inputs+0x358>)
 8001600:	f003 fd66 	bl	80050d0 <HAL_GPIO_ReadPin>
 8001604:	4603      	mov	r3, r0
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	b2d9      	uxtb	r1, r3
 800160c:	4a56      	ldr	r2, [pc, #344]	; (8001768 <readall_inputs+0x360>)
 800160e:	7813      	ldrb	r3, [r2, #0]
 8001610:	f361 1304 	bfi	r3, r1, #4, #1
 8001614:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.ASR1 = HAL_GPIO_ReadPin(ASR_IN1_GPIO_Port, ASR_IN1_Pin);							// ASR Eingang Mittelkonsole
 8001616:	2110      	movs	r1, #16
 8001618:	4851      	ldr	r0, [pc, #324]	; (8001760 <readall_inputs+0x358>)
 800161a:	f003 fd59 	bl	80050d0 <HAL_GPIO_ReadPin>
 800161e:	4603      	mov	r3, r0
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	b2d9      	uxtb	r1, r3
 8001626:	4a52      	ldr	r2, [pc, #328]	; (8001770 <readall_inputs+0x368>)
 8001628:	7813      	ldrb	r3, [r2, #0]
 800162a:	f361 0300 	bfi	r3, r1, #0, #1
 800162e:	7013      	strb	r3, [r2, #0]
	komfort_in.ASR2 = HAL_GPIO_ReadPin(ASR_IN2_GPIO_Port, ASR_IN2_Pin);							// ASR Eingang Mittelkonsole
 8001630:	2110      	movs	r1, #16
 8001632:	484a      	ldr	r0, [pc, #296]	; (800175c <readall_inputs+0x354>)
 8001634:	f003 fd4c 	bl	80050d0 <HAL_GPIO_ReadPin>
 8001638:	4603      	mov	r3, r0
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	b2d9      	uxtb	r1, r3
 8001640:	4a4b      	ldr	r2, [pc, #300]	; (8001770 <readall_inputs+0x368>)
 8001642:	7813      	ldrb	r3, [r2, #0]
 8001644:	f361 0341 	bfi	r3, r1, #1, #1
 8001648:	7013      	strb	r3, [r2, #0]
	komfort_in.ECO = HAL_GPIO_ReadPin(ECO_GPIO_Port, ECO_Pin);									// ECO Eingang Mittelkonsole
 800164a:	2108      	movs	r1, #8
 800164c:	4840      	ldr	r0, [pc, #256]	; (8001750 <readall_inputs+0x348>)
 800164e:	f003 fd3f 	bl	80050d0 <HAL_GPIO_ReadPin>
 8001652:	4603      	mov	r3, r0
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	b2d9      	uxtb	r1, r3
 800165a:	4a45      	ldr	r2, [pc, #276]	; (8001770 <readall_inputs+0x368>)
 800165c:	7813      	ldrb	r3, [r2, #0]
 800165e:	f361 0382 	bfi	r3, r1, #2, #1
 8001662:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Rst_In = HAL_GPIO_ReadPin(BC_RESET_IN_GPIO_Port, BC_RESET_IN_Pin);			// Boardcomputer Reset Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8001664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001668:	483d      	ldr	r0, [pc, #244]	; (8001760 <readall_inputs+0x358>)
 800166a:	f003 fd31 	bl	80050d0 <HAL_GPIO_ReadPin>
 800166e:	4603      	mov	r3, r0
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	b2d9      	uxtb	r1, r3
 8001676:	4a3e      	ldr	r2, [pc, #248]	; (8001770 <readall_inputs+0x368>)
 8001678:	7813      	ldrb	r3, [r2, #0]
 800167a:	f361 03c3 	bfi	r3, r1, #3, #1
 800167e:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Up_In = HAL_GPIO_ReadPin(BC_UP_IN_GPIO_Port, BC_UP_IN_Pin);					// Boardcomputer Rauf Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8001680:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001684:	4837      	ldr	r0, [pc, #220]	; (8001764 <readall_inputs+0x35c>)
 8001686:	f003 fd23 	bl	80050d0 <HAL_GPIO_ReadPin>
 800168a:	4603      	mov	r3, r0
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	b2d9      	uxtb	r1, r3
 8001692:	4a37      	ldr	r2, [pc, #220]	; (8001770 <readall_inputs+0x368>)
 8001694:	7813      	ldrb	r3, [r2, #0]
 8001696:	f361 1304 	bfi	r3, r1, #4, #1
 800169a:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Down_In = HAL_GPIO_ReadPin(BC_DOWN_IN_GPIO_Port, BC_DOWN_IN_Pin);				// Boardcomputer Runter Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 800169c:	2110      	movs	r1, #16
 800169e:	482c      	ldr	r0, [pc, #176]	; (8001750 <readall_inputs+0x348>)
 80016a0:	f003 fd16 	bl	80050d0 <HAL_GPIO_ReadPin>
 80016a4:	4603      	mov	r3, r0
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	b2d9      	uxtb	r1, r3
 80016ac:	4a30      	ldr	r2, [pc, #192]	; (8001770 <readall_inputs+0x368>)
 80016ae:	7813      	ldrb	r3, [r2, #0]
 80016b0:	f361 1345 	bfi	r3, r1, #5, #1
 80016b4:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn1 = HAL_GPIO_ReadPin(BAMOCAR_IN1_GPIO_Port, BAMOCAR_IN1_Pin);				// Eingang Bamocar 1
 80016b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ba:	4828      	ldr	r0, [pc, #160]	; (800175c <readall_inputs+0x354>)
 80016bc:	f003 fd08 	bl	80050d0 <HAL_GPIO_ReadPin>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	b2d9      	uxtb	r1, r3
 80016c8:	4a29      	ldr	r2, [pc, #164]	; (8001770 <readall_inputs+0x368>)
 80016ca:	7813      	ldrb	r3, [r2, #0]
 80016cc:	f361 1386 	bfi	r3, r1, #6, #1
 80016d0:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn2 = HAL_GPIO_ReadPin(BAMOCAR_IN2_GPIO_Port, BAMOCAR_IN2_Pin);				// Eingang Bamocar 2
 80016d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d6:	4825      	ldr	r0, [pc, #148]	; (800176c <readall_inputs+0x364>)
 80016d8:	f003 fcfa 	bl	80050d0 <HAL_GPIO_ReadPin>
 80016dc:	4603      	mov	r3, r0
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	b2d9      	uxtb	r1, r3
 80016e4:	4a22      	ldr	r2, [pc, #136]	; (8001770 <readall_inputs+0x368>)
 80016e6:	7813      	ldrb	r3, [r2, #0]
 80016e8:	f361 13c7 	bfi	r3, r1, #7, #1
 80016ec:	7013      	strb	r3, [r2, #0]
	komfort_in.Enter = HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin);							// Encoder Taster Enter Eingang Mittelconsole
 80016ee:	2180      	movs	r1, #128	; 0x80
 80016f0:	4820      	ldr	r0, [pc, #128]	; (8001774 <readall_inputs+0x36c>)
 80016f2:	f003 fced 	bl	80050d0 <HAL_GPIO_ReadPin>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	b2d9      	uxtb	r1, r3
 80016fe:	4a1c      	ldr	r2, [pc, #112]	; (8001770 <readall_inputs+0x368>)
 8001700:	7853      	ldrb	r3, [r2, #1]
 8001702:	f361 0300 	bfi	r3, r1, #0, #1
 8001706:	7053      	strb	r3, [r2, #1]
	komfort_in.OutA = HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTA_Pin);								// Encoder OUTA Eingang Mittelconsole
 8001708:	f44f 7100 	mov.w	r1, #512	; 0x200
 800170c:	4815      	ldr	r0, [pc, #84]	; (8001764 <readall_inputs+0x35c>)
 800170e:	f003 fcdf 	bl	80050d0 <HAL_GPIO_ReadPin>
 8001712:	4603      	mov	r3, r0
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	b2d9      	uxtb	r1, r3
 800171a:	4a15      	ldr	r2, [pc, #84]	; (8001770 <readall_inputs+0x368>)
 800171c:	7853      	ldrb	r3, [r2, #1]
 800171e:	f361 0341 	bfi	r3, r1, #1, #1
 8001722:	7053      	strb	r3, [r2, #1]
	komfort_in.OutB = HAL_GPIO_ReadPin(OUTB_GPIO_Port, OUTB_Pin);								// Encoder OUTB Eingang Mittelconsole
 8001724:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001728:	480e      	ldr	r0, [pc, #56]	; (8001764 <readall_inputs+0x35c>)
 800172a:	f003 fcd1 	bl	80050d0 <HAL_GPIO_ReadPin>
 800172e:	4603      	mov	r3, r0
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	b2d9      	uxtb	r1, r3
 8001736:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <readall_inputs+0x368>)
 8001738:	7853      	ldrb	r3, [r2, #1]
 800173a:	f361 0382 	bfi	r3, r1, #2, #1
 800173e:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA1 = HAL_GPIO_ReadPin(GRA1_GPIO_Port, GRA1_Pin);								// Tempomat 1 Eingang
 8001740:	2120      	movs	r1, #32
 8001742:	4807      	ldr	r0, [pc, #28]	; (8001760 <readall_inputs+0x358>)
 8001744:	f003 fcc4 	bl	80050d0 <HAL_GPIO_ReadPin>
 8001748:	4603      	mov	r3, r0
 800174a:	e015      	b.n	8001778 <readall_inputs+0x370>
 800174c:	08008604 	.word	0x08008604
 8001750:	40021000 	.word	0x40021000
 8001754:	2000003c 	.word	0x2000003c
 8001758:	40021400 	.word	0x40021400
 800175c:	40020c00 	.word	0x40020c00
 8001760:	40021800 	.word	0x40021800
 8001764:	40020000 	.word	0x40020000
 8001768:	20000040 	.word	0x20000040
 800176c:	40020400 	.word	0x40020400
 8001770:	20000044 	.word	0x20000044
 8001774:	40020800 	.word	0x40020800
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	b2d9      	uxtb	r1, r3
 800177e:	4a30      	ldr	r2, [pc, #192]	; (8001840 <readall_inputs+0x438>)
 8001780:	7853      	ldrb	r3, [r2, #1]
 8001782:	f361 03c3 	bfi	r3, r1, #3, #1
 8001786:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA2 = HAL_GPIO_ReadPin(GRA2_GPIO_Port, GRA2_Pin);								// Tempomat 2 Eingang
 8001788:	2140      	movs	r1, #64	; 0x40
 800178a:	482e      	ldr	r0, [pc, #184]	; (8001844 <readall_inputs+0x43c>)
 800178c:	f003 fca0 	bl	80050d0 <HAL_GPIO_ReadPin>
 8001790:	4603      	mov	r3, r0
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	b2d9      	uxtb	r1, r3
 8001798:	4a29      	ldr	r2, [pc, #164]	; (8001840 <readall_inputs+0x438>)
 800179a:	7853      	ldrb	r3, [r2, #1]
 800179c:	f361 1304 	bfi	r3, r1, #4, #1
 80017a0:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA3 = HAL_GPIO_ReadPin(GRA3_GPIO_Port, GRA3_Pin);								// Tempomat 3 Eingang
 80017a2:	2180      	movs	r1, #128	; 0x80
 80017a4:	4827      	ldr	r0, [pc, #156]	; (8001844 <readall_inputs+0x43c>)
 80017a6:	f003 fc93 	bl	80050d0 <HAL_GPIO_ReadPin>
 80017aa:	4603      	mov	r3, r0
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	b2d9      	uxtb	r1, r3
 80017b2:	4a23      	ldr	r2, [pc, #140]	; (8001840 <readall_inputs+0x438>)
 80017b4:	7853      	ldrb	r3, [r2, #1]
 80017b6:	f361 1345 	bfi	r3, r1, #5, #1
 80017ba:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA4 = HAL_GPIO_ReadPin(GRA4_GPIO_Port, GRA4_Pin);								// Tempomat 4 Eingang
 80017bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017c0:	4820      	ldr	r0, [pc, #128]	; (8001844 <readall_inputs+0x43c>)
 80017c2:	f003 fc85 	bl	80050d0 <HAL_GPIO_ReadPin>
 80017c6:	4603      	mov	r3, r0
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	b2d9      	uxtb	r1, r3
 80017ce:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <readall_inputs+0x438>)
 80017d0:	7853      	ldrb	r3, [r2, #1]
 80017d2:	f361 1386 	bfi	r3, r1, #6, #1
 80017d6:	7053      	strb	r3, [r2, #1]
	komfort_in.Durchfluss = HAL_GPIO_ReadPin(DURCHFLUSS_GPIO_Port, DURCHFLUSS_Pin);				// Durchflusssensor Eingang
 80017d8:	2120      	movs	r1, #32
 80017da:	481b      	ldr	r0, [pc, #108]	; (8001848 <readall_inputs+0x440>)
 80017dc:	f003 fc78 	bl	80050d0 <HAL_GPIO_ReadPin>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	b2d9      	uxtb	r1, r3
 80017e8:	4a15      	ldr	r2, [pc, #84]	; (8001840 <readall_inputs+0x438>)
 80017ea:	7853      	ldrb	r3, [r2, #1]
 80017ec:	f361 13c7 	bfi	r3, r1, #7, #1
 80017f0:	7053      	strb	r3, [r2, #1]

#ifdef DEBUG_INPUT
	ITM_SendString("Eingaenge gelesen.\n");
 80017f2:	4816      	ldr	r0, [pc, #88]	; (800184c <readall_inputs+0x444>)
 80017f4:	f7ff fdcc 	bl	8001390 <ITM_SendString>
	ITM_SendString("system_in:\t");
 80017f8:	4815      	ldr	r0, [pc, #84]	; (8001850 <readall_inputs+0x448>)
 80017fa:	f7ff fdc9 	bl	8001390 <ITM_SendString>
	ITM_SendNumber(system_in.systeminput);
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <readall_inputs+0x44c>)
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fdce 	bl	80013a4 <ITM_SendNumber>
	ITM_SendChar('\n');
 8001808:	200a      	movs	r0, #10
 800180a:	f7ff fdd5 	bl	80013b8 <ITM_SendChar>
	ITM_SendString("sdc_in:\t");
 800180e:	4812      	ldr	r0, [pc, #72]	; (8001858 <readall_inputs+0x450>)
 8001810:	f7ff fdbe 	bl	8001390 <ITM_SendString>
	ITM_SendNumber(sdc_in.sdcinput);
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <readall_inputs+0x454>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fdc3 	bl	80013a4 <ITM_SendNumber>
	ITM_SendChar('\n');
 800181e:	200a      	movs	r0, #10
 8001820:	f7ff fdca 	bl	80013b8 <ITM_SendChar>
	ITM_SendString("komfort_in:\t");
 8001824:	480e      	ldr	r0, [pc, #56]	; (8001860 <readall_inputs+0x458>)
 8001826:	f7ff fdb3 	bl	8001390 <ITM_SendString>
	ITM_SendNumber(komfort_in.komfortinput);
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <readall_inputs+0x438>)
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fdb8 	bl	80013a4 <ITM_SendNumber>
	ITM_SendChar('\n');
 8001834:	200a      	movs	r0, #10
 8001836:	f7ff fdbf 	bl	80013b8 <ITM_SendChar>
#endif
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000044 	.word	0x20000044
 8001844:	40021800 	.word	0x40021800
 8001848:	40021000 	.word	0x40021000
 800184c:	08008618 	.word	0x08008618
 8001850:	0800862c 	.word	0x0800862c
 8001854:	2000003c 	.word	0x2000003c
 8001858:	08008638 	.word	0x08008638
 800185c:	20000040 	.word	0x20000040
 8001860:	08008644 	.word	0x08008644

08001864 <readAnlasser>:
//----------------------------------------------------------------------

// Anlasser einlesen, Wert in Variable speichern, bis KL15 abfaellt
//----------------------------------------------------------------------
void readAnlasser(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
	if (system_in.Anlasser != 1)
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <readAnlasser+0x50>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d105      	bne.n	8001882 <readAnlasser+0x1e>
	{
		sdc_in.Anlasser = 1;
 8001876:	4a10      	ldr	r2, [pc, #64]	; (80018b8 <readAnlasser+0x54>)
 8001878:	7813      	ldrb	r3, [r2, #0]
 800187a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800187e:	7013      	strb	r3, [r2, #0]
	}
	else if ((sdc_in.Anlasser == 1) && (system_in.KL15 == 1))
	{
		sdc_in.Anlasser = 0;
	}
}
 8001880:	e012      	b.n	80018a8 <readAnlasser+0x44>
	else if ((sdc_in.Anlasser == 1) && (system_in.KL15 == 1))
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <readAnlasser+0x54>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00b      	beq.n	80018a8 <readAnlasser+0x44>
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <readAnlasser+0x50>)
 8001892:	785b      	ldrb	r3, [r3, #1]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d004      	beq.n	80018a8 <readAnlasser+0x44>
		sdc_in.Anlasser = 0;
 800189e:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <readAnlasser+0x54>)
 80018a0:	7813      	ldrb	r3, [r2, #0]
 80018a2:	f36f 1386 	bfc	r3, #6, #1
 80018a6:	7013      	strb	r3, [r2, #0]
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	2000003c 	.word	0x2000003c
 80018b8:	20000040 	.word	0x20000040

080018bc <millis>:
//----------------------------------------------------------------------
#include "millis.h"
//----------------------------------------------------------------------

uint32_t millis(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80018c0:	f001 fd92 	bl	80033e8 <HAL_GetTick>
 80018c4:	4603      	mov	r3, r0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);							// Teste Green LED, an
 80018d0:	2201      	movs	r2, #1
 80018d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018d6:	481b      	ldr	r0, [pc, #108]	; (8001944 <testPCB_Leds+0x78>)
 80018d8:	f003 fc12 	bl	8005100 <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 80018dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018e0:	f001 fd8e 	bl	8003400 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);							// Teste Green LED, aus
 80018e4:	2200      	movs	r2, #0
 80018e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ea:	4816      	ldr	r0, [pc, #88]	; (8001944 <testPCB_Leds+0x78>)
 80018ec:	f003 fc08 	bl	8005100 <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 80018f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018f4:	f001 fd84 	bl	8003400 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);								// Teste Blue LED, an
 80018f8:	2201      	movs	r2, #1
 80018fa:	2180      	movs	r1, #128	; 0x80
 80018fc:	4811      	ldr	r0, [pc, #68]	; (8001944 <testPCB_Leds+0x78>)
 80018fe:	f003 fbff 	bl	8005100 <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 8001902:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001906:	f001 fd7b 	bl	8003400 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);							// Teste Blue LED, aus
 800190a:	2200      	movs	r2, #0
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	480d      	ldr	r0, [pc, #52]	; (8001944 <testPCB_Leds+0x78>)
 8001910:	f003 fbf6 	bl	8005100 <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 8001914:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001918:	f001 fd72 	bl	8003400 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);								// Teste Red LED, an
 800191c:	2201      	movs	r2, #1
 800191e:	2104      	movs	r1, #4
 8001920:	4808      	ldr	r0, [pc, #32]	; (8001944 <testPCB_Leds+0x78>)
 8001922:	f003 fbed 	bl	8005100 <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 8001926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800192a:	f001 fd69 	bl	8003400 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);								// Teste Red LED, aus
 800192e:	2200      	movs	r2, #0
 8001930:	2104      	movs	r1, #4
 8001932:	4804      	ldr	r0, [pc, #16]	; (8001944 <testPCB_Leds+0x78>)
 8001934:	f003 fbe4 	bl	8005100 <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 8001938:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800193c:	f001 fd60 	bl	8003400 <HAL_Delay>
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40020400 	.word	0x40020400

08001948 <testCockpit_Leds>:
//----------------------------------------------------------------------

// Teste Cockpit LEDs
//----------------------------------------------------------------------
void testCockpit_Leds(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(ANHAENGER_GPIO_Port, ANHAENGER_Pin, GPIO_PIN_SET);							// Teste Anhaenger LED, an (Cockpit ECO)
 800194c:	2201      	movs	r2, #1
 800194e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001952:	4813      	ldr	r0, [pc, #76]	; (80019a0 <testCockpit_Leds+0x58>)
 8001954:	f003 fbd4 	bl	8005100 <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 8001958:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800195c:	f001 fd50 	bl	8003400 <HAL_Delay>
    HAL_GPIO_WritePin(ANHAENGER_GPIO_Port, ANHAENGER_Pin, GPIO_PIN_RESET);							// Teste Anhaenger LED, aus (Cockpit ECO)
 8001960:	2200      	movs	r2, #0
 8001962:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001966:	480e      	ldr	r0, [pc, #56]	; (80019a0 <testCockpit_Leds+0x58>)
 8001968:	f003 fbca 	bl	8005100 <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 800196c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001970:	f001 fd46 	bl	8003400 <HAL_Delay>
    HAL_GPIO_WritePin(NIVEAU_OUT_GPIO_Port, NIVEAU_OUT_Pin, GPIO_PIN_SET);							// Teste Reserve LED, an (Cockpit Niveauregulierung)
 8001974:	2201      	movs	r2, #1
 8001976:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800197a:	4809      	ldr	r0, [pc, #36]	; (80019a0 <testCockpit_Leds+0x58>)
 800197c:	f003 fbc0 	bl	8005100 <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 8001980:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001984:	f001 fd3c 	bl	8003400 <HAL_Delay>
    HAL_GPIO_WritePin(NIVEAU_OUT_GPIO_Port, NIVEAU_OUT_Pin, GPIO_PIN_RESET);						// Teste Reserve LED, aus (Cockpit Niveauregulierung)
 8001988:	2200      	movs	r2, #0
 800198a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800198e:	4804      	ldr	r0, [pc, #16]	; (80019a0 <testCockpit_Leds+0x58>)
 8001990:	f003 fbb6 	bl	8005100 <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 8001994:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001998:	f001 fd32 	bl	8003400 <HAL_Delay>
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40020c00 	.word	0x40020c00

080019a4 <pwm_oelstand>:
//----------------------------------------------------------------------

// PWM fuer Oelstandsensor am Kombiinstrument
//----------------------------------------------------------------------
void pwm_oelstand(uint16_t time)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	80fb      	strh	r3, [r7, #6]
	// Auswahl wie viele Sekunden vergangen
	switch (time)																					// Zeit wird uebergeben
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	2b4b      	cmp	r3, #75	; 0x4b
 80019b2:	d01f      	beq.n	80019f4 <pwm_oelstand+0x50>
 80019b4:	2b4b      	cmp	r3, #75	; 0x4b
 80019b6:	dc24      	bgt.n	8001a02 <pwm_oelstand+0x5e>
 80019b8:	2b2d      	cmp	r3, #45	; 0x2d
 80019ba:	d014      	beq.n	80019e6 <pwm_oelstand+0x42>
 80019bc:	2b2d      	cmp	r3, #45	; 0x2d
 80019be:	dc20      	bgt.n	8001a02 <pwm_oelstand+0x5e>
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <pwm_oelstand+0x26>
 80019c4:	2b0f      	cmp	r3, #15
 80019c6:	d007      	beq.n	80019d8 <pwm_oelstand+0x34>
			break;
		case 75: // 5x15 ms = 75 ms
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 75ms Oelstandsensor Ausgang high
			break;
		default:
			break;
 80019c8:	e01b      	b.n	8001a02 <pwm_oelstand+0x5e>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_RESET);			// Bei 0ms Oelstandsensor Ausgang low
 80019ca:	2200      	movs	r2, #0
 80019cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019d0:	480e      	ldr	r0, [pc, #56]	; (8001a0c <pwm_oelstand+0x68>)
 80019d2:	f003 fb95 	bl	8005100 <HAL_GPIO_WritePin>
			break;
 80019d6:	e015      	b.n	8001a04 <pwm_oelstand+0x60>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 15ms Oelstandsensor Ausgang high
 80019d8:	2201      	movs	r2, #1
 80019da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019de:	480b      	ldr	r0, [pc, #44]	; (8001a0c <pwm_oelstand+0x68>)
 80019e0:	f003 fb8e 	bl	8005100 <HAL_GPIO_WritePin>
			break;
 80019e4:	e00e      	b.n	8001a04 <pwm_oelstand+0x60>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_RESET);			// Bei 45ms Oelstandsensor Ausgang low
 80019e6:	2200      	movs	r2, #0
 80019e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ec:	4807      	ldr	r0, [pc, #28]	; (8001a0c <pwm_oelstand+0x68>)
 80019ee:	f003 fb87 	bl	8005100 <HAL_GPIO_WritePin>
			break;
 80019f2:	e007      	b.n	8001a04 <pwm_oelstand+0x60>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 75ms Oelstandsensor Ausgang high
 80019f4:	2201      	movs	r2, #1
 80019f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019fa:	4804      	ldr	r0, [pc, #16]	; (8001a0c <pwm_oelstand+0x68>)
 80019fc:	f003 fb80 	bl	8005100 <HAL_GPIO_WritePin>
			break;
 8001a00:	e000      	b.n	8001a04 <pwm_oelstand+0x60>
			break;
 8001a02:	bf00      	nop
	}
	// Nach 405ms wird das ganze wiederholt
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40020000 	.word	0x40020000

08001a10 <cockpit_default>:
//----------------------------------------------------------------------

// Setze Cockpit auf default, alle Fehler OK
//----------------------------------------------------------------------
void cockpit_default(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	leuchten_out.Ruechwarn = 1;																		// Ruecklichtwarnung setzen
 8001a14:	4a1f      	ldr	r2, [pc, #124]	; (8001a94 <cockpit_default+0x84>)
 8001a16:	7813      	ldrb	r3, [r2, #0]
 8001a18:	f043 0310 	orr.w	r3, r3, #16
 8001a1c:	7013      	strb	r3, [r2, #0]
	leuchten_out.Wischwarn = 1;																		// Wischwasserwarnung setzen
 8001a1e:	4a1d      	ldr	r2, [pc, #116]	; (8001a94 <cockpit_default+0x84>)
 8001a20:	7813      	ldrb	r3, [r2, #0]
 8001a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a26:	7013      	strb	r3, [r2, #0]
	leuchten_out.Bremswarn = 1;																		// Bremslichtwarnung setzen
 8001a28:	4a1a      	ldr	r2, [pc, #104]	; (8001a94 <cockpit_default+0x84>)
 8001a2a:	7813      	ldrb	r3, [r2, #0]
 8001a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a30:	7013      	strb	r3, [r2, #0]
	leuchten_out.Oeldruck = 1;																		// Oeldruckwarnung setzen
 8001a32:	4a18      	ldr	r2, [pc, #96]	; (8001a94 <cockpit_default+0x84>)
 8001a34:	7853      	ldrb	r3, [r2, #1]
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, leuchten_out.Ruechwarn);			// Fehlermeldung fuer Ruecklichtwarnung einschalten
 8001a3c:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <cockpit_default+0x84>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	4813      	ldr	r0, [pc, #76]	; (8001a98 <cockpit_default+0x88>)
 8001a4c:	f003 fb58 	bl	8005100 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WISCHWARNUNG_GPIO_Port, WISCHWARNUNG_Pin, leuchten_out.Wischwarn);			// Fehlermeldung fuer Wischwasserwarnung einschalten
 8001a50:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <cockpit_default+0x84>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a60:	480e      	ldr	r0, [pc, #56]	; (8001a9c <cockpit_default+0x8c>)
 8001a62:	f003 fb4d 	bl	8005100 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BREMSWARNUNG_GPIO_Port, BREMSWARNUNG_Pin, leuchten_out.Bremswarn);			// Fehlermeldung fuer Bremslichtwarnung einschalten
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <cockpit_default+0x84>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	461a      	mov	r2, r3
 8001a72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a76:	4809      	ldr	r0, [pc, #36]	; (8001a9c <cockpit_default+0x8c>)
 8001a78:	f003 fb42 	bl	8005100 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OELDRUCK_GPIO_Port, OELDRUCK_Pin, leuchten_out.Oeldruck);						// Fehlermeldung fuer Oeldruckwarnung einschalten
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <cockpit_default+0x84>)
 8001a7e:	785b      	ldrb	r3, [r3, #1]
 8001a80:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	461a      	mov	r2, r3
 8001a88:	2104      	movs	r1, #4
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <cockpit_default+0x90>)
 8001a8c:	f003 fb38 	bl	8005100 <HAL_GPIO_WritePin>
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000050 	.word	0x20000050
 8001a98:	40020c00 	.word	0x40020c00
 8001a9c:	40021800 	.word	0x40021800
 8001aa0:	40021400 	.word	0x40021400

08001aa4 <testSDC>:
//----------------------------------------------------------------------

// Testen der Spannung am Shutdown-Circuit, Signal 1 = offen, Signal = 0 geschlossen
//----------------------------------------------------------------------
void testSDC(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, GPIO_PIN_SET);					// Einschalten von Shutdown-Circuit zum testen
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aae:	4811      	ldr	r0, [pc, #68]	; (8001af4 <testSDC+0x50>)
 8001ab0:	f003 fb26 	bl	8005100 <HAL_GPIO_WritePin>
	HAL_Delay(100);																					// Wartezeit zum setzen
 8001ab4:	2064      	movs	r0, #100	; 0x64
 8001ab6:	f001 fca3 	bl	8003400 <HAL_Delay>
	if (HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin) == 1)								// Einlesen von SDC0 Eingang
 8001aba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001abe:	480d      	ldr	r0, [pc, #52]	; (8001af4 <testSDC+0x50>)
 8001ac0:	f003 fb06 	bl	80050d0 <HAL_GPIO_ReadPin>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d103      	bne.n	8001ad2 <testSDC+0x2e>
	{
#ifndef DEBUG_SDC
		software_error(ERROR_SDC_SPANNUNG);															// Sollte Sicherung kaputt oder Kurzschluss, dann Fehlerausgeben
#else
#warning Das Abschalten des Softwarefehlers kann unter Umstaenden zu Beschaedigung der HW fuehren.
		software_error_debug(ERROR_SDC_SPANNUNG);													// Errorfunktion stoppt Programm nicht
 8001aca:	2003      	movs	r0, #3
 8001acc:	f7ff fc0e 	bl	80012ec <software_error_debug>
 8001ad0:	e004      	b.n	8001adc <testSDC+0x38>
#endif
	}
	else
	{
	  	sdc_in.SDC12V = 1;																			// SDC Spannungsversorgung OK
 8001ad2:	4a09      	ldr	r2, [pc, #36]	; (8001af8 <testSDC+0x54>)
 8001ad4:	7813      	ldrb	r3, [r2, #0]
 8001ad6:	f043 0320 	orr.w	r3, r3, #32
 8001ada:	7013      	strb	r3, [r2, #0]
	}
	HAL_Delay(100);																					// Wartezeit zum setzen
 8001adc:	2064      	movs	r0, #100	; 0x64
 8001ade:	f001 fc8f 	bl	8003400 <HAL_Delay>
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, GPIO_PIN_RESET);					// Auschalten von Shutdown-Circuit
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <testSDC+0x50>)
 8001aea:	f003 fb09 	bl	8005100 <HAL_GPIO_WritePin>
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000
 8001af8:	20000040 	.word	0x20000040

08001afc <readTrottle>:
//----------------------------------------------------------------------

// Gaspedal auswerten
//----------------------------------------------------------------------
uint16_t readTrottle(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
	// Variablen anlegen
	uint16_t ADC_Gas = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	80fb      	strh	r3, [r7, #6]

	// Pruefen ob Variable Anlasser aktiv ist
	if (sdc_in.Anlasser == 1)												// Nur aktiv, wenn KL15 an und Anlasser einmal betaetigt.
 8001b06:	4b34      	ldr	r3, [pc, #208]	; (8001bd8 <readTrottle+0xdc>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d05c      	beq.n	8001bce <readTrottle+0xd2>
	{
		// Gaspedal einlesen
		ADC_Gas = ADC_Gaspedal();
 8001b14:	f7ff f938 	bl	8000d88 <ADC_Gaspedal>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	80fb      	strh	r3, [r7, #6]

		// Pruefen ob Kupplung getreten wurde
		if (system_in.Kupplung == 1)										// Wenn Kupplung nicht getreten wurde == 1
 8001b1c:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <readTrottle+0xe0>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	f003 0310 	and.w	r3, r3, #16
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d04f      	beq.n	8001bca <readTrottle+0xce>
		{
			// Wenn Leerlauf und Kickdown aktiv Plausibilitaetsfehler
			if ((system_in.Leerlauf == 1) && (system_in.Kickdown == 1))
 8001b2a:	4b2c      	ldr	r3, [pc, #176]	; (8001bdc <readTrottle+0xe0>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00e      	beq.n	8001b56 <readTrottle+0x5a>
 8001b38:	4b28      	ldr	r3, [pc, #160]	; (8001bdc <readTrottle+0xe0>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d007      	beq.n	8001b56 <readTrottle+0x5a>
			{
				// Fehlermeldung auf Uart ausgeben
#define TROTTLE_INVALID				"Error_Gaspedal_1 Plausibilitaetsfehler: Kickdown und Leerlauf"
				uartTransmit(TROTTLE_INVALID, sizeof(TROTTLE_INVALID));
 8001b46:	213e      	movs	r1, #62	; 0x3e
 8001b48:	4825      	ldr	r0, [pc, #148]	; (8001be0 <readTrottle+0xe4>)
 8001b4a:	f7fe fe39 	bl	80007c0 <uartTransmit>
				// Gaspedal invalide
				software_error(ERROR_GASPEDAL);
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f7ff fb7c 	bl	800124c <software_error>
 8001b54:	e03b      	b.n	8001bce <readTrottle+0xd2>
			}
			// Threshold Wert vergleichen / Threshold Wert >= THRESHOLD und Leerlauf aktiv
			else if ((system_in.Leerlauf == 1) && (ADC_Gas >= GAS_THRESHOLD))
 8001b56:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <readTrottle+0xe0>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d008      	beq.n	8001b76 <readTrottle+0x7a>
 8001b64:	88fb      	ldrh	r3, [r7, #6]
 8001b66:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001b6a:	d304      	bcc.n	8001b76 <readTrottle+0x7a>
			{
				// Wenn Wert groesser THRESHOLD ist, dann THRESHOLD vom ADC-Wert abziehen
				ADC_Gas -= GAS_THRESHOLD;
 8001b6c:	88fb      	ldrh	r3, [r7, #6]
 8001b6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b72:	80fb      	strh	r3, [r7, #6]
 8001b74:	e02b      	b.n	8001bce <readTrottle+0xd2>
			}
			// Threshold Wert vergleichen / Threshold Wert < THRESHOLD und Leerlauf aktiv
			else if ((system_in.Leerlauf == 1) && (ADC_Gas < GAS_THRESHOLD))
 8001b76:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <readTrottle+0xe0>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d006      	beq.n	8001b92 <readTrottle+0x96>
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001b8a:	d202      	bcs.n	8001b92 <readTrottle+0x96>
			{
				// Wenn der Wert kleine als THRESHOLD ist, dann ADC ignorieren, alle Werte sind 0
				ADC_Gas = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	80fb      	strh	r3, [r7, #6]
 8001b90:	e01d      	b.n	8001bce <readTrottle+0xd2>
			}
			// Threshold Wert vergleichen / Threshold Wert < THRESHOLD und Kickdown aktiv
			else if ((system_in.Kickdown == 1) && (ADC_Gas < (GAS_MAX_ADC - GAS_THRESHOLD)))
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <readTrottle+0xe0>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d004      	beq.n	8001baa <readTrottle+0xae>
 8001ba0:	88fb      	ldrh	r3, [r7, #6]
 8001ba2:	f640 62d2 	movw	r2, #3794	; 0xed2
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d911      	bls.n	8001bce <readTrottle+0xd2>
			{
				// Wenn Wert kleiner THRESHOLD ist

			}
			// Threshold Wert vergleichen / Threshold Wert > THRESHOLD und Kickdown aktiv
			else if ((system_in.Kickdown == 1) && (ADC_Gas >= (GAS_MAX_ADC - GAS_THRESHOLD)))
 8001baa:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <readTrottle+0xe0>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00a      	beq.n	8001bce <readTrottle+0xd2>
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	f640 62d2 	movw	r2, #3794	; 0xed2
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d905      	bls.n	8001bce <readTrottle+0xd2>
			{
				// Wenn Wert gleich THRESHOLD ist
				ADC_Gas = GAS_MAX_ADC;
 8001bc2:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001bc6:	80fb      	strh	r3, [r7, #6]
 8001bc8:	e001      	b.n	8001bce <readTrottle+0xd2>
		}
		// Wenn Kupplung getreten == 0
		else
		{
			// Wenn Kupplung oder Bremse getreten
			ADC_Gas = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	80fb      	strh	r3, [r7, #6]
		}
	}

	return ADC_Gas;
 8001bce:	88fb      	ldrh	r3, [r7, #6]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000040 	.word	0x20000040
 8001bdc:	2000003c 	.word	0x2000003c
 8001be0:	08008654 	.word	0x08008654

08001be4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bea:	463b      	mov	r3, r7
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001bf6:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001bf8:	4a21      	ldr	r2, [pc, #132]	; (8001c80 <MX_ADC1_Init+0x9c>)
 8001bfa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001bfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c0a:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c16:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c1e:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c26:	4a17      	ldr	r2, [pc, #92]	; (8001c84 <MX_ADC1_Init+0xa0>)
 8001c28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c2a:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c3e:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c44:	480d      	ldr	r0, [pc, #52]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c46:	f001 fc47 	bl	80034d8 <HAL_ADC_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001c50:	f001 f9ae 	bl	8002fb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001c54:	230e      	movs	r3, #14
 8001c56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c60:	463b      	mov	r3, r7
 8001c62:	4619      	mov	r1, r3
 8001c64:	4805      	ldr	r0, [pc, #20]	; (8001c7c <MX_ADC1_Init+0x98>)
 8001c66:	f001 fe15 	bl	8003894 <HAL_ADC_ConfigChannel>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001c70:	f001 f99e 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000058 	.word	0x20000058
 8001c80:	40012000 	.word	0x40012000
 8001c84:	0f000001 	.word	0x0f000001

08001c88 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08c      	sub	sp, #48	; 0x30
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a2d      	ldr	r2, [pc, #180]	; (8001d5c <HAL_ADC_MspInit+0xd4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d153      	bne.n	8001d52 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001caa:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <HAL_ADC_MspInit+0xd8>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	4a2c      	ldr	r2, [pc, #176]	; (8001d60 <HAL_ADC_MspInit+0xd8>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb6:	4b2a      	ldr	r3, [pc, #168]	; (8001d60 <HAL_ADC_MspInit+0xd8>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbe:	61bb      	str	r3, [r7, #24]
 8001cc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc2:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <HAL_ADC_MspInit+0xd8>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a26      	ldr	r2, [pc, #152]	; (8001d60 <HAL_ADC_MspInit+0xd8>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <HAL_ADC_MspInit+0xd8>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cda:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <HAL_ADC_MspInit+0xd8>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a20      	ldr	r2, [pc, #128]	; (8001d60 <HAL_ADC_MspInit+0xd8>)
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <HAL_ADC_MspInit+0xd8>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <HAL_ADC_MspInit+0xd8>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a1a      	ldr	r2, [pc, #104]	; (8001d60 <HAL_ADC_MspInit+0xd8>)
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <HAL_ADC_MspInit+0xd8>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SENSE_KL15_Pin|SENSE_KUEHLWASSER_Pin|SENSE_KLIMA_FLAP_Pin|SENSE_GAS_Pin
 8001d0a:	23f8      	movs	r3, #248	; 0xf8
 8001d0c:	61fb      	str	r3, [r7, #28]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d16:	f107 031c 	add.w	r3, r7, #28
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4811      	ldr	r0, [pc, #68]	; (8001d64 <HAL_ADC_MspInit+0xdc>)
 8001d1e:	f003 f82b 	bl	8004d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_DRUCK_Pin|SENSE_DRUCK_TEMP_Pin;
 8001d22:	2330      	movs	r3, #48	; 0x30
 8001d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d26:	2303      	movs	r3, #3
 8001d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d2e:	f107 031c 	add.w	r3, r7, #28
 8001d32:	4619      	mov	r1, r3
 8001d34:	480c      	ldr	r0, [pc, #48]	; (8001d68 <HAL_ADC_MspInit+0xe0>)
 8001d36:	f003 f81f 	bl	8004d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_RETURN_Pin|SENSE_INFO_Pin;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d46:	f107 031c 	add.w	r3, r7, #28
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4807      	ldr	r0, [pc, #28]	; (8001d6c <HAL_ADC_MspInit+0xe4>)
 8001d4e:	f003 f813 	bl	8004d78 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001d52:	bf00      	nop
 8001d54:	3730      	adds	r7, #48	; 0x30
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40012000 	.word	0x40012000
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40020000 	.word	0x40020000
 8001d68:	40020800 	.word	0x40020800
 8001d6c:	40020400 	.word	0x40020400

08001d70 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001d74:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <MX_CAN1_Init+0x64>)
 8001d76:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <MX_CAN1_Init+0x68>)
 8001d78:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 30;
 8001d7a:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <MX_CAN1_Init+0x64>)
 8001d7c:	221e      	movs	r2, #30
 8001d7e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d80:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <MX_CAN1_Init+0x64>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <MX_CAN1_Init+0x64>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <MX_CAN1_Init+0x64>)
 8001d8e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001d92:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <MX_CAN1_Init+0x64>)
 8001d96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d9a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001d9c:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <MX_CAN1_Init+0x64>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001da2:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <MX_CAN1_Init+0x64>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <MX_CAN1_Init+0x64>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <MX_CAN1_Init+0x64>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001db4:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <MX_CAN1_Init+0x64>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <MX_CAN1_Init+0x64>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001dc0:	4804      	ldr	r0, [pc, #16]	; (8001dd4 <MX_CAN1_Init+0x64>)
 8001dc2:	f001 ffb7 	bl	8003d34 <HAL_CAN_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001dcc:	f001 f8f0 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	200000c8 	.word	0x200000c8
 8001dd8:	40006400 	.word	0x40006400

08001ddc <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001de0:	4b33      	ldr	r3, [pc, #204]	; (8001eb0 <MX_CAN3_Init+0xd4>)
 8001de2:	4a34      	ldr	r2, [pc, #208]	; (8001eb4 <MX_CAN3_Init+0xd8>)
 8001de4:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001de6:	4b32      	ldr	r3, [pc, #200]	; (8001eb0 <MX_CAN3_Init+0xd4>)
 8001de8:	2206      	movs	r2, #6
 8001dea:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001dec:	4b30      	ldr	r3, [pc, #192]	; (8001eb0 <MX_CAN3_Init+0xd4>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001df2:	4b2f      	ldr	r3, [pc, #188]	; (8001eb0 <MX_CAN3_Init+0xd4>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001df8:	4b2d      	ldr	r3, [pc, #180]	; (8001eb0 <MX_CAN3_Init+0xd4>)
 8001dfa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001dfe:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001e00:	4b2b      	ldr	r3, [pc, #172]	; (8001eb0 <MX_CAN3_Init+0xd4>)
 8001e02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e06:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001e08:	4b29      	ldr	r3, [pc, #164]	; (8001eb0 <MX_CAN3_Init+0xd4>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001e0e:	4b28      	ldr	r3, [pc, #160]	; (8001eb0 <MX_CAN3_Init+0xd4>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001e14:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <MX_CAN3_Init+0xd4>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001e1a:	4b25      	ldr	r3, [pc, #148]	; (8001eb0 <MX_CAN3_Init+0xd4>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001e20:	4b23      	ldr	r3, [pc, #140]	; (8001eb0 <MX_CAN3_Init+0xd4>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001e26:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <MX_CAN3_Init+0xd4>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001e2c:	4820      	ldr	r0, [pc, #128]	; (8001eb0 <MX_CAN3_Init+0xd4>)
 8001e2e:	f001 ff81 	bl	8003d34 <HAL_CAN_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001e38:	f001 f8ba 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */
	// Starte CAN Bus
	if((HAL_CAN_Start(&hcan3)) != HAL_OK)
 8001e3c:	481c      	ldr	r0, [pc, #112]	; (8001eb0 <MX_CAN3_Init+0xd4>)
 8001e3e:	f002 f961 	bl	8004104 <HAL_CAN_Start>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_CAN3_Init+0x70>
	{
		// Fehler beim Starten des CAN-Busses
		Error_Handler();
 8001e48:	f001 f8b2 	bl	8002fb0 <Error_Handler>
	}

	// Aktiviere Interrupts fuer CAN Bus
	if((HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_FULL)) != HAL_OK)
 8001e4c:	2104      	movs	r1, #4
 8001e4e:	4818      	ldr	r0, [pc, #96]	; (8001eb0 <MX_CAN3_Init+0xd4>)
 8001e50:	f002 fba2 	bl	8004598 <HAL_CAN_ActivateNotification>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_CAN3_Init+0x82>
	{
		// Fehler in der Initialisierung des CAN Interrupts
		Error_Handler();
 8001e5a:	f001 f8a9 	bl	8002fb0 <Error_Handler>
	}

	// Filter Bank initialisieren um Daten zu empfangen
	// Akzeptiere alle CAN-Pakete
	sFilterConfig.FilterBank = 0;
 8001e5e:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <MX_CAN3_Init+0xdc>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001e64:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <MX_CAN3_Init+0xdc>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001e6a:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <MX_CAN3_Init+0xdc>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0111 << 5;
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <MX_CAN3_Init+0xdc>)
 8001e72:	f242 2220 	movw	r2, #8736	; 0x2220
 8001e76:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0;
 8001e78:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <MX_CAN3_Init+0xdc>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0111 << 5;
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <MX_CAN3_Init+0xdc>)
 8001e80:	f242 2220 	movw	r2, #8736	; 0x2220
 8001e84:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0;
 8001e86:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <MX_CAN3_Init+0xdc>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = 0;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <MX_CAN3_Init+0xdc>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <MX_CAN3_Init+0xdc>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	621a      	str	r2, [r3, #32]

	// Filter Bank schreiben
	if((HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 8001e98:	4907      	ldr	r1, [pc, #28]	; (8001eb8 <MX_CAN3_Init+0xdc>)
 8001e9a:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <MX_CAN3_Init+0xd4>)
 8001e9c:	f002 f846 	bl	8003f2c <HAL_CAN_ConfigFilter>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_CAN3_Init+0xce>
	{
		// Fehler beim konfigurieren der Filterbank fuer den CAN-Bus
		Error_Handler();
 8001ea6:	f001 f883 	bl	8002fb0 <Error_Handler>
	}

  /* USER CODE END CAN3_Init 2 */

}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200000f0 	.word	0x200000f0
 8001eb4:	40003400 	.word	0x40003400
 8001eb8:	200000a0 	.word	0x200000a0

08001ebc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08c      	sub	sp, #48	; 0x30
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 031c 	add.w	r3, r7, #28
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a32      	ldr	r2, [pc, #200]	; (8001fa4 <HAL_CAN_MspInit+0xe8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d128      	bne.n	8001f30 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001ede:	4b32      	ldr	r3, [pc, #200]	; (8001fa8 <HAL_CAN_MspInit+0xec>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a31      	ldr	r2, [pc, #196]	; (8001fa8 <HAL_CAN_MspInit+0xec>)
 8001ee4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	4b2f      	ldr	r3, [pc, #188]	; (8001fa8 <HAL_CAN_MspInit+0xec>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef6:	4b2c      	ldr	r3, [pc, #176]	; (8001fa8 <HAL_CAN_MspInit+0xec>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	4a2b      	ldr	r2, [pc, #172]	; (8001fa8 <HAL_CAN_MspInit+0xec>)
 8001efc:	f043 0308 	orr.w	r3, r3, #8
 8001f00:	6313      	str	r3, [r2, #48]	; 0x30
 8001f02:	4b29      	ldr	r3, [pc, #164]	; (8001fa8 <HAL_CAN_MspInit+0xec>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001f1e:	2309      	movs	r3, #9
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f22:	f107 031c 	add.w	r3, r7, #28
 8001f26:	4619      	mov	r1, r3
 8001f28:	4820      	ldr	r0, [pc, #128]	; (8001fac <HAL_CAN_MspInit+0xf0>)
 8001f2a:	f002 ff25 	bl	8004d78 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001f2e:	e035      	b.n	8001f9c <HAL_CAN_MspInit+0xe0>
  else if(canHandle->Instance==CAN3)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a1e      	ldr	r2, [pc, #120]	; (8001fb0 <HAL_CAN_MspInit+0xf4>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d130      	bne.n	8001f9c <HAL_CAN_MspInit+0xe0>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001f3a:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <HAL_CAN_MspInit+0xec>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	4a1a      	ldr	r2, [pc, #104]	; (8001fa8 <HAL_CAN_MspInit+0xec>)
 8001f40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f44:	6413      	str	r3, [r2, #64]	; 0x40
 8001f46:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <HAL_CAN_MspInit+0xec>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_CAN_MspInit+0xec>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a14      	ldr	r2, [pc, #80]	; (8001fa8 <HAL_CAN_MspInit+0xec>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_CAN_MspInit+0xec>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ACAN_RX_Pin|ACAN_TX_Pin;
 8001f6a:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001f7c:	230b      	movs	r3, #11
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f80:	f107 031c 	add.w	r3, r7, #28
 8001f84:	4619      	mov	r1, r3
 8001f86:	480b      	ldr	r0, [pc, #44]	; (8001fb4 <HAL_CAN_MspInit+0xf8>)
 8001f88:	f002 fef6 	bl	8004d78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2100      	movs	r1, #0
 8001f90:	2069      	movs	r0, #105	; 0x69
 8001f92:	f002 fe28 	bl	8004be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 8001f96:	2069      	movs	r0, #105	; 0x69
 8001f98:	f002 fe41 	bl	8004c1e <HAL_NVIC_EnableIRQ>
}
 8001f9c:	bf00      	nop
 8001f9e:	3730      	adds	r7, #48	; 0x30
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40006400 	.word	0x40006400
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40020c00 	.word	0x40020c00
 8001fb0:	40003400 	.word	0x40003400
 8001fb4:	40020000 	.word	0x40020000

08001fb8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08e      	sub	sp, #56	; 0x38
 8001fbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	60da      	str	r2, [r3, #12]
 8001fcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fce:	4bb6      	ldr	r3, [pc, #728]	; (80022a8 <MX_GPIO_Init+0x2f0>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4ab5      	ldr	r2, [pc, #724]	; (80022a8 <MX_GPIO_Init+0x2f0>)
 8001fd4:	f043 0310 	orr.w	r3, r3, #16
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4bb3      	ldr	r3, [pc, #716]	; (80022a8 <MX_GPIO_Init+0x2f0>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	623b      	str	r3, [r7, #32]
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe6:	4bb0      	ldr	r3, [pc, #704]	; (80022a8 <MX_GPIO_Init+0x2f0>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4aaf      	ldr	r2, [pc, #700]	; (80022a8 <MX_GPIO_Init+0x2f0>)
 8001fec:	f043 0304 	orr.w	r3, r3, #4
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4bad      	ldr	r3, [pc, #692]	; (80022a8 <MX_GPIO_Init+0x2f0>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	61fb      	str	r3, [r7, #28]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ffe:	4baa      	ldr	r3, [pc, #680]	; (80022a8 <MX_GPIO_Init+0x2f0>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4aa9      	ldr	r2, [pc, #676]	; (80022a8 <MX_GPIO_Init+0x2f0>)
 8002004:	f043 0320 	orr.w	r3, r3, #32
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4ba7      	ldr	r3, [pc, #668]	; (80022a8 <MX_GPIO_Init+0x2f0>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0320 	and.w	r3, r3, #32
 8002012:	61bb      	str	r3, [r7, #24]
 8002014:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002016:	4ba4      	ldr	r3, [pc, #656]	; (80022a8 <MX_GPIO_Init+0x2f0>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4aa3      	ldr	r2, [pc, #652]	; (80022a8 <MX_GPIO_Init+0x2f0>)
 800201c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4ba1      	ldr	r3, [pc, #644]	; (80022a8 <MX_GPIO_Init+0x2f0>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	4b9e      	ldr	r3, [pc, #632]	; (80022a8 <MX_GPIO_Init+0x2f0>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a9d      	ldr	r2, [pc, #628]	; (80022a8 <MX_GPIO_Init+0x2f0>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b9b      	ldr	r3, [pc, #620]	; (80022a8 <MX_GPIO_Init+0x2f0>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002046:	4b98      	ldr	r3, [pc, #608]	; (80022a8 <MX_GPIO_Init+0x2f0>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a97      	ldr	r2, [pc, #604]	; (80022a8 <MX_GPIO_Init+0x2f0>)
 800204c:	f043 0302 	orr.w	r3, r3, #2
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b95      	ldr	r3, [pc, #596]	; (80022a8 <MX_GPIO_Init+0x2f0>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800205e:	4b92      	ldr	r3, [pc, #584]	; (80022a8 <MX_GPIO_Init+0x2f0>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a91      	ldr	r2, [pc, #580]	; (80022a8 <MX_GPIO_Init+0x2f0>)
 8002064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b8f      	ldr	r3, [pc, #572]	; (80022a8 <MX_GPIO_Init+0x2f0>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002076:	4b8c      	ldr	r3, [pc, #560]	; (80022a8 <MX_GPIO_Init+0x2f0>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a8b      	ldr	r2, [pc, #556]	; (80022a8 <MX_GPIO_Init+0x2f0>)
 800207c:	f043 0308 	orr.w	r3, r3, #8
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b89      	ldr	r3, [pc, #548]	; (80022a8 <MX_GPIO_Init+0x2f0>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	607b      	str	r3, [r7, #4]
 800208c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 800208e:	2200      	movs	r2, #0
 8002090:	f248 0187 	movw	r1, #32903	; 0x8087
 8002094:	4885      	ldr	r0, [pc, #532]	; (80022ac <MX_GPIO_Init+0x2f4>)
 8002096:	f003 f833 	bl	8005100 <HAL_GPIO_WritePin>
                          |DIGITAL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_ON_Pin|WS2812_Pin, GPIO_PIN_RESET);
 800209a:	2200      	movs	r2, #0
 800209c:	f242 0108 	movw	r1, #8200	; 0x2008
 80020a0:	4883      	ldr	r0, [pc, #524]	; (80022b0 <MX_GPIO_Init+0x2f8>)
 80020a2:	f003 f82d 	bl	8005100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 80020a6:	2200      	movs	r2, #0
 80020a8:	f24f 013c 	movw	r1, #61500	; 0xf03c
 80020ac:	4881      	ldr	r0, [pc, #516]	; (80022b4 <MX_GPIO_Init+0x2fc>)
 80020ae:	f003 f827 	bl	8005100 <HAL_GPIO_WritePin>
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 80020b2:	2200      	movs	r2, #0
 80020b4:	f647 0194 	movw	r1, #30868	; 0x7894
 80020b8:	487f      	ldr	r0, [pc, #508]	; (80022b8 <MX_GPIO_Init+0x300>)
 80020ba:	f003 f821 	bl	8005100 <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 80020be:	2200      	movs	r2, #0
 80020c0:	f64e 2188 	movw	r1, #60040	; 0xea88
 80020c4:	487d      	ldr	r0, [pc, #500]	; (80022bc <MX_GPIO_Init+0x304>)
 80020c6:	f003 f81b 	bl	8005100 <HAL_GPIO_WritePin>
                          |NIVEAU_OUT_Pin|LADELEUCHTE_Pin|RUECKWARNUNG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 80020ca:	2200      	movs	r2, #0
 80020cc:	f64e 610c 	movw	r1, #60940	; 0xee0c
 80020d0:	487b      	ldr	r0, [pc, #492]	; (80022c0 <MX_GPIO_Init+0x308>)
 80020d2:	f003 f815 	bl	8005100 <HAL_GPIO_WritePin>
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_RESET);
 80020d6:	2200      	movs	r2, #0
 80020d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020dc:	4879      	ldr	r0, [pc, #484]	; (80022c4 <MX_GPIO_Init+0x30c>)
 80020de:	f003 f80f 	bl	8005100 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 80020e2:	f248 0387 	movw	r3, #32903	; 0x8087
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
                          |DIGITAL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e8:	2301      	movs	r3, #1
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f8:	4619      	mov	r1, r3
 80020fa:	486c      	ldr	r0, [pc, #432]	; (80022ac <MX_GPIO_Init+0x2f4>)
 80020fc:	f002 fe3c 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ECO_Pin|BC_DOWN_IN_Pin|DURCHFLUSS_Pin|BUTTON2_Pin
 8002100:	f647 7378 	movw	r3, #32632	; 0x7f78
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
                          |KICKDOWN_Pin|LEERLAUF_Pin|KUPPLUNG_NO_Pin|BREMSE_NC_Pin
                          |BREMSE_NO_Pin|SENSE_SDC_AKKU_Pin|SENSE_SDC_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002106:	2300      	movs	r3, #0
 8002108:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800210e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002112:	4619      	mov	r1, r3
 8002114:	4865      	ldr	r0, [pc, #404]	; (80022ac <MX_GPIO_Init+0x2f4>)
 8002116:	f002 fe2f 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 800211a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002120:	2301      	movs	r3, #1
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002128:	2300      	movs	r3, #0
 800212a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 800212c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002130:	4619      	mov	r1, r3
 8002132:	485f      	ldr	r0, [pc, #380]	; (80022b0 <MX_GPIO_Init+0x2f8>)
 8002134:	f002 fe20 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8002138:	f64d 7347 	movw	r3, #57159	; 0xdf47
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|SD_SW_Pin|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800213e:	2303      	movs	r3, #3
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214a:	4619      	mov	r1, r3
 800214c:	4858      	ldr	r0, [pc, #352]	; (80022b0 <MX_GPIO_Init+0x2f8>)
 800214e:	f002 fe13 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|ECON_Pin|RECUPERATION_Pin;
 8002152:	f640 0303 	movw	r3, #2051	; 0x803
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002158:	2300      	movs	r3, #0
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002164:	4619      	mov	r1, r3
 8002166:	4853      	ldr	r0, [pc, #332]	; (80022b4 <MX_GPIO_Init+0x2fc>)
 8002168:	f002 fe06 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 800216c:	f24f 033c 	movw	r3, #61500	; 0xf03c
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002172:	2301      	movs	r3, #1
 8002174:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	2300      	movs	r3, #0
 800217c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800217e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002182:	4619      	mov	r1, r3
 8002184:	484b      	ldr	r0, [pc, #300]	; (80022b4 <MX_GPIO_Init+0x2fc>)
 8002186:	f002 fdf7 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PF10 */
  GPIO_InitStruct.Pin = SPI5_CS_Pin|SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin
 800218a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002190:	2303      	movs	r3, #3
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800219c:	4619      	mov	r1, r3
 800219e:	4845      	ldr	r0, [pc, #276]	; (80022b4 <MX_GPIO_Init+0x2fc>)
 80021a0:	f002 fdea 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS2812_Pin;
 80021a4:	2308      	movs	r3, #8
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a8:	2301      	movs	r3, #1
 80021aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021b0:	2302      	movs	r3, #2
 80021b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 80021b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b8:	4619      	mov	r1, r3
 80021ba:	483d      	ldr	r0, [pc, #244]	; (80022b0 <MX_GPIO_Init+0x2f8>)
 80021bc:	f002 fddc 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|EMERGENCY_RUN_Pin|HW_WAKE_Pin|OUTA_Pin
 80021c0:	f640 6307 	movw	r3, #3591	; 0xe07
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTB_Pin|BC_UP_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021c6:	2300      	movs	r3, #0
 80021c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d2:	4619      	mov	r1, r3
 80021d4:	483b      	ldr	r0, [pc, #236]	; (80022c4 <MX_GPIO_Init+0x30c>)
 80021d6:	f002 fdcf 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 80021da:	f647 0394 	movw	r3, #30868	; 0x7894
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e0:	2301      	movs	r3, #1
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e8:	2300      	movs	r3, #0
 80021ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f0:	4619      	mov	r1, r3
 80021f2:	4831      	ldr	r0, [pc, #196]	; (80022b8 <MX_GPIO_Init+0x300>)
 80021f4:	f002 fdc0 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DCDC_INSTRUCTION_Pin|DCDC_FAULT_Pin|ASR_IN1_Pin|GRA1_Pin
 80021f8:	f241 13f3 	movw	r3, #4595	; 0x11f3
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GRA2_Pin|GRA3_Pin|GRA4_Pin|BC_RESET_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021fe:	2300      	movs	r3, #0
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220a:	4619      	mov	r1, r3
 800220c:	482c      	ldr	r0, [pc, #176]	; (80022c0 <MX_GPIO_Init+0x308>)
 800220e:	f002 fdb3 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSE_SDC_BTB_Pin|BAMOCAR_IN2_Pin;
 8002212:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002218:	2300      	movs	r3, #0
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002224:	4619      	mov	r1, r3
 8002226:	4824      	ldr	r0, [pc, #144]	; (80022b8 <MX_GPIO_Init+0x300>)
 8002228:	f002 fda6 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KL15_Pin|ANLASSER_Pin|BAMOCAR_IN1_Pin|ASR_IN2_Pin;
 800222c:	f241 5310 	movw	r3, #5392	; 0x1510
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002232:	2300      	movs	r3, #0
 8002234:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800223a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223e:	4619      	mov	r1, r3
 8002240:	481e      	ldr	r0, [pc, #120]	; (80022bc <MX_GPIO_Init+0x304>)
 8002242:	f002 fd99 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 8002246:	f64e 2388 	movw	r3, #60040	; 0xea88
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
                          |NIVEAU_OUT_Pin|LADELEUCHTE_Pin|RUECKWARNUNG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224c:	2301      	movs	r3, #1
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002254:	2300      	movs	r3, #0
 8002256:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225c:	4619      	mov	r1, r3
 800225e:	4817      	ldr	r0, [pc, #92]	; (80022bc <MX_GPIO_Init+0x304>)
 8002260:	f002 fd8a 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 8002264:	f64e 630c 	movw	r3, #60940	; 0xee0c
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226a:	2301      	movs	r3, #1
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800227a:	4619      	mov	r1, r3
 800227c:	4810      	ldr	r0, [pc, #64]	; (80022c0 <MX_GPIO_Init+0x308>)
 800227e:	f002 fd7b 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002286:	2300      	movs	r3, #0
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 800228e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002292:	4619      	mov	r1, r3
 8002294:	4806      	ldr	r0, [pc, #24]	; (80022b0 <MX_GPIO_Init+0x2f8>)
 8002296:	f002 fd6f 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OELSTAND_TEMP_Pin;
 800229a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a0:	2301      	movs	r3, #1
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	e00f      	b.n	80022c8 <MX_GPIO_Init+0x310>
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40020800 	.word	0x40020800
 80022b4:	40021400 	.word	0x40021400
 80022b8:	40020400 	.word	0x40020400
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021800 	.word	0x40021800
 80022c4:	40020000 	.word	0x40020000
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ca:	2300      	movs	r3, #0
 80022cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OELSTAND_TEMP_GPIO_Port, &GPIO_InitStruct);
 80022ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d2:	4619      	mov	r1, r3
 80022d4:	480f      	ldr	r0, [pc, #60]	; (8002314 <MX_GPIO_Init+0x35c>)
 80022d6:	f002 fd4f 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CMD_Pin;
 80022da:	2304      	movs	r3, #4
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022de:	2303      	movs	r3, #3
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 80022e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ea:	4619      	mov	r1, r3
 80022ec:	480a      	ldr	r0, [pc, #40]	; (8002318 <MX_GPIO_Init+0x360>)
 80022ee:	f002 fd43 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CAN2_TX_Pin|CAN2_RX_Pin|I2C1_SCL_Pin|I2C1_SDA_Pin;
 80022f2:	f44f 7358 	mov.w	r3, #864	; 0x360
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022f8:	2303      	movs	r3, #3
 80022fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002304:	4619      	mov	r1, r3
 8002306:	4805      	ldr	r0, [pc, #20]	; (800231c <MX_GPIO_Init+0x364>)
 8002308:	f002 fd36 	bl	8004d78 <HAL_GPIO_Init>

}
 800230c:	bf00      	nop
 800230e:	3738      	adds	r7, #56	; 0x38
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40020000 	.word	0x40020000
 8002318:	40020c00 	.word	0x40020c00
 800231c:	40020400 	.word	0x40020400

08002320 <__NVIC_SystemReset>:
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002324:	f3bf 8f4f 	dsb	sy
}
 8002328:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <__NVIC_SystemReset+0x24>)
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002332:	4904      	ldr	r1, [pc, #16]	; (8002344 <__NVIC_SystemReset+0x24>)
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <__NVIC_SystemReset+0x28>)
 8002336:	4313      	orrs	r3, r2
 8002338:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800233a:	f3bf 8f4f 	dsb	sy
}
 800233e:	bf00      	nop
    __NOP();
 8002340:	bf00      	nop
 8002342:	e7fd      	b.n	8002340 <__NVIC_SystemReset+0x20>
 8002344:	e000ed00 	.word	0xe000ed00
 8002348:	05fa0004 	.word	0x05fa0004

0800234c <ITM_SendChar>:
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002354:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002358:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d013      	beq.n	800238c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002364:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002368:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800236c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00b      	beq.n	800238c <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 8002374:	e000      	b.n	8002378 <ITM_SendChar+0x2c>
      __NOP();
 8002376:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002378:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f9      	beq.n	8002376 <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002382:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	701a      	strb	r2, [r3, #0]
  return (ch);
 800238c:	687b      	ldr	r3, [r7, #4]
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800239c:	b5b0      	push	{r4, r5, r7, lr}
 800239e:	b0c6      	sub	sp, #280	; 0x118
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t ADC_VAL[10] = {0};
 80023a2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	605a      	str	r2, [r3, #4]
 80023ac:	609a      	str	r2, [r3, #8]
 80023ae:	60da      	str	r2, [r3, #12]
 80023b0:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023b2:	f000 ffc8 	bl	8003346 <HAL_Init>

  /* USER CODE BEGIN Init */

	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[6] = {0}, InData[6] = {0}, AnalogData[8] = {0}, TempData[8] = {0};
 80023b6:	2300      	movs	r3, #0
 80023b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80023bc:	2300      	movs	r3, #0
 80023be:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
 80023c2:	2300      	movs	r3, #0
 80023c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80023c8:	2300      	movs	r3, #0
 80023ca:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
 80023ce:	2300      	movs	r3, #0
 80023d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80023d4:	2300      	movs	r3, #0
 80023d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80023da:	2300      	movs	r3, #0
 80023dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80023e0:	2300      	movs	r3, #0
 80023e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	uint8_t status, tmp[4], task = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint16_t count = 0, gas_adc = 0, gas_mean = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
 80023f2:	2300      	movs	r3, #0
 80023f4:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  	uint32_t lastcan = 0, lastsendcan = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002404:	2300      	movs	r3, #0
 8002406:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

  	// Erstelle Can-Nachrichten
    // Sendenachricht erstellen
  	CAN_TxHeaderTypeDef TxMessage = {0x123, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 800240a:	4bb4      	ldr	r3, [pc, #720]	; (80026dc <main+0x340>)
 800240c:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8002410:	461d      	mov	r5, r3
 8002412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002416:	e895 0003 	ldmia.w	r5, {r0, r1}
 800241a:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet digitale Ausgaenge erstellen
  	CAN_TxHeaderTypeDef TxOutput = {MOTOR_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 6, DISABLE};
 800241e:	4bb0      	ldr	r3, [pc, #704]	; (80026e0 <main+0x344>)
 8002420:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8002424:	461d      	mov	r5, r3
 8002426:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800242a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800242e:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet digitale Eingaenge erstellen
  	CAN_TxHeaderTypeDef TxInput = {MOTOR_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 6, DISABLE};
 8002432:	4bac      	ldr	r3, [pc, #688]	; (80026e4 <main+0x348>)
 8002434:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8002438:	461d      	mov	r5, r3
 800243a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800243c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800243e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002442:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet Motor1 erstellen
  	CAN_TxHeaderTypeDef TxMotor1 = {MOTOR_CAN_DREHZAHL, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8002446:	4ba8      	ldr	r3, [pc, #672]	; (80026e8 <main+0x34c>)
 8002448:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800244c:	461d      	mov	r5, r3
 800244e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002452:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002456:	e884 0003 	stmia.w	r4, {r0, r1}
  	// Sendenachricht Motorsteuergeraet an Bamocar erstellen
  	CAN_TxHeaderTypeDef TxBamocar = {BAMOCAR_TX_ID, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 800245a:	4ba4      	ldr	r3, [pc, #656]	; (80026ec <main+0x350>)
 800245c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002460:	461d      	mov	r5, r3
 8002462:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002464:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002466:	e895 0003 	ldmia.w	r5, {r0, r1}
 800246a:	e884 0003 	stmia.w	r4, {r0, r1}
  	// Sendenachricht Motorsteuergeraet an Bamocar erstellen
  	CAN_TxHeaderTypeDef TxLenkung = {LENKUNG1_CAN, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 800246e:	4ba0      	ldr	r3, [pc, #640]	; (80026f0 <main+0x354>)
 8002470:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8002474:	461d      	mov	r5, r3
 8002476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800247a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800247e:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet analoge Eingaenge erstellen
  	CAN_TxHeaderTypeDef TxAnalog = {MOTOR_CAN_ANALOG_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8002482:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002486:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800248a:	4a9a      	ldr	r2, [pc, #616]	; (80026f4 <main+0x358>)
 800248c:	461c      	mov	r4, r3
 800248e:	4615      	mov	r5, r2
 8002490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002494:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002498:	e884 0003 	stmia.w	r4, {r0, r1}
  	// Sendenachricht Motorsteuergeraet Temperatur Eingaenge erstellen
  	CAN_TxHeaderTypeDef TxTemperatur = {MOTOR_CAN_TEMPERATUR, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 800249c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80024a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024a4:	4a94      	ldr	r2, [pc, #592]	; (80026f8 <main+0x35c>)
 80024a6:	461c      	mov	r4, r3
 80024a8:	4615      	mov	r5, r2
 80024aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80024b2:	e884 0003 	stmia.w	r4, {r0, r1}

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024b6:	f000 fb9b 	bl	8002bf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024ba:	f7ff fd7d 	bl	8001fb8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80024be:	f000 fe83 	bl	80031c8 <MX_USART2_UART_Init>
  MX_CAN3_Init();
 80024c2:	f7ff fc8b 	bl	8001ddc <MX_CAN3_Init>
  MX_ADC1_Init();
 80024c6:	f7ff fb8d 	bl	8001be4 <MX_ADC1_Init>
  MX_TIM6_Init();
 80024ca:	f000 fe21 	bl	8003110 <MX_TIM6_Init>
  MX_CAN1_Init();
 80024ce:	f7ff fc4f 	bl	8001d70 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  // ITM HCLK
  ITM_SendChar('H');
 80024d2:	2048      	movs	r0, #72	; 0x48
 80024d4:	f7ff ff3a 	bl	800234c <ITM_SendChar>
  ITM_SendChar('a');
 80024d8:	2061      	movs	r0, #97	; 0x61
 80024da:	f7ff ff37 	bl	800234c <ITM_SendChar>
  ITM_SendChar('l');
 80024de:	206c      	movs	r0, #108	; 0x6c
 80024e0:	f7ff ff34 	bl	800234c <ITM_SendChar>
  ITM_SendChar('l');
 80024e4:	206c      	movs	r0, #108	; 0x6c
 80024e6:	f7ff ff31 	bl	800234c <ITM_SendChar>
  ITM_SendChar('o');
 80024ea:	206f      	movs	r0, #111	; 0x6f
 80024ec:	f7ff ff2e 	bl	800234c <ITM_SendChar>
  ITM_SendChar(' ');
 80024f0:	2020      	movs	r0, #32
 80024f2:	f7ff ff2b 	bl	800234c <ITM_SendChar>
  	// Start Timer 6 Interrupt
  	HAL_TIM_Base_Start_IT(&htim6);
 80024f6:	4881      	ldr	r0, [pc, #516]	; (80026fc <main+0x360>)
 80024f8:	f003 ff9a 	bl	8006430 <HAL_TIM_Base_Start_IT>
  	HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer[uart_count], 1);
 80024fc:	4b80      	ldr	r3, [pc, #512]	; (8002700 <main+0x364>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	4b80      	ldr	r3, [pc, #512]	; (8002704 <main+0x368>)
 8002504:	4413      	add	r3, r2
 8002506:	2201      	movs	r2, #1
 8002508:	4619      	mov	r1, r3
 800250a:	487f      	ldr	r0, [pc, #508]	; (8002708 <main+0x36c>)
 800250c:	f004 fb6d 	bl	8006bea <HAL_UART_Receive_IT>

  	// Schreibe Resetquelle auf die Konsole
#ifdef DEBUG
	printResetSource(readResetSource());
 8002510:	f7fe fb50 	bl	8000bb4 <readResetSource>
 8002514:	4603      	mov	r3, r0
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fb9e 	bl	8000c58 <printResetSource>

  	// Teste serielle Schnittstelle
  	#define WILLKOMM_STRING_UART	"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
  	uartTransmit(WILLKOMM_STRING_UART, sizeof(WILLKOMM_STRING_UART));
 800251c:	213a      	movs	r1, #58	; 0x3a
 800251e:	487b      	ldr	r0, [pc, #492]	; (800270c <main+0x370>)
 8002520:	f7fe f94e 	bl	80007c0 <uartTransmit>
	#define VERSION_STRING_UART		"Starting Application "
	uartTransmit(VERSION_STRING_UART, sizeof(VERSION_STRING_UART));
 8002524:	2116      	movs	r1, #22
 8002526:	487a      	ldr	r0, [pc, #488]	; (8002710 <main+0x374>)
 8002528:	f7fe f94a 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(MAJOR, 10);
 800252c:	210a      	movs	r1, #10
 800252e:	2000      	movs	r0, #0
 8002530:	f7fe f95a 	bl	80007e8 <uartTransmitNumber>
	uartTransmit(".", 1);
 8002534:	2101      	movs	r1, #1
 8002536:	4877      	ldr	r0, [pc, #476]	; (8002714 <main+0x378>)
 8002538:	f7fe f942 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(MINOR, 10);
 800253c:	210a      	movs	r1, #10
 800253e:	2000      	movs	r0, #0
 8002540:	f7fe f952 	bl	80007e8 <uartTransmitNumber>
	uartTransmit("\n", 1);
 8002544:	2101      	movs	r1, #1
 8002546:	4874      	ldr	r0, [pc, #464]	; (8002718 <main+0x37c>)
 8002548:	f7fe f93a 	bl	80007c0 <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 800254c:	f7fe fb08 	bl	8000b60 <collectSystemInfo>
#endif

	// Leds Testen
  	testPCB_Leds();
 8002550:	f7ff f9bc 	bl	80018cc <testPCB_Leds>
	testCockpit_Leds();
 8002554:	f7ff f9f8 	bl	8001948 <testCockpit_Leds>

  	// Testen der Versorgungsspannung am Shutdown-Circuit
  	testSDC();
 8002558:	f7ff faa4 	bl	8001aa4 <testSDC>

  	// Alle Fehler Cockpit loeschen
  	cockpit_default();
 800255c:	f7ff fa58 	bl	8001a10 <cockpit_default>
  	// Setze LED Green
  	leuchten_out.GreenLed = 1;
 8002560:	4a6e      	ldr	r2, [pc, #440]	; (800271c <main+0x380>)
 8002562:	7853      	ldrb	r3, [r2, #1]
 8002564:	f043 0310 	orr.w	r3, r3, #16
 8002568:	7053      	strb	r3, [r2, #1]
  	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 800256a:	4b6c      	ldr	r3, [pc, #432]	; (800271c <main+0x380>)
 800256c:	785b      	ldrb	r3, [r3, #1]
 800256e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002572:	b2db      	uxtb	r3, r3
 8002574:	461a      	mov	r2, r3
 8002576:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800257a:	4869      	ldr	r0, [pc, #420]	; (8002720 <main+0x384>)
 800257c:	f002 fdc0 	bl	8005100 <HAL_GPIO_WritePin>

  	// Lese alle Eingaenge
  	readall_inputs();
 8002580:	f7fe ff42 	bl	8001408 <readall_inputs>

    // Sendenachricht 0x123 mit Dummy-Daten fuellen
  	for (uint8_t j = 0; j < 8; j++)
 8002584:	2300      	movs	r3, #0
 8002586:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 800258a:	e00f      	b.n	80025ac <main+0x210>
  		TxData[j] = (j + 1);
 800258c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8002590:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 8002594:	3201      	adds	r2, #1
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800259c:	443b      	add	r3, r7
 800259e:	f803 2c34 	strb.w	r2, [r3, #-52]
  	for (uint8_t j = 0; j < 8; j++)
 80025a2:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80025a6:	3301      	adds	r3, #1
 80025a8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 80025ac:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80025b0:	2b07      	cmp	r3, #7
 80025b2:	d9eb      	bls.n	800258c <main+0x1f0>

  	// Starte While-Schleife
#define MAINWHILE				"\nStarte While Schleife\n"
  	uartTransmit(MAINWHILE, sizeof(MAINWHILE));
 80025b4:	2118      	movs	r1, #24
 80025b6:	485b      	ldr	r0, [pc, #364]	; (8002724 <main+0x388>)
 80025b8:	f7fe f902 	bl	80007c0 <uartTransmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	switch (UART2_msg[0])
 80025bc:	4b5a      	ldr	r3, [pc, #360]	; (8002728 <main+0x38c>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d002      	beq.n	80025ca <main+0x22e>
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d008      	beq.n	80025da <main+0x23e>
				NVIC_SystemReset();
				break;
	  		case 2:
				break;
			default:
				break;
 80025c8:	e008      	b.n	80025dc <main+0x240>
				HAL_UART_Transmit(&huart2, (uint8_t*)"\nSystem Reset\r\n", 15, 100);
 80025ca:	2364      	movs	r3, #100	; 0x64
 80025cc:	220f      	movs	r2, #15
 80025ce:	4957      	ldr	r1, [pc, #348]	; (800272c <main+0x390>)
 80025d0:	484d      	ldr	r0, [pc, #308]	; (8002708 <main+0x36c>)
 80025d2:	f004 fa87 	bl	8006ae4 <HAL_UART_Transmit>
				NVIC_SystemReset();
 80025d6:	f7ff fea3 	bl	8002320 <__NVIC_SystemReset>
				break;
 80025da:	bf00      	nop
		}
	  	// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 80025dc:	4b54      	ldr	r3, [pc, #336]	; (8002730 <main+0x394>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d10a      	bne.n	80025fc <main+0x260>
		{
			count++;																	// Zaehler count hochzaehlen
 80025e6:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80025ea:	3301      	adds	r3, #1
 80025ec:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
			millisekunden_flag_1 = 0;													// Setze Millisekunden-Flag zurueck
 80025f0:	4b4f      	ldr	r3, [pc, #316]	; (8002730 <main+0x394>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]

			// Setze Flag start, nur wenn millisekunden Flag gesetzt war
			task = 1;
 80025f6:	2301      	movs	r3, #1
 80025f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		}

		// PWM Oelstandsensor Kombiinstrument ausgeben
		pwm_oelstand(count);
 80025fc:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff f9cf 	bl	80019a4 <pwm_oelstand>

		// Task wird alle 20 Millisekunden ausgefuehrt
		if (((count % 20) == 0) && (task == 1))
 8002606:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 800260a:	4b4a      	ldr	r3, [pc, #296]	; (8002734 <main+0x398>)
 800260c:	fba3 1302 	umull	r1, r3, r3, r2
 8002610:	0919      	lsrs	r1, r3, #4
 8002612:	460b      	mov	r3, r1
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	b29b      	uxth	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d12b      	bne.n	800267a <main+0x2de>
 8002622:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002626:	2b01      	cmp	r3, #1
 8002628:	d127      	bne.n	800267a <main+0x2de>
		{
			// Sende Nachricht Motor1
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMotor1, motor1.output, (uint32_t *)CAN_TX_MAILBOX0);
 800262a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800262e:	2301      	movs	r3, #1
 8002630:	4a41      	ldr	r2, [pc, #260]	; (8002738 <main+0x39c>)
 8002632:	4842      	ldr	r0, [pc, #264]	; (800273c <main+0x3a0>)
 8002634:	f001 fdaa 	bl	800418c <HAL_CAN_AddTxMessage>
 8002638:	4603      	mov	r3, r0
 800263a:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 800263e:	bf00      	nop
 8002640:	2101      	movs	r1, #1
 8002642:	483e      	ldr	r0, [pc, #248]	; (800273c <main+0x3a0>)
 8002644:	f001 fe72 	bl	800432c <HAL_CAN_IsTxMessagePending>
 8002648:	4603      	mov	r3, r0
 800264a:	2b01      	cmp	r3, #1
 800264c:	d0f8      	beq.n	8002640 <main+0x2a4>
			tmp[0] = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
			tmp[1] = 1;
 8002654:	2301      	movs	r3, #1
 8002656:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1

			status = HAL_CAN_AddTxMessage(&hcan3, &TxLenkung, tmp, (uint32_t *)CAN_TX_MAILBOX0);
 800265a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800265e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002662:	2301      	movs	r3, #1
 8002664:	4835      	ldr	r0, [pc, #212]	; (800273c <main+0x3a0>)
 8002666:	f001 fd91 	bl	800418c <HAL_CAN_AddTxMessage>
 800266a:	4603      	mov	r3, r0
 800266c:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
			hal_error(status);
 8002670:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe fddd 	bl	8001234 <hal_error>
		}

		// Task wird alle 100 Millisekunden ausgefuehrt
		if (((count % 100) == 0) && (task == 1))
 800267a:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 800267e:	4a30      	ldr	r2, [pc, #192]	; (8002740 <main+0x3a4>)
 8002680:	fba2 1203 	umull	r1, r2, r2, r3
 8002684:	0952      	lsrs	r2, r2, #5
 8002686:	2164      	movs	r1, #100	; 0x64
 8002688:	fb01 f202 	mul.w	r2, r1, r2
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	b29b      	uxth	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d176      	bne.n	8002782 <main+0x3e6>
 8002694:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002698:	2b01      	cmp	r3, #1
 800269a:	d172      	bne.n	8002782 <main+0x3e6>
		{
			// alle Inputs einlesen
			readall_inputs();
 800269c:	f7fe feb4 	bl	8001408 <readall_inputs>

			// Anlasser abfragen
			readAnlasser();
 80026a0:	f7ff f8e0 	bl	8001864 <readAnlasser>

			// Bremse pruefen
			//readBrake();

			// Gaspedal pruefen
			gas_adc = readTrottle();
 80026a4:	f7ff fa2a 	bl	8001afc <readTrottle>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104

			// Abfrage ob Mittelwertbildung
			if (gas_adc > 0)															// Wenn Gaspedal Plausible dann Mittelwertbildung
 80026ae:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d048      	beq.n	8002748 <main+0x3ac>
			{
				// Mittelwert bilden (https://nestedsoftware.com/2018/03/20/calculating-a-moving-average-on-streaming-data-5a7k.22879.html)
				// Mittelwertbildung aus 10 Werten (Weniger die 10 verkleineren, Mehr die 10 vergroeßern)
				gas_mean = (gas_mean + ((gas_adc - gas_mean)/10));
 80026b6:	f8b7 2104 	ldrh.w	r2, [r7, #260]	; 0x104
 80026ba:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	4a20      	ldr	r2, [pc, #128]	; (8002744 <main+0x3a8>)
 80026c2:	fb82 1203 	smull	r1, r2, r2, r3
 80026c6:	1092      	asrs	r2, r2, #2
 80026c8:	17db      	asrs	r3, r3, #31
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80026d2:	4413      	add	r3, r2
 80026d4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 80026d8:	e039      	b.n	800274e <main+0x3b2>
 80026da:	bf00      	nop
 80026dc:	08008750 	.word	0x08008750
 80026e0:	08008768 	.word	0x08008768
 80026e4:	08008780 	.word	0x08008780
 80026e8:	08008798 	.word	0x08008798
 80026ec:	080087b0 	.word	0x080087b0
 80026f0:	080087c8 	.word	0x080087c8
 80026f4:	080087e0 	.word	0x080087e0
 80026f8:	080087f8 	.word	0x080087f8
 80026fc:	20000164 	.word	0x20000164
 8002700:	2000014c 	.word	0x2000014c
 8002704:	20000134 	.word	0x20000134
 8002708:	200001b0 	.word	0x200001b0
 800270c:	08008694 	.word	0x08008694
 8002710:	080086d0 	.word	0x080086d0
 8002714:	080086e8 	.word	0x080086e8
 8002718:	080086ec 	.word	0x080086ec
 800271c:	20000050 	.word	0x20000050
 8002720:	40020400 	.word	0x40020400
 8002724:	080086f0 	.word	0x080086f0
 8002728:	20000140 	.word	0x20000140
 800272c:	08008708 	.word	0x08008708
 8002730:	20000158 	.word	0x20000158
 8002734:	cccccccd 	.word	0xcccccccd
 8002738:	2000015c 	.word	0x2000015c
 800273c:	200000f0 	.word	0x200000f0
 8002740:	51eb851f 	.word	0x51eb851f
 8002744:	66666667 	.word	0x66666667
			}
			else																		// Wenn Gaspedal unplausible oder Kupplung getreten
			{
				gas_mean = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
			}

			// Daten in Bamocarformat umwandeln
			tmp[0] = 0x90;
 800274e:	2390      	movs	r3, #144	; 0x90
 8002750:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
			tmp[1] = (gas_mean);
 8002754:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8002758:	b2db      	uxtb	r3, r3
 800275a:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
			tmp[2] = ((gas_mean) >> 8);
 800275e:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8002762:	0a1b      	lsrs	r3, r3, #8
 8002764:	b29b      	uxth	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2

			// Drehmoment an Bamocar senden
			status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
 800276c:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8002770:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002774:	2301      	movs	r3, #1
 8002776:	48c4      	ldr	r0, [pc, #784]	; (8002a88 <main+0x6ec>)
 8002778:	f001 fd08 	bl	800418c <HAL_CAN_AddTxMessage>
 800277c:	4603      	mov	r3, r0
 800277e:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
			//hal_error(status);
		}

		// Task wird alle 200 Millisekunden ausgefuehrt
		if (((count % 200) == 0) && (task == 1))
 8002782:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8002786:	4ac1      	ldr	r2, [pc, #772]	; (8002a8c <main+0x6f0>)
 8002788:	fba2 1203 	umull	r1, r2, r2, r3
 800278c:	0992      	lsrs	r2, r2, #6
 800278e:	21c8      	movs	r1, #200	; 0xc8
 8002790:	fb01 f202 	mul.w	r2, r1, r2
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	f040 815e 	bne.w	8002a5a <main+0x6be>
 800279e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	f040 8159 	bne.w	8002a5a <main+0x6be>
		{
			HAL_GPIO_WritePin(OELDRUCK_GPIO_Port, OELDRUCK_Pin, leuchten_out.Oeldruck);
 80027a8:	4bb9      	ldr	r3, [pc, #740]	; (8002a90 <main+0x6f4>)
 80027aa:	785b      	ldrb	r3, [r3, #1]
 80027ac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	461a      	mov	r2, r3
 80027b4:	2104      	movs	r1, #4
 80027b6:	48b7      	ldr	r0, [pc, #732]	; (8002a94 <main+0x6f8>)
 80027b8:	f002 fca2 	bl	8005100 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WISCHWARNUNG_GPIO_Port, WISCHWARNUNG_Pin, leuchten_out.Wischwarn);
 80027bc:	4bb4      	ldr	r3, [pc, #720]	; (8002a90 <main+0x6f4>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027cc:	48b2      	ldr	r0, [pc, #712]	; (8002a98 <main+0x6fc>)
 80027ce:	f002 fc97 	bl	8005100 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, leuchten_out.Ruechwarn);
 80027d2:	4baf      	ldr	r3, [pc, #700]	; (8002a90 <main+0x6f4>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	2180      	movs	r1, #128	; 0x80
 80027e0:	48ae      	ldr	r0, [pc, #696]	; (8002a9c <main+0x700>)
 80027e2:	f002 fc8d 	bl	8005100 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BREMSWARNUNG_GPIO_Port, BREMSWARNUNG_Pin, leuchten_out.Bremswarn);
 80027e6:	4baa      	ldr	r3, [pc, #680]	; (8002a90 <main+0x6f4>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027f6:	48a8      	ldr	r0, [pc, #672]	; (8002a98 <main+0x6fc>)
 80027f8:	f002 fc82 	bl	8005100 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 80027fc:	4ba4      	ldr	r3, [pc, #656]	; (8002a90 <main+0x6f4>)
 80027fe:	785b      	ldrb	r3, [r3, #1]
 8002800:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002804:	b2db      	uxtb	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800280c:	48a4      	ldr	r0, [pc, #656]	; (8002aa0 <main+0x704>)
 800280e:	f002 fc77 	bl	8005100 <HAL_GPIO_WritePin>

			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 8002812:	4ba4      	ldr	r3, [pc, #656]	; (8002aa4 <main+0x708>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
			OutData[1] = highcurrent_out.high_out;
 800281a:	4ba3      	ldr	r3, [pc, #652]	; (8002aa8 <main+0x70c>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
			OutData[2] = (leuchten_out.ledoutput >> 8);
 8002822:	4b9b      	ldr	r3, [pc, #620]	; (8002a90 <main+0x6f4>)
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	b29b      	uxth	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
			OutData[3] = leuchten_out.ledoutput;
 8002830:	4b97      	ldr	r3, [pc, #604]	; (8002a90 <main+0x6f4>)
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
			OutData[4] = komfort_out.komfortoutput;
 800283a:	4b9c      	ldr	r3, [pc, #624]	; (8002aac <main+0x710>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
			OutData[5] ++;
 8002842:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8002846:	3301      	adds	r3, #1
 8002848:	b2db      	uxtb	r3, r3
 800284a:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1

			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX0);
 800284e:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8002852:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8002856:	2301      	movs	r3, #1
 8002858:	488b      	ldr	r0, [pc, #556]	; (8002a88 <main+0x6ec>)
 800285a:	f001 fc97 	bl	800418c <HAL_CAN_AddTxMessage>
 800285e:	4603      	mov	r3, r0
 8002860:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
			//hal_error(status);

			// ADC-Werte einlesen Bremse und Temperaturen
			ADC_VAL[0] = ADC_Bremsdruck();
 8002864:	f7fe fada 	bl	8000e1c <ADC_Bremsdruck>
 8002868:	4603      	mov	r3, r0
 800286a:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
			ADC_VAL[1] = ADC_Bremsdrucktemperatur();
 800286e:	f7fe fc6f 	bl	8001150 <ADC_Bremsdrucktemperatur>
 8002872:	4603      	mov	r3, r0
 8002874:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
			ADC_VAL[2] = ADC_STMTemperatur();
 8002878:	f7fe fca2 	bl	80011c0 <ADC_STMTemperatur>
 800287c:	4603      	mov	r3, r0
 800287e:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
			ADC_VAL[3] = ADC_PCBTemperatur();
 8002882:	f7fe fbbd 	bl	8001000 <ADC_PCBTemperatur>
 8002886:	4603      	mov	r3, r0
 8002888:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] ++;
 800288c:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8002890:	3301      	adds	r3, #1
 8002892:	b2db      	uxtb	r3, r3
 8002894:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
			InData[1] = (system_in.systeminput >> 8);
 8002898:	4b85      	ldr	r3, [pc, #532]	; (8002ab0 <main+0x714>)
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	b29b      	uxth	r3, r3
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			InData[2] = system_in.systeminput;
 80028a6:	4b82      	ldr	r3, [pc, #520]	; (8002ab0 <main+0x714>)
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			InData[3] = sdc_in.sdcinput;
 80028b0:	4b80      	ldr	r3, [pc, #512]	; (8002ab4 <main+0x718>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			InData[4] = (komfort_in.komfortinput >> 8);
 80028b8:	4b7f      	ldr	r3, [pc, #508]	; (8002ab8 <main+0x71c>)
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	0a1b      	lsrs	r3, r3, #8
 80028be:	b29b      	uxth	r3, r3
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
			InData[5] = komfort_in.komfortinput;
 80028c6:	4b7c      	ldr	r3, [pc, #496]	; (8002ab8 <main+0x71c>)
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9

			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 80028d0:	bf00      	nop
 80028d2:	2101      	movs	r1, #1
 80028d4:	486c      	ldr	r0, [pc, #432]	; (8002a88 <main+0x6ec>)
 80028d6:	f001 fd29 	bl	800432c <HAL_CAN_IsTxMessagePending>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d0f8      	beq.n	80028d2 <main+0x536>
			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX0);
 80028e0:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 80028e4:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80028e8:	2301      	movs	r3, #1
 80028ea:	4867      	ldr	r0, [pc, #412]	; (8002a88 <main+0x6ec>)
 80028ec:	f001 fc4e 	bl	800418c <HAL_CAN_AddTxMessage>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
			//hal_error(status);

			// ADC-Werte einlesen Navi, Klima, KL15
			ADC_VAL[4] = ADC_KL15();
 80028f6:	f7fe fadb 	bl	8000eb0 <ADC_KL15>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
			ADC_VAL[5] = ADC_Klimaflap();
 8002900:	f7fe fb46 	bl	8000f90 <ADC_Klimaflap>
 8002904:	4603      	mov	r3, r0
 8002906:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
			ADC_VAL[6] = ADC_Info();
 800290a:	f7fe fbe9 	bl	80010e0 <ADC_Info>
 800290e:	4603      	mov	r3, r0
 8002910:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
			ADC_VAL[7] = ADC_Return();
 8002914:	f7fe fbac 	bl	8001070 <ADC_Return>
 8002918:	4603      	mov	r3, r0
 800291a:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa

			// ADC-Werte umwandeln
			AnalogData[0] = ADC_VAL[4];
 800291e:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
			AnalogData[1] = (ADC_VAL[4] >> 8) | (ADC_VAL[0] << 4);
 8002928:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 800292c:	0a1b      	lsrs	r3, r3, #8
 800292e:	b29b      	uxth	r3, r3
 8002930:	b25a      	sxtb	r2, r3
 8002932:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	b25b      	sxtb	r3, r3
 800293a:	4313      	orrs	r3, r2
 800293c:	b25b      	sxtb	r3, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			AnalogData[2] = (ADC_VAL[0] >> 4);
 8002944:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	b29b      	uxth	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			AnalogData[3] = ADC_VAL[6];
 8002952:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8002956:	b2db      	uxtb	r3, r3
 8002958:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			AnalogData[4] = (ADC_VAL[6] >> 8) | (ADC_VAL[7] << 4);
 800295c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8002960:	0a1b      	lsrs	r3, r3, #8
 8002962:	b29b      	uxth	r3, r3
 8002964:	b25a      	sxtb	r2, r3
 8002966:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	b25b      	sxtb	r3, r3
 800296e:	4313      	orrs	r3, r2
 8002970:	b25b      	sxtb	r3, r3
 8002972:	b2db      	uxtb	r3, r3
 8002974:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
			AnalogData[5] = (ADC_VAL[7] >> 4);
 8002978:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	b29b      	uxth	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
			AnalogData[6] = ADC_VAL[5];
 8002986:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
			AnalogData[7] = (ADC_VAL[5] >> 8);
 8002990:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8002994:	0a1b      	lsrs	r3, r3, #8
 8002996:	b29b      	uxth	r3, r3
 8002998:	b2db      	uxtb	r3, r3
 800299a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
//			// Befehl Fehler auslesen an Bamocar senden
//			status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
			//hal_error(status);

			// ADC-Werte einlesen Kuehlwassertemperatur
			ADC_VAL[8] = ADC_Kuhlwassertemperatur();
 800299e:	f7fe fabf 	bl	8000f20 <ADC_Kuhlwassertemperatur>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc

			// ADC-Werte umwandeln
			TempData[0] = ADC_VAL[2];
 80029a8:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
			TempData[1] = (ADC_VAL[2] >> 8) | (ADC_VAL[3] << 4);
 80029b2:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	b25a      	sxtb	r2, r3
 80029bc:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	b25b      	sxtb	r3, r3
 80029c4:	4313      	orrs	r3, r2
 80029c6:	b25b      	sxtb	r3, r3
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
			TempData[2] = (ADC_VAL[3] >> 4);
 80029ce:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 80029d2:	091b      	lsrs	r3, r3, #4
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
			TempData[3] = ADC_VAL[8];
 80029dc:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
			TempData[4] = (ADC_VAL[8] >> 8) | (ADC_VAL[1] << 4);
 80029e6:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 80029ea:	0a1b      	lsrs	r3, r3, #8
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	b25a      	sxtb	r2, r3
 80029f0:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	b25b      	sxtb	r3, r3
 80029f8:	4313      	orrs	r3, r2
 80029fa:	b25b      	sxtb	r3, r3
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
			TempData[5] = (ADC_VAL[1] >> 4);
 8002a02:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002a06:	091b      	lsrs	r3, r3, #4
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9

			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 8002a10:	bf00      	nop
 8002a12:	2101      	movs	r1, #1
 8002a14:	481c      	ldr	r0, [pc, #112]	; (8002a88 <main+0x6ec>)
 8002a16:	f001 fc89 	bl	800432c <HAL_CAN_IsTxMessagePending>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d0f8      	beq.n	8002a12 <main+0x676>
			// Befehl Fehler auslesen an Bamocar senden
			status = HAL_CAN_AddTxMessage(&hcan3, &TxTemperatur, TempData, (uint32_t *)CAN_TX_MAILBOX0);
 8002a20:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8002a24:	4639      	mov	r1, r7
 8002a26:	2301      	movs	r3, #1
 8002a28:	4817      	ldr	r0, [pc, #92]	; (8002a88 <main+0x6ec>)
 8002a2a:	f001 fbaf 	bl	800418c <HAL_CAN_AddTxMessage>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 8002a34:	bf00      	nop
 8002a36:	2101      	movs	r1, #1
 8002a38:	4813      	ldr	r0, [pc, #76]	; (8002a88 <main+0x6ec>)
 8002a3a:	f001 fc77 	bl	800432c <HAL_CAN_IsTxMessagePending>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d0f8      	beq.n	8002a36 <main+0x69a>
			status = HAL_CAN_AddTxMessage(&hcan3, &TxAnalog, AnalogData, (uint32_t *)CAN_TX_MAILBOX0);
 8002a44:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8002a48:	f107 0118 	add.w	r1, r7, #24
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	480e      	ldr	r0, [pc, #56]	; (8002a88 <main+0x6ec>)
 8002a50:	f001 fb9c 	bl	800418c <HAL_CAN_AddTxMessage>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
		}

		if (((count % 400) == 0) && (task == 1))
 8002a5a:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8002a5e:	4a0b      	ldr	r2, [pc, #44]	; (8002a8c <main+0x6f0>)
 8002a60:	fba2 1203 	umull	r1, r2, r2, r3
 8002a64:	09d2      	lsrs	r2, r2, #7
 8002a66:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002a6a:	fb01 f202 	mul.w	r2, r1, r2
 8002a6e:	1a9b      	subs	r3, r3, r2
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d122      	bne.n	8002abc <main+0x720>
 8002a76:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d11e      	bne.n	8002abc <main+0x720>
		{
			// Variable count auf 0 zuruecksetzen
			count = 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
 8002a84:	e01a      	b.n	8002abc <main+0x720>
 8002a86:	bf00      	nop
 8002a88:	200000f0 	.word	0x200000f0
 8002a8c:	51eb851f 	.word	0x51eb851f
 8002a90:	20000050 	.word	0x20000050
 8002a94:	40021400 	.word	0x40021400
 8002a98:	40021800 	.word	0x40021800
 8002a9c:	40020c00 	.word	0x40020c00
 8002aa0:	40020400 	.word	0x40020400
 8002aa4:	20000048 	.word	0x20000048
 8002aa8:	2000004c 	.word	0x2000004c
 8002aac:	20000054 	.word	0x20000054
 8002ab0:	2000003c 	.word	0x2000003c
 8002ab4:	20000040 	.word	0x20000040
 8002ab8:	20000044 	.word	0x20000044
		}

		// Zuruecksetzen Flag start
		task = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117


	  	// Task wird alle 5 Millisekunden ausgefuehrt
	  	if (millis() - lastcan >= 5)
 8002ac2:	f7fe fefb 	bl	80018bc <millis>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d95b      	bls.n	8002b8a <main+0x7ee>
		{
	  		HAL_CAN_GetRxMessage(&hcan3, CAN_RX_FIFO0, &RxMessage, TxData);
 8002ad2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ad6:	4a3c      	ldr	r2, [pc, #240]	; (8002bc8 <main+0x82c>)
 8002ad8:	2100      	movs	r1, #0
 8002ada:	483c      	ldr	r0, [pc, #240]	; (8002bcc <main+0x830>)
 8002adc:	f001 fc4a 	bl	8004374 <HAL_CAN_GetRxMessage>

			// Wenn Nachricht ueber den CAN-Bus empfangen wurden
			if (can_change == 1)
 8002ae0:	4b3b      	ldr	r3, [pc, #236]	; (8002bd0 <main+0x834>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d14f      	bne.n	8002b8a <main+0x7ee>
			{
				// Nachricht ID ueber UART ausgeben
				uartTransmitNumber(RxMessage.StdId, 16);
 8002aea:	4b37      	ldr	r3, [pc, #220]	; (8002bc8 <main+0x82c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2110      	movs	r1, #16
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fd fe79 	bl	80007e8 <uartTransmitNumber>
				uartTransmit("\t", 1);
 8002af6:	2101      	movs	r1, #1
 8002af8:	4836      	ldr	r0, [pc, #216]	; (8002bd4 <main+0x838>)
 8002afa:	f7fd fe61 	bl	80007c0 <uartTransmit>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 8002afe:	2300      	movs	r3, #0
 8002b00:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8002b04:	e00c      	b.n	8002b20 <main+0x784>
				{
					uartTransmitNumber(RxData[i], 16);
 8002b06:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8002b0a:	4a33      	ldr	r2, [pc, #204]	; (8002bd8 <main+0x83c>)
 8002b0c:	5cd3      	ldrb	r3, [r2, r3]
 8002b0e:	2110      	movs	r1, #16
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fd fe69 	bl	80007e8 <uartTransmitNumber>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 8002b16:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8002b20:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 8002b24:	4b28      	ldr	r3, [pc, #160]	; (8002bc8 <main+0x82c>)
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d3ec      	bcc.n	8002b06 <main+0x76a>
				}
				uartTransmit("\n", 1);
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	482b      	ldr	r0, [pc, #172]	; (8002bdc <main+0x840>)
 8002b30:	f7fd fe46 	bl	80007c0 <uartTransmit>

				// Sortieren der IDs nach Geraeten
				switch (RxMessage.StdId)
 8002b34:	4b24      	ldr	r3, [pc, #144]	; (8002bc8 <main+0x82c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f240 1211 	movw	r2, #273	; 0x111
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d00b      	beq.n	8002b58 <main+0x7bc>
 8002b40:	f240 1281 	movw	r2, #385	; 0x181
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d10c      	bne.n	8002b62 <main+0x7c6>
				{
					case BAMOCAR_RX_ID:
						BAMOCAN_ID(&RxData[0], RxMessage.DLC);
 8002b48:	4b1f      	ldr	r3, [pc, #124]	; (8002bc8 <main+0x82c>)
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4821      	ldr	r0, [pc, #132]	; (8002bd8 <main+0x83c>)
 8002b52:	f7fd fcfb 	bl	800054c <BAMOCAN_ID>
						break;
 8002b56:	e009      	b.n	8002b6c <main+0x7d0>
					case 0x111:
						uartTransmit("CAN-ID Computer config\n", 23);
 8002b58:	2117      	movs	r1, #23
 8002b5a:	4821      	ldr	r0, [pc, #132]	; (8002be0 <main+0x844>)
 8002b5c:	f7fd fe30 	bl	80007c0 <uartTransmit>
						break;
 8002b60:	e004      	b.n	8002b6c <main+0x7d0>
					default:
						uartTransmit("CAN-ID nicht verfuegbar\n", 24);
 8002b62:	2118      	movs	r1, #24
 8002b64:	481f      	ldr	r0, [pc, #124]	; (8002be4 <main+0x848>)
 8002b66:	f7fd fe2b 	bl	80007c0 <uartTransmit>
						break;
 8002b6a:	bf00      	nop
				}

				// Drehzahl ausgeben
				TxData[2] = motor1.output[2];
 8002b6c:	4b1e      	ldr	r3, [pc, #120]	; (8002be8 <main+0x84c>)
 8002b6e:	789b      	ldrb	r3, [r3, #2]
 8002b70:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				TxData[3] = motor1.output[3];
 8002b74:	4b1c      	ldr	r3, [pc, #112]	; (8002be8 <main+0x84c>)
 8002b76:	78db      	ldrb	r3, [r3, #3]
 8002b78:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				lastcan = millis();
 8002b7c:	f7fe fe9e 	bl	80018bc <millis>
 8002b80:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

				can_change = 0;
 8002b84:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <main+0x834>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]
			}
		}

#ifdef DEBUG
		// Sende CAN Nachricht auf CAN-Bus / Teste CAN-BUS
		if (millis() - lastsendcan >= 1000)
 8002b8a:	f7fe fe97 	bl	80018bc <millis>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b9a:	f4ff ad0f 	bcc.w	80025bc <main+0x220>
		{
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 8002b9e:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8002ba2:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	4808      	ldr	r0, [pc, #32]	; (8002bcc <main+0x830>)
 8002baa:	f001 faef 	bl	800418c <HAL_CAN_AddTxMessage>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
			//hal_error(status);
			lastsendcan = millis();
 8002bb4:	f7fe fe82 	bl	80018bc <millis>
 8002bb8:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108

			HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8002bbc:	2180      	movs	r1, #128	; 0x80
 8002bbe:	480b      	ldr	r0, [pc, #44]	; (8002bec <main+0x850>)
 8002bc0:	f002 fab7 	bl	8005132 <HAL_GPIO_TogglePin>
	  	switch (UART2_msg[0])
 8002bc4:	e4fa      	b.n	80025bc <main+0x220>
 8002bc6:	bf00      	nop
 8002bc8:	20000118 	.word	0x20000118
 8002bcc:	200000f0 	.word	0x200000f0
 8002bd0:	20000159 	.word	0x20000159
 8002bd4:	08008718 	.word	0x08008718
 8002bd8:	20000150 	.word	0x20000150
 8002bdc:	080086ec 	.word	0x080086ec
 8002be0:	0800871c 	.word	0x0800871c
 8002be4:	08008734 	.word	0x08008734
 8002be8:	2000015c 	.word	0x2000015c
 8002bec:	40020400 	.word	0x40020400

08002bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b094      	sub	sp, #80	; 0x50
 8002bf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bf6:	f107 031c 	add.w	r3, r7, #28
 8002bfa:	2234      	movs	r2, #52	; 0x34
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f005 fa58 	bl	80080b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c04:	f107 0308 	add.w	r3, r7, #8
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c14:	4b2c      	ldr	r3, [pc, #176]	; (8002cc8 <SystemClock_Config+0xd8>)
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	4a2b      	ldr	r2, [pc, #172]	; (8002cc8 <SystemClock_Config+0xd8>)
 8002c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8002c20:	4b29      	ldr	r3, [pc, #164]	; (8002cc8 <SystemClock_Config+0xd8>)
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c28:	607b      	str	r3, [r7, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c2c:	4b27      	ldr	r3, [pc, #156]	; (8002ccc <SystemClock_Config+0xdc>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a26      	ldr	r2, [pc, #152]	; (8002ccc <SystemClock_Config+0xdc>)
 8002c32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	4b24      	ldr	r3, [pc, #144]	; (8002ccc <SystemClock_Config+0xdc>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c40:	603b      	str	r3, [r7, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c44:	2301      	movs	r3, #1
 8002c46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c4c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002c58:	2319      	movs	r3, #25
 8002c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002c5c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002c60:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c62:	2302      	movs	r3, #2
 8002c64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002c66:	2302      	movs	r3, #2
 8002c68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c6e:	f107 031c 	add.w	r3, r7, #28
 8002c72:	4618      	mov	r0, r3
 8002c74:	f002 fac8 	bl	8005208 <HAL_RCC_OscConfig>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002c7e:	f000 f997 	bl	8002fb0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002c82:	f002 fa71 	bl	8005168 <HAL_PWREx_EnableOverDrive>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002c8c:	f000 f990 	bl	8002fb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c90:	230f      	movs	r3, #15
 8002c92:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c94:	2302      	movs	r3, #2
 8002c96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ca0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ca6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002ca8:	f107 0308 	add.w	r3, r7, #8
 8002cac:	2107      	movs	r1, #7
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f002 fd58 	bl	8005764 <HAL_RCC_ClockConfig>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002cba:	f000 f979 	bl	8002fb0 <Error_Handler>
  }
}
 8002cbe:	bf00      	nop
 8002cc0:	3750      	adds	r7, #80	; 0x50
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	40007000 	.word	0x40007000

08002cd0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Interrupts
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	; 0x28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit(&huart2, &UART2_rxBuffer[uart_count], 1, 100);

	if (UART2_rxBuffer[uart_count] == 0x7F)
 8002cd8:	4b87      	ldr	r3, [pc, #540]	; (8002ef8 <HAL_UART_RxCpltCallback+0x228>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4b87      	ldr	r3, [pc, #540]	; (8002efc <HAL_UART_RxCpltCallback+0x22c>)
 8002ce0:	5c9b      	ldrb	r3, [r3, r2]
 8002ce2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ce4:	d10a      	bne.n	8002cfc <HAL_UART_RxCpltCallback+0x2c>
	{
		if (uart_count >= 1)
 8002ce6:	4b84      	ldr	r3, [pc, #528]	; (8002ef8 <HAL_UART_RxCpltCallback+0x228>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00c      	beq.n	8002d08 <HAL_UART_RxCpltCallback+0x38>
		{
			uart_count--;
 8002cee:	4b82      	ldr	r3, [pc, #520]	; (8002ef8 <HAL_UART_RxCpltCallback+0x228>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	4b80      	ldr	r3, [pc, #512]	; (8002ef8 <HAL_UART_RxCpltCallback+0x228>)
 8002cf8:	701a      	strb	r2, [r3, #0]
 8002cfa:	e005      	b.n	8002d08 <HAL_UART_RxCpltCallback+0x38>
		}
	}
	else
	{
		uart_count++;
 8002cfc:	4b7e      	ldr	r3, [pc, #504]	; (8002ef8 <HAL_UART_RxCpltCallback+0x228>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	3301      	adds	r3, #1
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	4b7c      	ldr	r3, [pc, #496]	; (8002ef8 <HAL_UART_RxCpltCallback+0x228>)
 8002d06:	701a      	strb	r2, [r3, #0]
	}

	if (UART2_rxBuffer[uart_count-1] == '\r')
 8002d08:	4b7b      	ldr	r3, [pc, #492]	; (8002ef8 <HAL_UART_RxCpltCallback+0x228>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	4a7b      	ldr	r2, [pc, #492]	; (8002efc <HAL_UART_RxCpltCallback+0x22c>)
 8002d10:	5cd3      	ldrb	r3, [r2, r3]
 8002d12:	2b0d      	cmp	r3, #13
 8002d14:	f040 80c5 	bne.w	8002ea2 <HAL_UART_RxCpltCallback+0x1d2>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)"\nEingabe OK\r\n", 13, 100);
 8002d18:	2364      	movs	r3, #100	; 0x64
 8002d1a:	220d      	movs	r2, #13
 8002d1c:	4978      	ldr	r1, [pc, #480]	; (8002f00 <HAL_UART_RxCpltCallback+0x230>)
 8002d1e:	4879      	ldr	r0, [pc, #484]	; (8002f04 <HAL_UART_RxCpltCallback+0x234>)
 8002d20:	f003 fee0 	bl	8006ae4 <HAL_UART_Transmit>
		if (UART2_rxBuffer[0] == 'R' && UART2_rxBuffer[1] == 'E' && UART2_rxBuffer[2] == 'S')
 8002d24:	4b75      	ldr	r3, [pc, #468]	; (8002efc <HAL_UART_RxCpltCallback+0x22c>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b52      	cmp	r3, #82	; 0x52
 8002d2a:	d11e      	bne.n	8002d6a <HAL_UART_RxCpltCallback+0x9a>
 8002d2c:	4b73      	ldr	r3, [pc, #460]	; (8002efc <HAL_UART_RxCpltCallback+0x22c>)
 8002d2e:	785b      	ldrb	r3, [r3, #1]
 8002d30:	2b45      	cmp	r3, #69	; 0x45
 8002d32:	d11a      	bne.n	8002d6a <HAL_UART_RxCpltCallback+0x9a>
 8002d34:	4b71      	ldr	r3, [pc, #452]	; (8002efc <HAL_UART_RxCpltCallback+0x22c>)
 8002d36:	789b      	ldrb	r3, [r3, #2]
 8002d38:	2b53      	cmp	r3, #83	; 0x53
 8002d3a:	d116      	bne.n	8002d6a <HAL_UART_RxCpltCallback+0x9a>
		{
			uint8_t c[10] = {204, 205, 205, 205, 205, 205, 205, 205, 205, 185};
 8002d3c:	4a72      	ldr	r2, [pc, #456]	; (8002f08 <HAL_UART_RxCpltCallback+0x238>)
 8002d3e:	f107 031c 	add.w	r3, r7, #28
 8002d42:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d44:	c303      	stmia	r3!, {r0, r1}
 8002d46:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)"\a", 1, 100);
 8002d48:	2364      	movs	r3, #100	; 0x64
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	496f      	ldr	r1, [pc, #444]	; (8002f0c <HAL_UART_RxCpltCallback+0x23c>)
 8002d4e:	486d      	ldr	r0, [pc, #436]	; (8002f04 <HAL_UART_RxCpltCallback+0x234>)
 8002d50:	f003 fec8 	bl	8006ae4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, c, 10, 100);
 8002d54:	f107 011c 	add.w	r1, r7, #28
 8002d58:	2364      	movs	r3, #100	; 0x64
 8002d5a:	220a      	movs	r2, #10
 8002d5c:	4869      	ldr	r0, [pc, #420]	; (8002f04 <HAL_UART_RxCpltCallback+0x234>)
 8002d5e:	f003 fec1 	bl	8006ae4 <HAL_UART_Transmit>
			UART2_msg[0] = 1;
 8002d62:	4b6b      	ldr	r3, [pc, #428]	; (8002f10 <HAL_UART_RxCpltCallback+0x240>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	701a      	strb	r2, [r3, #0]
		{
 8002d68:	e098      	b.n	8002e9c <HAL_UART_RxCpltCallback+0x1cc>
		}
		else if (UART2_rxBuffer[0] == 'O' && UART2_rxBuffer[1] == 'E' && UART2_rxBuffer[2] == 'L')
 8002d6a:	4b64      	ldr	r3, [pc, #400]	; (8002efc <HAL_UART_RxCpltCallback+0x22c>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b4f      	cmp	r3, #79	; 0x4f
 8002d70:	d123      	bne.n	8002dba <HAL_UART_RxCpltCallback+0xea>
 8002d72:	4b62      	ldr	r3, [pc, #392]	; (8002efc <HAL_UART_RxCpltCallback+0x22c>)
 8002d74:	785b      	ldrb	r3, [r3, #1]
 8002d76:	2b45      	cmp	r3, #69	; 0x45
 8002d78:	d11f      	bne.n	8002dba <HAL_UART_RxCpltCallback+0xea>
 8002d7a:	4b60      	ldr	r3, [pc, #384]	; (8002efc <HAL_UART_RxCpltCallback+0x22c>)
 8002d7c:	789b      	ldrb	r3, [r3, #2]
 8002d7e:	2b4c      	cmp	r3, #76	; 0x4c
 8002d80:	d11b      	bne.n	8002dba <HAL_UART_RxCpltCallback+0xea>
		{
			uartTransmit("Display Oel\r\n", 13);
 8002d82:	210d      	movs	r1, #13
 8002d84:	4863      	ldr	r0, [pc, #396]	; (8002f14 <HAL_UART_RxCpltCallback+0x244>)
 8002d86:	f7fd fd1b 	bl	80007c0 <uartTransmit>
			leuchten_out.Oeldruck = (1 ^ leuchten_out.Oeldruck);
 8002d8a:	4b63      	ldr	r3, [pc, #396]	; (8002f18 <HAL_UART_RxCpltCallback+0x248>)
 8002d8c:	785b      	ldrb	r3, [r3, #1]
 8002d8e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f083 0301 	eor.w	r3, r3, #1
 8002d98:	b2d9      	uxtb	r1, r3
 8002d9a:	4a5f      	ldr	r2, [pc, #380]	; (8002f18 <HAL_UART_RxCpltCallback+0x248>)
 8002d9c:	7853      	ldrb	r3, [r2, #1]
 8002d9e:	f361 0300 	bfi	r3, r1, #0, #1
 8002da2:	7053      	strb	r3, [r2, #1]
			leuchten_out.GreenLed = leuchten_out.Oeldruck;
 8002da4:	4b5c      	ldr	r3, [pc, #368]	; (8002f18 <HAL_UART_RxCpltCallback+0x248>)
 8002da6:	785b      	ldrb	r3, [r3, #1]
 8002da8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002dac:	b2d9      	uxtb	r1, r3
 8002dae:	4a5a      	ldr	r2, [pc, #360]	; (8002f18 <HAL_UART_RxCpltCallback+0x248>)
 8002db0:	7853      	ldrb	r3, [r2, #1]
 8002db2:	f361 1304 	bfi	r3, r1, #4, #1
 8002db6:	7053      	strb	r3, [r2, #1]
 8002db8:	e070      	b.n	8002e9c <HAL_UART_RxCpltCallback+0x1cc>
		}
		else if (UART2_rxBuffer[0] == 'W' && UART2_rxBuffer[1] == 'I' && UART2_rxBuffer[2] == 'S')
 8002dba:	4b50      	ldr	r3, [pc, #320]	; (8002efc <HAL_UART_RxCpltCallback+0x22c>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b57      	cmp	r3, #87	; 0x57
 8002dc0:	d119      	bne.n	8002df6 <HAL_UART_RxCpltCallback+0x126>
 8002dc2:	4b4e      	ldr	r3, [pc, #312]	; (8002efc <HAL_UART_RxCpltCallback+0x22c>)
 8002dc4:	785b      	ldrb	r3, [r3, #1]
 8002dc6:	2b49      	cmp	r3, #73	; 0x49
 8002dc8:	d115      	bne.n	8002df6 <HAL_UART_RxCpltCallback+0x126>
 8002dca:	4b4c      	ldr	r3, [pc, #304]	; (8002efc <HAL_UART_RxCpltCallback+0x22c>)
 8002dcc:	789b      	ldrb	r3, [r3, #2]
 8002dce:	2b53      	cmp	r3, #83	; 0x53
 8002dd0:	d111      	bne.n	8002df6 <HAL_UART_RxCpltCallback+0x126>
		{
			uartTransmit("Display Wisch\r\n", 15);
 8002dd2:	210f      	movs	r1, #15
 8002dd4:	4851      	ldr	r0, [pc, #324]	; (8002f1c <HAL_UART_RxCpltCallback+0x24c>)
 8002dd6:	f7fd fcf3 	bl	80007c0 <uartTransmit>
			leuchten_out.Wischwarn = (1 ^ leuchten_out.Wischwarn);
 8002dda:	4b4f      	ldr	r3, [pc, #316]	; (8002f18 <HAL_UART_RxCpltCallback+0x248>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f083 0301 	eor.w	r3, r3, #1
 8002de8:	b2d9      	uxtb	r1, r3
 8002dea:	4a4b      	ldr	r2, [pc, #300]	; (8002f18 <HAL_UART_RxCpltCallback+0x248>)
 8002dec:	7813      	ldrb	r3, [r2, #0]
 8002dee:	f361 1386 	bfi	r3, r1, #6, #1
 8002df2:	7013      	strb	r3, [r2, #0]
 8002df4:	e052      	b.n	8002e9c <HAL_UART_RxCpltCallback+0x1cc>
		}
		else if (UART2_rxBuffer[0] == 'B' && UART2_rxBuffer[1] == 'R' && UART2_rxBuffer[2] == 'E')
 8002df6:	4b41      	ldr	r3, [pc, #260]	; (8002efc <HAL_UART_RxCpltCallback+0x22c>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b42      	cmp	r3, #66	; 0x42
 8002dfc:	d119      	bne.n	8002e32 <HAL_UART_RxCpltCallback+0x162>
 8002dfe:	4b3f      	ldr	r3, [pc, #252]	; (8002efc <HAL_UART_RxCpltCallback+0x22c>)
 8002e00:	785b      	ldrb	r3, [r3, #1]
 8002e02:	2b52      	cmp	r3, #82	; 0x52
 8002e04:	d115      	bne.n	8002e32 <HAL_UART_RxCpltCallback+0x162>
 8002e06:	4b3d      	ldr	r3, [pc, #244]	; (8002efc <HAL_UART_RxCpltCallback+0x22c>)
 8002e08:	789b      	ldrb	r3, [r3, #2]
 8002e0a:	2b45      	cmp	r3, #69	; 0x45
 8002e0c:	d111      	bne.n	8002e32 <HAL_UART_RxCpltCallback+0x162>
		{
			uartTransmit("Display Brems\r\n", 15);
 8002e0e:	210f      	movs	r1, #15
 8002e10:	4843      	ldr	r0, [pc, #268]	; (8002f20 <HAL_UART_RxCpltCallback+0x250>)
 8002e12:	f7fd fcd5 	bl	80007c0 <uartTransmit>
			leuchten_out.Bremswarn = (1 ^ leuchten_out.Bremswarn);
 8002e16:	4b40      	ldr	r3, [pc, #256]	; (8002f18 <HAL_UART_RxCpltCallback+0x248>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	f083 0301 	eor.w	r3, r3, #1
 8002e24:	b2d9      	uxtb	r1, r3
 8002e26:	4a3c      	ldr	r2, [pc, #240]	; (8002f18 <HAL_UART_RxCpltCallback+0x248>)
 8002e28:	7813      	ldrb	r3, [r2, #0]
 8002e2a:	f361 13c7 	bfi	r3, r1, #7, #1
 8002e2e:	7013      	strb	r3, [r2, #0]
 8002e30:	e034      	b.n	8002e9c <HAL_UART_RxCpltCallback+0x1cc>
		}
		else if (UART2_rxBuffer[0] == 'R' && UART2_rxBuffer[1] == 'U' && UART2_rxBuffer[2] == 'C')
 8002e32:	4b32      	ldr	r3, [pc, #200]	; (8002efc <HAL_UART_RxCpltCallback+0x22c>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b52      	cmp	r3, #82	; 0x52
 8002e38:	d119      	bne.n	8002e6e <HAL_UART_RxCpltCallback+0x19e>
 8002e3a:	4b30      	ldr	r3, [pc, #192]	; (8002efc <HAL_UART_RxCpltCallback+0x22c>)
 8002e3c:	785b      	ldrb	r3, [r3, #1]
 8002e3e:	2b55      	cmp	r3, #85	; 0x55
 8002e40:	d115      	bne.n	8002e6e <HAL_UART_RxCpltCallback+0x19e>
 8002e42:	4b2e      	ldr	r3, [pc, #184]	; (8002efc <HAL_UART_RxCpltCallback+0x22c>)
 8002e44:	789b      	ldrb	r3, [r3, #2]
 8002e46:	2b43      	cmp	r3, #67	; 0x43
 8002e48:	d111      	bne.n	8002e6e <HAL_UART_RxCpltCallback+0x19e>
		{
			uartTransmit("Display Rueck\r\n", 15);
 8002e4a:	210f      	movs	r1, #15
 8002e4c:	4835      	ldr	r0, [pc, #212]	; (8002f24 <HAL_UART_RxCpltCallback+0x254>)
 8002e4e:	f7fd fcb7 	bl	80007c0 <uartTransmit>
			leuchten_out.Ruechwarn = (1 ^ leuchten_out.Ruechwarn);
 8002e52:	4b31      	ldr	r3, [pc, #196]	; (8002f18 <HAL_UART_RxCpltCallback+0x248>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f083 0301 	eor.w	r3, r3, #1
 8002e60:	b2d9      	uxtb	r1, r3
 8002e62:	4a2d      	ldr	r2, [pc, #180]	; (8002f18 <HAL_UART_RxCpltCallback+0x248>)
 8002e64:	7813      	ldrb	r3, [r2, #0]
 8002e66:	f361 1304 	bfi	r3, r1, #4, #1
 8002e6a:	7013      	strb	r3, [r2, #0]
 8002e6c:	e016      	b.n	8002e9c <HAL_UART_RxCpltCallback+0x1cc>
		}
		else
		{
			uint8_t c[10] = {204, 205, 205, 205, 205, 205, 205, 205, 205, 185};
 8002e6e:	4a26      	ldr	r2, [pc, #152]	; (8002f08 <HAL_UART_RxCpltCallback+0x238>)
 8002e70:	f107 0310 	add.w	r3, r7, #16
 8002e74:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e76:	c303      	stmia	r3!, {r0, r1}
 8002e78:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)"\a", 1, 100);
 8002e7a:	2364      	movs	r3, #100	; 0x64
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	4923      	ldr	r1, [pc, #140]	; (8002f0c <HAL_UART_RxCpltCallback+0x23c>)
 8002e80:	4820      	ldr	r0, [pc, #128]	; (8002f04 <HAL_UART_RxCpltCallback+0x234>)
 8002e82:	f003 fe2f 	bl	8006ae4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, c, 10, 100);
 8002e86:	f107 0110 	add.w	r1, r7, #16
 8002e8a:	2364      	movs	r3, #100	; 0x64
 8002e8c:	220a      	movs	r2, #10
 8002e8e:	481d      	ldr	r0, [pc, #116]	; (8002f04 <HAL_UART_RxCpltCallback+0x234>)
 8002e90:	f003 fe28 	bl	8006ae4 <HAL_UART_Transmit>
			uartTransmit("Falsche Eingabe\r\n", 17);
 8002e94:	2111      	movs	r1, #17
 8002e96:	4824      	ldr	r0, [pc, #144]	; (8002f28 <HAL_UART_RxCpltCallback+0x258>)
 8002e98:	f7fd fc92 	bl	80007c0 <uartTransmit>
		}
		uart_count = 0;
 8002e9c:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <HAL_UART_RxCpltCallback+0x228>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	701a      	strb	r2, [r3, #0]
	}

	if (uart_count == 12)
 8002ea2:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <HAL_UART_RxCpltCallback+0x228>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b0c      	cmp	r3, #12
 8002ea8:	d117      	bne.n	8002eda <HAL_UART_RxCpltCallback+0x20a>
	{
		uint8_t tmp = 0x81;
 8002eaa:	2381      	movs	r3, #129	; 0x81
 8002eac:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r\nEingabe Ung", 13, 100);
 8002eae:	2364      	movs	r3, #100	; 0x64
 8002eb0:	220d      	movs	r2, #13
 8002eb2:	491e      	ldr	r1, [pc, #120]	; (8002f2c <HAL_UART_RxCpltCallback+0x25c>)
 8002eb4:	4813      	ldr	r0, [pc, #76]	; (8002f04 <HAL_UART_RxCpltCallback+0x234>)
 8002eb6:	f003 fe15 	bl	8006ae4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, &tmp, 1, 100);
 8002eba:	f107 010f 	add.w	r1, r7, #15
 8002ebe:	2364      	movs	r3, #100	; 0x64
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	4810      	ldr	r0, [pc, #64]	; (8002f04 <HAL_UART_RxCpltCallback+0x234>)
 8002ec4:	f003 fe0e 	bl	8006ae4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) "ltig\r\n", 6, 100);
 8002ec8:	2364      	movs	r3, #100	; 0x64
 8002eca:	2206      	movs	r2, #6
 8002ecc:	4918      	ldr	r1, [pc, #96]	; (8002f30 <HAL_UART_RxCpltCallback+0x260>)
 8002ece:	480d      	ldr	r0, [pc, #52]	; (8002f04 <HAL_UART_RxCpltCallback+0x234>)
 8002ed0:	f003 fe08 	bl	8006ae4 <HAL_UART_Transmit>
		uart_count = 0;
 8002ed4:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <HAL_UART_RxCpltCallback+0x228>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	701a      	strb	r2, [r3, #0]
	}
    HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer[uart_count], 1);
 8002eda:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <HAL_UART_RxCpltCallback+0x228>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <HAL_UART_RxCpltCallback+0x22c>)
 8002ee2:	4413      	add	r3, r2
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4806      	ldr	r0, [pc, #24]	; (8002f04 <HAL_UART_RxCpltCallback+0x234>)
 8002eea:	f003 fe7e 	bl	8006bea <HAL_UART_Receive_IT>
}
 8002eee:	bf00      	nop
 8002ef0:	3728      	adds	r7, #40	; 0x28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	2000014c 	.word	0x2000014c
 8002efc:	20000134 	.word	0x20000134
 8002f00:	08008810 	.word	0x08008810
 8002f04:	200001b0 	.word	0x200001b0
 8002f08:	08008890 	.word	0x08008890
 8002f0c:	08008820 	.word	0x08008820
 8002f10:	20000140 	.word	0x20000140
 8002f14:	08008824 	.word	0x08008824
 8002f18:	20000050 	.word	0x20000050
 8002f1c:	08008834 	.word	0x08008834
 8002f20:	08008844 	.word	0x08008844
 8002f24:	08008854 	.word	0x08008854
 8002f28:	08008864 	.word	0x08008864
 8002f2c:	08008878 	.word	0x08008878
 8002f30:	08008888 	.word	0x08008888

08002f34 <HAL_CAN_RxFifo0MsgPendingCallback>:

// Can-Interrupt: Nachricht wartet
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
	// Nachricht aus Speicher auslesen
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8002f3e:	4a07      	ldr	r2, [pc, #28]	; (8002f5c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8002f40:	2100      	movs	r1, #0
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f001 fa16 	bl	8004374 <HAL_CAN_GetRxMessage>
	can_change = 1;
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	701a      	strb	r2, [r3, #0]
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000150 	.word	0x20000150
 8002f5c:	20000118 	.word	0x20000118
 8002f60:	20000159 	.word	0x20000159

08002f64 <HAL_CAN_RxFifo0FullCallback>:

// Can-Interrupt: Fifo0 ist voll
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
	// Fifo0 voll
	uartTransmit("Fifo0 von CAN3 ist voll\n", 24);
 8002f6c:	2118      	movs	r1, #24
 8002f6e:	4804      	ldr	r0, [pc, #16]	; (8002f80 <HAL_CAN_RxFifo0FullCallback+0x1c>)
 8002f70:	f7fd fc26 	bl	80007c0 <uartTransmit>

	Error_Handler();
 8002f74:	f000 f81c 	bl	8002fb0 <Error_Handler>
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	0800889c 	.word	0x0800889c

08002f84 <HAL_TIM_PeriodElapsedCallback>:

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)																	// Wenn Timer 6 den ueberlauf ausgeloest hat
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a06      	ldr	r2, [pc, #24]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d102      	bne.n	8002f9a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;														// Setze Millisekunden Flag
 8002f94:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	701a      	strb	r2, [r3, #0]
	}
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	20000164 	.word	0x20000164
 8002fac:	20000158 	.word	0x20000158

08002fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb4:	b672      	cpsid	i
}
 8002fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8002fb8:	4a11      	ldr	r2, [pc, #68]	; (8003000 <Error_Handler+0x50>)
 8002fba:	7853      	ldrb	r3, [r2, #1]
 8002fbc:	f043 0308 	orr.w	r3, r3, #8
 8002fc0:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8002fc2:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <Error_Handler+0x50>)
 8002fc4:	785b      	ldrb	r3, [r3, #1]
 8002fc6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	2104      	movs	r1, #4
 8002fd0:	480c      	ldr	r0, [pc, #48]	; (8003004 <Error_Handler+0x54>)
 8002fd2:	f002 f895 	bl	8005100 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8002fd6:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <Error_Handler+0x50>)
 8002fd8:	7853      	ldrb	r3, [r2, #1]
 8002fda:	f36f 1304 	bfc	r3, #4, #1
 8002fde:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 8002fe0:	4b07      	ldr	r3, [pc, #28]	; (8003000 <Error_Handler+0x50>)
 8002fe2:	785b      	ldrb	r3, [r3, #1]
 8002fe4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	461a      	mov	r2, r3
 8002fec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ff0:	4804      	ldr	r0, [pc, #16]	; (8003004 <Error_Handler+0x54>)
 8002ff2:	f002 f885 	bl	8005100 <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 8002ff6:	2122      	movs	r1, #34	; 0x22
 8002ff8:	4803      	ldr	r0, [pc, #12]	; (8003008 <Error_Handler+0x58>)
 8002ffa:	f7fd fbe1 	bl	80007c0 <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1);
 8002ffe:	e7fe      	b.n	8002ffe <Error_Handler+0x4e>
 8003000:	20000050 	.word	0x20000050
 8003004:	40020400 	.word	0x40020400
 8003008:	080088b8 	.word	0x080088b8

0800300c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003012:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <HAL_MspInit+0x44>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	4a0e      	ldr	r2, [pc, #56]	; (8003050 <HAL_MspInit+0x44>)
 8003018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800301c:	6413      	str	r3, [r2, #64]	; 0x40
 800301e:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <HAL_MspInit+0x44>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003026:	607b      	str	r3, [r7, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800302a:	4b09      	ldr	r3, [pc, #36]	; (8003050 <HAL_MspInit+0x44>)
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	4a08      	ldr	r2, [pc, #32]	; (8003050 <HAL_MspInit+0x44>)
 8003030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003034:	6453      	str	r3, [r2, #68]	; 0x44
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <HAL_MspInit+0x44>)
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800

08003054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003058:	e7fe      	b.n	8003058 <NMI_Handler+0x4>

0800305a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800305a:	b480      	push	{r7}
 800305c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800305e:	e7fe      	b.n	800305e <HardFault_Handler+0x4>

08003060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003064:	e7fe      	b.n	8003064 <MemManage_Handler+0x4>

08003066 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003066:	b480      	push	{r7}
 8003068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800306a:	e7fe      	b.n	800306a <BusFault_Handler+0x4>

0800306c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003070:	e7fe      	b.n	8003070 <UsageFault_Handler+0x4>

08003072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003072:	b480      	push	{r7}
 8003074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800308e:	b480      	push	{r7}
 8003090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003092:	bf00      	nop
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030a0:	f000 f98e 	bl	80033c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030a4:	bf00      	nop
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80030ac:	4802      	ldr	r0, [pc, #8]	; (80030b8 <USART2_IRQHandler+0x10>)
 80030ae:	f003 fde1 	bl	8006c74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	200001b0 	.word	0x200001b0

080030bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80030c0:	4802      	ldr	r0, [pc, #8]	; (80030cc <TIM6_DAC_IRQHandler+0x10>)
 80030c2:	f003 fa2d 	bl	8006520 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000164 	.word	0x20000164

080030d0 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 80030d4:	4802      	ldr	r0, [pc, #8]	; (80030e0 <CAN3_RX0_IRQHandler+0x10>)
 80030d6:	f001 fa85 	bl	80045e4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	200000f0 	.word	0x200000f0

080030e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030e8:	4b08      	ldr	r3, [pc, #32]	; (800310c <SystemInit+0x28>)
 80030ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ee:	4a07      	ldr	r2, [pc, #28]	; (800310c <SystemInit+0x28>)
 80030f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030f8:	4b04      	ldr	r3, [pc, #16]	; (800310c <SystemInit+0x28>)
 80030fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030fe:	609a      	str	r2, [r3, #8]
#endif
}
 8003100:	bf00      	nop
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003116:	1d3b      	adds	r3, r7, #4
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003120:	4b14      	ldr	r3, [pc, #80]	; (8003174 <MX_TIM6_Init+0x64>)
 8003122:	4a15      	ldr	r2, [pc, #84]	; (8003178 <MX_TIM6_Init+0x68>)
 8003124:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27-1;
 8003126:	4b13      	ldr	r3, [pc, #76]	; (8003174 <MX_TIM6_Init+0x64>)
 8003128:	221a      	movs	r2, #26
 800312a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800312c:	4b11      	ldr	r3, [pc, #68]	; (8003174 <MX_TIM6_Init+0x64>)
 800312e:	2200      	movs	r2, #0
 8003130:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000-1;
 8003132:	4b10      	ldr	r3, [pc, #64]	; (8003174 <MX_TIM6_Init+0x64>)
 8003134:	f640 729f 	movw	r2, #3999	; 0xf9f
 8003138:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <MX_TIM6_Init+0x64>)
 800313c:	2200      	movs	r2, #0
 800313e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003140:	480c      	ldr	r0, [pc, #48]	; (8003174 <MX_TIM6_Init+0x64>)
 8003142:	f003 f91d 	bl	8006380 <HAL_TIM_Base_Init>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800314c:	f7ff ff30 	bl	8002fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003150:	2300      	movs	r3, #0
 8003152:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003158:	1d3b      	adds	r3, r7, #4
 800315a:	4619      	mov	r1, r3
 800315c:	4805      	ldr	r0, [pc, #20]	; (8003174 <MX_TIM6_Init+0x64>)
 800315e:	f003 fbc7 	bl	80068f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003168:	f7ff ff22 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800316c:	bf00      	nop
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	20000164 	.word	0x20000164
 8003178:	40001000 	.word	0x40001000

0800317c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a0d      	ldr	r2, [pc, #52]	; (80031c0 <HAL_TIM_Base_MspInit+0x44>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d113      	bne.n	80031b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800318e:	4b0d      	ldr	r3, [pc, #52]	; (80031c4 <HAL_TIM_Base_MspInit+0x48>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	4a0c      	ldr	r2, [pc, #48]	; (80031c4 <HAL_TIM_Base_MspInit+0x48>)
 8003194:	f043 0310 	orr.w	r3, r3, #16
 8003198:	6413      	str	r3, [r2, #64]	; 0x40
 800319a:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <HAL_TIM_Base_MspInit+0x48>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f003 0310 	and.w	r3, r3, #16
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80031a6:	2200      	movs	r2, #0
 80031a8:	2100      	movs	r1, #0
 80031aa:	2036      	movs	r0, #54	; 0x36
 80031ac:	f001 fd1b 	bl	8004be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80031b0:	2036      	movs	r0, #54	; 0x36
 80031b2:	f001 fd34 	bl	8004c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40001000 	.word	0x40001000
 80031c4:	40023800 	.word	0x40023800

080031c8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031cc:	4b14      	ldr	r3, [pc, #80]	; (8003220 <MX_USART2_UART_Init+0x58>)
 80031ce:	4a15      	ldr	r2, [pc, #84]	; (8003224 <MX_USART2_UART_Init+0x5c>)
 80031d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80031d2:	4b13      	ldr	r3, [pc, #76]	; (8003220 <MX_USART2_UART_Init+0x58>)
 80031d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80031d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031da:	4b11      	ldr	r3, [pc, #68]	; (8003220 <MX_USART2_UART_Init+0x58>)
 80031dc:	2200      	movs	r2, #0
 80031de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031e0:	4b0f      	ldr	r3, [pc, #60]	; (8003220 <MX_USART2_UART_Init+0x58>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031e6:	4b0e      	ldr	r3, [pc, #56]	; (8003220 <MX_USART2_UART_Init+0x58>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <MX_USART2_UART_Init+0x58>)
 80031ee:	220c      	movs	r2, #12
 80031f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031f2:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <MX_USART2_UART_Init+0x58>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031f8:	4b09      	ldr	r3, [pc, #36]	; (8003220 <MX_USART2_UART_Init+0x58>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031fe:	4b08      	ldr	r3, [pc, #32]	; (8003220 <MX_USART2_UART_Init+0x58>)
 8003200:	2200      	movs	r2, #0
 8003202:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <MX_USART2_UART_Init+0x58>)
 8003206:	2200      	movs	r2, #0
 8003208:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800320a:	4805      	ldr	r0, [pc, #20]	; (8003220 <MX_USART2_UART_Init+0x58>)
 800320c:	f003 fc1c 	bl	8006a48 <HAL_UART_Init>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003216:	f7ff fecb 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	200001b0 	.word	0x200001b0
 8003224:	40004400 	.word	0x40004400

08003228 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b0ae      	sub	sp, #184	; 0xb8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003230:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	60da      	str	r2, [r3, #12]
 800323e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003240:	f107 0314 	add.w	r3, r7, #20
 8003244:	2290      	movs	r2, #144	; 0x90
 8003246:	2100      	movs	r1, #0
 8003248:	4618      	mov	r0, r3
 800324a:	f004 ff33 	bl	80080b4 <memset>
  if(uartHandle->Instance==USART2)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a25      	ldr	r2, [pc, #148]	; (80032e8 <HAL_UART_MspInit+0xc0>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d142      	bne.n	80032de <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003258:	2380      	movs	r3, #128	; 0x80
 800325a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800325c:	2300      	movs	r3, #0
 800325e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003260:	f107 0314 	add.w	r3, r7, #20
 8003264:	4618      	mov	r0, r3
 8003266:	f002 fc63 	bl	8005b30 <HAL_RCCEx_PeriphCLKConfig>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003270:	f7ff fe9e 	bl	8002fb0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003274:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <HAL_UART_MspInit+0xc4>)
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	4a1c      	ldr	r2, [pc, #112]	; (80032ec <HAL_UART_MspInit+0xc4>)
 800327a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800327e:	6413      	str	r3, [r2, #64]	; 0x40
 8003280:	4b1a      	ldr	r3, [pc, #104]	; (80032ec <HAL_UART_MspInit+0xc4>)
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800328c:	4b17      	ldr	r3, [pc, #92]	; (80032ec <HAL_UART_MspInit+0xc4>)
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	4a16      	ldr	r2, [pc, #88]	; (80032ec <HAL_UART_MspInit+0xc4>)
 8003292:	f043 0308 	orr.w	r3, r3, #8
 8003296:	6313      	str	r3, [r2, #48]	; 0x30
 8003298:	4b14      	ldr	r3, [pc, #80]	; (80032ec <HAL_UART_MspInit+0xc4>)
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART2TX_Pin|DEBUG_UART2RX_Pin;
 80032a4:	2360      	movs	r3, #96	; 0x60
 80032a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032aa:	2302      	movs	r3, #2
 80032ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b6:	2303      	movs	r3, #3
 80032b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032bc:	2307      	movs	r3, #7
 80032be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032c2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80032c6:	4619      	mov	r1, r3
 80032c8:	4809      	ldr	r0, [pc, #36]	; (80032f0 <HAL_UART_MspInit+0xc8>)
 80032ca:	f001 fd55 	bl	8004d78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80032ce:	2200      	movs	r2, #0
 80032d0:	2100      	movs	r1, #0
 80032d2:	2026      	movs	r0, #38	; 0x26
 80032d4:	f001 fc87 	bl	8004be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032d8:	2026      	movs	r0, #38	; 0x26
 80032da:	f001 fca0 	bl	8004c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80032de:	bf00      	nop
 80032e0:	37b8      	adds	r7, #184	; 0xb8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40004400 	.word	0x40004400
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40020c00 	.word	0x40020c00

080032f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800332c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80032f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032fa:	e003      	b.n	8003304 <LoopCopyDataInit>

080032fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032fc:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80032fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003300:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003302:	3104      	adds	r1, #4

08003304 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003304:	480b      	ldr	r0, [pc, #44]	; (8003334 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003306:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003308:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800330a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800330c:	d3f6      	bcc.n	80032fc <CopyDataInit>
  ldr  r2, =_sbss
 800330e:	4a0b      	ldr	r2, [pc, #44]	; (800333c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003310:	e002      	b.n	8003318 <LoopFillZerobss>

08003312 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003312:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003314:	f842 3b04 	str.w	r3, [r2], #4

08003318 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003318:	4b09      	ldr	r3, [pc, #36]	; (8003340 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800331a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800331c:	d3f9      	bcc.n	8003312 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800331e:	f7ff fee1 	bl	80030e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003322:	f004 fea3 	bl	800806c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003326:	f7ff f839 	bl	800239c <main>
  bx  lr    
 800332a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800332c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003330:	0800892c 	.word	0x0800892c
  ldr  r0, =_sdata
 8003334:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003338:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800333c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003340:	2000023c 	.word	0x2000023c

08003344 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003344:	e7fe      	b.n	8003344 <ADC_IRQHandler>

08003346 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800334a:	2003      	movs	r0, #3
 800334c:	f001 fc40 	bl	8004bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003350:	2000      	movs	r0, #0
 8003352:	f000 f805 	bl	8003360 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003356:	f7ff fe59 	bl	800300c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003368:	4b12      	ldr	r3, [pc, #72]	; (80033b4 <HAL_InitTick+0x54>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <HAL_InitTick+0x58>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	4619      	mov	r1, r3
 8003372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003376:	fbb3 f3f1 	udiv	r3, r3, r1
 800337a:	fbb2 f3f3 	udiv	r3, r2, r3
 800337e:	4618      	mov	r0, r3
 8003380:	f001 fc5b 	bl	8004c3a <HAL_SYSTICK_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e00e      	b.n	80033ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b0f      	cmp	r3, #15
 8003392:	d80a      	bhi.n	80033aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003394:	2200      	movs	r2, #0
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	f04f 30ff 	mov.w	r0, #4294967295
 800339c:	f001 fc23 	bl	8004be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033a0:	4a06      	ldr	r2, [pc, #24]	; (80033bc <HAL_InitTick+0x5c>)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	e000      	b.n	80033ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	20000000 	.word	0x20000000
 80033b8:	20000008 	.word	0x20000008
 80033bc:	20000004 	.word	0x20000004

080033c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033c4:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <HAL_IncTick+0x20>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_IncTick+0x24>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4413      	add	r3, r2
 80033d0:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <HAL_IncTick+0x24>)
 80033d2:	6013      	str	r3, [r2, #0]
}
 80033d4:	bf00      	nop
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	20000008 	.word	0x20000008
 80033e4:	20000238 	.word	0x20000238

080033e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return uwTick;
 80033ec:	4b03      	ldr	r3, [pc, #12]	; (80033fc <HAL_GetTick+0x14>)
 80033ee:	681b      	ldr	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20000238 	.word	0x20000238

08003400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003408:	f7ff ffee 	bl	80033e8 <HAL_GetTick>
 800340c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003418:	d005      	beq.n	8003426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800341a:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <HAL_Delay+0x44>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4413      	add	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003426:	bf00      	nop
 8003428:	f7ff ffde 	bl	80033e8 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	429a      	cmp	r2, r3
 8003436:	d8f7      	bhi.n	8003428 <HAL_Delay+0x28>
  {
  }
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20000008 	.word	0x20000008

08003448 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 800344c:	4b02      	ldr	r3, [pc, #8]	; (8003458 <HAL_GetHalVersion+0x10>)
}
 800344e:	4618      	mov	r0, r3
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	01030000 	.word	0x01030000

0800345c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8003460:	4b03      	ldr	r3, [pc, #12]	; (8003470 <HAL_GetREVID+0x14>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	0c1b      	lsrs	r3, r3, #16
}
 8003466:	4618      	mov	r0, r3
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e0042000 	.word	0xe0042000

08003474 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8003478:	4b04      	ldr	r3, [pc, #16]	; (800348c <HAL_GetDEVID+0x18>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8003480:	4618      	mov	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	e0042000 	.word	0xe0042000

08003490 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8003494:	4b03      	ldr	r3, [pc, #12]	; (80034a4 <HAL_GetUIDw0+0x14>)
 8003496:	681b      	ldr	r3, [r3, #0]
}
 8003498:	4618      	mov	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	1ff0f420 	.word	0x1ff0f420

080034a8 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80034ac:	4b03      	ldr	r3, [pc, #12]	; (80034bc <HAL_GetUIDw1+0x14>)
 80034ae:	681b      	ldr	r3, [r3, #0]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	1ff0f424 	.word	0x1ff0f424

080034c0 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80034c4:	4b03      	ldr	r3, [pc, #12]	; (80034d4 <HAL_GetUIDw2+0x14>)
 80034c6:	681b      	ldr	r3, [r3, #0]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	1ff0f428 	.word	0x1ff0f428

080034d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e031      	b.n	8003552 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d109      	bne.n	800350a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fe fbc6 	bl	8001c88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b00      	cmp	r3, #0
 8003514:	d116      	bne.n	8003544 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800351a:	4b10      	ldr	r3, [pc, #64]	; (800355c <HAL_ADC_Init+0x84>)
 800351c:	4013      	ands	r3, r2
 800351e:	f043 0202 	orr.w	r2, r3, #2
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 fb0a 	bl	8003b40 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f023 0303 	bic.w	r3, r3, #3
 800353a:	f043 0201 	orr.w	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	641a      	str	r2, [r3, #64]	; 0x40
 8003542:	e001      	b.n	8003548 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003550:	7bfb      	ldrb	r3, [r7, #15]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	ffffeefd 	.word	0xffffeefd

08003560 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_ADC_Start+0x1a>
 8003576:	2302      	movs	r3, #2
 8003578:	e0ad      	b.n	80036d6 <HAL_ADC_Start+0x176>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b01      	cmp	r3, #1
 800358e:	d018      	beq.n	80035c2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0201 	orr.w	r2, r2, #1
 800359e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80035a0:	4b50      	ldr	r3, [pc, #320]	; (80036e4 <HAL_ADC_Start+0x184>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a50      	ldr	r2, [pc, #320]	; (80036e8 <HAL_ADC_Start+0x188>)
 80035a6:	fba2 2303 	umull	r2, r3, r2, r3
 80035aa:	0c9a      	lsrs	r2, r3, #18
 80035ac:	4613      	mov	r3, r2
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	4413      	add	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80035b4:	e002      	b.n	80035bc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	3b01      	subs	r3, #1
 80035ba:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f9      	bne.n	80035b6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d175      	bne.n	80036bc <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035d4:	4b45      	ldr	r3, [pc, #276]	; (80036ec <HAL_ADC_Start+0x18c>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d007      	beq.n	80035fe <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360a:	d106      	bne.n	800361a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003610:	f023 0206 	bic.w	r2, r3, #6
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	645a      	str	r2, [r3, #68]	; 0x44
 8003618:	e002      	b.n	8003620 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003630:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003632:	4b2f      	ldr	r3, [pc, #188]	; (80036f0 <HAL_ADC_Start+0x190>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f003 031f 	and.w	r3, r3, #31
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10f      	bne.n	800365e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d143      	bne.n	80036d4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800365a:	609a      	str	r2, [r3, #8]
 800365c:	e03a      	b.n	80036d4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a24      	ldr	r2, [pc, #144]	; (80036f4 <HAL_ADC_Start+0x194>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d10e      	bne.n	8003686 <HAL_ADC_Start+0x126>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d107      	bne.n	8003686 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003684:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003686:	4b1a      	ldr	r3, [pc, #104]	; (80036f0 <HAL_ADC_Start+0x190>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 0310 	and.w	r3, r3, #16
 800368e:	2b00      	cmp	r3, #0
 8003690:	d120      	bne.n	80036d4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a18      	ldr	r2, [pc, #96]	; (80036f8 <HAL_ADC_Start+0x198>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d11b      	bne.n	80036d4 <HAL_ADC_Start+0x174>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d114      	bne.n	80036d4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036b8:	609a      	str	r2, [r3, #8]
 80036ba:	e00b      	b.n	80036d4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	f043 0210 	orr.w	r2, r3, #16
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036cc:	f043 0201 	orr.w	r2, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	20000000 	.word	0x20000000
 80036e8:	431bde83 	.word	0x431bde83
 80036ec:	fffff8fe 	.word	0xfffff8fe
 80036f0:	40012300 	.word	0x40012300
 80036f4:	40012000 	.word	0x40012000
 80036f8:	40012200 	.word	0x40012200

080036fc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_ADC_Stop+0x16>
 800370e:	2302      	movs	r3, #2
 8003710:	e01f      	b.n	8003752 <HAL_ADC_Stop+0x56>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0201 	bic.w	r2, r2, #1
 8003728:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d107      	bne.n	8003748 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800373c:	4b08      	ldr	r3, [pc, #32]	; (8003760 <HAL_ADC_Stop+0x64>)
 800373e:	4013      	ands	r3, r2
 8003740:	f043 0201 	orr.w	r2, r3, #1
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	ffffeefe 	.word	0xffffeefe

08003764 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800377c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003780:	d113      	bne.n	80037aa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800378c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003790:	d10b      	bne.n	80037aa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f043 0220 	orr.w	r2, r3, #32
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e063      	b.n	8003872 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80037aa:	f7ff fe1d 	bl	80033e8 <HAL_GetTick>
 80037ae:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80037b0:	e021      	b.n	80037f6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b8:	d01d      	beq.n	80037f6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d007      	beq.n	80037d0 <HAL_ADC_PollForConversion+0x6c>
 80037c0:	f7ff fe12 	bl	80033e8 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d212      	bcs.n	80037f6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d00b      	beq.n	80037f6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f043 0204 	orr.w	r2, r3, #4
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e03d      	b.n	8003872 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b02      	cmp	r3, #2
 8003802:	d1d6      	bne.n	80037b2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0212 	mvn.w	r2, #18
 800380c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d123      	bne.n	8003870 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800382c:	2b00      	cmp	r3, #0
 800382e:	d11f      	bne.n	8003870 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800383a:	2b00      	cmp	r3, #0
 800383c:	d006      	beq.n	800384c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003848:	2b00      	cmp	r3, #0
 800384a:	d111      	bne.n	8003870 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d105      	bne.n	8003870 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	f043 0201 	orr.w	r2, r3, #1
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x1c>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e136      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x28a>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b09      	cmp	r3, #9
 80038be:	d93a      	bls.n	8003936 <HAL_ADC_ConfigChannel+0xa2>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038c8:	d035      	beq.n	8003936 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68d9      	ldr	r1, [r3, #12]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	4613      	mov	r3, r2
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	4413      	add	r3, r2
 80038de:	3b1e      	subs	r3, #30
 80038e0:	2207      	movs	r2, #7
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	43da      	mvns	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	400a      	ands	r2, r1
 80038ee:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a8d      	ldr	r2, [pc, #564]	; (8003b2c <HAL_ADC_ConfigChannel+0x298>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d10a      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68d9      	ldr	r1, [r3, #12]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	061a      	lsls	r2, r3, #24
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800390e:	e035      	b.n	800397c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68d9      	ldr	r1, [r3, #12]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	b29b      	uxth	r3, r3
 8003920:	4618      	mov	r0, r3
 8003922:	4603      	mov	r3, r0
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	4403      	add	r3, r0
 8003928:	3b1e      	subs	r3, #30
 800392a:	409a      	lsls	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003934:	e022      	b.n	800397c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6919      	ldr	r1, [r3, #16]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	b29b      	uxth	r3, r3
 8003942:	461a      	mov	r2, r3
 8003944:	4613      	mov	r3, r2
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	4413      	add	r3, r2
 800394a:	2207      	movs	r2, #7
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	43da      	mvns	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	400a      	ands	r2, r1
 8003958:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6919      	ldr	r1, [r3, #16]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	b29b      	uxth	r3, r3
 800396a:	4618      	mov	r0, r3
 800396c:	4603      	mov	r3, r0
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	4403      	add	r3, r0
 8003972:	409a      	lsls	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b06      	cmp	r3, #6
 8003982:	d824      	bhi.n	80039ce <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	4613      	mov	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	3b05      	subs	r3, #5
 8003996:	221f      	movs	r2, #31
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	43da      	mvns	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	400a      	ands	r2, r1
 80039a4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	4618      	mov	r0, r3
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	3b05      	subs	r3, #5
 80039c0:	fa00 f203 	lsl.w	r2, r0, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	635a      	str	r2, [r3, #52]	; 0x34
 80039cc:	e04c      	b.n	8003a68 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b0c      	cmp	r3, #12
 80039d4:	d824      	bhi.n	8003a20 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	3b23      	subs	r3, #35	; 0x23
 80039e8:	221f      	movs	r2, #31
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43da      	mvns	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	400a      	ands	r2, r1
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	4618      	mov	r0, r3
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	3b23      	subs	r3, #35	; 0x23
 8003a12:	fa00 f203 	lsl.w	r2, r0, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30
 8003a1e:	e023      	b.n	8003a68 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	3b41      	subs	r3, #65	; 0x41
 8003a32:	221f      	movs	r2, #31
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	43da      	mvns	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	400a      	ands	r2, r1
 8003a40:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	4618      	mov	r0, r3
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	3b41      	subs	r3, #65	; 0x41
 8003a5c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a30      	ldr	r2, [pc, #192]	; (8003b30 <HAL_ADC_ConfigChannel+0x29c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d10a      	bne.n	8003a88 <HAL_ADC_ConfigChannel+0x1f4>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a7a:	d105      	bne.n	8003a88 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003a7c:	4b2d      	ldr	r3, [pc, #180]	; (8003b34 <HAL_ADC_ConfigChannel+0x2a0>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	4a2c      	ldr	r2, [pc, #176]	; (8003b34 <HAL_ADC_ConfigChannel+0x2a0>)
 8003a82:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003a86:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a28      	ldr	r2, [pc, #160]	; (8003b30 <HAL_ADC_ConfigChannel+0x29c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d10f      	bne.n	8003ab2 <HAL_ADC_ConfigChannel+0x21e>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b12      	cmp	r3, #18
 8003a98:	d10b      	bne.n	8003ab2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003a9a:	4b26      	ldr	r3, [pc, #152]	; (8003b34 <HAL_ADC_ConfigChannel+0x2a0>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	4a25      	ldr	r2, [pc, #148]	; (8003b34 <HAL_ADC_ConfigChannel+0x2a0>)
 8003aa0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003aa4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003aa6:	4b23      	ldr	r3, [pc, #140]	; (8003b34 <HAL_ADC_ConfigChannel+0x2a0>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	4a22      	ldr	r2, [pc, #136]	; (8003b34 <HAL_ADC_ConfigChannel+0x2a0>)
 8003aac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ab0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a1e      	ldr	r2, [pc, #120]	; (8003b30 <HAL_ADC_ConfigChannel+0x29c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d12b      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x280>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a1a      	ldr	r2, [pc, #104]	; (8003b2c <HAL_ADC_ConfigChannel+0x298>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d003      	beq.n	8003ace <HAL_ADC_ConfigChannel+0x23a>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b11      	cmp	r3, #17
 8003acc:	d122      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003ace:	4b19      	ldr	r3, [pc, #100]	; (8003b34 <HAL_ADC_ConfigChannel+0x2a0>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4a18      	ldr	r2, [pc, #96]	; (8003b34 <HAL_ADC_ConfigChannel+0x2a0>)
 8003ad4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003ad8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003ada:	4b16      	ldr	r3, [pc, #88]	; (8003b34 <HAL_ADC_ConfigChannel+0x2a0>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	4a15      	ldr	r2, [pc, #84]	; (8003b34 <HAL_ADC_ConfigChannel+0x2a0>)
 8003ae0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ae4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a10      	ldr	r2, [pc, #64]	; (8003b2c <HAL_ADC_ConfigChannel+0x298>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d111      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003af0:	4b11      	ldr	r3, [pc, #68]	; (8003b38 <HAL_ADC_ConfigChannel+0x2a4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a11      	ldr	r2, [pc, #68]	; (8003b3c <HAL_ADC_ConfigChannel+0x2a8>)
 8003af6:	fba2 2303 	umull	r2, r3, r2, r3
 8003afa:	0c9a      	lsrs	r2, r3, #18
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003b06:	e002      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1f9      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	10000012 	.word	0x10000012
 8003b30:	40012000 	.word	0x40012000
 8003b34:	40012300 	.word	0x40012300
 8003b38:	20000000 	.word	0x20000000
 8003b3c:	431bde83 	.word	0x431bde83

08003b40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003b48:	4b78      	ldr	r3, [pc, #480]	; (8003d2c <ADC_Init+0x1ec>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	4a77      	ldr	r2, [pc, #476]	; (8003d2c <ADC_Init+0x1ec>)
 8003b4e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003b52:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003b54:	4b75      	ldr	r3, [pc, #468]	; (8003d2c <ADC_Init+0x1ec>)
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	4973      	ldr	r1, [pc, #460]	; (8003d2c <ADC_Init+0x1ec>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6859      	ldr	r1, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	021a      	lsls	r2, r3, #8
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003b94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6859      	ldr	r1, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6899      	ldr	r1, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bce:	4a58      	ldr	r2, [pc, #352]	; (8003d30 <ADC_Init+0x1f0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d022      	beq.n	8003c1a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003be2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6899      	ldr	r1, [r3, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6899      	ldr	r1, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	609a      	str	r2, [r3, #8]
 8003c18:	e00f      	b.n	8003c3a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0202 	bic.w	r2, r2, #2
 8003c48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6899      	ldr	r1, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	005a      	lsls	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01b      	beq.n	8003ca0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003c86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6859      	ldr	r1, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	3b01      	subs	r3, #1
 8003c94:	035a      	lsls	r2, r3, #13
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]
 8003c9e:	e007      	b.n	8003cb0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	051a      	lsls	r2, r3, #20
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ce4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6899      	ldr	r1, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003cf2:	025a      	lsls	r2, r3, #9
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6899      	ldr	r1, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	029a      	lsls	r2, r3, #10
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	609a      	str	r2, [r3, #8]
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40012300 	.word	0x40012300
 8003d30:	0f000001 	.word	0x0f000001

08003d34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e0ed      	b.n	8003f22 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d102      	bne.n	8003d58 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7fe f8b2 	bl	8001ebc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d68:	f7ff fb3e 	bl	80033e8 <HAL_GetTick>
 8003d6c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d6e:	e012      	b.n	8003d96 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d70:	f7ff fb3a 	bl	80033e8 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b0a      	cmp	r3, #10
 8003d7c:	d90b      	bls.n	8003d96 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2205      	movs	r2, #5
 8003d8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e0c5      	b.n	8003f22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0e5      	beq.n	8003d70 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0202 	bic.w	r2, r2, #2
 8003db2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003db4:	f7ff fb18 	bl	80033e8 <HAL_GetTick>
 8003db8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003dba:	e012      	b.n	8003de2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003dbc:	f7ff fb14 	bl	80033e8 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b0a      	cmp	r3, #10
 8003dc8:	d90b      	bls.n	8003de2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2205      	movs	r2, #5
 8003dda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e09f      	b.n	8003f22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e5      	bne.n	8003dbc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	7e1b      	ldrb	r3, [r3, #24]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d108      	bne.n	8003e0a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	e007      	b.n	8003e1a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	7e5b      	ldrb	r3, [r3, #25]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d108      	bne.n	8003e34 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	e007      	b.n	8003e44 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	7e9b      	ldrb	r3, [r3, #26]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d108      	bne.n	8003e5e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0220 	orr.w	r2, r2, #32
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	e007      	b.n	8003e6e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0220 	bic.w	r2, r2, #32
 8003e6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	7edb      	ldrb	r3, [r3, #27]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d108      	bne.n	8003e88 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0210 	bic.w	r2, r2, #16
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e007      	b.n	8003e98 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0210 	orr.w	r2, r2, #16
 8003e96:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	7f1b      	ldrb	r3, [r3, #28]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d108      	bne.n	8003eb2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0208 	orr.w	r2, r2, #8
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	e007      	b.n	8003ec2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0208 	bic.w	r2, r2, #8
 8003ec0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	7f5b      	ldrb	r3, [r3, #29]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d108      	bne.n	8003edc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0204 	orr.w	r2, r2, #4
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	e007      	b.n	8003eec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0204 	bic.w	r2, r2, #4
 8003eea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	ea42 0103 	orr.w	r1, r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	1e5a      	subs	r2, r3, #1
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f42:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003f44:	7cfb      	ldrb	r3, [r7, #19]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d003      	beq.n	8003f52 <HAL_CAN_ConfigFilter+0x26>
 8003f4a:	7cfb      	ldrb	r3, [r7, #19]
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	f040 80c7 	bne.w	80040e0 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a69      	ldr	r2, [pc, #420]	; (80040fc <HAL_CAN_ConfigFilter+0x1d0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d001      	beq.n	8003f60 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8003f5c:	4b68      	ldr	r3, [pc, #416]	; (8004100 <HAL_CAN_ConfigFilter+0x1d4>)
 8003f5e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f66:	f043 0201 	orr.w	r2, r3, #1
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	4a63      	ldr	r2, [pc, #396]	; (8004100 <HAL_CAN_ConfigFilter+0x1d4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d111      	bne.n	8003f9c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f7e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	021b      	lsls	r3, r3, #8
 8003f94:	431a      	orrs	r2, r3
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	f003 031f 	and.w	r3, r3, #31
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d123      	bne.n	800400e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	401a      	ands	r2, r3
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003fe8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	3248      	adds	r2, #72	; 0x48
 8003fee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004002:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004004:	6979      	ldr	r1, [r7, #20]
 8004006:	3348      	adds	r3, #72	; 0x48
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	440b      	add	r3, r1
 800400c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d122      	bne.n	800405c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	431a      	orrs	r2, r3
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004036:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	3248      	adds	r2, #72	; 0x48
 800403c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004050:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004052:	6979      	ldr	r1, [r7, #20]
 8004054:	3348      	adds	r3, #72	; 0x48
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	440b      	add	r3, r1
 800405a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d109      	bne.n	8004078 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	43db      	mvns	r3, r3
 800406e:	401a      	ands	r2, r3
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004076:	e007      	b.n	8004088 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	431a      	orrs	r2, r3
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d109      	bne.n	80040a4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	43db      	mvns	r3, r3
 800409a:	401a      	ands	r2, r3
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80040a2:	e007      	b.n	80040b4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	431a      	orrs	r2, r3
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d107      	bne.n	80040cc <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	431a      	orrs	r2, r3
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80040d2:	f023 0201 	bic.w	r2, r3, #1
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	e006      	b.n	80040ee <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
  }
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	371c      	adds	r7, #28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40003400 	.word	0x40003400
 8004100:	40006400 	.word	0x40006400

08004104 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b01      	cmp	r3, #1
 8004116:	d12e      	bne.n	8004176 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0201 	bic.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004130:	f7ff f95a 	bl	80033e8 <HAL_GetTick>
 8004134:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004136:	e012      	b.n	800415e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004138:	f7ff f956 	bl	80033e8 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b0a      	cmp	r3, #10
 8004144:	d90b      	bls.n	800415e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2205      	movs	r2, #5
 8004156:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e012      	b.n	8004184 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e5      	bne.n	8004138 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	e006      	b.n	8004184 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
  }
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800418c:	b480      	push	{r7}
 800418e:	b089      	sub	sp, #36	; 0x24
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041a0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80041aa:	7ffb      	ldrb	r3, [r7, #31]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d003      	beq.n	80041b8 <HAL_CAN_AddTxMessage+0x2c>
 80041b0:	7ffb      	ldrb	r3, [r7, #31]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	f040 80ad 	bne.w	8004312 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10a      	bne.n	80041d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d105      	bne.n	80041d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f000 8095 	beq.w	8004302 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	0e1b      	lsrs	r3, r3, #24
 80041dc:	f003 0303 	and.w	r3, r3, #3
 80041e0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80041e2:	2201      	movs	r2, #1
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	409a      	lsls	r2, r3
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10d      	bne.n	8004210 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80041fe:	68f9      	ldr	r1, [r7, #12]
 8004200:	6809      	ldr	r1, [r1, #0]
 8004202:	431a      	orrs	r2, r3
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	3318      	adds	r3, #24
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	440b      	add	r3, r1
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	e00f      	b.n	8004230 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800421a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004220:	68f9      	ldr	r1, [r7, #12]
 8004222:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004224:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	3318      	adds	r3, #24
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	440b      	add	r3, r1
 800422e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6819      	ldr	r1, [r3, #0]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	691a      	ldr	r2, [r3, #16]
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	3318      	adds	r3, #24
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	440b      	add	r3, r1
 8004240:	3304      	adds	r3, #4
 8004242:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	7d1b      	ldrb	r3, [r3, #20]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d111      	bne.n	8004270 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	3318      	adds	r3, #24
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	4413      	add	r3, r2
 8004258:	3304      	adds	r3, #4
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	6811      	ldr	r1, [r2, #0]
 8004260:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	3318      	adds	r3, #24
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	440b      	add	r3, r1
 800426c:	3304      	adds	r3, #4
 800426e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3307      	adds	r3, #7
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	061a      	lsls	r2, r3, #24
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3306      	adds	r3, #6
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	041b      	lsls	r3, r3, #16
 8004280:	431a      	orrs	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3305      	adds	r3, #5
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	021b      	lsls	r3, r3, #8
 800428a:	4313      	orrs	r3, r2
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	3204      	adds	r2, #4
 8004290:	7812      	ldrb	r2, [r2, #0]
 8004292:	4610      	mov	r0, r2
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	6811      	ldr	r1, [r2, #0]
 8004298:	ea43 0200 	orr.w	r2, r3, r0
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	440b      	add	r3, r1
 80042a2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80042a6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3303      	adds	r3, #3
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	061a      	lsls	r2, r3, #24
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3302      	adds	r3, #2
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	041b      	lsls	r3, r3, #16
 80042b8:	431a      	orrs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3301      	adds	r3, #1
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	021b      	lsls	r3, r3, #8
 80042c2:	4313      	orrs	r3, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	7812      	ldrb	r2, [r2, #0]
 80042c8:	4610      	mov	r0, r2
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	6811      	ldr	r1, [r2, #0]
 80042ce:	ea43 0200 	orr.w	r2, r3, r0
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	440b      	add	r3, r1
 80042d8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80042dc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	3318      	adds	r3, #24
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	4413      	add	r3, r2
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	6811      	ldr	r1, [r2, #0]
 80042f0:	f043 0201 	orr.w	r2, r3, #1
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	3318      	adds	r3, #24
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	440b      	add	r3, r1
 80042fc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	e00e      	b.n	8004320 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e006      	b.n	8004320 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
  }
}
 8004320:	4618      	mov	r0, r3
 8004322:	3724      	adds	r7, #36	; 0x24
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004340:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8004342:	7afb      	ldrb	r3, [r7, #11]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d002      	beq.n	800434e <HAL_CAN_IsTxMessagePending+0x22>
 8004348:	7afb      	ldrb	r3, [r7, #11]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d10b      	bne.n	8004366 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	069b      	lsls	r3, r3, #26
 8004358:	401a      	ands	r2, r3
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	069b      	lsls	r3, r3, #26
 800435e:	429a      	cmp	r2, r3
 8004360:	d001      	beq.n	8004366 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8004362:	2301      	movs	r3, #1
 8004364:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8004366:	68fb      	ldr	r3, [r7, #12]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004388:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800438a:	7dfb      	ldrb	r3, [r7, #23]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d003      	beq.n	8004398 <HAL_CAN_GetRxMessage+0x24>
 8004390:	7dfb      	ldrb	r3, [r7, #23]
 8004392:	2b02      	cmp	r3, #2
 8004394:	f040 80f3 	bne.w	800457e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10e      	bne.n	80043bc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f003 0303 	and.w	r3, r3, #3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d116      	bne.n	80043da <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e0e7      	b.n	800458c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d107      	bne.n	80043da <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e0d8      	b.n	800458c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	331b      	adds	r3, #27
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	4413      	add	r3, r2
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0204 	and.w	r2, r3, #4
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10c      	bne.n	8004412 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	331b      	adds	r3, #27
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	4413      	add	r3, r2
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	0d5b      	lsrs	r3, r3, #21
 8004408:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	e00b      	b.n	800442a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	331b      	adds	r3, #27
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	4413      	add	r3, r2
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	08db      	lsrs	r3, r3, #3
 8004422:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	331b      	adds	r3, #27
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	4413      	add	r3, r2
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0202 	and.w	r2, r3, #2
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	331b      	adds	r3, #27
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	4413      	add	r3, r2
 800444c:	3304      	adds	r3, #4
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 020f 	and.w	r2, r3, #15
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	331b      	adds	r3, #27
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	4413      	add	r3, r2
 8004464:	3304      	adds	r3, #4
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	0a1b      	lsrs	r3, r3, #8
 800446a:	b2da      	uxtb	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	331b      	adds	r3, #27
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	4413      	add	r3, r2
 800447c:	3304      	adds	r3, #4
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	0c1b      	lsrs	r3, r3, #16
 8004482:	b29a      	uxth	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	4413      	add	r3, r2
 8004492:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	b2da      	uxtb	r2, r3
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	0a1a      	lsrs	r2, r3, #8
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	3301      	adds	r3, #1
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	0c1a      	lsrs	r2, r3, #16
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	3302      	adds	r3, #2
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	4413      	add	r3, r2
 80044dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	0e1a      	lsrs	r2, r3, #24
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	3303      	adds	r3, #3
 80044e8:	b2d2      	uxtb	r2, r2
 80044ea:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	3304      	adds	r3, #4
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	4413      	add	r3, r2
 800450e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	0a1a      	lsrs	r2, r3, #8
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	3305      	adds	r3, #5
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	4413      	add	r3, r2
 8004528:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	0c1a      	lsrs	r2, r3, #16
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	3306      	adds	r3, #6
 8004534:	b2d2      	uxtb	r2, r2
 8004536:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	4413      	add	r3, r2
 8004542:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	0e1a      	lsrs	r2, r3, #24
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	3307      	adds	r3, #7
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d108      	bne.n	800456a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68da      	ldr	r2, [r3, #12]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0220 	orr.w	r2, r2, #32
 8004566:	60da      	str	r2, [r3, #12]
 8004568:	e007      	b.n	800457a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0220 	orr.w	r2, r2, #32
 8004578:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	e006      	b.n	800458c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
  }
}
 800458c:	4618      	mov	r0, r3
 800458e:	371c      	adds	r7, #28
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045a8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d002      	beq.n	80045b6 <HAL_CAN_ActivateNotification+0x1e>
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d109      	bne.n	80045ca <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6959      	ldr	r1, [r3, #20]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	e006      	b.n	80045d8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
  }
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08a      	sub	sp, #40	; 0x28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80045ec:	2300      	movs	r3, #0
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d07c      	beq.n	8004724 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d023      	beq.n	800467c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2201      	movs	r2, #1
 800463a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f983 	bl	8004952 <HAL_CAN_TxMailbox0CompleteCallback>
 800464c:	e016      	b.n	800467c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	d004      	beq.n	8004662 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
 8004660:	e00c      	b.n	800467c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	f003 0308 	and.w	r3, r3, #8
 8004668:	2b00      	cmp	r3, #0
 800466a:	d004      	beq.n	8004676 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
 8004674:	e002      	b.n	800467c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f989 	bl	800498e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004682:	2b00      	cmp	r3, #0
 8004684:	d024      	beq.n	80046d0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800468e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f963 	bl	8004966 <HAL_CAN_TxMailbox1CompleteCallback>
 80046a0:	e016      	b.n	80046d0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d004      	beq.n	80046b6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80046b2:	627b      	str	r3, [r7, #36]	; 0x24
 80046b4:	e00c      	b.n	80046d0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d004      	beq.n	80046ca <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
 80046c8:	e002      	b.n	80046d0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f969 	bl	80049a2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d024      	beq.n	8004724 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80046e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f943 	bl	800497a <HAL_CAN_TxMailbox2CompleteCallback>
 80046f4:	e016      	b.n	8004724 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d004      	beq.n	800470a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004706:	627b      	str	r3, [r7, #36]	; 0x24
 8004708:	e00c      	b.n	8004724 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d004      	beq.n	800471e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800471a:	627b      	str	r3, [r7, #36]	; 0x24
 800471c:	e002      	b.n	8004724 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f949 	bl	80049b6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00c      	beq.n	8004748 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f003 0310 	and.w	r3, r3, #16
 8004734:	2b00      	cmp	r3, #0
 8004736:	d007      	beq.n	8004748 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800473e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2210      	movs	r2, #16
 8004746:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	f003 0304 	and.w	r3, r3, #4
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00b      	beq.n	800476a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b00      	cmp	r3, #0
 800475a:	d006      	beq.n	800476a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2208      	movs	r2, #8
 8004762:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f7fe fbfd 	bl	8002f64 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d009      	beq.n	8004788 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fe fbd6 	bl	8002f34 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00c      	beq.n	80047ac <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	2b00      	cmp	r3, #0
 800479a:	d007      	beq.n	80047ac <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2210      	movs	r2, #16
 80047aa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00b      	beq.n	80047ce <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d006      	beq.n	80047ce <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2208      	movs	r2, #8
 80047c6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f908 	bl	80049de <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d009      	beq.n	80047ec <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f8ef 	bl	80049ca <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00b      	beq.n	800480e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d006      	beq.n	800480e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2210      	movs	r2, #16
 8004806:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f8f2 	bl	80049f2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00b      	beq.n	8004830 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d006      	beq.n	8004830 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2208      	movs	r2, #8
 8004828:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f8eb 	bl	8004a06 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d07b      	beq.n	8004932 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d072      	beq.n	800492a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484a:	2b00      	cmp	r3, #0
 800484c:	d008      	beq.n	8004860 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004866:	2b00      	cmp	r3, #0
 8004868:	d008      	beq.n	800487c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	f043 0302 	orr.w	r3, r3, #2
 800487a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004882:	2b00      	cmp	r3, #0
 8004884:	d008      	beq.n	8004898 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	f043 0304 	orr.w	r3, r3, #4
 8004896:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d043      	beq.n	800492a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d03e      	beq.n	800492a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048b2:	2b60      	cmp	r3, #96	; 0x60
 80048b4:	d02b      	beq.n	800490e <HAL_CAN_IRQHandler+0x32a>
 80048b6:	2b60      	cmp	r3, #96	; 0x60
 80048b8:	d82e      	bhi.n	8004918 <HAL_CAN_IRQHandler+0x334>
 80048ba:	2b50      	cmp	r3, #80	; 0x50
 80048bc:	d022      	beq.n	8004904 <HAL_CAN_IRQHandler+0x320>
 80048be:	2b50      	cmp	r3, #80	; 0x50
 80048c0:	d82a      	bhi.n	8004918 <HAL_CAN_IRQHandler+0x334>
 80048c2:	2b40      	cmp	r3, #64	; 0x40
 80048c4:	d019      	beq.n	80048fa <HAL_CAN_IRQHandler+0x316>
 80048c6:	2b40      	cmp	r3, #64	; 0x40
 80048c8:	d826      	bhi.n	8004918 <HAL_CAN_IRQHandler+0x334>
 80048ca:	2b30      	cmp	r3, #48	; 0x30
 80048cc:	d010      	beq.n	80048f0 <HAL_CAN_IRQHandler+0x30c>
 80048ce:	2b30      	cmp	r3, #48	; 0x30
 80048d0:	d822      	bhi.n	8004918 <HAL_CAN_IRQHandler+0x334>
 80048d2:	2b10      	cmp	r3, #16
 80048d4:	d002      	beq.n	80048dc <HAL_CAN_IRQHandler+0x2f8>
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	d005      	beq.n	80048e6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80048da:	e01d      	b.n	8004918 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	f043 0308 	orr.w	r3, r3, #8
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80048e4:	e019      	b.n	800491a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	f043 0310 	orr.w	r3, r3, #16
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80048ee:	e014      	b.n	800491a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	f043 0320 	orr.w	r3, r3, #32
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80048f8:	e00f      	b.n	800491a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004902:	e00a      	b.n	800491a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800490c:	e005      	b.n	800491a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004916:	e000      	b.n	800491a <HAL_CAN_IRQHandler+0x336>
            break;
 8004918:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	699a      	ldr	r2, [r3, #24]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004928:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2204      	movs	r2, #4
 8004930:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	2b00      	cmp	r3, #0
 8004936:	d008      	beq.n	800494a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f868 	bl	8004a1a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800494a:	bf00      	nop
 800494c:	3728      	adds	r7, #40	; 0x28
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
	...

08004a30 <__NVIC_SetPriorityGrouping>:
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a40:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <__NVIC_SetPriorityGrouping+0x40>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004a58:	4b06      	ldr	r3, [pc, #24]	; (8004a74 <__NVIC_SetPriorityGrouping+0x44>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a5e:	4a04      	ldr	r2, [pc, #16]	; (8004a70 <__NVIC_SetPriorityGrouping+0x40>)
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	60d3      	str	r3, [r2, #12]
}
 8004a64:	bf00      	nop
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	e000ed00 	.word	0xe000ed00
 8004a74:	05fa0000 	.word	0x05fa0000

08004a78 <__NVIC_GetPriorityGrouping>:
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a7c:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <__NVIC_GetPriorityGrouping+0x18>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	0a1b      	lsrs	r3, r3, #8
 8004a82:	f003 0307 	and.w	r3, r3, #7
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	e000ed00 	.word	0xe000ed00

08004a94 <__NVIC_EnableIRQ>:
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	db0b      	blt.n	8004abe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aa6:	79fb      	ldrb	r3, [r7, #7]
 8004aa8:	f003 021f 	and.w	r2, r3, #31
 8004aac:	4907      	ldr	r1, [pc, #28]	; (8004acc <__NVIC_EnableIRQ+0x38>)
 8004aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	2001      	movs	r0, #1
 8004ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8004aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	e000e100 	.word	0xe000e100

08004ad0 <__NVIC_SetPriority>:
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	6039      	str	r1, [r7, #0]
 8004ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	db0a      	blt.n	8004afa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	490c      	ldr	r1, [pc, #48]	; (8004b1c <__NVIC_SetPriority+0x4c>)
 8004aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aee:	0112      	lsls	r2, r2, #4
 8004af0:	b2d2      	uxtb	r2, r2
 8004af2:	440b      	add	r3, r1
 8004af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004af8:	e00a      	b.n	8004b10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	4908      	ldr	r1, [pc, #32]	; (8004b20 <__NVIC_SetPriority+0x50>)
 8004b00:	79fb      	ldrb	r3, [r7, #7]
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	3b04      	subs	r3, #4
 8004b08:	0112      	lsls	r2, r2, #4
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	761a      	strb	r2, [r3, #24]
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	e000e100 	.word	0xe000e100
 8004b20:	e000ed00 	.word	0xe000ed00

08004b24 <NVIC_EncodePriority>:
{
 8004b24:	b480      	push	{r7}
 8004b26:	b089      	sub	sp, #36	; 0x24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	f1c3 0307 	rsb	r3, r3, #7
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	bf28      	it	cs
 8004b42:	2304      	movcs	r3, #4
 8004b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	3304      	adds	r3, #4
 8004b4a:	2b06      	cmp	r3, #6
 8004b4c:	d902      	bls.n	8004b54 <NVIC_EncodePriority+0x30>
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	3b03      	subs	r3, #3
 8004b52:	e000      	b.n	8004b56 <NVIC_EncodePriority+0x32>
 8004b54:	2300      	movs	r3, #0
 8004b56:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b58:	f04f 32ff 	mov.w	r2, #4294967295
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b62:	43da      	mvns	r2, r3
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	401a      	ands	r2, r3
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	fa01 f303 	lsl.w	r3, r1, r3
 8004b76:	43d9      	mvns	r1, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b7c:	4313      	orrs	r3, r2
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3724      	adds	r7, #36	; 0x24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
	...

08004b8c <SysTick_Config>:
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3b01      	subs	r3, #1
 8004b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b9c:	d301      	bcc.n	8004ba2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e00f      	b.n	8004bc2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ba2:	4a0a      	ldr	r2, [pc, #40]	; (8004bcc <SysTick_Config+0x40>)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004baa:	210f      	movs	r1, #15
 8004bac:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb0:	f7ff ff8e 	bl	8004ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bb4:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <SysTick_Config+0x40>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bba:	4b04      	ldr	r3, [pc, #16]	; (8004bcc <SysTick_Config+0x40>)
 8004bbc:	2207      	movs	r2, #7
 8004bbe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	e000e010 	.word	0xe000e010

08004bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff ff29 	bl	8004a30 <__NVIC_SetPriorityGrouping>
}
 8004bde:	bf00      	nop
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b086      	sub	sp, #24
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	4603      	mov	r3, r0
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	607a      	str	r2, [r7, #4]
 8004bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bf8:	f7ff ff3e 	bl	8004a78 <__NVIC_GetPriorityGrouping>
 8004bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	68b9      	ldr	r1, [r7, #8]
 8004c02:	6978      	ldr	r0, [r7, #20]
 8004c04:	f7ff ff8e 	bl	8004b24 <NVIC_EncodePriority>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c0e:	4611      	mov	r1, r2
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff ff5d 	bl	8004ad0 <__NVIC_SetPriority>
}
 8004c16:	bf00      	nop
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b082      	sub	sp, #8
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	4603      	mov	r3, r0
 8004c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff ff31 	bl	8004a94 <__NVIC_EnableIRQ>
}
 8004c32:	bf00      	nop
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b082      	sub	sp, #8
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7ff ffa2 	bl	8004b8c <SysTick_Config>
 8004c48:	4603      	mov	r3, r0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b084      	sub	sp, #16
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004c60:	f7fe fbc2 	bl	80033e8 <HAL_GetTick>
 8004c64:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d008      	beq.n	8004c84 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2280      	movs	r2, #128	; 0x80
 8004c76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e052      	b.n	8004d2a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0216 	bic.w	r2, r2, #22
 8004c92:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695a      	ldr	r2, [r3, #20]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ca2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d103      	bne.n	8004cb4 <HAL_DMA_Abort+0x62>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d007      	beq.n	8004cc4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0208 	bic.w	r2, r2, #8
 8004cc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0201 	bic.w	r2, r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cd4:	e013      	b.n	8004cfe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cd6:	f7fe fb87 	bl	80033e8 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b05      	cmp	r3, #5
 8004ce2:	d90c      	bls.n	8004cfe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2203      	movs	r2, #3
 8004cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e015      	b.n	8004d2a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1e4      	bne.n	8004cd6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d10:	223f      	movs	r2, #63	; 0x3f
 8004d12:	409a      	lsls	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d004      	beq.n	8004d50 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2280      	movs	r2, #128	; 0x80
 8004d4a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e00c      	b.n	8004d6a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2205      	movs	r2, #5
 8004d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0201 	bic.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
	...

08004d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b089      	sub	sp, #36	; 0x24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004d82:	2300      	movs	r3, #0
 8004d84:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004d86:	2300      	movs	r3, #0
 8004d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d92:	2300      	movs	r3, #0
 8004d94:	61fb      	str	r3, [r7, #28]
 8004d96:	e175      	b.n	8005084 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004d98:	2201      	movs	r2, #1
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	4013      	ands	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	f040 8164 	bne.w	800507e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d005      	beq.n	8004dce <HAL_GPIO_Init+0x56>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d130      	bne.n	8004e30 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	2203      	movs	r2, #3
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	43db      	mvns	r3, r3
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	4013      	ands	r3, r2
 8004de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e04:	2201      	movs	r2, #1
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	4013      	ands	r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	091b      	lsrs	r3, r3, #4
 8004e1a:	f003 0201 	and.w	r2, r3, #1
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f003 0303 	and.w	r3, r3, #3
 8004e38:	2b03      	cmp	r3, #3
 8004e3a:	d017      	beq.n	8004e6c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	2203      	movs	r2, #3
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	4013      	ands	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f003 0303 	and.w	r3, r3, #3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d123      	bne.n	8004ec0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	08da      	lsrs	r2, r3, #3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3208      	adds	r2, #8
 8004e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	220f      	movs	r2, #15
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	43db      	mvns	r3, r3
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	691a      	ldr	r2, [r3, #16]
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	08da      	lsrs	r2, r3, #3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3208      	adds	r2, #8
 8004eba:	69b9      	ldr	r1, [r7, #24]
 8004ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	2203      	movs	r2, #3
 8004ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed0:	43db      	mvns	r3, r3
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f003 0203 	and.w	r2, r3, #3
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 80be 	beq.w	800507e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f02:	4b66      	ldr	r3, [pc, #408]	; (800509c <HAL_GPIO_Init+0x324>)
 8004f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f06:	4a65      	ldr	r2, [pc, #404]	; (800509c <HAL_GPIO_Init+0x324>)
 8004f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f0e:	4b63      	ldr	r3, [pc, #396]	; (800509c <HAL_GPIO_Init+0x324>)
 8004f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004f1a:	4a61      	ldr	r2, [pc, #388]	; (80050a0 <HAL_GPIO_Init+0x328>)
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	089b      	lsrs	r3, r3, #2
 8004f20:	3302      	adds	r3, #2
 8004f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	f003 0303 	and.w	r3, r3, #3
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	220f      	movs	r2, #15
 8004f32:	fa02 f303 	lsl.w	r3, r2, r3
 8004f36:	43db      	mvns	r3, r3
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a58      	ldr	r2, [pc, #352]	; (80050a4 <HAL_GPIO_Init+0x32c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d037      	beq.n	8004fb6 <HAL_GPIO_Init+0x23e>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a57      	ldr	r2, [pc, #348]	; (80050a8 <HAL_GPIO_Init+0x330>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d031      	beq.n	8004fb2 <HAL_GPIO_Init+0x23a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a56      	ldr	r2, [pc, #344]	; (80050ac <HAL_GPIO_Init+0x334>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d02b      	beq.n	8004fae <HAL_GPIO_Init+0x236>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a55      	ldr	r2, [pc, #340]	; (80050b0 <HAL_GPIO_Init+0x338>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d025      	beq.n	8004faa <HAL_GPIO_Init+0x232>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a54      	ldr	r2, [pc, #336]	; (80050b4 <HAL_GPIO_Init+0x33c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d01f      	beq.n	8004fa6 <HAL_GPIO_Init+0x22e>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a53      	ldr	r2, [pc, #332]	; (80050b8 <HAL_GPIO_Init+0x340>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d019      	beq.n	8004fa2 <HAL_GPIO_Init+0x22a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a52      	ldr	r2, [pc, #328]	; (80050bc <HAL_GPIO_Init+0x344>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d013      	beq.n	8004f9e <HAL_GPIO_Init+0x226>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a51      	ldr	r2, [pc, #324]	; (80050c0 <HAL_GPIO_Init+0x348>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d00d      	beq.n	8004f9a <HAL_GPIO_Init+0x222>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a50      	ldr	r2, [pc, #320]	; (80050c4 <HAL_GPIO_Init+0x34c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d007      	beq.n	8004f96 <HAL_GPIO_Init+0x21e>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a4f      	ldr	r2, [pc, #316]	; (80050c8 <HAL_GPIO_Init+0x350>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d101      	bne.n	8004f92 <HAL_GPIO_Init+0x21a>
 8004f8e:	2309      	movs	r3, #9
 8004f90:	e012      	b.n	8004fb8 <HAL_GPIO_Init+0x240>
 8004f92:	230a      	movs	r3, #10
 8004f94:	e010      	b.n	8004fb8 <HAL_GPIO_Init+0x240>
 8004f96:	2308      	movs	r3, #8
 8004f98:	e00e      	b.n	8004fb8 <HAL_GPIO_Init+0x240>
 8004f9a:	2307      	movs	r3, #7
 8004f9c:	e00c      	b.n	8004fb8 <HAL_GPIO_Init+0x240>
 8004f9e:	2306      	movs	r3, #6
 8004fa0:	e00a      	b.n	8004fb8 <HAL_GPIO_Init+0x240>
 8004fa2:	2305      	movs	r3, #5
 8004fa4:	e008      	b.n	8004fb8 <HAL_GPIO_Init+0x240>
 8004fa6:	2304      	movs	r3, #4
 8004fa8:	e006      	b.n	8004fb8 <HAL_GPIO_Init+0x240>
 8004faa:	2303      	movs	r3, #3
 8004fac:	e004      	b.n	8004fb8 <HAL_GPIO_Init+0x240>
 8004fae:	2302      	movs	r3, #2
 8004fb0:	e002      	b.n	8004fb8 <HAL_GPIO_Init+0x240>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e000      	b.n	8004fb8 <HAL_GPIO_Init+0x240>
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	f002 0203 	and.w	r2, r2, #3
 8004fbe:	0092      	lsls	r2, r2, #2
 8004fc0:	4093      	lsls	r3, r2
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004fc8:	4935      	ldr	r1, [pc, #212]	; (80050a0 <HAL_GPIO_Init+0x328>)
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	089b      	lsrs	r3, r3, #2
 8004fce:	3302      	adds	r3, #2
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fd6:	4b3d      	ldr	r3, [pc, #244]	; (80050cc <HAL_GPIO_Init+0x354>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	43db      	mvns	r3, r3
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ffa:	4a34      	ldr	r2, [pc, #208]	; (80050cc <HAL_GPIO_Init+0x354>)
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005000:	4b32      	ldr	r3, [pc, #200]	; (80050cc <HAL_GPIO_Init+0x354>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	43db      	mvns	r3, r3
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	4013      	ands	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4313      	orrs	r3, r2
 8005022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005024:	4a29      	ldr	r2, [pc, #164]	; (80050cc <HAL_GPIO_Init+0x354>)
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800502a:	4b28      	ldr	r3, [pc, #160]	; (80050cc <HAL_GPIO_Init+0x354>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	43db      	mvns	r3, r3
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	4013      	ands	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800504e:	4a1f      	ldr	r2, [pc, #124]	; (80050cc <HAL_GPIO_Init+0x354>)
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005054:	4b1d      	ldr	r3, [pc, #116]	; (80050cc <HAL_GPIO_Init+0x354>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	43db      	mvns	r3, r3
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	4013      	ands	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005078:	4a14      	ldr	r2, [pc, #80]	; (80050cc <HAL_GPIO_Init+0x354>)
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	3301      	adds	r3, #1
 8005082:	61fb      	str	r3, [r7, #28]
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	2b0f      	cmp	r3, #15
 8005088:	f67f ae86 	bls.w	8004d98 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800508c:	bf00      	nop
 800508e:	bf00      	nop
 8005090:	3724      	adds	r7, #36	; 0x24
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40023800 	.word	0x40023800
 80050a0:	40013800 	.word	0x40013800
 80050a4:	40020000 	.word	0x40020000
 80050a8:	40020400 	.word	0x40020400
 80050ac:	40020800 	.word	0x40020800
 80050b0:	40020c00 	.word	0x40020c00
 80050b4:	40021000 	.word	0x40021000
 80050b8:	40021400 	.word	0x40021400
 80050bc:	40021800 	.word	0x40021800
 80050c0:	40021c00 	.word	0x40021c00
 80050c4:	40022000 	.word	0x40022000
 80050c8:	40022400 	.word	0x40022400
 80050cc:	40013c00 	.word	0x40013c00

080050d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	460b      	mov	r3, r1
 80050da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	887b      	ldrh	r3, [r7, #2]
 80050e2:	4013      	ands	r3, r2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d002      	beq.n	80050ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050e8:	2301      	movs	r3, #1
 80050ea:	73fb      	strb	r3, [r7, #15]
 80050ec:	e001      	b.n	80050f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050ee:	2300      	movs	r3, #0
 80050f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	807b      	strh	r3, [r7, #2]
 800510c:	4613      	mov	r3, r2
 800510e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005110:	787b      	ldrb	r3, [r7, #1]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005116:	887a      	ldrh	r2, [r7, #2]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800511c:	e003      	b.n	8005126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800511e:	887b      	ldrh	r3, [r7, #2]
 8005120:	041a      	lsls	r2, r3, #16
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	619a      	str	r2, [r3, #24]
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	460b      	mov	r3, r1
 800513c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005144:	887a      	ldrh	r2, [r7, #2]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	4013      	ands	r3, r2
 800514a:	041a      	lsls	r2, r3, #16
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	43d9      	mvns	r1, r3
 8005150:	887b      	ldrh	r3, [r7, #2]
 8005152:	400b      	ands	r3, r1
 8005154:	431a      	orrs	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	619a      	str	r2, [r3, #24]
}
 800515a:	bf00      	nop
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
	...

08005168 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800516e:	2300      	movs	r3, #0
 8005170:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005172:	4b23      	ldr	r3, [pc, #140]	; (8005200 <HAL_PWREx_EnableOverDrive+0x98>)
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	4a22      	ldr	r2, [pc, #136]	; (8005200 <HAL_PWREx_EnableOverDrive+0x98>)
 8005178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800517c:	6413      	str	r3, [r2, #64]	; 0x40
 800517e:	4b20      	ldr	r3, [pc, #128]	; (8005200 <HAL_PWREx_EnableOverDrive+0x98>)
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005186:	603b      	str	r3, [r7, #0]
 8005188:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800518a:	4b1e      	ldr	r3, [pc, #120]	; (8005204 <HAL_PWREx_EnableOverDrive+0x9c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a1d      	ldr	r2, [pc, #116]	; (8005204 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005194:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005196:	f7fe f927 	bl	80033e8 <HAL_GetTick>
 800519a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800519c:	e009      	b.n	80051b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800519e:	f7fe f923 	bl	80033e8 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051ac:	d901      	bls.n	80051b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e022      	b.n	80051f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80051b2:	4b14      	ldr	r3, [pc, #80]	; (8005204 <HAL_PWREx_EnableOverDrive+0x9c>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051be:	d1ee      	bne.n	800519e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80051c0:	4b10      	ldr	r3, [pc, #64]	; (8005204 <HAL_PWREx_EnableOverDrive+0x9c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a0f      	ldr	r2, [pc, #60]	; (8005204 <HAL_PWREx_EnableOverDrive+0x9c>)
 80051c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051cc:	f7fe f90c 	bl	80033e8 <HAL_GetTick>
 80051d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80051d2:	e009      	b.n	80051e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80051d4:	f7fe f908 	bl	80033e8 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051e2:	d901      	bls.n	80051e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e007      	b.n	80051f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80051e8:	4b06      	ldr	r3, [pc, #24]	; (8005204 <HAL_PWREx_EnableOverDrive+0x9c>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051f4:	d1ee      	bne.n	80051d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	40023800 	.word	0x40023800
 8005204:	40007000 	.word	0x40007000

08005208 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005210:	2300      	movs	r3, #0
 8005212:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e29b      	b.n	8005756 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 8087 	beq.w	800533a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800522c:	4b96      	ldr	r3, [pc, #600]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f003 030c 	and.w	r3, r3, #12
 8005234:	2b04      	cmp	r3, #4
 8005236:	d00c      	beq.n	8005252 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005238:	4b93      	ldr	r3, [pc, #588]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 030c 	and.w	r3, r3, #12
 8005240:	2b08      	cmp	r3, #8
 8005242:	d112      	bne.n	800526a <HAL_RCC_OscConfig+0x62>
 8005244:	4b90      	ldr	r3, [pc, #576]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800524c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005250:	d10b      	bne.n	800526a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005252:	4b8d      	ldr	r3, [pc, #564]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d06c      	beq.n	8005338 <HAL_RCC_OscConfig+0x130>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d168      	bne.n	8005338 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e275      	b.n	8005756 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005272:	d106      	bne.n	8005282 <HAL_RCC_OscConfig+0x7a>
 8005274:	4b84      	ldr	r3, [pc, #528]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a83      	ldr	r2, [pc, #524]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 800527a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800527e:	6013      	str	r3, [r2, #0]
 8005280:	e02e      	b.n	80052e0 <HAL_RCC_OscConfig+0xd8>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10c      	bne.n	80052a4 <HAL_RCC_OscConfig+0x9c>
 800528a:	4b7f      	ldr	r3, [pc, #508]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a7e      	ldr	r2, [pc, #504]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 8005290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005294:	6013      	str	r3, [r2, #0]
 8005296:	4b7c      	ldr	r3, [pc, #496]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a7b      	ldr	r2, [pc, #492]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 800529c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	e01d      	b.n	80052e0 <HAL_RCC_OscConfig+0xd8>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052ac:	d10c      	bne.n	80052c8 <HAL_RCC_OscConfig+0xc0>
 80052ae:	4b76      	ldr	r3, [pc, #472]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a75      	ldr	r2, [pc, #468]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 80052b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052b8:	6013      	str	r3, [r2, #0]
 80052ba:	4b73      	ldr	r3, [pc, #460]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a72      	ldr	r2, [pc, #456]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 80052c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052c4:	6013      	str	r3, [r2, #0]
 80052c6:	e00b      	b.n	80052e0 <HAL_RCC_OscConfig+0xd8>
 80052c8:	4b6f      	ldr	r3, [pc, #444]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a6e      	ldr	r2, [pc, #440]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 80052ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052d2:	6013      	str	r3, [r2, #0]
 80052d4:	4b6c      	ldr	r3, [pc, #432]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a6b      	ldr	r2, [pc, #428]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 80052da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d013      	beq.n	8005310 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e8:	f7fe f87e 	bl	80033e8 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052f0:	f7fe f87a 	bl	80033e8 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b64      	cmp	r3, #100	; 0x64
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e229      	b.n	8005756 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005302:	4b61      	ldr	r3, [pc, #388]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0f0      	beq.n	80052f0 <HAL_RCC_OscConfig+0xe8>
 800530e:	e014      	b.n	800533a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005310:	f7fe f86a 	bl	80033e8 <HAL_GetTick>
 8005314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005316:	e008      	b.n	800532a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005318:	f7fe f866 	bl	80033e8 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b64      	cmp	r3, #100	; 0x64
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e215      	b.n	8005756 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800532a:	4b57      	ldr	r3, [pc, #348]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1f0      	bne.n	8005318 <HAL_RCC_OscConfig+0x110>
 8005336:	e000      	b.n	800533a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d069      	beq.n	800541a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005346:	4b50      	ldr	r3, [pc, #320]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 030c 	and.w	r3, r3, #12
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00b      	beq.n	800536a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005352:	4b4d      	ldr	r3, [pc, #308]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f003 030c 	and.w	r3, r3, #12
 800535a:	2b08      	cmp	r3, #8
 800535c:	d11c      	bne.n	8005398 <HAL_RCC_OscConfig+0x190>
 800535e:	4b4a      	ldr	r3, [pc, #296]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d116      	bne.n	8005398 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800536a:	4b47      	ldr	r3, [pc, #284]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d005      	beq.n	8005382 <HAL_RCC_OscConfig+0x17a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d001      	beq.n	8005382 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e1e9      	b.n	8005756 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005382:	4b41      	ldr	r3, [pc, #260]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	493d      	ldr	r1, [pc, #244]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 8005392:	4313      	orrs	r3, r2
 8005394:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005396:	e040      	b.n	800541a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d023      	beq.n	80053e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053a0:	4b39      	ldr	r3, [pc, #228]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a38      	ldr	r2, [pc, #224]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 80053a6:	f043 0301 	orr.w	r3, r3, #1
 80053aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ac:	f7fe f81c 	bl	80033e8 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053b4:	f7fe f818 	bl	80033e8 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e1c7      	b.n	8005756 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053c6:	4b30      	ldr	r3, [pc, #192]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0f0      	beq.n	80053b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053d2:	4b2d      	ldr	r3, [pc, #180]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	4929      	ldr	r1, [pc, #164]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	600b      	str	r3, [r1, #0]
 80053e6:	e018      	b.n	800541a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053e8:	4b27      	ldr	r3, [pc, #156]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a26      	ldr	r2, [pc, #152]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 80053ee:	f023 0301 	bic.w	r3, r3, #1
 80053f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f4:	f7fd fff8 	bl	80033e8 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053fa:	e008      	b.n	800540e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053fc:	f7fd fff4 	bl	80033e8 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e1a3      	b.n	8005756 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800540e:	4b1e      	ldr	r3, [pc, #120]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1f0      	bne.n	80053fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	2b00      	cmp	r3, #0
 8005424:	d038      	beq.n	8005498 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d019      	beq.n	8005462 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800542e:	4b16      	ldr	r3, [pc, #88]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 8005430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005432:	4a15      	ldr	r2, [pc, #84]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 8005434:	f043 0301 	orr.w	r3, r3, #1
 8005438:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800543a:	f7fd ffd5 	bl	80033e8 <HAL_GetTick>
 800543e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005440:	e008      	b.n	8005454 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005442:	f7fd ffd1 	bl	80033e8 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e180      	b.n	8005756 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005454:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 8005456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d0f0      	beq.n	8005442 <HAL_RCC_OscConfig+0x23a>
 8005460:	e01a      	b.n	8005498 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005462:	4b09      	ldr	r3, [pc, #36]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 8005464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005466:	4a08      	ldr	r2, [pc, #32]	; (8005488 <HAL_RCC_OscConfig+0x280>)
 8005468:	f023 0301 	bic.w	r3, r3, #1
 800546c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800546e:	f7fd ffbb 	bl	80033e8 <HAL_GetTick>
 8005472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005474:	e00a      	b.n	800548c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005476:	f7fd ffb7 	bl	80033e8 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d903      	bls.n	800548c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e166      	b.n	8005756 <HAL_RCC_OscConfig+0x54e>
 8005488:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800548c:	4b92      	ldr	r3, [pc, #584]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 800548e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1ee      	bne.n	8005476 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 80a4 	beq.w	80055ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054a6:	4b8c      	ldr	r3, [pc, #560]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10d      	bne.n	80054ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80054b2:	4b89      	ldr	r3, [pc, #548]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	4a88      	ldr	r2, [pc, #544]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 80054b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054bc:	6413      	str	r3, [r2, #64]	; 0x40
 80054be:	4b86      	ldr	r3, [pc, #536]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054c6:	60bb      	str	r3, [r7, #8]
 80054c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054ca:	2301      	movs	r3, #1
 80054cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054ce:	4b83      	ldr	r3, [pc, #524]	; (80056dc <HAL_RCC_OscConfig+0x4d4>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d118      	bne.n	800550c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80054da:	4b80      	ldr	r3, [pc, #512]	; (80056dc <HAL_RCC_OscConfig+0x4d4>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a7f      	ldr	r2, [pc, #508]	; (80056dc <HAL_RCC_OscConfig+0x4d4>)
 80054e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054e6:	f7fd ff7f 	bl	80033e8 <HAL_GetTick>
 80054ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054ec:	e008      	b.n	8005500 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ee:	f7fd ff7b 	bl	80033e8 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b64      	cmp	r3, #100	; 0x64
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e12a      	b.n	8005756 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005500:	4b76      	ldr	r3, [pc, #472]	; (80056dc <HAL_RCC_OscConfig+0x4d4>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0f0      	beq.n	80054ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d106      	bne.n	8005522 <HAL_RCC_OscConfig+0x31a>
 8005514:	4b70      	ldr	r3, [pc, #448]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 8005516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005518:	4a6f      	ldr	r2, [pc, #444]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 800551a:	f043 0301 	orr.w	r3, r3, #1
 800551e:	6713      	str	r3, [r2, #112]	; 0x70
 8005520:	e02d      	b.n	800557e <HAL_RCC_OscConfig+0x376>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10c      	bne.n	8005544 <HAL_RCC_OscConfig+0x33c>
 800552a:	4b6b      	ldr	r3, [pc, #428]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 800552c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800552e:	4a6a      	ldr	r2, [pc, #424]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 8005530:	f023 0301 	bic.w	r3, r3, #1
 8005534:	6713      	str	r3, [r2, #112]	; 0x70
 8005536:	4b68      	ldr	r3, [pc, #416]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 8005538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553a:	4a67      	ldr	r2, [pc, #412]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 800553c:	f023 0304 	bic.w	r3, r3, #4
 8005540:	6713      	str	r3, [r2, #112]	; 0x70
 8005542:	e01c      	b.n	800557e <HAL_RCC_OscConfig+0x376>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	2b05      	cmp	r3, #5
 800554a:	d10c      	bne.n	8005566 <HAL_RCC_OscConfig+0x35e>
 800554c:	4b62      	ldr	r3, [pc, #392]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 800554e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005550:	4a61      	ldr	r2, [pc, #388]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 8005552:	f043 0304 	orr.w	r3, r3, #4
 8005556:	6713      	str	r3, [r2, #112]	; 0x70
 8005558:	4b5f      	ldr	r3, [pc, #380]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 800555a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555c:	4a5e      	ldr	r2, [pc, #376]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 800555e:	f043 0301 	orr.w	r3, r3, #1
 8005562:	6713      	str	r3, [r2, #112]	; 0x70
 8005564:	e00b      	b.n	800557e <HAL_RCC_OscConfig+0x376>
 8005566:	4b5c      	ldr	r3, [pc, #368]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 8005568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556a:	4a5b      	ldr	r2, [pc, #364]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 800556c:	f023 0301 	bic.w	r3, r3, #1
 8005570:	6713      	str	r3, [r2, #112]	; 0x70
 8005572:	4b59      	ldr	r3, [pc, #356]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 8005574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005576:	4a58      	ldr	r2, [pc, #352]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 8005578:	f023 0304 	bic.w	r3, r3, #4
 800557c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d015      	beq.n	80055b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005586:	f7fd ff2f 	bl	80033e8 <HAL_GetTick>
 800558a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800558c:	e00a      	b.n	80055a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800558e:	f7fd ff2b 	bl	80033e8 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	f241 3288 	movw	r2, #5000	; 0x1388
 800559c:	4293      	cmp	r3, r2
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e0d8      	b.n	8005756 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a4:	4b4c      	ldr	r3, [pc, #304]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 80055a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d0ee      	beq.n	800558e <HAL_RCC_OscConfig+0x386>
 80055b0:	e014      	b.n	80055dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b2:	f7fd ff19 	bl	80033e8 <HAL_GetTick>
 80055b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055b8:	e00a      	b.n	80055d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ba:	f7fd ff15 	bl	80033e8 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e0c2      	b.n	8005756 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055d0:	4b41      	ldr	r3, [pc, #260]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 80055d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1ee      	bne.n	80055ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055dc:	7dfb      	ldrb	r3, [r7, #23]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d105      	bne.n	80055ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055e2:	4b3d      	ldr	r3, [pc, #244]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	4a3c      	ldr	r2, [pc, #240]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 80055e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 80ae 	beq.w	8005754 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055f8:	4b37      	ldr	r3, [pc, #220]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f003 030c 	and.w	r3, r3, #12
 8005600:	2b08      	cmp	r3, #8
 8005602:	d06d      	beq.n	80056e0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	2b02      	cmp	r3, #2
 800560a:	d14b      	bne.n	80056a4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800560c:	4b32      	ldr	r3, [pc, #200]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a31      	ldr	r2, [pc, #196]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 8005612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005618:	f7fd fee6 	bl	80033e8 <HAL_GetTick>
 800561c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800561e:	e008      	b.n	8005632 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005620:	f7fd fee2 	bl	80033e8 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b02      	cmp	r3, #2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e091      	b.n	8005756 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005632:	4b29      	ldr	r3, [pc, #164]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1f0      	bne.n	8005620 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	69da      	ldr	r2, [r3, #28]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	431a      	orrs	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	019b      	lsls	r3, r3, #6
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005654:	085b      	lsrs	r3, r3, #1
 8005656:	3b01      	subs	r3, #1
 8005658:	041b      	lsls	r3, r3, #16
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	061b      	lsls	r3, r3, #24
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005668:	071b      	lsls	r3, r3, #28
 800566a:	491b      	ldr	r1, [pc, #108]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 800566c:	4313      	orrs	r3, r2
 800566e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005670:	4b19      	ldr	r3, [pc, #100]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a18      	ldr	r2, [pc, #96]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 8005676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800567a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567c:	f7fd feb4 	bl	80033e8 <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005684:	f7fd feb0 	bl	80033e8 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e05f      	b.n	8005756 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005696:	4b10      	ldr	r3, [pc, #64]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0f0      	beq.n	8005684 <HAL_RCC_OscConfig+0x47c>
 80056a2:	e057      	b.n	8005754 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056a4:	4b0c      	ldr	r3, [pc, #48]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a0b      	ldr	r2, [pc, #44]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 80056aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b0:	f7fd fe9a 	bl	80033e8 <HAL_GetTick>
 80056b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056b8:	f7fd fe96 	bl	80033e8 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e045      	b.n	8005756 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ca:	4b03      	ldr	r3, [pc, #12]	; (80056d8 <HAL_RCC_OscConfig+0x4d0>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f0      	bne.n	80056b8 <HAL_RCC_OscConfig+0x4b0>
 80056d6:	e03d      	b.n	8005754 <HAL_RCC_OscConfig+0x54c>
 80056d8:	40023800 	.word	0x40023800
 80056dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80056e0:	4b1f      	ldr	r3, [pc, #124]	; (8005760 <HAL_RCC_OscConfig+0x558>)
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d030      	beq.n	8005750 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d129      	bne.n	8005750 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005706:	429a      	cmp	r2, r3
 8005708:	d122      	bne.n	8005750 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005710:	4013      	ands	r3, r2
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005716:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005718:	4293      	cmp	r3, r2
 800571a:	d119      	bne.n	8005750 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005726:	085b      	lsrs	r3, r3, #1
 8005728:	3b01      	subs	r3, #1
 800572a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800572c:	429a      	cmp	r2, r3
 800572e:	d10f      	bne.n	8005750 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800573c:	429a      	cmp	r2, r3
 800573e:	d107      	bne.n	8005750 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800574c:	429a      	cmp	r2, r3
 800574e:	d001      	beq.n	8005754 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e000      	b.n	8005756 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	40023800 	.word	0x40023800

08005764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e0d0      	b.n	800591e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800577c:	4b6a      	ldr	r3, [pc, #424]	; (8005928 <HAL_RCC_ClockConfig+0x1c4>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 030f 	and.w	r3, r3, #15
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	429a      	cmp	r2, r3
 8005788:	d910      	bls.n	80057ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800578a:	4b67      	ldr	r3, [pc, #412]	; (8005928 <HAL_RCC_ClockConfig+0x1c4>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f023 020f 	bic.w	r2, r3, #15
 8005792:	4965      	ldr	r1, [pc, #404]	; (8005928 <HAL_RCC_ClockConfig+0x1c4>)
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	4313      	orrs	r3, r2
 8005798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800579a:	4b63      	ldr	r3, [pc, #396]	; (8005928 <HAL_RCC_ClockConfig+0x1c4>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d001      	beq.n	80057ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e0b8      	b.n	800591e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d020      	beq.n	80057fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d005      	beq.n	80057d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057c4:	4b59      	ldr	r3, [pc, #356]	; (800592c <HAL_RCC_ClockConfig+0x1c8>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	4a58      	ldr	r2, [pc, #352]	; (800592c <HAL_RCC_ClockConfig+0x1c8>)
 80057ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0308 	and.w	r3, r3, #8
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d005      	beq.n	80057e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057dc:	4b53      	ldr	r3, [pc, #332]	; (800592c <HAL_RCC_ClockConfig+0x1c8>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	4a52      	ldr	r2, [pc, #328]	; (800592c <HAL_RCC_ClockConfig+0x1c8>)
 80057e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057e8:	4b50      	ldr	r3, [pc, #320]	; (800592c <HAL_RCC_ClockConfig+0x1c8>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	494d      	ldr	r1, [pc, #308]	; (800592c <HAL_RCC_ClockConfig+0x1c8>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d040      	beq.n	8005888 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d107      	bne.n	800581e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800580e:	4b47      	ldr	r3, [pc, #284]	; (800592c <HAL_RCC_ClockConfig+0x1c8>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d115      	bne.n	8005846 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e07f      	b.n	800591e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d107      	bne.n	8005836 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005826:	4b41      	ldr	r3, [pc, #260]	; (800592c <HAL_RCC_ClockConfig+0x1c8>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d109      	bne.n	8005846 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e073      	b.n	800591e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005836:	4b3d      	ldr	r3, [pc, #244]	; (800592c <HAL_RCC_ClockConfig+0x1c8>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e06b      	b.n	800591e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005846:	4b39      	ldr	r3, [pc, #228]	; (800592c <HAL_RCC_ClockConfig+0x1c8>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f023 0203 	bic.w	r2, r3, #3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	4936      	ldr	r1, [pc, #216]	; (800592c <HAL_RCC_ClockConfig+0x1c8>)
 8005854:	4313      	orrs	r3, r2
 8005856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005858:	f7fd fdc6 	bl	80033e8 <HAL_GetTick>
 800585c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800585e:	e00a      	b.n	8005876 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005860:	f7fd fdc2 	bl	80033e8 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	f241 3288 	movw	r2, #5000	; 0x1388
 800586e:	4293      	cmp	r3, r2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e053      	b.n	800591e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005876:	4b2d      	ldr	r3, [pc, #180]	; (800592c <HAL_RCC_ClockConfig+0x1c8>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 020c 	and.w	r2, r3, #12
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	429a      	cmp	r2, r3
 8005886:	d1eb      	bne.n	8005860 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005888:	4b27      	ldr	r3, [pc, #156]	; (8005928 <HAL_RCC_ClockConfig+0x1c4>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 030f 	and.w	r3, r3, #15
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d210      	bcs.n	80058b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005896:	4b24      	ldr	r3, [pc, #144]	; (8005928 <HAL_RCC_ClockConfig+0x1c4>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f023 020f 	bic.w	r2, r3, #15
 800589e:	4922      	ldr	r1, [pc, #136]	; (8005928 <HAL_RCC_ClockConfig+0x1c4>)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058a6:	4b20      	ldr	r3, [pc, #128]	; (8005928 <HAL_RCC_ClockConfig+0x1c4>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d001      	beq.n	80058b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e032      	b.n	800591e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d008      	beq.n	80058d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058c4:	4b19      	ldr	r3, [pc, #100]	; (800592c <HAL_RCC_ClockConfig+0x1c8>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	4916      	ldr	r1, [pc, #88]	; (800592c <HAL_RCC_ClockConfig+0x1c8>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0308 	and.w	r3, r3, #8
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d009      	beq.n	80058f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80058e2:	4b12      	ldr	r3, [pc, #72]	; (800592c <HAL_RCC_ClockConfig+0x1c8>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	490e      	ldr	r1, [pc, #56]	; (800592c <HAL_RCC_ClockConfig+0x1c8>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058f6:	f000 f821 	bl	800593c <HAL_RCC_GetSysClockFreq>
 80058fa:	4602      	mov	r2, r0
 80058fc:	4b0b      	ldr	r3, [pc, #44]	; (800592c <HAL_RCC_ClockConfig+0x1c8>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	091b      	lsrs	r3, r3, #4
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	490a      	ldr	r1, [pc, #40]	; (8005930 <HAL_RCC_ClockConfig+0x1cc>)
 8005908:	5ccb      	ldrb	r3, [r1, r3]
 800590a:	fa22 f303 	lsr.w	r3, r2, r3
 800590e:	4a09      	ldr	r2, [pc, #36]	; (8005934 <HAL_RCC_ClockConfig+0x1d0>)
 8005910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005912:	4b09      	ldr	r3, [pc, #36]	; (8005938 <HAL_RCC_ClockConfig+0x1d4>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4618      	mov	r0, r3
 8005918:	f7fd fd22 	bl	8003360 <HAL_InitTick>

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	40023c00 	.word	0x40023c00
 800592c:	40023800 	.word	0x40023800
 8005930:	080088dc 	.word	0x080088dc
 8005934:	20000000 	.word	0x20000000
 8005938:	20000004 	.word	0x20000004

0800593c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800593c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005940:	b090      	sub	sp, #64	; 0x40
 8005942:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005944:	2300      	movs	r3, #0
 8005946:	637b      	str	r3, [r7, #52]	; 0x34
 8005948:	2300      	movs	r3, #0
 800594a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800594c:	2300      	movs	r3, #0
 800594e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8005950:	2300      	movs	r3, #0
 8005952:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005954:	4b59      	ldr	r3, [pc, #356]	; (8005abc <HAL_RCC_GetSysClockFreq+0x180>)
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f003 030c 	and.w	r3, r3, #12
 800595c:	2b08      	cmp	r3, #8
 800595e:	d00d      	beq.n	800597c <HAL_RCC_GetSysClockFreq+0x40>
 8005960:	2b08      	cmp	r3, #8
 8005962:	f200 80a1 	bhi.w	8005aa8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <HAL_RCC_GetSysClockFreq+0x34>
 800596a:	2b04      	cmp	r3, #4
 800596c:	d003      	beq.n	8005976 <HAL_RCC_GetSysClockFreq+0x3a>
 800596e:	e09b      	b.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005970:	4b53      	ldr	r3, [pc, #332]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005972:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005974:	e09b      	b.n	8005aae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005976:	4b53      	ldr	r3, [pc, #332]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005978:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800597a:	e098      	b.n	8005aae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800597c:	4b4f      	ldr	r3, [pc, #316]	; (8005abc <HAL_RCC_GetSysClockFreq+0x180>)
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005984:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005986:	4b4d      	ldr	r3, [pc, #308]	; (8005abc <HAL_RCC_GetSysClockFreq+0x180>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d028      	beq.n	80059e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005992:	4b4a      	ldr	r3, [pc, #296]	; (8005abc <HAL_RCC_GetSysClockFreq+0x180>)
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	099b      	lsrs	r3, r3, #6
 8005998:	2200      	movs	r2, #0
 800599a:	623b      	str	r3, [r7, #32]
 800599c:	627a      	str	r2, [r7, #36]	; 0x24
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80059a4:	2100      	movs	r1, #0
 80059a6:	4b47      	ldr	r3, [pc, #284]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x188>)
 80059a8:	fb03 f201 	mul.w	r2, r3, r1
 80059ac:	2300      	movs	r3, #0
 80059ae:	fb00 f303 	mul.w	r3, r0, r3
 80059b2:	4413      	add	r3, r2
 80059b4:	4a43      	ldr	r2, [pc, #268]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x188>)
 80059b6:	fba0 1202 	umull	r1, r2, r0, r2
 80059ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059bc:	460a      	mov	r2, r1
 80059be:	62ba      	str	r2, [r7, #40]	; 0x28
 80059c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059c2:	4413      	add	r3, r2
 80059c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c8:	2200      	movs	r2, #0
 80059ca:	61bb      	str	r3, [r7, #24]
 80059cc:	61fa      	str	r2, [r7, #28]
 80059ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80059d6:	f7fa fc37 	bl	8000248 <__aeabi_uldivmod>
 80059da:	4602      	mov	r2, r0
 80059dc:	460b      	mov	r3, r1
 80059de:	4613      	mov	r3, r2
 80059e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059e2:	e053      	b.n	8005a8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059e4:	4b35      	ldr	r3, [pc, #212]	; (8005abc <HAL_RCC_GetSysClockFreq+0x180>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	099b      	lsrs	r3, r3, #6
 80059ea:	2200      	movs	r2, #0
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	617a      	str	r2, [r7, #20]
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80059f6:	f04f 0b00 	mov.w	fp, #0
 80059fa:	4652      	mov	r2, sl
 80059fc:	465b      	mov	r3, fp
 80059fe:	f04f 0000 	mov.w	r0, #0
 8005a02:	f04f 0100 	mov.w	r1, #0
 8005a06:	0159      	lsls	r1, r3, #5
 8005a08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a0c:	0150      	lsls	r0, r2, #5
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	ebb2 080a 	subs.w	r8, r2, sl
 8005a16:	eb63 090b 	sbc.w	r9, r3, fp
 8005a1a:	f04f 0200 	mov.w	r2, #0
 8005a1e:	f04f 0300 	mov.w	r3, #0
 8005a22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005a26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005a2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005a2e:	ebb2 0408 	subs.w	r4, r2, r8
 8005a32:	eb63 0509 	sbc.w	r5, r3, r9
 8005a36:	f04f 0200 	mov.w	r2, #0
 8005a3a:	f04f 0300 	mov.w	r3, #0
 8005a3e:	00eb      	lsls	r3, r5, #3
 8005a40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a44:	00e2      	lsls	r2, r4, #3
 8005a46:	4614      	mov	r4, r2
 8005a48:	461d      	mov	r5, r3
 8005a4a:	eb14 030a 	adds.w	r3, r4, sl
 8005a4e:	603b      	str	r3, [r7, #0]
 8005a50:	eb45 030b 	adc.w	r3, r5, fp
 8005a54:	607b      	str	r3, [r7, #4]
 8005a56:	f04f 0200 	mov.w	r2, #0
 8005a5a:	f04f 0300 	mov.w	r3, #0
 8005a5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a62:	4629      	mov	r1, r5
 8005a64:	028b      	lsls	r3, r1, #10
 8005a66:	4621      	mov	r1, r4
 8005a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a6c:	4621      	mov	r1, r4
 8005a6e:	028a      	lsls	r2, r1, #10
 8005a70:	4610      	mov	r0, r2
 8005a72:	4619      	mov	r1, r3
 8005a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a76:	2200      	movs	r2, #0
 8005a78:	60bb      	str	r3, [r7, #8]
 8005a7a:	60fa      	str	r2, [r7, #12]
 8005a7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a80:	f7fa fbe2 	bl	8000248 <__aeabi_uldivmod>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	4613      	mov	r3, r2
 8005a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005a8c:	4b0b      	ldr	r3, [pc, #44]	; (8005abc <HAL_RCC_GetSysClockFreq+0x180>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	0c1b      	lsrs	r3, r3, #16
 8005a92:	f003 0303 	and.w	r3, r3, #3
 8005a96:	3301      	adds	r3, #1
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8005a9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005aa6:	e002      	b.n	8005aae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005aaa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3740      	adds	r7, #64	; 0x40
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aba:	bf00      	nop
 8005abc:	40023800 	.word	0x40023800
 8005ac0:	00f42400 	.word	0x00f42400
 8005ac4:	017d7840 	.word	0x017d7840

08005ac8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005acc:	4b03      	ldr	r3, [pc, #12]	; (8005adc <HAL_RCC_GetHCLKFreq+0x14>)
 8005ace:	681b      	ldr	r3, [r3, #0]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	20000000 	.word	0x20000000

08005ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ae4:	f7ff fff0 	bl	8005ac8 <HAL_RCC_GetHCLKFreq>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	0a9b      	lsrs	r3, r3, #10
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	4903      	ldr	r1, [pc, #12]	; (8005b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005af6:	5ccb      	ldrb	r3, [r1, r3]
 8005af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	40023800 	.word	0x40023800
 8005b04:	080088ec 	.word	0x080088ec

08005b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b0c:	f7ff ffdc 	bl	8005ac8 <HAL_RCC_GetHCLKFreq>
 8005b10:	4602      	mov	r2, r0
 8005b12:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	0b5b      	lsrs	r3, r3, #13
 8005b18:	f003 0307 	and.w	r3, r3, #7
 8005b1c:	4903      	ldr	r1, [pc, #12]	; (8005b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b1e:	5ccb      	ldrb	r3, [r1, r3]
 8005b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	40023800 	.word	0x40023800
 8005b2c:	080088ec 	.word	0x080088ec

08005b30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005b40:	2300      	movs	r3, #0
 8005b42:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005b44:	2300      	movs	r3, #0
 8005b46:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d012      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b58:	4b69      	ldr	r3, [pc, #420]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	4a68      	ldr	r2, [pc, #416]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b5e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005b62:	6093      	str	r3, [r2, #8]
 8005b64:	4b66      	ldr	r3, [pc, #408]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6c:	4964      	ldr	r1, [pc, #400]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d017      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b8a:	4b5d      	ldr	r3, [pc, #372]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b98:	4959      	ldr	r1, [pc, #356]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ba8:	d101      	bne.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005baa:	2301      	movs	r3, #1
 8005bac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d017      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005bc6:	4b4e      	ldr	r3, [pc, #312]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bcc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd4:	494a      	ldr	r1, [pc, #296]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005be4:	d101      	bne.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005be6:	2301      	movs	r3, #1
 8005be8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005c02:	2301      	movs	r3, #1
 8005c04:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0320 	and.w	r3, r3, #32
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f000 808b 	beq.w	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c14:	4b3a      	ldr	r3, [pc, #232]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c18:	4a39      	ldr	r2, [pc, #228]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8005c20:	4b37      	ldr	r3, [pc, #220]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c28:	60bb      	str	r3, [r7, #8]
 8005c2a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c2c:	4b35      	ldr	r3, [pc, #212]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a34      	ldr	r2, [pc, #208]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c38:	f7fd fbd6 	bl	80033e8 <HAL_GetTick>
 8005c3c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005c3e:	e008      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c40:	f7fd fbd2 	bl	80033e8 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b64      	cmp	r3, #100	; 0x64
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e38f      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005c52:	4b2c      	ldr	r3, [pc, #176]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0f0      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c5e:	4b28      	ldr	r3, [pc, #160]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c66:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d035      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d02e      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c7c:	4b20      	ldr	r3, [pc, #128]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c84:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c86:	4b1e      	ldr	r3, [pc, #120]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8a:	4a1d      	ldr	r2, [pc, #116]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c90:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c92:	4b1b      	ldr	r3, [pc, #108]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c96:	4a1a      	ldr	r2, [pc, #104]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005c9e:	4a18      	ldr	r2, [pc, #96]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005ca4:	4b16      	ldr	r3, [pc, #88]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d114      	bne.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb0:	f7fd fb9a 	bl	80033e8 <HAL_GetTick>
 8005cb4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb6:	e00a      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cb8:	f7fd fb96 	bl	80033e8 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e351      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cce:	4b0c      	ldr	r3, [pc, #48]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d0ee      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ce2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ce6:	d111      	bne.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005ce8:	4b05      	ldr	r3, [pc, #20]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005cf4:	4b04      	ldr	r3, [pc, #16]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005cf6:	400b      	ands	r3, r1
 8005cf8:	4901      	ldr	r1, [pc, #4]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	608b      	str	r3, [r1, #8]
 8005cfe:	e00b      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005d00:	40023800 	.word	0x40023800
 8005d04:	40007000 	.word	0x40007000
 8005d08:	0ffffcff 	.word	0x0ffffcff
 8005d0c:	4bac      	ldr	r3, [pc, #688]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	4aab      	ldr	r2, [pc, #684]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d12:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005d16:	6093      	str	r3, [r2, #8]
 8005d18:	4ba9      	ldr	r3, [pc, #676]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d24:	49a6      	ldr	r1, [pc, #664]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0310 	and.w	r3, r3, #16
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d010      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d36:	4ba2      	ldr	r3, [pc, #648]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d3c:	4aa0      	ldr	r2, [pc, #640]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005d46:	4b9e      	ldr	r3, [pc, #632]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d48:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d50:	499b      	ldr	r1, [pc, #620]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00a      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d64:	4b96      	ldr	r3, [pc, #600]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d72:	4993      	ldr	r1, [pc, #588]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00a      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d86:	4b8e      	ldr	r3, [pc, #568]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d94:	498a      	ldr	r1, [pc, #552]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00a      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005da8:	4b85      	ldr	r3, [pc, #532]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005db6:	4982      	ldr	r1, [pc, #520]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00a      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005dca:	4b7d      	ldr	r3, [pc, #500]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd8:	4979      	ldr	r1, [pc, #484]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00a      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005dec:	4b74      	ldr	r3, [pc, #464]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df2:	f023 0203 	bic.w	r2, r3, #3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfa:	4971      	ldr	r1, [pc, #452]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e0e:	4b6c      	ldr	r3, [pc, #432]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e14:	f023 020c 	bic.w	r2, r3, #12
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e1c:	4968      	ldr	r1, [pc, #416]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00a      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e30:	4b63      	ldr	r3, [pc, #396]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e36:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e3e:	4960      	ldr	r1, [pc, #384]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00a      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e52:	4b5b      	ldr	r3, [pc, #364]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e58:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e60:	4957      	ldr	r1, [pc, #348]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00a      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e74:	4b52      	ldr	r3, [pc, #328]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e82:	494f      	ldr	r1, [pc, #316]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e84:	4313      	orrs	r3, r2
 8005e86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00a      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005e96:	4b4a      	ldr	r3, [pc, #296]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea4:	4946      	ldr	r1, [pc, #280]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00a      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005eb8:	4b41      	ldr	r3, [pc, #260]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ebe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ec6:	493e      	ldr	r1, [pc, #248]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00a      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005eda:	4b39      	ldr	r3, [pc, #228]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee8:	4935      	ldr	r1, [pc, #212]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00a      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005efc:	4b30      	ldr	r3, [pc, #192]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f02:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f0a:	492d      	ldr	r1, [pc, #180]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d011      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005f1e:	4b28      	ldr	r3, [pc, #160]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f24:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f2c:	4924      	ldr	r1, [pc, #144]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f3c:	d101      	bne.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0308 	and.w	r3, r3, #8
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00a      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f5e:	4b18      	ldr	r3, [pc, #96]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f64:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f6c:	4914      	ldr	r1, [pc, #80]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00b      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005f80:	4b0f      	ldr	r3, [pc, #60]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f86:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f90:	490b      	ldr	r1, [pc, #44]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00f      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005fa4:	4b06      	ldr	r3, [pc, #24]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005faa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fb4:	4902      	ldr	r1, [pc, #8]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005fbc:	e002      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005fbe:	bf00      	nop
 8005fc0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00b      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005fd0:	4b8a      	ldr	r3, [pc, #552]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fd6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe0:	4986      	ldr	r1, [pc, #536]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00b      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005ff4:	4b81      	ldr	r3, [pc, #516]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ffa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006004:	497d      	ldr	r1, [pc, #500]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006006:	4313      	orrs	r3, r2
 8006008:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d006      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 80d6 	beq.w	80061cc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006020:	4b76      	ldr	r3, [pc, #472]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a75      	ldr	r2, [pc, #468]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006026:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800602a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800602c:	f7fd f9dc 	bl	80033e8 <HAL_GetTick>
 8006030:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006032:	e008      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006034:	f7fd f9d8 	bl	80033e8 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b64      	cmp	r3, #100	; 0x64
 8006040:	d901      	bls.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e195      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006046:	4b6d      	ldr	r3, [pc, #436]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1f0      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d021      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006062:	2b00      	cmp	r3, #0
 8006064:	d11d      	bne.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006066:	4b65      	ldr	r3, [pc, #404]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800606c:	0c1b      	lsrs	r3, r3, #16
 800606e:	f003 0303 	and.w	r3, r3, #3
 8006072:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006074:	4b61      	ldr	r3, [pc, #388]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800607a:	0e1b      	lsrs	r3, r3, #24
 800607c:	f003 030f 	and.w	r3, r3, #15
 8006080:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	019a      	lsls	r2, r3, #6
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	041b      	lsls	r3, r3, #16
 800608c:	431a      	orrs	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	061b      	lsls	r3, r3, #24
 8006092:	431a      	orrs	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	071b      	lsls	r3, r3, #28
 800609a:	4958      	ldr	r1, [pc, #352]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800609c:	4313      	orrs	r3, r2
 800609e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d004      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060b6:	d00a      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d02e      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060cc:	d129      	bne.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80060ce:	4b4b      	ldr	r3, [pc, #300]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060d4:	0c1b      	lsrs	r3, r3, #16
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80060dc:	4b47      	ldr	r3, [pc, #284]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060e2:	0f1b      	lsrs	r3, r3, #28
 80060e4:	f003 0307 	and.w	r3, r3, #7
 80060e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	019a      	lsls	r2, r3, #6
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	041b      	lsls	r3, r3, #16
 80060f4:	431a      	orrs	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	061b      	lsls	r3, r3, #24
 80060fc:	431a      	orrs	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	071b      	lsls	r3, r3, #28
 8006102:	493e      	ldr	r1, [pc, #248]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006104:	4313      	orrs	r3, r2
 8006106:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800610a:	4b3c      	ldr	r3, [pc, #240]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800610c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006110:	f023 021f 	bic.w	r2, r3, #31
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	3b01      	subs	r3, #1
 800611a:	4938      	ldr	r1, [pc, #224]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800611c:	4313      	orrs	r3, r2
 800611e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d01d      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800612e:	4b33      	ldr	r3, [pc, #204]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006134:	0e1b      	lsrs	r3, r3, #24
 8006136:	f003 030f 	and.w	r3, r3, #15
 800613a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800613c:	4b2f      	ldr	r3, [pc, #188]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800613e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006142:	0f1b      	lsrs	r3, r3, #28
 8006144:	f003 0307 	and.w	r3, r3, #7
 8006148:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	019a      	lsls	r2, r3, #6
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	041b      	lsls	r3, r3, #16
 8006156:	431a      	orrs	r2, r3
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	061b      	lsls	r3, r3, #24
 800615c:	431a      	orrs	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	071b      	lsls	r3, r3, #28
 8006162:	4926      	ldr	r1, [pc, #152]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006164:	4313      	orrs	r3, r2
 8006166:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d011      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	019a      	lsls	r2, r3, #6
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	041b      	lsls	r3, r3, #16
 8006182:	431a      	orrs	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	061b      	lsls	r3, r3, #24
 800618a:	431a      	orrs	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	071b      	lsls	r3, r3, #28
 8006192:	491a      	ldr	r1, [pc, #104]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006194:	4313      	orrs	r3, r2
 8006196:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800619a:	4b18      	ldr	r3, [pc, #96]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a17      	ldr	r2, [pc, #92]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061a6:	f7fd f91f 	bl	80033e8 <HAL_GetTick>
 80061aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061ac:	e008      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80061ae:	f7fd f91b 	bl	80033e8 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b64      	cmp	r3, #100	; 0x64
 80061ba:	d901      	bls.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e0d8      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061c0:	4b0e      	ldr	r3, [pc, #56]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0f0      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	f040 80ce 	bne.w	8006370 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80061d4:	4b09      	ldr	r3, [pc, #36]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a08      	ldr	r2, [pc, #32]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061e0:	f7fd f902 	bl	80033e8 <HAL_GetTick>
 80061e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80061e6:	e00b      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80061e8:	f7fd f8fe 	bl	80033e8 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	2b64      	cmp	r3, #100	; 0x64
 80061f4:	d904      	bls.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e0bb      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80061fa:	bf00      	nop
 80061fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006200:	4b5e      	ldr	r3, [pc, #376]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006208:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800620c:	d0ec      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800621e:	2b00      	cmp	r3, #0
 8006220:	d009      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800622a:	2b00      	cmp	r3, #0
 800622c:	d02e      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	2b00      	cmp	r3, #0
 8006234:	d12a      	bne.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006236:	4b51      	ldr	r3, [pc, #324]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800623c:	0c1b      	lsrs	r3, r3, #16
 800623e:	f003 0303 	and.w	r3, r3, #3
 8006242:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006244:	4b4d      	ldr	r3, [pc, #308]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800624a:	0f1b      	lsrs	r3, r3, #28
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	019a      	lsls	r2, r3, #6
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	041b      	lsls	r3, r3, #16
 800625c:	431a      	orrs	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	061b      	lsls	r3, r3, #24
 8006264:	431a      	orrs	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	071b      	lsls	r3, r3, #28
 800626a:	4944      	ldr	r1, [pc, #272]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800626c:	4313      	orrs	r3, r2
 800626e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006272:	4b42      	ldr	r3, [pc, #264]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006278:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006280:	3b01      	subs	r3, #1
 8006282:	021b      	lsls	r3, r3, #8
 8006284:	493d      	ldr	r1, [pc, #244]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006286:	4313      	orrs	r3, r2
 8006288:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d022      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800629c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062a0:	d11d      	bne.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80062a2:	4b36      	ldr	r3, [pc, #216]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a8:	0e1b      	lsrs	r3, r3, #24
 80062aa:	f003 030f 	and.w	r3, r3, #15
 80062ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80062b0:	4b32      	ldr	r3, [pc, #200]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b6:	0f1b      	lsrs	r3, r3, #28
 80062b8:	f003 0307 	and.w	r3, r3, #7
 80062bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	019a      	lsls	r2, r3, #6
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	041b      	lsls	r3, r3, #16
 80062ca:	431a      	orrs	r2, r3
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	061b      	lsls	r3, r3, #24
 80062d0:	431a      	orrs	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	071b      	lsls	r3, r3, #28
 80062d6:	4929      	ldr	r1, [pc, #164]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0308 	and.w	r3, r3, #8
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d028      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80062ea:	4b24      	ldr	r3, [pc, #144]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f0:	0e1b      	lsrs	r3, r3, #24
 80062f2:	f003 030f 	and.w	r3, r3, #15
 80062f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80062f8:	4b20      	ldr	r3, [pc, #128]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062fe:	0c1b      	lsrs	r3, r3, #16
 8006300:	f003 0303 	and.w	r3, r3, #3
 8006304:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	019a      	lsls	r2, r3, #6
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	041b      	lsls	r3, r3, #16
 8006310:	431a      	orrs	r2, r3
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	061b      	lsls	r3, r3, #24
 8006316:	431a      	orrs	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	071b      	lsls	r3, r3, #28
 800631e:	4917      	ldr	r1, [pc, #92]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006320:	4313      	orrs	r3, r2
 8006322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006326:	4b15      	ldr	r3, [pc, #84]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800632c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006334:	4911      	ldr	r1, [pc, #68]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006336:	4313      	orrs	r3, r2
 8006338:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800633c:	4b0f      	ldr	r3, [pc, #60]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a0e      	ldr	r2, [pc, #56]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006346:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006348:	f7fd f84e 	bl	80033e8 <HAL_GetTick>
 800634c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800634e:	e008      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006350:	f7fd f84a 	bl	80033e8 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b64      	cmp	r3, #100	; 0x64
 800635c:	d901      	bls.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e007      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006362:	4b06      	ldr	r3, [pc, #24]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800636a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800636e:	d1ef      	bne.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3720      	adds	r7, #32
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	40023800 	.word	0x40023800

08006380 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e049      	b.n	8006426 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d106      	bne.n	80063ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7fc fee8 	bl	800317c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2202      	movs	r2, #2
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	3304      	adds	r3, #4
 80063bc:	4619      	mov	r1, r3
 80063be:	4610      	mov	r0, r2
 80063c0:	f000 f9f6 	bl	80067b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
	...

08006430 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b01      	cmp	r3, #1
 8006442:	d001      	beq.n	8006448 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e054      	b.n	80064f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0201 	orr.w	r2, r2, #1
 800645e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a26      	ldr	r2, [pc, #152]	; (8006500 <HAL_TIM_Base_Start_IT+0xd0>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d022      	beq.n	80064b0 <HAL_TIM_Base_Start_IT+0x80>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006472:	d01d      	beq.n	80064b0 <HAL_TIM_Base_Start_IT+0x80>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a22      	ldr	r2, [pc, #136]	; (8006504 <HAL_TIM_Base_Start_IT+0xd4>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d018      	beq.n	80064b0 <HAL_TIM_Base_Start_IT+0x80>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a21      	ldr	r2, [pc, #132]	; (8006508 <HAL_TIM_Base_Start_IT+0xd8>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d013      	beq.n	80064b0 <HAL_TIM_Base_Start_IT+0x80>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a1f      	ldr	r2, [pc, #124]	; (800650c <HAL_TIM_Base_Start_IT+0xdc>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d00e      	beq.n	80064b0 <HAL_TIM_Base_Start_IT+0x80>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a1e      	ldr	r2, [pc, #120]	; (8006510 <HAL_TIM_Base_Start_IT+0xe0>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d009      	beq.n	80064b0 <HAL_TIM_Base_Start_IT+0x80>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a1c      	ldr	r2, [pc, #112]	; (8006514 <HAL_TIM_Base_Start_IT+0xe4>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d004      	beq.n	80064b0 <HAL_TIM_Base_Start_IT+0x80>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a1b      	ldr	r2, [pc, #108]	; (8006518 <HAL_TIM_Base_Start_IT+0xe8>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d115      	bne.n	80064dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689a      	ldr	r2, [r3, #8]
 80064b6:	4b19      	ldr	r3, [pc, #100]	; (800651c <HAL_TIM_Base_Start_IT+0xec>)
 80064b8:	4013      	ands	r3, r2
 80064ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2b06      	cmp	r3, #6
 80064c0:	d015      	beq.n	80064ee <HAL_TIM_Base_Start_IT+0xbe>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c8:	d011      	beq.n	80064ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f042 0201 	orr.w	r2, r2, #1
 80064d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064da:	e008      	b.n	80064ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f042 0201 	orr.w	r2, r2, #1
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	e000      	b.n	80064f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	40010000 	.word	0x40010000
 8006504:	40000400 	.word	0x40000400
 8006508:	40000800 	.word	0x40000800
 800650c:	40000c00 	.word	0x40000c00
 8006510:	40010400 	.word	0x40010400
 8006514:	40014000 	.word	0x40014000
 8006518:	40001800 	.word	0x40001800
 800651c:	00010007 	.word	0x00010007

08006520 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b02      	cmp	r3, #2
 8006534:	d122      	bne.n	800657c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f003 0302 	and.w	r3, r3, #2
 8006540:	2b02      	cmp	r3, #2
 8006542:	d11b      	bne.n	800657c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f06f 0202 	mvn.w	r2, #2
 800654c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	f003 0303 	and.w	r3, r3, #3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f905 	bl	8006772 <HAL_TIM_IC_CaptureCallback>
 8006568:	e005      	b.n	8006576 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f8f7 	bl	800675e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f908 	bl	8006786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	f003 0304 	and.w	r3, r3, #4
 8006586:	2b04      	cmp	r3, #4
 8006588:	d122      	bne.n	80065d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f003 0304 	and.w	r3, r3, #4
 8006594:	2b04      	cmp	r3, #4
 8006596:	d11b      	bne.n	80065d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f06f 0204 	mvn.w	r2, #4
 80065a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2202      	movs	r2, #2
 80065a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d003      	beq.n	80065be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f8db 	bl	8006772 <HAL_TIM_IC_CaptureCallback>
 80065bc:	e005      	b.n	80065ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f8cd 	bl	800675e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f8de 	bl	8006786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	f003 0308 	and.w	r3, r3, #8
 80065da:	2b08      	cmp	r3, #8
 80065dc:	d122      	bne.n	8006624 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	f003 0308 	and.w	r3, r3, #8
 80065e8:	2b08      	cmp	r3, #8
 80065ea:	d11b      	bne.n	8006624 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f06f 0208 	mvn.w	r2, #8
 80065f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2204      	movs	r2, #4
 80065fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	f003 0303 	and.w	r3, r3, #3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f8b1 	bl	8006772 <HAL_TIM_IC_CaptureCallback>
 8006610:	e005      	b.n	800661e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f8a3 	bl	800675e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f8b4 	bl	8006786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	f003 0310 	and.w	r3, r3, #16
 800662e:	2b10      	cmp	r3, #16
 8006630:	d122      	bne.n	8006678 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	f003 0310 	and.w	r3, r3, #16
 800663c:	2b10      	cmp	r3, #16
 800663e:	d11b      	bne.n	8006678 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f06f 0210 	mvn.w	r2, #16
 8006648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2208      	movs	r2, #8
 800664e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f887 	bl	8006772 <HAL_TIM_IC_CaptureCallback>
 8006664:	e005      	b.n	8006672 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f879 	bl	800675e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f88a 	bl	8006786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b01      	cmp	r3, #1
 8006684:	d10e      	bne.n	80066a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b01      	cmp	r3, #1
 8006692:	d107      	bne.n	80066a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f06f 0201 	mvn.w	r2, #1
 800669c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7fc fc70 	bl	8002f84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ae:	2b80      	cmp	r3, #128	; 0x80
 80066b0:	d10e      	bne.n	80066d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066bc:	2b80      	cmp	r3, #128	; 0x80
 80066be:	d107      	bne.n	80066d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f9a8 	bl	8006a20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066de:	d10e      	bne.n	80066fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ea:	2b80      	cmp	r3, #128	; 0x80
 80066ec:	d107      	bne.n	80066fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f99b 	bl	8006a34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006708:	2b40      	cmp	r3, #64	; 0x40
 800670a:	d10e      	bne.n	800672a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006716:	2b40      	cmp	r3, #64	; 0x40
 8006718:	d107      	bne.n	800672a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f838 	bl	800679a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	f003 0320 	and.w	r3, r3, #32
 8006734:	2b20      	cmp	r3, #32
 8006736:	d10e      	bne.n	8006756 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	f003 0320 	and.w	r3, r3, #32
 8006742:	2b20      	cmp	r3, #32
 8006744:	d107      	bne.n	8006756 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f06f 0220 	mvn.w	r2, #32
 800674e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f95b 	bl	8006a0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006756:	bf00      	nop
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006772:	b480      	push	{r7}
 8006774:	b083      	sub	sp, #12
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800677a:	bf00      	nop
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
	...

080067b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a40      	ldr	r2, [pc, #256]	; (80068c4 <TIM_Base_SetConfig+0x114>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d013      	beq.n	80067f0 <TIM_Base_SetConfig+0x40>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ce:	d00f      	beq.n	80067f0 <TIM_Base_SetConfig+0x40>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a3d      	ldr	r2, [pc, #244]	; (80068c8 <TIM_Base_SetConfig+0x118>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d00b      	beq.n	80067f0 <TIM_Base_SetConfig+0x40>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a3c      	ldr	r2, [pc, #240]	; (80068cc <TIM_Base_SetConfig+0x11c>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d007      	beq.n	80067f0 <TIM_Base_SetConfig+0x40>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a3b      	ldr	r2, [pc, #236]	; (80068d0 <TIM_Base_SetConfig+0x120>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d003      	beq.n	80067f0 <TIM_Base_SetConfig+0x40>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a3a      	ldr	r2, [pc, #232]	; (80068d4 <TIM_Base_SetConfig+0x124>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d108      	bne.n	8006802 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	4313      	orrs	r3, r2
 8006800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a2f      	ldr	r2, [pc, #188]	; (80068c4 <TIM_Base_SetConfig+0x114>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d02b      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006810:	d027      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a2c      	ldr	r2, [pc, #176]	; (80068c8 <TIM_Base_SetConfig+0x118>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d023      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a2b      	ldr	r2, [pc, #172]	; (80068cc <TIM_Base_SetConfig+0x11c>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d01f      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a2a      	ldr	r2, [pc, #168]	; (80068d0 <TIM_Base_SetConfig+0x120>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d01b      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a29      	ldr	r2, [pc, #164]	; (80068d4 <TIM_Base_SetConfig+0x124>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d017      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a28      	ldr	r2, [pc, #160]	; (80068d8 <TIM_Base_SetConfig+0x128>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d013      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a27      	ldr	r2, [pc, #156]	; (80068dc <TIM_Base_SetConfig+0x12c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00f      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a26      	ldr	r2, [pc, #152]	; (80068e0 <TIM_Base_SetConfig+0x130>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d00b      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a25      	ldr	r2, [pc, #148]	; (80068e4 <TIM_Base_SetConfig+0x134>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d007      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a24      	ldr	r2, [pc, #144]	; (80068e8 <TIM_Base_SetConfig+0x138>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d003      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a23      	ldr	r2, [pc, #140]	; (80068ec <TIM_Base_SetConfig+0x13c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d108      	bne.n	8006874 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4313      	orrs	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	4313      	orrs	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	689a      	ldr	r2, [r3, #8]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a0a      	ldr	r2, [pc, #40]	; (80068c4 <TIM_Base_SetConfig+0x114>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d003      	beq.n	80068a8 <TIM_Base_SetConfig+0xf8>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a0c      	ldr	r2, [pc, #48]	; (80068d4 <TIM_Base_SetConfig+0x124>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d103      	bne.n	80068b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	691a      	ldr	r2, [r3, #16]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	615a      	str	r2, [r3, #20]
}
 80068b6:	bf00      	nop
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	40010000 	.word	0x40010000
 80068c8:	40000400 	.word	0x40000400
 80068cc:	40000800 	.word	0x40000800
 80068d0:	40000c00 	.word	0x40000c00
 80068d4:	40010400 	.word	0x40010400
 80068d8:	40014000 	.word	0x40014000
 80068dc:	40014400 	.word	0x40014400
 80068e0:	40014800 	.word	0x40014800
 80068e4:	40001800 	.word	0x40001800
 80068e8:	40001c00 	.word	0x40001c00
 80068ec:	40002000 	.word	0x40002000

080068f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006900:	2b01      	cmp	r3, #1
 8006902:	d101      	bne.n	8006908 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006904:	2302      	movs	r3, #2
 8006906:	e06d      	b.n	80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2202      	movs	r2, #2
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a30      	ldr	r2, [pc, #192]	; (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d004      	beq.n	800693c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a2f      	ldr	r2, [pc, #188]	; (80069f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d108      	bne.n	800694e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006942:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	4313      	orrs	r3, r2
 800694c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006954:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	4313      	orrs	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a20      	ldr	r2, [pc, #128]	; (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d022      	beq.n	80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800697a:	d01d      	beq.n	80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a1d      	ldr	r2, [pc, #116]	; (80069f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d018      	beq.n	80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a1c      	ldr	r2, [pc, #112]	; (80069fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d013      	beq.n	80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a1a      	ldr	r2, [pc, #104]	; (8006a00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d00e      	beq.n	80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a15      	ldr	r2, [pc, #84]	; (80069f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d009      	beq.n	80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a16      	ldr	r2, [pc, #88]	; (8006a04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d004      	beq.n	80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a15      	ldr	r2, [pc, #84]	; (8006a08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d10c      	bne.n	80069d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr
 80069f0:	40010000 	.word	0x40010000
 80069f4:	40010400 	.word	0x40010400
 80069f8:	40000400 	.word	0x40000400
 80069fc:	40000800 	.word	0x40000800
 8006a00:	40000c00 	.word	0x40000c00
 8006a04:	40014000 	.word	0x40014000
 8006a08:	40001800 	.word	0x40001800

08006a0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e040      	b.n	8006adc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d106      	bne.n	8006a70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7fc fbdc 	bl	8003228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2224      	movs	r2, #36	; 0x24
 8006a74:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0201 	bic.w	r2, r2, #1
 8006a84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fc06 	bl	8007298 <UART_SetConfig>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d101      	bne.n	8006a96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e022      	b.n	8006adc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fe5e 	bl	8007760 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ab2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689a      	ldr	r2, [r3, #8]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ac2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f042 0201 	orr.w	r2, r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fee5 	bl	80078a4 <UART_CheckIdleState>
 8006ada:	4603      	mov	r3, r0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b08a      	sub	sp, #40	; 0x28
 8006ae8:	af02      	add	r7, sp, #8
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	603b      	str	r3, [r7, #0]
 8006af0:	4613      	mov	r3, r2
 8006af2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006af8:	2b20      	cmp	r3, #32
 8006afa:	d171      	bne.n	8006be0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d002      	beq.n	8006b08 <HAL_UART_Transmit+0x24>
 8006b02:	88fb      	ldrh	r3, [r7, #6]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e06a      	b.n	8006be2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2221      	movs	r2, #33	; 0x21
 8006b18:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b1a:	f7fc fc65 	bl	80033e8 <HAL_GetTick>
 8006b1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	88fa      	ldrh	r2, [r7, #6]
 8006b24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	88fa      	ldrh	r2, [r7, #6]
 8006b2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b38:	d108      	bne.n	8006b4c <HAL_UART_Transmit+0x68>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d104      	bne.n	8006b4c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006b42:	2300      	movs	r3, #0
 8006b44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	61bb      	str	r3, [r7, #24]
 8006b4a:	e003      	b.n	8006b54 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b50:	2300      	movs	r3, #0
 8006b52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b54:	e02c      	b.n	8006bb0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	2180      	movs	r1, #128	; 0x80
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f000 feec 	bl	800793e <UART_WaitOnFlagUntilTimeout>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d001      	beq.n	8006b70 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e038      	b.n	8006be2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10b      	bne.n	8006b8e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	3302      	adds	r3, #2
 8006b8a:	61bb      	str	r3, [r7, #24]
 8006b8c:	e007      	b.n	8006b9e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	781a      	ldrb	r2, [r3, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1cc      	bne.n	8006b56 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	2140      	movs	r1, #64	; 0x40
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 feb9 	bl	800793e <UART_WaitOnFlagUntilTimeout>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e005      	b.n	8006be2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	e000      	b.n	8006be2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006be0:	2302      	movs	r3, #2
  }
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3720      	adds	r7, #32
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b08a      	sub	sp, #40	; 0x28
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	60f8      	str	r0, [r7, #12]
 8006bf2:	60b9      	str	r1, [r7, #8]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bfe:	2b20      	cmp	r3, #32
 8006c00:	d132      	bne.n	8006c68 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <HAL_UART_Receive_IT+0x24>
 8006c08:	88fb      	ldrh	r3, [r7, #6]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e02b      	b.n	8006c6a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d018      	beq.n	8006c58 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	e853 3f00 	ldrex	r3, [r3]
 8006c32:	613b      	str	r3, [r7, #16]
   return(result);
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	461a      	mov	r2, r3
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	623b      	str	r3, [r7, #32]
 8006c46:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c48:	69f9      	ldr	r1, [r7, #28]
 8006c4a:	6a3a      	ldr	r2, [r7, #32]
 8006c4c:	e841 2300 	strex	r3, r2, [r1]
 8006c50:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1e6      	bne.n	8006c26 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006c58:	88fb      	ldrh	r3, [r7, #6]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	68b9      	ldr	r1, [r7, #8]
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f000 ff34 	bl	8007acc <UART_Start_Receive_IT>
 8006c64:	4603      	mov	r3, r0
 8006c66:	e000      	b.n	8006c6a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006c68:	2302      	movs	r3, #2
  }
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3728      	adds	r7, #40	; 0x28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
	...

08006c74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b0ba      	sub	sp, #232	; 0xe8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006c9e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006ca8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d115      	bne.n	8006cdc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb4:	f003 0320 	and.w	r3, r3, #32
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00f      	beq.n	8006cdc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cc0:	f003 0320 	and.w	r3, r3, #32
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d009      	beq.n	8006cdc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f000 82ac 	beq.w	800722a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	4798      	blx	r3
      }
      return;
 8006cda:	e2a6      	b.n	800722a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006cdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 8117 	beq.w	8006f14 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d106      	bne.n	8006d00 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006cf2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006cf6:	4b85      	ldr	r3, [pc, #532]	; (8006f0c <HAL_UART_IRQHandler+0x298>)
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f000 810a 	beq.w	8006f14 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d011      	beq.n	8006d30 <HAL_UART_IRQHandler+0xbc>
 8006d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00b      	beq.n	8006d30 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d26:	f043 0201 	orr.w	r2, r3, #1
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d011      	beq.n	8006d60 <HAL_UART_IRQHandler+0xec>
 8006d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00b      	beq.n	8006d60 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d56:	f043 0204 	orr.w	r2, r3, #4
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d011      	beq.n	8006d90 <HAL_UART_IRQHandler+0x11c>
 8006d6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00b      	beq.n	8006d90 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2204      	movs	r2, #4
 8006d7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d86:	f043 0202 	orr.w	r2, r3, #2
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d94:	f003 0308 	and.w	r3, r3, #8
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d017      	beq.n	8006dcc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006da0:	f003 0320 	and.w	r3, r3, #32
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d105      	bne.n	8006db4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00b      	beq.n	8006dcc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2208      	movs	r2, #8
 8006dba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dc2:	f043 0208 	orr.w	r2, r3, #8
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d012      	beq.n	8006dfe <HAL_UART_IRQHandler+0x18a>
 8006dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00c      	beq.n	8006dfe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006df4:	f043 0220 	orr.w	r2, r3, #32
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 8212 	beq.w	800722e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e0e:	f003 0320 	and.w	r3, r3, #32
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00d      	beq.n	8006e32 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e1a:	f003 0320 	and.w	r3, r3, #32
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d007      	beq.n	8006e32 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e46:	2b40      	cmp	r3, #64	; 0x40
 8006e48:	d005      	beq.n	8006e56 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d04f      	beq.n	8006ef6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fefe 	bl	8007c58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e66:	2b40      	cmp	r3, #64	; 0x40
 8006e68:	d141      	bne.n	8006eee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	3308      	adds	r3, #8
 8006e70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e78:	e853 3f00 	ldrex	r3, [r3]
 8006e7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3308      	adds	r3, #8
 8006e92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ea2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ea6:	e841 2300 	strex	r3, r2, [r1]
 8006eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006eae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1d9      	bne.n	8006e6a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d013      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ec2:	4a13      	ldr	r2, [pc, #76]	; (8006f10 <HAL_UART_IRQHandler+0x29c>)
 8006ec4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fd ff31 	bl	8004d32 <HAL_DMA_Abort_IT>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d017      	beq.n	8006f06 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee4:	e00f      	b.n	8006f06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f9b6 	bl	8007258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eec:	e00b      	b.n	8006f06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f9b2 	bl	8007258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef4:	e007      	b.n	8006f06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f9ae 	bl	8007258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006f04:	e193      	b.n	800722e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f06:	bf00      	nop
    return;
 8006f08:	e191      	b.n	800722e <HAL_UART_IRQHandler+0x5ba>
 8006f0a:	bf00      	nop
 8006f0c:	04000120 	.word	0x04000120
 8006f10:	08007d21 	.word	0x08007d21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	f040 814c 	bne.w	80071b6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f22:	f003 0310 	and.w	r3, r3, #16
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f000 8145 	beq.w	80071b6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f30:	f003 0310 	and.w	r3, r3, #16
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 813e 	beq.w	80071b6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2210      	movs	r2, #16
 8006f40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4c:	2b40      	cmp	r3, #64	; 0x40
 8006f4e:	f040 80b6 	bne.w	80070be <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f5e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f000 8165 	beq.w	8007232 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f72:	429a      	cmp	r2, r3
 8006f74:	f080 815d 	bcs.w	8007232 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f86:	69db      	ldr	r3, [r3, #28]
 8006f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f8c:	f000 8086 	beq.w	800709c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f9c:	e853 3f00 	ldrex	r3, [r3]
 8006fa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006fa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006fbe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006fc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006fca:	e841 2300 	strex	r3, r2, [r1]
 8006fce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006fd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1da      	bne.n	8006f90 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3308      	adds	r3, #8
 8006fe0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fe4:	e853 3f00 	ldrex	r3, [r3]
 8006fe8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006fea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fec:	f023 0301 	bic.w	r3, r3, #1
 8006ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3308      	adds	r3, #8
 8006ffa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ffe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007002:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007004:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007006:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800700a:	e841 2300 	strex	r3, r2, [r1]
 800700e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1e1      	bne.n	8006fda <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3308      	adds	r3, #8
 800701c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007020:	e853 3f00 	ldrex	r3, [r3]
 8007024:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800702c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3308      	adds	r3, #8
 8007036:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800703a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800703c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007040:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007042:	e841 2300 	strex	r3, r2, [r1]
 8007046:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1e3      	bne.n	8007016 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2220      	movs	r2, #32
 8007052:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007064:	e853 3f00 	ldrex	r3, [r3]
 8007068:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800706a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800706c:	f023 0310 	bic.w	r3, r3, #16
 8007070:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	461a      	mov	r2, r3
 800707a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800707e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007080:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007082:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007084:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007086:	e841 2300 	strex	r3, r2, [r1]
 800708a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800708c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1e4      	bne.n	800705c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007096:	4618      	mov	r0, r3
 8007098:	f7fd fddb 	bl	8004c52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2202      	movs	r2, #2
 80070a0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	4619      	mov	r1, r3
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f8d8 	bl	800726c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070bc:	e0b9      	b.n	8007232 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070d8:	b29b      	uxth	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f000 80ab 	beq.w	8007236 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80070e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 80a6 	beq.w	8007236 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f2:	e853 3f00 	ldrex	r3, [r3]
 80070f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800710c:	647b      	str	r3, [r7, #68]	; 0x44
 800710e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007110:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007112:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007114:	e841 2300 	strex	r3, r2, [r1]
 8007118:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800711a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1e4      	bne.n	80070ea <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3308      	adds	r3, #8
 8007126:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	e853 3f00 	ldrex	r3, [r3]
 800712e:	623b      	str	r3, [r7, #32]
   return(result);
 8007130:	6a3b      	ldr	r3, [r7, #32]
 8007132:	f023 0301 	bic.w	r3, r3, #1
 8007136:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3308      	adds	r3, #8
 8007140:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007144:	633a      	str	r2, [r7, #48]	; 0x30
 8007146:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007148:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800714a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800714c:	e841 2300 	strex	r3, r2, [r1]
 8007150:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1e3      	bne.n	8007120 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2220      	movs	r2, #32
 800715c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	e853 3f00 	ldrex	r3, [r3]
 8007178:	60fb      	str	r3, [r7, #12]
   return(result);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f023 0310 	bic.w	r3, r3, #16
 8007180:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	461a      	mov	r2, r3
 800718a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800718e:	61fb      	str	r3, [r7, #28]
 8007190:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	69b9      	ldr	r1, [r7, #24]
 8007194:	69fa      	ldr	r2, [r7, #28]
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	617b      	str	r3, [r7, #20]
   return(result);
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e4      	bne.n	800716c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2202      	movs	r2, #2
 80071a6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071ac:	4619      	mov	r1, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f85c 	bl	800726c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071b4:	e03f      	b.n	8007236 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80071b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00e      	beq.n	80071e0 <HAL_UART_IRQHandler+0x56c>
 80071c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d008      	beq.n	80071e0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80071d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f853 	bl	8007284 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071de:	e02d      	b.n	800723c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80071e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00e      	beq.n	800720a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80071ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d008      	beq.n	800720a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d01c      	beq.n	800723a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	4798      	blx	r3
    }
    return;
 8007208:	e017      	b.n	800723a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800720a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800720e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007212:	2b00      	cmp	r3, #0
 8007214:	d012      	beq.n	800723c <HAL_UART_IRQHandler+0x5c8>
 8007216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800721a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00c      	beq.n	800723c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fd92 	bl	8007d4c <UART_EndTransmit_IT>
    return;
 8007228:	e008      	b.n	800723c <HAL_UART_IRQHandler+0x5c8>
      return;
 800722a:	bf00      	nop
 800722c:	e006      	b.n	800723c <HAL_UART_IRQHandler+0x5c8>
    return;
 800722e:	bf00      	nop
 8007230:	e004      	b.n	800723c <HAL_UART_IRQHandler+0x5c8>
      return;
 8007232:	bf00      	nop
 8007234:	e002      	b.n	800723c <HAL_UART_IRQHandler+0x5c8>
      return;
 8007236:	bf00      	nop
 8007238:	e000      	b.n	800723c <HAL_UART_IRQHandler+0x5c8>
    return;
 800723a:	bf00      	nop
  }

}
 800723c:	37e8      	adds	r7, #232	; 0xe8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop

08007244 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	460b      	mov	r3, r1
 8007276:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	431a      	orrs	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	431a      	orrs	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	69db      	ldr	r3, [r3, #28]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	4ba6      	ldr	r3, [pc, #664]	; (800755c <UART_SetConfig+0x2c4>)
 80072c4:	4013      	ands	r3, r2
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	6812      	ldr	r2, [r2, #0]
 80072ca:	6979      	ldr	r1, [r7, #20]
 80072cc:	430b      	orrs	r3, r1
 80072ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68da      	ldr	r2, [r3, #12]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	430a      	orrs	r2, r1
 8007308:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a94      	ldr	r2, [pc, #592]	; (8007560 <UART_SetConfig+0x2c8>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d120      	bne.n	8007356 <UART_SetConfig+0xbe>
 8007314:	4b93      	ldr	r3, [pc, #588]	; (8007564 <UART_SetConfig+0x2cc>)
 8007316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800731a:	f003 0303 	and.w	r3, r3, #3
 800731e:	2b03      	cmp	r3, #3
 8007320:	d816      	bhi.n	8007350 <UART_SetConfig+0xb8>
 8007322:	a201      	add	r2, pc, #4	; (adr r2, 8007328 <UART_SetConfig+0x90>)
 8007324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007328:	08007339 	.word	0x08007339
 800732c:	08007345 	.word	0x08007345
 8007330:	0800733f 	.word	0x0800733f
 8007334:	0800734b 	.word	0x0800734b
 8007338:	2301      	movs	r3, #1
 800733a:	77fb      	strb	r3, [r7, #31]
 800733c:	e150      	b.n	80075e0 <UART_SetConfig+0x348>
 800733e:	2302      	movs	r3, #2
 8007340:	77fb      	strb	r3, [r7, #31]
 8007342:	e14d      	b.n	80075e0 <UART_SetConfig+0x348>
 8007344:	2304      	movs	r3, #4
 8007346:	77fb      	strb	r3, [r7, #31]
 8007348:	e14a      	b.n	80075e0 <UART_SetConfig+0x348>
 800734a:	2308      	movs	r3, #8
 800734c:	77fb      	strb	r3, [r7, #31]
 800734e:	e147      	b.n	80075e0 <UART_SetConfig+0x348>
 8007350:	2310      	movs	r3, #16
 8007352:	77fb      	strb	r3, [r7, #31]
 8007354:	e144      	b.n	80075e0 <UART_SetConfig+0x348>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a83      	ldr	r2, [pc, #524]	; (8007568 <UART_SetConfig+0x2d0>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d132      	bne.n	80073c6 <UART_SetConfig+0x12e>
 8007360:	4b80      	ldr	r3, [pc, #512]	; (8007564 <UART_SetConfig+0x2cc>)
 8007362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007366:	f003 030c 	and.w	r3, r3, #12
 800736a:	2b0c      	cmp	r3, #12
 800736c:	d828      	bhi.n	80073c0 <UART_SetConfig+0x128>
 800736e:	a201      	add	r2, pc, #4	; (adr r2, 8007374 <UART_SetConfig+0xdc>)
 8007370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007374:	080073a9 	.word	0x080073a9
 8007378:	080073c1 	.word	0x080073c1
 800737c:	080073c1 	.word	0x080073c1
 8007380:	080073c1 	.word	0x080073c1
 8007384:	080073b5 	.word	0x080073b5
 8007388:	080073c1 	.word	0x080073c1
 800738c:	080073c1 	.word	0x080073c1
 8007390:	080073c1 	.word	0x080073c1
 8007394:	080073af 	.word	0x080073af
 8007398:	080073c1 	.word	0x080073c1
 800739c:	080073c1 	.word	0x080073c1
 80073a0:	080073c1 	.word	0x080073c1
 80073a4:	080073bb 	.word	0x080073bb
 80073a8:	2300      	movs	r3, #0
 80073aa:	77fb      	strb	r3, [r7, #31]
 80073ac:	e118      	b.n	80075e0 <UART_SetConfig+0x348>
 80073ae:	2302      	movs	r3, #2
 80073b0:	77fb      	strb	r3, [r7, #31]
 80073b2:	e115      	b.n	80075e0 <UART_SetConfig+0x348>
 80073b4:	2304      	movs	r3, #4
 80073b6:	77fb      	strb	r3, [r7, #31]
 80073b8:	e112      	b.n	80075e0 <UART_SetConfig+0x348>
 80073ba:	2308      	movs	r3, #8
 80073bc:	77fb      	strb	r3, [r7, #31]
 80073be:	e10f      	b.n	80075e0 <UART_SetConfig+0x348>
 80073c0:	2310      	movs	r3, #16
 80073c2:	77fb      	strb	r3, [r7, #31]
 80073c4:	e10c      	b.n	80075e0 <UART_SetConfig+0x348>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a68      	ldr	r2, [pc, #416]	; (800756c <UART_SetConfig+0x2d4>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d120      	bne.n	8007412 <UART_SetConfig+0x17a>
 80073d0:	4b64      	ldr	r3, [pc, #400]	; (8007564 <UART_SetConfig+0x2cc>)
 80073d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80073da:	2b30      	cmp	r3, #48	; 0x30
 80073dc:	d013      	beq.n	8007406 <UART_SetConfig+0x16e>
 80073de:	2b30      	cmp	r3, #48	; 0x30
 80073e0:	d814      	bhi.n	800740c <UART_SetConfig+0x174>
 80073e2:	2b20      	cmp	r3, #32
 80073e4:	d009      	beq.n	80073fa <UART_SetConfig+0x162>
 80073e6:	2b20      	cmp	r3, #32
 80073e8:	d810      	bhi.n	800740c <UART_SetConfig+0x174>
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <UART_SetConfig+0x15c>
 80073ee:	2b10      	cmp	r3, #16
 80073f0:	d006      	beq.n	8007400 <UART_SetConfig+0x168>
 80073f2:	e00b      	b.n	800740c <UART_SetConfig+0x174>
 80073f4:	2300      	movs	r3, #0
 80073f6:	77fb      	strb	r3, [r7, #31]
 80073f8:	e0f2      	b.n	80075e0 <UART_SetConfig+0x348>
 80073fa:	2302      	movs	r3, #2
 80073fc:	77fb      	strb	r3, [r7, #31]
 80073fe:	e0ef      	b.n	80075e0 <UART_SetConfig+0x348>
 8007400:	2304      	movs	r3, #4
 8007402:	77fb      	strb	r3, [r7, #31]
 8007404:	e0ec      	b.n	80075e0 <UART_SetConfig+0x348>
 8007406:	2308      	movs	r3, #8
 8007408:	77fb      	strb	r3, [r7, #31]
 800740a:	e0e9      	b.n	80075e0 <UART_SetConfig+0x348>
 800740c:	2310      	movs	r3, #16
 800740e:	77fb      	strb	r3, [r7, #31]
 8007410:	e0e6      	b.n	80075e0 <UART_SetConfig+0x348>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a56      	ldr	r2, [pc, #344]	; (8007570 <UART_SetConfig+0x2d8>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d120      	bne.n	800745e <UART_SetConfig+0x1c6>
 800741c:	4b51      	ldr	r3, [pc, #324]	; (8007564 <UART_SetConfig+0x2cc>)
 800741e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007422:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007426:	2bc0      	cmp	r3, #192	; 0xc0
 8007428:	d013      	beq.n	8007452 <UART_SetConfig+0x1ba>
 800742a:	2bc0      	cmp	r3, #192	; 0xc0
 800742c:	d814      	bhi.n	8007458 <UART_SetConfig+0x1c0>
 800742e:	2b80      	cmp	r3, #128	; 0x80
 8007430:	d009      	beq.n	8007446 <UART_SetConfig+0x1ae>
 8007432:	2b80      	cmp	r3, #128	; 0x80
 8007434:	d810      	bhi.n	8007458 <UART_SetConfig+0x1c0>
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <UART_SetConfig+0x1a8>
 800743a:	2b40      	cmp	r3, #64	; 0x40
 800743c:	d006      	beq.n	800744c <UART_SetConfig+0x1b4>
 800743e:	e00b      	b.n	8007458 <UART_SetConfig+0x1c0>
 8007440:	2300      	movs	r3, #0
 8007442:	77fb      	strb	r3, [r7, #31]
 8007444:	e0cc      	b.n	80075e0 <UART_SetConfig+0x348>
 8007446:	2302      	movs	r3, #2
 8007448:	77fb      	strb	r3, [r7, #31]
 800744a:	e0c9      	b.n	80075e0 <UART_SetConfig+0x348>
 800744c:	2304      	movs	r3, #4
 800744e:	77fb      	strb	r3, [r7, #31]
 8007450:	e0c6      	b.n	80075e0 <UART_SetConfig+0x348>
 8007452:	2308      	movs	r3, #8
 8007454:	77fb      	strb	r3, [r7, #31]
 8007456:	e0c3      	b.n	80075e0 <UART_SetConfig+0x348>
 8007458:	2310      	movs	r3, #16
 800745a:	77fb      	strb	r3, [r7, #31]
 800745c:	e0c0      	b.n	80075e0 <UART_SetConfig+0x348>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a44      	ldr	r2, [pc, #272]	; (8007574 <UART_SetConfig+0x2dc>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d125      	bne.n	80074b4 <UART_SetConfig+0x21c>
 8007468:	4b3e      	ldr	r3, [pc, #248]	; (8007564 <UART_SetConfig+0x2cc>)
 800746a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800746e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007476:	d017      	beq.n	80074a8 <UART_SetConfig+0x210>
 8007478:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800747c:	d817      	bhi.n	80074ae <UART_SetConfig+0x216>
 800747e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007482:	d00b      	beq.n	800749c <UART_SetConfig+0x204>
 8007484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007488:	d811      	bhi.n	80074ae <UART_SetConfig+0x216>
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <UART_SetConfig+0x1fe>
 800748e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007492:	d006      	beq.n	80074a2 <UART_SetConfig+0x20a>
 8007494:	e00b      	b.n	80074ae <UART_SetConfig+0x216>
 8007496:	2300      	movs	r3, #0
 8007498:	77fb      	strb	r3, [r7, #31]
 800749a:	e0a1      	b.n	80075e0 <UART_SetConfig+0x348>
 800749c:	2302      	movs	r3, #2
 800749e:	77fb      	strb	r3, [r7, #31]
 80074a0:	e09e      	b.n	80075e0 <UART_SetConfig+0x348>
 80074a2:	2304      	movs	r3, #4
 80074a4:	77fb      	strb	r3, [r7, #31]
 80074a6:	e09b      	b.n	80075e0 <UART_SetConfig+0x348>
 80074a8:	2308      	movs	r3, #8
 80074aa:	77fb      	strb	r3, [r7, #31]
 80074ac:	e098      	b.n	80075e0 <UART_SetConfig+0x348>
 80074ae:	2310      	movs	r3, #16
 80074b0:	77fb      	strb	r3, [r7, #31]
 80074b2:	e095      	b.n	80075e0 <UART_SetConfig+0x348>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a2f      	ldr	r2, [pc, #188]	; (8007578 <UART_SetConfig+0x2e0>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d125      	bne.n	800750a <UART_SetConfig+0x272>
 80074be:	4b29      	ldr	r3, [pc, #164]	; (8007564 <UART_SetConfig+0x2cc>)
 80074c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80074c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074cc:	d017      	beq.n	80074fe <UART_SetConfig+0x266>
 80074ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074d2:	d817      	bhi.n	8007504 <UART_SetConfig+0x26c>
 80074d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074d8:	d00b      	beq.n	80074f2 <UART_SetConfig+0x25a>
 80074da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074de:	d811      	bhi.n	8007504 <UART_SetConfig+0x26c>
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d003      	beq.n	80074ec <UART_SetConfig+0x254>
 80074e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074e8:	d006      	beq.n	80074f8 <UART_SetConfig+0x260>
 80074ea:	e00b      	b.n	8007504 <UART_SetConfig+0x26c>
 80074ec:	2301      	movs	r3, #1
 80074ee:	77fb      	strb	r3, [r7, #31]
 80074f0:	e076      	b.n	80075e0 <UART_SetConfig+0x348>
 80074f2:	2302      	movs	r3, #2
 80074f4:	77fb      	strb	r3, [r7, #31]
 80074f6:	e073      	b.n	80075e0 <UART_SetConfig+0x348>
 80074f8:	2304      	movs	r3, #4
 80074fa:	77fb      	strb	r3, [r7, #31]
 80074fc:	e070      	b.n	80075e0 <UART_SetConfig+0x348>
 80074fe:	2308      	movs	r3, #8
 8007500:	77fb      	strb	r3, [r7, #31]
 8007502:	e06d      	b.n	80075e0 <UART_SetConfig+0x348>
 8007504:	2310      	movs	r3, #16
 8007506:	77fb      	strb	r3, [r7, #31]
 8007508:	e06a      	b.n	80075e0 <UART_SetConfig+0x348>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a1b      	ldr	r2, [pc, #108]	; (800757c <UART_SetConfig+0x2e4>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d138      	bne.n	8007586 <UART_SetConfig+0x2ee>
 8007514:	4b13      	ldr	r3, [pc, #76]	; (8007564 <UART_SetConfig+0x2cc>)
 8007516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800751a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800751e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007522:	d017      	beq.n	8007554 <UART_SetConfig+0x2bc>
 8007524:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007528:	d82a      	bhi.n	8007580 <UART_SetConfig+0x2e8>
 800752a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800752e:	d00b      	beq.n	8007548 <UART_SetConfig+0x2b0>
 8007530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007534:	d824      	bhi.n	8007580 <UART_SetConfig+0x2e8>
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <UART_SetConfig+0x2aa>
 800753a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800753e:	d006      	beq.n	800754e <UART_SetConfig+0x2b6>
 8007540:	e01e      	b.n	8007580 <UART_SetConfig+0x2e8>
 8007542:	2300      	movs	r3, #0
 8007544:	77fb      	strb	r3, [r7, #31]
 8007546:	e04b      	b.n	80075e0 <UART_SetConfig+0x348>
 8007548:	2302      	movs	r3, #2
 800754a:	77fb      	strb	r3, [r7, #31]
 800754c:	e048      	b.n	80075e0 <UART_SetConfig+0x348>
 800754e:	2304      	movs	r3, #4
 8007550:	77fb      	strb	r3, [r7, #31]
 8007552:	e045      	b.n	80075e0 <UART_SetConfig+0x348>
 8007554:	2308      	movs	r3, #8
 8007556:	77fb      	strb	r3, [r7, #31]
 8007558:	e042      	b.n	80075e0 <UART_SetConfig+0x348>
 800755a:	bf00      	nop
 800755c:	efff69f3 	.word	0xefff69f3
 8007560:	40011000 	.word	0x40011000
 8007564:	40023800 	.word	0x40023800
 8007568:	40004400 	.word	0x40004400
 800756c:	40004800 	.word	0x40004800
 8007570:	40004c00 	.word	0x40004c00
 8007574:	40005000 	.word	0x40005000
 8007578:	40011400 	.word	0x40011400
 800757c:	40007800 	.word	0x40007800
 8007580:	2310      	movs	r3, #16
 8007582:	77fb      	strb	r3, [r7, #31]
 8007584:	e02c      	b.n	80075e0 <UART_SetConfig+0x348>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a72      	ldr	r2, [pc, #456]	; (8007754 <UART_SetConfig+0x4bc>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d125      	bne.n	80075dc <UART_SetConfig+0x344>
 8007590:	4b71      	ldr	r3, [pc, #452]	; (8007758 <UART_SetConfig+0x4c0>)
 8007592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007596:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800759a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800759e:	d017      	beq.n	80075d0 <UART_SetConfig+0x338>
 80075a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80075a4:	d817      	bhi.n	80075d6 <UART_SetConfig+0x33e>
 80075a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075aa:	d00b      	beq.n	80075c4 <UART_SetConfig+0x32c>
 80075ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075b0:	d811      	bhi.n	80075d6 <UART_SetConfig+0x33e>
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d003      	beq.n	80075be <UART_SetConfig+0x326>
 80075b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075ba:	d006      	beq.n	80075ca <UART_SetConfig+0x332>
 80075bc:	e00b      	b.n	80075d6 <UART_SetConfig+0x33e>
 80075be:	2300      	movs	r3, #0
 80075c0:	77fb      	strb	r3, [r7, #31]
 80075c2:	e00d      	b.n	80075e0 <UART_SetConfig+0x348>
 80075c4:	2302      	movs	r3, #2
 80075c6:	77fb      	strb	r3, [r7, #31]
 80075c8:	e00a      	b.n	80075e0 <UART_SetConfig+0x348>
 80075ca:	2304      	movs	r3, #4
 80075cc:	77fb      	strb	r3, [r7, #31]
 80075ce:	e007      	b.n	80075e0 <UART_SetConfig+0x348>
 80075d0:	2308      	movs	r3, #8
 80075d2:	77fb      	strb	r3, [r7, #31]
 80075d4:	e004      	b.n	80075e0 <UART_SetConfig+0x348>
 80075d6:	2310      	movs	r3, #16
 80075d8:	77fb      	strb	r3, [r7, #31]
 80075da:	e001      	b.n	80075e0 <UART_SetConfig+0x348>
 80075dc:	2310      	movs	r3, #16
 80075de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075e8:	d15b      	bne.n	80076a2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80075ea:	7ffb      	ldrb	r3, [r7, #31]
 80075ec:	2b08      	cmp	r3, #8
 80075ee:	d828      	bhi.n	8007642 <UART_SetConfig+0x3aa>
 80075f0:	a201      	add	r2, pc, #4	; (adr r2, 80075f8 <UART_SetConfig+0x360>)
 80075f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f6:	bf00      	nop
 80075f8:	0800761d 	.word	0x0800761d
 80075fc:	08007625 	.word	0x08007625
 8007600:	0800762d 	.word	0x0800762d
 8007604:	08007643 	.word	0x08007643
 8007608:	08007633 	.word	0x08007633
 800760c:	08007643 	.word	0x08007643
 8007610:	08007643 	.word	0x08007643
 8007614:	08007643 	.word	0x08007643
 8007618:	0800763b 	.word	0x0800763b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800761c:	f7fe fa60 	bl	8005ae0 <HAL_RCC_GetPCLK1Freq>
 8007620:	61b8      	str	r0, [r7, #24]
        break;
 8007622:	e013      	b.n	800764c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007624:	f7fe fa70 	bl	8005b08 <HAL_RCC_GetPCLK2Freq>
 8007628:	61b8      	str	r0, [r7, #24]
        break;
 800762a:	e00f      	b.n	800764c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800762c:	4b4b      	ldr	r3, [pc, #300]	; (800775c <UART_SetConfig+0x4c4>)
 800762e:	61bb      	str	r3, [r7, #24]
        break;
 8007630:	e00c      	b.n	800764c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007632:	f7fe f983 	bl	800593c <HAL_RCC_GetSysClockFreq>
 8007636:	61b8      	str	r0, [r7, #24]
        break;
 8007638:	e008      	b.n	800764c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800763a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800763e:	61bb      	str	r3, [r7, #24]
        break;
 8007640:	e004      	b.n	800764c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007642:	2300      	movs	r3, #0
 8007644:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	77bb      	strb	r3, [r7, #30]
        break;
 800764a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d074      	beq.n	800773c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	005a      	lsls	r2, r3, #1
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	085b      	lsrs	r3, r3, #1
 800765c:	441a      	add	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	fbb2 f3f3 	udiv	r3, r2, r3
 8007666:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	2b0f      	cmp	r3, #15
 800766c:	d916      	bls.n	800769c <UART_SetConfig+0x404>
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007674:	d212      	bcs.n	800769c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	b29b      	uxth	r3, r3
 800767a:	f023 030f 	bic.w	r3, r3, #15
 800767e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	085b      	lsrs	r3, r3, #1
 8007684:	b29b      	uxth	r3, r3
 8007686:	f003 0307 	and.w	r3, r3, #7
 800768a:	b29a      	uxth	r2, r3
 800768c:	89fb      	ldrh	r3, [r7, #14]
 800768e:	4313      	orrs	r3, r2
 8007690:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	89fa      	ldrh	r2, [r7, #14]
 8007698:	60da      	str	r2, [r3, #12]
 800769a:	e04f      	b.n	800773c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	77bb      	strb	r3, [r7, #30]
 80076a0:	e04c      	b.n	800773c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076a2:	7ffb      	ldrb	r3, [r7, #31]
 80076a4:	2b08      	cmp	r3, #8
 80076a6:	d828      	bhi.n	80076fa <UART_SetConfig+0x462>
 80076a8:	a201      	add	r2, pc, #4	; (adr r2, 80076b0 <UART_SetConfig+0x418>)
 80076aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ae:	bf00      	nop
 80076b0:	080076d5 	.word	0x080076d5
 80076b4:	080076dd 	.word	0x080076dd
 80076b8:	080076e5 	.word	0x080076e5
 80076bc:	080076fb 	.word	0x080076fb
 80076c0:	080076eb 	.word	0x080076eb
 80076c4:	080076fb 	.word	0x080076fb
 80076c8:	080076fb 	.word	0x080076fb
 80076cc:	080076fb 	.word	0x080076fb
 80076d0:	080076f3 	.word	0x080076f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076d4:	f7fe fa04 	bl	8005ae0 <HAL_RCC_GetPCLK1Freq>
 80076d8:	61b8      	str	r0, [r7, #24]
        break;
 80076da:	e013      	b.n	8007704 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076dc:	f7fe fa14 	bl	8005b08 <HAL_RCC_GetPCLK2Freq>
 80076e0:	61b8      	str	r0, [r7, #24]
        break;
 80076e2:	e00f      	b.n	8007704 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076e4:	4b1d      	ldr	r3, [pc, #116]	; (800775c <UART_SetConfig+0x4c4>)
 80076e6:	61bb      	str	r3, [r7, #24]
        break;
 80076e8:	e00c      	b.n	8007704 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076ea:	f7fe f927 	bl	800593c <HAL_RCC_GetSysClockFreq>
 80076ee:	61b8      	str	r0, [r7, #24]
        break;
 80076f0:	e008      	b.n	8007704 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076f6:	61bb      	str	r3, [r7, #24]
        break;
 80076f8:	e004      	b.n	8007704 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	77bb      	strb	r3, [r7, #30]
        break;
 8007702:	bf00      	nop
    }

    if (pclk != 0U)
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d018      	beq.n	800773c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	085a      	lsrs	r2, r3, #1
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	441a      	add	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	fbb2 f3f3 	udiv	r3, r2, r3
 800771c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	2b0f      	cmp	r3, #15
 8007722:	d909      	bls.n	8007738 <UART_SetConfig+0x4a0>
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800772a:	d205      	bcs.n	8007738 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	b29a      	uxth	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	60da      	str	r2, [r3, #12]
 8007736:	e001      	b.n	800773c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007748:	7fbb      	ldrb	r3, [r7, #30]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3720      	adds	r7, #32
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	40007c00 	.word	0x40007c00
 8007758:	40023800 	.word	0x40023800
 800775c:	00f42400 	.word	0x00f42400

08007760 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00a      	beq.n	800778a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	430a      	orrs	r2, r1
 8007788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778e:	f003 0302 	and.w	r3, r3, #2
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00a      	beq.n	80077ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	430a      	orrs	r2, r1
 80077aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b0:	f003 0304 	and.w	r3, r3, #4
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00a      	beq.n	80077ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	430a      	orrs	r2, r1
 80077cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d2:	f003 0308 	and.w	r3, r3, #8
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00a      	beq.n	80077f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	430a      	orrs	r2, r1
 80077ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f4:	f003 0310 	and.w	r3, r3, #16
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00a      	beq.n	8007812 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007816:	f003 0320 	and.w	r3, r3, #32
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00a      	beq.n	8007834 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800783c:	2b00      	cmp	r3, #0
 800783e:	d01a      	beq.n	8007876 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	430a      	orrs	r2, r1
 8007854:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800785e:	d10a      	bne.n	8007876 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00a      	beq.n	8007898 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	430a      	orrs	r2, r1
 8007896:	605a      	str	r2, [r3, #4]
  }
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af02      	add	r7, sp, #8
 80078aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078b4:	f7fb fd98 	bl	80033e8 <HAL_GetTick>
 80078b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0308 	and.w	r3, r3, #8
 80078c4:	2b08      	cmp	r3, #8
 80078c6:	d10e      	bne.n	80078e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 f831 	bl	800793e <UART_WaitOnFlagUntilTimeout>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d001      	beq.n	80078e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e027      	b.n	8007936 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 0304 	and.w	r3, r3, #4
 80078f0:	2b04      	cmp	r3, #4
 80078f2:	d10e      	bne.n	8007912 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f81b 	bl	800793e <UART_WaitOnFlagUntilTimeout>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d001      	beq.n	8007912 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e011      	b.n	8007936 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2220      	movs	r2, #32
 8007916:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2220      	movs	r2, #32
 800791c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b09c      	sub	sp, #112	; 0x70
 8007942:	af00      	add	r7, sp, #0
 8007944:	60f8      	str	r0, [r7, #12]
 8007946:	60b9      	str	r1, [r7, #8]
 8007948:	603b      	str	r3, [r7, #0]
 800794a:	4613      	mov	r3, r2
 800794c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800794e:	e0a7      	b.n	8007aa0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007956:	f000 80a3 	beq.w	8007aa0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800795a:	f7fb fd45 	bl	80033e8 <HAL_GetTick>
 800795e:	4602      	mov	r2, r0
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007966:	429a      	cmp	r2, r3
 8007968:	d302      	bcc.n	8007970 <UART_WaitOnFlagUntilTimeout+0x32>
 800796a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800796c:	2b00      	cmp	r3, #0
 800796e:	d13f      	bne.n	80079f0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007978:	e853 3f00 	ldrex	r3, [r3]
 800797c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800797e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007980:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007984:	667b      	str	r3, [r7, #100]	; 0x64
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	461a      	mov	r2, r3
 800798c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800798e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007990:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007992:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007994:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007996:	e841 2300 	strex	r3, r2, [r1]
 800799a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800799c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1e6      	bne.n	8007970 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3308      	adds	r3, #8
 80079a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ac:	e853 3f00 	ldrex	r3, [r3]
 80079b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b4:	f023 0301 	bic.w	r3, r3, #1
 80079b8:	663b      	str	r3, [r7, #96]	; 0x60
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	3308      	adds	r3, #8
 80079c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80079c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079ca:	e841 2300 	strex	r3, r2, [r1]
 80079ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1e5      	bne.n	80079a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2220      	movs	r2, #32
 80079da:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2220      	movs	r2, #32
 80079e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e068      	b.n	8007ac2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0304 	and.w	r3, r3, #4
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d050      	beq.n	8007aa0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	69db      	ldr	r3, [r3, #28]
 8007a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a0c:	d148      	bne.n	8007aa0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a16:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	461a      	mov	r2, r3
 8007a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a36:	637b      	str	r3, [r7, #52]	; 0x34
 8007a38:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a3e:	e841 2300 	strex	r3, r2, [r1]
 8007a42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1e6      	bne.n	8007a18 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	3308      	adds	r3, #8
 8007a50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	e853 3f00 	ldrex	r3, [r3]
 8007a58:	613b      	str	r3, [r7, #16]
   return(result);
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	f023 0301 	bic.w	r3, r3, #1
 8007a60:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	3308      	adds	r3, #8
 8007a68:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a6a:	623a      	str	r2, [r7, #32]
 8007a6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6e:	69f9      	ldr	r1, [r7, #28]
 8007a70:	6a3a      	ldr	r2, [r7, #32]
 8007a72:	e841 2300 	strex	r3, r2, [r1]
 8007a76:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1e5      	bne.n	8007a4a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2220      	movs	r2, #32
 8007a82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2220      	movs	r2, #32
 8007a88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2220      	movs	r2, #32
 8007a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e010      	b.n	8007ac2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	69da      	ldr	r2, [r3, #28]
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	bf0c      	ite	eq
 8007ab0:	2301      	moveq	r3, #1
 8007ab2:	2300      	movne	r3, #0
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	79fb      	ldrb	r3, [r7, #7]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	f43f af48 	beq.w	8007950 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3770      	adds	r7, #112	; 0x70
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
	...

08007acc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b097      	sub	sp, #92	; 0x5c
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	88fa      	ldrh	r2, [r7, #6]
 8007ae4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	88fa      	ldrh	r2, [r7, #6]
 8007aec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007afe:	d10e      	bne.n	8007b1e <UART_Start_Receive_IT+0x52>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d105      	bne.n	8007b14 <UART_Start_Receive_IT+0x48>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007b0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b12:	e02d      	b.n	8007b70 <UART_Start_Receive_IT+0xa4>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	22ff      	movs	r2, #255	; 0xff
 8007b18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b1c:	e028      	b.n	8007b70 <UART_Start_Receive_IT+0xa4>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10d      	bne.n	8007b42 <UART_Start_Receive_IT+0x76>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d104      	bne.n	8007b38 <UART_Start_Receive_IT+0x6c>
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	22ff      	movs	r2, #255	; 0xff
 8007b32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b36:	e01b      	b.n	8007b70 <UART_Start_Receive_IT+0xa4>
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	227f      	movs	r2, #127	; 0x7f
 8007b3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b40:	e016      	b.n	8007b70 <UART_Start_Receive_IT+0xa4>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b4a:	d10d      	bne.n	8007b68 <UART_Start_Receive_IT+0x9c>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d104      	bne.n	8007b5e <UART_Start_Receive_IT+0x92>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	227f      	movs	r2, #127	; 0x7f
 8007b58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b5c:	e008      	b.n	8007b70 <UART_Start_Receive_IT+0xa4>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	223f      	movs	r2, #63	; 0x3f
 8007b62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b66:	e003      	b.n	8007b70 <UART_Start_Receive_IT+0xa4>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2222      	movs	r2, #34	; 0x22
 8007b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3308      	adds	r3, #8
 8007b86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b8a:	e853 3f00 	ldrex	r3, [r3]
 8007b8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b92:	f043 0301 	orr.w	r3, r3, #1
 8007b96:	657b      	str	r3, [r7, #84]	; 0x54
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3308      	adds	r3, #8
 8007b9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ba0:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ba2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ba6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ba8:	e841 2300 	strex	r3, r2, [r1]
 8007bac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1e5      	bne.n	8007b80 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bbc:	d107      	bne.n	8007bce <UART_Start_Receive_IT+0x102>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d103      	bne.n	8007bce <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	4a21      	ldr	r2, [pc, #132]	; (8007c50 <UART_Start_Receive_IT+0x184>)
 8007bca:	669a      	str	r2, [r3, #104]	; 0x68
 8007bcc:	e002      	b.n	8007bd4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	4a20      	ldr	r2, [pc, #128]	; (8007c54 <UART_Start_Receive_IT+0x188>)
 8007bd2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d019      	beq.n	8007c10 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be4:	e853 3f00 	ldrex	r3, [r3]
 8007be8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8007bfc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c02:	e841 2300 	strex	r3, r2, [r1]
 8007c06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1e6      	bne.n	8007bdc <UART_Start_Receive_IT+0x110>
 8007c0e:	e018      	b.n	8007c42 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	e853 3f00 	ldrex	r3, [r3]
 8007c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	f043 0320 	orr.w	r3, r3, #32
 8007c24:	653b      	str	r3, [r7, #80]	; 0x50
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c2e:	623b      	str	r3, [r7, #32]
 8007c30:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c32:	69f9      	ldr	r1, [r7, #28]
 8007c34:	6a3a      	ldr	r2, [r7, #32]
 8007c36:	e841 2300 	strex	r3, r2, [r1]
 8007c3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1e6      	bne.n	8007c10 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	375c      	adds	r7, #92	; 0x5c
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	08007f07 	.word	0x08007f07
 8007c54:	08007da1 	.word	0x08007da1

08007c58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b095      	sub	sp, #84	; 0x54
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c68:	e853 3f00 	ldrex	r3, [r3]
 8007c6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c7e:	643b      	str	r3, [r7, #64]	; 0x40
 8007c80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c86:	e841 2300 	strex	r3, r2, [r1]
 8007c8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1e6      	bne.n	8007c60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	3308      	adds	r3, #8
 8007c98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	e853 3f00 	ldrex	r3, [r3]
 8007ca0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	f023 0301 	bic.w	r3, r3, #1
 8007ca8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	3308      	adds	r3, #8
 8007cb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cba:	e841 2300 	strex	r3, r2, [r1]
 8007cbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1e5      	bne.n	8007c92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d118      	bne.n	8007d00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	e853 3f00 	ldrex	r3, [r3]
 8007cda:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	f023 0310 	bic.w	r3, r3, #16
 8007ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cec:	61bb      	str	r3, [r7, #24]
 8007cee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf0:	6979      	ldr	r1, [r7, #20]
 8007cf2:	69ba      	ldr	r2, [r7, #24]
 8007cf4:	e841 2300 	strex	r3, r2, [r1]
 8007cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1e6      	bne.n	8007cce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2220      	movs	r2, #32
 8007d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007d14:	bf00      	nop
 8007d16:	3754      	adds	r7, #84	; 0x54
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f7ff fa8a 	bl	8007258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d44:	bf00      	nop
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b088      	sub	sp, #32
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	e853 3f00 	ldrex	r3, [r3]
 8007d60:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d68:	61fb      	str	r3, [r7, #28]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	61bb      	str	r3, [r7, #24]
 8007d74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d76:	6979      	ldr	r1, [r7, #20]
 8007d78:	69ba      	ldr	r2, [r7, #24]
 8007d7a:	e841 2300 	strex	r3, r2, [r1]
 8007d7e:	613b      	str	r3, [r7, #16]
   return(result);
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1e6      	bne.n	8007d54 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2220      	movs	r2, #32
 8007d8a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7ff fa56 	bl	8007244 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d98:	bf00      	nop
 8007d9a:	3720      	adds	r7, #32
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b096      	sub	sp, #88	; 0x58
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007dae:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007db8:	2b22      	cmp	r3, #34	; 0x22
 8007dba:	f040 8098 	bne.w	8007eee <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007dc8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007dcc:	b2d9      	uxtb	r1, r3
 8007dce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007dd2:	b2da      	uxtb	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd8:	400a      	ands	r2, r1
 8007dda:	b2d2      	uxtb	r2, r2
 8007ddc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de2:	1c5a      	adds	r2, r3, #1
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	3b01      	subs	r3, #1
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d17b      	bne.n	8007efe <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0e:	e853 3f00 	ldrex	r3, [r3]
 8007e12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e1a:	653b      	str	r3, [r7, #80]	; 0x50
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	461a      	mov	r2, r3
 8007e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e24:	647b      	str	r3, [r7, #68]	; 0x44
 8007e26:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e2c:	e841 2300 	strex	r3, r2, [r1]
 8007e30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1e6      	bne.n	8007e06 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3308      	adds	r3, #8
 8007e3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	e853 3f00 	ldrex	r3, [r3]
 8007e46:	623b      	str	r3, [r7, #32]
   return(result);
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	f023 0301 	bic.w	r3, r3, #1
 8007e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3308      	adds	r3, #8
 8007e56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e58:	633a      	str	r2, [r7, #48]	; 0x30
 8007e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e60:	e841 2300 	strex	r3, r2, [r1]
 8007e64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e5      	bne.n	8007e38 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2220      	movs	r2, #32
 8007e70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d12e      	bne.n	8007ee6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	e853 3f00 	ldrex	r3, [r3]
 8007e9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f023 0310 	bic.w	r3, r3, #16
 8007ea2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eac:	61fb      	str	r3, [r7, #28]
 8007eae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb0:	69b9      	ldr	r1, [r7, #24]
 8007eb2:	69fa      	ldr	r2, [r7, #28]
 8007eb4:	e841 2300 	strex	r3, r2, [r1]
 8007eb8:	617b      	str	r3, [r7, #20]
   return(result);
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d1e6      	bne.n	8007e8e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	f003 0310 	and.w	r3, r3, #16
 8007eca:	2b10      	cmp	r3, #16
 8007ecc:	d103      	bne.n	8007ed6 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2210      	movs	r2, #16
 8007ed4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007edc:	4619      	mov	r1, r3
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f7ff f9c4 	bl	800726c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ee4:	e00b      	b.n	8007efe <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f7fa fef2 	bl	8002cd0 <HAL_UART_RxCpltCallback>
}
 8007eec:	e007      	b.n	8007efe <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	699a      	ldr	r2, [r3, #24]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f042 0208 	orr.w	r2, r2, #8
 8007efc:	619a      	str	r2, [r3, #24]
}
 8007efe:	bf00      	nop
 8007f00:	3758      	adds	r7, #88	; 0x58
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b096      	sub	sp, #88	; 0x58
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f14:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f1e:	2b22      	cmp	r3, #34	; 0x22
 8007f20:	f040 8098 	bne.w	8008054 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f32:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007f34:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007f38:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f42:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f48:	1c9a      	adds	r2, r3, #2
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	3b01      	subs	r3, #1
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d17b      	bne.n	8008064 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f74:	e853 3f00 	ldrex	r3, [r3]
 8007f78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	461a      	mov	r2, r3
 8007f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f8a:	643b      	str	r3, [r7, #64]	; 0x40
 8007f8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f92:	e841 2300 	strex	r3, r2, [r1]
 8007f96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1e6      	bne.n	8007f6c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa6:	6a3b      	ldr	r3, [r7, #32]
 8007fa8:	e853 3f00 	ldrex	r3, [r3]
 8007fac:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	f023 0301 	bic.w	r3, r3, #1
 8007fb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3308      	adds	r3, #8
 8007fbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fc6:	e841 2300 	strex	r3, r2, [r1]
 8007fca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1e5      	bne.n	8007f9e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d12e      	bne.n	800804c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	e853 3f00 	ldrex	r3, [r3]
 8008000:	60bb      	str	r3, [r7, #8]
   return(result);
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	f023 0310 	bic.w	r3, r3, #16
 8008008:	647b      	str	r3, [r7, #68]	; 0x44
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	461a      	mov	r2, r3
 8008010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008012:	61bb      	str	r3, [r7, #24]
 8008014:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008016:	6979      	ldr	r1, [r7, #20]
 8008018:	69ba      	ldr	r2, [r7, #24]
 800801a:	e841 2300 	strex	r3, r2, [r1]
 800801e:	613b      	str	r3, [r7, #16]
   return(result);
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1e6      	bne.n	8007ff4 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	69db      	ldr	r3, [r3, #28]
 800802c:	f003 0310 	and.w	r3, r3, #16
 8008030:	2b10      	cmp	r3, #16
 8008032:	d103      	bne.n	800803c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2210      	movs	r2, #16
 800803a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f7ff f911 	bl	800726c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800804a:	e00b      	b.n	8008064 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7fa fe3f 	bl	8002cd0 <HAL_UART_RxCpltCallback>
}
 8008052:	e007      	b.n	8008064 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	699a      	ldr	r2, [r3, #24]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f042 0208 	orr.w	r2, r2, #8
 8008062:	619a      	str	r2, [r3, #24]
}
 8008064:	bf00      	nop
 8008066:	3758      	adds	r7, #88	; 0x58
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <__libc_init_array>:
 800806c:	b570      	push	{r4, r5, r6, lr}
 800806e:	4d0d      	ldr	r5, [pc, #52]	; (80080a4 <__libc_init_array+0x38>)
 8008070:	4c0d      	ldr	r4, [pc, #52]	; (80080a8 <__libc_init_array+0x3c>)
 8008072:	1b64      	subs	r4, r4, r5
 8008074:	10a4      	asrs	r4, r4, #2
 8008076:	2600      	movs	r6, #0
 8008078:	42a6      	cmp	r6, r4
 800807a:	d109      	bne.n	8008090 <__libc_init_array+0x24>
 800807c:	4d0b      	ldr	r5, [pc, #44]	; (80080ac <__libc_init_array+0x40>)
 800807e:	4c0c      	ldr	r4, [pc, #48]	; (80080b0 <__libc_init_array+0x44>)
 8008080:	f000 f864 	bl	800814c <_init>
 8008084:	1b64      	subs	r4, r4, r5
 8008086:	10a4      	asrs	r4, r4, #2
 8008088:	2600      	movs	r6, #0
 800808a:	42a6      	cmp	r6, r4
 800808c:	d105      	bne.n	800809a <__libc_init_array+0x2e>
 800808e:	bd70      	pop	{r4, r5, r6, pc}
 8008090:	f855 3b04 	ldr.w	r3, [r5], #4
 8008094:	4798      	blx	r3
 8008096:	3601      	adds	r6, #1
 8008098:	e7ee      	b.n	8008078 <__libc_init_array+0xc>
 800809a:	f855 3b04 	ldr.w	r3, [r5], #4
 800809e:	4798      	blx	r3
 80080a0:	3601      	adds	r6, #1
 80080a2:	e7f2      	b.n	800808a <__libc_init_array+0x1e>
 80080a4:	08008924 	.word	0x08008924
 80080a8:	08008924 	.word	0x08008924
 80080ac:	08008924 	.word	0x08008924
 80080b0:	08008928 	.word	0x08008928

080080b4 <memset>:
 80080b4:	4402      	add	r2, r0
 80080b6:	4603      	mov	r3, r0
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d100      	bne.n	80080be <memset+0xa>
 80080bc:	4770      	bx	lr
 80080be:	f803 1b01 	strb.w	r1, [r3], #1
 80080c2:	e7f9      	b.n	80080b8 <memset+0x4>

080080c4 <__utoa>:
 80080c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080c6:	4c1f      	ldr	r4, [pc, #124]	; (8008144 <__utoa+0x80>)
 80080c8:	b08b      	sub	sp, #44	; 0x2c
 80080ca:	4605      	mov	r5, r0
 80080cc:	460b      	mov	r3, r1
 80080ce:	466e      	mov	r6, sp
 80080d0:	f104 0c20 	add.w	ip, r4, #32
 80080d4:	6820      	ldr	r0, [r4, #0]
 80080d6:	6861      	ldr	r1, [r4, #4]
 80080d8:	4637      	mov	r7, r6
 80080da:	c703      	stmia	r7!, {r0, r1}
 80080dc:	3408      	adds	r4, #8
 80080de:	4564      	cmp	r4, ip
 80080e0:	463e      	mov	r6, r7
 80080e2:	d1f7      	bne.n	80080d4 <__utoa+0x10>
 80080e4:	7921      	ldrb	r1, [r4, #4]
 80080e6:	7139      	strb	r1, [r7, #4]
 80080e8:	1e91      	subs	r1, r2, #2
 80080ea:	6820      	ldr	r0, [r4, #0]
 80080ec:	6038      	str	r0, [r7, #0]
 80080ee:	2922      	cmp	r1, #34	; 0x22
 80080f0:	f04f 0100 	mov.w	r1, #0
 80080f4:	d904      	bls.n	8008100 <__utoa+0x3c>
 80080f6:	7019      	strb	r1, [r3, #0]
 80080f8:	460b      	mov	r3, r1
 80080fa:	4618      	mov	r0, r3
 80080fc:	b00b      	add	sp, #44	; 0x2c
 80080fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008100:	1e58      	subs	r0, r3, #1
 8008102:	4684      	mov	ip, r0
 8008104:	fbb5 f7f2 	udiv	r7, r5, r2
 8008108:	fb02 5617 	mls	r6, r2, r7, r5
 800810c:	3628      	adds	r6, #40	; 0x28
 800810e:	446e      	add	r6, sp
 8008110:	460c      	mov	r4, r1
 8008112:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008116:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800811a:	462e      	mov	r6, r5
 800811c:	42b2      	cmp	r2, r6
 800811e:	f101 0101 	add.w	r1, r1, #1
 8008122:	463d      	mov	r5, r7
 8008124:	d9ee      	bls.n	8008104 <__utoa+0x40>
 8008126:	2200      	movs	r2, #0
 8008128:	545a      	strb	r2, [r3, r1]
 800812a:	1919      	adds	r1, r3, r4
 800812c:	1aa5      	subs	r5, r4, r2
 800812e:	42aa      	cmp	r2, r5
 8008130:	dae3      	bge.n	80080fa <__utoa+0x36>
 8008132:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008136:	780e      	ldrb	r6, [r1, #0]
 8008138:	7006      	strb	r6, [r0, #0]
 800813a:	3201      	adds	r2, #1
 800813c:	f801 5901 	strb.w	r5, [r1], #-1
 8008140:	e7f4      	b.n	800812c <__utoa+0x68>
 8008142:	bf00      	nop
 8008144:	080088f4 	.word	0x080088f4

08008148 <utoa>:
 8008148:	f7ff bfbc 	b.w	80080c4 <__utoa>

0800814c <_init>:
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814e:	bf00      	nop
 8008150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008152:	bc08      	pop	{r3}
 8008154:	469e      	mov	lr, r3
 8008156:	4770      	bx	lr

08008158 <_fini>:
 8008158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815a:	bf00      	nop
 800815c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800815e:	bc08      	pop	{r3}
 8008160:	469e      	mov	lr, r3
 8008162:	4770      	bx	lr
