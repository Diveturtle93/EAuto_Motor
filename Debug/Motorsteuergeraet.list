
Motorsteuergeraet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089f0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b2c  08008be8  08008be8  00018be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009714  08009714  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009714  08009714  00019714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800971c  0800971c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800971c  0800971c  0001971c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009720  08009720  00019720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  2000000c  08009730  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08009730  00020244  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a63f  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d44  00000000  00000000  0003a679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  0003e3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  0003f650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c9d3  00000000  00000000  00040728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b156  00000000  00000000  0006d0fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108d95  00000000  00000000  00088251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00190fe6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a84  00000000  00000000  00191038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08008bd0 	.word	0x08008bd0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08008bd0 	.word	0x08008bd0

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <BAMOCAN_ID>:
//----------------------------------------------------------------------

// Ermittle Register nach Empfang Bamocar CAN-ID
//----------------------------------------------------------------------
void BAMOCAN_ID(uint8_t* data, uint8_t dlc)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	460b      	mov	r3, r1
 8000556:	70fb      	strb	r3, [r7, #3]
	uint8_t Reg = data[0];
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	733b      	strb	r3, [r7, #12]
	uint16_t speed = 0, strom;
 800055e:	2300      	movs	r3, #0
 8000560:	817b      	strh	r3, [r7, #10]

	// Waehlen welches Register gesendet wurde
	switch (Reg)
 8000562:	7b3b      	ldrb	r3, [r7, #12]
 8000564:	2bd8      	cmp	r3, #216	; 0xd8
 8000566:	f000 80be 	beq.w	80006e6 <BAMOCAN_ID+0x19a>
 800056a:	2bd8      	cmp	r3, #216	; 0xd8
 800056c:	f300 8100 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 8000570:	2ba8      	cmp	r3, #168	; 0xa8
 8000572:	d012      	beq.n	800059a <BAMOCAN_ID+0x4e>
 8000574:	2ba8      	cmp	r3, #168	; 0xa8
 8000576:	f300 80fb 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 800057a:	2b8f      	cmp	r3, #143	; 0x8f
 800057c:	d077      	beq.n	800066e <BAMOCAN_ID+0x122>
 800057e:	2b8f      	cmp	r3, #143	; 0x8f
 8000580:	f300 80f6 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 8000584:	2b5f      	cmp	r3, #95	; 0x5f
 8000586:	d025      	beq.n	80005d4 <BAMOCAN_ID+0x88>
 8000588:	2b5f      	cmp	r3, #95	; 0x5f
 800058a:	f300 80f1 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 800058e:	2b1b      	cmp	r3, #27
 8000590:	f000 80d4 	beq.w	800073c <BAMOCAN_ID+0x1f0>
 8000594:	2b40      	cmp	r3, #64	; 0x40
 8000596:	d037      	beq.n	8000608 <BAMOCAN_ID+0xbc>
 8000598:	e0ea      	b.n	8000770 <BAMOCAN_ID+0x224>
	{
		// Drehzahl vom Bamocar bekommen
		case BAMOCAR_REG_N_ACT_FILTER:
			speed = ((data[2]<<8) + data[1]);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3302      	adds	r3, #2
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	021b      	lsls	r3, r3, #8
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	3301      	adds	r3, #1
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	4413      	add	r3, r2
 80005b0:	817b      	strh	r3, [r7, #10]
			motor1.Drehzahl = speed;
 80005b2:	4a74      	ldr	r2, [pc, #464]	; (8000784 <BAMOCAN_ID+0x238>)
 80005b4:	897b      	ldrh	r3, [r7, #10]
 80005b6:	8053      	strh	r3, [r2, #2]
// Uart Ausgabe
#ifdef DEBUG_BAMOCAR
			uartTransmit("Motordrehzahl\n", 14);
 80005b8:	210e      	movs	r1, #14
 80005ba:	4873      	ldr	r0, [pc, #460]	; (8000788 <BAMOCAN_ID+0x23c>)
 80005bc:	f000 f900 	bl	80007c0 <uartTransmit>
			uartTransmitNumber(speed, 10);
 80005c0:	897b      	ldrh	r3, [r7, #10]
 80005c2:	210a      	movs	r1, #10
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f90f 	bl	80007e8 <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005ca:	2101      	movs	r1, #1
 80005cc:	486f      	ldr	r0, [pc, #444]	; (800078c <BAMOCAN_ID+0x240>)
 80005ce:	f000 f8f7 	bl	80007c0 <uartTransmit>
#endif
			break;
 80005d2:	e0d2      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Stromwert von Bamocar bekommen
		case BAMOCAR_REG_I_ACT_FILTER:
			strom = ((data[2]<<8) + data[1]);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3302      	adds	r3, #2
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	021b      	lsls	r3, r3, #8
 80005de:	b29a      	uxth	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3301      	adds	r3, #1
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	4413      	add	r3, r2
 80005ea:	813b      	strh	r3, [r7, #8]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Motorstrom\n", 11);
 80005ec:	210b      	movs	r1, #11
 80005ee:	4868      	ldr	r0, [pc, #416]	; (8000790 <BAMOCAN_ID+0x244>)
 80005f0:	f000 f8e6 	bl	80007c0 <uartTransmit>
			uartTransmitNumber(strom, 10);
 80005f4:	893b      	ldrh	r3, [r7, #8]
 80005f6:	210a      	movs	r1, #10
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 f8f5 	bl	80007e8 <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005fe:	2101      	movs	r1, #1
 8000600:	4862      	ldr	r0, [pc, #392]	; (800078c <BAMOCAN_ID+0x240>)
 8000602:	f000 f8dd 	bl	80007c0 <uartTransmit>
#endif

			break;
 8000606:	e0b8      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Statusregister von Bamocar bekommen
		case BAMOCAR_REG_STATUS:
			bamocar_stat.status1 = ((data[4] << 24) + (data[3] << 16) + (data[2] << 8) + data[1]);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3304      	adds	r3, #4
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	061a      	lsls	r2, r3, #24
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3303      	adds	r3, #3
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	041b      	lsls	r3, r3, #16
 8000618:	441a      	add	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	3302      	adds	r3, #2
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	4413      	add	r3, r2
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	3201      	adds	r2, #1
 8000628:	7812      	ldrb	r2, [r2, #0]
 800062a:	4413      	add	r3, r2
 800062c:	461a      	mov	r2, r3
 800062e:	4b59      	ldr	r3, [pc, #356]	; (8000794 <BAMOCAN_ID+0x248>)
 8000630:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Status\n", 15);
 8000632:	210f      	movs	r1, #15
 8000634:	4858      	ldr	r0, [pc, #352]	; (8000798 <BAMOCAN_ID+0x24c>)
 8000636:	f000 f8c3 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 4; i > 0; i--)
 800063a:	2304      	movs	r3, #4
 800063c:	73fb      	strb	r3, [r7, #15]
 800063e:	e00e      	b.n	800065e <BAMOCAN_ID+0x112>
			{
				uartTransmitNumber(bamocar_stat.status[i-1], 16);
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	3b01      	subs	r3, #1
 8000644:	4a53      	ldr	r2, [pc, #332]	; (8000794 <BAMOCAN_ID+0x248>)
 8000646:	5cd3      	ldrb	r3, [r2, r3]
 8000648:	2110      	movs	r1, #16
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f8cc 	bl	80007e8 <uartTransmitNumber>
				uartTransmit(" ", 1);
 8000650:	2101      	movs	r1, #1
 8000652:	4852      	ldr	r0, [pc, #328]	; (800079c <BAMOCAN_ID+0x250>)
 8000654:	f000 f8b4 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 4; i > 0; i--)
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	3b01      	subs	r3, #1
 800065c:	73fb      	strb	r3, [r7, #15]
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d1ed      	bne.n	8000640 <BAMOCAN_ID+0xf4>
			}
			uartTransmit("\n", 1);
 8000664:	2101      	movs	r1, #1
 8000666:	4849      	ldr	r0, [pc, #292]	; (800078c <BAMOCAN_ID+0x240>)
 8000668:	f000 f8aa 	bl	80007c0 <uartTransmit>
#endif

			break;
 800066c:	e085      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Errorregister von Bamocar bekommen
		case BAMOCAR_REG_ERROR:
			bamocar_error.error1 = ((data[2] << 8) + data[1]);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3302      	adds	r3, #2
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b29b      	uxth	r3, r3
 8000676:	021b      	lsls	r3, r3, #8
 8000678:	b29a      	uxth	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	3301      	adds	r3, #1
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b29b      	uxth	r3, r3
 8000682:	4413      	add	r3, r2
 8000684:	b29a      	uxth	r2, r3
 8000686:	4b46      	ldr	r3, [pc, #280]	; (80007a0 <BAMOCAN_ID+0x254>)
 8000688:	801a      	strh	r2, [r3, #0]
			bamocar_warnung.warnung1 = ((data[4] << 8) + data[3]);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3304      	adds	r3, #4
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	b29b      	uxth	r3, r3
 8000692:	021b      	lsls	r3, r3, #8
 8000694:	b29a      	uxth	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3303      	adds	r3, #3
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b29b      	uxth	r3, r3
 800069e:	4413      	add	r3, r2
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	4b40      	ldr	r3, [pc, #256]	; (80007a4 <BAMOCAN_ID+0x258>)
 80006a4:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Error\n", 14);
 80006a6:	210e      	movs	r1, #14
 80006a8:	483f      	ldr	r0, [pc, #252]	; (80007a8 <BAMOCAN_ID+0x25c>)
 80006aa:	f000 f889 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	73bb      	strb	r3, [r7, #14]
 80006b2:	e010      	b.n	80006d6 <BAMOCAN_ID+0x18a>
			{
				uartTransmitNumber(data[1+i], 16);
 80006b4:	7bbb      	ldrb	r3, [r7, #14]
 80006b6:	3301      	adds	r3, #1
 80006b8:	461a      	mov	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2110      	movs	r1, #16
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 f890 	bl	80007e8 <uartTransmitNumber>
				uartTransmit(" ", 1);
 80006c8:	2101      	movs	r1, #1
 80006ca:	4834      	ldr	r0, [pc, #208]	; (800079c <BAMOCAN_ID+0x250>)
 80006cc:	f000 f878 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006d0:	7bbb      	ldrb	r3, [r7, #14]
 80006d2:	3301      	adds	r3, #1
 80006d4:	73bb      	strb	r3, [r7, #14]
 80006d6:	7bbb      	ldrb	r3, [r7, #14]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	d9eb      	bls.n	80006b4 <BAMOCAN_ID+0x168>
			}
			uartTransmit("\n", 1);
 80006dc:	2101      	movs	r1, #1
 80006de:	482b      	ldr	r0, [pc, #172]	; (800078c <BAMOCAN_ID+0x240>)
 80006e0:	f000 f86e 	bl	80007c0 <uartTransmit>
#endif

			break;
 80006e4:	e049      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Status IO Register von Bamocar bekommen
		case BAMOCAR_REG_STATUS_IO:
			bamocar_IOstatus.status1 = ((data[2] << 8) + data[1]);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3302      	adds	r3, #2
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	021b      	lsls	r3, r3, #8
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3301      	adds	r3, #1
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	4413      	add	r3, r2
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <BAMOCAN_ID+0x260>)
 8000700:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar IO Status\n", 18);
 8000702:	2112      	movs	r1, #18
 8000704:	482a      	ldr	r0, [pc, #168]	; (80007b0 <BAMOCAN_ID+0x264>)
 8000706:	f000 f85b 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 2; i++)
 800070a:	2300      	movs	r3, #0
 800070c:	737b      	strb	r3, [r7, #13]
 800070e:	e00d      	b.n	800072c <BAMOCAN_ID+0x1e0>
			{
				uartTransmitNumber(bamocar_IOstatus.status[i], 16);
 8000710:	7b7b      	ldrb	r3, [r7, #13]
 8000712:	4a26      	ldr	r2, [pc, #152]	; (80007ac <BAMOCAN_ID+0x260>)
 8000714:	5cd3      	ldrb	r3, [r2, r3]
 8000716:	2110      	movs	r1, #16
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f865 	bl	80007e8 <uartTransmitNumber>
				uartTransmit(" ", 1);
 800071e:	2101      	movs	r1, #1
 8000720:	481e      	ldr	r0, [pc, #120]	; (800079c <BAMOCAN_ID+0x250>)
 8000722:	f000 f84d 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 2; i++)
 8000726:	7b7b      	ldrb	r3, [r7, #13]
 8000728:	3301      	adds	r3, #1
 800072a:	737b      	strb	r3, [r7, #13]
 800072c:	7b7b      	ldrb	r3, [r7, #13]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d9ee      	bls.n	8000710 <BAMOCAN_ID+0x1c4>
			}
			uartTransmit("\n", 1);
 8000732:	2101      	movs	r1, #1
 8000734:	4815      	ldr	r0, [pc, #84]	; (800078c <BAMOCAN_ID+0x240>)
 8000736:	f000 f843 	bl	80007c0 <uartTransmit>
#endif

			break;
 800073a:	e01e      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Firmware von Bamocar ausgelesen
		case BAMOCAR_REG_FIRMWARE:
			bamocar_data.data = ((data[2]<<8) + data[1]);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3302      	adds	r3, #2
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	021b      	lsls	r3, r3, #8
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	3201      	adds	r2, #1
 8000748:	7812      	ldrb	r2, [r2, #0]
 800074a:	4413      	add	r3, r2
 800074c:	461a      	mov	r2, r3
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <BAMOCAN_ID+0x268>)
 8000750:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Firmware\n", 9);
 8000752:	2109      	movs	r1, #9
 8000754:	4818      	ldr	r0, [pc, #96]	; (80007b8 <BAMOCAN_ID+0x26c>)
 8000756:	f000 f833 	bl	80007c0 <uartTransmit>
			uartTransmitNumber(bamocar_data.data, 16);
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <BAMOCAN_ID+0x268>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2110      	movs	r1, #16
 8000760:	4618      	mov	r0, r3
 8000762:	f000 f841 	bl	80007e8 <uartTransmitNumber>
			uartTransmit("\n", 1);
 8000766:	2101      	movs	r1, #1
 8000768:	4808      	ldr	r0, [pc, #32]	; (800078c <BAMOCAN_ID+0x240>)
 800076a:	f000 f829 	bl	80007c0 <uartTransmit>
#endif

			break;
 800076e:	e004      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Register fuer Bamocar nicht definiert, Fehler
		default:
			uartTransmit("Bamocar Register nicht definiert\n", 33);
 8000770:	2121      	movs	r1, #33	; 0x21
 8000772:	4812      	ldr	r0, [pc, #72]	; (80007bc <BAMOCAN_ID+0x270>)
 8000774:	f000 f824 	bl	80007c0 <uartTransmit>
			break;
 8000778:	bf00      	nop
	}
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000160 	.word	0x20000160
 8000788:	08008be8 	.word	0x08008be8
 800078c:	08008bf8 	.word	0x08008bf8
 8000790:	08008bfc 	.word	0x08008bfc
 8000794:	2000002c 	.word	0x2000002c
 8000798:	08008c08 	.word	0x08008c08
 800079c:	08008c18 	.word	0x08008c18
 80007a0:	20000030 	.word	0x20000030
 80007a4:	20000034 	.word	0x20000034
 80007a8:	08008c1c 	.word	0x08008c1c
 80007ac:	20000028 	.word	0x20000028
 80007b0:	08008c2c 	.word	0x08008c2c
 80007b4:	20000038 	.word	0x20000038
 80007b8:	08008c40 	.word	0x08008c40
 80007bc:	08008c4c 	.word	0x08008c4c

080007c0 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	4803      	ldr	r0, [pc, #12]	; (80007e4 <uartTransmit+0x24>)
 80007d6:	f006 fec7 	bl	8007568 <HAL_UART_Transmit>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200001b8 	.word	0x200001b8

080007e8 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4619      	mov	r1, r3
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f008 f9e6 	bl	8008bcc <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fd17 	bl	8000238 <strlen>
 800080a:	4603      	mov	r3, r0
 800080c:	b29a      	uxth	r2, r3
 800080e:	f107 010c 	add.w	r1, r7, #12
 8000812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000816:	4803      	ldr	r0, [pc, #12]	; (8000824 <uartTransmitNumber+0x3c>)
 8000818:	f006 fea6 	bl	8007568 <HAL_UART_Transmit>
}
 800081c:	bf00      	nop
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200001b8 	.word	0x200001b8

08000828 <uartTransmitString>:
//----------------------------------------------------------------------

// Uart2 Transmit String Funktion
//----------------------------------------------------------------------
void uartTransmitString(const char *str)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, sizeof(str), 1000);
 8000830:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000834:	2204      	movs	r2, #4
 8000836:	6879      	ldr	r1, [r7, #4]
 8000838:	4803      	ldr	r0, [pc, #12]	; (8000848 <uartTransmitString+0x20>)
 800083a:	f006 fe95 	bl	8007568 <HAL_UART_Transmit>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200001b8 	.word	0x200001b8

0800084c <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 8000852:	2114      	movs	r1, #20
 8000854:	483d      	ldr	r0, [pc, #244]	; (800094c <collectHardwareInfo+0x100>)
 8000856:	f7ff ffb3 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 800085a:	f003 fb67 	bl	8003f2c <HAL_GetDEVID>
 800085e:	4603      	mov	r3, r0
 8000860:	210a      	movs	r1, #10
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ffc0 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8000868:	2116      	movs	r1, #22
 800086a:	4839      	ldr	r0, [pc, #228]	; (8000950 <collectHardwareInfo+0x104>)
 800086c:	f7ff ffa8 	bl	80007c0 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 8000870:	f003 fb50 	bl	8003f14 <HAL_GetREVID>
 8000874:	4603      	mov	r3, r0
 8000876:	f242 0201 	movw	r2, #8193	; 0x2001
 800087a:	4293      	cmp	r3, r2
 800087c:	d016      	beq.n	80008ac <collectHardwareInfo+0x60>
 800087e:	f242 0201 	movw	r2, #8193	; 0x2001
 8000882:	4293      	cmp	r3, r2
 8000884:	d817      	bhi.n	80008b6 <collectHardwareInfo+0x6a>
 8000886:	f241 0201 	movw	r2, #4097	; 0x1001
 800088a:	4293      	cmp	r3, r2
 800088c:	d004      	beq.n	8000898 <collectHardwareInfo+0x4c>
 800088e:	f241 0203 	movw	r2, #4099	; 0x1003
 8000892:	4293      	cmp	r3, r2
 8000894:	d005      	beq.n	80008a2 <collectHardwareInfo+0x56>
 8000896:	e00e      	b.n	80008b6 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8000898:	2101      	movs	r1, #1
 800089a:	482e      	ldr	r0, [pc, #184]	; (8000954 <collectHardwareInfo+0x108>)
 800089c:	f7ff ff90 	bl	80007c0 <uartTransmit>
			break;
 80008a0:	e011      	b.n	80008c6 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 80008a2:	2101      	movs	r1, #1
 80008a4:	482c      	ldr	r0, [pc, #176]	; (8000958 <collectHardwareInfo+0x10c>)
 80008a6:	f7ff ff8b 	bl	80007c0 <uartTransmit>
			break;
 80008aa:	e00c      	b.n	80008c6 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 80008ac:	2101      	movs	r1, #1
 80008ae:	482b      	ldr	r0, [pc, #172]	; (800095c <collectHardwareInfo+0x110>)
 80008b0:	f7ff ff86 	bl	80007c0 <uartTransmit>
			break;
 80008b4:	e007      	b.n	80008c6 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 80008b6:	f003 fb2d 	bl	8003f14 <HAL_GetREVID>
 80008ba:	4603      	mov	r3, r0
 80008bc:	210a      	movs	r1, #10
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ff92 	bl	80007e8 <uartTransmitNumber>
			break;
 80008c4:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 80008c6:	2114      	movs	r1, #20
 80008c8:	4825      	ldr	r0, [pc, #148]	; (8000960 <collectHardwareInfo+0x114>)
 80008ca:	f7ff ff79 	bl	80007c0 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 80008ce:	f005 fd77 	bl	80063c0 <HAL_RCC_GetSysClockFreq>
 80008d2:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a23      	ldr	r2, [pc, #140]	; (8000964 <collectHardwareInfo+0x118>)
 80008d8:	fba2 2303 	umull	r2, r3, r2, r3
 80008dc:	0c9b      	lsrs	r3, r3, #18
 80008de:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 80008e0:	210a      	movs	r1, #10
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff ff80 	bl	80007e8 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80008e8:	2104      	movs	r1, #4
 80008ea:	481f      	ldr	r0, [pc, #124]	; (8000968 <collectHardwareInfo+0x11c>)
 80008ec:	f7ff ff68 	bl	80007c0 <uartTransmit>


	uartTransmit("\n", 1);
 80008f0:	2101      	movs	r1, #1
 80008f2:	481e      	ldr	r0, [pc, #120]	; (800096c <collectHardwareInfo+0x120>)
 80008f4:	f7ff ff64 	bl	80007c0 <uartTransmit>
	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80008f8:	2110      	movs	r1, #16
 80008fa:	481d      	ldr	r0, [pc, #116]	; (8000970 <collectHardwareInfo+0x124>)
 80008fc:	f7ff ff60 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 8000900:	f003 fb22 	bl	8003f48 <HAL_GetUIDw0>
 8000904:	4603      	mov	r3, r0
 8000906:	2110      	movs	r1, #16
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff6d 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(" ", 1);
 800090e:	2101      	movs	r1, #1
 8000910:	4818      	ldr	r0, [pc, #96]	; (8000974 <collectHardwareInfo+0x128>)
 8000912:	f7ff ff55 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 8000916:	f003 fb23 	bl	8003f60 <HAL_GetUIDw1>
 800091a:	4603      	mov	r3, r0
 800091c:	2110      	movs	r1, #16
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ff62 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000924:	2101      	movs	r1, #1
 8000926:	4813      	ldr	r0, [pc, #76]	; (8000974 <collectHardwareInfo+0x128>)
 8000928:	f7ff ff4a 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 800092c:	f003 fb24 	bl	8003f78 <HAL_GetUIDw2>
 8000930:	4603      	mov	r3, r0
 8000932:	2110      	movs	r1, #16
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff57 	bl	80007e8 <uartTransmitNumber>

	uartTransmit("\n", 1);
 800093a:	2101      	movs	r1, #1
 800093c:	480b      	ldr	r0, [pc, #44]	; (800096c <collectHardwareInfo+0x120>)
 800093e:	f7ff ff3f 	bl	80007c0 <uartTransmit>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	08008cc8 	.word	0x08008cc8
 8000950:	08008cdc 	.word	0x08008cdc
 8000954:	08008cf4 	.word	0x08008cf4
 8000958:	08008cf8 	.word	0x08008cf8
 800095c:	08008cfc 	.word	0x08008cfc
 8000960:	08008d00 	.word	0x08008d00
 8000964:	431bde83 	.word	0x431bde83
 8000968:	08008d14 	.word	0x08008d14
 800096c:	08008d1c 	.word	0x08008d1c
 8000970:	08008d20 	.word	0x08008d20
 8000974:	08008d30 	.word	0x08008d30

08000978 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 800097c:	2110      	movs	r1, #16
 800097e:	4826      	ldr	r0, [pc, #152]	; (8000a18 <collectSoftwareInfo+0xa0>)
 8000980:	f7ff ff1e 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000984:	2108      	movs	r1, #8
 8000986:	4825      	ldr	r0, [pc, #148]	; (8000a1c <collectSoftwareInfo+0xa4>)
 8000988:	f7ff ff1a 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 800098c:	2110      	movs	r1, #16
 800098e:	4824      	ldr	r0, [pc, #144]	; (8000a20 <collectSoftwareInfo+0xa8>)
 8000990:	f7ff ff16 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000994:	2106      	movs	r1, #6
 8000996:	4823      	ldr	r0, [pc, #140]	; (8000a24 <collectSoftwareInfo+0xac>)
 8000998:	f7ff ff12 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 800099c:	210e      	movs	r1, #14
 800099e:	4822      	ldr	r0, [pc, #136]	; (8000a28 <collectSoftwareInfo+0xb0>)
 80009a0:	f7ff ff0e 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 80009a4:	2129      	movs	r1, #41	; 0x29
 80009a6:	4821      	ldr	r0, [pc, #132]	; (8000a2c <collectSoftwareInfo+0xb4>)
 80009a8:	f7ff ff0a 	bl	80007c0 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80009ac:	2101      	movs	r1, #1
 80009ae:	4820      	ldr	r0, [pc, #128]	; (8000a30 <collectSoftwareInfo+0xb8>)
 80009b0:	f7ff ff06 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 80009b4:	2115      	movs	r1, #21
 80009b6:	481f      	ldr	r0, [pc, #124]	; (8000a34 <collectSoftwareInfo+0xbc>)
 80009b8:	f7ff ff02 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 80009bc:	210e      	movs	r1, #14
 80009be:	481e      	ldr	r0, [pc, #120]	; (8000a38 <collectSoftwareInfo+0xc0>)
 80009c0:	f7ff fefe 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 80009c4:	2114      	movs	r1, #20
 80009c6:	481d      	ldr	r0, [pc, #116]	; (8000a3c <collectSoftwareInfo+0xc4>)
 80009c8:	f7ff fefa 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 80009cc:	2129      	movs	r1, #41	; 0x29
 80009ce:	481c      	ldr	r0, [pc, #112]	; (8000a40 <collectSoftwareInfo+0xc8>)
 80009d0:	f7ff fef6 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 80009d4:	2115      	movs	r1, #21
 80009d6:	481b      	ldr	r0, [pc, #108]	; (8000a44 <collectSoftwareInfo+0xcc>)
 80009d8:	f7ff fef2 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 80009dc:	2115      	movs	r1, #21
 80009de:	481a      	ldr	r0, [pc, #104]	; (8000a48 <collectSoftwareInfo+0xd0>)
 80009e0:	f7ff feee 	bl	80007c0 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80009e4:	2101      	movs	r1, #1
 80009e6:	4812      	ldr	r0, [pc, #72]	; (8000a30 <collectSoftwareInfo+0xb8>)
 80009e8:	f7ff feea 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80009ec:	2110      	movs	r1, #16
 80009ee:	4817      	ldr	r0, [pc, #92]	; (8000a4c <collectSoftwareInfo+0xd4>)
 80009f0:	f7ff fee6 	bl	80007c0 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 80009f4:	210b      	movs	r1, #11
 80009f6:	4816      	ldr	r0, [pc, #88]	; (8000a50 <collectSoftwareInfo+0xd8>)
 80009f8:	f7ff fee2 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80009fc:	2110      	movs	r1, #16
 80009fe:	4815      	ldr	r0, [pc, #84]	; (8000a54 <collectSoftwareInfo+0xdc>)
 8000a00:	f7ff fede 	bl	80007c0 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8000a04:	2109      	movs	r1, #9
 8000a06:	4814      	ldr	r0, [pc, #80]	; (8000a58 <collectSoftwareInfo+0xe0>)
 8000a08:	f7ff feda 	bl	80007c0 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	4808      	ldr	r0, [pc, #32]	; (8000a30 <collectSoftwareInfo+0xb8>)
 8000a10:	f7ff fed6 	bl	80007c0 <uartTransmit>
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	08008d34 	.word	0x08008d34
 8000a1c:	08008d44 	.word	0x08008d44
 8000a20:	08008d4c 	.word	0x08008d4c
 8000a24:	08008d5c 	.word	0x08008d5c
 8000a28:	08008d64 	.word	0x08008d64
 8000a2c:	08008d74 	.word	0x08008d74
 8000a30:	08008d1c 	.word	0x08008d1c
 8000a34:	08008da0 	.word	0x08008da0
 8000a38:	08008db8 	.word	0x08008db8
 8000a3c:	08008dc8 	.word	0x08008dc8
 8000a40:	08008ddc 	.word	0x08008ddc
 8000a44:	08008e08 	.word	0x08008e08
 8000a48:	08008e20 	.word	0x08008e20
 8000a4c:	08008e38 	.word	0x08008e38
 8000a50:	08008e48 	.word	0x08008e48
 8000a54:	08008e54 	.word	0x08008e54
 8000a58:	08008e64 	.word	0x08008e64

08000a5c <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8000a60:	2113      	movs	r1, #19
 8000a62:	4824      	ldr	r0, [pc, #144]	; (8000af4 <collectMiddlewareInfo+0x98>)
 8000a64:	f7ff feac 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8000a68:	210a      	movs	r1, #10
 8000a6a:	2005      	movs	r0, #5
 8000a6c:	f7ff febc 	bl	80007e8 <uartTransmitNumber>
	uartTransmit(".", 1);
 8000a70:	2101      	movs	r1, #1
 8000a72:	4821      	ldr	r0, [pc, #132]	; (8000af8 <collectMiddlewareInfo+0x9c>)
 8000a74:	f7ff fea4 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8000a78:	210a      	movs	r1, #10
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f7ff feb4 	bl	80007e8 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8000a80:	2111      	movs	r1, #17
 8000a82:	481e      	ldr	r0, [pc, #120]	; (8000afc <collectMiddlewareInfo+0xa0>)
 8000a84:	f7ff fe9c 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8000a88:	f003 fa3a 	bl	8003f00 <HAL_GetHalVersion>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	0e1b      	lsrs	r3, r3, #24
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	210a      	movs	r1, #10
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fea7 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	4816      	ldr	r0, [pc, #88]	; (8000af8 <collectMiddlewareInfo+0x9c>)
 8000a9e:	f7ff fe8f 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000aa2:	f003 fa2d 	bl	8003f00 <HAL_GetHalVersion>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	0c1b      	lsrs	r3, r3, #16
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	210a      	movs	r1, #10
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fe9a 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	4810      	ldr	r0, [pc, #64]	; (8000af8 <collectMiddlewareInfo+0x9c>)
 8000ab8:	f7ff fe82 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000abc:	f003 fa20 	bl	8003f00 <HAL_GetHalVersion>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	0a1b      	lsrs	r3, r3, #8
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	210a      	movs	r1, #10
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fe8d 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000ace:	2101      	movs	r1, #1
 8000ad0:	4809      	ldr	r0, [pc, #36]	; (8000af8 <collectMiddlewareInfo+0x9c>)
 8000ad2:	f7ff fe75 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000ad6:	f003 fa13 	bl	8003f00 <HAL_GetHalVersion>
 8000ada:	4603      	mov	r3, r0
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	210a      	movs	r1, #10
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fe81 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	4805      	ldr	r0, [pc, #20]	; (8000b00 <collectMiddlewareInfo+0xa4>)
 8000aea:	f7ff fe69 	bl	80007c0 <uartTransmit>
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	08008e70 	.word	0x08008e70
 8000af8:	08008e84 	.word	0x08008e84
 8000afc:	08008e88 	.word	0x08008e88
 8000b00:	08008d1c 	.word	0x08008d1c

08000b04 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 8000b08:	2114      	movs	r1, #20
 8000b0a:	4814      	ldr	r0, [pc, #80]	; (8000b5c <collectGitcounts+0x58>)
 8000b0c:	f7ff fe58 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8000b10:	2103      	movs	r1, #3
 8000b12:	4813      	ldr	r0, [pc, #76]	; (8000b60 <collectGitcounts+0x5c>)
 8000b14:	f7ff fe54 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 8000b18:	2116      	movs	r1, #22
 8000b1a:	4812      	ldr	r0, [pc, #72]	; (8000b64 <collectGitcounts+0x60>)
 8000b1c:	f7ff fe50 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8000b20:	2103      	movs	r1, #3
 8000b22:	4811      	ldr	r0, [pc, #68]	; (8000b68 <collectGitcounts+0x64>)
 8000b24:	f7ff fe4c 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 8000b28:	211b      	movs	r1, #27
 8000b2a:	4810      	ldr	r0, [pc, #64]	; (8000b6c <collectGitcounts+0x68>)
 8000b2c:	f7ff fe48 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8000b30:	2103      	movs	r1, #3
 8000b32:	480f      	ldr	r0, [pc, #60]	; (8000b70 <collectGitcounts+0x6c>)
 8000b34:	f7ff fe44 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000b38:	2115      	movs	r1, #21
 8000b3a:	480e      	ldr	r0, [pc, #56]	; (8000b74 <collectGitcounts+0x70>)
 8000b3c:	f7ff fe40 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8000b40:	2102      	movs	r1, #2
 8000b42:	480d      	ldr	r0, [pc, #52]	; (8000b78 <collectGitcounts+0x74>)
 8000b44:	f7ff fe3c 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000b48:	2114      	movs	r1, #20
 8000b4a:	480c      	ldr	r0, [pc, #48]	; (8000b7c <collectGitcounts+0x78>)
 8000b4c:	f7ff fe38 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 8000b50:	2103      	movs	r1, #3
 8000b52:	480b      	ldr	r0, [pc, #44]	; (8000b80 <collectGitcounts+0x7c>)
 8000b54:	f7ff fe34 	bl	80007c0 <uartTransmit>
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	08008e9c 	.word	0x08008e9c
 8000b60:	08008eb0 	.word	0x08008eb0
 8000b64:	08008eb4 	.word	0x08008eb4
 8000b68:	08008ecc 	.word	0x08008ecc
 8000b6c:	08008ed0 	.word	0x08008ed0
 8000b70:	08008eec 	.word	0x08008eec
 8000b74:	08008da0 	.word	0x08008da0
 8000b78:	08008ef0 	.word	0x08008ef0
 8000b7c:	08008dc8 	.word	0x08008dc8
 8000b80:	08008ef4 	.word	0x08008ef4

08000b84 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000b88:	2111      	movs	r1, #17
 8000b8a:	480e      	ldr	r0, [pc, #56]	; (8000bc4 <collectSystemInfo+0x40>)
 8000b8c:	f7ff fe18 	bl	80007c0 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000b90:	f7ff fe5c 	bl	800084c <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000b94:	2111      	movs	r1, #17
 8000b96:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <collectSystemInfo+0x44>)
 8000b98:	f7ff fe12 	bl	80007c0 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8000b9c:	f7ff feec 	bl	8000978 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000ba0:	2113      	movs	r1, #19
 8000ba2:	480a      	ldr	r0, [pc, #40]	; (8000bcc <collectSystemInfo+0x48>)
 8000ba4:	f7ff fe0c 	bl	80007c0 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000ba8:	f7ff ff58 	bl	8000a5c <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8000bac:	2113      	movs	r1, #19
 8000bae:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <collectSystemInfo+0x4c>)
 8000bb0:	f7ff fe06 	bl	80007c0 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8000bb4:	f7ff ffa6 	bl	8000b04 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 8000bb8:	2103      	movs	r1, #3
 8000bba:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <collectSystemInfo+0x50>)
 8000bbc:	f7ff fe00 	bl	80007c0 <uartTransmit>
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	08008ef8 	.word	0x08008ef8
 8000bc8:	08008f0c 	.word	0x08008f0c
 8000bcc:	08008f20 	.word	0x08008f20
 8000bd0:	08008f34 	.word	0x08008f34
 8000bd4:	08008f48 	.word	0x08008f48

08000bd8 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8000bde:	2300      	movs	r3, #0
 8000be0:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000be2:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <readResetSource+0xa0>)
 8000be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000be6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000bf4:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <readResetSource+0xa0>)
 8000bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bf8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d002      	beq.n	8000c06 <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	3302      	adds	r3, #2
 8000c04:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8000c06:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <readResetSource+0xa0>)
 8000c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	da02      	bge.n	8000c14 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	3304      	adds	r3, #4
 8000c12:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000c14:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <readResetSource+0xa0>)
 8000c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d002      	beq.n	8000c26 <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	3308      	adds	r3, #8
 8000c24:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <readResetSource+0xa0>)
 8000c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d002      	beq.n	8000c38 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	3310      	adds	r3, #16
 8000c36:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <readResetSource+0xa0>)
 8000c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d002      	beq.n	8000c4a <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	3320      	adds	r3, #32
 8000c48:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <readResetSource+0xa0>)
 8000c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d002      	beq.n	8000c5c <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	3340      	adds	r3, #64	; 0x40
 8000c5a:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <readResetSource+0xa0>)
 8000c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c60:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <readResetSource+0xa0>)
 8000c62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c66:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8000c68:	79fb      	ldrb	r3, [r7, #7]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800

08000c7c <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8000c86:	2106      	movs	r1, #6
 8000c88:	482a      	ldr	r0, [pc, #168]	; (8000d34 <printResetSource+0xb8>)
 8000c8a:	f7ff fd99 	bl	80007c0 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d104      	bne.n	8000c9e <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8000c94:	210f      	movs	r1, #15
 8000c96:	4828      	ldr	r0, [pc, #160]	; (8000d38 <printResetSource+0xbc>)
 8000c98:	f7ff fd92 	bl	80007c0 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8000c9c:	e046      	b.n	8000d2c <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d003      	beq.n	8000cb0 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000ca8:	2118      	movs	r1, #24
 8000caa:	4824      	ldr	r0, [pc, #144]	; (8000d3c <printResetSource+0xc0>)
 8000cac:	f7ff fd88 	bl	80007c0 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000cba:	2116      	movs	r1, #22
 8000cbc:	4820      	ldr	r0, [pc, #128]	; (8000d40 <printResetSource+0xc4>)
 8000cbe:	f7ff fd7f 	bl	80007c0 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d003      	beq.n	8000cd4 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8000ccc:	210a      	movs	r1, #10
 8000cce:	481d      	ldr	r0, [pc, #116]	; (8000d44 <printResetSource+0xc8>)
 8000cd0:	f7ff fd76 	bl	80007c0 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f003 0308 	and.w	r3, r3, #8
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8000cde:	2110      	movs	r1, #16
 8000ce0:	4819      	ldr	r0, [pc, #100]	; (8000d48 <printResetSource+0xcc>)
 8000ce2:	f7ff fd6d 	bl	80007c0 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 0310 	and.w	r3, r3, #16
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d003      	beq.n	8000cf8 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000cf0:	210f      	movs	r1, #15
 8000cf2:	4816      	ldr	r0, [pc, #88]	; (8000d4c <printResetSource+0xd0>)
 8000cf4:	f7ff fd64 	bl	80007c0 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 0320 	and.w	r3, r3, #32
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000d02:	210f      	movs	r1, #15
 8000d04:	4812      	ldr	r0, [pc, #72]	; (8000d50 <printResetSource+0xd4>)
 8000d06:	f7ff fd5b 	bl	80007c0 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d003      	beq.n	8000d1c <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000d14:	210a      	movs	r1, #10
 8000d16:	480f      	ldr	r0, [pc, #60]	; (8000d54 <printResetSource+0xd8>)
 8000d18:	f7ff fd52 	bl	80007c0 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	da03      	bge.n	8000d2c <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000d24:	2105      	movs	r1, #5
 8000d26:	480c      	ldr	r0, [pc, #48]	; (8000d58 <printResetSource+0xdc>)
 8000d28:	f7ff fd4a 	bl	80007c0 <uartTransmit>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	08008f4c 	.word	0x08008f4c
 8000d38:	08008f54 	.word	0x08008f54
 8000d3c:	08008f64 	.word	0x08008f64
 8000d40:	08008f80 	.word	0x08008f80
 8000d44:	08008f98 	.word	0x08008f98
 8000d48:	08008fa4 	.word	0x08008fa4
 8000d4c:	08008fb8 	.word	0x08008fb8
 8000d50:	08008fc8 	.word	0x08008fc8
 8000d54:	08008fd8 	.word	0x08008fd8
 8000d58:	08008fe4 	.word	0x08008fe4

08000d5c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d68:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d013      	beq.n	8000d9c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d74:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d78:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d7c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d00b      	beq.n	8000d9c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d84:	e000      	b.n	8000d88 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d86:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d88:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d0f9      	beq.n	8000d86 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d92:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d9c:	687b      	ldr	r3, [r7, #4]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <ADC_Gaspedal>:
//----------------------------------------------------------------------

// Gaspedal einlesen
//----------------------------------------------------------------------
uint16_t ADC_Gaspedal(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC von Gaspedal einlesen\n");
 8000db2:	4820      	ldr	r0, [pc, #128]	; (8000e34 <ADC_Gaspedal+0x88>)
 8000db4:	f000 fafe 	bl	80013b4 <ITM_SendString>
#endif

	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_6;
 8000dc8:	2306      	movs	r3, #6
 8000dca:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4817      	ldr	r0, [pc, #92]	; (8000e38 <ADC_Gaspedal+0x8c>)
 8000dda:	f003 fab7 	bl	800434c <HAL_ADC_ConfigChannel>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <ADC_Gaspedal+0x3c>
	{
		Error_Handler();
 8000de4:	f002 fe40 	bl	8003a68 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);
 8000de8:	4813      	ldr	r0, [pc, #76]	; (8000e38 <ADC_Gaspedal+0x8c>)
 8000dea:	f003 f915 	bl	8004018 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000dee:	2164      	movs	r1, #100	; 0x64
 8000df0:	4811      	ldr	r0, [pc, #68]	; (8000e38 <ADC_Gaspedal+0x8c>)
 8000df2:	f003 fa13 	bl	800421c <HAL_ADC_PollForConversion>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d105      	bne.n	8000e08 <ADC_Gaspedal+0x5c>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000dfc:	480e      	ldr	r0, [pc, #56]	; (8000e38 <ADC_Gaspedal+0x8c>)
 8000dfe:	f003 fa98 	bl	8004332 <HAL_ADC_GetValue>
 8000e02:	4603      	mov	r3, r0
 8000e04:	82fb      	strh	r3, [r7, #22]
 8000e06:	e002      	b.n	8000e0e <ADC_Gaspedal+0x62>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000e08:	2004      	movs	r0, #4
 8000e0a:	f000 fa31 	bl	8001270 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000e0e:	480a      	ldr	r0, [pc, #40]	; (8000e38 <ADC_Gaspedal+0x8c>)
 8000e10:	f003 f9d0 	bl	80041b4 <HAL_ADC_Stop>

#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC-Wert Gaspedal:\t");
 8000e14:	4809      	ldr	r0, [pc, #36]	; (8000e3c <ADC_Gaspedal+0x90>)
 8000e16:	f000 facd 	bl	80013b4 <ITM_SendString>
	ITM_SendNumber(ADC_Data);
 8000e1a:	8afb      	ldrh	r3, [r7, #22]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 fad3 	bl	80013c8 <ITM_SendNumber>
	ITM_SendChar('\n');
 8000e22:	200a      	movs	r0, #10
 8000e24:	f7ff ff9a 	bl	8000d5c <ITM_SendChar>
#endif

	//ADC Wert zurueck geben
	return ADC_Data;
 8000e28:	8afb      	ldrh	r3, [r7, #22]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	08008fec 	.word	0x08008fec
 8000e38:	20000058 	.word	0x20000058
 8000e3c:	08009008 	.word	0x08009008

08000e40 <ADC_Bremsdruck>:
//----------------------------------------------------------------------

// Bremsdruck einlesen
//----------------------------------------------------------------------
uint16_t ADC_Bremsdruck(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC von Bremsdruck einlesen\n");
 8000e46:	4820      	ldr	r0, [pc, #128]	; (8000ec8 <ADC_Bremsdruck+0x88>)
 8000e48:	f000 fab4 	bl	80013b4 <ITM_SendString>
#endif

	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_14;
 8000e5c:	230e      	movs	r3, #14
 8000e5e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000e60:	2301      	movs	r3, #1
 8000e62:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000e64:	2301      	movs	r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4817      	ldr	r0, [pc, #92]	; (8000ecc <ADC_Bremsdruck+0x8c>)
 8000e6e:	f003 fa6d 	bl	800434c <HAL_ADC_ConfigChannel>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <ADC_Bremsdruck+0x3c>
	{
		Error_Handler();
 8000e78:	f002 fdf6 	bl	8003a68 <Error_Handler>
	}
	
	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000e7c:	4813      	ldr	r0, [pc, #76]	; (8000ecc <ADC_Bremsdruck+0x8c>)
 8000e7e:	f003 f8cb 	bl	8004018 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000e82:	2164      	movs	r1, #100	; 0x64
 8000e84:	4811      	ldr	r0, [pc, #68]	; (8000ecc <ADC_Bremsdruck+0x8c>)
 8000e86:	f003 f9c9 	bl	800421c <HAL_ADC_PollForConversion>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d105      	bne.n	8000e9c <ADC_Bremsdruck+0x5c>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000e90:	480e      	ldr	r0, [pc, #56]	; (8000ecc <ADC_Bremsdruck+0x8c>)
 8000e92:	f003 fa4e 	bl	8004332 <HAL_ADC_GetValue>
 8000e96:	4603      	mov	r3, r0
 8000e98:	82fb      	strh	r3, [r7, #22]
 8000e9a:	e002      	b.n	8000ea2 <ADC_Bremsdruck+0x62>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000e9c:	2004      	movs	r0, #4
 8000e9e:	f000 f9e7 	bl	8001270 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000ea2:	480a      	ldr	r0, [pc, #40]	; (8000ecc <ADC_Bremsdruck+0x8c>)
 8000ea4:	f003 f986 	bl	80041b4 <HAL_ADC_Stop>

#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC-Wert Bremsdruck:\t");
 8000ea8:	4809      	ldr	r0, [pc, #36]	; (8000ed0 <ADC_Bremsdruck+0x90>)
 8000eaa:	f000 fa83 	bl	80013b4 <ITM_SendString>
	ITM_SendNumber(ADC_Data);
 8000eae:	8afb      	ldrh	r3, [r7, #22]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 fa89 	bl	80013c8 <ITM_SendNumber>
	ITM_SendChar('\n');
 8000eb6:	200a      	movs	r0, #10
 8000eb8:	f7ff ff50 	bl	8000d5c <ITM_SendChar>
#endif

	//ADC Wert zurueck geben
	return ADC_Data;
 8000ebc:	8afb      	ldrh	r3, [r7, #22]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	0800901c 	.word	0x0800901c
 8000ecc:	20000058 	.word	0x20000058
 8000ed0:	0800903c 	.word	0x0800903c

08000ed4 <ADC_KL15>:
//----------------------------------------------------------------------

// Spannung KL15 einlesen
//----------------------------------------------------------------------
uint16_t ADC_KL15 (void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_3;										// ADC Kanal einstellen
 8000eea:	2303      	movs	r3, #3
 8000eec:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000eee:	2301      	movs	r3, #1
 8000ef0:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4811      	ldr	r0, [pc, #68]	; (8000f40 <ADC_KL15+0x6c>)
 8000efc:	f003 fa26 	bl	800434c <HAL_ADC_ConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <ADC_KL15+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000f06:	f002 fdaf 	bl	8003a68 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000f0a:	480d      	ldr	r0, [pc, #52]	; (8000f40 <ADC_KL15+0x6c>)
 8000f0c:	f003 f884 	bl	8004018 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000f10:	2164      	movs	r1, #100	; 0x64
 8000f12:	480b      	ldr	r0, [pc, #44]	; (8000f40 <ADC_KL15+0x6c>)
 8000f14:	f003 f982 	bl	800421c <HAL_ADC_PollForConversion>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d105      	bne.n	8000f2a <ADC_KL15+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000f1e:	4808      	ldr	r0, [pc, #32]	; (8000f40 <ADC_KL15+0x6c>)
 8000f20:	f003 fa07 	bl	8004332 <HAL_ADC_GetValue>
 8000f24:	4603      	mov	r3, r0
 8000f26:	82fb      	strh	r3, [r7, #22]
 8000f28:	e002      	b.n	8000f30 <ADC_KL15+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000f2a:	2004      	movs	r0, #4
 8000f2c:	f000 f9a0 	bl	8001270 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000f30:	4803      	ldr	r0, [pc, #12]	; (8000f40 <ADC_KL15+0x6c>)
 8000f32:	f003 f93f 	bl	80041b4 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000f36:	8afb      	ldrh	r3, [r7, #22]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000058 	.word	0x20000058

08000f44 <ADC_Kuhlwassertemperatur>:
//----------------------------------------------------------------------

// Kuehlwassertemperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_Kuhlwassertemperatur (void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_4;										// ADC Kanal einstellen
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000f5e:	2301      	movs	r3, #1
 8000f60:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8000f62:	2301      	movs	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4811      	ldr	r0, [pc, #68]	; (8000fb0 <ADC_Kuhlwassertemperatur+0x6c>)
 8000f6c:	f003 f9ee 	bl	800434c <HAL_ADC_ConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <ADC_Kuhlwassertemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000f76:	f002 fd77 	bl	8003a68 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000f7a:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <ADC_Kuhlwassertemperatur+0x6c>)
 8000f7c:	f003 f84c 	bl	8004018 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000f80:	2164      	movs	r1, #100	; 0x64
 8000f82:	480b      	ldr	r0, [pc, #44]	; (8000fb0 <ADC_Kuhlwassertemperatur+0x6c>)
 8000f84:	f003 f94a 	bl	800421c <HAL_ADC_PollForConversion>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d105      	bne.n	8000f9a <ADC_Kuhlwassertemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000f8e:	4808      	ldr	r0, [pc, #32]	; (8000fb0 <ADC_Kuhlwassertemperatur+0x6c>)
 8000f90:	f003 f9cf 	bl	8004332 <HAL_ADC_GetValue>
 8000f94:	4603      	mov	r3, r0
 8000f96:	82fb      	strh	r3, [r7, #22]
 8000f98:	e002      	b.n	8000fa0 <ADC_Kuhlwassertemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000f9a:	2004      	movs	r0, #4
 8000f9c:	f000 f968 	bl	8001270 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000fa0:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <ADC_Kuhlwassertemperatur+0x6c>)
 8000fa2:	f003 f907 	bl	80041b4 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000fa6:	8afb      	ldrh	r3, [r7, #22]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000058 	.word	0x20000058

08000fb4 <ADC_Klimaflap>:
//----------------------------------------------------------------------

// Klimaflapstellung einlesen (Position ueber Poti)
//----------------------------------------------------------------------
uint16_t ADC_Klimaflap (void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_5;										// ADC Kanal einstellen
 8000fca:	2305      	movs	r3, #5
 8000fcc:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000fce:	2301      	movs	r3, #1
 8000fd0:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4811      	ldr	r0, [pc, #68]	; (8001020 <ADC_Klimaflap+0x6c>)
 8000fdc:	f003 f9b6 	bl	800434c <HAL_ADC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <ADC_Klimaflap+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000fe6:	f002 fd3f 	bl	8003a68 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000fea:	480d      	ldr	r0, [pc, #52]	; (8001020 <ADC_Klimaflap+0x6c>)
 8000fec:	f003 f814 	bl	8004018 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000ff0:	2164      	movs	r1, #100	; 0x64
 8000ff2:	480b      	ldr	r0, [pc, #44]	; (8001020 <ADC_Klimaflap+0x6c>)
 8000ff4:	f003 f912 	bl	800421c <HAL_ADC_PollForConversion>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d105      	bne.n	800100a <ADC_Klimaflap+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000ffe:	4808      	ldr	r0, [pc, #32]	; (8001020 <ADC_Klimaflap+0x6c>)
 8001000:	f003 f997 	bl	8004332 <HAL_ADC_GetValue>
 8001004:	4603      	mov	r3, r0
 8001006:	82fb      	strh	r3, [r7, #22]
 8001008:	e002      	b.n	8001010 <ADC_Klimaflap+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 800100a:	2004      	movs	r0, #4
 800100c:	f000 f930 	bl	8001270 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <ADC_Klimaflap+0x6c>)
 8001012:	f003 f8cf 	bl	80041b4 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8001016:	8afb      	ldrh	r3, [r7, #22]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000058 	.word	0x20000058

08001024 <ADC_PCBTemperatur>:
//----------------------------------------------------------------------

// PCB Temperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_PCBTemperatur (void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_7;										// ADC Kanal einstellen
 800103a:	2307      	movs	r3, #7
 800103c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 800103e:	2301      	movs	r3, #1
 8001040:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8001042:	2301      	movs	r3, #1
 8001044:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	4619      	mov	r1, r3
 800104a:	4811      	ldr	r0, [pc, #68]	; (8001090 <ADC_PCBTemperatur+0x6c>)
 800104c:	f003 f97e 	bl	800434c <HAL_ADC_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <ADC_PCBTemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8001056:	f002 fd07 	bl	8003a68 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 800105a:	480d      	ldr	r0, [pc, #52]	; (8001090 <ADC_PCBTemperatur+0x6c>)
 800105c:	f002 ffdc 	bl	8004018 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8001060:	2164      	movs	r1, #100	; 0x64
 8001062:	480b      	ldr	r0, [pc, #44]	; (8001090 <ADC_PCBTemperatur+0x6c>)
 8001064:	f003 f8da 	bl	800421c <HAL_ADC_PollForConversion>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d105      	bne.n	800107a <ADC_PCBTemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 800106e:	4808      	ldr	r0, [pc, #32]	; (8001090 <ADC_PCBTemperatur+0x6c>)
 8001070:	f003 f95f 	bl	8004332 <HAL_ADC_GetValue>
 8001074:	4603      	mov	r3, r0
 8001076:	82fb      	strh	r3, [r7, #22]
 8001078:	e002      	b.n	8001080 <ADC_PCBTemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 800107a:	2004      	movs	r0, #4
 800107c:	f000 f8f8 	bl	8001270 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <ADC_PCBTemperatur+0x6c>)
 8001082:	f003 f897 	bl	80041b4 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8001086:	8afb      	ldrh	r3, [r7, #22]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000058 	.word	0x20000058

08001094 <ADC_Return>:
//----------------------------------------------------------------------

// Navibedienelement Return einlesen (2 Schalter mit unterschiedlichen Widerstaenden)
//----------------------------------------------------------------------
uint16_t ADC_Return (void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_8;										// ADC Kanal einstellen
 80010aa:	2308      	movs	r3, #8
 80010ac:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 80010ae:	2301      	movs	r3, #1
 80010b0:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 80010b2:	2301      	movs	r3, #1
 80010b4:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	4619      	mov	r1, r3
 80010ba:	4811      	ldr	r0, [pc, #68]	; (8001100 <ADC_Return+0x6c>)
 80010bc:	f003 f946 	bl	800434c <HAL_ADC_ConfigChannel>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <ADC_Return+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 80010c6:	f002 fccf 	bl	8003a68 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 80010ca:	480d      	ldr	r0, [pc, #52]	; (8001100 <ADC_Return+0x6c>)
 80010cc:	f002 ffa4 	bl	8004018 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 80010d0:	2164      	movs	r1, #100	; 0x64
 80010d2:	480b      	ldr	r0, [pc, #44]	; (8001100 <ADC_Return+0x6c>)
 80010d4:	f003 f8a2 	bl	800421c <HAL_ADC_PollForConversion>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d105      	bne.n	80010ea <ADC_Return+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 80010de:	4808      	ldr	r0, [pc, #32]	; (8001100 <ADC_Return+0x6c>)
 80010e0:	f003 f927 	bl	8004332 <HAL_ADC_GetValue>
 80010e4:	4603      	mov	r3, r0
 80010e6:	82fb      	strh	r3, [r7, #22]
 80010e8:	e002      	b.n	80010f0 <ADC_Return+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 80010ea:	2004      	movs	r0, #4
 80010ec:	f000 f8c0 	bl	8001270 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 80010f0:	4803      	ldr	r0, [pc, #12]	; (8001100 <ADC_Return+0x6c>)
 80010f2:	f003 f85f 	bl	80041b4 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 80010f6:	8afb      	ldrh	r3, [r7, #22]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000058 	.word	0x20000058

08001104 <ADC_Info>:
//----------------------------------------------------------------------

// Navibedienelement Info einlesen (2 Schalter mit unterschiedlichen Widerstaenden)
//----------------------------------------------------------------------
uint16_t ADC_Info (void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_9;										// ADC Kanal einstellen
 800111a:	2309      	movs	r3, #9
 800111c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 800111e:	2301      	movs	r3, #1
 8001120:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8001122:	2301      	movs	r3, #1
 8001124:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	4619      	mov	r1, r3
 800112a:	4811      	ldr	r0, [pc, #68]	; (8001170 <ADC_Info+0x6c>)
 800112c:	f003 f90e 	bl	800434c <HAL_ADC_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <ADC_Info+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8001136:	f002 fc97 	bl	8003a68 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 800113a:	480d      	ldr	r0, [pc, #52]	; (8001170 <ADC_Info+0x6c>)
 800113c:	f002 ff6c 	bl	8004018 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8001140:	2164      	movs	r1, #100	; 0x64
 8001142:	480b      	ldr	r0, [pc, #44]	; (8001170 <ADC_Info+0x6c>)
 8001144:	f003 f86a 	bl	800421c <HAL_ADC_PollForConversion>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d105      	bne.n	800115a <ADC_Info+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 800114e:	4808      	ldr	r0, [pc, #32]	; (8001170 <ADC_Info+0x6c>)
 8001150:	f003 f8ef 	bl	8004332 <HAL_ADC_GetValue>
 8001154:	4603      	mov	r3, r0
 8001156:	82fb      	strh	r3, [r7, #22]
 8001158:	e002      	b.n	8001160 <ADC_Info+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 800115a:	2004      	movs	r0, #4
 800115c:	f000 f888 	bl	8001270 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8001160:	4803      	ldr	r0, [pc, #12]	; (8001170 <ADC_Info+0x6c>)
 8001162:	f003 f827 	bl	80041b4 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8001166:	8afb      	ldrh	r3, [r7, #22]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000058 	.word	0x20000058

08001174 <ADC_Bremsdrucktemperatur>:
//----------------------------------------------------------------------

// Bremsdrucktemperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_Bremsdrucktemperatur (void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_15;										// ADC Kanal einstellen
 800118a:	230f      	movs	r3, #15
 800118c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 800118e:	2301      	movs	r3, #1
 8001190:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8001192:	2301      	movs	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	4619      	mov	r1, r3
 800119a:	4811      	ldr	r0, [pc, #68]	; (80011e0 <ADC_Bremsdrucktemperatur+0x6c>)
 800119c:	f003 f8d6 	bl	800434c <HAL_ADC_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <ADC_Bremsdrucktemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 80011a6:	f002 fc5f 	bl	8003a68 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 80011aa:	480d      	ldr	r0, [pc, #52]	; (80011e0 <ADC_Bremsdrucktemperatur+0x6c>)
 80011ac:	f002 ff34 	bl	8004018 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 80011b0:	2164      	movs	r1, #100	; 0x64
 80011b2:	480b      	ldr	r0, [pc, #44]	; (80011e0 <ADC_Bremsdrucktemperatur+0x6c>)
 80011b4:	f003 f832 	bl	800421c <HAL_ADC_PollForConversion>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d105      	bne.n	80011ca <ADC_Bremsdrucktemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <ADC_Bremsdrucktemperatur+0x6c>)
 80011c0:	f003 f8b7 	bl	8004332 <HAL_ADC_GetValue>
 80011c4:	4603      	mov	r3, r0
 80011c6:	82fb      	strh	r3, [r7, #22]
 80011c8:	e002      	b.n	80011d0 <ADC_Bremsdrucktemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 80011ca:	2004      	movs	r0, #4
 80011cc:	f000 f850 	bl	8001270 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 80011d0:	4803      	ldr	r0, [pc, #12]	; (80011e0 <ADC_Bremsdrucktemperatur+0x6c>)
 80011d2:	f002 ffef 	bl	80041b4 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 80011d6:	8afb      	ldrh	r3, [r7, #22]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000058 	.word	0x20000058

080011e4 <ADC_STMTemperatur>:
//----------------------------------------------------------------------

// STM32 Temperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_STMTemperatur (void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;								// ADC Kanal einstellen
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <ADC_STMTemperatur+0x6c>)
 80011fc:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 80011fe:	2301      	movs	r3, #1
 8001200:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8001202:	2301      	movs	r3, #1
 8001204:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	4619      	mov	r1, r3
 800120a:	4812      	ldr	r0, [pc, #72]	; (8001254 <ADC_STMTemperatur+0x70>)
 800120c:	f003 f89e 	bl	800434c <HAL_ADC_ConfigChannel>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <ADC_STMTemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8001216:	f002 fc27 	bl	8003a68 <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 800121a:	480e      	ldr	r0, [pc, #56]	; (8001254 <ADC_STMTemperatur+0x70>)
 800121c:	f002 fefc 	bl	8004018 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8001220:	2164      	movs	r1, #100	; 0x64
 8001222:	480c      	ldr	r0, [pc, #48]	; (8001254 <ADC_STMTemperatur+0x70>)
 8001224:	f002 fffa 	bl	800421c <HAL_ADC_PollForConversion>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d105      	bne.n	800123a <ADC_STMTemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 800122e:	4809      	ldr	r0, [pc, #36]	; (8001254 <ADC_STMTemperatur+0x70>)
 8001230:	f003 f87f 	bl	8004332 <HAL_ADC_GetValue>
 8001234:	4603      	mov	r3, r0
 8001236:	82fb      	strh	r3, [r7, #22]
 8001238:	e002      	b.n	8001240 <ADC_STMTemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 800123a:	2004      	movs	r0, #4
 800123c:	f000 f818 	bl	8001270 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <ADC_STMTemperatur+0x70>)
 8001242:	f002 ffb7 	bl	80041b4 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8001246:	8afb      	ldrh	r3, [r7, #22]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	10000012 	.word	0x10000012
 8001254:	20000058 	.word	0x20000058

08001258 <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <software_error>:
//----------------------------------------------------------------------

// Diagnose Funktion falls ein Fehler auftritt
//----------------------------------------------------------------------
void software_error(uint8_t errorcode)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800127a:	b672      	cpsid	i
}
 800127c:	bf00      	nop
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 800127e:	4a1e      	ldr	r2, [pc, #120]	; (80012f8 <software_error+0x88>)
 8001280:	7853      	ldrb	r3, [r2, #1]
 8001282:	f043 0308 	orr.w	r3, r3, #8
 8001286:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <software_error+0x88>)
 800128a:	785b      	ldrb	r3, [r3, #1]
 800128c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001290:	b2db      	uxtb	r3, r3
 8001292:	461a      	mov	r2, r3
 8001294:	2104      	movs	r1, #4
 8001296:	4819      	ldr	r0, [pc, #100]	; (80012fc <software_error+0x8c>)
 8001298:	f004 fc8e 	bl	8005bb8 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 800129c:	4a16      	ldr	r2, [pc, #88]	; (80012f8 <software_error+0x88>)
 800129e:	7853      	ldrb	r3, [r2, #1]
 80012a0:	f36f 1304 	bfc	r3, #4, #1
 80012a4:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// OK LED ausschalten
 80012a6:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <software_error+0x88>)
 80012a8:	785b      	ldrb	r3, [r3, #1]
 80012aa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	461a      	mov	r2, r3
 80012b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b6:	4811      	ldr	r0, [pc, #68]	; (80012fc <software_error+0x8c>)
 80012b8:	f004 fc7e 	bl	8005bb8 <HAL_GPIO_WritePin>

	// Schalte SDC_Motor aus
	system_out.MotorSDC = 0;												// Zuruecksetzen Variable
 80012bc:	4a10      	ldr	r2, [pc, #64]	; (8001300 <software_error+0x90>)
 80012be:	7813      	ldrb	r3, [r2, #0]
 80012c0:	f36f 1345 	bfc	r3, #5, #1
 80012c4:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, system_out.MotorSDC);// SDC oeffnen
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <software_error+0x90>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	461a      	mov	r2, r3
 80012d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012d6:	480b      	ldr	r0, [pc, #44]	; (8001304 <software_error+0x94>)
 80012d8:	f004 fc6e 	bl	8005bb8 <HAL_GPIO_WritePin>
#ifdef DEBUG																// Serielle Kommunukation nur waehrend Debugging
#define SOFTERRORMESSAGE			"\nSoftware Error Handler ausgeloest\n"	// Ausgabe das Fehler aufgetreten ist
	uartTransmit(SOFTERRORMESSAGE,sizeof(SOFTERRORMESSAGE));
 80012dc:	2124      	movs	r1, #36	; 0x24
 80012de:	480a      	ldr	r0, [pc, #40]	; (8001308 <software_error+0x98>)
 80012e0:	f7ff fa6e 	bl	80007c0 <uartTransmit>

#define ERRORCODE					"Error Code:\t"							// Ausgabe des Fehlers anhand von Fehlercode
	uartTransmit(ERRORCODE,sizeof(ERRORCODE));
 80012e4:	210d      	movs	r1, #13
 80012e6:	4809      	ldr	r0, [pc, #36]	; (800130c <software_error+0x9c>)
 80012e8:	f7ff fa6a 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(errorcode, 10);										// Fehlercode ausgeben
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	210a      	movs	r1, #10
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fa79 	bl	80007e8 <uartTransmitNumber>
#endif
	while (1);																// Endlosschleife
 80012f6:	e7fe      	b.n	80012f6 <software_error+0x86>
 80012f8:	20000050 	.word	0x20000050
 80012fc:	40020400 	.word	0x40020400
 8001300:	20000048 	.word	0x20000048
 8001304:	40021000 	.word	0x40021000
 8001308:	08009054 	.word	0x08009054
 800130c:	08009078 	.word	0x08009078

08001310 <software_error_debug>:
//----------------------------------------------------------------------

// Diagnose Funktion falls ein Fehler auftritt (Nur Debugzwecke)
//----------------------------------------------------------------------
void software_error_debug(uint8_t errorcode)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 800131a:	4a20      	ldr	r2, [pc, #128]	; (800139c <software_error_debug+0x8c>)
 800131c:	7853      	ldrb	r3, [r2, #1]
 800131e:	f043 0308 	orr.w	r3, r3, #8
 8001322:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <software_error_debug+0x8c>)
 8001326:	785b      	ldrb	r3, [r3, #1]
 8001328:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800132c:	b2db      	uxtb	r3, r3
 800132e:	461a      	mov	r2, r3
 8001330:	2104      	movs	r1, #4
 8001332:	481b      	ldr	r0, [pc, #108]	; (80013a0 <software_error_debug+0x90>)
 8001334:	f004 fc40 	bl	8005bb8 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8001338:	4a18      	ldr	r2, [pc, #96]	; (800139c <software_error_debug+0x8c>)
 800133a:	7853      	ldrb	r3, [r2, #1]
 800133c:	f36f 1304 	bfc	r3, #4, #1
 8001340:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// OK LED ausschalten
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <software_error_debug+0x8c>)
 8001344:	785b      	ldrb	r3, [r3, #1]
 8001346:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800134a:	b2db      	uxtb	r3, r3
 800134c:	461a      	mov	r2, r3
 800134e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001352:	4813      	ldr	r0, [pc, #76]	; (80013a0 <software_error_debug+0x90>)
 8001354:	f004 fc30 	bl	8005bb8 <HAL_GPIO_WritePin>

	// Schalte SDC_Motor aus
	system_out.MotorSDC = 0;												// Zuruecksetzen Variable
 8001358:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <software_error_debug+0x94>)
 800135a:	7813      	ldrb	r3, [r2, #0]
 800135c:	f36f 1345 	bfc	r3, #5, #1
 8001360:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, system_out.MotorSDC);// SDC oeffnen
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <software_error_debug+0x94>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	461a      	mov	r2, r3
 800136e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001372:	480d      	ldr	r0, [pc, #52]	; (80013a8 <software_error_debug+0x98>)
 8001374:	f004 fc20 	bl	8005bb8 <HAL_GPIO_WritePin>
#ifdef DEBUG																// Serielle Kommunukation nur waehrend Debugging
#define SOFTERRORMESSAGE			"\nSoftware Error Handler ausgeloest\n"	// Ausgabe das Fehler aufgetreten ist
	uartTransmit(SOFTERRORMESSAGE,sizeof(SOFTERRORMESSAGE));
 8001378:	2124      	movs	r1, #36	; 0x24
 800137a:	480c      	ldr	r0, [pc, #48]	; (80013ac <software_error_debug+0x9c>)
 800137c:	f7ff fa20 	bl	80007c0 <uartTransmit>

#define ERRORCODE					"Error Code:\t"							// Ausgabe des Fehlers anhand von Fehlercode
	uartTransmit(ERRORCODE,sizeof(ERRORCODE));
 8001380:	210d      	movs	r1, #13
 8001382:	480b      	ldr	r0, [pc, #44]	; (80013b0 <software_error_debug+0xa0>)
 8001384:	f7ff fa1c 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(errorcode, 10);										// Fehlercode ausgeben
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	210a      	movs	r1, #10
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fa2b 	bl	80007e8 <uartTransmitNumber>
#endif
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000050 	.word	0x20000050
 80013a0:	40020400 	.word	0x40020400
 80013a4:	20000048 	.word	0x20000048
 80013a8:	40021000 	.word	0x40021000
 80013ac:	08009054 	.word	0x08009054
 80013b0:	08009078 	.word	0x08009078

080013b4 <ITM_SendString>:
// Nachricht SWO ITM Data Console
// Core Clock := Maximalfrequenz ; HCLK fuer Serial Wire Viewer
// Im String #GRN# oder #RED# oder #ORG# erscheint die Nachricht in einer Farbe
//----------------------------------------------------------------------
void ITM_SendString(char *text)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	{
		ITM_SendChar(*text);												// Sende ITM Zeichen
		text++;																// Pointer hochzaehlen
	}
#endif
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <ITM_SendNumber>:
//----------------------------------------------------------------------

// Debug Nummer ueber SWO senden
//----------------------------------------------------------------------
void ITM_SendNumber(long number)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	for(; i > 0; i--)
	{
		ITM_SendChar('0' + buf[i-1]);
	}
#endif
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <ITM_SendChar>:
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d013      	beq.n	800141c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80013f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80013fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00b      	beq.n	800141c <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 8001404:	e000      	b.n	8001408 <ITM_SendChar+0x2c>
      __NOP();
 8001406:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001408:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f9      	beq.n	8001406 <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001412:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	701a      	strb	r2, [r3, #0]
  return (ch);
 800141c:	687b      	ldr	r3, [r7, #4]
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <readall_inputs>:
//----------------------------------------------------------------------

// Alle Eingaenge einlesen und speichern
//----------------------------------------------------------------------
void readall_inputs(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
#ifdef DEBUG_INPUT
	ITM_SendString("Lese Inputs ein\n");
 8001430:	48cf      	ldr	r0, [pc, #828]	; (8001770 <readall_inputs+0x344>)
 8001432:	f7ff ffbf 	bl	80013b4 <ITM_SendString>
#endif

	// Systemeingaenge einlesen
	system_in.Kickdown = HAL_GPIO_ReadPin(KICKDOWN_GPIO_Port, KICKDOWN_Pin);					// Eingang Gaspedal getreten
 8001436:	f44f 7180 	mov.w	r1, #256	; 0x100
 800143a:	48ce      	ldr	r0, [pc, #824]	; (8001774 <readall_inputs+0x348>)
 800143c:	f004 fba4 	bl	8005b88 <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	b2d9      	uxtb	r1, r3
 8001448:	4acb      	ldr	r2, [pc, #812]	; (8001778 <readall_inputs+0x34c>)
 800144a:	7813      	ldrb	r3, [r2, #0]
 800144c:	f361 0300 	bfi	r3, r1, #0, #1
 8001450:	7013      	strb	r3, [r2, #0]
	system_in.Leerlauf = HAL_GPIO_ReadPin(LEERLAUF_GPIO_Port, LEERLAUF_Pin);					// Eingang Gaspedal nicht getreten
 8001452:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001456:	48c7      	ldr	r0, [pc, #796]	; (8001774 <readall_inputs+0x348>)
 8001458:	f004 fb96 	bl	8005b88 <HAL_GPIO_ReadPin>
 800145c:	4603      	mov	r3, r0
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	b2d9      	uxtb	r1, r3
 8001464:	4ac4      	ldr	r2, [pc, #784]	; (8001778 <readall_inputs+0x34c>)
 8001466:	7813      	ldrb	r3, [r2, #0]
 8001468:	f361 0341 	bfi	r3, r1, #1, #1
 800146c:	7013      	strb	r3, [r2, #0]
	system_in.BremseNO = HAL_GPIO_ReadPin(BREMSE_NO_GPIO_Port, BREMSE_NO_Pin);					// Eingang Bremse nicht getreten
 800146e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001472:	48c0      	ldr	r0, [pc, #768]	; (8001774 <readall_inputs+0x348>)
 8001474:	f004 fb88 	bl	8005b88 <HAL_GPIO_ReadPin>
 8001478:	4603      	mov	r3, r0
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	b2d9      	uxtb	r1, r3
 8001480:	4abd      	ldr	r2, [pc, #756]	; (8001778 <readall_inputs+0x34c>)
 8001482:	7813      	ldrb	r3, [r2, #0]
 8001484:	f361 0382 	bfi	r3, r1, #2, #1
 8001488:	7013      	strb	r3, [r2, #0]
	system_in.BremseNC = HAL_GPIO_ReadPin(BREMSE_NC_GPIO_Port, BREMSE_NC_Pin);					// Eingang Bremse getreten
 800148a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800148e:	48b9      	ldr	r0, [pc, #740]	; (8001774 <readall_inputs+0x348>)
 8001490:	f004 fb7a 	bl	8005b88 <HAL_GPIO_ReadPin>
 8001494:	4603      	mov	r3, r0
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	b2d9      	uxtb	r1, r3
 800149c:	4ab6      	ldr	r2, [pc, #728]	; (8001778 <readall_inputs+0x34c>)
 800149e:	7813      	ldrb	r3, [r2, #0]
 80014a0:	f361 03c3 	bfi	r3, r1, #3, #1
 80014a4:	7013      	strb	r3, [r2, #0]
	system_in.Kupplung = HAL_GPIO_ReadPin(KUPPLUNG_NO_GPIO_Port, KUPPLUNG_NO_Pin);				// Eingang Kupplung nicht getreten
 80014a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014aa:	48b2      	ldr	r0, [pc, #712]	; (8001774 <readall_inputs+0x348>)
 80014ac:	f004 fb6c 	bl	8005b88 <HAL_GPIO_ReadPin>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	b2d9      	uxtb	r1, r3
 80014b8:	4aaf      	ldr	r2, [pc, #700]	; (8001778 <readall_inputs+0x34c>)
 80014ba:	7813      	ldrb	r3, [r2, #0]
 80014bc:	f361 1304 	bfi	r3, r1, #4, #1
 80014c0:	7013      	strb	r3, [r2, #0]
	system_in.Recuperation = HAL_GPIO_ReadPin(RECUPERATION_GPIO_Port, RECUPERATION_Pin);		// Eingang Recuperation
 80014c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014c6:	48ad      	ldr	r0, [pc, #692]	; (800177c <readall_inputs+0x350>)
 80014c8:	f004 fb5e 	bl	8005b88 <HAL_GPIO_ReadPin>
 80014cc:	4603      	mov	r3, r0
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	b2d9      	uxtb	r1, r3
 80014d4:	4aa8      	ldr	r2, [pc, #672]	; (8001778 <readall_inputs+0x34c>)
 80014d6:	7813      	ldrb	r3, [r2, #0]
 80014d8:	f361 1345 	bfi	r3, r1, #5, #1
 80014dc:	7013      	strb	r3, [r2, #0]
	system_in.ECON = HAL_GPIO_ReadPin(ECON_GPIO_Port, ECON_Pin);								// Eingang Klima
 80014de:	2102      	movs	r1, #2
 80014e0:	48a6      	ldr	r0, [pc, #664]	; (800177c <readall_inputs+0x350>)
 80014e2:	f004 fb51 	bl	8005b88 <HAL_GPIO_ReadPin>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	b2d9      	uxtb	r1, r3
 80014ee:	4aa2      	ldr	r2, [pc, #648]	; (8001778 <readall_inputs+0x34c>)
 80014f0:	7813      	ldrb	r3, [r2, #0]
 80014f2:	f361 1386 	bfi	r3, r1, #6, #1
 80014f6:	7013      	strb	r3, [r2, #0]
	system_in.Anlasser = HAL_GPIO_ReadPin(ANLASSER_GPIO_Port, ANLASSER_Pin);					// Eingang Zuendschloss, Motor starten
 80014f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014fc:	48a0      	ldr	r0, [pc, #640]	; (8001780 <readall_inputs+0x354>)
 80014fe:	f004 fb43 	bl	8005b88 <HAL_GPIO_ReadPin>
 8001502:	4603      	mov	r3, r0
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	b2d9      	uxtb	r1, r3
 800150a:	4a9b      	ldr	r2, [pc, #620]	; (8001778 <readall_inputs+0x34c>)
 800150c:	7813      	ldrb	r3, [r2, #0]
 800150e:	f361 13c7 	bfi	r3, r1, #7, #1
 8001512:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8001514:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001518:	4899      	ldr	r0, [pc, #612]	; (8001780 <readall_inputs+0x354>)
 800151a:	f004 fb35 	bl	8005b88 <HAL_GPIO_ReadPin>
 800151e:	4603      	mov	r3, r0
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	b2d9      	uxtb	r1, r3
 8001526:	4a94      	ldr	r2, [pc, #592]	; (8001778 <readall_inputs+0x34c>)
 8001528:	7853      	ldrb	r3, [r2, #1]
 800152a:	f361 0300 	bfi	r3, r1, #0, #1
 800152e:	7053      	strb	r3, [r2, #1]
	system_in.DCDC_Inst = HAL_GPIO_ReadPin(DCDC_INSTRUCTION_GPIO_Port, DCDC_INSTRUCTION_Pin);	// DCDC Wandler funktioniert einwandfrei
 8001530:	2101      	movs	r1, #1
 8001532:	4894      	ldr	r0, [pc, #592]	; (8001784 <readall_inputs+0x358>)
 8001534:	f004 fb28 	bl	8005b88 <HAL_GPIO_ReadPin>
 8001538:	4603      	mov	r3, r0
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	b2d9      	uxtb	r1, r3
 8001540:	4a8d      	ldr	r2, [pc, #564]	; (8001778 <readall_inputs+0x34c>)
 8001542:	7853      	ldrb	r3, [r2, #1]
 8001544:	f361 0341 	bfi	r3, r1, #1, #1
 8001548:	7053      	strb	r3, [r2, #1]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 800154a:	2101      	movs	r1, #1
 800154c:	488b      	ldr	r0, [pc, #556]	; (800177c <readall_inputs+0x350>)
 800154e:	f004 fb1b 	bl	8005b88 <HAL_GPIO_ReadPin>
 8001552:	4603      	mov	r3, r0
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	b2d9      	uxtb	r1, r3
 800155a:	4a87      	ldr	r2, [pc, #540]	; (8001778 <readall_inputs+0x34c>)
 800155c:	7853      	ldrb	r3, [r2, #1]
 800155e:	f361 0382 	bfi	r3, r1, #2, #1
 8001562:	7053      	strb	r3, [r2, #1]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8001564:	2140      	movs	r1, #64	; 0x40
 8001566:	4883      	ldr	r0, [pc, #524]	; (8001774 <readall_inputs+0x348>)
 8001568:	f004 fb0e 	bl	8005b88 <HAL_GPIO_ReadPin>
 800156c:	4603      	mov	r3, r0
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	b2d9      	uxtb	r1, r3
 8001574:	4a80      	ldr	r2, [pc, #512]	; (8001778 <readall_inputs+0x34c>)
 8001576:	7853      	ldrb	r3, [r2, #1]
 8001578:	f361 03c3 	bfi	r3, r1, #3, #1
 800157c:	7053      	strb	r3, [r2, #1]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 800157e:	2101      	movs	r1, #1
 8001580:	4881      	ldr	r0, [pc, #516]	; (8001788 <readall_inputs+0x35c>)
 8001582:	f004 fb01 	bl	8005b88 <HAL_GPIO_ReadPin>
 8001586:	4603      	mov	r3, r0
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	b2d9      	uxtb	r1, r3
 800158e:	4a7a      	ldr	r2, [pc, #488]	; (8001778 <readall_inputs+0x34c>)
 8001590:	7853      	ldrb	r3, [r2, #1]
 8001592:	f361 1304 	bfi	r3, r1, #4, #1
 8001596:	7053      	strb	r3, [r2, #1]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8001598:	2104      	movs	r1, #4
 800159a:	487b      	ldr	r0, [pc, #492]	; (8001788 <readall_inputs+0x35c>)
 800159c:	f004 faf4 	bl	8005b88 <HAL_GPIO_ReadPin>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	b2d9      	uxtb	r1, r3
 80015a8:	4a73      	ldr	r2, [pc, #460]	; (8001778 <readall_inputs+0x34c>)
 80015aa:	7853      	ldrb	r3, [r2, #1]
 80015ac:	f361 1345 	bfi	r3, r1, #5, #1
 80015b0:	7053      	strb	r3, [r2, #1]
//	system_in.Bremsdruck_NO = HAL_GPIO_ReadPin(Bremsdruck_NO_GPIO_Port, Bremsdruck_NO_Pin);		// Bremsdruck nicht zu hoch
//	system_in.Bremsdruck_NC = HAL_GPIO_ReadPin(Bremsdruck_NC_GPIO_Port, Bremsdruck_NC_Pin);		// Bremsdruck zu hoch

	// SDC-Eingaenge einlesen
	sdc_in.EmergencyRun = HAL_GPIO_ReadPin(EMERGENCY_RUN_GPIO_Port, EMERGENCY_RUN_Pin);			// Emergency Run, Akku
 80015b2:	2102      	movs	r1, #2
 80015b4:	4874      	ldr	r0, [pc, #464]	; (8001788 <readall_inputs+0x35c>)
 80015b6:	f004 fae7 	bl	8005b88 <HAL_GPIO_ReadPin>
 80015ba:	4603      	mov	r3, r0
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	b2d9      	uxtb	r1, r3
 80015c2:	4a72      	ldr	r2, [pc, #456]	; (800178c <readall_inputs+0x360>)
 80015c4:	7813      	ldrb	r3, [r2, #0]
 80015c6:	f361 0300 	bfi	r3, r1, #0, #1
 80015ca:	7013      	strb	r3, [r2, #0]
	sdc_in.SDC0 = HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin);						// Shutdown-Circuit, OK
 80015cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015d0:	4868      	ldr	r0, [pc, #416]	; (8001774 <readall_inputs+0x348>)
 80015d2:	f004 fad9 	bl	8005b88 <HAL_GPIO_ReadPin>
 80015d6:	4603      	mov	r3, r0
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	b2d9      	uxtb	r1, r3
 80015de:	4a6b      	ldr	r2, [pc, #428]	; (800178c <readall_inputs+0x360>)
 80015e0:	7813      	ldrb	r3, [r2, #0]
 80015e2:	f361 0341 	bfi	r3, r1, #1, #1
 80015e6:	7013      	strb	r3, [r2, #0]
	sdc_in.Akku1SDC = HAL_GPIO_ReadPin(SENSE_SDC_AKKU_GPIO_Port, SENSE_SDC_AKKU_Pin);			// Shutdown-Circuit Akku, OK
 80015e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ec:	4861      	ldr	r0, [pc, #388]	; (8001774 <readall_inputs+0x348>)
 80015ee:	f004 facb 	bl	8005b88 <HAL_GPIO_ReadPin>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	b2d9      	uxtb	r1, r3
 80015fa:	4a64      	ldr	r2, [pc, #400]	; (800178c <readall_inputs+0x360>)
 80015fc:	7813      	ldrb	r3, [r2, #0]
 80015fe:	f361 0382 	bfi	r3, r1, #2, #1
 8001602:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8001604:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001608:	4861      	ldr	r0, [pc, #388]	; (8001790 <readall_inputs+0x364>)
 800160a:	f004 fabd 	bl	8005b88 <HAL_GPIO_ReadPin>
 800160e:	4603      	mov	r3, r0
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	b2d9      	uxtb	r1, r3
 8001616:	4a5d      	ldr	r2, [pc, #372]	; (800178c <readall_inputs+0x360>)
 8001618:	7813      	ldrb	r3, [r2, #0]
 800161a:	f361 03c3 	bfi	r3, r1, #3, #1
 800161e:	7013      	strb	r3, [r2, #0]
	sdc_in.DCDC_Fault = HAL_GPIO_ReadPin(DCDC_FAULT_GPIO_Port, DCDC_FAULT_Pin);					// DCDC Wandler funktioniert nicht richtig
 8001620:	2102      	movs	r1, #2
 8001622:	4858      	ldr	r0, [pc, #352]	; (8001784 <readall_inputs+0x358>)
 8001624:	f004 fab0 	bl	8005b88 <HAL_GPIO_ReadPin>
 8001628:	4603      	mov	r3, r0
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	b2d9      	uxtb	r1, r3
 8001630:	4a56      	ldr	r2, [pc, #344]	; (800178c <readall_inputs+0x360>)
 8001632:	7813      	ldrb	r3, [r2, #0]
 8001634:	f361 1304 	bfi	r3, r1, #4, #1
 8001638:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.ASR1 = HAL_GPIO_ReadPin(ASR_IN1_GPIO_Port, ASR_IN1_Pin);							// ASR Eingang Mittelkonsole
 800163a:	2110      	movs	r1, #16
 800163c:	4851      	ldr	r0, [pc, #324]	; (8001784 <readall_inputs+0x358>)
 800163e:	f004 faa3 	bl	8005b88 <HAL_GPIO_ReadPin>
 8001642:	4603      	mov	r3, r0
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	b2d9      	uxtb	r1, r3
 800164a:	4a52      	ldr	r2, [pc, #328]	; (8001794 <readall_inputs+0x368>)
 800164c:	7813      	ldrb	r3, [r2, #0]
 800164e:	f361 0300 	bfi	r3, r1, #0, #1
 8001652:	7013      	strb	r3, [r2, #0]
	komfort_in.ASR2 = HAL_GPIO_ReadPin(ASR_IN2_GPIO_Port, ASR_IN2_Pin);							// ASR Eingang Mittelkonsole
 8001654:	2110      	movs	r1, #16
 8001656:	484a      	ldr	r0, [pc, #296]	; (8001780 <readall_inputs+0x354>)
 8001658:	f004 fa96 	bl	8005b88 <HAL_GPIO_ReadPin>
 800165c:	4603      	mov	r3, r0
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	b2d9      	uxtb	r1, r3
 8001664:	4a4b      	ldr	r2, [pc, #300]	; (8001794 <readall_inputs+0x368>)
 8001666:	7813      	ldrb	r3, [r2, #0]
 8001668:	f361 0341 	bfi	r3, r1, #1, #1
 800166c:	7013      	strb	r3, [r2, #0]
	komfort_in.ECO = HAL_GPIO_ReadPin(ECO_GPIO_Port, ECO_Pin);									// ECO Eingang Mittelkonsole
 800166e:	2108      	movs	r1, #8
 8001670:	4840      	ldr	r0, [pc, #256]	; (8001774 <readall_inputs+0x348>)
 8001672:	f004 fa89 	bl	8005b88 <HAL_GPIO_ReadPin>
 8001676:	4603      	mov	r3, r0
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	b2d9      	uxtb	r1, r3
 800167e:	4a45      	ldr	r2, [pc, #276]	; (8001794 <readall_inputs+0x368>)
 8001680:	7813      	ldrb	r3, [r2, #0]
 8001682:	f361 0382 	bfi	r3, r1, #2, #1
 8001686:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Rst_In = HAL_GPIO_ReadPin(BC_RESET_IN_GPIO_Port, BC_RESET_IN_Pin);			// Boardcomputer Reset Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8001688:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800168c:	483d      	ldr	r0, [pc, #244]	; (8001784 <readall_inputs+0x358>)
 800168e:	f004 fa7b 	bl	8005b88 <HAL_GPIO_ReadPin>
 8001692:	4603      	mov	r3, r0
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	b2d9      	uxtb	r1, r3
 800169a:	4a3e      	ldr	r2, [pc, #248]	; (8001794 <readall_inputs+0x368>)
 800169c:	7813      	ldrb	r3, [r2, #0]
 800169e:	f361 03c3 	bfi	r3, r1, #3, #1
 80016a2:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Up_In = HAL_GPIO_ReadPin(BC_UP_IN_GPIO_Port, BC_UP_IN_Pin);					// Boardcomputer Rauf Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 80016a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016a8:	4837      	ldr	r0, [pc, #220]	; (8001788 <readall_inputs+0x35c>)
 80016aa:	f004 fa6d 	bl	8005b88 <HAL_GPIO_ReadPin>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	b2d9      	uxtb	r1, r3
 80016b6:	4a37      	ldr	r2, [pc, #220]	; (8001794 <readall_inputs+0x368>)
 80016b8:	7813      	ldrb	r3, [r2, #0]
 80016ba:	f361 1304 	bfi	r3, r1, #4, #1
 80016be:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Down_In = HAL_GPIO_ReadPin(BC_DOWN_IN_GPIO_Port, BC_DOWN_IN_Pin);				// Boardcomputer Runter Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 80016c0:	2110      	movs	r1, #16
 80016c2:	482c      	ldr	r0, [pc, #176]	; (8001774 <readall_inputs+0x348>)
 80016c4:	f004 fa60 	bl	8005b88 <HAL_GPIO_ReadPin>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	b2d9      	uxtb	r1, r3
 80016d0:	4a30      	ldr	r2, [pc, #192]	; (8001794 <readall_inputs+0x368>)
 80016d2:	7813      	ldrb	r3, [r2, #0]
 80016d4:	f361 1345 	bfi	r3, r1, #5, #1
 80016d8:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn1 = HAL_GPIO_ReadPin(BAMOCAR_IN1_GPIO_Port, BAMOCAR_IN1_Pin);				// Eingang Bamocar 1
 80016da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016de:	4828      	ldr	r0, [pc, #160]	; (8001780 <readall_inputs+0x354>)
 80016e0:	f004 fa52 	bl	8005b88 <HAL_GPIO_ReadPin>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	b2d9      	uxtb	r1, r3
 80016ec:	4a29      	ldr	r2, [pc, #164]	; (8001794 <readall_inputs+0x368>)
 80016ee:	7813      	ldrb	r3, [r2, #0]
 80016f0:	f361 1386 	bfi	r3, r1, #6, #1
 80016f4:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn2 = HAL_GPIO_ReadPin(BAMOCAR_IN2_GPIO_Port, BAMOCAR_IN2_Pin);				// Eingang Bamocar 2
 80016f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016fa:	4825      	ldr	r0, [pc, #148]	; (8001790 <readall_inputs+0x364>)
 80016fc:	f004 fa44 	bl	8005b88 <HAL_GPIO_ReadPin>
 8001700:	4603      	mov	r3, r0
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	b2d9      	uxtb	r1, r3
 8001708:	4a22      	ldr	r2, [pc, #136]	; (8001794 <readall_inputs+0x368>)
 800170a:	7813      	ldrb	r3, [r2, #0]
 800170c:	f361 13c7 	bfi	r3, r1, #7, #1
 8001710:	7013      	strb	r3, [r2, #0]
	komfort_in.Enter = HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin);							// Encoder Taster Enter Eingang Mittelconsole
 8001712:	2180      	movs	r1, #128	; 0x80
 8001714:	4820      	ldr	r0, [pc, #128]	; (8001798 <readall_inputs+0x36c>)
 8001716:	f004 fa37 	bl	8005b88 <HAL_GPIO_ReadPin>
 800171a:	4603      	mov	r3, r0
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	b2d9      	uxtb	r1, r3
 8001722:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <readall_inputs+0x368>)
 8001724:	7853      	ldrb	r3, [r2, #1]
 8001726:	f361 0300 	bfi	r3, r1, #0, #1
 800172a:	7053      	strb	r3, [r2, #1]
	komfort_in.OutA = HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTA_Pin);								// Encoder OUTA Eingang Mittelconsole
 800172c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001730:	4815      	ldr	r0, [pc, #84]	; (8001788 <readall_inputs+0x35c>)
 8001732:	f004 fa29 	bl	8005b88 <HAL_GPIO_ReadPin>
 8001736:	4603      	mov	r3, r0
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	b2d9      	uxtb	r1, r3
 800173e:	4a15      	ldr	r2, [pc, #84]	; (8001794 <readall_inputs+0x368>)
 8001740:	7853      	ldrb	r3, [r2, #1]
 8001742:	f361 0341 	bfi	r3, r1, #1, #1
 8001746:	7053      	strb	r3, [r2, #1]
	komfort_in.OutB = HAL_GPIO_ReadPin(OUTB_GPIO_Port, OUTB_Pin);								// Encoder OUTB Eingang Mittelconsole
 8001748:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800174c:	480e      	ldr	r0, [pc, #56]	; (8001788 <readall_inputs+0x35c>)
 800174e:	f004 fa1b 	bl	8005b88 <HAL_GPIO_ReadPin>
 8001752:	4603      	mov	r3, r0
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	b2d9      	uxtb	r1, r3
 800175a:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <readall_inputs+0x368>)
 800175c:	7853      	ldrb	r3, [r2, #1]
 800175e:	f361 0382 	bfi	r3, r1, #2, #1
 8001762:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA1 = HAL_GPIO_ReadPin(GRA1_GPIO_Port, GRA1_Pin);								// Tempomat 1 Eingang
 8001764:	2120      	movs	r1, #32
 8001766:	4807      	ldr	r0, [pc, #28]	; (8001784 <readall_inputs+0x358>)
 8001768:	f004 fa0e 	bl	8005b88 <HAL_GPIO_ReadPin>
 800176c:	4603      	mov	r3, r0
 800176e:	e015      	b.n	800179c <readall_inputs+0x370>
 8001770:	08009088 	.word	0x08009088
 8001774:	40021000 	.word	0x40021000
 8001778:	2000003c 	.word	0x2000003c
 800177c:	40021400 	.word	0x40021400
 8001780:	40020c00 	.word	0x40020c00
 8001784:	40021800 	.word	0x40021800
 8001788:	40020000 	.word	0x40020000
 800178c:	20000040 	.word	0x20000040
 8001790:	40020400 	.word	0x40020400
 8001794:	20000044 	.word	0x20000044
 8001798:	40020800 	.word	0x40020800
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	b2d9      	uxtb	r1, r3
 80017a2:	4a30      	ldr	r2, [pc, #192]	; (8001864 <readall_inputs+0x438>)
 80017a4:	7853      	ldrb	r3, [r2, #1]
 80017a6:	f361 03c3 	bfi	r3, r1, #3, #1
 80017aa:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA2 = HAL_GPIO_ReadPin(GRA2_GPIO_Port, GRA2_Pin);								// Tempomat 2 Eingang
 80017ac:	2140      	movs	r1, #64	; 0x40
 80017ae:	482e      	ldr	r0, [pc, #184]	; (8001868 <readall_inputs+0x43c>)
 80017b0:	f004 f9ea 	bl	8005b88 <HAL_GPIO_ReadPin>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	b2d9      	uxtb	r1, r3
 80017bc:	4a29      	ldr	r2, [pc, #164]	; (8001864 <readall_inputs+0x438>)
 80017be:	7853      	ldrb	r3, [r2, #1]
 80017c0:	f361 1304 	bfi	r3, r1, #4, #1
 80017c4:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA3 = HAL_GPIO_ReadPin(GRA3_GPIO_Port, GRA3_Pin);								// Tempomat 3 Eingang
 80017c6:	2180      	movs	r1, #128	; 0x80
 80017c8:	4827      	ldr	r0, [pc, #156]	; (8001868 <readall_inputs+0x43c>)
 80017ca:	f004 f9dd 	bl	8005b88 <HAL_GPIO_ReadPin>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	b2d9      	uxtb	r1, r3
 80017d6:	4a23      	ldr	r2, [pc, #140]	; (8001864 <readall_inputs+0x438>)
 80017d8:	7853      	ldrb	r3, [r2, #1]
 80017da:	f361 1345 	bfi	r3, r1, #5, #1
 80017de:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA4 = HAL_GPIO_ReadPin(GRA4_GPIO_Port, GRA4_Pin);								// Tempomat 4 Eingang
 80017e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e4:	4820      	ldr	r0, [pc, #128]	; (8001868 <readall_inputs+0x43c>)
 80017e6:	f004 f9cf 	bl	8005b88 <HAL_GPIO_ReadPin>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	b2d9      	uxtb	r1, r3
 80017f2:	4a1c      	ldr	r2, [pc, #112]	; (8001864 <readall_inputs+0x438>)
 80017f4:	7853      	ldrb	r3, [r2, #1]
 80017f6:	f361 1386 	bfi	r3, r1, #6, #1
 80017fa:	7053      	strb	r3, [r2, #1]
	komfort_in.Durchfluss = HAL_GPIO_ReadPin(DURCHFLUSS_GPIO_Port, DURCHFLUSS_Pin);				// Durchflusssensor Eingang
 80017fc:	2120      	movs	r1, #32
 80017fe:	481b      	ldr	r0, [pc, #108]	; (800186c <readall_inputs+0x440>)
 8001800:	f004 f9c2 	bl	8005b88 <HAL_GPIO_ReadPin>
 8001804:	4603      	mov	r3, r0
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	b2d9      	uxtb	r1, r3
 800180c:	4a15      	ldr	r2, [pc, #84]	; (8001864 <readall_inputs+0x438>)
 800180e:	7853      	ldrb	r3, [r2, #1]
 8001810:	f361 13c7 	bfi	r3, r1, #7, #1
 8001814:	7053      	strb	r3, [r2, #1]

#ifdef DEBUG_INPUT
	ITM_SendString("Eingaenge gelesen.\n");
 8001816:	4816      	ldr	r0, [pc, #88]	; (8001870 <readall_inputs+0x444>)
 8001818:	f7ff fdcc 	bl	80013b4 <ITM_SendString>
	ITM_SendString("system_in:\t");
 800181c:	4815      	ldr	r0, [pc, #84]	; (8001874 <readall_inputs+0x448>)
 800181e:	f7ff fdc9 	bl	80013b4 <ITM_SendString>
	ITM_SendNumber(system_in.systeminput);
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <readall_inputs+0x44c>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fdce 	bl	80013c8 <ITM_SendNumber>
	ITM_SendChar('\n');
 800182c:	200a      	movs	r0, #10
 800182e:	f7ff fdd5 	bl	80013dc <ITM_SendChar>
	ITM_SendString("sdc_in:\t");
 8001832:	4812      	ldr	r0, [pc, #72]	; (800187c <readall_inputs+0x450>)
 8001834:	f7ff fdbe 	bl	80013b4 <ITM_SendString>
	ITM_SendNumber(sdc_in.sdcinput);
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <readall_inputs+0x454>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fdc3 	bl	80013c8 <ITM_SendNumber>
	ITM_SendChar('\n');
 8001842:	200a      	movs	r0, #10
 8001844:	f7ff fdca 	bl	80013dc <ITM_SendChar>
	ITM_SendString("komfort_in:\t");
 8001848:	480e      	ldr	r0, [pc, #56]	; (8001884 <readall_inputs+0x458>)
 800184a:	f7ff fdb3 	bl	80013b4 <ITM_SendString>
	ITM_SendNumber(komfort_in.komfortinput);
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <readall_inputs+0x438>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fdb8 	bl	80013c8 <ITM_SendNumber>
	ITM_SendChar('\n');
 8001858:	200a      	movs	r0, #10
 800185a:	f7ff fdbf 	bl	80013dc <ITM_SendChar>
#endif
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000044 	.word	0x20000044
 8001868:	40021800 	.word	0x40021800
 800186c:	40021000 	.word	0x40021000
 8001870:	0800909c 	.word	0x0800909c
 8001874:	080090b0 	.word	0x080090b0
 8001878:	2000003c 	.word	0x2000003c
 800187c:	080090bc 	.word	0x080090bc
 8001880:	20000040 	.word	0x20000040
 8001884:	080090c8 	.word	0x080090c8

08001888 <readAnlasser>:
//----------------------------------------------------------------------

// Anlasser einlesen, Wert in Variable speichern, bis KL15 abfaellt
//----------------------------------------------------------------------
void readAnlasser(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
	if (system_in.Anlasser != 1)
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <readAnlasser+0x50>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d105      	bne.n	80018a6 <readAnlasser+0x1e>
	{
		sdc_in.Anlasser = 1;
 800189a:	4a10      	ldr	r2, [pc, #64]	; (80018dc <readAnlasser+0x54>)
 800189c:	7813      	ldrb	r3, [r2, #0]
 800189e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a2:	7013      	strb	r3, [r2, #0]
	}
	else if ((sdc_in.Anlasser == 1) && (system_in.KL15 == 1))
	{
		sdc_in.Anlasser = 0;
	}
}
 80018a4:	e012      	b.n	80018cc <readAnlasser+0x44>
	else if ((sdc_in.Anlasser == 1) && (system_in.KL15 == 1))
 80018a6:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <readAnlasser+0x54>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00b      	beq.n	80018cc <readAnlasser+0x44>
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <readAnlasser+0x50>)
 80018b6:	785b      	ldrb	r3, [r3, #1]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d004      	beq.n	80018cc <readAnlasser+0x44>
		sdc_in.Anlasser = 0;
 80018c2:	4a06      	ldr	r2, [pc, #24]	; (80018dc <readAnlasser+0x54>)
 80018c4:	7813      	ldrb	r3, [r2, #0]
 80018c6:	f36f 1386 	bfc	r3, #6, #1
 80018ca:	7013      	strb	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	2000003c 	.word	0x2000003c
 80018dc:	20000040 	.word	0x20000040

080018e0 <millis>:
//----------------------------------------------------------------------
#include "millis.h"
//----------------------------------------------------------------------

uint32_t millis(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80018e4:	f002 fadc 	bl	8003ea0 <HAL_GetTick>
 80018e8:	4603      	mov	r3, r0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	bd80      	pop	{r7, pc}

080018ee <ITM_SendChar>:
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80018f6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80018fa:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d013      	beq.n	800192e <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001906:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800190a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800190e:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00b      	beq.n	800192e <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 8001916:	e000      	b.n	800191a <ITM_SendChar+0x2c>
      __NOP();
 8001918:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800191a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f9      	beq.n	8001918 <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001924:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	701a      	strb	r2, [r3, #0]
  return (ch);
 800192e:	687b      	ldr	r3, [r7, #4]
}
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <writeall_outputs>:
//----------------------------------------------------------------------

// Schreibe alle Ausgaenge auf default Werte
//----------------------------------------------------------------------
void writeall_outputs(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
	// Schreibe System Ausgaenge
	HAL_GPIO_WritePin(J317_GPIO_Port, J317_Pin, system_out.J317);									// Hauptrelais KL15
 8001940:	4bc5      	ldr	r3, [pc, #788]	; (8001c58 <writeall_outputs+0x31c>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001948:	b2db      	uxtb	r3, r3
 800194a:	461a      	mov	r2, r3
 800194c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001950:	48c2      	ldr	r0, [pc, #776]	; (8001c5c <writeall_outputs+0x320>)
 8001952:	f004 f931 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F54_GPIO_Port, F54_Pin, system_out.F54);										// Thermoschalter Kuehlmittel, Luefter
 8001956:	4bc0      	ldr	r3, [pc, #768]	; (8001c58 <writeall_outputs+0x31c>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800195e:	b2db      	uxtb	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001966:	48be      	ldr	r0, [pc, #760]	; (8001c60 <writeall_outputs+0x324>)
 8001968:	f004 f926 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F18_GPIO_Port, F18_Pin, system_out.F18);										// Thermoschalter Kuehlmittel, Luefter
 800196c:	4bba      	ldr	r3, [pc, #744]	; (8001c58 <writeall_outputs+0x31c>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001974:	b2db      	uxtb	r3, r3
 8001976:	461a      	mov	r2, r3
 8001978:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800197c:	48b8      	ldr	r0, [pc, #736]	; (8001c60 <writeall_outputs+0x324>)
 800197e:	f004 f91b 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DCDC_ENABLE_GPIO_Port, DCDC_ENABLE_Pin, system_out.DCDC_Enable);				// DCDC-Wandler
 8001982:	4bb5      	ldr	r3, [pc, #724]	; (8001c58 <writeall_outputs+0x31c>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800198a:	b2db      	uxtb	r3, r3
 800198c:	461a      	mov	r2, r3
 800198e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001992:	48b2      	ldr	r0, [pc, #712]	; (8001c5c <writeall_outputs+0x320>)
 8001994:	f004 f910 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GLUEHKERZEN_GPIO_Port, GLUEHKERZEN_Pin, system_out.Gluehkerzen);				// Gluehkerzenrelais J52
 8001998:	4baf      	ldr	r3, [pc, #700]	; (8001c58 <writeall_outputs+0x31c>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	461a      	mov	r2, r3
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	48af      	ldr	r0, [pc, #700]	; (8001c64 <writeall_outputs+0x328>)
 80019a8:	f004 f906 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, system_out.MotorSDC);				// Shutdown-Circuit Motorsteuergeraet
 80019ac:	4baa      	ldr	r3, [pc, #680]	; (8001c58 <writeall_outputs+0x31c>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	461a      	mov	r2, r3
 80019b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019bc:	48a9      	ldr	r0, [pc, #676]	; (8001c64 <writeall_outputs+0x328>)
 80019be:	f004 f8fb 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KLIMA_OUT_GPIO_Port, KLIMA_OUT_Pin, system_out.Klima);						// Klimaanlage
 80019c2:	4ba5      	ldr	r3, [pc, #660]	; (8001c58 <writeall_outputs+0x31c>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019d2:	48a3      	ldr	r0, [pc, #652]	; (8001c60 <writeall_outputs+0x324>)
 80019d4:	f004 f8f0 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, system_out.Power_On);						// Selbsthaltung DCDC-Wandler Motorsteuergeraet
 80019d8:	4b9f      	ldr	r3, [pc, #636]	; (8001c58 <writeall_outputs+0x31c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019e8:	489f      	ldr	r0, [pc, #636]	; (8001c68 <writeall_outputs+0x32c>)
 80019ea:	f004 f8e5 	bl	8005bb8 <HAL_GPIO_WritePin>

	// Schreibe Hochstromfaehige Ausgaenge
	HAL_GPIO_WritePin(DIGITAL1_GPIO_Port, DIGITAL1_Pin, highcurrent_out.Digital1);					// Digitaler Ausgang 1
 80019ee:	4b9f      	ldr	r3, [pc, #636]	; (8001c6c <writeall_outputs+0x330>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	461a      	mov	r2, r3
 80019fa:	2104      	movs	r1, #4
 80019fc:	4899      	ldr	r0, [pc, #612]	; (8001c64 <writeall_outputs+0x328>)
 80019fe:	f004 f8db 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIGITAL2_GPIO_Port, DIGITAL2_Pin, highcurrent_out.Digital2);					// Digitaler Ausgang 2
 8001a02:	4b9a      	ldr	r3, [pc, #616]	; (8001c6c <writeall_outputs+0x330>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	2102      	movs	r1, #2
 8001a10:	4894      	ldr	r0, [pc, #592]	; (8001c64 <writeall_outputs+0x328>)
 8001a12:	f004 f8d1 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PUMPE_BREMSE_GPIO_Port, PUMPE_BREMSE_Pin, highcurrent_out.Pumpe_Bremse);		// Ausgang Unterdruckpumpe Bremse
 8001a16:	4b95      	ldr	r3, [pc, #596]	; (8001c6c <writeall_outputs+0x330>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	461a      	mov	r2, r3
 8001a22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a26:	4892      	ldr	r0, [pc, #584]	; (8001c70 <writeall_outputs+0x334>)
 8001a28:	f004 f8c6 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PUMPE_KUEHLUNG_GPIO_Port, PUMPE_KUEHLUNG_Pin, highcurrent_out.Pumpe_Kuhlung);	// Ausgang Pumpe Kuehlkreislauf
 8001a2c:	4b8f      	ldr	r3, [pc, #572]	; (8001c6c <writeall_outputs+0x330>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	461a      	mov	r2, r3
 8001a38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a3c:	488c      	ldr	r0, [pc, #560]	; (8001c70 <writeall_outputs+0x334>)
 8001a3e:	f004 f8bb 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FAN1_GPIO_Port, FAN1_Pin, highcurrent_out.Fan1);								// Ausgang Luefter Kuehlergrill 1
 8001a42:	4b8a      	ldr	r3, [pc, #552]	; (8001c6c <writeall_outputs+0x330>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a52:	4887      	ldr	r0, [pc, #540]	; (8001c70 <writeall_outputs+0x334>)
 8001a54:	f004 f8b0 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FAN2_GPIO_Port, FAN2_Pin, highcurrent_out.Fan2);								// Ausgang Luefter Kuehlergrill 2
 8001a58:	4b84      	ldr	r3, [pc, #528]	; (8001c6c <writeall_outputs+0x330>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	461a      	mov	r2, r3
 8001a64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a68:	4881      	ldr	r0, [pc, #516]	; (8001c70 <writeall_outputs+0x334>)
 8001a6a:	f004 f8a5 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HEATER1_GPIO_Port, HEATER1_Pin, highcurrent_out.Heater1);						// Ausgang Heizung 1
 8001a6e:	4b7f      	ldr	r3, [pc, #508]	; (8001c6c <writeall_outputs+0x330>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	4879      	ldr	r0, [pc, #484]	; (8001c64 <writeall_outputs+0x328>)
 8001a7e:	f004 f89b 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HEATER2_GPIO_Port, HEATER2_Pin, highcurrent_out.Heater2);						// Ausgang Heizung 2
 8001a82:	4b7a      	ldr	r3, [pc, #488]	; (8001c6c <writeall_outputs+0x330>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	2110      	movs	r1, #16
 8001a90:	4873      	ldr	r0, [pc, #460]	; (8001c60 <writeall_outputs+0x324>)
 8001a92:	f004 f891 	bl	8005bb8 <HAL_GPIO_WritePin>

	// Schreibe Leuchtdioden Ausgaenge
	HAL_GPIO_WritePin(BREMSLICHT_GPIO_Port, BREMSLICHT_Pin, leuchten_out.Bremslicht);				// Bremslichtrelais
 8001a96:	4b77      	ldr	r3, [pc, #476]	; (8001c74 <writeall_outputs+0x338>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aa6:	4874      	ldr	r0, [pc, #464]	; (8001c78 <writeall_outputs+0x33c>)
 8001aa8:	f004 f886 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RUECKFAHRLICHT_GPIO_Port, RUECKFAHRLICHT_Pin, leuchten_out.Rueckfahrlicht);	// Rueckfahrlichtrelais
 8001aac:	4b71      	ldr	r3, [pc, #452]	; (8001c74 <writeall_outputs+0x338>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001abc:	486e      	ldr	r0, [pc, #440]	; (8001c78 <writeall_outputs+0x33c>)
 8001abe:	f004 f87b 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GENERATOR_LED_GPIO_Port, GENERATOR_LED_Pin, leuchten_out.Generator);			// Generator LED Kombiinstrument
 8001ac2:	4b6c      	ldr	r3, [pc, #432]	; (8001c74 <writeall_outputs+0x338>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	461a      	mov	r2, r3
 8001ace:	2108      	movs	r1, #8
 8001ad0:	4867      	ldr	r0, [pc, #412]	; (8001c70 <writeall_outputs+0x334>)
 8001ad2:	f004 f871 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, leuchten_out.Buzzer);							// Buzzer
 8001ad6:	4b67      	ldr	r3, [pc, #412]	; (8001c74 <writeall_outputs+0x338>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	2104      	movs	r1, #4
 8001ae4:	4862      	ldr	r0, [pc, #392]	; (8001c70 <writeall_outputs+0x334>)
 8001ae6:	f004 f867 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, leuchten_out.Rueckwarn);			// Warnung Rueckfahrlicht Kombiinstrument
 8001aea:	4b62      	ldr	r3, [pc, #392]	; (8001c74 <writeall_outputs+0x338>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	461a      	mov	r2, r3
 8001af6:	2180      	movs	r1, #128	; 0x80
 8001af8:	485f      	ldr	r0, [pc, #380]	; (8001c78 <writeall_outputs+0x33c>)
 8001afa:	f004 f85d 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LADELEUCHTE_GPIO_Port, LADELEUCHTE_Pin, leuchten_out.Ladeleuchte);			// ECO LED Kombiinstrument
 8001afe:	4b5d      	ldr	r3, [pc, #372]	; (8001c74 <writeall_outputs+0x338>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	2108      	movs	r1, #8
 8001b0c:	485a      	ldr	r0, [pc, #360]	; (8001c78 <writeall_outputs+0x33c>)
 8001b0e:	f004 f853 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WISCHWARNUNG_GPIO_Port, WISCHWARNUNG_Pin, leuchten_out.Wischwarn);			// Warnung Wischwasser Kombiinstument
 8001b12:	4b58      	ldr	r3, [pc, #352]	; (8001c74 <writeall_outputs+0x338>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b22:	4853      	ldr	r0, [pc, #332]	; (8001c70 <writeall_outputs+0x334>)
 8001b24:	f004 f848 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BREMSWARNUNG_GPIO_Port, BREMSWARNUNG_Pin, leuchten_out.Bremswarn);			// Warnung Bremse Kombiinstrument
 8001b28:	4b52      	ldr	r3, [pc, #328]	; (8001c74 <writeall_outputs+0x338>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	461a      	mov	r2, r3
 8001b34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b38:	484d      	ldr	r0, [pc, #308]	; (8001c70 <writeall_outputs+0x334>)
 8001b3a:	f004 f83d 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OELDRUCK_GPIO_Port, OELDRUCK_Pin, leuchten_out.Oeldruck);						// Warnung Oelstand Kombiinstument
 8001b3e:	4b4d      	ldr	r3, [pc, #308]	; (8001c74 <writeall_outputs+0x338>)
 8001b40:	785b      	ldrb	r3, [r3, #1]
 8001b42:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	461a      	mov	r2, r3
 8001b4a:	2104      	movs	r1, #4
 8001b4c:	4843      	ldr	r0, [pc, #268]	; (8001c5c <writeall_outputs+0x320>)
 8001b4e:	f004 f833 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NIVEAU_OUT_GPIO_Port, NIVEAU_OUT_Pin, leuchten_out.Niveau);					// Niveauregulierung LED Kombiinstrument
 8001b52:	4b48      	ldr	r3, [pc, #288]	; (8001c74 <writeall_outputs+0x338>)
 8001b54:	785b      	ldrb	r3, [r3, #1]
 8001b56:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b62:	4845      	ldr	r0, [pc, #276]	; (8001c78 <writeall_outputs+0x33c>)
 8001b64:	f004 f828 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ANHAENGER_GPIO_Port, ANHAENGER_Pin, leuchten_out.Anhaenger);					// Anhaenger LED Kombiinstrument
 8001b68:	4b42      	ldr	r3, [pc, #264]	; (8001c74 <writeall_outputs+0x338>)
 8001b6a:	785b      	ldrb	r3, [r3, #1]
 8001b6c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	461a      	mov	r2, r3
 8001b74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b78:	483f      	ldr	r0, [pc, #252]	; (8001c78 <writeall_outputs+0x33c>)
 8001b7a:	f004 f81d 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);							// Rote LED Platine
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	; (8001c74 <writeall_outputs+0x338>)
 8001b80:	785b      	ldrb	r3, [r3, #1]
 8001b82:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2104      	movs	r1, #4
 8001b8c:	4834      	ldr	r0, [pc, #208]	; (8001c60 <writeall_outputs+0x324>)
 8001b8e:	f004 f813 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);					// Gruene LED Platine
 8001b92:	4b38      	ldr	r3, [pc, #224]	; (8001c74 <writeall_outputs+0x338>)
 8001b94:	785b      	ldrb	r3, [r3, #1]
 8001b96:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ba2:	482f      	ldr	r0, [pc, #188]	; (8001c60 <writeall_outputs+0x324>)
 8001ba4:	f004 f808 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, leuchten_out.BlueLed);						// Blaue LED Platine
 8001ba8:	4b32      	ldr	r3, [pc, #200]	; (8001c74 <writeall_outputs+0x338>)
 8001baa:	785b      	ldrb	r3, [r3, #1]
 8001bac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	2180      	movs	r1, #128	; 0x80
 8001bb6:	482a      	ldr	r0, [pc, #168]	; (8001c60 <writeall_outputs+0x324>)
 8001bb8:	f003 fffe 	bl	8005bb8 <HAL_GPIO_WritePin>

	// Schreibe Komfortausgaenge
	HAL_GPIO_WritePin(BC_RESET_OUT_GPIO_Port, BC_RESET_OUT_Pin, komfort_out.BC_Rst_Out);			// Boardcomputer Reset Ausgang, Steuerung Kombiinstrument
 8001bbc:	4b2f      	ldr	r3, [pc, #188]	; (8001c7c <writeall_outputs+0x340>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	2120      	movs	r1, #32
 8001bca:	4824      	ldr	r0, [pc, #144]	; (8001c5c <writeall_outputs+0x320>)
 8001bcc:	f003 fff4 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BC_UP_OUT_GPIO_Port, BC_UP_OUT_Pin, komfort_out.BC_Up_Out);					// Boardcomputer Rauf Ausgang, Steuerung Kombiinstrument
 8001bd0:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <writeall_outputs+0x340>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	461a      	mov	r2, r3
 8001bdc:	2110      	movs	r1, #16
 8001bde:	481f      	ldr	r0, [pc, #124]	; (8001c5c <writeall_outputs+0x320>)
 8001be0:	f003 ffea 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BC_DOWN_OUT_GPIO_Port, BC_DOWN_OUT_Pin, komfort_out.BC_Down_Out);				// Boardcomputer Runter Ausgang, Steuerung Kombiinstrument
 8001be4:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <writeall_outputs+0x340>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	461a      	mov	r2, r3
 8001bf0:	2108      	movs	r1, #8
 8001bf2:	481a      	ldr	r0, [pc, #104]	; (8001c5c <writeall_outputs+0x320>)
 8001bf4:	f003 ffe0 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAMOCAR_OUT1_GPIO_Port, BAMOCAR_OUT1_Pin, komfort_out.BamoOut1);				// Ausgang Bamocar 1
 8001bf8:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <writeall_outputs+0x340>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	461a      	mov	r2, r3
 8001c04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c08:	4814      	ldr	r0, [pc, #80]	; (8001c5c <writeall_outputs+0x320>)
 8001c0a:	f003 ffd5 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAMOCAR_OUT2_GPIO_Port, BAMOCAR_OUT2_Pin, komfort_out.BamoOut2);				// Ausgang Bamocar 2
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <writeall_outputs+0x340>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c1e:	480f      	ldr	r0, [pc, #60]	; (8001c5c <writeall_outputs+0x320>)
 8001c20:	f003 ffca 	bl	8005bb8 <HAL_GPIO_WritePin>

#ifdef DEBUG_OUTPUT
	ITM_SendString("Ausgaenge gesetzt.\n");
 8001c24:	4816      	ldr	r0, [pc, #88]	; (8001c80 <writeall_outputs+0x344>)
 8001c26:	f7ff fbc5 	bl	80013b4 <ITM_SendString>
	ITM_SendString("system_out:\t");
 8001c2a:	4816      	ldr	r0, [pc, #88]	; (8001c84 <writeall_outputs+0x348>)
 8001c2c:	f7ff fbc2 	bl	80013b4 <ITM_SendString>
	ITM_SendNumber(system_out.systemoutput);
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <writeall_outputs+0x31c>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fbc7 	bl	80013c8 <ITM_SendNumber>
	ITM_SendChar('\n');
 8001c3a:	200a      	movs	r0, #10
 8001c3c:	f7ff fe57 	bl	80018ee <ITM_SendChar>
	ITM_SendString("highcurrent_out:\t");
 8001c40:	4811      	ldr	r0, [pc, #68]	; (8001c88 <writeall_outputs+0x34c>)
 8001c42:	f7ff fbb7 	bl	80013b4 <ITM_SendString>
	ITM_SendNumber(highcurrent_out.high_out);
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <writeall_outputs+0x330>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fbbc 	bl	80013c8 <ITM_SendNumber>
	ITM_SendChar('\n');
 8001c50:	200a      	movs	r0, #10
 8001c52:	f7ff fe4c 	bl	80018ee <ITM_SendChar>
 8001c56:	e019      	b.n	8001c8c <writeall_outputs+0x350>
 8001c58:	20000048 	.word	0x20000048
 8001c5c:	40021400 	.word	0x40021400
 8001c60:	40020400 	.word	0x40020400
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40020800 	.word	0x40020800
 8001c6c:	2000004c 	.word	0x2000004c
 8001c70:	40021800 	.word	0x40021800
 8001c74:	20000050 	.word	0x20000050
 8001c78:	40020c00 	.word	0x40020c00
 8001c7c:	20000054 	.word	0x20000054
 8001c80:	080090f4 	.word	0x080090f4
 8001c84:	08009108 	.word	0x08009108
 8001c88:	08009118 	.word	0x08009118
	ITM_SendString("komfort_out:\t");
 8001c8c:	480b      	ldr	r0, [pc, #44]	; (8001cbc <writeall_outputs+0x380>)
 8001c8e:	f7ff fb91 	bl	80013b4 <ITM_SendString>
	ITM_SendNumber(komfort_out.komfortoutput);
 8001c92:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <writeall_outputs+0x384>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fb96 	bl	80013c8 <ITM_SendNumber>
	ITM_SendChar('\n');
 8001c9c:	200a      	movs	r0, #10
 8001c9e:	f7ff fe26 	bl	80018ee <ITM_SendChar>
	ITM_SendString("leuchten_out:\t");
 8001ca2:	4808      	ldr	r0, [pc, #32]	; (8001cc4 <writeall_outputs+0x388>)
 8001ca4:	f7ff fb86 	bl	80013b4 <ITM_SendString>
	ITM_SendNumber(leuchten_out.ledoutput);
 8001ca8:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <writeall_outputs+0x38c>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fb8b 	bl	80013c8 <ITM_SendNumber>
	ITM_SendChar('\n');
 8001cb2:	200a      	movs	r0, #10
 8001cb4:	f7ff fe1b 	bl	80018ee <ITM_SendChar>
#endif
}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	0800912c 	.word	0x0800912c
 8001cc0:	20000054 	.word	0x20000054
 8001cc4:	0800913c 	.word	0x0800913c
 8001cc8:	20000050 	.word	0x20000050

08001ccc <pwm_oelstand>:
//----------------------------------------------------------------------

// PWM fuer Oelstandsensor am Kombiinstrument
//----------------------------------------------------------------------
void pwm_oelstand(uint16_t time)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	80fb      	strh	r3, [r7, #6]
	// Auswahl wie viele Sekunden vergangen
	switch (time)																					// Zeit wird uebergeben
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	2b4b      	cmp	r3, #75	; 0x4b
 8001cda:	d01f      	beq.n	8001d1c <pwm_oelstand+0x50>
 8001cdc:	2b4b      	cmp	r3, #75	; 0x4b
 8001cde:	dc24      	bgt.n	8001d2a <pwm_oelstand+0x5e>
 8001ce0:	2b2d      	cmp	r3, #45	; 0x2d
 8001ce2:	d014      	beq.n	8001d0e <pwm_oelstand+0x42>
 8001ce4:	2b2d      	cmp	r3, #45	; 0x2d
 8001ce6:	dc20      	bgt.n	8001d2a <pwm_oelstand+0x5e>
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d002      	beq.n	8001cf2 <pwm_oelstand+0x26>
 8001cec:	2b0f      	cmp	r3, #15
 8001cee:	d007      	beq.n	8001d00 <pwm_oelstand+0x34>
			break;
		case 75: // 5x15 ms = 75 ms
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 75ms Oelstandsensor Ausgang high
			break;
		default:
			break;
 8001cf0:	e01b      	b.n	8001d2a <pwm_oelstand+0x5e>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_RESET);			// Bei 0ms Oelstandsensor Ausgang low
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf8:	480e      	ldr	r0, [pc, #56]	; (8001d34 <pwm_oelstand+0x68>)
 8001cfa:	f003 ff5d 	bl	8005bb8 <HAL_GPIO_WritePin>
			break;
 8001cfe:	e015      	b.n	8001d2c <pwm_oelstand+0x60>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 15ms Oelstandsensor Ausgang high
 8001d00:	2201      	movs	r2, #1
 8001d02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d06:	480b      	ldr	r0, [pc, #44]	; (8001d34 <pwm_oelstand+0x68>)
 8001d08:	f003 ff56 	bl	8005bb8 <HAL_GPIO_WritePin>
			break;
 8001d0c:	e00e      	b.n	8001d2c <pwm_oelstand+0x60>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_RESET);			// Bei 45ms Oelstandsensor Ausgang low
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d14:	4807      	ldr	r0, [pc, #28]	; (8001d34 <pwm_oelstand+0x68>)
 8001d16:	f003 ff4f 	bl	8005bb8 <HAL_GPIO_WritePin>
			break;
 8001d1a:	e007      	b.n	8001d2c <pwm_oelstand+0x60>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 75ms Oelstandsensor Ausgang high
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d22:	4804      	ldr	r0, [pc, #16]	; (8001d34 <pwm_oelstand+0x68>)
 8001d24:	f003 ff48 	bl	8005bb8 <HAL_GPIO_WritePin>
			break;
 8001d28:	e000      	b.n	8001d2c <pwm_oelstand+0x60>
			break;
 8001d2a:	bf00      	nop
	}
	// Nach 405ms wird das ganze wiederholt
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40020000 	.word	0x40020000

08001d38 <cockpit_default>:
//----------------------------------------------------------------------

// Setze Cockpit auf default, alle Fehler OK
//----------------------------------------------------------------------
void cockpit_default(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
	leuchten_out.Rueckwarn = 1;																		// Ruecklichtwarnung setzen
 8001d3c:	4a1f      	ldr	r2, [pc, #124]	; (8001dbc <cockpit_default+0x84>)
 8001d3e:	7813      	ldrb	r3, [r2, #0]
 8001d40:	f043 0310 	orr.w	r3, r3, #16
 8001d44:	7013      	strb	r3, [r2, #0]
	leuchten_out.Wischwarn = 1;																		// Wischwasserwarnung setzen
 8001d46:	4a1d      	ldr	r2, [pc, #116]	; (8001dbc <cockpit_default+0x84>)
 8001d48:	7813      	ldrb	r3, [r2, #0]
 8001d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d4e:	7013      	strb	r3, [r2, #0]
	leuchten_out.Bremswarn = 1;																		// Bremslichtwarnung setzen
 8001d50:	4a1a      	ldr	r2, [pc, #104]	; (8001dbc <cockpit_default+0x84>)
 8001d52:	7813      	ldrb	r3, [r2, #0]
 8001d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d58:	7013      	strb	r3, [r2, #0]
	leuchten_out.Oeldruck = 1;																		// Oeldruckwarnung setzen
 8001d5a:	4a18      	ldr	r2, [pc, #96]	; (8001dbc <cockpit_default+0x84>)
 8001d5c:	7853      	ldrb	r3, [r2, #1]
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, leuchten_out.Rueckwarn);			// Fehlermeldung fuer Ruecklichtwarnung einschalten
 8001d64:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <cockpit_default+0x84>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	461a      	mov	r2, r3
 8001d70:	2180      	movs	r1, #128	; 0x80
 8001d72:	4813      	ldr	r0, [pc, #76]	; (8001dc0 <cockpit_default+0x88>)
 8001d74:	f003 ff20 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WISCHWARNUNG_GPIO_Port, WISCHWARNUNG_Pin, leuchten_out.Wischwarn);			// Fehlermeldung fuer Wischwasserwarnung einschalten
 8001d78:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <cockpit_default+0x84>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d88:	480e      	ldr	r0, [pc, #56]	; (8001dc4 <cockpit_default+0x8c>)
 8001d8a:	f003 ff15 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BREMSWARNUNG_GPIO_Port, BREMSWARNUNG_Pin, leuchten_out.Bremswarn);			// Fehlermeldung fuer Bremslichtwarnung einschalten
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <cockpit_default+0x84>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	461a      	mov	r2, r3
 8001d9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d9e:	4809      	ldr	r0, [pc, #36]	; (8001dc4 <cockpit_default+0x8c>)
 8001da0:	f003 ff0a 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OELDRUCK_GPIO_Port, OELDRUCK_Pin, leuchten_out.Oeldruck);						// Fehlermeldung fuer Oeldruckwarnung einschalten
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <cockpit_default+0x84>)
 8001da6:	785b      	ldrb	r3, [r3, #1]
 8001da8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	461a      	mov	r2, r3
 8001db0:	2104      	movs	r1, #4
 8001db2:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <cockpit_default+0x90>)
 8001db4:	f003 ff00 	bl	8005bb8 <HAL_GPIO_WritePin>
}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000050 	.word	0x20000050
 8001dc0:	40020c00 	.word	0x40020c00
 8001dc4:	40021800 	.word	0x40021800
 8001dc8:	40021400 	.word	0x40021400

08001dcc <testSDC>:
//----------------------------------------------------------------------

// Testen der Spannung am Shutdown-Circuit, Signal 1 = offen, Signal = 0 geschlossen
//----------------------------------------------------------------------
void testSDC(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, GPIO_PIN_SET);					// Einschalten von Shutdown-Circuit zum testen
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dd6:	4811      	ldr	r0, [pc, #68]	; (8001e1c <testSDC+0x50>)
 8001dd8:	f003 feee 	bl	8005bb8 <HAL_GPIO_WritePin>
	HAL_Delay(100);																					// Wartezeit zum setzen
 8001ddc:	2064      	movs	r0, #100	; 0x64
 8001dde:	f002 f86b 	bl	8003eb8 <HAL_Delay>
	if (HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin) == 1)								// Einlesen von SDC0 Eingang
 8001de2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001de6:	480d      	ldr	r0, [pc, #52]	; (8001e1c <testSDC+0x50>)
 8001de8:	f003 fece 	bl	8005b88 <HAL_GPIO_ReadPin>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d103      	bne.n	8001dfa <testSDC+0x2e>
	{
#ifndef DEBUG_SDC
		software_error(ERROR_SDC_SPANNUNG);															// Sollte Sicherung kaputt oder Kurzschluss, dann Fehlerausgeben
#else
#warning Das Abschalten des Softwarefehlers kann unter Umstaenden zu Beschaedigung der HW fuehren.
		software_error_debug(ERROR_SDC_SPANNUNG);													// Errorfunktion stoppt Programm nicht
 8001df2:	2003      	movs	r0, #3
 8001df4:	f7ff fa8c 	bl	8001310 <software_error_debug>
 8001df8:	e004      	b.n	8001e04 <testSDC+0x38>
#endif
	}
	else
	{
	  	sdc_in.SDC12V = 1;																			// SDC Spannungsversorgung OK
 8001dfa:	4a09      	ldr	r2, [pc, #36]	; (8001e20 <testSDC+0x54>)
 8001dfc:	7813      	ldrb	r3, [r2, #0]
 8001dfe:	f043 0320 	orr.w	r3, r3, #32
 8001e02:	7013      	strb	r3, [r2, #0]
	}
	HAL_Delay(100);																					// Wartezeit zum setzen
 8001e04:	2064      	movs	r0, #100	; 0x64
 8001e06:	f002 f857 	bl	8003eb8 <HAL_Delay>
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, GPIO_PIN_RESET);					// Auschalten von Shutdown-Circuit
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <testSDC+0x50>)
 8001e12:	f003 fed1 	bl	8005bb8 <HAL_GPIO_WritePin>
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	20000040 	.word	0x20000040

08001e24 <readTrottle>:
//----------------------------------------------------------------------

// Gaspedal auswerten
//----------------------------------------------------------------------
uint16_t readTrottle(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
	// Variablen anlegen
	uint16_t ADC_Gas = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	80fb      	strh	r3, [r7, #6]

	// Pruefen ob Variable Anlasser aktiv ist
	if (sdc_in.Anlasser == 1)												// Nur aktiv, wenn KL15 an und Anlasser einmal betaetigt.
 8001e2e:	4b3e      	ldr	r3, [pc, #248]	; (8001f28 <readTrottle+0x104>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d070      	beq.n	8001f1e <readTrottle+0xfa>
	{
		// Gaspedal einlesen
		ADC_Gas = ADC_Gaspedal();
 8001e3c:	f7fe ffb6 	bl	8000dac <ADC_Gaspedal>
 8001e40:	4603      	mov	r3, r0
 8001e42:	80fb      	strh	r3, [r7, #6]

		// Pruefen ob Kupplung getreten wurde
		if (system_in.Kupplung == 1)										// Wenn Kupplung nicht getreten wurde == 1
 8001e44:	4b39      	ldr	r3, [pc, #228]	; (8001f2c <readTrottle+0x108>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	f003 0310 	and.w	r3, r3, #16
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d063      	beq.n	8001f1a <readTrottle+0xf6>
		{
			// Wenn Leerlauf und Kickdown aktiv Plausibilitaetsfehler
			if ((system_in.Leerlauf == 1) && (system_in.Kickdown == 1))
 8001e52:	4b36      	ldr	r3, [pc, #216]	; (8001f2c <readTrottle+0x108>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00d      	beq.n	8001e7c <readTrottle+0x58>
 8001e60:	4b32      	ldr	r3, [pc, #200]	; (8001f2c <readTrottle+0x108>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d006      	beq.n	8001e7c <readTrottle+0x58>
			{
				// Fehlermeldung auf Uart ausgeben
				uartTransmitString("Error_Gaspedal_1 Plausibilitaetsfehler: Kickdown und Leerlauf");
 8001e6e:	4830      	ldr	r0, [pc, #192]	; (8001f30 <readTrottle+0x10c>)
 8001e70:	f7fe fcda 	bl	8000828 <uartTransmitString>
				// Gaspedal invalide
				software_error(ERROR_GASPEDAL);
 8001e74:	2001      	movs	r0, #1
 8001e76:	f7ff f9fb 	bl	8001270 <software_error>
 8001e7a:	e050      	b.n	8001f1e <readTrottle+0xfa>
			}
			// Threshold Wert vergleichen / Threshold Wert >= THRESHOLD und Leerlauf nicht aktiv
			else if ((system_in.Leerlauf != 1) && (ADC_Gas >= GAS_THRESHOLD))
 8001e7c:	4b2b      	ldr	r3, [pc, #172]	; (8001f2c <readTrottle+0x108>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d108      	bne.n	8001e9c <readTrottle+0x78>
 8001e8a:	88fb      	ldrh	r3, [r7, #6]
 8001e8c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001e90:	d304      	bcc.n	8001e9c <readTrottle+0x78>
			{
				// Wenn Wert groesser THRESHOLD ist, dann THRESHOLD vom ADC-Wert abziehen
				ADC_Gas -= GAS_THRESHOLD;
 8001e92:	88fb      	ldrh	r3, [r7, #6]
 8001e94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e98:	80fb      	strh	r3, [r7, #6]
 8001e9a:	e040      	b.n	8001f1e <readTrottle+0xfa>
			}
			// Threshold Wert vergleichen / Threshold Wert < THRESHOLD und Leerlauf aktiv
			else if ((system_in.Leerlauf == 1) || ((system_in.Leerlauf != 1) && (ADC_Gas < GAS_THRESHOLD)))
 8001e9c:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <readTrottle+0x108>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10a      	bne.n	8001ec0 <readTrottle+0x9c>
 8001eaa:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <readTrottle+0x108>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d106      	bne.n	8001ec6 <readTrottle+0xa2>
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001ebe:	d202      	bcs.n	8001ec6 <readTrottle+0xa2>
			{
				// Wenn der Wert kleine als THRESHOLD ist, dann ADC ignorieren, alle Werte sind 0
				ADC_Gas = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	80fb      	strh	r3, [r7, #6]
 8001ec4:	e02b      	b.n	8001f1e <readTrottle+0xfa>
			}
			// Threshold Wert vergleichen / Threshold Wert < THRESHOLD und Kickdown  nicht aktiv
			else if ((system_in.Kickdown != 1) && (ADC_Gas < (GAS_MAX_ADC - GAS_THRESHOLD)))
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <readTrottle+0x108>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d104      	bne.n	8001ede <readTrottle+0xba>
 8001ed4:	88fb      	ldrh	r3, [r7, #6]
 8001ed6:	f640 62d2 	movw	r2, #3794	; 0xed2
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d91f      	bls.n	8001f1e <readTrottle+0xfa>
			{
				// Wenn Wert kleiner THRESHOLD ist

			}
			// Threshold Wert vergleichen / Threshold Wert > THRESHOLD und Kickdown aktiv
			else if ((system_in.Kickdown == 1) && (ADC_Gas >= (GAS_MAX_ADC - GAS_THRESHOLD)))
 8001ede:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <readTrottle+0x108>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <readTrottle+0xda>
 8001eec:	88fb      	ldrh	r3, [r7, #6]
 8001eee:	f640 62d2 	movw	r2, #3794	; 0xed2
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d903      	bls.n	8001efe <readTrottle+0xda>
			{
				// Wenn Wert gleich THRESHOLD ist
				ADC_Gas = GAS_MAX_ADC;
 8001ef6:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001efa:	80fb      	strh	r3, [r7, #6]
 8001efc:	e00f      	b.n	8001f1e <readTrottle+0xfa>
			}
			// Wenn Kickdown betaetigt, Gaspedal Error
			else if (system_in.Kickdown != 1)
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <readTrottle+0x108>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d108      	bne.n	8001f1e <readTrottle+0xfa>
			{
				// Fehlermeldung ausgeben
				uartTransmitString("Error_Gaspedal_1 Plausibilitaetsfehler: Kickdown");
 8001f0c:	4809      	ldr	r0, [pc, #36]	; (8001f34 <readTrottle+0x110>)
 8001f0e:	f7fe fc8b 	bl	8000828 <uartTransmitString>
				// Gaspedal invalide
				software_error(ERROR_GASPEDAL);
 8001f12:	2001      	movs	r0, #1
 8001f14:	f7ff f9ac 	bl	8001270 <software_error>
 8001f18:	e001      	b.n	8001f1e <readTrottle+0xfa>
		}
		// Wenn Kupplung getreten == 0
		else
		{
			// Wenn Kupplung oder Bremse getreten
			ADC_Gas = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	80fb      	strh	r3, [r7, #6]
		}
	}

	return ADC_Gas;
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000040 	.word	0x20000040
 8001f2c:	2000003c 	.word	0x2000003c
 8001f30:	0800914c 	.word	0x0800914c
 8001f34:	0800918c 	.word	0x0800918c

08001f38 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f3e:	463b      	mov	r3, r7
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f4a:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <MX_ADC1_Init+0x98>)
 8001f4c:	4a21      	ldr	r2, [pc, #132]	; (8001fd4 <MX_ADC1_Init+0x9c>)
 8001f4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f50:	4b1f      	ldr	r3, [pc, #124]	; (8001fd0 <MX_ADC1_Init+0x98>)
 8001f52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f58:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <MX_ADC1_Init+0x98>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <MX_ADC1_Init+0x98>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f64:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <MX_ADC1_Init+0x98>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f6a:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <MX_ADC1_Init+0x98>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f72:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <MX_ADC1_Init+0x98>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f78:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <MX_ADC1_Init+0x98>)
 8001f7a:	4a17      	ldr	r2, [pc, #92]	; (8001fd8 <MX_ADC1_Init+0xa0>)
 8001f7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f7e:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <MX_ADC1_Init+0x98>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001f84:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <MX_ADC1_Init+0x98>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f8a:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <MX_ADC1_Init+0x98>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f92:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <MX_ADC1_Init+0x98>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f98:	480d      	ldr	r0, [pc, #52]	; (8001fd0 <MX_ADC1_Init+0x98>)
 8001f9a:	f001 fff9 	bl	8003f90 <HAL_ADC_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001fa4:	f001 fd60 	bl	8003a68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001fa8:	230e      	movs	r3, #14
 8001faa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fac:	2301      	movs	r3, #1
 8001fae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <MX_ADC1_Init+0x98>)
 8001fba:	f002 f9c7 	bl	800434c <HAL_ADC_ConfigChannel>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001fc4:	f001 fd50 	bl	8003a68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fc8:	bf00      	nop
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000058 	.word	0x20000058
 8001fd4:	40012000 	.word	0x40012000
 8001fd8:	0f000001 	.word	0x0f000001

08001fdc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08c      	sub	sp, #48	; 0x30
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 031c 	add.w	r3, r7, #28
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a2d      	ldr	r2, [pc, #180]	; (80020b0 <HAL_ADC_MspInit+0xd4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d153      	bne.n	80020a6 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ffe:	4b2d      	ldr	r3, [pc, #180]	; (80020b4 <HAL_ADC_MspInit+0xd8>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	4a2c      	ldr	r2, [pc, #176]	; (80020b4 <HAL_ADC_MspInit+0xd8>)
 8002004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002008:	6453      	str	r3, [r2, #68]	; 0x44
 800200a:	4b2a      	ldr	r3, [pc, #168]	; (80020b4 <HAL_ADC_MspInit+0xd8>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002012:	61bb      	str	r3, [r7, #24]
 8002014:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002016:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <HAL_ADC_MspInit+0xd8>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a26      	ldr	r2, [pc, #152]	; (80020b4 <HAL_ADC_MspInit+0xd8>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <HAL_ADC_MspInit+0xd8>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800202e:	4b21      	ldr	r3, [pc, #132]	; (80020b4 <HAL_ADC_MspInit+0xd8>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a20      	ldr	r2, [pc, #128]	; (80020b4 <HAL_ADC_MspInit+0xd8>)
 8002034:	f043 0304 	orr.w	r3, r3, #4
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b1e      	ldr	r3, [pc, #120]	; (80020b4 <HAL_ADC_MspInit+0xd8>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002046:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <HAL_ADC_MspInit+0xd8>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a1a      	ldr	r2, [pc, #104]	; (80020b4 <HAL_ADC_MspInit+0xd8>)
 800204c:	f043 0302 	orr.w	r3, r3, #2
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <HAL_ADC_MspInit+0xd8>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SENSE_KL15_Pin|SENSE_KUEHLWASSER_Pin|SENSE_KLIMA_FLAP_Pin|SENSE_GAS_Pin
 800205e:	23f8      	movs	r3, #248	; 0xf8
 8002060:	61fb      	str	r3, [r7, #28]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002062:	2303      	movs	r3, #3
 8002064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206a:	f107 031c 	add.w	r3, r7, #28
 800206e:	4619      	mov	r1, r3
 8002070:	4811      	ldr	r0, [pc, #68]	; (80020b8 <HAL_ADC_MspInit+0xdc>)
 8002072:	f003 fbdd 	bl	8005830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_DRUCK_Pin|SENSE_DRUCK_TEMP_Pin;
 8002076:	2330      	movs	r3, #48	; 0x30
 8002078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800207a:	2303      	movs	r3, #3
 800207c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002082:	f107 031c 	add.w	r3, r7, #28
 8002086:	4619      	mov	r1, r3
 8002088:	480c      	ldr	r0, [pc, #48]	; (80020bc <HAL_ADC_MspInit+0xe0>)
 800208a:	f003 fbd1 	bl	8005830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_RETURN_Pin|SENSE_INFO_Pin;
 800208e:	2303      	movs	r3, #3
 8002090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002092:	2303      	movs	r3, #3
 8002094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209a:	f107 031c 	add.w	r3, r7, #28
 800209e:	4619      	mov	r1, r3
 80020a0:	4807      	ldr	r0, [pc, #28]	; (80020c0 <HAL_ADC_MspInit+0xe4>)
 80020a2:	f003 fbc5 	bl	8005830 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80020a6:	bf00      	nop
 80020a8:	3730      	adds	r7, #48	; 0x30
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40012000 	.word	0x40012000
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40020000 	.word	0x40020000
 80020bc:	40020800 	.word	0x40020800
 80020c0:	40020400 	.word	0x40020400

080020c4 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80020c8:	4b17      	ldr	r3, [pc, #92]	; (8002128 <MX_CAN1_Init+0x64>)
 80020ca:	4a18      	ldr	r2, [pc, #96]	; (800212c <MX_CAN1_Init+0x68>)
 80020cc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 30;
 80020ce:	4b16      	ldr	r3, [pc, #88]	; (8002128 <MX_CAN1_Init+0x64>)
 80020d0:	221e      	movs	r2, #30
 80020d2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80020d4:	4b14      	ldr	r3, [pc, #80]	; (8002128 <MX_CAN1_Init+0x64>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <MX_CAN1_Init+0x64>)
 80020dc:	2200      	movs	r2, #0
 80020de:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <MX_CAN1_Init+0x64>)
 80020e2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80020e6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <MX_CAN1_Init+0x64>)
 80020ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80020ee:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80020f0:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <MX_CAN1_Init+0x64>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80020f6:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <MX_CAN1_Init+0x64>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80020fc:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <MX_CAN1_Init+0x64>)
 80020fe:	2200      	movs	r2, #0
 8002100:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <MX_CAN1_Init+0x64>)
 8002104:	2200      	movs	r2, #0
 8002106:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002108:	4b07      	ldr	r3, [pc, #28]	; (8002128 <MX_CAN1_Init+0x64>)
 800210a:	2200      	movs	r2, #0
 800210c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <MX_CAN1_Init+0x64>)
 8002110:	2200      	movs	r2, #0
 8002112:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002114:	4804      	ldr	r0, [pc, #16]	; (8002128 <MX_CAN1_Init+0x64>)
 8002116:	f002 fb69 	bl	80047ec <HAL_CAN_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002120:	f001 fca2 	bl	8003a68 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}
 8002128:	200000c8 	.word	0x200000c8
 800212c:	40006400 	.word	0x40006400

08002130 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8002134:	4b33      	ldr	r3, [pc, #204]	; (8002204 <MX_CAN3_Init+0xd4>)
 8002136:	4a34      	ldr	r2, [pc, #208]	; (8002208 <MX_CAN3_Init+0xd8>)
 8002138:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 800213a:	4b32      	ldr	r3, [pc, #200]	; (8002204 <MX_CAN3_Init+0xd4>)
 800213c:	2206      	movs	r2, #6
 800213e:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8002140:	4b30      	ldr	r3, [pc, #192]	; (8002204 <MX_CAN3_Init+0xd4>)
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002146:	4b2f      	ldr	r3, [pc, #188]	; (8002204 <MX_CAN3_Init+0xd4>)
 8002148:	2200      	movs	r2, #0
 800214a:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 800214c:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <MX_CAN3_Init+0xd4>)
 800214e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002152:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002154:	4b2b      	ldr	r3, [pc, #172]	; (8002204 <MX_CAN3_Init+0xd4>)
 8002156:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800215a:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 800215c:	4b29      	ldr	r3, [pc, #164]	; (8002204 <MX_CAN3_Init+0xd4>)
 800215e:	2200      	movs	r2, #0
 8002160:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8002162:	4b28      	ldr	r3, [pc, #160]	; (8002204 <MX_CAN3_Init+0xd4>)
 8002164:	2200      	movs	r2, #0
 8002166:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8002168:	4b26      	ldr	r3, [pc, #152]	; (8002204 <MX_CAN3_Init+0xd4>)
 800216a:	2200      	movs	r2, #0
 800216c:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 800216e:	4b25      	ldr	r3, [pc, #148]	; (8002204 <MX_CAN3_Init+0xd4>)
 8002170:	2200      	movs	r2, #0
 8002172:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8002174:	4b23      	ldr	r3, [pc, #140]	; (8002204 <MX_CAN3_Init+0xd4>)
 8002176:	2200      	movs	r2, #0
 8002178:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 800217a:	4b22      	ldr	r3, [pc, #136]	; (8002204 <MX_CAN3_Init+0xd4>)
 800217c:	2200      	movs	r2, #0
 800217e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8002180:	4820      	ldr	r0, [pc, #128]	; (8002204 <MX_CAN3_Init+0xd4>)
 8002182:	f002 fb33 	bl	80047ec <HAL_CAN_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 800218c:	f001 fc6c 	bl	8003a68 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */
	// Starte CAN Bus
	if((HAL_CAN_Start(&hcan3)) != HAL_OK)
 8002190:	481c      	ldr	r0, [pc, #112]	; (8002204 <MX_CAN3_Init+0xd4>)
 8002192:	f002 fd13 	bl	8004bbc <HAL_CAN_Start>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_CAN3_Init+0x70>
	{
		// Fehler beim Starten des CAN-Busses
		Error_Handler();
 800219c:	f001 fc64 	bl	8003a68 <Error_Handler>
	}

	// Aktiviere Interrupts fuer CAN Bus
	if((HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_FULL)) != HAL_OK)
 80021a0:	2104      	movs	r1, #4
 80021a2:	4818      	ldr	r0, [pc, #96]	; (8002204 <MX_CAN3_Init+0xd4>)
 80021a4:	f002 ff54 	bl	8005050 <HAL_CAN_ActivateNotification>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_CAN3_Init+0x82>
	{
		// Fehler in der Initialisierung des CAN Interrupts
		Error_Handler();
 80021ae:	f001 fc5b 	bl	8003a68 <Error_Handler>
	}

	// Filter Bank initialisieren um Daten zu empfangen
	// Akzeptiere alle CAN-Pakete
	sFilterConfig.FilterBank = 0;
 80021b2:	4b16      	ldr	r3, [pc, #88]	; (800220c <MX_CAN3_Init+0xdc>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80021b8:	4b14      	ldr	r3, [pc, #80]	; (800220c <MX_CAN3_Init+0xdc>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80021be:	4b13      	ldr	r3, [pc, #76]	; (800220c <MX_CAN3_Init+0xdc>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0111 << 5;
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <MX_CAN3_Init+0xdc>)
 80021c6:	f242 2220 	movw	r2, #8736	; 0x2220
 80021ca:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0;
 80021cc:	4b0f      	ldr	r3, [pc, #60]	; (800220c <MX_CAN3_Init+0xdc>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0111 << 5;
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <MX_CAN3_Init+0xdc>)
 80021d4:	f242 2220 	movw	r2, #8736	; 0x2220
 80021d8:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0;
 80021da:	4b0c      	ldr	r3, [pc, #48]	; (800220c <MX_CAN3_Init+0xdc>)
 80021dc:	2200      	movs	r2, #0
 80021de:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = 0;
 80021e0:	4b0a      	ldr	r3, [pc, #40]	; (800220c <MX_CAN3_Init+0xdc>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <MX_CAN3_Init+0xdc>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	621a      	str	r2, [r3, #32]

	// Filter Bank schreiben
	if((HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 80021ec:	4907      	ldr	r1, [pc, #28]	; (800220c <MX_CAN3_Init+0xdc>)
 80021ee:	4805      	ldr	r0, [pc, #20]	; (8002204 <MX_CAN3_Init+0xd4>)
 80021f0:	f002 fbf8 	bl	80049e4 <HAL_CAN_ConfigFilter>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_CAN3_Init+0xce>
	{
		// Fehler beim konfigurieren der Filterbank fuer den CAN-Bus
		Error_Handler();
 80021fa:	f001 fc35 	bl	8003a68 <Error_Handler>
	}

  /* USER CODE END CAN3_Init 2 */

}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200000f0 	.word	0x200000f0
 8002208:	40003400 	.word	0x40003400
 800220c:	200000a0 	.word	0x200000a0

08002210 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08c      	sub	sp, #48	; 0x30
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 031c 	add.w	r3, r7, #28
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a32      	ldr	r2, [pc, #200]	; (80022f8 <HAL_CAN_MspInit+0xe8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d128      	bne.n	8002284 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002232:	4b32      	ldr	r3, [pc, #200]	; (80022fc <HAL_CAN_MspInit+0xec>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	4a31      	ldr	r2, [pc, #196]	; (80022fc <HAL_CAN_MspInit+0xec>)
 8002238:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800223c:	6413      	str	r3, [r2, #64]	; 0x40
 800223e:	4b2f      	ldr	r3, [pc, #188]	; (80022fc <HAL_CAN_MspInit+0xec>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002246:	61bb      	str	r3, [r7, #24]
 8002248:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800224a:	4b2c      	ldr	r3, [pc, #176]	; (80022fc <HAL_CAN_MspInit+0xec>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a2b      	ldr	r2, [pc, #172]	; (80022fc <HAL_CAN_MspInit+0xec>)
 8002250:	f043 0308 	orr.w	r3, r3, #8
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b29      	ldr	r3, [pc, #164]	; (80022fc <HAL_CAN_MspInit+0xec>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002262:	2303      	movs	r3, #3
 8002264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002266:	2302      	movs	r3, #2
 8002268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226e:	2303      	movs	r3, #3
 8002270:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002272:	2309      	movs	r3, #9
 8002274:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002276:	f107 031c 	add.w	r3, r7, #28
 800227a:	4619      	mov	r1, r3
 800227c:	4820      	ldr	r0, [pc, #128]	; (8002300 <HAL_CAN_MspInit+0xf0>)
 800227e:	f003 fad7 	bl	8005830 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8002282:	e035      	b.n	80022f0 <HAL_CAN_MspInit+0xe0>
  else if(canHandle->Instance==CAN3)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a1e      	ldr	r2, [pc, #120]	; (8002304 <HAL_CAN_MspInit+0xf4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d130      	bne.n	80022f0 <HAL_CAN_MspInit+0xe0>
    __HAL_RCC_CAN3_CLK_ENABLE();
 800228e:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <HAL_CAN_MspInit+0xec>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	4a1a      	ldr	r2, [pc, #104]	; (80022fc <HAL_CAN_MspInit+0xec>)
 8002294:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002298:	6413      	str	r3, [r2, #64]	; 0x40
 800229a:	4b18      	ldr	r3, [pc, #96]	; (80022fc <HAL_CAN_MspInit+0xec>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <HAL_CAN_MspInit+0xec>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a14      	ldr	r2, [pc, #80]	; (80022fc <HAL_CAN_MspInit+0xec>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b12      	ldr	r3, [pc, #72]	; (80022fc <HAL_CAN_MspInit+0xec>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ACAN_RX_Pin|ACAN_TX_Pin;
 80022be:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80022c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c4:	2302      	movs	r3, #2
 80022c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022cc:	2303      	movs	r3, #3
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80022d0:	230b      	movs	r3, #11
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d4:	f107 031c 	add.w	r3, r7, #28
 80022d8:	4619      	mov	r1, r3
 80022da:	480b      	ldr	r0, [pc, #44]	; (8002308 <HAL_CAN_MspInit+0xf8>)
 80022dc:	f003 faa8 	bl	8005830 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 80022e0:	2200      	movs	r2, #0
 80022e2:	2100      	movs	r1, #0
 80022e4:	2069      	movs	r0, #105	; 0x69
 80022e6:	f003 f9da 	bl	800569e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 80022ea:	2069      	movs	r0, #105	; 0x69
 80022ec:	f003 f9f3 	bl	80056d6 <HAL_NVIC_EnableIRQ>
}
 80022f0:	bf00      	nop
 80022f2:	3730      	adds	r7, #48	; 0x30
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40006400 	.word	0x40006400
 80022fc:	40023800 	.word	0x40023800
 8002300:	40020c00 	.word	0x40020c00
 8002304:	40003400 	.word	0x40003400
 8002308:	40020000 	.word	0x40020000

0800230c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08e      	sub	sp, #56	; 0x38
 8002310:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
 800231c:	609a      	str	r2, [r3, #8]
 800231e:	60da      	str	r2, [r3, #12]
 8002320:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002322:	4bb6      	ldr	r3, [pc, #728]	; (80025fc <MX_GPIO_Init+0x2f0>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4ab5      	ldr	r2, [pc, #724]	; (80025fc <MX_GPIO_Init+0x2f0>)
 8002328:	f043 0310 	orr.w	r3, r3, #16
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4bb3      	ldr	r3, [pc, #716]	; (80025fc <MX_GPIO_Init+0x2f0>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	623b      	str	r3, [r7, #32]
 8002338:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800233a:	4bb0      	ldr	r3, [pc, #704]	; (80025fc <MX_GPIO_Init+0x2f0>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4aaf      	ldr	r2, [pc, #700]	; (80025fc <MX_GPIO_Init+0x2f0>)
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4bad      	ldr	r3, [pc, #692]	; (80025fc <MX_GPIO_Init+0x2f0>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	61fb      	str	r3, [r7, #28]
 8002350:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002352:	4baa      	ldr	r3, [pc, #680]	; (80025fc <MX_GPIO_Init+0x2f0>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4aa9      	ldr	r2, [pc, #676]	; (80025fc <MX_GPIO_Init+0x2f0>)
 8002358:	f043 0320 	orr.w	r3, r3, #32
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4ba7      	ldr	r3, [pc, #668]	; (80025fc <MX_GPIO_Init+0x2f0>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f003 0320 	and.w	r3, r3, #32
 8002366:	61bb      	str	r3, [r7, #24]
 8002368:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800236a:	4ba4      	ldr	r3, [pc, #656]	; (80025fc <MX_GPIO_Init+0x2f0>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	4aa3      	ldr	r2, [pc, #652]	; (80025fc <MX_GPIO_Init+0x2f0>)
 8002370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002374:	6313      	str	r3, [r2, #48]	; 0x30
 8002376:	4ba1      	ldr	r3, [pc, #644]	; (80025fc <MX_GPIO_Init+0x2f0>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002382:	4b9e      	ldr	r3, [pc, #632]	; (80025fc <MX_GPIO_Init+0x2f0>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a9d      	ldr	r2, [pc, #628]	; (80025fc <MX_GPIO_Init+0x2f0>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b9b      	ldr	r3, [pc, #620]	; (80025fc <MX_GPIO_Init+0x2f0>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800239a:	4b98      	ldr	r3, [pc, #608]	; (80025fc <MX_GPIO_Init+0x2f0>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	4a97      	ldr	r2, [pc, #604]	; (80025fc <MX_GPIO_Init+0x2f0>)
 80023a0:	f043 0302 	orr.w	r3, r3, #2
 80023a4:	6313      	str	r3, [r2, #48]	; 0x30
 80023a6:	4b95      	ldr	r3, [pc, #596]	; (80025fc <MX_GPIO_Init+0x2f0>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80023b2:	4b92      	ldr	r3, [pc, #584]	; (80025fc <MX_GPIO_Init+0x2f0>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a91      	ldr	r2, [pc, #580]	; (80025fc <MX_GPIO_Init+0x2f0>)
 80023b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b8f      	ldr	r3, [pc, #572]	; (80025fc <MX_GPIO_Init+0x2f0>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ca:	4b8c      	ldr	r3, [pc, #560]	; (80025fc <MX_GPIO_Init+0x2f0>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a8b      	ldr	r2, [pc, #556]	; (80025fc <MX_GPIO_Init+0x2f0>)
 80023d0:	f043 0308 	orr.w	r3, r3, #8
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b89      	ldr	r3, [pc, #548]	; (80025fc <MX_GPIO_Init+0x2f0>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	607b      	str	r3, [r7, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 80023e2:	2200      	movs	r2, #0
 80023e4:	f248 0187 	movw	r1, #32903	; 0x8087
 80023e8:	4885      	ldr	r0, [pc, #532]	; (8002600 <MX_GPIO_Init+0x2f4>)
 80023ea:	f003 fbe5 	bl	8005bb8 <HAL_GPIO_WritePin>
                          |DIGITAL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_ON_Pin|WS2812_Pin, GPIO_PIN_RESET);
 80023ee:	2200      	movs	r2, #0
 80023f0:	f242 0108 	movw	r1, #8200	; 0x2008
 80023f4:	4883      	ldr	r0, [pc, #524]	; (8002604 <MX_GPIO_Init+0x2f8>)
 80023f6:	f003 fbdf 	bl	8005bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 80023fa:	2200      	movs	r2, #0
 80023fc:	f24f 013c 	movw	r1, #61500	; 0xf03c
 8002400:	4881      	ldr	r0, [pc, #516]	; (8002608 <MX_GPIO_Init+0x2fc>)
 8002402:	f003 fbd9 	bl	8005bb8 <HAL_GPIO_WritePin>
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 8002406:	2200      	movs	r2, #0
 8002408:	f647 0194 	movw	r1, #30868	; 0x7894
 800240c:	487f      	ldr	r0, [pc, #508]	; (800260c <MX_GPIO_Init+0x300>)
 800240e:	f003 fbd3 	bl	8005bb8 <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 8002412:	2200      	movs	r2, #0
 8002414:	f64e 2188 	movw	r1, #60040	; 0xea88
 8002418:	487d      	ldr	r0, [pc, #500]	; (8002610 <MX_GPIO_Init+0x304>)
 800241a:	f003 fbcd 	bl	8005bb8 <HAL_GPIO_WritePin>
                          |NIVEAU_OUT_Pin|LADELEUCHTE_Pin|RUECKWARNUNG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 800241e:	2200      	movs	r2, #0
 8002420:	f64e 610c 	movw	r1, #60940	; 0xee0c
 8002424:	487b      	ldr	r0, [pc, #492]	; (8002614 <MX_GPIO_Init+0x308>)
 8002426:	f003 fbc7 	bl	8005bb8 <HAL_GPIO_WritePin>
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_RESET);
 800242a:	2200      	movs	r2, #0
 800242c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002430:	4879      	ldr	r0, [pc, #484]	; (8002618 <MX_GPIO_Init+0x30c>)
 8002432:	f003 fbc1 	bl	8005bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 8002436:	f248 0387 	movw	r3, #32903	; 0x8087
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DIGITAL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800243c:	2301      	movs	r3, #1
 800243e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002444:	2300      	movs	r3, #0
 8002446:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800244c:	4619      	mov	r1, r3
 800244e:	486c      	ldr	r0, [pc, #432]	; (8002600 <MX_GPIO_Init+0x2f4>)
 8002450:	f003 f9ee 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ECO_Pin|BC_DOWN_IN_Pin|DURCHFLUSS_Pin|BUTTON2_Pin
 8002454:	f647 7378 	movw	r3, #32632	; 0x7f78
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
                          |KICKDOWN_Pin|LEERLAUF_Pin|KUPPLUNG_NO_Pin|BREMSE_NC_Pin
                          |BREMSE_NO_Pin|SENSE_SDC_AKKU_Pin|SENSE_SDC_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800245a:	2300      	movs	r3, #0
 800245c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002466:	4619      	mov	r1, r3
 8002468:	4865      	ldr	r0, [pc, #404]	; (8002600 <MX_GPIO_Init+0x2f4>)
 800246a:	f003 f9e1 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 800246e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002474:	2301      	movs	r3, #1
 8002476:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247c:	2300      	movs	r3, #0
 800247e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8002480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002484:	4619      	mov	r1, r3
 8002486:	485f      	ldr	r0, [pc, #380]	; (8002604 <MX_GPIO_Init+0x2f8>)
 8002488:	f003 f9d2 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 800248c:	f64d 7347 	movw	r3, #57159	; 0xdf47
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|SD_SW_Pin|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002492:	2303      	movs	r3, #3
 8002494:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800249a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800249e:	4619      	mov	r1, r3
 80024a0:	4858      	ldr	r0, [pc, #352]	; (8002604 <MX_GPIO_Init+0x2f8>)
 80024a2:	f003 f9c5 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|ECON_Pin|RECUPERATION_Pin;
 80024a6:	f640 0303 	movw	r3, #2051	; 0x803
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ac:	2300      	movs	r3, #0
 80024ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b8:	4619      	mov	r1, r3
 80024ba:	4853      	ldr	r0, [pc, #332]	; (8002608 <MX_GPIO_Init+0x2fc>)
 80024bc:	f003 f9b8 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 80024c0:	f24f 033c 	movw	r3, #61500	; 0xf03c
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c6:	2301      	movs	r3, #1
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ce:	2300      	movs	r3, #0
 80024d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d6:	4619      	mov	r1, r3
 80024d8:	484b      	ldr	r0, [pc, #300]	; (8002608 <MX_GPIO_Init+0x2fc>)
 80024da:	f003 f9a9 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PF10 */
  GPIO_InitStruct.Pin = SPI5_CS_Pin|SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin
 80024de:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024e4:	2303      	movs	r3, #3
 80024e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f0:	4619      	mov	r1, r3
 80024f2:	4845      	ldr	r0, [pc, #276]	; (8002608 <MX_GPIO_Init+0x2fc>)
 80024f4:	f003 f99c 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS2812_Pin;
 80024f8:	2308      	movs	r3, #8
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fc:	2301      	movs	r3, #1
 80024fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002504:	2302      	movs	r3, #2
 8002506:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 8002508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250c:	4619      	mov	r1, r3
 800250e:	483d      	ldr	r0, [pc, #244]	; (8002604 <MX_GPIO_Init+0x2f8>)
 8002510:	f003 f98e 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|EMERGENCY_RUN_Pin|HW_WAKE_Pin|OUTA_Pin
 8002514:	f640 6307 	movw	r3, #3591	; 0xe07
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTB_Pin|BC_UP_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800251a:	2300      	movs	r3, #0
 800251c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002526:	4619      	mov	r1, r3
 8002528:	483b      	ldr	r0, [pc, #236]	; (8002618 <MX_GPIO_Init+0x30c>)
 800252a:	f003 f981 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 800252e:	f647 0394 	movw	r3, #30868	; 0x7894
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002534:	2301      	movs	r3, #1
 8002536:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253c:	2300      	movs	r3, #0
 800253e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002544:	4619      	mov	r1, r3
 8002546:	4831      	ldr	r0, [pc, #196]	; (800260c <MX_GPIO_Init+0x300>)
 8002548:	f003 f972 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DCDC_INSTRUCTION_Pin|DCDC_FAULT_Pin|ASR_IN1_Pin|GRA1_Pin
 800254c:	f241 13f3 	movw	r3, #4595	; 0x11f3
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
                          |GRA2_Pin|GRA3_Pin|GRA4_Pin|BC_RESET_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002552:	2300      	movs	r3, #0
 8002554:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800255a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800255e:	4619      	mov	r1, r3
 8002560:	482c      	ldr	r0, [pc, #176]	; (8002614 <MX_GPIO_Init+0x308>)
 8002562:	f003 f965 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSE_SDC_BTB_Pin|BAMOCAR_IN2_Pin;
 8002566:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800256c:	2300      	movs	r3, #0
 800256e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002578:	4619      	mov	r1, r3
 800257a:	4824      	ldr	r0, [pc, #144]	; (800260c <MX_GPIO_Init+0x300>)
 800257c:	f003 f958 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KL15_Pin|ANLASSER_Pin|BAMOCAR_IN1_Pin|ASR_IN2_Pin;
 8002580:	f241 5310 	movw	r3, #5392	; 0x1510
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002586:	2300      	movs	r3, #0
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800258e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002592:	4619      	mov	r1, r3
 8002594:	481e      	ldr	r0, [pc, #120]	; (8002610 <MX_GPIO_Init+0x304>)
 8002596:	f003 f94b 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 800259a:	f64e 2388 	movw	r3, #60040	; 0xea88
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
                          |NIVEAU_OUT_Pin|LADELEUCHTE_Pin|RUECKWARNUNG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a0:	2301      	movs	r3, #1
 80025a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a8:	2300      	movs	r3, #0
 80025aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b0:	4619      	mov	r1, r3
 80025b2:	4817      	ldr	r0, [pc, #92]	; (8002610 <MX_GPIO_Init+0x304>)
 80025b4:	f003 f93c 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 80025b8:	f64e 630c 	movw	r3, #60940	; 0xee0c
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025be:	2301      	movs	r3, #1
 80025c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c6:	2300      	movs	r3, #0
 80025c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ce:	4619      	mov	r1, r3
 80025d0:	4810      	ldr	r0, [pc, #64]	; (8002614 <MX_GPIO_Init+0x308>)
 80025d2:	f003 f92d 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025da:	2300      	movs	r3, #0
 80025dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 80025e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e6:	4619      	mov	r1, r3
 80025e8:	4806      	ldr	r0, [pc, #24]	; (8002604 <MX_GPIO_Init+0x2f8>)
 80025ea:	f003 f921 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OELSTAND_TEMP_Pin;
 80025ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f4:	2301      	movs	r3, #1
 80025f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	e00f      	b.n	800261c <MX_GPIO_Init+0x310>
 80025fc:	40023800 	.word	0x40023800
 8002600:	40021000 	.word	0x40021000
 8002604:	40020800 	.word	0x40020800
 8002608:	40021400 	.word	0x40021400
 800260c:	40020400 	.word	0x40020400
 8002610:	40020c00 	.word	0x40020c00
 8002614:	40021800 	.word	0x40021800
 8002618:	40020000 	.word	0x40020000
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261e:	2300      	movs	r3, #0
 8002620:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OELSTAND_TEMP_GPIO_Port, &GPIO_InitStruct);
 8002622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002626:	4619      	mov	r1, r3
 8002628:	480f      	ldr	r0, [pc, #60]	; (8002668 <MX_GPIO_Init+0x35c>)
 800262a:	f003 f901 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CMD_Pin;
 800262e:	2304      	movs	r3, #4
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002632:	2303      	movs	r3, #3
 8002634:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 800263a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800263e:	4619      	mov	r1, r3
 8002640:	480a      	ldr	r0, [pc, #40]	; (800266c <MX_GPIO_Init+0x360>)
 8002642:	f003 f8f5 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CAN2_TX_Pin|CAN2_RX_Pin|I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002646:	f44f 7358 	mov.w	r3, #864	; 0x360
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800264c:	2303      	movs	r3, #3
 800264e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002658:	4619      	mov	r1, r3
 800265a:	4805      	ldr	r0, [pc, #20]	; (8002670 <MX_GPIO_Init+0x364>)
 800265c:	f003 f8e8 	bl	8005830 <HAL_GPIO_Init>

}
 8002660:	bf00      	nop
 8002662:	3738      	adds	r7, #56	; 0x38
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40020000 	.word	0x40020000
 800266c:	40020c00 	.word	0x40020c00
 8002670:	40020400 	.word	0x40020400

08002674 <__NVIC_SystemReset>:
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002678:	f3bf 8f4f 	dsb	sy
}
 800267c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <__NVIC_SystemReset+0x24>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002686:	4904      	ldr	r1, [pc, #16]	; (8002698 <__NVIC_SystemReset+0x24>)
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <__NVIC_SystemReset+0x28>)
 800268a:	4313      	orrs	r3, r2
 800268c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800268e:	f3bf 8f4f 	dsb	sy
}
 8002692:	bf00      	nop
    __NOP();
 8002694:	bf00      	nop
 8002696:	e7fd      	b.n	8002694 <__NVIC_SystemReset+0x20>
 8002698:	e000ed00 	.word	0xe000ed00
 800269c:	05fa0004 	.word	0x05fa0004

080026a0 <ITM_SendChar>:
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80026a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80026ac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d013      	beq.n	80026e0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80026b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80026bc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80026c0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00b      	beq.n	80026e0 <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 80026c8:	e000      	b.n	80026cc <ITM_SendChar+0x2c>
      __NOP();
 80026ca:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80026cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f9      	beq.n	80026ca <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80026d6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	701a      	strb	r2, [r3, #0]
  return (ch);
 80026e0:	687b      	ldr	r3, [r7, #4]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026f0:	b5b0      	push	{r4, r5, r7, lr}
 80026f2:	b0ce      	sub	sp, #312	; 0x138
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t ADC_VAL[10] = {0};
 80026f6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	609a      	str	r2, [r3, #8]
 8002702:	60da      	str	r2, [r3, #12]
 8002704:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002706:	f001 fb7a 	bl	8003dfe <HAL_Init>

  /* USER CODE BEGIN Init */

	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[6] = {0}, InData[6] = {0}, AnalogData[8] = {0}, TempData[8] = {0};
 800270a:	2300      	movs	r3, #0
 800270c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002710:	2300      	movs	r3, #0
 8002712:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
 8002716:	2300      	movs	r3, #0
 8002718:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800271c:	2300      	movs	r3, #0
 800271e:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8002722:	2300      	movs	r3, #0
 8002724:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002728:	2300      	movs	r3, #0
 800272a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800272e:	2300      	movs	r3, #0
 8002730:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002734:	2300      	movs	r3, #0
 8002736:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	uint8_t status, tmp[4] = {0}, tmp_Lenkung[4] = {0}, task = 0, heizung = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002740:	2300      	movs	r3, #0
 8002742:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002746:	2300      	movs	r3, #0
 8002748:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800274c:	2300      	movs	r3, #0
 800274e:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
	uint16_t count = 0, gas_adc = 0, gas_mean = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
 8002758:	2300      	movs	r3, #0
 800275a:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
 800275e:	2300      	movs	r3, #0
 8002760:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
  	uint32_t lastcan = 0, lastsendcan = 0;
 8002764:	2300      	movs	r3, #0
 8002766:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800276a:	2300      	movs	r3, #0
 800276c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  	static Motor_State statemaschine = Start;

  	// Erstelle Can-Nachrichten
    // Sendenachricht erstellen
  	CAN_TxHeaderTypeDef TxMessage = {0x123, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8002770:	4bb3      	ldr	r3, [pc, #716]	; (8002a40 <main+0x350>)
 8002772:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8002776:	461d      	mov	r5, r3
 8002778:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800277a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800277c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002780:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet digitale Ausgaenge erstellen
  	CAN_TxHeaderTypeDef TxOutput = {MOTOR_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 6, DISABLE};
 8002784:	4baf      	ldr	r3, [pc, #700]	; (8002a44 <main+0x354>)
 8002786:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 800278a:	461d      	mov	r5, r3
 800278c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800278e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002790:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002794:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet digitale Eingaenge erstellen
  	CAN_TxHeaderTypeDef TxInput = {MOTOR_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 6, DISABLE};
 8002798:	4bab      	ldr	r3, [pc, #684]	; (8002a48 <main+0x358>)
 800279a:	f107 0494 	add.w	r4, r7, #148	; 0x94
 800279e:	461d      	mov	r5, r3
 80027a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80027a8:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet Motor1 erstellen
  	CAN_TxHeaderTypeDef TxMotor1 = {MOTOR_CAN_DREHZAHL, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 80027ac:	4ba7      	ldr	r3, [pc, #668]	; (8002a4c <main+0x35c>)
 80027ae:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80027b2:	461d      	mov	r5, r3
 80027b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80027bc:	e884 0003 	stmia.w	r4, {r0, r1}
  	// Sendenachricht Motorsteuergeraet an Bamocar erstellen
  	CAN_TxHeaderTypeDef TxBamocar = {BAMOCAR_TX_ID, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 80027c0:	4ba3      	ldr	r3, [pc, #652]	; (8002a50 <main+0x360>)
 80027c2:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80027c6:	461d      	mov	r5, r3
 80027c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80027d0:	e884 0003 	stmia.w	r4, {r0, r1}
  	// Sendenachricht Motorsteuergeraet an Bamocar erstellen
  	CAN_TxHeaderTypeDef TxLenkung = {LENKUNG1_CAN, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 80027d4:	4b9f      	ldr	r3, [pc, #636]	; (8002a54 <main+0x364>)
 80027d6:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80027da:	461d      	mov	r5, r3
 80027dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80027e4:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet analoge Eingaenge erstellen
  	CAN_TxHeaderTypeDef TxAnalog = {MOTOR_CAN_ANALOG_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 80027e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80027ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80027f0:	4a99      	ldr	r2, [pc, #612]	; (8002a58 <main+0x368>)
 80027f2:	461c      	mov	r4, r3
 80027f4:	4615      	mov	r5, r2
 80027f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80027fe:	e884 0003 	stmia.w	r4, {r0, r1}
  	// Sendenachricht Motorsteuergeraet Temperatur Eingaenge erstellen
  	CAN_TxHeaderTypeDef TxTemperatur = {MOTOR_CAN_TEMPERATUR, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8002802:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002806:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800280a:	4a94      	ldr	r2, [pc, #592]	; (8002a5c <main+0x36c>)
 800280c:	461c      	mov	r4, r3
 800280e:	4615      	mov	r5, r2
 8002810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002814:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002818:	e884 0003 	stmia.w	r4, {r0, r1}

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800281c:	f001 f818 	bl	8003850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002820:	f7ff fd74 	bl	800230c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002824:	f001 fa2c 	bl	8003c80 <MX_USART2_UART_Init>
  MX_CAN3_Init();
 8002828:	f7ff fc82 	bl	8002130 <MX_CAN3_Init>
  MX_ADC1_Init();
 800282c:	f7ff fb84 	bl	8001f38 <MX_ADC1_Init>
  MX_TIM6_Init();
 8002830:	f001 f9ca 	bl	8003bc8 <MX_TIM6_Init>
  MX_CAN1_Init();
 8002834:	f7ff fc46 	bl	80020c4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  // ITM HCLK
  ITM_SendChar('H');
 8002838:	2048      	movs	r0, #72	; 0x48
 800283a:	f7ff ff31 	bl	80026a0 <ITM_SendChar>
  ITM_SendChar('a');
 800283e:	2061      	movs	r0, #97	; 0x61
 8002840:	f7ff ff2e 	bl	80026a0 <ITM_SendChar>
  ITM_SendChar('l');
 8002844:	206c      	movs	r0, #108	; 0x6c
 8002846:	f7ff ff2b 	bl	80026a0 <ITM_SendChar>
  ITM_SendChar('l');
 800284a:	206c      	movs	r0, #108	; 0x6c
 800284c:	f7ff ff28 	bl	80026a0 <ITM_SendChar>
  ITM_SendChar('o');
 8002850:	206f      	movs	r0, #111	; 0x6f
 8002852:	f7ff ff25 	bl	80026a0 <ITM_SendChar>
  ITM_SendChar(' ');
 8002856:	2020      	movs	r0, #32
 8002858:	f7ff ff22 	bl	80026a0 <ITM_SendChar>
  	// Start Timer 6 Interrupt
  	HAL_TIM_Base_Start_IT(&htim6);
 800285c:	4880      	ldr	r0, [pc, #512]	; (8002a60 <main+0x370>)
 800285e:	f004 fb29 	bl	8006eb4 <HAL_TIM_Base_Start_IT>
  	HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer[uart_count], 1);
 8002862:	4b80      	ldr	r3, [pc, #512]	; (8002a64 <main+0x374>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	4b7f      	ldr	r3, [pc, #508]	; (8002a68 <main+0x378>)
 800286a:	4413      	add	r3, r2
 800286c:	2201      	movs	r2, #1
 800286e:	4619      	mov	r1, r3
 8002870:	487e      	ldr	r0, [pc, #504]	; (8002a6c <main+0x37c>)
 8002872:	f004 fefc 	bl	800766e <HAL_UART_Receive_IT>

  	// Schreibe Resetquelle auf die Konsole
#ifdef DEBUG
	printResetSource(readResetSource());
 8002876:	f7fe f9af 	bl	8000bd8 <readResetSource>
 800287a:	4603      	mov	r3, r0
 800287c:	4618      	mov	r0, r3
 800287e:	f7fe f9fd 	bl	8000c7c <printResetSource>

  	// Teste serielle Schnittstelle
  	#define WILLKOMM_STRING_UART	"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
  	uartTransmit(WILLKOMM_STRING_UART, sizeof(WILLKOMM_STRING_UART));
 8002882:	213a      	movs	r1, #58	; 0x3a
 8002884:	487a      	ldr	r0, [pc, #488]	; (8002a70 <main+0x380>)
 8002886:	f7fd ff9b 	bl	80007c0 <uartTransmit>
	#define VERSION_STRING_UART		"Starting Application "
	uartTransmit(VERSION_STRING_UART, sizeof(VERSION_STRING_UART));
 800288a:	2116      	movs	r1, #22
 800288c:	4879      	ldr	r0, [pc, #484]	; (8002a74 <main+0x384>)
 800288e:	f7fd ff97 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(MAJOR, 10);
 8002892:	210a      	movs	r1, #10
 8002894:	2000      	movs	r0, #0
 8002896:	f7fd ffa7 	bl	80007e8 <uartTransmitNumber>
	uartTransmit(".", 1);
 800289a:	2101      	movs	r1, #1
 800289c:	4876      	ldr	r0, [pc, #472]	; (8002a78 <main+0x388>)
 800289e:	f7fd ff8f 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(MINOR, 10);
 80028a2:	210a      	movs	r1, #10
 80028a4:	2001      	movs	r0, #1
 80028a6:	f7fd ff9f 	bl	80007e8 <uartTransmitNumber>
	uartTransmit("\n", 1);
 80028aa:	2101      	movs	r1, #1
 80028ac:	4873      	ldr	r0, [pc, #460]	; (8002a7c <main+0x38c>)
 80028ae:	f7fd ff87 	bl	80007c0 <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 80028b2:	f7fe f967 	bl	8000b84 <collectSystemInfo>
	// Leds Testen
//  testPCB_Leds();
//	testCockpit_Leds();

  	// Testen der Versorgungsspannung am Shutdown-Circuit
  	testSDC();
 80028b6:	f7ff fa89 	bl	8001dcc <testSDC>

  	// Alle Fehler Cockpit loeschen
  	cockpit_default();
 80028ba:	f7ff fa3d 	bl	8001d38 <cockpit_default>
  	// Setze LED Green
  	leuchten_out.GreenLed = 1;
 80028be:	4a70      	ldr	r2, [pc, #448]	; (8002a80 <main+0x390>)
 80028c0:	7853      	ldrb	r3, [r2, #1]
 80028c2:	f043 0310 	orr.w	r3, r3, #16
 80028c6:	7053      	strb	r3, [r2, #1]
  	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 80028c8:	4b6d      	ldr	r3, [pc, #436]	; (8002a80 <main+0x390>)
 80028ca:	785b      	ldrb	r3, [r3, #1]
 80028cc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	461a      	mov	r2, r3
 80028d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028d8:	486a      	ldr	r0, [pc, #424]	; (8002a84 <main+0x394>)
 80028da:	f003 f96d 	bl	8005bb8 <HAL_GPIO_WritePin>

  	// Lese alle Eingaenge
  	readall_inputs();
 80028de:	f7fe fda5 	bl	800142c <readall_inputs>

    // Sendenachricht 0x123 mit Dummy-Daten fuellen
  	for (uint8_t j = 0; j < 8; j++)
 80028e2:	2300      	movs	r3, #0
 80028e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 80028e8:	e00f      	b.n	800290a <main+0x21a>
  		TxData[j] = (j + 1);
 80028ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028ee:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 80028f2:	3201      	adds	r2, #1
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80028fa:	443b      	add	r3, r7
 80028fc:	f803 2c34 	strb.w	r2, [r3, #-52]
  	for (uint8_t j = 0; j < 8; j++)
 8002900:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002904:	3301      	adds	r3, #1
 8002906:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 800290a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800290e:	2b07      	cmp	r3, #7
 8002910:	d9eb      	bls.n	80028ea <main+0x1fa>

  	// Starte While-Schleife
#define MAINWHILE				"\nStarte While Schleife\n"
  	uartTransmit(MAINWHILE, sizeof(MAINWHILE));
 8002912:	2118      	movs	r1, #24
 8002914:	485c      	ldr	r0, [pc, #368]	; (8002a88 <main+0x398>)
 8002916:	f7fd ff53 	bl	80007c0 <uartTransmit>


  	if (statemaschine == Start)
 800291a:	4b5c      	ldr	r3, [pc, #368]	; (8002a8c <main+0x39c>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d110      	bne.n	8002944 <main+0x254>
  	{
  		statemaschine = Ready;
 8002922:	4b5a      	ldr	r3, [pc, #360]	; (8002a8c <main+0x39c>)
 8002924:	2201      	movs	r2, #1
 8002926:	701a      	strb	r2, [r3, #0]
  		uartTransmit("Ready\n", 6);
 8002928:	2106      	movs	r1, #6
 800292a:	4859      	ldr	r0, [pc, #356]	; (8002a90 <main+0x3a0>)
 800292c:	f7fd ff48 	bl	80007c0 <uartTransmit>

  		system_out.F18 = 1;
 8002930:	4a58      	ldr	r2, [pc, #352]	; (8002a94 <main+0x3a4>)
 8002932:	7813      	ldrb	r3, [r2, #0]
 8002934:	f043 0304 	orr.w	r3, r3, #4
 8002938:	7013      	strb	r3, [r2, #0]
  		system_out.F54 = 1;
 800293a:	4a56      	ldr	r2, [pc, #344]	; (8002a94 <main+0x3a4>)
 800293c:	7813      	ldrb	r3, [r2, #0]
 800293e:	f043 0302 	orr.w	r3, r3, #2
 8002942:	7013      	strb	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (UART2_rxBuffer[uart_count-1] == '\r')
 8002944:	4b47      	ldr	r3, [pc, #284]	; (8002a64 <main+0x374>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	3b01      	subs	r3, #1
 800294a:	4a47      	ldr	r2, [pc, #284]	; (8002a68 <main+0x378>)
 800294c:	5cd3      	ldrb	r3, [r2, r3]
 800294e:	2b0d      	cmp	r3, #13
 8002950:	f040 8142 	bne.w	8002bd8 <main+0x4e8>
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)"\nEingabe OK\r\n", 13, 100);
 8002954:	2364      	movs	r3, #100	; 0x64
 8002956:	220d      	movs	r2, #13
 8002958:	494f      	ldr	r1, [pc, #316]	; (8002a98 <main+0x3a8>)
 800295a:	4844      	ldr	r0, [pc, #272]	; (8002a6c <main+0x37c>)
 800295c:	f004 fe04 	bl	8007568 <HAL_UART_Transmit>
			if (UART2_rxBuffer[0] == 'R' && UART2_rxBuffer[1] == 'E' && UART2_rxBuffer[2] == 'S')
 8002960:	4b41      	ldr	r3, [pc, #260]	; (8002a68 <main+0x378>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b52      	cmp	r3, #82	; 0x52
 8002966:	d120      	bne.n	80029aa <main+0x2ba>
 8002968:	4b3f      	ldr	r3, [pc, #252]	; (8002a68 <main+0x378>)
 800296a:	785b      	ldrb	r3, [r3, #1]
 800296c:	2b45      	cmp	r3, #69	; 0x45
 800296e:	d11c      	bne.n	80029aa <main+0x2ba>
 8002970:	4b3d      	ldr	r3, [pc, #244]	; (8002a68 <main+0x378>)
 8002972:	789b      	ldrb	r3, [r3, #2]
 8002974:	2b53      	cmp	r3, #83	; 0x53
 8002976:	d118      	bne.n	80029aa <main+0x2ba>
			{
				uint8_t c[10] = {204, 205, 205, 205, 205, 205, 205, 205, 205, 185};
 8002978:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800297c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002980:	4a46      	ldr	r2, [pc, #280]	; (8002a9c <main+0x3ac>)
 8002982:	ca07      	ldmia	r2, {r0, r1, r2}
 8002984:	c303      	stmia	r3!, {r0, r1}
 8002986:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)"\a", 1, 100);
 8002988:	2364      	movs	r3, #100	; 0x64
 800298a:	2201      	movs	r2, #1
 800298c:	4944      	ldr	r1, [pc, #272]	; (8002aa0 <main+0x3b0>)
 800298e:	4837      	ldr	r0, [pc, #220]	; (8002a6c <main+0x37c>)
 8002990:	f004 fdea 	bl	8007568 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, c, 10, 100);
 8002994:	f107 0110 	add.w	r1, r7, #16
 8002998:	2364      	movs	r3, #100	; 0x64
 800299a:	220a      	movs	r2, #10
 800299c:	4833      	ldr	r0, [pc, #204]	; (8002a6c <main+0x37c>)
 800299e:	f004 fde3 	bl	8007568 <HAL_UART_Transmit>
				UART2_msg[0] = 1;
 80029a2:	4b40      	ldr	r3, [pc, #256]	; (8002aa4 <main+0x3b4>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	701a      	strb	r2, [r3, #0]
			{
 80029a8:	e113      	b.n	8002bd2 <main+0x4e2>
			}
			else if (UART2_rxBuffer[0] == 'O' && UART2_rxBuffer[1] == 'E' && UART2_rxBuffer[2] == 'L')
 80029aa:	4b2f      	ldr	r3, [pc, #188]	; (8002a68 <main+0x378>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b4f      	cmp	r3, #79	; 0x4f
 80029b0:	d125      	bne.n	80029fe <main+0x30e>
 80029b2:	4b2d      	ldr	r3, [pc, #180]	; (8002a68 <main+0x378>)
 80029b4:	785b      	ldrb	r3, [r3, #1]
 80029b6:	2b45      	cmp	r3, #69	; 0x45
 80029b8:	d121      	bne.n	80029fe <main+0x30e>
 80029ba:	4b2b      	ldr	r3, [pc, #172]	; (8002a68 <main+0x378>)
 80029bc:	789b      	ldrb	r3, [r3, #2]
 80029be:	2b4c      	cmp	r3, #76	; 0x4c
 80029c0:	d11d      	bne.n	80029fe <main+0x30e>
			{
				uartTransmit("Display Oel\r\n", 13);
 80029c2:	210d      	movs	r1, #13
 80029c4:	4838      	ldr	r0, [pc, #224]	; (8002aa8 <main+0x3b8>)
 80029c6:	f7fd fefb 	bl	80007c0 <uartTransmit>
				leuchten_out.Oeldruck = !leuchten_out.Oeldruck;
 80029ca:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <main+0x390>)
 80029cc:	785b      	ldrb	r3, [r3, #1]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf0c      	ite	eq
 80029d8:	2301      	moveq	r3, #1
 80029da:	2300      	movne	r3, #0
 80029dc:	b2d9      	uxtb	r1, r3
 80029de:	4a28      	ldr	r2, [pc, #160]	; (8002a80 <main+0x390>)
 80029e0:	7853      	ldrb	r3, [r2, #1]
 80029e2:	f361 0300 	bfi	r3, r1, #0, #1
 80029e6:	7053      	strb	r3, [r2, #1]
				leuchten_out.GreenLed = leuchten_out.Oeldruck;
 80029e8:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <main+0x390>)
 80029ea:	785b      	ldrb	r3, [r3, #1]
 80029ec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80029f0:	b2d9      	uxtb	r1, r3
 80029f2:	4a23      	ldr	r2, [pc, #140]	; (8002a80 <main+0x390>)
 80029f4:	7853      	ldrb	r3, [r2, #1]
 80029f6:	f361 1304 	bfi	r3, r1, #4, #1
 80029fa:	7053      	strb	r3, [r2, #1]
 80029fc:	e0e9      	b.n	8002bd2 <main+0x4e2>
			}
			else if (UART2_rxBuffer[0] == 'W' && UART2_rxBuffer[1] == 'I' && UART2_rxBuffer[2] == 'S')
 80029fe:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <main+0x378>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b57      	cmp	r3, #87	; 0x57
 8002a04:	d154      	bne.n	8002ab0 <main+0x3c0>
 8002a06:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <main+0x378>)
 8002a08:	785b      	ldrb	r3, [r3, #1]
 8002a0a:	2b49      	cmp	r3, #73	; 0x49
 8002a0c:	d150      	bne.n	8002ab0 <main+0x3c0>
 8002a0e:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <main+0x378>)
 8002a10:	789b      	ldrb	r3, [r3, #2]
 8002a12:	2b53      	cmp	r3, #83	; 0x53
 8002a14:	d14c      	bne.n	8002ab0 <main+0x3c0>
			{
				uartTransmit("Display Wisch\r\n", 15);
 8002a16:	210f      	movs	r1, #15
 8002a18:	4824      	ldr	r0, [pc, #144]	; (8002aac <main+0x3bc>)
 8002a1a:	f7fd fed1 	bl	80007c0 <uartTransmit>
				leuchten_out.Wischwarn = !leuchten_out.Wischwarn;
 8002a1e:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <main+0x390>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf0c      	ite	eq
 8002a2c:	2301      	moveq	r3, #1
 8002a2e:	2300      	movne	r3, #0
 8002a30:	b2d9      	uxtb	r1, r3
 8002a32:	4a13      	ldr	r2, [pc, #76]	; (8002a80 <main+0x390>)
 8002a34:	7813      	ldrb	r3, [r2, #0]
 8002a36:	f361 1386 	bfi	r3, r1, #6, #1
 8002a3a:	7013      	strb	r3, [r2, #0]
 8002a3c:	e0c9      	b.n	8002bd2 <main+0x4e2>
 8002a3e:	bf00      	nop
 8002a40:	080095b0 	.word	0x080095b0
 8002a44:	080095c8 	.word	0x080095c8
 8002a48:	080095e0 	.word	0x080095e0
 8002a4c:	080095f8 	.word	0x080095f8
 8002a50:	08009610 	.word	0x08009610
 8002a54:	08009628 	.word	0x08009628
 8002a58:	08009640 	.word	0x08009640
 8002a5c:	08009658 	.word	0x08009658
 8002a60:	2000016c 	.word	0x2000016c
 8002a64:	20000150 	.word	0x20000150
 8002a68:	20000138 	.word	0x20000138
 8002a6c:	200001b8 	.word	0x200001b8
 8002a70:	080091c0 	.word	0x080091c0
 8002a74:	080091fc 	.word	0x080091fc
 8002a78:	08009214 	.word	0x08009214
 8002a7c:	08009218 	.word	0x08009218
 8002a80:	20000050 	.word	0x20000050
 8002a84:	40020400 	.word	0x40020400
 8002a88:	0800921c 	.word	0x0800921c
 8002a8c:	20000168 	.word	0x20000168
 8002a90:	08009234 	.word	0x08009234
 8002a94:	20000048 	.word	0x20000048
 8002a98:	0800923c 	.word	0x0800923c
 8002a9c:	08009670 	.word	0x08009670
 8002aa0:	0800924c 	.word	0x0800924c
 8002aa4:	20000144 	.word	0x20000144
 8002aa8:	08009250 	.word	0x08009250
 8002aac:	08009260 	.word	0x08009260
			}
			else if (UART2_rxBuffer[0] == 'B' && UART2_rxBuffer[1] == 'R' && UART2_rxBuffer[2] == 'E')
 8002ab0:	4b82      	ldr	r3, [pc, #520]	; (8002cbc <main+0x5cc>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b42      	cmp	r3, #66	; 0x42
 8002ab6:	d118      	bne.n	8002aea <main+0x3fa>
 8002ab8:	4b80      	ldr	r3, [pc, #512]	; (8002cbc <main+0x5cc>)
 8002aba:	785b      	ldrb	r3, [r3, #1]
 8002abc:	2b52      	cmp	r3, #82	; 0x52
 8002abe:	d114      	bne.n	8002aea <main+0x3fa>
 8002ac0:	4b7e      	ldr	r3, [pc, #504]	; (8002cbc <main+0x5cc>)
 8002ac2:	789b      	ldrb	r3, [r3, #2]
 8002ac4:	2b45      	cmp	r3, #69	; 0x45
 8002ac6:	d110      	bne.n	8002aea <main+0x3fa>
			{
				uartTransmit("Display Brems\r\n", 15);
 8002ac8:	210f      	movs	r1, #15
 8002aca:	487d      	ldr	r0, [pc, #500]	; (8002cc0 <main+0x5d0>)
 8002acc:	f7fd fe78 	bl	80007c0 <uartTransmit>
				leuchten_out.Bremswarn = !leuchten_out.Bremswarn;
 8002ad0:	4b7c      	ldr	r3, [pc, #496]	; (8002cc4 <main+0x5d4>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	b25b      	sxtb	r3, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	09db      	lsrs	r3, r3, #7
 8002adc:	b2d9      	uxtb	r1, r3
 8002ade:	4a79      	ldr	r2, [pc, #484]	; (8002cc4 <main+0x5d4>)
 8002ae0:	7813      	ldrb	r3, [r2, #0]
 8002ae2:	f361 13c7 	bfi	r3, r1, #7, #1
 8002ae6:	7013      	strb	r3, [r2, #0]
 8002ae8:	e073      	b.n	8002bd2 <main+0x4e2>
			}
			else if (UART2_rxBuffer[0] == 'R' && UART2_rxBuffer[1] == 'U' && UART2_rxBuffer[2] == 'C')
 8002aea:	4b74      	ldr	r3, [pc, #464]	; (8002cbc <main+0x5cc>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b52      	cmp	r3, #82	; 0x52
 8002af0:	d11b      	bne.n	8002b2a <main+0x43a>
 8002af2:	4b72      	ldr	r3, [pc, #456]	; (8002cbc <main+0x5cc>)
 8002af4:	785b      	ldrb	r3, [r3, #1]
 8002af6:	2b55      	cmp	r3, #85	; 0x55
 8002af8:	d117      	bne.n	8002b2a <main+0x43a>
 8002afa:	4b70      	ldr	r3, [pc, #448]	; (8002cbc <main+0x5cc>)
 8002afc:	789b      	ldrb	r3, [r3, #2]
 8002afe:	2b43      	cmp	r3, #67	; 0x43
 8002b00:	d113      	bne.n	8002b2a <main+0x43a>
			{
				uartTransmit("Display Rueck\r\n", 15);
 8002b02:	210f      	movs	r1, #15
 8002b04:	4870      	ldr	r0, [pc, #448]	; (8002cc8 <main+0x5d8>)
 8002b06:	f7fd fe5b 	bl	80007c0 <uartTransmit>
				leuchten_out.Rueckwarn = !leuchten_out.Rueckwarn;
 8002b0a:	4b6e      	ldr	r3, [pc, #440]	; (8002cc4 <main+0x5d4>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	bf0c      	ite	eq
 8002b18:	2301      	moveq	r3, #1
 8002b1a:	2300      	movne	r3, #0
 8002b1c:	b2d9      	uxtb	r1, r3
 8002b1e:	4a69      	ldr	r2, [pc, #420]	; (8002cc4 <main+0x5d4>)
 8002b20:	7813      	ldrb	r3, [r2, #0]
 8002b22:	f361 1304 	bfi	r3, r1, #4, #1
 8002b26:	7013      	strb	r3, [r2, #0]
 8002b28:	e053      	b.n	8002bd2 <main+0x4e2>
			}
			else if (UART2_rxBuffer[0] == 'B' && UART2_rxBuffer[1] == 'U' && UART2_rxBuffer[2] == 'P')
 8002b2a:	4b64      	ldr	r3, [pc, #400]	; (8002cbc <main+0x5cc>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b42      	cmp	r3, #66	; 0x42
 8002b30:	d10f      	bne.n	8002b52 <main+0x462>
 8002b32:	4b62      	ldr	r3, [pc, #392]	; (8002cbc <main+0x5cc>)
 8002b34:	785b      	ldrb	r3, [r3, #1]
 8002b36:	2b55      	cmp	r3, #85	; 0x55
 8002b38:	d10b      	bne.n	8002b52 <main+0x462>
 8002b3a:	4b60      	ldr	r3, [pc, #384]	; (8002cbc <main+0x5cc>)
 8002b3c:	789b      	ldrb	r3, [r3, #2]
 8002b3e:	2b50      	cmp	r3, #80	; 0x50
 8002b40:	d107      	bne.n	8002b52 <main+0x462>
			{
				uartTransmit("BC Up\r\n", 7);
 8002b42:	2107      	movs	r1, #7
 8002b44:	4861      	ldr	r0, [pc, #388]	; (8002ccc <main+0x5dc>)
 8002b46:	f7fd fe3b 	bl	80007c0 <uartTransmit>
				UART2_msg[0] = 2;
 8002b4a:	4b61      	ldr	r3, [pc, #388]	; (8002cd0 <main+0x5e0>)
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	701a      	strb	r2, [r3, #0]
 8002b50:	e03f      	b.n	8002bd2 <main+0x4e2>
			}
			else if (UART2_rxBuffer[0] == 'B' && UART2_rxBuffer[1] == 'D' && UART2_rxBuffer[2] == 'O')
 8002b52:	4b5a      	ldr	r3, [pc, #360]	; (8002cbc <main+0x5cc>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b42      	cmp	r3, #66	; 0x42
 8002b58:	d10f      	bne.n	8002b7a <main+0x48a>
 8002b5a:	4b58      	ldr	r3, [pc, #352]	; (8002cbc <main+0x5cc>)
 8002b5c:	785b      	ldrb	r3, [r3, #1]
 8002b5e:	2b44      	cmp	r3, #68	; 0x44
 8002b60:	d10b      	bne.n	8002b7a <main+0x48a>
 8002b62:	4b56      	ldr	r3, [pc, #344]	; (8002cbc <main+0x5cc>)
 8002b64:	789b      	ldrb	r3, [r3, #2]
 8002b66:	2b4f      	cmp	r3, #79	; 0x4f
 8002b68:	d107      	bne.n	8002b7a <main+0x48a>
			{
				uartTransmit("BC Down\r\n", 9);
 8002b6a:	2109      	movs	r1, #9
 8002b6c:	4859      	ldr	r0, [pc, #356]	; (8002cd4 <main+0x5e4>)
 8002b6e:	f7fd fe27 	bl	80007c0 <uartTransmit>
				UART2_msg[0] = 3;
 8002b72:	4b57      	ldr	r3, [pc, #348]	; (8002cd0 <main+0x5e0>)
 8002b74:	2203      	movs	r2, #3
 8002b76:	701a      	strb	r2, [r3, #0]
 8002b78:	e02b      	b.n	8002bd2 <main+0x4e2>
			}
			else if (UART2_rxBuffer[0] == 'B' && UART2_rxBuffer[1] == 'R' && UART2_rxBuffer[2] == 'S')
 8002b7a:	4b50      	ldr	r3, [pc, #320]	; (8002cbc <main+0x5cc>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b42      	cmp	r3, #66	; 0x42
 8002b80:	d10f      	bne.n	8002ba2 <main+0x4b2>
 8002b82:	4b4e      	ldr	r3, [pc, #312]	; (8002cbc <main+0x5cc>)
 8002b84:	785b      	ldrb	r3, [r3, #1]
 8002b86:	2b52      	cmp	r3, #82	; 0x52
 8002b88:	d10b      	bne.n	8002ba2 <main+0x4b2>
 8002b8a:	4b4c      	ldr	r3, [pc, #304]	; (8002cbc <main+0x5cc>)
 8002b8c:	789b      	ldrb	r3, [r3, #2]
 8002b8e:	2b53      	cmp	r3, #83	; 0x53
 8002b90:	d107      	bne.n	8002ba2 <main+0x4b2>
			{
				uartTransmit("BC Reset\r\n", 10);
 8002b92:	210a      	movs	r1, #10
 8002b94:	4850      	ldr	r0, [pc, #320]	; (8002cd8 <main+0x5e8>)
 8002b96:	f7fd fe13 	bl	80007c0 <uartTransmit>
				UART2_msg[0] = 4;
 8002b9a:	4b4d      	ldr	r3, [pc, #308]	; (8002cd0 <main+0x5e0>)
 8002b9c:	2204      	movs	r2, #4
 8002b9e:	701a      	strb	r2, [r3, #0]
 8002ba0:	e017      	b.n	8002bd2 <main+0x4e2>
			}
			else
			{
				uint8_t c[10] = {204, 205, 205, 205, 205, 205, 205, 205, 205, 185};
 8002ba2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002ba6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002baa:	4a4c      	ldr	r2, [pc, #304]	; (8002cdc <main+0x5ec>)
 8002bac:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bae:	c303      	stmia	r3!, {r0, r1}
 8002bb0:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)"\a", 1, 100);
 8002bb2:	2364      	movs	r3, #100	; 0x64
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	494a      	ldr	r1, [pc, #296]	; (8002ce0 <main+0x5f0>)
 8002bb8:	484a      	ldr	r0, [pc, #296]	; (8002ce4 <main+0x5f4>)
 8002bba:	f004 fcd5 	bl	8007568 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, c, 10, 100);
 8002bbe:	1d39      	adds	r1, r7, #4
 8002bc0:	2364      	movs	r3, #100	; 0x64
 8002bc2:	220a      	movs	r2, #10
 8002bc4:	4847      	ldr	r0, [pc, #284]	; (8002ce4 <main+0x5f4>)
 8002bc6:	f004 fccf 	bl	8007568 <HAL_UART_Transmit>
				uartTransmit("Falsche Eingabe\r\n", 17);
 8002bca:	2111      	movs	r1, #17
 8002bcc:	4846      	ldr	r0, [pc, #280]	; (8002ce8 <main+0x5f8>)
 8002bce:	f7fd fdf7 	bl	80007c0 <uartTransmit>
			}
			uart_count = 0;
 8002bd2:	4b46      	ldr	r3, [pc, #280]	; (8002cec <main+0x5fc>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	701a      	strb	r2, [r3, #0]
		}

	  	switch (UART2_msg[0])
 8002bd8:	4b3d      	ldr	r3, [pc, #244]	; (8002cd0 <main+0x5e0>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	f200 808c 	bhi.w	8002cfc <main+0x60c>
 8002be4:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <main+0x4fc>)
 8002be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bea:	bf00      	nop
 8002bec:	08002bfd 	.word	0x08002bfd
 8002bf0:	08002c0d 	.word	0x08002c0d
 8002bf4:	08002c47 	.word	0x08002c47
 8002bf8:	08002c81 	.word	0x08002c81
	  	{
	  		case 1:
				HAL_UART_Transmit(&huart2, (uint8_t*)"\nSystem Reset\r\n", 15, 100);
 8002bfc:	2364      	movs	r3, #100	; 0x64
 8002bfe:	220f      	movs	r2, #15
 8002c00:	493b      	ldr	r1, [pc, #236]	; (8002cf0 <main+0x600>)
 8002c02:	4838      	ldr	r0, [pc, #224]	; (8002ce4 <main+0x5f4>)
 8002c04:	f004 fcb0 	bl	8007568 <HAL_UART_Transmit>
				NVIC_SystemReset();
 8002c08:	f7ff fd34 	bl	8002674 <__NVIC_SystemReset>
			break;
	  		case 2:
	  			komfort_out.BC_Up_Out = !komfort_out.BC_Up_Out;
 8002c0c:	4b39      	ldr	r3, [pc, #228]	; (8002cf4 <main+0x604>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	bf0c      	ite	eq
 8002c1a:	2301      	moveq	r3, #1
 8002c1c:	2300      	movne	r3, #0
 8002c1e:	b2d9      	uxtb	r1, r3
 8002c20:	4a34      	ldr	r2, [pc, #208]	; (8002cf4 <main+0x604>)
 8002c22:	7813      	ldrb	r3, [r2, #0]
 8002c24:	f361 0341 	bfi	r3, r1, #1, #1
 8002c28:	7013      	strb	r3, [r2, #0]
	  			HAL_GPIO_WritePin(BC_UP_OUT_GPIO_Port, BC_UP_OUT_Pin, komfort_out.BC_Up_Out);
 8002c2a:	4b32      	ldr	r3, [pc, #200]	; (8002cf4 <main+0x604>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	2110      	movs	r1, #16
 8002c38:	482f      	ldr	r0, [pc, #188]	; (8002cf8 <main+0x608>)
 8002c3a:	f002 ffbd 	bl	8005bb8 <HAL_GPIO_WritePin>
	  			UART2_msg[0] = 0;
 8002c3e:	4b24      	ldr	r3, [pc, #144]	; (8002cd0 <main+0x5e0>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
			break;
 8002c44:	e05b      	b.n	8002cfe <main+0x60e>
	  		case 3:
	  			komfort_out.BC_Down_Out = !komfort_out.BC_Down_Out;
 8002c46:	4b2b      	ldr	r3, [pc, #172]	; (8002cf4 <main+0x604>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	bf0c      	ite	eq
 8002c54:	2301      	moveq	r3, #1
 8002c56:	2300      	movne	r3, #0
 8002c58:	b2d9      	uxtb	r1, r3
 8002c5a:	4a26      	ldr	r2, [pc, #152]	; (8002cf4 <main+0x604>)
 8002c5c:	7813      	ldrb	r3, [r2, #0]
 8002c5e:	f361 0382 	bfi	r3, r1, #2, #1
 8002c62:	7013      	strb	r3, [r2, #0]
	  			HAL_GPIO_WritePin(BC_DOWN_OUT_GPIO_Port, BC_DOWN_OUT_Pin, komfort_out.BC_Down_Out);
 8002c64:	4b23      	ldr	r3, [pc, #140]	; (8002cf4 <main+0x604>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	461a      	mov	r2, r3
 8002c70:	2108      	movs	r1, #8
 8002c72:	4821      	ldr	r0, [pc, #132]	; (8002cf8 <main+0x608>)
 8002c74:	f002 ffa0 	bl	8005bb8 <HAL_GPIO_WritePin>
	  			UART2_msg[0] = 0;
 8002c78:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <main+0x5e0>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
	  		break;
 8002c7e:	e03e      	b.n	8002cfe <main+0x60e>
	  		case 4:
	  			komfort_out.BC_Rst_Out = !komfort_out.BC_Rst_Out;
 8002c80:	4b1c      	ldr	r3, [pc, #112]	; (8002cf4 <main+0x604>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	bf0c      	ite	eq
 8002c8e:	2301      	moveq	r3, #1
 8002c90:	2300      	movne	r3, #0
 8002c92:	b2d9      	uxtb	r1, r3
 8002c94:	4a17      	ldr	r2, [pc, #92]	; (8002cf4 <main+0x604>)
 8002c96:	7813      	ldrb	r3, [r2, #0]
 8002c98:	f361 0300 	bfi	r3, r1, #0, #1
 8002c9c:	7013      	strb	r3, [r2, #0]
	  			HAL_GPIO_WritePin(BC_RESET_OUT_GPIO_Port, BC_RESET_OUT_Pin, komfort_out.BC_Rst_Out);
 8002c9e:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <main+0x604>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2120      	movs	r1, #32
 8002cac:	4812      	ldr	r0, [pc, #72]	; (8002cf8 <main+0x608>)
 8002cae:	f002 ff83 	bl	8005bb8 <HAL_GPIO_WritePin>
	  			UART2_msg[0] = 0;
 8002cb2:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <main+0x5e0>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
	  		break;
 8002cb8:	e021      	b.n	8002cfe <main+0x60e>
 8002cba:	bf00      	nop
 8002cbc:	20000138 	.word	0x20000138
 8002cc0:	08009270 	.word	0x08009270
 8002cc4:	20000050 	.word	0x20000050
 8002cc8:	08009280 	.word	0x08009280
 8002ccc:	08009290 	.word	0x08009290
 8002cd0:	20000144 	.word	0x20000144
 8002cd4:	08009298 	.word	0x08009298
 8002cd8:	080092a4 	.word	0x080092a4
 8002cdc:	08009670 	.word	0x08009670
 8002ce0:	0800924c 	.word	0x0800924c
 8002ce4:	200001b8 	.word	0x200001b8
 8002ce8:	080092b0 	.word	0x080092b0
 8002cec:	20000150 	.word	0x20000150
 8002cf0:	080092c4 	.word	0x080092c4
 8002cf4:	20000054 	.word	0x20000054
 8002cf8:	40021400 	.word	0x40021400
			default:
			break;
 8002cfc:	bf00      	nop
		}

	  	// Statemaschine
	  	if ((statemaschine == Ready) && (system_in.KL15 != 1))
 8002cfe:	4bb5      	ldr	r3, [pc, #724]	; (8002fd4 <main+0x8e4>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d117      	bne.n	8002d36 <main+0x646>
 8002d06:	4bb4      	ldr	r3, [pc, #720]	; (8002fd8 <main+0x8e8>)
 8002d08:	785b      	ldrb	r3, [r3, #1]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d110      	bne.n	8002d36 <main+0x646>
	  	{
	  		statemaschine = KL15;
 8002d14:	4baf      	ldr	r3, [pc, #700]	; (8002fd4 <main+0x8e4>)
 8002d16:	2202      	movs	r2, #2
 8002d18:	701a      	strb	r2, [r3, #0]
	  		leuchten_out.Niveau = 1;
 8002d1a:	4ab0      	ldr	r2, [pc, #704]	; (8002fdc <main+0x8ec>)
 8002d1c:	7853      	ldrb	r3, [r2, #1]
 8002d1e:	f043 0302 	orr.w	r3, r3, #2
 8002d22:	7053      	strb	r3, [r2, #1]
	  		leuchten_out.Anhaenger = 1;
 8002d24:	4aad      	ldr	r2, [pc, #692]	; (8002fdc <main+0x8ec>)
 8002d26:	7853      	ldrb	r3, [r2, #1]
 8002d28:	f043 0304 	orr.w	r3, r3, #4
 8002d2c:	7053      	strb	r3, [r2, #1]
	  		uartTransmit("KL15\n", 5);
 8002d2e:	2105      	movs	r1, #5
 8002d30:	48ab      	ldr	r0, [pc, #684]	; (8002fe0 <main+0x8f0>)
 8002d32:	f7fd fd45 	bl	80007c0 <uartTransmit>
	  	}

	  	if ((statemaschine == KL15) && (system_in.KL15 == 1))
 8002d36:	4ba7      	ldr	r3, [pc, #668]	; (8002fd4 <main+0x8e4>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d10d      	bne.n	8002d5a <main+0x66a>
 8002d3e:	4ba6      	ldr	r3, [pc, #664]	; (8002fd8 <main+0x8e8>)
 8002d40:	785b      	ldrb	r3, [r3, #1]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d006      	beq.n	8002d5a <main+0x66a>
	  	{
	  		statemaschine = Ausschalten;
 8002d4c:	4ba1      	ldr	r3, [pc, #644]	; (8002fd4 <main+0x8e4>)
 8002d4e:	2205      	movs	r2, #5
 8002d50:	701a      	strb	r2, [r3, #0]
	  		uartTransmit("Ausschalten\n", 12);
 8002d52:	210c      	movs	r1, #12
 8002d54:	48a3      	ldr	r0, [pc, #652]	; (8002fe4 <main+0x8f4>)
 8002d56:	f7fd fd33 	bl	80007c0 <uartTransmit>
	  	}

	  	if ((statemaschine == KL15) && (system_in.Anlasser != 1))
 8002d5a:	4b9e      	ldr	r3, [pc, #632]	; (8002fd4 <main+0x8e4>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d124      	bne.n	8002dac <main+0x6bc>
 8002d62:	4b9d      	ldr	r3, [pc, #628]	; (8002fd8 <main+0x8e8>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d11d      	bne.n	8002dac <main+0x6bc>
	  	{
	  		statemaschine = Anlasser;
 8002d70:	4b98      	ldr	r3, [pc, #608]	; (8002fd4 <main+0x8e4>)
 8002d72:	2203      	movs	r2, #3
 8002d74:	701a      	strb	r2, [r3, #0]
	  		leuchten_out.Buzzer = 1;
 8002d76:	4a99      	ldr	r2, [pc, #612]	; (8002fdc <main+0x8ec>)
 8002d78:	7813      	ldrb	r3, [r2, #0]
 8002d7a:	f043 0308 	orr.w	r3, r3, #8
 8002d7e:	7013      	strb	r3, [r2, #0]
	  		uartTransmit("Anlasser\n", 9);
 8002d80:	2109      	movs	r1, #9
 8002d82:	4899      	ldr	r0, [pc, #612]	; (8002fe8 <main+0x8f8>)
 8002d84:	f7fd fd1c 	bl	80007c0 <uartTransmit>
	  		HAL_Delay(250);
 8002d88:	20fa      	movs	r0, #250	; 0xfa
 8002d8a:	f001 f895 	bl	8003eb8 <HAL_Delay>
	  		leuchten_out.Buzzer = 0;
 8002d8e:	4a93      	ldr	r2, [pc, #588]	; (8002fdc <main+0x8ec>)
 8002d90:	7813      	ldrb	r3, [r2, #0]
 8002d92:	f36f 03c3 	bfc	r3, #3, #1
 8002d96:	7013      	strb	r3, [r2, #0]
	  		leuchten_out.Niveau = 0;
 8002d98:	4a90      	ldr	r2, [pc, #576]	; (8002fdc <main+0x8ec>)
 8002d9a:	7853      	ldrb	r3, [r2, #1]
 8002d9c:	f36f 0341 	bfc	r3, #1, #1
 8002da0:	7053      	strb	r3, [r2, #1]
	  		leuchten_out.Anhaenger = 0;
 8002da2:	4a8e      	ldr	r2, [pc, #568]	; (8002fdc <main+0x8ec>)
 8002da4:	7853      	ldrb	r3, [r2, #1]
 8002da6:	f36f 0382 	bfc	r3, #2, #1
 8002daa:	7053      	strb	r3, [r2, #1]
	  	}

	  	if ((statemaschine == Anlasser) && (system_in.KL15 == 1))
 8002dac:	4b89      	ldr	r3, [pc, #548]	; (8002fd4 <main+0x8e4>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d10d      	bne.n	8002dd0 <main+0x6e0>
 8002db4:	4b88      	ldr	r3, [pc, #544]	; (8002fd8 <main+0x8e8>)
 8002db6:	785b      	ldrb	r3, [r3, #1]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d006      	beq.n	8002dd0 <main+0x6e0>
	  	{
	  		statemaschine = Ausschalten;
 8002dc2:	4b84      	ldr	r3, [pc, #528]	; (8002fd4 <main+0x8e4>)
 8002dc4:	2205      	movs	r2, #5
 8002dc6:	701a      	strb	r2, [r3, #0]
	  		uartTransmit("Ausschalten\n", 12);
 8002dc8:	210c      	movs	r1, #12
 8002dca:	4886      	ldr	r0, [pc, #536]	; (8002fe4 <main+0x8f4>)
 8002dcc:	f7fd fcf8 	bl	80007c0 <uartTransmit>
	  	}

	  	if ((statemaschine == Anlasser) && (system_in.BremseNO == 1) && (system_in.BremseNC == 1))
 8002dd0:	4b80      	ldr	r3, [pc, #512]	; (8002fd4 <main+0x8e4>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d119      	bne.n	8002e0c <main+0x71c>
 8002dd8:	4b7f      	ldr	r3, [pc, #508]	; (8002fd8 <main+0x8e8>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d012      	beq.n	8002e0c <main+0x71c>
 8002de6:	4b7c      	ldr	r3, [pc, #496]	; (8002fd8 <main+0x8e8>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00b      	beq.n	8002e0c <main+0x71c>
	  	{
	  		statemaschine = ReadyToDrive;
 8002df4:	4b77      	ldr	r3, [pc, #476]	; (8002fd4 <main+0x8e4>)
 8002df6:	2204      	movs	r2, #4
 8002df8:	701a      	strb	r2, [r3, #0]
	  		sdc_in.Anlasser = 1;
 8002dfa:	4a7c      	ldr	r2, [pc, #496]	; (8002fec <main+0x8fc>)
 8002dfc:	7813      	ldrb	r3, [r2, #0]
 8002dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e02:	7013      	strb	r3, [r2, #0]
	  		uartTransmit("ReadyToDrive\n", 13);
 8002e04:	210d      	movs	r1, #13
 8002e06:	487a      	ldr	r0, [pc, #488]	; (8002ff0 <main+0x900>)
 8002e08:	f7fd fcda 	bl	80007c0 <uartTransmit>
	  	}

	  	if ((statemaschine == ReadyToDrive) && (system_in.KL15 == 1))
 8002e0c:	4b71      	ldr	r3, [pc, #452]	; (8002fd4 <main+0x8e4>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d112      	bne.n	8002e3a <main+0x74a>
 8002e14:	4b70      	ldr	r3, [pc, #448]	; (8002fd8 <main+0x8e8>)
 8002e16:	785b      	ldrb	r3, [r3, #1]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00b      	beq.n	8002e3a <main+0x74a>
	  	{
	  		statemaschine = Ausschalten;
 8002e22:	4b6c      	ldr	r3, [pc, #432]	; (8002fd4 <main+0x8e4>)
 8002e24:	2205      	movs	r2, #5
 8002e26:	701a      	strb	r2, [r3, #0]
	  		uartTransmit("Ausschalten\n", 12);
 8002e28:	210c      	movs	r1, #12
 8002e2a:	486e      	ldr	r0, [pc, #440]	; (8002fe4 <main+0x8f4>)
 8002e2c:	f7fd fcc8 	bl	80007c0 <uartTransmit>

	  		sdc_in.Anlasser = 0;
 8002e30:	4a6e      	ldr	r2, [pc, #440]	; (8002fec <main+0x8fc>)
 8002e32:	7813      	ldrb	r3, [r2, #0]
 8002e34:	f36f 1386 	bfc	r3, #6, #1
 8002e38:	7013      	strb	r3, [r2, #0]
	  	if (statemaschine == CriticalError)
	  	{

	  	}

	  	if (statemaschine == Ausschalten)
 8002e3a:	4b66      	ldr	r3, [pc, #408]	; (8002fd4 <main+0x8e4>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b05      	cmp	r3, #5
 8002e40:	d10b      	bne.n	8002e5a <main+0x76a>
	  	{
	  		// Alle Ausgaenge auf Null setzen
	  		system_out.systemoutput = 0;
 8002e42:	4b6c      	ldr	r3, [pc, #432]	; (8002ff4 <main+0x904>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
	  		highcurrent_out.high_out = 0;
 8002e48:	4b6b      	ldr	r3, [pc, #428]	; (8002ff8 <main+0x908>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	701a      	strb	r2, [r3, #0]
	  		komfort_out.komfortoutput = 0;
 8002e4e:	4b6b      	ldr	r3, [pc, #428]	; (8002ffc <main+0x90c>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	701a      	strb	r2, [r3, #0]
	  		leuchten_out.ledoutput = 0;
 8002e54:	4b61      	ldr	r3, [pc, #388]	; (8002fdc <main+0x8ec>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	801a      	strh	r2, [r3, #0]
//	  		komfort_out.BamoOut1 = 0;
//	  		komfort_out.BamoOut2 = 0;
		}

		// PWM Oelstandsensor Kombiinstrument ausgeben
		pwm_oelstand(count);
 8002e5a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fe ff34 	bl	8001ccc <pwm_oelstand>

		// Ausgaenge setzen
		writeall_outputs();
 8002e64:	f7fe fd6a 	bl	800193c <writeall_outputs>

	  	// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 8002e68:	4b65      	ldr	r3, [pc, #404]	; (8003000 <main+0x910>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d10a      	bne.n	8002e88 <main+0x798>
		{
			count++;																	// Zaehler count hochzaehlen
 8002e72:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8002e76:	3301      	adds	r3, #1
 8002e78:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
			millisekunden_flag_1 = 0;													// Setze Millisekunden-Flag zurueck
 8002e7c:	4b60      	ldr	r3, [pc, #384]	; (8003000 <main+0x910>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	701a      	strb	r2, [r3, #0]

			// Setze Flag start, nur wenn millisekunden Flag gesetzt war
			task = 1;
 8002e82:	2301      	movs	r3, #1
 8002e84:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
		}

		// Task wird alle 20 Millisekunden ausgefuehrt
		if (((count % 20) == 0) && (task == 1))
 8002e88:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 8002e8c:	4b5d      	ldr	r3, [pc, #372]	; (8003004 <main+0x914>)
 8002e8e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e92:	0919      	lsrs	r1, r3, #4
 8002e94:	460b      	mov	r3, r1
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d133      	bne.n	8002f0c <main+0x81c>
 8002ea4:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d12f      	bne.n	8002f0c <main+0x81c>
		{
			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 8002eac:	bf00      	nop
 8002eae:	2101      	movs	r1, #1
 8002eb0:	4855      	ldr	r0, [pc, #340]	; (8003008 <main+0x918>)
 8002eb2:	f001 ff97 	bl	8004de4 <HAL_CAN_IsTxMessagePending>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d0f8      	beq.n	8002eae <main+0x7be>
			// Sende Nachricht Motor1
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMotor1, motor1.output, (uint32_t *)CAN_TX_MAILBOX0);
 8002ebc:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	4a52      	ldr	r2, [pc, #328]	; (800300c <main+0x91c>)
 8002ec4:	4850      	ldr	r0, [pc, #320]	; (8003008 <main+0x918>)
 8002ec6:	f001 febd 	bl	8004c44 <HAL_CAN_AddTxMessage>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
			tmp_Lenkung[0] = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
			tmp_Lenkung[1] = 1;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd

			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 8002edc:	bf00      	nop
 8002ede:	2101      	movs	r1, #1
 8002ee0:	4849      	ldr	r0, [pc, #292]	; (8003008 <main+0x918>)
 8002ee2:	f001 ff7f 	bl	8004de4 <HAL_CAN_IsTxMessagePending>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d0f8      	beq.n	8002ede <main+0x7ee>
			status = HAL_CAN_AddTxMessage(&hcan3, &TxLenkung, tmp_Lenkung, (uint32_t *)CAN_TX_MAILBOX0);
 8002eec:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8002ef0:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	4844      	ldr	r0, [pc, #272]	; (8003008 <main+0x918>)
 8002ef8:	f001 fea4 	bl	8004c44 <HAL_CAN_AddTxMessage>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
			hal_error(status);
 8002f02:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe f9a6 	bl	8001258 <hal_error>
		}

		if (((count % 220) == 0) && (task == 1))
 8002f0c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8002f10:	089a      	lsrs	r2, r3, #2
 8002f12:	493f      	ldr	r1, [pc, #252]	; (8003010 <main+0x920>)
 8002f14:	fba1 1202 	umull	r1, r2, r1, r2
 8002f18:	0852      	lsrs	r2, r2, #1
 8002f1a:	21dc      	movs	r1, #220	; 0xdc
 8002f1c:	fb01 f202 	mul.w	r2, r1, r2
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d11f      	bne.n	8002f68 <main+0x878>
 8002f28:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d11b      	bne.n	8002f68 <main+0x878>
		{
			// Bamocar Fehler auslesen
			tmp[0] = 0x3D;
 8002f30:	233d      	movs	r3, #61	; 0x3d
 8002f32:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
			tmp[1] = 0x8F;
 8002f36:	238f      	movs	r3, #143	; 0x8f
 8002f38:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
			tmp[2] = 0x00;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 8002f42:	bf00      	nop
 8002f44:	2101      	movs	r1, #1
 8002f46:	4830      	ldr	r0, [pc, #192]	; (8003008 <main+0x918>)
 8002f48:	f001 ff4c 	bl	8004de4 <HAL_CAN_IsTxMessagePending>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d0f8      	beq.n	8002f44 <main+0x854>
			// Befehl Fehler auslesen an Bamocar senden
			status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
 8002f52:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002f56:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	482a      	ldr	r0, [pc, #168]	; (8003008 <main+0x918>)
 8002f5e:	f001 fe71 	bl	8004c44 <HAL_CAN_AddTxMessage>
 8002f62:	4603      	mov	r3, r0
 8002f64:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
			//hal_error(status);
		}

		// Task wird alle 100 Millisekunden ausgefuehrt
		if (((count % 100) == 0) && (task == 1))
 8002f68:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8002f6c:	4a29      	ldr	r2, [pc, #164]	; (8003014 <main+0x924>)
 8002f6e:	fba2 1203 	umull	r1, r2, r2, r3
 8002f72:	0952      	lsrs	r2, r2, #5
 8002f74:	2164      	movs	r1, #100	; 0x64
 8002f76:	fb01 f202 	mul.w	r2, r1, r2
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f040 811c 	bne.w	80031bc <main+0xacc>
 8002f84:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	f040 8117 	bne.w	80031bc <main+0xacc>
		{
			// alle Inputs einlesen
			readall_inputs();
 8002f8e:	f7fe fa4d 	bl	800142c <readall_inputs>

			// Anlasser abfragen
			readAnlasser();
 8002f92:	f7fe fc79 	bl	8001888 <readAnlasser>

			// Bremse pruefen
			//readBrake();

			if (statemaschine == ReadyToDrive)
 8002f96:	4b0f      	ldr	r3, [pc, #60]	; (8002fd4 <main+0x8e4>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d150      	bne.n	8003040 <main+0x950>
			{
				// Gaspedal pruefen
				gas_adc = readTrottle();
 8002f9e:	f7fe ff41 	bl	8001e24 <readTrottle>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124

				// TODO Wenn Kupplung dann auch gas_mean auf 0 setzen

				// Abfrage ob Mittelwertbildung
				if (gas_adc > 0)															// Wenn Gaspedal Plausible dann Mittelwertbildung
 8002fa8:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d035      	beq.n	800301c <main+0x92c>
				{
					// Mittelwert bilden (https://nestedsoftware.com/2018/03/20/calculating-a-moving-average-on-streaming-data-5a7k.22879.html)
					// Mittelwertbildung aus 10 Werten (Weniger die 10 verkleineren, Mehr die 10 vergroeßern)
					gas_mean = (gas_mean + ((gas_adc - gas_mean)/10));
 8002fb0:	f8b7 2124 	ldrh.w	r2, [r7, #292]	; 0x124
 8002fb4:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	4a17      	ldr	r2, [pc, #92]	; (8003018 <main+0x928>)
 8002fbc:	fb82 1203 	smull	r1, r2, r2, r3
 8002fc0:	1092      	asrs	r2, r2, #2
 8002fc2:	17db      	asrs	r3, r3, #31
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8002fcc:	4413      	add	r3, r2
 8002fce:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
 8002fd2:	e026      	b.n	8003022 <main+0x932>
 8002fd4:	20000168 	.word	0x20000168
 8002fd8:	2000003c 	.word	0x2000003c
 8002fdc:	20000050 	.word	0x20000050
 8002fe0:	080092d4 	.word	0x080092d4
 8002fe4:	080092dc 	.word	0x080092dc
 8002fe8:	080092ec 	.word	0x080092ec
 8002fec:	20000040 	.word	0x20000040
 8002ff0:	080092f8 	.word	0x080092f8
 8002ff4:	20000048 	.word	0x20000048
 8002ff8:	2000004c 	.word	0x2000004c
 8002ffc:	20000054 	.word	0x20000054
 8003000:	2000015c 	.word	0x2000015c
 8003004:	cccccccd 	.word	0xcccccccd
 8003008:	200000f0 	.word	0x200000f0
 800300c:	20000160 	.word	0x20000160
 8003010:	094f2095 	.word	0x094f2095
 8003014:	51eb851f 	.word	0x51eb851f
 8003018:	66666667 	.word	0x66666667
				}
				else																		// Wenn Gaspedal unplausible oder Kupplung getreten
				{
					gas_mean = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
				}

				// Daten in Bamocarformat umwandeln
				tmp[0] = 0x90;
 8003022:	2390      	movs	r3, #144	; 0x90
 8003024:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
				tmp[1] = (gas_mean);
 8003028:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 800302c:	b2db      	uxtb	r3, r3
 800302e:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
				tmp[2] = ((gas_mean) >> 8);
 8003032:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8003036:	0a1b      	lsrs	r3, r3, #8
 8003038:	b29b      	uxth	r3, r3
 800303a:	b2db      	uxtb	r3, r3
 800303c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
			}

			if (system_in.Crash != 1)
 8003040:	4bc7      	ldr	r3, [pc, #796]	; (8003360 <main+0xc70>)
 8003042:	785b      	ldrb	r3, [r3, #1]
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d123      	bne.n	8003096 <main+0x9a6>
			{
				uartTransmit("Crash ausgeloest!!!\n", 20);
 800304e:	2114      	movs	r1, #20
 8003050:	48c4      	ldr	r0, [pc, #784]	; (8003364 <main+0xc74>)
 8003052:	f7fd fbb5 	bl	80007c0 <uartTransmit>
				statemaschine = CriticalError;
 8003056:	4bc4      	ldr	r3, [pc, #784]	; (8003368 <main+0xc78>)
 8003058:	2208      	movs	r2, #8
 800305a:	701a      	strb	r2, [r3, #0]
				system_out.MotorSDC = 0;
 800305c:	4ac3      	ldr	r2, [pc, #780]	; (800336c <main+0xc7c>)
 800305e:	7813      	ldrb	r3, [r2, #0]
 8003060:	f36f 1345 	bfc	r3, #5, #1
 8003064:	7013      	strb	r3, [r2, #0]
				sdc_in.Anlasser = 0;
 8003066:	4ac2      	ldr	r2, [pc, #776]	; (8003370 <main+0xc80>)
 8003068:	7813      	ldrb	r3, [r2, #0]
 800306a:	f36f 1386 	bfc	r3, #6, #1
 800306e:	7013      	strb	r3, [r2, #0]
				leuchten_out.RedLed = 1;
 8003070:	4ac0      	ldr	r2, [pc, #768]	; (8003374 <main+0xc84>)
 8003072:	7853      	ldrb	r3, [r2, #1]
 8003074:	f043 0308 	orr.w	r3, r3, #8
 8003078:	7053      	strb	r3, [r2, #1]
				leuchten_out.GreenLed = 0;
 800307a:	4abe      	ldr	r2, [pc, #760]	; (8003374 <main+0xc84>)
 800307c:	7853      	ldrb	r3, [r2, #1]
 800307e:	f36f 1304 	bfc	r3, #4, #1
 8003082:	7053      	strb	r3, [r2, #1]

				tmp[0] = 0x90;
 8003084:	2390      	movs	r3, #144	; 0x90
 8003086:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
				tmp[1] = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
				tmp[2] = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
			}

			if (sdc_in.BTB_SDC != 1)
 8003096:	4bb6      	ldr	r3, [pc, #728]	; (8003370 <main+0xc80>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d11a      	bne.n	80030da <main+0x9ea>
			{
				uartTransmit("BTB Fehler!!!\n", 14);
 80030a4:	210e      	movs	r1, #14
 80030a6:	48b4      	ldr	r0, [pc, #720]	; (8003378 <main+0xc88>)
 80030a8:	f7fd fb8a 	bl	80007c0 <uartTransmit>
				statemaschine = MotorError;
 80030ac:	4bae      	ldr	r3, [pc, #696]	; (8003368 <main+0xc78>)
 80030ae:	2207      	movs	r2, #7
 80030b0:	701a      	strb	r2, [r3, #0]
				sdc_in.Anlasser = 0;
 80030b2:	4aaf      	ldr	r2, [pc, #700]	; (8003370 <main+0xc80>)
 80030b4:	7813      	ldrb	r3, [r2, #0]
 80030b6:	f36f 1386 	bfc	r3, #6, #1
 80030ba:	7013      	strb	r3, [r2, #0]

				leuchten_out.RedLed = 1;
 80030bc:	4aad      	ldr	r2, [pc, #692]	; (8003374 <main+0xc84>)
 80030be:	7853      	ldrb	r3, [r2, #1]
 80030c0:	f043 0308 	orr.w	r3, r3, #8
 80030c4:	7053      	strb	r3, [r2, #1]
				leuchten_out.GreenLed = 0;
 80030c6:	4aab      	ldr	r2, [pc, #684]	; (8003374 <main+0xc84>)
 80030c8:	7853      	ldrb	r3, [r2, #1]
 80030ca:	f36f 1304 	bfc	r3, #4, #1
 80030ce:	7053      	strb	r3, [r2, #1]
		  		highcurrent_out.Pumpe_Bremse = 1;
 80030d0:	4aaa      	ldr	r2, [pc, #680]	; (800337c <main+0xc8c>)
 80030d2:	7813      	ldrb	r3, [r2, #0]
 80030d4:	f043 0304 	orr.w	r3, r3, #4
 80030d8:	7013      	strb	r3, [r2, #0]
			}

			if (sdc_in.EmergencyRun != 1)
 80030da:	4ba5      	ldr	r3, [pc, #660]	; (8003370 <main+0xc80>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d127      	bne.n	8003138 <main+0xa48>
			{
				uartTransmit("Emergency Run ausgeloest!!!\n", 28);
 80030e8:	211c      	movs	r1, #28
 80030ea:	48a5      	ldr	r0, [pc, #660]	; (8003380 <main+0xc90>)
 80030ec:	f7fd fb68 	bl	80007c0 <uartTransmit>
				statemaschine = MotorError;
 80030f0:	4b9d      	ldr	r3, [pc, #628]	; (8003368 <main+0xc78>)
 80030f2:	2207      	movs	r2, #7
 80030f4:	701a      	strb	r2, [r3, #0]

				leuchten_out.RedLed = 1;
 80030f6:	4a9f      	ldr	r2, [pc, #636]	; (8003374 <main+0xc84>)
 80030f8:	7853      	ldrb	r3, [r2, #1]
 80030fa:	f043 0308 	orr.w	r3, r3, #8
 80030fe:	7053      	strb	r3, [r2, #1]
				leuchten_out.GreenLed = 0;
 8003100:	4a9c      	ldr	r2, [pc, #624]	; (8003374 <main+0xc84>)
 8003102:	7853      	ldrb	r3, [r2, #1]
 8003104:	f36f 1304 	bfc	r3, #4, #1
 8003108:	7053      	strb	r3, [r2, #1]

				gas_mean = gas_mean/10;
 800310a:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 800310e:	4a9d      	ldr	r2, [pc, #628]	; (8003384 <main+0xc94>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	08db      	lsrs	r3, r3, #3
 8003116:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132

				tmp[0] = 0x90;
 800311a:	2390      	movs	r3, #144	; 0x90
 800311c:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
				tmp[1] = (gas_mean);
 8003120:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8003124:	b2db      	uxtb	r3, r3
 8003126:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
				tmp[2] = ((gas_mean) >> 8);
 800312a:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 800312e:	0a1b      	lsrs	r3, r3, #8
 8003130:	b29b      	uxth	r3, r3
 8003132:	b2db      	uxtb	r3, r3
 8003134:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
			}

			if (sdc_in.Akku1SDC != 1)
 8003138:	4b8d      	ldr	r3, [pc, #564]	; (8003370 <main+0xc80>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d127      	bne.n	8003196 <main+0xaa6>
			{
				uartTransmit("Akku SDC Fehler erkannt!!!\n", 27);
 8003146:	211b      	movs	r1, #27
 8003148:	488f      	ldr	r0, [pc, #572]	; (8003388 <main+0xc98>)
 800314a:	f7fd fb39 	bl	80007c0 <uartTransmit>
				statemaschine = MotorWarning;
 800314e:	4b86      	ldr	r3, [pc, #536]	; (8003368 <main+0xc78>)
 8003150:	2206      	movs	r2, #6
 8003152:	701a      	strb	r2, [r3, #0]

				leuchten_out.RedLed = 1;
 8003154:	4a87      	ldr	r2, [pc, #540]	; (8003374 <main+0xc84>)
 8003156:	7853      	ldrb	r3, [r2, #1]
 8003158:	f043 0308 	orr.w	r3, r3, #8
 800315c:	7053      	strb	r3, [r2, #1]
				leuchten_out.GreenLed = 1;
 800315e:	4a85      	ldr	r2, [pc, #532]	; (8003374 <main+0xc84>)
 8003160:	7853      	ldrb	r3, [r2, #1]
 8003162:	f043 0310 	orr.w	r3, r3, #16
 8003166:	7053      	strb	r3, [r2, #1]

				gas_mean = gas_mean/10;
 8003168:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 800316c:	4a85      	ldr	r2, [pc, #532]	; (8003384 <main+0xc94>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	08db      	lsrs	r3, r3, #3
 8003174:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132

				tmp[0] = 0x90;
 8003178:	2390      	movs	r3, #144	; 0x90
 800317a:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
				tmp[1] = (gas_mean);
 800317e:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8003182:	b2db      	uxtb	r3, r3
 8003184:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
				tmp[2] = ((gas_mean) >> 8);
 8003188:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 800318c:	0a1b      	lsrs	r3, r3, #8
 800318e:	b29b      	uxth	r3, r3
 8003190:	b2db      	uxtb	r3, r3
 8003192:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
			}

			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 8003196:	bf00      	nop
 8003198:	2101      	movs	r1, #1
 800319a:	487c      	ldr	r0, [pc, #496]	; (800338c <main+0xc9c>)
 800319c:	f001 fe22 	bl	8004de4 <HAL_CAN_IsTxMessagePending>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d0f8      	beq.n	8003198 <main+0xaa8>
			// Drehmoment an Bamocar senden
			status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
 80031a6:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80031aa:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80031ae:	2301      	movs	r3, #1
 80031b0:	4876      	ldr	r0, [pc, #472]	; (800338c <main+0xc9c>)
 80031b2:	f001 fd47 	bl	8004c44 <HAL_CAN_AddTxMessage>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
			//hal_error(status);
		}

		// Task wird alle 200 Millisekunden ausgefuehrt
		if (((count % 200) == 0) && (task == 1))
 80031bc:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 80031c0:	4a73      	ldr	r2, [pc, #460]	; (8003390 <main+0xca0>)
 80031c2:	fba2 1203 	umull	r1, r2, r2, r3
 80031c6:	0992      	lsrs	r2, r2, #6
 80031c8:	21c8      	movs	r1, #200	; 0xc8
 80031ca:	fb01 f202 	mul.w	r2, r1, r2
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f040 815d 	bne.w	8003492 <main+0xda2>
 80031d8:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80031dc:	2b01      	cmp	r3, #1
 80031de:	f040 8158 	bne.w	8003492 <main+0xda2>
		{
			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 80031e2:	4b62      	ldr	r3, [pc, #392]	; (800336c <main+0xc7c>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
			OutData[1] = highcurrent_out.high_out;
 80031ea:	4b64      	ldr	r3, [pc, #400]	; (800337c <main+0xc8c>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
			OutData[2] = (leuchten_out.ledoutput >> 8);
 80031f2:	4b60      	ldr	r3, [pc, #384]	; (8003374 <main+0xc84>)
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	0a1b      	lsrs	r3, r3, #8
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
			OutData[3] = leuchten_out.ledoutput;
 8003200:	4b5c      	ldr	r3, [pc, #368]	; (8003374 <main+0xc84>)
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
			OutData[4] = komfort_out.komfortoutput;
 800320a:	4b62      	ldr	r3, [pc, #392]	; (8003394 <main+0xca4>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
			OutData[5] ++;
 8003212:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8003216:	3301      	adds	r3, #1
 8003218:	b2db      	uxtb	r3, r3
 800321a:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101

			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 800321e:	bf00      	nop
 8003220:	2101      	movs	r1, #1
 8003222:	485a      	ldr	r0, [pc, #360]	; (800338c <main+0xc9c>)
 8003224:	f001 fdde 	bl	8004de4 <HAL_CAN_IsTxMessagePending>
 8003228:	4603      	mov	r3, r0
 800322a:	2b01      	cmp	r3, #1
 800322c:	d0f8      	beq.n	8003220 <main+0xb30>
			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX0);
 800322e:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8003232:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8003236:	2301      	movs	r3, #1
 8003238:	4854      	ldr	r0, [pc, #336]	; (800338c <main+0xc9c>)
 800323a:	f001 fd03 	bl	8004c44 <HAL_CAN_AddTxMessage>
 800323e:	4603      	mov	r3, r0
 8003240:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
			//hal_error(status);

			// ADC-Werte einlesen Bremse und Temperaturen
			ADC_VAL[0] = ADC_Bremsdruck();
 8003244:	f7fd fdfc 	bl	8000e40 <ADC_Bremsdruck>
 8003248:	4603      	mov	r3, r0
 800324a:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			ADC_VAL[1] = ADC_Bremsdrucktemperatur();
 800324e:	f7fd ff91 	bl	8001174 <ADC_Bremsdrucktemperatur>
 8003252:	4603      	mov	r3, r0
 8003254:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			ADC_VAL[2] = ADC_STMTemperatur();
 8003258:	f7fd ffc4 	bl	80011e4 <ADC_STMTemperatur>
 800325c:	4603      	mov	r3, r0
 800325e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			ADC_VAL[3] = ADC_PCBTemperatur();
 8003262:	f7fd fedf 	bl	8001024 <ADC_PCBTemperatur>
 8003266:	4603      	mov	r3, r0
 8003268:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] ++;
 800326c:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 8003270:	3301      	adds	r3, #1
 8003272:	b2db      	uxtb	r3, r3
 8003274:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
			InData[1] = (system_in.systeminput >> 8);
 8003278:	4b39      	ldr	r3, [pc, #228]	; (8003360 <main+0xc70>)
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	0a1b      	lsrs	r3, r3, #8
 800327e:	b29b      	uxth	r3, r3
 8003280:	b2db      	uxtb	r3, r3
 8003282:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
			InData[2] = system_in.systeminput;
 8003286:	4b36      	ldr	r3, [pc, #216]	; (8003360 <main+0xc70>)
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
			InData[3] = sdc_in.sdcinput;
 8003290:	4b37      	ldr	r3, [pc, #220]	; (8003370 <main+0xc80>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
			InData[4] = (komfort_in.komfortinput >> 8);
 8003298:	4b3f      	ldr	r3, [pc, #252]	; (8003398 <main+0xca8>)
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	0a1b      	lsrs	r3, r3, #8
 800329e:	b29b      	uxth	r3, r3
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	f887 30f8 	strb.w	r3, [r7, #248]	; 0xf8
			InData[5] = komfort_in.komfortinput;
 80032a6:	4b3c      	ldr	r3, [pc, #240]	; (8003398 <main+0xca8>)
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	f887 30f9 	strb.w	r3, [r7, #249]	; 0xf9

			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 80032b0:	bf00      	nop
 80032b2:	2101      	movs	r1, #1
 80032b4:	4835      	ldr	r0, [pc, #212]	; (800338c <main+0xc9c>)
 80032b6:	f001 fd95 	bl	8004de4 <HAL_CAN_IsTxMessagePending>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d0f8      	beq.n	80032b2 <main+0xbc2>
			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX0);
 80032c0:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 80032c4:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80032c8:	2301      	movs	r3, #1
 80032ca:	4830      	ldr	r0, [pc, #192]	; (800338c <main+0xc9c>)
 80032cc:	f001 fcba 	bl	8004c44 <HAL_CAN_AddTxMessage>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
			//hal_error(status);

			// ADC-Werte einlesen Navi, Klima, KL15
			ADC_VAL[4] = ADC_KL15();
 80032d6:	f7fd fdfd 	bl	8000ed4 <ADC_KL15>
 80032da:	4603      	mov	r3, r0
 80032dc:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
			ADC_VAL[5] = ADC_Klimaflap();
 80032e0:	f7fd fe68 	bl	8000fb4 <ADC_Klimaflap>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
			ADC_VAL[6] = ADC_Info();
 80032ea:	f7fd ff0b 	bl	8001104 <ADC_Info>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			ADC_VAL[7] = ADC_Return();
 80032f4:	f7fd fece 	bl	8001094 <ADC_Return>
 80032f8:	4603      	mov	r3, r0
 80032fa:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a

			// ADC-Werte umwandeln
			AnalogData[0] = ADC_VAL[4];
 80032fe:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8003302:	b2db      	uxtb	r3, r3
 8003304:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec
			AnalogData[1] = (ADC_VAL[4] >> 8) | (ADC_VAL[0] << 4);
 8003308:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 800330c:	0a1b      	lsrs	r3, r3, #8
 800330e:	b29b      	uxth	r3, r3
 8003310:	b25a      	sxtb	r2, r3
 8003312:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	b25b      	sxtb	r3, r3
 800331a:	4313      	orrs	r3, r2
 800331c:	b25b      	sxtb	r3, r3
 800331e:	b2db      	uxtb	r3, r3
 8003320:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
			AnalogData[2] = (ADC_VAL[0] >> 4);
 8003324:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8003328:	091b      	lsrs	r3, r3, #4
 800332a:	b29b      	uxth	r3, r3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
			AnalogData[3] = gas_mean;
 8003332:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8003336:	b2db      	uxtb	r3, r3
 8003338:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
			AnalogData[4] = (gas_mean >> 8) | (ADC_VAL[6] << 4);
 800333c:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8003340:	0a1b      	lsrs	r3, r3, #8
 8003342:	b29b      	uxth	r3, r3
 8003344:	b25a      	sxtb	r2, r3
 8003346:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	b25b      	sxtb	r3, r3
 800334e:	4313      	orrs	r3, r2
 8003350:	b25b      	sxtb	r3, r3
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
			AnalogData[5] = (ADC_VAL[6] >> 4);
 8003358:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	e01d      	b.n	800339c <main+0xcac>
 8003360:	2000003c 	.word	0x2000003c
 8003364:	08009308 	.word	0x08009308
 8003368:	20000168 	.word	0x20000168
 800336c:	20000048 	.word	0x20000048
 8003370:	20000040 	.word	0x20000040
 8003374:	20000050 	.word	0x20000050
 8003378:	08009320 	.word	0x08009320
 800337c:	2000004c 	.word	0x2000004c
 8003380:	08009330 	.word	0x08009330
 8003384:	cccccccd 	.word	0xcccccccd
 8003388:	08009350 	.word	0x08009350
 800338c:	200000f0 	.word	0x200000f0
 8003390:	51eb851f 	.word	0x51eb851f
 8003394:	20000054 	.word	0x20000054
 8003398:	20000044 	.word	0x20000044
 800339c:	b29b      	uxth	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
			AnalogData[6] = ADC_VAL[7];
 80033a4:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
			AnalogData[7] = (ADC_VAL[7] >> 8);
 80033ae:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 80033b2:	0a1b      	lsrs	r3, r3, #8
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3

			// ADC-Werte einlesen Kuehlwassertemperatur
			ADC_VAL[8] = ADC_Kuhlwassertemperatur();
 80033bc:	f7fd fdc2 	bl	8000f44 <ADC_Kuhlwassertemperatur>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

			// ADC-Werte umwandeln
			TempData[0] = ADC_VAL[2];
 80033c6:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
			TempData[1] = (ADC_VAL[2] >> 8) | (ADC_VAL[3] << 4);
 80033d0:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 80033d4:	0a1b      	lsrs	r3, r3, #8
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	b25a      	sxtb	r2, r3
 80033da:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	b25b      	sxtb	r3, r3
 80033e2:	4313      	orrs	r3, r2
 80033e4:	b25b      	sxtb	r3, r3
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
			TempData[2] = (ADC_VAL[3] >> 4);
 80033ec:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			TempData[3] = ADC_VAL[8];
 80033fa:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			TempData[4] = (ADC_VAL[8] >> 8) | (ADC_VAL[1] << 4);
 8003404:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8003408:	0a1b      	lsrs	r3, r3, #8
 800340a:	b29b      	uxth	r3, r3
 800340c:	b25a      	sxtb	r2, r3
 800340e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	b25b      	sxtb	r3, r3
 8003416:	4313      	orrs	r3, r2
 8003418:	b25b      	sxtb	r3, r3
 800341a:	b2db      	uxtb	r3, r3
 800341c:	f887 30e8 	strb.w	r3, [r7, #232]	; 0xe8
			TempData[5] = (ADC_VAL[1] >> 4);
 8003420:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	b29b      	uxth	r3, r3
 8003428:	b2db      	uxtb	r3, r3
 800342a:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9
			TempData[6] = ADC_VAL[5];
 800342e:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea
			TempData[7] = (ADC_VAL[5] >> 8);
 8003438:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 800343c:	0a1b      	lsrs	r3, r3, #8
 800343e:	b29b      	uxth	r3, r3
 8003440:	b2db      	uxtb	r3, r3
 8003442:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb

			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 8003446:	bf00      	nop
 8003448:	2101      	movs	r1, #1
 800344a:	48b9      	ldr	r0, [pc, #740]	; (8003730 <main+0x1040>)
 800344c:	f001 fcca 	bl	8004de4 <HAL_CAN_IsTxMessagePending>
 8003450:	4603      	mov	r3, r0
 8003452:	2b01      	cmp	r3, #1
 8003454:	d0f8      	beq.n	8003448 <main+0xd58>
			// Befehl Fehler auslesen an Bamocar senden
			status = HAL_CAN_AddTxMessage(&hcan3, &TxTemperatur, TempData, (uint32_t *)CAN_TX_MAILBOX0);
 8003456:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800345a:	f107 011c 	add.w	r1, r7, #28
 800345e:	2301      	movs	r3, #1
 8003460:	48b3      	ldr	r0, [pc, #716]	; (8003730 <main+0x1040>)
 8003462:	f001 fbef 	bl	8004c44 <HAL_CAN_AddTxMessage>
 8003466:	4603      	mov	r3, r0
 8003468:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 800346c:	bf00      	nop
 800346e:	2101      	movs	r1, #1
 8003470:	48af      	ldr	r0, [pc, #700]	; (8003730 <main+0x1040>)
 8003472:	f001 fcb7 	bl	8004de4 <HAL_CAN_IsTxMessagePending>
 8003476:	4603      	mov	r3, r0
 8003478:	2b01      	cmp	r3, #1
 800347a:	d0f8      	beq.n	800346e <main+0xd7e>
			status = HAL_CAN_AddTxMessage(&hcan3, &TxAnalog, AnalogData, (uint32_t *)CAN_TX_MAILBOX0);
 800347c:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8003480:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8003484:	2301      	movs	r3, #1
 8003486:	48aa      	ldr	r0, [pc, #680]	; (8003730 <main+0x1040>)
 8003488:	f001 fbdc 	bl	8004c44 <HAL_CAN_AddTxMessage>
 800348c:	4603      	mov	r3, r0
 800348e:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
		}

		if (((count % 400) == 0) && (task == 1))
 8003492:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8003496:	4aa7      	ldr	r2, [pc, #668]	; (8003734 <main+0x1044>)
 8003498:	fba2 1203 	umull	r1, r2, r2, r3
 800349c:	09d2      	lsrs	r2, r2, #7
 800349e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80034a2:	fb01 f202 	mul.w	r2, r1, r2
 80034a6:	1a9b      	subs	r3, r3, r2
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f040 80f0 	bne.w	8003690 <main+0xfa0>
 80034b0:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	f040 80eb 	bne.w	8003690 <main+0xfa0>
		{
			// Return
			if ((ADC_VAL[7] > 1200) && (ADC_VAL[7] < 2900))
 80034ba:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 80034be:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80034c2:	d90a      	bls.n	80034da <main+0xdea>
 80034c4:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 80034c8:	f640 3253 	movw	r2, #2899	; 0xb53
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d804      	bhi.n	80034da <main+0xdea>
			{
				uartTransmit("Return gedrueckt\n", 17);
 80034d0:	2111      	movs	r1, #17
 80034d2:	4899      	ldr	r0, [pc, #612]	; (8003738 <main+0x1048>)
 80034d4:	f7fd f974 	bl	80007c0 <uartTransmit>
 80034d8:	e008      	b.n	80034ec <main+0xdfc>
			}
			else if (ADC_VAL[7] < 1000)
 80034da:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 80034de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034e2:	d203      	bcs.n	80034ec <main+0xdfc>
			{
				uartTransmit("Navi gedrueckt\n", 15);
 80034e4:	210f      	movs	r1, #15
 80034e6:	4895      	ldr	r0, [pc, #596]	; (800373c <main+0x104c>)
 80034e8:	f7fd f96a 	bl	80007c0 <uartTransmit>
			{

			}

			// Info
			if ((ADC_VAL[6] > 1200) && (ADC_VAL[6] < 2900))
 80034ec:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80034f0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80034f4:	d90a      	bls.n	800350c <main+0xe1c>
 80034f6:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80034fa:	f640 3253 	movw	r2, #2899	; 0xb53
 80034fe:	4293      	cmp	r3, r2
 8003500:	d804      	bhi.n	800350c <main+0xe1c>
			{
				uartTransmit("Traffic gedrueckt\n", 18);
 8003502:	2112      	movs	r1, #18
 8003504:	488e      	ldr	r0, [pc, #568]	; (8003740 <main+0x1050>)
 8003506:	f7fd f95b 	bl	80007c0 <uartTransmit>
 800350a:	e008      	b.n	800351e <main+0xe2e>
			}
			else if (ADC_VAL[6] < 1000)
 800350c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8003510:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003514:	d203      	bcs.n	800351e <main+0xe2e>
			{
				uartTransmit("Info gedrueckt\n", 15);
 8003516:	210f      	movs	r1, #15
 8003518:	488a      	ldr	r0, [pc, #552]	; (8003744 <main+0x1054>)
 800351a:	f7fd f951 	bl	80007c0 <uartTransmit>

			}

			// KL15
			// if (ADC_VAL[4] <= 1150)								// Spannungsteiler fuer 36V (22k || 27k)
			if (ADC_VAL[4] < 2300)								// Spannungsteiler fuer 12V (10k || 10k)
 800351e:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8003522:	f640 02fb 	movw	r2, #2299	; 0x8fb
 8003526:	4293      	cmp	r3, r2
 8003528:	d804      	bhi.n	8003534 <main+0xe44>
			{
				uartTransmit("Unterspannung erkannt\n", 22);
 800352a:	2116      	movs	r1, #22
 800352c:	4886      	ldr	r0, [pc, #536]	; (8003748 <main+0x1058>)
 800352e:	f7fd f947 	bl	80007c0 <uartTransmit>
 8003532:	e009      	b.n	8003548 <main+0xe58>
			}
			// else if ADC_VAL[4] >= 4000)						// Spannungsteiler fuer 36V (22k || 27k)
			else if (ADC_VAL[7] >= 3900)						// Spannungsteiler fuer 12V (10k || 10k)
 8003534:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8003538:	f640 723b 	movw	r2, #3899	; 0xf3b
 800353c:	4293      	cmp	r3, r2
 800353e:	d903      	bls.n	8003548 <main+0xe58>
			{
				uartTransmit("Ueberspannung erkannt\n", 22);
 8003540:	2116      	movs	r1, #22
 8003542:	4882      	ldr	r0, [pc, #520]	; (800374c <main+0x105c>)
 8003544:	f7fd f93c 	bl	80007c0 <uartTransmit>
			{

			}

			// Bremsdruck
			if (ADC_VAL[0] < 1000)
 8003548:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800354c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003550:	d204      	bcs.n	800355c <main+0xe6c>
			{
				uartTransmit("Unterdruck erreicht\n", 20);
 8003552:	2114      	movs	r1, #20
 8003554:	487e      	ldr	r0, [pc, #504]	; (8003750 <main+0x1060>)
 8003556:	f7fd f933 	bl	80007c0 <uartTransmit>
 800355a:	e009      	b.n	8003570 <main+0xe80>
			}
			else if (ADC_VAL[0] >= 3500)
 800355c:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8003560:	f640 52ab 	movw	r2, #3499	; 0xdab
 8003564:	4293      	cmp	r3, r2
 8003566:	d903      	bls.n	8003570 <main+0xe80>
			{
				uartTransmit("Unterdruck verloren\n", 20);
 8003568:	2114      	movs	r1, #20
 800356a:	487a      	ldr	r0, [pc, #488]	; (8003754 <main+0x1064>)
 800356c:	f7fd f928 	bl	80007c0 <uartTransmit>
			{

			}

			// STM Temperatur
			temperature = 45; //(int32_t)((TEMP110 - TEMP30) / ((float)(*TEMP110_CAL_VALUE) - (float)(*TEMP30_CAL_VALUE)) * ((float)(*TEMP30_CAL_VALUE)) + TEMP30);
 8003570:	4b79      	ldr	r3, [pc, #484]	; (8003758 <main+0x1068>)
 8003572:	222d      	movs	r2, #45	; 0x2d
 8003574:	601a      	str	r2, [r3, #0]
			if (temperature > 60)
 8003576:	4b78      	ldr	r3, [pc, #480]	; (8003758 <main+0x1068>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b3c      	cmp	r3, #60	; 0x3c
 800357c:	dd04      	ble.n	8003588 <main+0xe98>
			{
				uartTransmit("STM Temperatur ueber 60°C\n", 27);
 800357e:	211b      	movs	r1, #27
 8003580:	4876      	ldr	r0, [pc, #472]	; (800375c <main+0x106c>)
 8003582:	f7fd f91d 	bl	80007c0 <uartTransmit>
 8003586:	e008      	b.n	800359a <main+0xeaa>
			}
			else if (temperature < -20)
 8003588:	4b73      	ldr	r3, [pc, #460]	; (8003758 <main+0x1068>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f113 0f14 	cmn.w	r3, #20
 8003590:	da03      	bge.n	800359a <main+0xeaa>
			{
				uartTransmit("STM Temperatur ueber -20°C\n", 28);
 8003592:	211c      	movs	r1, #28
 8003594:	4872      	ldr	r0, [pc, #456]	; (8003760 <main+0x1070>)
 8003596:	f7fd f913 	bl	80007c0 <uartTransmit>
			{

			}

			// PCB Temperatur
			if (ADC_VAL[3] < 800)
 800359a:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 800359e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80035a2:	d204      	bcs.n	80035ae <main+0xebe>
			{
				uartTransmit("PCB Temperatur ueber 60°C\n", 27);
 80035a4:	211b      	movs	r1, #27
 80035a6:	486f      	ldr	r0, [pc, #444]	; (8003764 <main+0x1074>)
 80035a8:	f7fd f90a 	bl	80007c0 <uartTransmit>
 80035ac:	e009      	b.n	80035c2 <main+0xed2>
			}
			else if (ADC_VAL[3] >= 3700)
 80035ae:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80035b2:	f640 6273 	movw	r2, #3699	; 0xe73
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d903      	bls.n	80035c2 <main+0xed2>
			{
				uartTransmit("PCB Temperatur ueber -20°C\n", 28);
 80035ba:	211c      	movs	r1, #28
 80035bc:	486a      	ldr	r0, [pc, #424]	; (8003768 <main+0x1078>)
 80035be:	f7fd f8ff 	bl	80007c0 <uartTransmit>
			{

			}

			// Bremsdruck Temperatur
			if (ADC_VAL[3] < 800)
 80035c2:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80035c6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80035ca:	d204      	bcs.n	80035d6 <main+0xee6>
			{
				uartTransmit("Bremsdruck Temperatur ueber 60°C\n", 34);
 80035cc:	2122      	movs	r1, #34	; 0x22
 80035ce:	4867      	ldr	r0, [pc, #412]	; (800376c <main+0x107c>)
 80035d0:	f7fd f8f6 	bl	80007c0 <uartTransmit>
 80035d4:	e009      	b.n	80035ea <main+0xefa>
			}
			else if (ADC_VAL[3] >= 3700)
 80035d6:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80035da:	f640 6273 	movw	r2, #3699	; 0xe73
 80035de:	4293      	cmp	r3, r2
 80035e0:	d903      	bls.n	80035ea <main+0xefa>
			{
				uartTransmit("Bremsdruck Temperatur ueber -20°C\n", 35);
 80035e2:	2123      	movs	r1, #35	; 0x23
 80035e4:	4862      	ldr	r0, [pc, #392]	; (8003770 <main+0x1080>)
 80035e6:	f7fd f8eb 	bl	80007c0 <uartTransmit>
			{

			}

			// Klimaflap Temperatur
			if (ADC_VAL[3] < 800)
 80035ea:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80035ee:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80035f2:	d204      	bcs.n	80035fe <main+0xf0e>
			{
				uartTransmit("Klimaflap Temperatur ueber 60°C\n", 33);
 80035f4:	2121      	movs	r1, #33	; 0x21
 80035f6:	485f      	ldr	r0, [pc, #380]	; (8003774 <main+0x1084>)
 80035f8:	f7fd f8e2 	bl	80007c0 <uartTransmit>
 80035fc:	e009      	b.n	8003612 <main+0xf22>
			}
			else if (ADC_VAL[3] >= 3500)
 80035fe:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8003602:	f640 52ab 	movw	r2, #3499	; 0xdab
 8003606:	4293      	cmp	r3, r2
 8003608:	d903      	bls.n	8003612 <main+0xf22>
			{
				uartTransmit("Klimaflap Temperatur ueber -20°C\n", 34);
 800360a:	2122      	movs	r1, #34	; 0x22
 800360c:	485a      	ldr	r0, [pc, #360]	; (8003778 <main+0x1088>)
 800360e:	f7fd f8d7 	bl	80007c0 <uartTransmit>
			{

			}

			// Kuehlwasser Temperatur
			if (ADC_VAL[3] < 800)
 8003612:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8003616:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800361a:	d204      	bcs.n	8003626 <main+0xf36>
			{
				uartTransmit("Kuehlwasser Temperatur ueber 60°C\n", 35);
 800361c:	2123      	movs	r1, #35	; 0x23
 800361e:	4857      	ldr	r0, [pc, #348]	; (800377c <main+0x108c>)
 8003620:	f7fd f8ce 	bl	80007c0 <uartTransmit>
 8003624:	e009      	b.n	800363a <main+0xf4a>
			}
			else if (ADC_VAL[3] >= 3500)
 8003626:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 800362a:	f640 52ab 	movw	r2, #3499	; 0xdab
 800362e:	4293      	cmp	r3, r2
 8003630:	d903      	bls.n	800363a <main+0xf4a>
			{
				uartTransmit("Kuehlwasser Temperatur ueber -20°C\n", 36);
 8003632:	2124      	movs	r1, #36	; 0x24
 8003634:	4852      	ldr	r0, [pc, #328]	; (8003780 <main+0x1090>)
 8003636:	f7fd f8c3 	bl	80007c0 <uartTransmit>
			else
			{

			}

			if (system_in.DCDC_Inst == 1)
 800363a:	4b52      	ldr	r3, [pc, #328]	; (8003784 <main+0x1094>)
 800363c:	785b      	ldrb	r3, [r3, #1]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <main+0xf60>
			{
				uartTransmit("DCDC Instruct\n", 14);
 8003648:	210e      	movs	r1, #14
 800364a:	484f      	ldr	r0, [pc, #316]	; (8003788 <main+0x1098>)
 800364c:	f7fd f8b8 	bl	80007c0 <uartTransmit>
			else
			{

			}

			if ((system_in.ECON != 1) && (heizung != 1))
 8003650:	4b4c      	ldr	r3, [pc, #304]	; (8003784 <main+0x1094>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d107      	bne.n	800366e <main+0xf7e>
 800365e:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8003662:	2b01      	cmp	r3, #1
 8003664:	d003      	beq.n	800366e <main+0xf7e>
			{
				heizung = 1;
 8003666:	2301      	movs	r3, #1
 8003668:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
 800366c:	e00d      	b.n	800368a <main+0xf9a>
			}
			else if ((system_in.ECON != 1) && (heizung  == 1))
 800366e:	4b45      	ldr	r3, [pc, #276]	; (8003784 <main+0x1094>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d106      	bne.n	800368a <main+0xf9a>
 800367c:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8003680:	2b01      	cmp	r3, #1
 8003682:	d102      	bne.n	800368a <main+0xf9a>
			{
				heizung = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
			{

			}

			// Variable count auf 0 zuruecksetzen
			count = 0;
 800368a:	2300      	movs	r3, #0
 800368c:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		}

		// Zuruecksetzen Flag start
		task = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137


	  	// Task wird alle 5 Millisekunden ausgefuehrt
	  	if (millis() - lastcan >= 5)
 8003696:	f7fe f923 	bl	80018e0 <millis>
 800369a:	4602      	mov	r2, r0
 800369c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	f240 8095 	bls.w	80037d2 <main+0x10e2>
		{
	  		HAL_CAN_GetRxMessage(&hcan3, CAN_RX_FIFO0, &RxMessage, TxData);
 80036a8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80036ac:	4a37      	ldr	r2, [pc, #220]	; (800378c <main+0x109c>)
 80036ae:	2100      	movs	r1, #0
 80036b0:	481f      	ldr	r0, [pc, #124]	; (8003730 <main+0x1040>)
 80036b2:	f001 fbbb 	bl	8004e2c <HAL_CAN_GetRxMessage>

			// Wenn Nachricht ueber den CAN-Bus empfangen wurden
			if (can_change == 1)
 80036b6:	4b36      	ldr	r3, [pc, #216]	; (8003790 <main+0x10a0>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	f040 8088 	bne.w	80037d2 <main+0x10e2>
			{
				// Nachricht ID ueber UART ausgeben
				uartTransmitNumber(RxMessage.StdId, 16);
 80036c2:	4b32      	ldr	r3, [pc, #200]	; (800378c <main+0x109c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2110      	movs	r1, #16
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fd f88d 	bl	80007e8 <uartTransmitNumber>
				uartTransmit("\t", 1);
 80036ce:	2101      	movs	r1, #1
 80036d0:	4830      	ldr	r0, [pc, #192]	; (8003794 <main+0x10a4>)
 80036d2:	f7fd f875 	bl	80007c0 <uartTransmit>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 80036d6:	2300      	movs	r3, #0
 80036d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80036dc:	e00c      	b.n	80036f8 <main+0x1008>
				{
					uartTransmitNumber(RxData[i], 16);
 80036de:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80036e2:	4a2d      	ldr	r2, [pc, #180]	; (8003798 <main+0x10a8>)
 80036e4:	5cd3      	ldrb	r3, [r2, r3]
 80036e6:	2110      	movs	r1, #16
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fd f87d 	bl	80007e8 <uartTransmitNumber>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 80036ee:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80036f2:	3301      	adds	r3, #1
 80036f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80036f8:	f897 2126 	ldrb.w	r2, [r7, #294]	; 0x126
 80036fc:	4b23      	ldr	r3, [pc, #140]	; (800378c <main+0x109c>)
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	429a      	cmp	r2, r3
 8003702:	d3ec      	bcc.n	80036de <main+0xfee>
				}
				uartTransmit("\n", 1);
 8003704:	2101      	movs	r1, #1
 8003706:	4825      	ldr	r0, [pc, #148]	; (800379c <main+0x10ac>)
 8003708:	f7fd f85a 	bl	80007c0 <uartTransmit>

				// Sortieren der IDs nach Geraeten
				switch (RxMessage.StdId)
 800370c:	4b1f      	ldr	r3, [pc, #124]	; (800378c <main+0x109c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f240 1211 	movw	r2, #273	; 0x111
 8003714:	4293      	cmp	r3, r2
 8003716:	d043      	beq.n	80037a0 <main+0x10b0>
 8003718:	f240 1281 	movw	r2, #385	; 0x181
 800371c:	4293      	cmp	r3, r2
 800371e:	d144      	bne.n	80037aa <main+0x10ba>
				{
					case BAMOCAR_RX_ID:
						BAMOCAN_ID(&RxData[0], RxMessage.DLC);
 8003720:	4b1a      	ldr	r3, [pc, #104]	; (800378c <main+0x109c>)
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	4619      	mov	r1, r3
 8003728:	481b      	ldr	r0, [pc, #108]	; (8003798 <main+0x10a8>)
 800372a:	f7fc ff0f 	bl	800054c <BAMOCAN_ID>
						break;
 800372e:	e041      	b.n	80037b4 <main+0x10c4>
 8003730:	200000f0 	.word	0x200000f0
 8003734:	51eb851f 	.word	0x51eb851f
 8003738:	0800936c 	.word	0x0800936c
 800373c:	08009380 	.word	0x08009380
 8003740:	08009390 	.word	0x08009390
 8003744:	080093a4 	.word	0x080093a4
 8003748:	080093b4 	.word	0x080093b4
 800374c:	080093cc 	.word	0x080093cc
 8003750:	080093e4 	.word	0x080093e4
 8003754:	080093fc 	.word	0x080093fc
 8003758:	20000118 	.word	0x20000118
 800375c:	08009414 	.word	0x08009414
 8003760:	08009430 	.word	0x08009430
 8003764:	08009450 	.word	0x08009450
 8003768:	0800946c 	.word	0x0800946c
 800376c:	0800948c 	.word	0x0800948c
 8003770:	080094b0 	.word	0x080094b0
 8003774:	080094d4 	.word	0x080094d4
 8003778:	080094f8 	.word	0x080094f8
 800377c:	0800951c 	.word	0x0800951c
 8003780:	08009540 	.word	0x08009540
 8003784:	2000003c 	.word	0x2000003c
 8003788:	08009568 	.word	0x08009568
 800378c:	2000011c 	.word	0x2000011c
 8003790:	2000015d 	.word	0x2000015d
 8003794:	08009578 	.word	0x08009578
 8003798:	20000154 	.word	0x20000154
 800379c:	08009218 	.word	0x08009218
					case 0x111:
						uartTransmit("CAN-ID Computer config\n", 23);
 80037a0:	2117      	movs	r1, #23
 80037a2:	4825      	ldr	r0, [pc, #148]	; (8003838 <main+0x1148>)
 80037a4:	f7fd f80c 	bl	80007c0 <uartTransmit>
						break;
 80037a8:	e004      	b.n	80037b4 <main+0x10c4>
					default:
						uartTransmit("CAN-ID nicht verfuegbar\n", 24);
 80037aa:	2118      	movs	r1, #24
 80037ac:	4823      	ldr	r0, [pc, #140]	; (800383c <main+0x114c>)
 80037ae:	f7fd f807 	bl	80007c0 <uartTransmit>
						break;
 80037b2:	bf00      	nop
				}

				// Drehzahl ausgeben
				TxData[2] = motor1.output[2];
 80037b4:	4b22      	ldr	r3, [pc, #136]	; (8003840 <main+0x1150>)
 80037b6:	789b      	ldrb	r3, [r3, #2]
 80037b8:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				TxData[3] = motor1.output[3];
 80037bc:	4b20      	ldr	r3, [pc, #128]	; (8003840 <main+0x1150>)
 80037be:	78db      	ldrb	r3, [r3, #3]
 80037c0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				lastcan = millis();
 80037c4:	f7fe f88c 	bl	80018e0 <millis>
 80037c8:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

				can_change = 0;
 80037cc:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <main+0x1154>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	701a      	strb	r2, [r3, #0]
			}
		}

#ifdef DEBUG
		// Sende CAN Nachricht auf CAN-Bus / Teste CAN-BUS
		if (millis() - lastsendcan >= 1000)
 80037d2:	f7fe f885 	bl	80018e0 <millis>
 80037d6:	4602      	mov	r2, r0
 80037d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037e2:	f4ff a8af 	bcc.w	8002944 <main+0x254>
		{
			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 80037e6:	bf00      	nop
 80037e8:	2101      	movs	r1, #1
 80037ea:	4817      	ldr	r0, [pc, #92]	; (8003848 <main+0x1158>)
 80037ec:	f001 fafa 	bl	8004de4 <HAL_CAN_IsTxMessagePending>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d0f8      	beq.n	80037e8 <main+0x10f8>
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 80037f6:	f507 7282 	add.w	r2, r7, #260	; 0x104
 80037fa:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80037fe:	2301      	movs	r3, #1
 8003800:	4811      	ldr	r0, [pc, #68]	; (8003848 <main+0x1158>)
 8003802:	f001 fa1f 	bl	8004c44 <HAL_CAN_AddTxMessage>
 8003806:	4603      	mov	r3, r0
 8003808:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
			//hal_error(status);
			lastsendcan = millis();
 800380c:	f7fe f868 	bl	80018e0 <millis>
 8003810:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

			leuchten_out.BlueLed = !leuchten_out.BlueLed;
 8003814:	4b0d      	ldr	r3, [pc, #52]	; (800384c <main+0x115c>)
 8003816:	785b      	ldrb	r3, [r3, #1]
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	bf0c      	ite	eq
 8003822:	2301      	moveq	r3, #1
 8003824:	2300      	movne	r3, #0
 8003826:	b2d9      	uxtb	r1, r3
 8003828:	4a08      	ldr	r2, [pc, #32]	; (800384c <main+0x115c>)
 800382a:	7853      	ldrb	r3, [r2, #1]
 800382c:	f361 1345 	bfi	r3, r1, #5, #1
 8003830:	7053      	strb	r3, [r2, #1]
		if (UART2_rxBuffer[uart_count-1] == '\r')
 8003832:	f7ff b887 	b.w	8002944 <main+0x254>
 8003836:	bf00      	nop
 8003838:	0800957c 	.word	0x0800957c
 800383c:	08009594 	.word	0x08009594
 8003840:	20000160 	.word	0x20000160
 8003844:	2000015d 	.word	0x2000015d
 8003848:	200000f0 	.word	0x200000f0
 800384c:	20000050 	.word	0x20000050

08003850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b094      	sub	sp, #80	; 0x50
 8003854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003856:	f107 031c 	add.w	r3, r7, #28
 800385a:	2234      	movs	r2, #52	; 0x34
 800385c:	2100      	movs	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f005 f96a 	bl	8008b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003864:	f107 0308 	add.w	r3, r7, #8
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	605a      	str	r2, [r3, #4]
 800386e:	609a      	str	r2, [r3, #8]
 8003870:	60da      	str	r2, [r3, #12]
 8003872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003874:	4b2c      	ldr	r3, [pc, #176]	; (8003928 <SystemClock_Config+0xd8>)
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	4a2b      	ldr	r2, [pc, #172]	; (8003928 <SystemClock_Config+0xd8>)
 800387a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800387e:	6413      	str	r3, [r2, #64]	; 0x40
 8003880:	4b29      	ldr	r3, [pc, #164]	; (8003928 <SystemClock_Config+0xd8>)
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003888:	607b      	str	r3, [r7, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800388c:	4b27      	ldr	r3, [pc, #156]	; (800392c <SystemClock_Config+0xdc>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a26      	ldr	r2, [pc, #152]	; (800392c <SystemClock_Config+0xdc>)
 8003892:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	4b24      	ldr	r3, [pc, #144]	; (800392c <SystemClock_Config+0xdc>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038a0:	603b      	str	r3, [r7, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80038a4:	2301      	movs	r3, #1
 80038a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038ae:	2302      	movs	r3, #2
 80038b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80038b8:	2319      	movs	r3, #25
 80038ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 80038bc:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80038c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038c2:	2302      	movs	r3, #2
 80038c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80038c6:	2302      	movs	r3, #2
 80038c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80038ca:	2302      	movs	r3, #2
 80038cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038ce:	f107 031c 	add.w	r3, r7, #28
 80038d2:	4618      	mov	r0, r3
 80038d4:	f002 f9da 	bl	8005c8c <HAL_RCC_OscConfig>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80038de:	f000 f8c3 	bl	8003a68 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80038e2:	f002 f983 	bl	8005bec <HAL_PWREx_EnableOverDrive>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80038ec:	f000 f8bc 	bl	8003a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038f0:	230f      	movs	r3, #15
 80038f2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038f4:	2302      	movs	r3, #2
 80038f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038f8:	2300      	movs	r3, #0
 80038fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80038fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003900:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003906:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003908:	f107 0308 	add.w	r3, r7, #8
 800390c:	2107      	movs	r1, #7
 800390e:	4618      	mov	r0, r3
 8003910:	f002 fc6a 	bl	80061e8 <HAL_RCC_ClockConfig>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800391a:	f000 f8a5 	bl	8003a68 <Error_Handler>
  }
}
 800391e:	bf00      	nop
 8003920:	3750      	adds	r7, #80	; 0x50
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40023800 	.word	0x40023800
 800392c:	40007000 	.word	0x40007000

08003930 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Interrupts
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit(&huart2, &UART2_rxBuffer[uart_count], 1, 100);

	if (UART2_rxBuffer[uart_count] == 0x7F)
 8003938:	4b27      	ldr	r3, [pc, #156]	; (80039d8 <HAL_UART_RxCpltCallback+0xa8>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	4b27      	ldr	r3, [pc, #156]	; (80039dc <HAL_UART_RxCpltCallback+0xac>)
 8003940:	5c9b      	ldrb	r3, [r3, r2]
 8003942:	2b7f      	cmp	r3, #127	; 0x7f
 8003944:	d10a      	bne.n	800395c <HAL_UART_RxCpltCallback+0x2c>
	{
		if (uart_count >= 1)
 8003946:	4b24      	ldr	r3, [pc, #144]	; (80039d8 <HAL_UART_RxCpltCallback+0xa8>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00c      	beq.n	8003968 <HAL_UART_RxCpltCallback+0x38>
		{
			uart_count--;
 800394e:	4b22      	ldr	r3, [pc, #136]	; (80039d8 <HAL_UART_RxCpltCallback+0xa8>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	3b01      	subs	r3, #1
 8003954:	b2da      	uxtb	r2, r3
 8003956:	4b20      	ldr	r3, [pc, #128]	; (80039d8 <HAL_UART_RxCpltCallback+0xa8>)
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	e005      	b.n	8003968 <HAL_UART_RxCpltCallback+0x38>
		}
	}
	else
	{
		uart_count++;
 800395c:	4b1e      	ldr	r3, [pc, #120]	; (80039d8 <HAL_UART_RxCpltCallback+0xa8>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	3301      	adds	r3, #1
 8003962:	b2da      	uxtb	r2, r3
 8003964:	4b1c      	ldr	r3, [pc, #112]	; (80039d8 <HAL_UART_RxCpltCallback+0xa8>)
 8003966:	701a      	strb	r2, [r3, #0]
	}

	if (uart_count == 12)
 8003968:	4b1b      	ldr	r3, [pc, #108]	; (80039d8 <HAL_UART_RxCpltCallback+0xa8>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b0c      	cmp	r3, #12
 800396e:	d117      	bne.n	80039a0 <HAL_UART_RxCpltCallback+0x70>
	{
		uint8_t tmp = 0x81;
 8003970:	2381      	movs	r3, #129	; 0x81
 8003972:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r\nEingabe Ung", 13, 100);
 8003974:	2364      	movs	r3, #100	; 0x64
 8003976:	220d      	movs	r2, #13
 8003978:	4919      	ldr	r1, [pc, #100]	; (80039e0 <HAL_UART_RxCpltCallback+0xb0>)
 800397a:	481a      	ldr	r0, [pc, #104]	; (80039e4 <HAL_UART_RxCpltCallback+0xb4>)
 800397c:	f003 fdf4 	bl	8007568 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, &tmp, 1, 100);
 8003980:	f107 010f 	add.w	r1, r7, #15
 8003984:	2364      	movs	r3, #100	; 0x64
 8003986:	2201      	movs	r2, #1
 8003988:	4816      	ldr	r0, [pc, #88]	; (80039e4 <HAL_UART_RxCpltCallback+0xb4>)
 800398a:	f003 fded 	bl	8007568 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) "ltig\r\n", 6, 100);
 800398e:	2364      	movs	r3, #100	; 0x64
 8003990:	2206      	movs	r2, #6
 8003992:	4915      	ldr	r1, [pc, #84]	; (80039e8 <HAL_UART_RxCpltCallback+0xb8>)
 8003994:	4813      	ldr	r0, [pc, #76]	; (80039e4 <HAL_UART_RxCpltCallback+0xb4>)
 8003996:	f003 fde7 	bl	8007568 <HAL_UART_Transmit>
		uart_count = 0;
 800399a:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <HAL_UART_RxCpltCallback+0xa8>)
 800399c:	2200      	movs	r2, #0
 800399e:	701a      	strb	r2, [r3, #0]
	}

	if (UART2_rxBuffer[uart_count-1] == '\r')
 80039a0:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <HAL_UART_RxCpltCallback+0xa8>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	3b01      	subs	r3, #1
 80039a6:	4a0d      	ldr	r2, [pc, #52]	; (80039dc <HAL_UART_RxCpltCallback+0xac>)
 80039a8:	5cd3      	ldrb	r3, [r2, r3]
 80039aa:	2b0d      	cmp	r3, #13
 80039ac:	d105      	bne.n	80039ba <HAL_UART_RxCpltCallback+0x8a>
	{
	    HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer[0], 1);
 80039ae:	2201      	movs	r2, #1
 80039b0:	490a      	ldr	r1, [pc, #40]	; (80039dc <HAL_UART_RxCpltCallback+0xac>)
 80039b2:	480c      	ldr	r0, [pc, #48]	; (80039e4 <HAL_UART_RxCpltCallback+0xb4>)
 80039b4:	f003 fe5b 	bl	800766e <HAL_UART_Receive_IT>
	}
	else
	{
	    HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer[uart_count], 1);
	}
}
 80039b8:	e009      	b.n	80039ce <HAL_UART_RxCpltCallback+0x9e>
	    HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer[uart_count], 1);
 80039ba:	4b07      	ldr	r3, [pc, #28]	; (80039d8 <HAL_UART_RxCpltCallback+0xa8>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	4b06      	ldr	r3, [pc, #24]	; (80039dc <HAL_UART_RxCpltCallback+0xac>)
 80039c2:	4413      	add	r3, r2
 80039c4:	2201      	movs	r2, #1
 80039c6:	4619      	mov	r1, r3
 80039c8:	4806      	ldr	r0, [pc, #24]	; (80039e4 <HAL_UART_RxCpltCallback+0xb4>)
 80039ca:	f003 fe50 	bl	800766e <HAL_UART_Receive_IT>
}
 80039ce:	bf00      	nop
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000150 	.word	0x20000150
 80039dc:	20000138 	.word	0x20000138
 80039e0:	0800967c 	.word	0x0800967c
 80039e4:	200001b8 	.word	0x200001b8
 80039e8:	0800968c 	.word	0x0800968c

080039ec <HAL_CAN_RxFifo0MsgPendingCallback>:

// Can-Interrupt: Nachricht wartet
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
	// Nachricht aus Speicher auslesen
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 80039f4:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80039f6:	4a07      	ldr	r2, [pc, #28]	; (8003a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80039f8:	2100      	movs	r1, #0
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f001 fa16 	bl	8004e2c <HAL_CAN_GetRxMessage>
	can_change = 1;
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	701a      	strb	r2, [r3, #0]
}
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20000154 	.word	0x20000154
 8003a14:	2000011c 	.word	0x2000011c
 8003a18:	2000015d 	.word	0x2000015d

08003a1c <HAL_CAN_RxFifo0FullCallback>:

// Can-Interrupt: Fifo0 ist voll
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
	// Fifo0 voll
	uartTransmit("Fifo0 von CAN3 ist voll\n", 24);
 8003a24:	2118      	movs	r1, #24
 8003a26:	4804      	ldr	r0, [pc, #16]	; (8003a38 <HAL_CAN_RxFifo0FullCallback+0x1c>)
 8003a28:	f7fc feca 	bl	80007c0 <uartTransmit>

	Error_Handler();
 8003a2c:	f000 f81c 	bl	8003a68 <Error_Handler>
}
 8003a30:	bf00      	nop
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	08009694 	.word	0x08009694

08003a3c <HAL_TIM_PeriodElapsedCallback>:

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)																	// Wenn Timer 6 den ueberlauf ausgeloest hat
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a06      	ldr	r2, [pc, #24]	; (8003a60 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d102      	bne.n	8003a52 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;														// Setze Millisekunden Flag
 8003a4c:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	701a      	strb	r2, [r3, #0]
	}
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	2000016c 	.word	0x2000016c
 8003a64:	2000015c 	.word	0x2000015c

08003a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003a6c:	b672      	cpsid	i
}
 8003a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8003a70:	4a11      	ldr	r2, [pc, #68]	; (8003ab8 <Error_Handler+0x50>)
 8003a72:	7853      	ldrb	r3, [r2, #1]
 8003a74:	f043 0308 	orr.w	r3, r3, #8
 8003a78:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8003a7a:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <Error_Handler+0x50>)
 8003a7c:	785b      	ldrb	r3, [r3, #1]
 8003a7e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	461a      	mov	r2, r3
 8003a86:	2104      	movs	r1, #4
 8003a88:	480c      	ldr	r0, [pc, #48]	; (8003abc <Error_Handler+0x54>)
 8003a8a:	f002 f895 	bl	8005bb8 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8003a8e:	4a0a      	ldr	r2, [pc, #40]	; (8003ab8 <Error_Handler+0x50>)
 8003a90:	7853      	ldrb	r3, [r2, #1]
 8003a92:	f36f 1304 	bfc	r3, #4, #1
 8003a96:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 8003a98:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <Error_Handler+0x50>)
 8003a9a:	785b      	ldrb	r3, [r3, #1]
 8003a9c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003aa8:	4804      	ldr	r0, [pc, #16]	; (8003abc <Error_Handler+0x54>)
 8003aaa:	f002 f885 	bl	8005bb8 <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 8003aae:	2122      	movs	r1, #34	; 0x22
 8003ab0:	4803      	ldr	r0, [pc, #12]	; (8003ac0 <Error_Handler+0x58>)
 8003ab2:	f7fc fe85 	bl	80007c0 <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1);
 8003ab6:	e7fe      	b.n	8003ab6 <Error_Handler+0x4e>
 8003ab8:	20000050 	.word	0x20000050
 8003abc:	40020400 	.word	0x40020400
 8003ac0:	080096b0 	.word	0x080096b0

08003ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003aca:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <HAL_MspInit+0x44>)
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	4a0e      	ldr	r2, [pc, #56]	; (8003b08 <HAL_MspInit+0x44>)
 8003ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad6:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <HAL_MspInit+0x44>)
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ade:	607b      	str	r3, [r7, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ae2:	4b09      	ldr	r3, [pc, #36]	; (8003b08 <HAL_MspInit+0x44>)
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	4a08      	ldr	r2, [pc, #32]	; (8003b08 <HAL_MspInit+0x44>)
 8003ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aec:	6453      	str	r3, [r2, #68]	; 0x44
 8003aee:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <HAL_MspInit+0x44>)
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af6:	603b      	str	r3, [r7, #0]
 8003af8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40023800 	.word	0x40023800

08003b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b10:	e7fe      	b.n	8003b10 <NMI_Handler+0x4>

08003b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b12:	b480      	push	{r7}
 8003b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b16:	e7fe      	b.n	8003b16 <HardFault_Handler+0x4>

08003b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b1c:	e7fe      	b.n	8003b1c <MemManage_Handler+0x4>

08003b1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b22:	e7fe      	b.n	8003b22 <BusFault_Handler+0x4>

08003b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b28:	e7fe      	b.n	8003b28 <UsageFault_Handler+0x4>

08003b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b2e:	bf00      	nop
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b3c:	bf00      	nop
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b46:	b480      	push	{r7}
 8003b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b58:	f000 f98e 	bl	8003e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b5c:	bf00      	nop
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003b64:	4802      	ldr	r0, [pc, #8]	; (8003b70 <USART2_IRQHandler+0x10>)
 8003b66:	f003 fdc7 	bl	80076f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	200001b8 	.word	0x200001b8

08003b74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b78:	4802      	ldr	r0, [pc, #8]	; (8003b84 <TIM6_DAC_IRQHandler+0x10>)
 8003b7a:	f003 fa13 	bl	8006fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b7e:	bf00      	nop
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	2000016c 	.word	0x2000016c

08003b88 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8003b8c:	4802      	ldr	r0, [pc, #8]	; (8003b98 <CAN3_RX0_IRQHandler+0x10>)
 8003b8e:	f001 fa85 	bl	800509c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8003b92:	bf00      	nop
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	200000f0 	.word	0x200000f0

08003b9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ba0:	4b08      	ldr	r3, [pc, #32]	; (8003bc4 <SystemInit+0x28>)
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba6:	4a07      	ldr	r2, [pc, #28]	; (8003bc4 <SystemInit+0x28>)
 8003ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003bb0:	4b04      	ldr	r3, [pc, #16]	; (8003bc4 <SystemInit+0x28>)
 8003bb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003bb6:	609a      	str	r2, [r3, #8]
#endif
}
 8003bb8:	bf00      	nop
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	e000ed00 	.word	0xe000ed00

08003bc8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bce:	1d3b      	adds	r3, r7, #4
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	605a      	str	r2, [r3, #4]
 8003bd6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003bd8:	4b14      	ldr	r3, [pc, #80]	; (8003c2c <MX_TIM6_Init+0x64>)
 8003bda:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <MX_TIM6_Init+0x68>)
 8003bdc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27-1;
 8003bde:	4b13      	ldr	r3, [pc, #76]	; (8003c2c <MX_TIM6_Init+0x64>)
 8003be0:	221a      	movs	r2, #26
 8003be2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003be4:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <MX_TIM6_Init+0x64>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000-1;
 8003bea:	4b10      	ldr	r3, [pc, #64]	; (8003c2c <MX_TIM6_Init+0x64>)
 8003bec:	f640 729f 	movw	r2, #3999	; 0xf9f
 8003bf0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bf2:	4b0e      	ldr	r3, [pc, #56]	; (8003c2c <MX_TIM6_Init+0x64>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003bf8:	480c      	ldr	r0, [pc, #48]	; (8003c2c <MX_TIM6_Init+0x64>)
 8003bfa:	f003 f903 	bl	8006e04 <HAL_TIM_Base_Init>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003c04:	f7ff ff30 	bl	8003a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003c10:	1d3b      	adds	r3, r7, #4
 8003c12:	4619      	mov	r1, r3
 8003c14:	4805      	ldr	r0, [pc, #20]	; (8003c2c <MX_TIM6_Init+0x64>)
 8003c16:	f003 fbad 	bl	8007374 <HAL_TIMEx_MasterConfigSynchronization>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003c20:	f7ff ff22 	bl	8003a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003c24:	bf00      	nop
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	2000016c 	.word	0x2000016c
 8003c30:	40001000 	.word	0x40001000

08003c34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a0d      	ldr	r2, [pc, #52]	; (8003c78 <HAL_TIM_Base_MspInit+0x44>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d113      	bne.n	8003c6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003c46:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <HAL_TIM_Base_MspInit+0x48>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	4a0c      	ldr	r2, [pc, #48]	; (8003c7c <HAL_TIM_Base_MspInit+0x48>)
 8003c4c:	f043 0310 	orr.w	r3, r3, #16
 8003c50:	6413      	str	r3, [r2, #64]	; 0x40
 8003c52:	4b0a      	ldr	r3, [pc, #40]	; (8003c7c <HAL_TIM_Base_MspInit+0x48>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2100      	movs	r1, #0
 8003c62:	2036      	movs	r0, #54	; 0x36
 8003c64:	f001 fd1b 	bl	800569e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003c68:	2036      	movs	r0, #54	; 0x36
 8003c6a:	f001 fd34 	bl	80056d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8003c6e:	bf00      	nop
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40001000 	.word	0x40001000
 8003c7c:	40023800 	.word	0x40023800

08003c80 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003c84:	4b14      	ldr	r3, [pc, #80]	; (8003cd8 <MX_USART2_UART_Init+0x58>)
 8003c86:	4a15      	ldr	r2, [pc, #84]	; (8003cdc <MX_USART2_UART_Init+0x5c>)
 8003c88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003c8a:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <MX_USART2_UART_Init+0x58>)
 8003c8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003c90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c92:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <MX_USART2_UART_Init+0x58>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c98:	4b0f      	ldr	r3, [pc, #60]	; (8003cd8 <MX_USART2_UART_Init+0x58>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003c9e:	4b0e      	ldr	r3, [pc, #56]	; (8003cd8 <MX_USART2_UART_Init+0x58>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <MX_USART2_UART_Init+0x58>)
 8003ca6:	220c      	movs	r2, #12
 8003ca8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003caa:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <MX_USART2_UART_Init+0x58>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cb0:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <MX_USART2_UART_Init+0x58>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003cb6:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <MX_USART2_UART_Init+0x58>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003cbc:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <MX_USART2_UART_Init+0x58>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003cc2:	4805      	ldr	r0, [pc, #20]	; (8003cd8 <MX_USART2_UART_Init+0x58>)
 8003cc4:	f003 fc02 	bl	80074cc <HAL_UART_Init>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003cce:	f7ff fecb 	bl	8003a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003cd2:	bf00      	nop
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	200001b8 	.word	0x200001b8
 8003cdc:	40004400 	.word	0x40004400

08003ce0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b0ae      	sub	sp, #184	; 0xb8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	605a      	str	r2, [r3, #4]
 8003cf2:	609a      	str	r2, [r3, #8]
 8003cf4:	60da      	str	r2, [r3, #12]
 8003cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cf8:	f107 0314 	add.w	r3, r7, #20
 8003cfc:	2290      	movs	r2, #144	; 0x90
 8003cfe:	2100      	movs	r1, #0
 8003d00:	4618      	mov	r0, r3
 8003d02:	f004 ff19 	bl	8008b38 <memset>
  if(uartHandle->Instance==USART2)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a25      	ldr	r2, [pc, #148]	; (8003da0 <HAL_UART_MspInit+0xc0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d142      	bne.n	8003d96 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003d10:	2380      	movs	r3, #128	; 0x80
 8003d12:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003d14:	2300      	movs	r3, #0
 8003d16:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d18:	f107 0314 	add.w	r3, r7, #20
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f002 fc49 	bl	80065b4 <HAL_RCCEx_PeriphCLKConfig>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003d28:	f7ff fe9e 	bl	8003a68 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d2c:	4b1d      	ldr	r3, [pc, #116]	; (8003da4 <HAL_UART_MspInit+0xc4>)
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	4a1c      	ldr	r2, [pc, #112]	; (8003da4 <HAL_UART_MspInit+0xc4>)
 8003d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d36:	6413      	str	r3, [r2, #64]	; 0x40
 8003d38:	4b1a      	ldr	r3, [pc, #104]	; (8003da4 <HAL_UART_MspInit+0xc4>)
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d44:	4b17      	ldr	r3, [pc, #92]	; (8003da4 <HAL_UART_MspInit+0xc4>)
 8003d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d48:	4a16      	ldr	r2, [pc, #88]	; (8003da4 <HAL_UART_MspInit+0xc4>)
 8003d4a:	f043 0308 	orr.w	r3, r3, #8
 8003d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8003d50:	4b14      	ldr	r3, [pc, #80]	; (8003da4 <HAL_UART_MspInit+0xc4>)
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART2TX_Pin|DEBUG_UART2RX_Pin;
 8003d5c:	2360      	movs	r3, #96	; 0x60
 8003d5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d62:	2302      	movs	r3, #2
 8003d64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d74:	2307      	movs	r3, #7
 8003d76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d7a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4809      	ldr	r0, [pc, #36]	; (8003da8 <HAL_UART_MspInit+0xc8>)
 8003d82:	f001 fd55 	bl	8005830 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003d86:	2200      	movs	r2, #0
 8003d88:	2100      	movs	r1, #0
 8003d8a:	2026      	movs	r0, #38	; 0x26
 8003d8c:	f001 fc87 	bl	800569e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d90:	2026      	movs	r0, #38	; 0x26
 8003d92:	f001 fca0 	bl	80056d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003d96:	bf00      	nop
 8003d98:	37b8      	adds	r7, #184	; 0xb8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40004400 	.word	0x40004400
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40020c00 	.word	0x40020c00

08003dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003de4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003db0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003db2:	e003      	b.n	8003dbc <LoopCopyDataInit>

08003db4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003db4:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003db6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003db8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003dba:	3104      	adds	r1, #4

08003dbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003dbc:	480b      	ldr	r0, [pc, #44]	; (8003dec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003dbe:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003dc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003dc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003dc4:	d3f6      	bcc.n	8003db4 <CopyDataInit>
  ldr  r2, =_sbss
 8003dc6:	4a0b      	ldr	r2, [pc, #44]	; (8003df4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003dc8:	e002      	b.n	8003dd0 <LoopFillZerobss>

08003dca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003dca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003dcc:	f842 3b04 	str.w	r3, [r2], #4

08003dd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003dd0:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003dd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003dd4:	d3f9      	bcc.n	8003dca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003dd6:	f7ff fee1 	bl	8003b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003dda:	f004 fe89 	bl	8008af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003dde:	f7fe fc87 	bl	80026f0 <main>
  bx  lr    
 8003de2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003de4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003de8:	08009724 	.word	0x08009724
  ldr  r0, =_sdata
 8003dec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003df0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003df4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003df8:	20000244 	.word	0x20000244

08003dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003dfc:	e7fe      	b.n	8003dfc <ADC_IRQHandler>

08003dfe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e02:	2003      	movs	r0, #3
 8003e04:	f001 fc40 	bl	8005688 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e08:	2000      	movs	r0, #0
 8003e0a:	f000 f805 	bl	8003e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e0e:	f7ff fe59 	bl	8003ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e20:	4b12      	ldr	r3, [pc, #72]	; (8003e6c <HAL_InitTick+0x54>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <HAL_InitTick+0x58>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e36:	4618      	mov	r0, r3
 8003e38:	f001 fc5b 	bl	80056f2 <HAL_SYSTICK_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e00e      	b.n	8003e64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b0f      	cmp	r3, #15
 8003e4a:	d80a      	bhi.n	8003e62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	f04f 30ff 	mov.w	r0, #4294967295
 8003e54:	f001 fc23 	bl	800569e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e58:	4a06      	ldr	r2, [pc, #24]	; (8003e74 <HAL_InitTick+0x5c>)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e000      	b.n	8003e64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	20000000 	.word	0x20000000
 8003e70:	20000008 	.word	0x20000008
 8003e74:	20000004 	.word	0x20000004

08003e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_IncTick+0x20>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <HAL_IncTick+0x24>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4413      	add	r3, r2
 8003e88:	4a04      	ldr	r2, [pc, #16]	; (8003e9c <HAL_IncTick+0x24>)
 8003e8a:	6013      	str	r3, [r2, #0]
}
 8003e8c:	bf00      	nop
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	20000008 	.word	0x20000008
 8003e9c:	20000240 	.word	0x20000240

08003ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ea4:	4b03      	ldr	r3, [pc, #12]	; (8003eb4 <HAL_GetTick+0x14>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	20000240 	.word	0x20000240

08003eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ec0:	f7ff ffee 	bl	8003ea0 <HAL_GetTick>
 8003ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed0:	d005      	beq.n	8003ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ed2:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <HAL_Delay+0x44>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4413      	add	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ede:	bf00      	nop
 8003ee0:	f7ff ffde 	bl	8003ea0 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d8f7      	bhi.n	8003ee0 <HAL_Delay+0x28>
  {
  }
}
 8003ef0:	bf00      	nop
 8003ef2:	bf00      	nop
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20000008 	.word	0x20000008

08003f00 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 8003f04:	4b02      	ldr	r3, [pc, #8]	; (8003f10 <HAL_GetHalVersion+0x10>)
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	01030000 	.word	0x01030000

08003f14 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8003f18:	4b03      	ldr	r3, [pc, #12]	; (8003f28 <HAL_GetREVID+0x14>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	0c1b      	lsrs	r3, r3, #16
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	e0042000 	.word	0xe0042000

08003f2c <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8003f30:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <HAL_GetDEVID+0x18>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	e0042000 	.word	0xe0042000

08003f48 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8003f4c:	4b03      	ldr	r3, [pc, #12]	; (8003f5c <HAL_GetUIDw0+0x14>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	1ff0f420 	.word	0x1ff0f420

08003f60 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003f64:	4b03      	ldr	r3, [pc, #12]	; (8003f74 <HAL_GetUIDw1+0x14>)
 8003f66:	681b      	ldr	r3, [r3, #0]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	1ff0f424 	.word	0x1ff0f424

08003f78 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003f7c:	4b03      	ldr	r3, [pc, #12]	; (8003f8c <HAL_GetUIDw2+0x14>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	1ff0f428 	.word	0x1ff0f428

08003f90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e031      	b.n	800400a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d109      	bne.n	8003fc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fe f814 	bl	8001fdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d116      	bne.n	8003ffc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fd2:	4b10      	ldr	r3, [pc, #64]	; (8004014 <HAL_ADC_Init+0x84>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	f043 0202 	orr.w	r2, r3, #2
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 fb0a 	bl	80045f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f023 0303 	bic.w	r3, r3, #3
 8003ff2:	f043 0201 	orr.w	r2, r3, #1
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40
 8003ffa:	e001      	b.n	8004000 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004008:	7bfb      	ldrb	r3, [r7, #15]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	ffffeefd 	.word	0xffffeefd

08004018 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004020:	2300      	movs	r3, #0
 8004022:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800402a:	2b01      	cmp	r3, #1
 800402c:	d101      	bne.n	8004032 <HAL_ADC_Start+0x1a>
 800402e:	2302      	movs	r3, #2
 8004030:	e0ad      	b.n	800418e <HAL_ADC_Start+0x176>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b01      	cmp	r3, #1
 8004046:	d018      	beq.n	800407a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004058:	4b50      	ldr	r3, [pc, #320]	; (800419c <HAL_ADC_Start+0x184>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a50      	ldr	r2, [pc, #320]	; (80041a0 <HAL_ADC_Start+0x188>)
 800405e:	fba2 2303 	umull	r2, r3, r2, r3
 8004062:	0c9a      	lsrs	r2, r3, #18
 8004064:	4613      	mov	r3, r2
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	4413      	add	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800406c:	e002      	b.n	8004074 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3b01      	subs	r3, #1
 8004072:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f9      	bne.n	800406e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b01      	cmp	r3, #1
 8004086:	d175      	bne.n	8004174 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800408c:	4b45      	ldr	r3, [pc, #276]	; (80041a4 <HAL_ADC_Start+0x18c>)
 800408e:	4013      	ands	r3, r2
 8004090:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d007      	beq.n	80040b6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80040ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c2:	d106      	bne.n	80040d2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c8:	f023 0206 	bic.w	r2, r3, #6
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	645a      	str	r2, [r3, #68]	; 0x44
 80040d0:	e002      	b.n	80040d8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80040e8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80040ea:	4b2f      	ldr	r3, [pc, #188]	; (80041a8 <HAL_ADC_Start+0x190>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f003 031f 	and.w	r3, r3, #31
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10f      	bne.n	8004116 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d143      	bne.n	800418c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004112:	609a      	str	r2, [r3, #8]
 8004114:	e03a      	b.n	800418c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a24      	ldr	r2, [pc, #144]	; (80041ac <HAL_ADC_Start+0x194>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d10e      	bne.n	800413e <HAL_ADC_Start+0x126>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d107      	bne.n	800413e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800413c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800413e:	4b1a      	ldr	r3, [pc, #104]	; (80041a8 <HAL_ADC_Start+0x190>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f003 0310 	and.w	r3, r3, #16
 8004146:	2b00      	cmp	r3, #0
 8004148:	d120      	bne.n	800418c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a18      	ldr	r2, [pc, #96]	; (80041b0 <HAL_ADC_Start+0x198>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d11b      	bne.n	800418c <HAL_ADC_Start+0x174>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d114      	bne.n	800418c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004170:	609a      	str	r2, [r3, #8]
 8004172:	e00b      	b.n	800418c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	f043 0210 	orr.w	r2, r3, #16
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004184:	f043 0201 	orr.w	r2, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	20000000 	.word	0x20000000
 80041a0:	431bde83 	.word	0x431bde83
 80041a4:	fffff8fe 	.word	0xfffff8fe
 80041a8:	40012300 	.word	0x40012300
 80041ac:	40012000 	.word	0x40012000
 80041b0:	40012200 	.word	0x40012200

080041b4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d101      	bne.n	80041ca <HAL_ADC_Stop+0x16>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e01f      	b.n	800420a <HAL_ADC_Stop+0x56>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0201 	bic.w	r2, r2, #1
 80041e0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d107      	bne.n	8004200 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041f4:	4b08      	ldr	r3, [pc, #32]	; (8004218 <HAL_ADC_Stop+0x64>)
 80041f6:	4013      	ands	r3, r2
 80041f8:	f043 0201 	orr.w	r2, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	ffffeefe 	.word	0xffffeefe

0800421c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004238:	d113      	bne.n	8004262 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004248:	d10b      	bne.n	8004262 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	f043 0220 	orr.w	r2, r3, #32
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e063      	b.n	800432a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004262:	f7ff fe1d 	bl	8003ea0 <HAL_GetTick>
 8004266:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004268:	e021      	b.n	80042ae <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004270:	d01d      	beq.n	80042ae <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d007      	beq.n	8004288 <HAL_ADC_PollForConversion+0x6c>
 8004278:	f7ff fe12 	bl	8003ea0 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d212      	bcs.n	80042ae <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b02      	cmp	r3, #2
 8004294:	d00b      	beq.n	80042ae <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	f043 0204 	orr.w	r2, r3, #4
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e03d      	b.n	800432a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d1d6      	bne.n	800426a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0212 	mvn.w	r2, #18
 80042c4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d123      	bne.n	8004328 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d11f      	bne.n	8004328 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d006      	beq.n	8004304 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004300:	2b00      	cmp	r3, #0
 8004302:	d111      	bne.n	8004328 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d105      	bne.n	8004328 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	f043 0201 	orr.w	r2, r3, #1
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_ADC_ConfigChannel+0x1c>
 8004364:	2302      	movs	r3, #2
 8004366:	e136      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x28a>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b09      	cmp	r3, #9
 8004376:	d93a      	bls.n	80043ee <HAL_ADC_ConfigChannel+0xa2>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004380:	d035      	beq.n	80043ee <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68d9      	ldr	r1, [r3, #12]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	b29b      	uxth	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	4613      	mov	r3, r2
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	4413      	add	r3, r2
 8004396:	3b1e      	subs	r3, #30
 8004398:	2207      	movs	r2, #7
 800439a:	fa02 f303 	lsl.w	r3, r2, r3
 800439e:	43da      	mvns	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	400a      	ands	r2, r1
 80043a6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a8d      	ldr	r2, [pc, #564]	; (80045e4 <HAL_ADC_ConfigChannel+0x298>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d10a      	bne.n	80043c8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68d9      	ldr	r1, [r3, #12]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	061a      	lsls	r2, r3, #24
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043c6:	e035      	b.n	8004434 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68d9      	ldr	r1, [r3, #12]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	4618      	mov	r0, r3
 80043da:	4603      	mov	r3, r0
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	4403      	add	r3, r0
 80043e0:	3b1e      	subs	r3, #30
 80043e2:	409a      	lsls	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043ec:	e022      	b.n	8004434 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6919      	ldr	r1, [r3, #16]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	461a      	mov	r2, r3
 80043fc:	4613      	mov	r3, r2
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	4413      	add	r3, r2
 8004402:	2207      	movs	r2, #7
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	43da      	mvns	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	400a      	ands	r2, r1
 8004410:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6919      	ldr	r1, [r3, #16]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	b29b      	uxth	r3, r3
 8004422:	4618      	mov	r0, r3
 8004424:	4603      	mov	r3, r0
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	4403      	add	r3, r0
 800442a:	409a      	lsls	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b06      	cmp	r3, #6
 800443a:	d824      	bhi.n	8004486 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	3b05      	subs	r3, #5
 800444e:	221f      	movs	r2, #31
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	43da      	mvns	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	400a      	ands	r2, r1
 800445c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	b29b      	uxth	r3, r3
 800446a:	4618      	mov	r0, r3
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	3b05      	subs	r3, #5
 8004478:	fa00 f203 	lsl.w	r2, r0, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	635a      	str	r2, [r3, #52]	; 0x34
 8004484:	e04c      	b.n	8004520 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b0c      	cmp	r3, #12
 800448c:	d824      	bhi.n	80044d8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	4613      	mov	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	3b23      	subs	r3, #35	; 0x23
 80044a0:	221f      	movs	r2, #31
 80044a2:	fa02 f303 	lsl.w	r3, r2, r3
 80044a6:	43da      	mvns	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	400a      	ands	r2, r1
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	4618      	mov	r0, r3
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	4613      	mov	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	3b23      	subs	r3, #35	; 0x23
 80044ca:	fa00 f203 	lsl.w	r2, r0, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	631a      	str	r2, [r3, #48]	; 0x30
 80044d6:	e023      	b.n	8004520 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	4613      	mov	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	3b41      	subs	r3, #65	; 0x41
 80044ea:	221f      	movs	r2, #31
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	43da      	mvns	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	400a      	ands	r2, r1
 80044f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	b29b      	uxth	r3, r3
 8004506:	4618      	mov	r0, r3
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	3b41      	subs	r3, #65	; 0x41
 8004514:	fa00 f203 	lsl.w	r2, r0, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a30      	ldr	r2, [pc, #192]	; (80045e8 <HAL_ADC_ConfigChannel+0x29c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d10a      	bne.n	8004540 <HAL_ADC_ConfigChannel+0x1f4>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004532:	d105      	bne.n	8004540 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004534:	4b2d      	ldr	r3, [pc, #180]	; (80045ec <HAL_ADC_ConfigChannel+0x2a0>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	4a2c      	ldr	r2, [pc, #176]	; (80045ec <HAL_ADC_ConfigChannel+0x2a0>)
 800453a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800453e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a28      	ldr	r2, [pc, #160]	; (80045e8 <HAL_ADC_ConfigChannel+0x29c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d10f      	bne.n	800456a <HAL_ADC_ConfigChannel+0x21e>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b12      	cmp	r3, #18
 8004550:	d10b      	bne.n	800456a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004552:	4b26      	ldr	r3, [pc, #152]	; (80045ec <HAL_ADC_ConfigChannel+0x2a0>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	4a25      	ldr	r2, [pc, #148]	; (80045ec <HAL_ADC_ConfigChannel+0x2a0>)
 8004558:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800455c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800455e:	4b23      	ldr	r3, [pc, #140]	; (80045ec <HAL_ADC_ConfigChannel+0x2a0>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	4a22      	ldr	r2, [pc, #136]	; (80045ec <HAL_ADC_ConfigChannel+0x2a0>)
 8004564:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004568:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1e      	ldr	r2, [pc, #120]	; (80045e8 <HAL_ADC_ConfigChannel+0x29c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d12b      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x280>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a1a      	ldr	r2, [pc, #104]	; (80045e4 <HAL_ADC_ConfigChannel+0x298>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d003      	beq.n	8004586 <HAL_ADC_ConfigChannel+0x23a>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b11      	cmp	r3, #17
 8004584:	d122      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004586:	4b19      	ldr	r3, [pc, #100]	; (80045ec <HAL_ADC_ConfigChannel+0x2a0>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	4a18      	ldr	r2, [pc, #96]	; (80045ec <HAL_ADC_ConfigChannel+0x2a0>)
 800458c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004590:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004592:	4b16      	ldr	r3, [pc, #88]	; (80045ec <HAL_ADC_ConfigChannel+0x2a0>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	4a15      	ldr	r2, [pc, #84]	; (80045ec <HAL_ADC_ConfigChannel+0x2a0>)
 8004598:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800459c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a10      	ldr	r2, [pc, #64]	; (80045e4 <HAL_ADC_ConfigChannel+0x298>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d111      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80045a8:	4b11      	ldr	r3, [pc, #68]	; (80045f0 <HAL_ADC_ConfigChannel+0x2a4>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a11      	ldr	r2, [pc, #68]	; (80045f4 <HAL_ADC_ConfigChannel+0x2a8>)
 80045ae:	fba2 2303 	umull	r2, r3, r2, r3
 80045b2:	0c9a      	lsrs	r2, r3, #18
 80045b4:	4613      	mov	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80045be:	e002      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1f9      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	10000012 	.word	0x10000012
 80045e8:	40012000 	.word	0x40012000
 80045ec:	40012300 	.word	0x40012300
 80045f0:	20000000 	.word	0x20000000
 80045f4:	431bde83 	.word	0x431bde83

080045f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004600:	4b78      	ldr	r3, [pc, #480]	; (80047e4 <ADC_Init+0x1ec>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	4a77      	ldr	r2, [pc, #476]	; (80047e4 <ADC_Init+0x1ec>)
 8004606:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800460a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800460c:	4b75      	ldr	r3, [pc, #468]	; (80047e4 <ADC_Init+0x1ec>)
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	4973      	ldr	r1, [pc, #460]	; (80047e4 <ADC_Init+0x1ec>)
 8004616:	4313      	orrs	r3, r2
 8004618:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004628:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6859      	ldr	r1, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	021a      	lsls	r2, r3, #8
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800464c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6859      	ldr	r1, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800466e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6899      	ldr	r1, [r3, #8]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	4a58      	ldr	r2, [pc, #352]	; (80047e8 <ADC_Init+0x1f0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d022      	beq.n	80046d2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800469a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6899      	ldr	r1, [r3, #8]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80046bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6899      	ldr	r1, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	609a      	str	r2, [r3, #8]
 80046d0:	e00f      	b.n	80046f2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80046f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0202 	bic.w	r2, r2, #2
 8004700:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6899      	ldr	r1, [r3, #8]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	005a      	lsls	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01b      	beq.n	8004758 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800472e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800473e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6859      	ldr	r1, [r3, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	3b01      	subs	r3, #1
 800474c:	035a      	lsls	r2, r3, #13
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
 8004756:	e007      	b.n	8004768 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004766:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004776:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	3b01      	subs	r3, #1
 8004784:	051a      	lsls	r2, r3, #20
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800479c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6899      	ldr	r1, [r3, #8]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047aa:	025a      	lsls	r2, r3, #9
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6899      	ldr	r1, [r3, #8]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	029a      	lsls	r2, r3, #10
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	609a      	str	r2, [r3, #8]
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	40012300 	.word	0x40012300
 80047e8:	0f000001 	.word	0x0f000001

080047ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e0ed      	b.n	80049da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d102      	bne.n	8004810 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fd fd00 	bl	8002210 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0201 	orr.w	r2, r2, #1
 800481e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004820:	f7ff fb3e 	bl	8003ea0 <HAL_GetTick>
 8004824:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004826:	e012      	b.n	800484e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004828:	f7ff fb3a 	bl	8003ea0 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b0a      	cmp	r3, #10
 8004834:	d90b      	bls.n	800484e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2205      	movs	r2, #5
 8004846:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e0c5      	b.n	80049da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0e5      	beq.n	8004828 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0202 	bic.w	r2, r2, #2
 800486a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800486c:	f7ff fb18 	bl	8003ea0 <HAL_GetTick>
 8004870:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004872:	e012      	b.n	800489a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004874:	f7ff fb14 	bl	8003ea0 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b0a      	cmp	r3, #10
 8004880:	d90b      	bls.n	800489a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2205      	movs	r2, #5
 8004892:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e09f      	b.n	80049da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1e5      	bne.n	8004874 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	7e1b      	ldrb	r3, [r3, #24]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d108      	bne.n	80048c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	e007      	b.n	80048d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	7e5b      	ldrb	r3, [r3, #25]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d108      	bne.n	80048ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	e007      	b.n	80048fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	7e9b      	ldrb	r3, [r3, #26]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d108      	bne.n	8004916 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0220 	orr.w	r2, r2, #32
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	e007      	b.n	8004926 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0220 	bic.w	r2, r2, #32
 8004924:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	7edb      	ldrb	r3, [r3, #27]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d108      	bne.n	8004940 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0210 	bic.w	r2, r2, #16
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	e007      	b.n	8004950 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0210 	orr.w	r2, r2, #16
 800494e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	7f1b      	ldrb	r3, [r3, #28]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d108      	bne.n	800496a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0208 	orr.w	r2, r2, #8
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	e007      	b.n	800497a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0208 	bic.w	r2, r2, #8
 8004978:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	7f5b      	ldrb	r3, [r3, #29]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d108      	bne.n	8004994 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f042 0204 	orr.w	r2, r2, #4
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	e007      	b.n	80049a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0204 	bic.w	r2, r2, #4
 80049a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	ea42 0103 	orr.w	r1, r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	1e5a      	subs	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
	...

080049e4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049fa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80049fc:	7cfb      	ldrb	r3, [r7, #19]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d003      	beq.n	8004a0a <HAL_CAN_ConfigFilter+0x26>
 8004a02:	7cfb      	ldrb	r3, [r7, #19]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	f040 80c7 	bne.w	8004b98 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a69      	ldr	r2, [pc, #420]	; (8004bb4 <HAL_CAN_ConfigFilter+0x1d0>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d001      	beq.n	8004a18 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8004a14:	4b68      	ldr	r3, [pc, #416]	; (8004bb8 <HAL_CAN_ConfigFilter+0x1d4>)
 8004a16:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a1e:	f043 0201 	orr.w	r2, r3, #1
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	4a63      	ldr	r2, [pc, #396]	; (8004bb8 <HAL_CAN_ConfigFilter+0x1d4>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d111      	bne.n	8004a54 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a36:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	021b      	lsls	r3, r3, #8
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	f003 031f 	and.w	r3, r3, #31
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a62:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	401a      	ands	r2, r3
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d123      	bne.n	8004ac6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	43db      	mvns	r3, r3
 8004a88:	401a      	ands	r2, r3
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004aa0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	3248      	adds	r2, #72	; 0x48
 8004aa6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004aba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004abc:	6979      	ldr	r1, [r7, #20]
 8004abe:	3348      	adds	r3, #72	; 0x48
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	440b      	add	r3, r1
 8004ac4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d122      	bne.n	8004b14 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004aee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	3248      	adds	r2, #72	; 0x48
 8004af4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004b08:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004b0a:	6979      	ldr	r1, [r7, #20]
 8004b0c:	3348      	adds	r3, #72	; 0x48
 8004b0e:	00db      	lsls	r3, r3, #3
 8004b10:	440b      	add	r3, r1
 8004b12:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d109      	bne.n	8004b30 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	43db      	mvns	r3, r3
 8004b26:	401a      	ands	r2, r3
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004b2e:	e007      	b.n	8004b40 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d109      	bne.n	8004b5c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	43db      	mvns	r3, r3
 8004b52:	401a      	ands	r2, r3
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004b5a:	e007      	b.n	8004b6c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	431a      	orrs	r2, r3
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d107      	bne.n	8004b84 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b8a:	f023 0201 	bic.w	r2, r3, #1
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	e006      	b.n	8004ba6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
  }
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	371c      	adds	r7, #28
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40003400 	.word	0x40003400
 8004bb8:	40006400 	.word	0x40006400

08004bbc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d12e      	bne.n	8004c2e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0201 	bic.w	r2, r2, #1
 8004be6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004be8:	f7ff f95a 	bl	8003ea0 <HAL_GetTick>
 8004bec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004bee:	e012      	b.n	8004c16 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004bf0:	f7ff f956 	bl	8003ea0 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b0a      	cmp	r3, #10
 8004bfc:	d90b      	bls.n	8004c16 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2205      	movs	r2, #5
 8004c0e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e012      	b.n	8004c3c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e5      	bne.n	8004bf0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e006      	b.n	8004c3c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
  }
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b089      	sub	sp, #36	; 0x24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c58:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004c62:	7ffb      	ldrb	r3, [r7, #31]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d003      	beq.n	8004c70 <HAL_CAN_AddTxMessage+0x2c>
 8004c68:	7ffb      	ldrb	r3, [r7, #31]
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	f040 80ad 	bne.w	8004dca <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10a      	bne.n	8004c90 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d105      	bne.n	8004c90 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 8095 	beq.w	8004dba <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	0e1b      	lsrs	r3, r3, #24
 8004c94:	f003 0303 	and.w	r3, r3, #3
 8004c98:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	409a      	lsls	r2, r3
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10d      	bne.n	8004cc8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004cb6:	68f9      	ldr	r1, [r7, #12]
 8004cb8:	6809      	ldr	r1, [r1, #0]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	3318      	adds	r3, #24
 8004cc0:	011b      	lsls	r3, r3, #4
 8004cc2:	440b      	add	r3, r1
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	e00f      	b.n	8004ce8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004cd2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004cd8:	68f9      	ldr	r1, [r7, #12]
 8004cda:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004cdc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	3318      	adds	r3, #24
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	440b      	add	r3, r1
 8004ce6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6819      	ldr	r1, [r3, #0]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	691a      	ldr	r2, [r3, #16]
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	3318      	adds	r3, #24
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	440b      	add	r3, r1
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	7d1b      	ldrb	r3, [r3, #20]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d111      	bne.n	8004d28 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	3318      	adds	r3, #24
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	4413      	add	r3, r2
 8004d10:	3304      	adds	r3, #4
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	6811      	ldr	r1, [r2, #0]
 8004d18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	3318      	adds	r3, #24
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	440b      	add	r3, r1
 8004d24:	3304      	adds	r3, #4
 8004d26:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3307      	adds	r3, #7
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	061a      	lsls	r2, r3, #24
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3306      	adds	r3, #6
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	041b      	lsls	r3, r3, #16
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	3305      	adds	r3, #5
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	021b      	lsls	r3, r3, #8
 8004d42:	4313      	orrs	r3, r2
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	3204      	adds	r2, #4
 8004d48:	7812      	ldrb	r2, [r2, #0]
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	6811      	ldr	r1, [r2, #0]
 8004d50:	ea43 0200 	orr.w	r2, r3, r0
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	011b      	lsls	r3, r3, #4
 8004d58:	440b      	add	r3, r1
 8004d5a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004d5e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3303      	adds	r3, #3
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	061a      	lsls	r2, r3, #24
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3302      	adds	r3, #2
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	041b      	lsls	r3, r3, #16
 8004d70:	431a      	orrs	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	3301      	adds	r3, #1
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	021b      	lsls	r3, r3, #8
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	7812      	ldrb	r2, [r2, #0]
 8004d80:	4610      	mov	r0, r2
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	6811      	ldr	r1, [r2, #0]
 8004d86:	ea43 0200 	orr.w	r2, r3, r0
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	440b      	add	r3, r1
 8004d90:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004d94:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	3318      	adds	r3, #24
 8004d9e:	011b      	lsls	r3, r3, #4
 8004da0:	4413      	add	r3, r2
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	6811      	ldr	r1, [r2, #0]
 8004da8:	f043 0201 	orr.w	r2, r3, #1
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	3318      	adds	r3, #24
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	440b      	add	r3, r1
 8004db4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	e00e      	b.n	8004dd8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e006      	b.n	8004dd8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
  }
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3724      	adds	r7, #36	; 0x24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004df8:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8004dfa:	7afb      	ldrb	r3, [r7, #11]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d002      	beq.n	8004e06 <HAL_CAN_IsTxMessagePending+0x22>
 8004e00:	7afb      	ldrb	r3, [r7, #11]
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d10b      	bne.n	8004e1e <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	069b      	lsls	r3, r3, #26
 8004e10:	401a      	ands	r2, r3
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	069b      	lsls	r3, r3, #26
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d001      	beq.n	8004e1e <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e40:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004e42:	7dfb      	ldrb	r3, [r7, #23]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d003      	beq.n	8004e50 <HAL_CAN_GetRxMessage+0x24>
 8004e48:	7dfb      	ldrb	r3, [r7, #23]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	f040 80f3 	bne.w	8005036 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10e      	bne.n	8004e74 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f003 0303 	and.w	r3, r3, #3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d116      	bne.n	8004e92 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e0e7      	b.n	8005044 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d107      	bne.n	8004e92 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e0d8      	b.n	8005044 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	331b      	adds	r3, #27
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	4413      	add	r3, r2
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0204 	and.w	r2, r3, #4
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10c      	bne.n	8004eca <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	331b      	adds	r3, #27
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	4413      	add	r3, r2
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	0d5b      	lsrs	r3, r3, #21
 8004ec0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	e00b      	b.n	8004ee2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	331b      	adds	r3, #27
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	4413      	add	r3, r2
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	08db      	lsrs	r3, r3, #3
 8004eda:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	331b      	adds	r3, #27
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	4413      	add	r3, r2
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0202 	and.w	r2, r3, #2
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	331b      	adds	r3, #27
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	4413      	add	r3, r2
 8004f04:	3304      	adds	r3, #4
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 020f 	and.w	r2, r3, #15
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	331b      	adds	r3, #27
 8004f18:	011b      	lsls	r3, r3, #4
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	0a1b      	lsrs	r3, r3, #8
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	331b      	adds	r3, #27
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	4413      	add	r3, r2
 8004f34:	3304      	adds	r3, #4
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	0c1b      	lsrs	r3, r3, #16
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	0a1a      	lsrs	r2, r3, #8
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	b2d2      	uxtb	r2, r2
 8004f6e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	011b      	lsls	r3, r3, #4
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	0c1a      	lsrs	r2, r3, #16
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	3302      	adds	r3, #2
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	0e1a      	lsrs	r2, r3, #24
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	3303      	adds	r3, #3
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	0a1a      	lsrs	r2, r3, #8
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	3305      	adds	r3, #5
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	0c1a      	lsrs	r2, r3, #16
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	3306      	adds	r3, #6
 8004fec:	b2d2      	uxtb	r2, r2
 8004fee:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	0e1a      	lsrs	r2, r3, #24
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	3307      	adds	r3, #7
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d108      	bne.n	8005022 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0220 	orr.w	r2, r2, #32
 800501e:	60da      	str	r2, [r3, #12]
 8005020:	e007      	b.n	8005032 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	691a      	ldr	r2, [r3, #16]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f042 0220 	orr.w	r2, r2, #32
 8005030:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	e006      	b.n	8005044 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
  }
}
 8005044:	4618      	mov	r0, r3
 8005046:	371c      	adds	r7, #28
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005060:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005062:	7bfb      	ldrb	r3, [r7, #15]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d002      	beq.n	800506e <HAL_CAN_ActivateNotification+0x1e>
 8005068:	7bfb      	ldrb	r3, [r7, #15]
 800506a:	2b02      	cmp	r3, #2
 800506c:	d109      	bne.n	8005082 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6959      	ldr	r1, [r3, #20]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	e006      	b.n	8005090 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
  }
}
 8005090:	4618      	mov	r0, r3
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08a      	sub	sp, #40	; 0x28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80050a4:	2300      	movs	r3, #0
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d07c      	beq.n	80051dc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d023      	beq.n	8005134 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2201      	movs	r2, #1
 80050f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f983 	bl	800540a <HAL_CAN_TxMailbox0CompleteCallback>
 8005104:	e016      	b.n	8005134 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	d004      	beq.n	800511a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005116:	627b      	str	r3, [r7, #36]	; 0x24
 8005118:	e00c      	b.n	8005134 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	f003 0308 	and.w	r3, r3, #8
 8005120:	2b00      	cmp	r3, #0
 8005122:	d004      	beq.n	800512e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800512a:	627b      	str	r3, [r7, #36]	; 0x24
 800512c:	e002      	b.n	8005134 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f989 	bl	8005446 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513a:	2b00      	cmp	r3, #0
 800513c:	d024      	beq.n	8005188 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005146:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f963 	bl	800541e <HAL_CAN_TxMailbox1CompleteCallback>
 8005158:	e016      	b.n	8005188 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005160:	2b00      	cmp	r3, #0
 8005162:	d004      	beq.n	800516e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800516a:	627b      	str	r3, [r7, #36]	; 0x24
 800516c:	e00c      	b.n	8005188 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005174:	2b00      	cmp	r3, #0
 8005176:	d004      	beq.n	8005182 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
 8005180:	e002      	b.n	8005188 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f969 	bl	800545a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d024      	beq.n	80051dc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800519a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f943 	bl	8005432 <HAL_CAN_TxMailbox2CompleteCallback>
 80051ac:	e016      	b.n	80051dc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d004      	beq.n	80051c2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
 80051c0:	e00c      	b.n	80051dc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d004      	beq.n	80051d6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d2:	627b      	str	r3, [r7, #36]	; 0x24
 80051d4:	e002      	b.n	80051dc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f949 	bl	800546e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00c      	beq.n	8005200 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f003 0310 	and.w	r3, r3, #16
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d007      	beq.n	8005200 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2210      	movs	r2, #16
 80051fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00b      	beq.n	8005222 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f003 0308 	and.w	r3, r3, #8
 8005210:	2b00      	cmp	r3, #0
 8005212:	d006      	beq.n	8005222 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2208      	movs	r2, #8
 800521a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7fe fbfd 	bl	8003a1c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d009      	beq.n	8005240 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fe fbd6 	bl	80039ec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00c      	beq.n	8005264 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f003 0310 	and.w	r3, r3, #16
 8005250:	2b00      	cmp	r3, #0
 8005252:	d007      	beq.n	8005264 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800525a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2210      	movs	r2, #16
 8005262:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	f003 0320 	and.w	r3, r3, #32
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00b      	beq.n	8005286 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f003 0308 	and.w	r3, r3, #8
 8005274:	2b00      	cmp	r3, #0
 8005276:	d006      	beq.n	8005286 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2208      	movs	r2, #8
 800527e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f908 	bl	8005496 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b00      	cmp	r3, #0
 800528e:	d009      	beq.n	80052a4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f8ef 	bl	8005482 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00b      	beq.n	80052c6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	f003 0310 	and.w	r3, r3, #16
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d006      	beq.n	80052c6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2210      	movs	r2, #16
 80052be:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f8f2 	bl	80054aa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00b      	beq.n	80052e8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	f003 0308 	and.w	r3, r3, #8
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d006      	beq.n	80052e8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2208      	movs	r2, #8
 80052e0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f8eb 	bl	80054be <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d07b      	beq.n	80053ea <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	f003 0304 	and.w	r3, r3, #4
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d072      	beq.n	80053e2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005302:	2b00      	cmp	r3, #0
 8005304:	d008      	beq.n	8005318 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	f043 0301 	orr.w	r3, r3, #1
 8005316:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800531e:	2b00      	cmp	r3, #0
 8005320:	d008      	beq.n	8005334 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	f043 0302 	orr.w	r3, r3, #2
 8005332:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800533a:	2b00      	cmp	r3, #0
 800533c:	d008      	beq.n	8005350 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005344:	2b00      	cmp	r3, #0
 8005346:	d003      	beq.n	8005350 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	f043 0304 	orr.w	r3, r3, #4
 800534e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005356:	2b00      	cmp	r3, #0
 8005358:	d043      	beq.n	80053e2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005360:	2b00      	cmp	r3, #0
 8005362:	d03e      	beq.n	80053e2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800536a:	2b60      	cmp	r3, #96	; 0x60
 800536c:	d02b      	beq.n	80053c6 <HAL_CAN_IRQHandler+0x32a>
 800536e:	2b60      	cmp	r3, #96	; 0x60
 8005370:	d82e      	bhi.n	80053d0 <HAL_CAN_IRQHandler+0x334>
 8005372:	2b50      	cmp	r3, #80	; 0x50
 8005374:	d022      	beq.n	80053bc <HAL_CAN_IRQHandler+0x320>
 8005376:	2b50      	cmp	r3, #80	; 0x50
 8005378:	d82a      	bhi.n	80053d0 <HAL_CAN_IRQHandler+0x334>
 800537a:	2b40      	cmp	r3, #64	; 0x40
 800537c:	d019      	beq.n	80053b2 <HAL_CAN_IRQHandler+0x316>
 800537e:	2b40      	cmp	r3, #64	; 0x40
 8005380:	d826      	bhi.n	80053d0 <HAL_CAN_IRQHandler+0x334>
 8005382:	2b30      	cmp	r3, #48	; 0x30
 8005384:	d010      	beq.n	80053a8 <HAL_CAN_IRQHandler+0x30c>
 8005386:	2b30      	cmp	r3, #48	; 0x30
 8005388:	d822      	bhi.n	80053d0 <HAL_CAN_IRQHandler+0x334>
 800538a:	2b10      	cmp	r3, #16
 800538c:	d002      	beq.n	8005394 <HAL_CAN_IRQHandler+0x2f8>
 800538e:	2b20      	cmp	r3, #32
 8005390:	d005      	beq.n	800539e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005392:	e01d      	b.n	80053d0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	f043 0308 	orr.w	r3, r3, #8
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800539c:	e019      	b.n	80053d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	f043 0310 	orr.w	r3, r3, #16
 80053a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80053a6:	e014      	b.n	80053d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	f043 0320 	orr.w	r3, r3, #32
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80053b0:	e00f      	b.n	80053d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80053ba:	e00a      	b.n	80053d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80053c4:	e005      	b.n	80053d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80053ce:	e000      	b.n	80053d2 <HAL_CAN_IRQHandler+0x336>
            break;
 80053d0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	699a      	ldr	r2, [r3, #24]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80053e0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2204      	movs	r2, #4
 80053e8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d008      	beq.n	8005402 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	431a      	orrs	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f868 	bl	80054d2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005402:	bf00      	nop
 8005404:	3728      	adds	r7, #40	; 0x28
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005412:	bf00      	nop
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800549e:	bf00      	nop
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
	...

080054e8 <__NVIC_SetPriorityGrouping>:
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f003 0307 	and.w	r3, r3, #7
 80054f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054f8:	4b0b      	ldr	r3, [pc, #44]	; (8005528 <__NVIC_SetPriorityGrouping+0x40>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005504:	4013      	ands	r3, r2
 8005506:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005510:	4b06      	ldr	r3, [pc, #24]	; (800552c <__NVIC_SetPriorityGrouping+0x44>)
 8005512:	4313      	orrs	r3, r2
 8005514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005516:	4a04      	ldr	r2, [pc, #16]	; (8005528 <__NVIC_SetPriorityGrouping+0x40>)
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	60d3      	str	r3, [r2, #12]
}
 800551c:	bf00      	nop
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	e000ed00 	.word	0xe000ed00
 800552c:	05fa0000 	.word	0x05fa0000

08005530 <__NVIC_GetPriorityGrouping>:
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005534:	4b04      	ldr	r3, [pc, #16]	; (8005548 <__NVIC_GetPriorityGrouping+0x18>)
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	0a1b      	lsrs	r3, r3, #8
 800553a:	f003 0307 	and.w	r3, r3, #7
}
 800553e:	4618      	mov	r0, r3
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	e000ed00 	.word	0xe000ed00

0800554c <__NVIC_EnableIRQ>:
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	4603      	mov	r3, r0
 8005554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800555a:	2b00      	cmp	r3, #0
 800555c:	db0b      	blt.n	8005576 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800555e:	79fb      	ldrb	r3, [r7, #7]
 8005560:	f003 021f 	and.w	r2, r3, #31
 8005564:	4907      	ldr	r1, [pc, #28]	; (8005584 <__NVIC_EnableIRQ+0x38>)
 8005566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800556a:	095b      	lsrs	r3, r3, #5
 800556c:	2001      	movs	r0, #1
 800556e:	fa00 f202 	lsl.w	r2, r0, r2
 8005572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	e000e100 	.word	0xe000e100

08005588 <__NVIC_SetPriority>:
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	4603      	mov	r3, r0
 8005590:	6039      	str	r1, [r7, #0]
 8005592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005598:	2b00      	cmp	r3, #0
 800559a:	db0a      	blt.n	80055b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	490c      	ldr	r1, [pc, #48]	; (80055d4 <__NVIC_SetPriority+0x4c>)
 80055a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a6:	0112      	lsls	r2, r2, #4
 80055a8:	b2d2      	uxtb	r2, r2
 80055aa:	440b      	add	r3, r1
 80055ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80055b0:	e00a      	b.n	80055c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	4908      	ldr	r1, [pc, #32]	; (80055d8 <__NVIC_SetPriority+0x50>)
 80055b8:	79fb      	ldrb	r3, [r7, #7]
 80055ba:	f003 030f 	and.w	r3, r3, #15
 80055be:	3b04      	subs	r3, #4
 80055c0:	0112      	lsls	r2, r2, #4
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	440b      	add	r3, r1
 80055c6:	761a      	strb	r2, [r3, #24]
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	e000e100 	.word	0xe000e100
 80055d8:	e000ed00 	.word	0xe000ed00

080055dc <NVIC_EncodePriority>:
{
 80055dc:	b480      	push	{r7}
 80055de:	b089      	sub	sp, #36	; 0x24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f003 0307 	and.w	r3, r3, #7
 80055ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	f1c3 0307 	rsb	r3, r3, #7
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	bf28      	it	cs
 80055fa:	2304      	movcs	r3, #4
 80055fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	3304      	adds	r3, #4
 8005602:	2b06      	cmp	r3, #6
 8005604:	d902      	bls.n	800560c <NVIC_EncodePriority+0x30>
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	3b03      	subs	r3, #3
 800560a:	e000      	b.n	800560e <NVIC_EncodePriority+0x32>
 800560c:	2300      	movs	r3, #0
 800560e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005610:	f04f 32ff 	mov.w	r2, #4294967295
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	fa02 f303 	lsl.w	r3, r2, r3
 800561a:	43da      	mvns	r2, r3
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	401a      	ands	r2, r3
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005624:	f04f 31ff 	mov.w	r1, #4294967295
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	fa01 f303 	lsl.w	r3, r1, r3
 800562e:	43d9      	mvns	r1, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005634:	4313      	orrs	r3, r2
}
 8005636:	4618      	mov	r0, r3
 8005638:	3724      	adds	r7, #36	; 0x24
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
	...

08005644 <SysTick_Config>:
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3b01      	subs	r3, #1
 8005650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005654:	d301      	bcc.n	800565a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8005656:	2301      	movs	r3, #1
 8005658:	e00f      	b.n	800567a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800565a:	4a0a      	ldr	r2, [pc, #40]	; (8005684 <SysTick_Config+0x40>)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3b01      	subs	r3, #1
 8005660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005662:	210f      	movs	r1, #15
 8005664:	f04f 30ff 	mov.w	r0, #4294967295
 8005668:	f7ff ff8e 	bl	8005588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800566c:	4b05      	ldr	r3, [pc, #20]	; (8005684 <SysTick_Config+0x40>)
 800566e:	2200      	movs	r2, #0
 8005670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005672:	4b04      	ldr	r3, [pc, #16]	; (8005684 <SysTick_Config+0x40>)
 8005674:	2207      	movs	r2, #7
 8005676:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	e000e010 	.word	0xe000e010

08005688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff ff29 	bl	80054e8 <__NVIC_SetPriorityGrouping>
}
 8005696:	bf00      	nop
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800569e:	b580      	push	{r7, lr}
 80056a0:	b086      	sub	sp, #24
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	4603      	mov	r3, r0
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	607a      	str	r2, [r7, #4]
 80056aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80056ac:	2300      	movs	r3, #0
 80056ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056b0:	f7ff ff3e 	bl	8005530 <__NVIC_GetPriorityGrouping>
 80056b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	68b9      	ldr	r1, [r7, #8]
 80056ba:	6978      	ldr	r0, [r7, #20]
 80056bc:	f7ff ff8e 	bl	80055dc <NVIC_EncodePriority>
 80056c0:	4602      	mov	r2, r0
 80056c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056c6:	4611      	mov	r1, r2
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff ff5d 	bl	8005588 <__NVIC_SetPriority>
}
 80056ce:	bf00      	nop
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b082      	sub	sp, #8
 80056da:	af00      	add	r7, sp, #0
 80056dc:	4603      	mov	r3, r0
 80056de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7ff ff31 	bl	800554c <__NVIC_EnableIRQ>
}
 80056ea:	bf00      	nop
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b082      	sub	sp, #8
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7ff ffa2 	bl	8005644 <SysTick_Config>
 8005700:	4603      	mov	r3, r0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b084      	sub	sp, #16
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005716:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005718:	f7fe fbc2 	bl	8003ea0 <HAL_GetTick>
 800571c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d008      	beq.n	800573c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2280      	movs	r2, #128	; 0x80
 800572e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e052      	b.n	80057e2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0216 	bic.w	r2, r2, #22
 800574a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695a      	ldr	r2, [r3, #20]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800575a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005760:	2b00      	cmp	r3, #0
 8005762:	d103      	bne.n	800576c <HAL_DMA_Abort+0x62>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005768:	2b00      	cmp	r3, #0
 800576a:	d007      	beq.n	800577c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 0208 	bic.w	r2, r2, #8
 800577a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 0201 	bic.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800578c:	e013      	b.n	80057b6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800578e:	f7fe fb87 	bl	8003ea0 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	2b05      	cmp	r3, #5
 800579a:	d90c      	bls.n	80057b6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2220      	movs	r2, #32
 80057a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2203      	movs	r2, #3
 80057a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e015      	b.n	80057e2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1e4      	bne.n	800578e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c8:	223f      	movs	r2, #63	; 0x3f
 80057ca:	409a      	lsls	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d004      	beq.n	8005808 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2280      	movs	r2, #128	; 0x80
 8005802:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e00c      	b.n	8005822 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2205      	movs	r2, #5
 800580c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0201 	bic.w	r2, r2, #1
 800581e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
	...

08005830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005830:	b480      	push	{r7}
 8005832:	b089      	sub	sp, #36	; 0x24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800583a:	2300      	movs	r3, #0
 800583c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800583e:	2300      	movs	r3, #0
 8005840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005842:	2300      	movs	r3, #0
 8005844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005846:	2300      	movs	r3, #0
 8005848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800584a:	2300      	movs	r3, #0
 800584c:	61fb      	str	r3, [r7, #28]
 800584e:	e175      	b.n	8005b3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005850:	2201      	movs	r2, #1
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	4013      	ands	r3, r2
 8005862:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	429a      	cmp	r2, r3
 800586a:	f040 8164 	bne.w	8005b36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	2b01      	cmp	r3, #1
 8005878:	d005      	beq.n	8005886 <HAL_GPIO_Init+0x56>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f003 0303 	and.w	r3, r3, #3
 8005882:	2b02      	cmp	r3, #2
 8005884:	d130      	bne.n	80058e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	2203      	movs	r2, #3
 8005892:	fa02 f303 	lsl.w	r3, r2, r3
 8005896:	43db      	mvns	r3, r3
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	4013      	ands	r3, r2
 800589c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	fa02 f303 	lsl.w	r3, r2, r3
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058bc:	2201      	movs	r2, #1
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	fa02 f303 	lsl.w	r3, r2, r3
 80058c4:	43db      	mvns	r3, r3
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	4013      	ands	r3, r2
 80058ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	091b      	lsrs	r3, r3, #4
 80058d2:	f003 0201 	and.w	r2, r3, #1
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	4313      	orrs	r3, r2
 80058e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f003 0303 	and.w	r3, r3, #3
 80058f0:	2b03      	cmp	r3, #3
 80058f2:	d017      	beq.n	8005924 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	2203      	movs	r2, #3
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	43db      	mvns	r3, r3
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	4013      	ands	r3, r2
 800590a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	fa02 f303 	lsl.w	r3, r2, r3
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	4313      	orrs	r3, r2
 800591c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f003 0303 	and.w	r3, r3, #3
 800592c:	2b02      	cmp	r3, #2
 800592e:	d123      	bne.n	8005978 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	08da      	lsrs	r2, r3, #3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3208      	adds	r2, #8
 8005938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800593c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	220f      	movs	r2, #15
 8005948:	fa02 f303 	lsl.w	r3, r2, r3
 800594c:	43db      	mvns	r3, r3
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	4013      	ands	r3, r2
 8005952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f003 0307 	and.w	r3, r3, #7
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	4313      	orrs	r3, r2
 8005968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	08da      	lsrs	r2, r3, #3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	3208      	adds	r2, #8
 8005972:	69b9      	ldr	r1, [r7, #24]
 8005974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	2203      	movs	r2, #3
 8005984:	fa02 f303 	lsl.w	r3, r2, r3
 8005988:	43db      	mvns	r3, r3
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	4013      	ands	r3, r2
 800598e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f003 0203 	and.w	r2, r3, #3
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	fa02 f303 	lsl.w	r3, r2, r3
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 80be 	beq.w	8005b36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059ba:	4b66      	ldr	r3, [pc, #408]	; (8005b54 <HAL_GPIO_Init+0x324>)
 80059bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059be:	4a65      	ldr	r2, [pc, #404]	; (8005b54 <HAL_GPIO_Init+0x324>)
 80059c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059c4:	6453      	str	r3, [r2, #68]	; 0x44
 80059c6:	4b63      	ldr	r3, [pc, #396]	; (8005b54 <HAL_GPIO_Init+0x324>)
 80059c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80059d2:	4a61      	ldr	r2, [pc, #388]	; (8005b58 <HAL_GPIO_Init+0x328>)
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	089b      	lsrs	r3, r3, #2
 80059d8:	3302      	adds	r3, #2
 80059da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	f003 0303 	and.w	r3, r3, #3
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	220f      	movs	r2, #15
 80059ea:	fa02 f303 	lsl.w	r3, r2, r3
 80059ee:	43db      	mvns	r3, r3
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	4013      	ands	r3, r2
 80059f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a58      	ldr	r2, [pc, #352]	; (8005b5c <HAL_GPIO_Init+0x32c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d037      	beq.n	8005a6e <HAL_GPIO_Init+0x23e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a57      	ldr	r2, [pc, #348]	; (8005b60 <HAL_GPIO_Init+0x330>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d031      	beq.n	8005a6a <HAL_GPIO_Init+0x23a>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a56      	ldr	r2, [pc, #344]	; (8005b64 <HAL_GPIO_Init+0x334>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d02b      	beq.n	8005a66 <HAL_GPIO_Init+0x236>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a55      	ldr	r2, [pc, #340]	; (8005b68 <HAL_GPIO_Init+0x338>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d025      	beq.n	8005a62 <HAL_GPIO_Init+0x232>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a54      	ldr	r2, [pc, #336]	; (8005b6c <HAL_GPIO_Init+0x33c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d01f      	beq.n	8005a5e <HAL_GPIO_Init+0x22e>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a53      	ldr	r2, [pc, #332]	; (8005b70 <HAL_GPIO_Init+0x340>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d019      	beq.n	8005a5a <HAL_GPIO_Init+0x22a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a52      	ldr	r2, [pc, #328]	; (8005b74 <HAL_GPIO_Init+0x344>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d013      	beq.n	8005a56 <HAL_GPIO_Init+0x226>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a51      	ldr	r2, [pc, #324]	; (8005b78 <HAL_GPIO_Init+0x348>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00d      	beq.n	8005a52 <HAL_GPIO_Init+0x222>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a50      	ldr	r2, [pc, #320]	; (8005b7c <HAL_GPIO_Init+0x34c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d007      	beq.n	8005a4e <HAL_GPIO_Init+0x21e>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a4f      	ldr	r2, [pc, #316]	; (8005b80 <HAL_GPIO_Init+0x350>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d101      	bne.n	8005a4a <HAL_GPIO_Init+0x21a>
 8005a46:	2309      	movs	r3, #9
 8005a48:	e012      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a4a:	230a      	movs	r3, #10
 8005a4c:	e010      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a4e:	2308      	movs	r3, #8
 8005a50:	e00e      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a52:	2307      	movs	r3, #7
 8005a54:	e00c      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a56:	2306      	movs	r3, #6
 8005a58:	e00a      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a5a:	2305      	movs	r3, #5
 8005a5c:	e008      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a5e:	2304      	movs	r3, #4
 8005a60:	e006      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a62:	2303      	movs	r3, #3
 8005a64:	e004      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a66:	2302      	movs	r3, #2
 8005a68:	e002      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e000      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	69fa      	ldr	r2, [r7, #28]
 8005a72:	f002 0203 	and.w	r2, r2, #3
 8005a76:	0092      	lsls	r2, r2, #2
 8005a78:	4093      	lsls	r3, r2
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005a80:	4935      	ldr	r1, [pc, #212]	; (8005b58 <HAL_GPIO_Init+0x328>)
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	089b      	lsrs	r3, r3, #2
 8005a86:	3302      	adds	r3, #2
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a8e:	4b3d      	ldr	r3, [pc, #244]	; (8005b84 <HAL_GPIO_Init+0x354>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	43db      	mvns	r3, r3
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ab2:	4a34      	ldr	r2, [pc, #208]	; (8005b84 <HAL_GPIO_Init+0x354>)
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ab8:	4b32      	ldr	r3, [pc, #200]	; (8005b84 <HAL_GPIO_Init+0x354>)
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005adc:	4a29      	ldr	r2, [pc, #164]	; (8005b84 <HAL_GPIO_Init+0x354>)
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005ae2:	4b28      	ldr	r3, [pc, #160]	; (8005b84 <HAL_GPIO_Init+0x354>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	43db      	mvns	r3, r3
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	4013      	ands	r3, r2
 8005af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b06:	4a1f      	ldr	r2, [pc, #124]	; (8005b84 <HAL_GPIO_Init+0x354>)
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b0c:	4b1d      	ldr	r3, [pc, #116]	; (8005b84 <HAL_GPIO_Init+0x354>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	43db      	mvns	r3, r3
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b30:	4a14      	ldr	r2, [pc, #80]	; (8005b84 <HAL_GPIO_Init+0x354>)
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	61fb      	str	r3, [r7, #28]
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	2b0f      	cmp	r3, #15
 8005b40:	f67f ae86 	bls.w	8005850 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop
 8005b48:	3724      	adds	r7, #36	; 0x24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40023800 	.word	0x40023800
 8005b58:	40013800 	.word	0x40013800
 8005b5c:	40020000 	.word	0x40020000
 8005b60:	40020400 	.word	0x40020400
 8005b64:	40020800 	.word	0x40020800
 8005b68:	40020c00 	.word	0x40020c00
 8005b6c:	40021000 	.word	0x40021000
 8005b70:	40021400 	.word	0x40021400
 8005b74:	40021800 	.word	0x40021800
 8005b78:	40021c00 	.word	0x40021c00
 8005b7c:	40022000 	.word	0x40022000
 8005b80:	40022400 	.word	0x40022400
 8005b84:	40013c00 	.word	0x40013c00

08005b88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	460b      	mov	r3, r1
 8005b92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	691a      	ldr	r2, [r3, #16]
 8005b98:	887b      	ldrh	r3, [r7, #2]
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	73fb      	strb	r3, [r7, #15]
 8005ba4:	e001      	b.n	8005baa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	807b      	strh	r3, [r7, #2]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005bc8:	787b      	ldrb	r3, [r7, #1]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bce:	887a      	ldrh	r2, [r7, #2]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005bd4:	e003      	b.n	8005bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005bd6:	887b      	ldrh	r3, [r7, #2]
 8005bd8:	041a      	lsls	r2, r3, #16
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	619a      	str	r2, [r3, #24]
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
	...

08005bec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005bf6:	4b23      	ldr	r3, [pc, #140]	; (8005c84 <HAL_PWREx_EnableOverDrive+0x98>)
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	4a22      	ldr	r2, [pc, #136]	; (8005c84 <HAL_PWREx_EnableOverDrive+0x98>)
 8005bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c00:	6413      	str	r3, [r2, #64]	; 0x40
 8005c02:	4b20      	ldr	r3, [pc, #128]	; (8005c84 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c0a:	603b      	str	r3, [r7, #0]
 8005c0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005c0e:	4b1e      	ldr	r3, [pc, #120]	; (8005c88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a1d      	ldr	r2, [pc, #116]	; (8005c88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c18:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c1a:	f7fe f941 	bl	8003ea0 <HAL_GetTick>
 8005c1e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c20:	e009      	b.n	8005c36 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c22:	f7fe f93d 	bl	8003ea0 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c30:	d901      	bls.n	8005c36 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e022      	b.n	8005c7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c36:	4b14      	ldr	r3, [pc, #80]	; (8005c88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c42:	d1ee      	bne.n	8005c22 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005c44:	4b10      	ldr	r3, [pc, #64]	; (8005c88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a0f      	ldr	r2, [pc, #60]	; (8005c88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c50:	f7fe f926 	bl	8003ea0 <HAL_GetTick>
 8005c54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c56:	e009      	b.n	8005c6c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c58:	f7fe f922 	bl	8003ea0 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c66:	d901      	bls.n	8005c6c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e007      	b.n	8005c7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c6c:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c78:	d1ee      	bne.n	8005c58 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	40023800 	.word	0x40023800
 8005c88:	40007000 	.word	0x40007000

08005c8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005c94:	2300      	movs	r3, #0
 8005c96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e29b      	b.n	80061da <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 8087 	beq.w	8005dbe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005cb0:	4b96      	ldr	r3, [pc, #600]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f003 030c 	and.w	r3, r3, #12
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d00c      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cbc:	4b93      	ldr	r3, [pc, #588]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f003 030c 	and.w	r3, r3, #12
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d112      	bne.n	8005cee <HAL_RCC_OscConfig+0x62>
 8005cc8:	4b90      	ldr	r3, [pc, #576]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cd4:	d10b      	bne.n	8005cee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cd6:	4b8d      	ldr	r3, [pc, #564]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d06c      	beq.n	8005dbc <HAL_RCC_OscConfig+0x130>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d168      	bne.n	8005dbc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e275      	b.n	80061da <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf6:	d106      	bne.n	8005d06 <HAL_RCC_OscConfig+0x7a>
 8005cf8:	4b84      	ldr	r3, [pc, #528]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a83      	ldr	r2, [pc, #524]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d02:	6013      	str	r3, [r2, #0]
 8005d04:	e02e      	b.n	8005d64 <HAL_RCC_OscConfig+0xd8>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10c      	bne.n	8005d28 <HAL_RCC_OscConfig+0x9c>
 8005d0e:	4b7f      	ldr	r3, [pc, #508]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a7e      	ldr	r2, [pc, #504]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d18:	6013      	str	r3, [r2, #0]
 8005d1a:	4b7c      	ldr	r3, [pc, #496]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a7b      	ldr	r2, [pc, #492]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	e01d      	b.n	8005d64 <HAL_RCC_OscConfig+0xd8>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d30:	d10c      	bne.n	8005d4c <HAL_RCC_OscConfig+0xc0>
 8005d32:	4b76      	ldr	r3, [pc, #472]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a75      	ldr	r2, [pc, #468]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	4b73      	ldr	r3, [pc, #460]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a72      	ldr	r2, [pc, #456]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d48:	6013      	str	r3, [r2, #0]
 8005d4a:	e00b      	b.n	8005d64 <HAL_RCC_OscConfig+0xd8>
 8005d4c:	4b6f      	ldr	r3, [pc, #444]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a6e      	ldr	r2, [pc, #440]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d56:	6013      	str	r3, [r2, #0]
 8005d58:	4b6c      	ldr	r3, [pc, #432]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a6b      	ldr	r2, [pc, #428]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d013      	beq.n	8005d94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d6c:	f7fe f898 	bl	8003ea0 <HAL_GetTick>
 8005d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d72:	e008      	b.n	8005d86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d74:	f7fe f894 	bl	8003ea0 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b64      	cmp	r3, #100	; 0x64
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e229      	b.n	80061da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d86:	4b61      	ldr	r3, [pc, #388]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0f0      	beq.n	8005d74 <HAL_RCC_OscConfig+0xe8>
 8005d92:	e014      	b.n	8005dbe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d94:	f7fe f884 	bl	8003ea0 <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d9c:	f7fe f880 	bl	8003ea0 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b64      	cmp	r3, #100	; 0x64
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e215      	b.n	80061da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dae:	4b57      	ldr	r3, [pc, #348]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1f0      	bne.n	8005d9c <HAL_RCC_OscConfig+0x110>
 8005dba:	e000      	b.n	8005dbe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d069      	beq.n	8005e9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005dca:	4b50      	ldr	r3, [pc, #320]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 030c 	and.w	r3, r3, #12
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00b      	beq.n	8005dee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dd6:	4b4d      	ldr	r3, [pc, #308]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f003 030c 	and.w	r3, r3, #12
 8005dde:	2b08      	cmp	r3, #8
 8005de0:	d11c      	bne.n	8005e1c <HAL_RCC_OscConfig+0x190>
 8005de2:	4b4a      	ldr	r3, [pc, #296]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d116      	bne.n	8005e1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dee:	4b47      	ldr	r3, [pc, #284]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d005      	beq.n	8005e06 <HAL_RCC_OscConfig+0x17a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d001      	beq.n	8005e06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e1e9      	b.n	80061da <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e06:	4b41      	ldr	r3, [pc, #260]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	493d      	ldr	r1, [pc, #244]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e1a:	e040      	b.n	8005e9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d023      	beq.n	8005e6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e24:	4b39      	ldr	r3, [pc, #228]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a38      	ldr	r2, [pc, #224]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005e2a:	f043 0301 	orr.w	r3, r3, #1
 8005e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e30:	f7fe f836 	bl	8003ea0 <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e38:	f7fe f832 	bl	8003ea0 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e1c7      	b.n	80061da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e4a:	4b30      	ldr	r3, [pc, #192]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0f0      	beq.n	8005e38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e56:	4b2d      	ldr	r3, [pc, #180]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	00db      	lsls	r3, r3, #3
 8005e64:	4929      	ldr	r1, [pc, #164]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	600b      	str	r3, [r1, #0]
 8005e6a:	e018      	b.n	8005e9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e6c:	4b27      	ldr	r3, [pc, #156]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a26      	ldr	r2, [pc, #152]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005e72:	f023 0301 	bic.w	r3, r3, #1
 8005e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e78:	f7fe f812 	bl	8003ea0 <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e80:	f7fe f80e 	bl	8003ea0 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e1a3      	b.n	80061da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e92:	4b1e      	ldr	r3, [pc, #120]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1f0      	bne.n	8005e80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d038      	beq.n	8005f1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d019      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eb2:	4b16      	ldr	r3, [pc, #88]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eb6:	4a15      	ldr	r2, [pc, #84]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005eb8:	f043 0301 	orr.w	r3, r3, #1
 8005ebc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ebe:	f7fd ffef 	bl	8003ea0 <HAL_GetTick>
 8005ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ec4:	e008      	b.n	8005ed8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ec6:	f7fd ffeb 	bl	8003ea0 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d901      	bls.n	8005ed8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e180      	b.n	80061da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ed8:	4b0c      	ldr	r3, [pc, #48]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d0f0      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x23a>
 8005ee4:	e01a      	b.n	8005f1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ee6:	4b09      	ldr	r3, [pc, #36]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eea:	4a08      	ldr	r2, [pc, #32]	; (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005eec:	f023 0301 	bic.w	r3, r3, #1
 8005ef0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef2:	f7fd ffd5 	bl	8003ea0 <HAL_GetTick>
 8005ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ef8:	e00a      	b.n	8005f10 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005efa:	f7fd ffd1 	bl	8003ea0 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d903      	bls.n	8005f10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e166      	b.n	80061da <HAL_RCC_OscConfig+0x54e>
 8005f0c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f10:	4b92      	ldr	r3, [pc, #584]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 8005f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1ee      	bne.n	8005efa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 80a4 	beq.w	8006072 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f2a:	4b8c      	ldr	r3, [pc, #560]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10d      	bne.n	8005f52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f36:	4b89      	ldr	r3, [pc, #548]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	4a88      	ldr	r2, [pc, #544]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 8005f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f40:	6413      	str	r3, [r2, #64]	; 0x40
 8005f42:	4b86      	ldr	r3, [pc, #536]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f4a:	60bb      	str	r3, [r7, #8]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f52:	4b83      	ldr	r3, [pc, #524]	; (8006160 <HAL_RCC_OscConfig+0x4d4>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d118      	bne.n	8005f90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005f5e:	4b80      	ldr	r3, [pc, #512]	; (8006160 <HAL_RCC_OscConfig+0x4d4>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a7f      	ldr	r2, [pc, #508]	; (8006160 <HAL_RCC_OscConfig+0x4d4>)
 8005f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f6a:	f7fd ff99 	bl	8003ea0 <HAL_GetTick>
 8005f6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f70:	e008      	b.n	8005f84 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f72:	f7fd ff95 	bl	8003ea0 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	2b64      	cmp	r3, #100	; 0x64
 8005f7e:	d901      	bls.n	8005f84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e12a      	b.n	80061da <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f84:	4b76      	ldr	r3, [pc, #472]	; (8006160 <HAL_RCC_OscConfig+0x4d4>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d0f0      	beq.n	8005f72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d106      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x31a>
 8005f98:	4b70      	ldr	r3, [pc, #448]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 8005f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9c:	4a6f      	ldr	r2, [pc, #444]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 8005f9e:	f043 0301 	orr.w	r3, r3, #1
 8005fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8005fa4:	e02d      	b.n	8006002 <HAL_RCC_OscConfig+0x376>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10c      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x33c>
 8005fae:	4b6b      	ldr	r3, [pc, #428]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 8005fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb2:	4a6a      	ldr	r2, [pc, #424]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 8005fb4:	f023 0301 	bic.w	r3, r3, #1
 8005fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8005fba:	4b68      	ldr	r3, [pc, #416]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 8005fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fbe:	4a67      	ldr	r2, [pc, #412]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 8005fc0:	f023 0304 	bic.w	r3, r3, #4
 8005fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8005fc6:	e01c      	b.n	8006002 <HAL_RCC_OscConfig+0x376>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	2b05      	cmp	r3, #5
 8005fce:	d10c      	bne.n	8005fea <HAL_RCC_OscConfig+0x35e>
 8005fd0:	4b62      	ldr	r3, [pc, #392]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 8005fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd4:	4a61      	ldr	r2, [pc, #388]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 8005fd6:	f043 0304 	orr.w	r3, r3, #4
 8005fda:	6713      	str	r3, [r2, #112]	; 0x70
 8005fdc:	4b5f      	ldr	r3, [pc, #380]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 8005fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe0:	4a5e      	ldr	r2, [pc, #376]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 8005fe2:	f043 0301 	orr.w	r3, r3, #1
 8005fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fe8:	e00b      	b.n	8006002 <HAL_RCC_OscConfig+0x376>
 8005fea:	4b5c      	ldr	r3, [pc, #368]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 8005fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fee:	4a5b      	ldr	r2, [pc, #364]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 8005ff0:	f023 0301 	bic.w	r3, r3, #1
 8005ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ff6:	4b59      	ldr	r3, [pc, #356]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 8005ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffa:	4a58      	ldr	r2, [pc, #352]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 8005ffc:	f023 0304 	bic.w	r3, r3, #4
 8006000:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d015      	beq.n	8006036 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800600a:	f7fd ff49 	bl	8003ea0 <HAL_GetTick>
 800600e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006010:	e00a      	b.n	8006028 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006012:	f7fd ff45 	bl	8003ea0 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006020:	4293      	cmp	r3, r2
 8006022:	d901      	bls.n	8006028 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e0d8      	b.n	80061da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006028:	4b4c      	ldr	r3, [pc, #304]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 800602a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d0ee      	beq.n	8006012 <HAL_RCC_OscConfig+0x386>
 8006034:	e014      	b.n	8006060 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006036:	f7fd ff33 	bl	8003ea0 <HAL_GetTick>
 800603a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800603c:	e00a      	b.n	8006054 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800603e:	f7fd ff2f 	bl	8003ea0 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	f241 3288 	movw	r2, #5000	; 0x1388
 800604c:	4293      	cmp	r3, r2
 800604e:	d901      	bls.n	8006054 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e0c2      	b.n	80061da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006054:	4b41      	ldr	r3, [pc, #260]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 8006056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1ee      	bne.n	800603e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006060:	7dfb      	ldrb	r3, [r7, #23]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d105      	bne.n	8006072 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006066:	4b3d      	ldr	r3, [pc, #244]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 8006068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606a:	4a3c      	ldr	r2, [pc, #240]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 800606c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006070:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 80ae 	beq.w	80061d8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800607c:	4b37      	ldr	r3, [pc, #220]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f003 030c 	and.w	r3, r3, #12
 8006084:	2b08      	cmp	r3, #8
 8006086:	d06d      	beq.n	8006164 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	2b02      	cmp	r3, #2
 800608e:	d14b      	bne.n	8006128 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006090:	4b32      	ldr	r3, [pc, #200]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a31      	ldr	r2, [pc, #196]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 8006096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800609a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800609c:	f7fd ff00 	bl	8003ea0 <HAL_GetTick>
 80060a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060a2:	e008      	b.n	80060b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060a4:	f7fd fefc 	bl	8003ea0 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e091      	b.n	80061da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060b6:	4b29      	ldr	r3, [pc, #164]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1f0      	bne.n	80060a4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69da      	ldr	r2, [r3, #28]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	431a      	orrs	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	019b      	lsls	r3, r3, #6
 80060d2:	431a      	orrs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d8:	085b      	lsrs	r3, r3, #1
 80060da:	3b01      	subs	r3, #1
 80060dc:	041b      	lsls	r3, r3, #16
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e4:	061b      	lsls	r3, r3, #24
 80060e6:	431a      	orrs	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ec:	071b      	lsls	r3, r3, #28
 80060ee:	491b      	ldr	r1, [pc, #108]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060f4:	4b19      	ldr	r3, [pc, #100]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a18      	ldr	r2, [pc, #96]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 80060fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006100:	f7fd fece 	bl	8003ea0 <HAL_GetTick>
 8006104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006106:	e008      	b.n	800611a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006108:	f7fd feca 	bl	8003ea0 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e05f      	b.n	80061da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800611a:	4b10      	ldr	r3, [pc, #64]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d0f0      	beq.n	8006108 <HAL_RCC_OscConfig+0x47c>
 8006126:	e057      	b.n	80061d8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006128:	4b0c      	ldr	r3, [pc, #48]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a0b      	ldr	r2, [pc, #44]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 800612e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006134:	f7fd feb4 	bl	8003ea0 <HAL_GetTick>
 8006138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800613a:	e008      	b.n	800614e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800613c:	f7fd feb0 	bl	8003ea0 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b02      	cmp	r3, #2
 8006148:	d901      	bls.n	800614e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e045      	b.n	80061da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800614e:	4b03      	ldr	r3, [pc, #12]	; (800615c <HAL_RCC_OscConfig+0x4d0>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1f0      	bne.n	800613c <HAL_RCC_OscConfig+0x4b0>
 800615a:	e03d      	b.n	80061d8 <HAL_RCC_OscConfig+0x54c>
 800615c:	40023800 	.word	0x40023800
 8006160:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006164:	4b1f      	ldr	r3, [pc, #124]	; (80061e4 <HAL_RCC_OscConfig+0x558>)
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d030      	beq.n	80061d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800617c:	429a      	cmp	r2, r3
 800617e:	d129      	bne.n	80061d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800618a:	429a      	cmp	r2, r3
 800618c:	d122      	bne.n	80061d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006194:	4013      	ands	r3, r2
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800619a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800619c:	4293      	cmp	r3, r2
 800619e:	d119      	bne.n	80061d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061aa:	085b      	lsrs	r3, r3, #1
 80061ac:	3b01      	subs	r3, #1
 80061ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d10f      	bne.n	80061d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d107      	bne.n	80061d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d001      	beq.n	80061d8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e000      	b.n	80061da <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	40023800 	.word	0x40023800

080061e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e0d0      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006200:	4b6a      	ldr	r3, [pc, #424]	; (80063ac <HAL_RCC_ClockConfig+0x1c4>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 030f 	and.w	r3, r3, #15
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	429a      	cmp	r2, r3
 800620c:	d910      	bls.n	8006230 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800620e:	4b67      	ldr	r3, [pc, #412]	; (80063ac <HAL_RCC_ClockConfig+0x1c4>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f023 020f 	bic.w	r2, r3, #15
 8006216:	4965      	ldr	r1, [pc, #404]	; (80063ac <HAL_RCC_ClockConfig+0x1c4>)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	4313      	orrs	r3, r2
 800621c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800621e:	4b63      	ldr	r3, [pc, #396]	; (80063ac <HAL_RCC_ClockConfig+0x1c4>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 030f 	and.w	r3, r3, #15
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	429a      	cmp	r2, r3
 800622a:	d001      	beq.n	8006230 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e0b8      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d020      	beq.n	800627e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	2b00      	cmp	r3, #0
 8006246:	d005      	beq.n	8006254 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006248:	4b59      	ldr	r3, [pc, #356]	; (80063b0 <HAL_RCC_ClockConfig+0x1c8>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	4a58      	ldr	r2, [pc, #352]	; (80063b0 <HAL_RCC_ClockConfig+0x1c8>)
 800624e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006252:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0308 	and.w	r3, r3, #8
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006260:	4b53      	ldr	r3, [pc, #332]	; (80063b0 <HAL_RCC_ClockConfig+0x1c8>)
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	4a52      	ldr	r2, [pc, #328]	; (80063b0 <HAL_RCC_ClockConfig+0x1c8>)
 8006266:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800626a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800626c:	4b50      	ldr	r3, [pc, #320]	; (80063b0 <HAL_RCC_ClockConfig+0x1c8>)
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	494d      	ldr	r1, [pc, #308]	; (80063b0 <HAL_RCC_ClockConfig+0x1c8>)
 800627a:	4313      	orrs	r3, r2
 800627c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d040      	beq.n	800630c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d107      	bne.n	80062a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006292:	4b47      	ldr	r3, [pc, #284]	; (80063b0 <HAL_RCC_ClockConfig+0x1c8>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d115      	bne.n	80062ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e07f      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d107      	bne.n	80062ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062aa:	4b41      	ldr	r3, [pc, #260]	; (80063b0 <HAL_RCC_ClockConfig+0x1c8>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d109      	bne.n	80062ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e073      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ba:	4b3d      	ldr	r3, [pc, #244]	; (80063b0 <HAL_RCC_ClockConfig+0x1c8>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e06b      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062ca:	4b39      	ldr	r3, [pc, #228]	; (80063b0 <HAL_RCC_ClockConfig+0x1c8>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f023 0203 	bic.w	r2, r3, #3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	4936      	ldr	r1, [pc, #216]	; (80063b0 <HAL_RCC_ClockConfig+0x1c8>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062dc:	f7fd fde0 	bl	8003ea0 <HAL_GetTick>
 80062e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062e2:	e00a      	b.n	80062fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062e4:	f7fd fddc 	bl	8003ea0 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e053      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062fa:	4b2d      	ldr	r3, [pc, #180]	; (80063b0 <HAL_RCC_ClockConfig+0x1c8>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f003 020c 	and.w	r2, r3, #12
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	429a      	cmp	r2, r3
 800630a:	d1eb      	bne.n	80062e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800630c:	4b27      	ldr	r3, [pc, #156]	; (80063ac <HAL_RCC_ClockConfig+0x1c4>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 030f 	and.w	r3, r3, #15
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d210      	bcs.n	800633c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800631a:	4b24      	ldr	r3, [pc, #144]	; (80063ac <HAL_RCC_ClockConfig+0x1c4>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f023 020f 	bic.w	r2, r3, #15
 8006322:	4922      	ldr	r1, [pc, #136]	; (80063ac <HAL_RCC_ClockConfig+0x1c4>)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	4313      	orrs	r3, r2
 8006328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800632a:	4b20      	ldr	r3, [pc, #128]	; (80063ac <HAL_RCC_ClockConfig+0x1c4>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 030f 	and.w	r3, r3, #15
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	d001      	beq.n	800633c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e032      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b00      	cmp	r3, #0
 8006346:	d008      	beq.n	800635a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006348:	4b19      	ldr	r3, [pc, #100]	; (80063b0 <HAL_RCC_ClockConfig+0x1c8>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	4916      	ldr	r1, [pc, #88]	; (80063b0 <HAL_RCC_ClockConfig+0x1c8>)
 8006356:	4313      	orrs	r3, r2
 8006358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0308 	and.w	r3, r3, #8
 8006362:	2b00      	cmp	r3, #0
 8006364:	d009      	beq.n	800637a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006366:	4b12      	ldr	r3, [pc, #72]	; (80063b0 <HAL_RCC_ClockConfig+0x1c8>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	490e      	ldr	r1, [pc, #56]	; (80063b0 <HAL_RCC_ClockConfig+0x1c8>)
 8006376:	4313      	orrs	r3, r2
 8006378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800637a:	f000 f821 	bl	80063c0 <HAL_RCC_GetSysClockFreq>
 800637e:	4602      	mov	r2, r0
 8006380:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <HAL_RCC_ClockConfig+0x1c8>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	091b      	lsrs	r3, r3, #4
 8006386:	f003 030f 	and.w	r3, r3, #15
 800638a:	490a      	ldr	r1, [pc, #40]	; (80063b4 <HAL_RCC_ClockConfig+0x1cc>)
 800638c:	5ccb      	ldrb	r3, [r1, r3]
 800638e:	fa22 f303 	lsr.w	r3, r2, r3
 8006392:	4a09      	ldr	r2, [pc, #36]	; (80063b8 <HAL_RCC_ClockConfig+0x1d0>)
 8006394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006396:	4b09      	ldr	r3, [pc, #36]	; (80063bc <HAL_RCC_ClockConfig+0x1d4>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4618      	mov	r0, r3
 800639c:	f7fd fd3c 	bl	8003e18 <HAL_InitTick>

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	40023c00 	.word	0x40023c00
 80063b0:	40023800 	.word	0x40023800
 80063b4:	080096d4 	.word	0x080096d4
 80063b8:	20000000 	.word	0x20000000
 80063bc:	20000004 	.word	0x20000004

080063c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063c4:	b090      	sub	sp, #64	; 0x40
 80063c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80063c8:	2300      	movs	r3, #0
 80063ca:	637b      	str	r3, [r7, #52]	; 0x34
 80063cc:	2300      	movs	r3, #0
 80063ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063d0:	2300      	movs	r3, #0
 80063d2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80063d4:	2300      	movs	r3, #0
 80063d6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063d8:	4b59      	ldr	r3, [pc, #356]	; (8006540 <HAL_RCC_GetSysClockFreq+0x180>)
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f003 030c 	and.w	r3, r3, #12
 80063e0:	2b08      	cmp	r3, #8
 80063e2:	d00d      	beq.n	8006400 <HAL_RCC_GetSysClockFreq+0x40>
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	f200 80a1 	bhi.w	800652c <HAL_RCC_GetSysClockFreq+0x16c>
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <HAL_RCC_GetSysClockFreq+0x34>
 80063ee:	2b04      	cmp	r3, #4
 80063f0:	d003      	beq.n	80063fa <HAL_RCC_GetSysClockFreq+0x3a>
 80063f2:	e09b      	b.n	800652c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063f4:	4b53      	ldr	r3, [pc, #332]	; (8006544 <HAL_RCC_GetSysClockFreq+0x184>)
 80063f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80063f8:	e09b      	b.n	8006532 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063fa:	4b53      	ldr	r3, [pc, #332]	; (8006548 <HAL_RCC_GetSysClockFreq+0x188>)
 80063fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80063fe:	e098      	b.n	8006532 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006400:	4b4f      	ldr	r3, [pc, #316]	; (8006540 <HAL_RCC_GetSysClockFreq+0x180>)
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006408:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800640a:	4b4d      	ldr	r3, [pc, #308]	; (8006540 <HAL_RCC_GetSysClockFreq+0x180>)
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d028      	beq.n	8006468 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006416:	4b4a      	ldr	r3, [pc, #296]	; (8006540 <HAL_RCC_GetSysClockFreq+0x180>)
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	099b      	lsrs	r3, r3, #6
 800641c:	2200      	movs	r2, #0
 800641e:	623b      	str	r3, [r7, #32]
 8006420:	627a      	str	r2, [r7, #36]	; 0x24
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006428:	2100      	movs	r1, #0
 800642a:	4b47      	ldr	r3, [pc, #284]	; (8006548 <HAL_RCC_GetSysClockFreq+0x188>)
 800642c:	fb03 f201 	mul.w	r2, r3, r1
 8006430:	2300      	movs	r3, #0
 8006432:	fb00 f303 	mul.w	r3, r0, r3
 8006436:	4413      	add	r3, r2
 8006438:	4a43      	ldr	r2, [pc, #268]	; (8006548 <HAL_RCC_GetSysClockFreq+0x188>)
 800643a:	fba0 1202 	umull	r1, r2, r0, r2
 800643e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006440:	460a      	mov	r2, r1
 8006442:	62ba      	str	r2, [r7, #40]	; 0x28
 8006444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006446:	4413      	add	r3, r2
 8006448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800644a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644c:	2200      	movs	r2, #0
 800644e:	61bb      	str	r3, [r7, #24]
 8006450:	61fa      	str	r2, [r7, #28]
 8006452:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006456:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800645a:	f7f9 fef5 	bl	8000248 <__aeabi_uldivmod>
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	4613      	mov	r3, r2
 8006464:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006466:	e053      	b.n	8006510 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006468:	4b35      	ldr	r3, [pc, #212]	; (8006540 <HAL_RCC_GetSysClockFreq+0x180>)
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	099b      	lsrs	r3, r3, #6
 800646e:	2200      	movs	r2, #0
 8006470:	613b      	str	r3, [r7, #16]
 8006472:	617a      	str	r2, [r7, #20]
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800647a:	f04f 0b00 	mov.w	fp, #0
 800647e:	4652      	mov	r2, sl
 8006480:	465b      	mov	r3, fp
 8006482:	f04f 0000 	mov.w	r0, #0
 8006486:	f04f 0100 	mov.w	r1, #0
 800648a:	0159      	lsls	r1, r3, #5
 800648c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006490:	0150      	lsls	r0, r2, #5
 8006492:	4602      	mov	r2, r0
 8006494:	460b      	mov	r3, r1
 8006496:	ebb2 080a 	subs.w	r8, r2, sl
 800649a:	eb63 090b 	sbc.w	r9, r3, fp
 800649e:	f04f 0200 	mov.w	r2, #0
 80064a2:	f04f 0300 	mov.w	r3, #0
 80064a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80064aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80064ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80064b2:	ebb2 0408 	subs.w	r4, r2, r8
 80064b6:	eb63 0509 	sbc.w	r5, r3, r9
 80064ba:	f04f 0200 	mov.w	r2, #0
 80064be:	f04f 0300 	mov.w	r3, #0
 80064c2:	00eb      	lsls	r3, r5, #3
 80064c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064c8:	00e2      	lsls	r2, r4, #3
 80064ca:	4614      	mov	r4, r2
 80064cc:	461d      	mov	r5, r3
 80064ce:	eb14 030a 	adds.w	r3, r4, sl
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	eb45 030b 	adc.w	r3, r5, fp
 80064d8:	607b      	str	r3, [r7, #4]
 80064da:	f04f 0200 	mov.w	r2, #0
 80064de:	f04f 0300 	mov.w	r3, #0
 80064e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064e6:	4629      	mov	r1, r5
 80064e8:	028b      	lsls	r3, r1, #10
 80064ea:	4621      	mov	r1, r4
 80064ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064f0:	4621      	mov	r1, r4
 80064f2:	028a      	lsls	r2, r1, #10
 80064f4:	4610      	mov	r0, r2
 80064f6:	4619      	mov	r1, r3
 80064f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064fa:	2200      	movs	r2, #0
 80064fc:	60bb      	str	r3, [r7, #8]
 80064fe:	60fa      	str	r2, [r7, #12]
 8006500:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006504:	f7f9 fea0 	bl	8000248 <__aeabi_uldivmod>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	4613      	mov	r3, r2
 800650e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006510:	4b0b      	ldr	r3, [pc, #44]	; (8006540 <HAL_RCC_GetSysClockFreq+0x180>)
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	0c1b      	lsrs	r3, r3, #16
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	3301      	adds	r3, #1
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8006520:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006524:	fbb2 f3f3 	udiv	r3, r2, r3
 8006528:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800652a:	e002      	b.n	8006532 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800652c:	4b05      	ldr	r3, [pc, #20]	; (8006544 <HAL_RCC_GetSysClockFreq+0x184>)
 800652e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006534:	4618      	mov	r0, r3
 8006536:	3740      	adds	r7, #64	; 0x40
 8006538:	46bd      	mov	sp, r7
 800653a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800653e:	bf00      	nop
 8006540:	40023800 	.word	0x40023800
 8006544:	00f42400 	.word	0x00f42400
 8006548:	017d7840 	.word	0x017d7840

0800654c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006550:	4b03      	ldr	r3, [pc, #12]	; (8006560 <HAL_RCC_GetHCLKFreq+0x14>)
 8006552:	681b      	ldr	r3, [r3, #0]
}
 8006554:	4618      	mov	r0, r3
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	20000000 	.word	0x20000000

08006564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006568:	f7ff fff0 	bl	800654c <HAL_RCC_GetHCLKFreq>
 800656c:	4602      	mov	r2, r0
 800656e:	4b05      	ldr	r3, [pc, #20]	; (8006584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	0a9b      	lsrs	r3, r3, #10
 8006574:	f003 0307 	and.w	r3, r3, #7
 8006578:	4903      	ldr	r1, [pc, #12]	; (8006588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800657a:	5ccb      	ldrb	r3, [r1, r3]
 800657c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006580:	4618      	mov	r0, r3
 8006582:	bd80      	pop	{r7, pc}
 8006584:	40023800 	.word	0x40023800
 8006588:	080096e4 	.word	0x080096e4

0800658c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006590:	f7ff ffdc 	bl	800654c <HAL_RCC_GetHCLKFreq>
 8006594:	4602      	mov	r2, r0
 8006596:	4b05      	ldr	r3, [pc, #20]	; (80065ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	0b5b      	lsrs	r3, r3, #13
 800659c:	f003 0307 	and.w	r3, r3, #7
 80065a0:	4903      	ldr	r1, [pc, #12]	; (80065b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065a2:	5ccb      	ldrb	r3, [r1, r3]
 80065a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	40023800 	.word	0x40023800
 80065b0:	080096e4 	.word	0x080096e4

080065b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b088      	sub	sp, #32
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80065bc:	2300      	movs	r3, #0
 80065be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80065c0:	2300      	movs	r3, #0
 80065c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80065c8:	2300      	movs	r3, #0
 80065ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80065cc:	2300      	movs	r3, #0
 80065ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d012      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80065dc:	4b69      	ldr	r3, [pc, #420]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	4a68      	ldr	r2, [pc, #416]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80065e6:	6093      	str	r3, [r2, #8]
 80065e8:	4b66      	ldr	r3, [pc, #408]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f0:	4964      	ldr	r1, [pc, #400]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80065fe:	2301      	movs	r3, #1
 8006600:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d017      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800660e:	4b5d      	ldr	r3, [pc, #372]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006614:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800661c:	4959      	ldr	r1, [pc, #356]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800661e:	4313      	orrs	r3, r2
 8006620:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006628:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800662c:	d101      	bne.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800662e:	2301      	movs	r3, #1
 8006630:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800663a:	2301      	movs	r3, #1
 800663c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d017      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800664a:	4b4e      	ldr	r3, [pc, #312]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800664c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006650:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006658:	494a      	ldr	r1, [pc, #296]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800665a:	4313      	orrs	r3, r2
 800665c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006664:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006668:	d101      	bne.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800666a:	2301      	movs	r3, #1
 800666c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006676:	2301      	movs	r3, #1
 8006678:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006686:	2301      	movs	r3, #1
 8006688:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0320 	and.w	r3, r3, #32
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 808b 	beq.w	80067ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006698:	4b3a      	ldr	r3, [pc, #232]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800669a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669c:	4a39      	ldr	r2, [pc, #228]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800669e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066a2:	6413      	str	r3, [r2, #64]	; 0x40
 80066a4:	4b37      	ldr	r3, [pc, #220]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ac:	60bb      	str	r3, [r7, #8]
 80066ae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80066b0:	4b35      	ldr	r3, [pc, #212]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a34      	ldr	r2, [pc, #208]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80066b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066bc:	f7fd fbf0 	bl	8003ea0 <HAL_GetTick>
 80066c0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80066c2:	e008      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066c4:	f7fd fbec 	bl	8003ea0 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b64      	cmp	r3, #100	; 0x64
 80066d0:	d901      	bls.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e38f      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80066d6:	4b2c      	ldr	r3, [pc, #176]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d0f0      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80066e2:	4b28      	ldr	r3, [pc, #160]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d035      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d02e      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006700:	4b20      	ldr	r3, [pc, #128]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006708:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800670a:	4b1e      	ldr	r3, [pc, #120]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800670c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800670e:	4a1d      	ldr	r2, [pc, #116]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006714:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006716:	4b1b      	ldr	r3, [pc, #108]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671a:	4a1a      	ldr	r2, [pc, #104]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800671c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006720:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006722:	4a18      	ldr	r2, [pc, #96]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006728:	4b16      	ldr	r3, [pc, #88]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800672a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b01      	cmp	r3, #1
 8006732:	d114      	bne.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006734:	f7fd fbb4 	bl	8003ea0 <HAL_GetTick>
 8006738:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800673a:	e00a      	b.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800673c:	f7fd fbb0 	bl	8003ea0 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	f241 3288 	movw	r2, #5000	; 0x1388
 800674a:	4293      	cmp	r3, r2
 800674c:	d901      	bls.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e351      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006752:	4b0c      	ldr	r3, [pc, #48]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d0ee      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006766:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800676a:	d111      	bne.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800676c:	4b05      	ldr	r3, [pc, #20]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006778:	4b04      	ldr	r3, [pc, #16]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800677a:	400b      	ands	r3, r1
 800677c:	4901      	ldr	r1, [pc, #4]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800677e:	4313      	orrs	r3, r2
 8006780:	608b      	str	r3, [r1, #8]
 8006782:	e00b      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006784:	40023800 	.word	0x40023800
 8006788:	40007000 	.word	0x40007000
 800678c:	0ffffcff 	.word	0x0ffffcff
 8006790:	4bac      	ldr	r3, [pc, #688]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	4aab      	ldr	r2, [pc, #684]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006796:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800679a:	6093      	str	r3, [r2, #8]
 800679c:	4ba9      	ldr	r3, [pc, #676]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800679e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067a8:	49a6      	ldr	r1, [pc, #664]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0310 	and.w	r3, r3, #16
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d010      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80067ba:	4ba2      	ldr	r3, [pc, #648]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067c0:	4aa0      	ldr	r2, [pc, #640]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80067ca:	4b9e      	ldr	r3, [pc, #632]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d4:	499b      	ldr	r1, [pc, #620]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00a      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067e8:	4b96      	ldr	r3, [pc, #600]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067f6:	4993      	ldr	r1, [pc, #588]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00a      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800680a:	4b8e      	ldr	r3, [pc, #568]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800680c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006810:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006818:	498a      	ldr	r1, [pc, #552]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800681a:	4313      	orrs	r3, r2
 800681c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00a      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800682c:	4b85      	ldr	r3, [pc, #532]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800682e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006832:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800683a:	4982      	ldr	r1, [pc, #520]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800683c:	4313      	orrs	r3, r2
 800683e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00a      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800684e:	4b7d      	ldr	r3, [pc, #500]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006854:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800685c:	4979      	ldr	r1, [pc, #484]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800685e:	4313      	orrs	r3, r2
 8006860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00a      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006870:	4b74      	ldr	r3, [pc, #464]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006876:	f023 0203 	bic.w	r2, r3, #3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687e:	4971      	ldr	r1, [pc, #452]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006880:	4313      	orrs	r3, r2
 8006882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00a      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006892:	4b6c      	ldr	r3, [pc, #432]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006898:	f023 020c 	bic.w	r2, r3, #12
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068a0:	4968      	ldr	r1, [pc, #416]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00a      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80068b4:	4b63      	ldr	r3, [pc, #396]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80068b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c2:	4960      	ldr	r1, [pc, #384]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00a      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80068d6:	4b5b      	ldr	r3, [pc, #364]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80068d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068dc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068e4:	4957      	ldr	r1, [pc, #348]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00a      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80068f8:	4b52      	ldr	r3, [pc, #328]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80068fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006906:	494f      	ldr	r1, [pc, #316]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006908:	4313      	orrs	r3, r2
 800690a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800691a:	4b4a      	ldr	r3, [pc, #296]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800691c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006920:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006928:	4946      	ldr	r1, [pc, #280]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800692a:	4313      	orrs	r3, r2
 800692c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00a      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800693c:	4b41      	ldr	r3, [pc, #260]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800693e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006942:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800694a:	493e      	ldr	r1, [pc, #248]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800694c:	4313      	orrs	r3, r2
 800694e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800695e:	4b39      	ldr	r3, [pc, #228]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006964:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800696c:	4935      	ldr	r1, [pc, #212]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800696e:	4313      	orrs	r3, r2
 8006970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00a      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006980:	4b30      	ldr	r3, [pc, #192]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006986:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800698e:	492d      	ldr	r1, [pc, #180]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006990:	4313      	orrs	r3, r2
 8006992:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d011      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80069a2:	4b28      	ldr	r3, [pc, #160]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80069a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069b0:	4924      	ldr	r1, [pc, #144]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069c0:	d101      	bne.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80069c2:	2301      	movs	r3, #1
 80069c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0308 	and.w	r3, r3, #8
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80069d2:	2301      	movs	r3, #1
 80069d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00a      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069e2:	4b18      	ldr	r3, [pc, #96]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80069e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069f0:	4914      	ldr	r1, [pc, #80]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00b      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006a04:	4b0f      	ldr	r3, [pc, #60]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a0a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a14:	490b      	ldr	r1, [pc, #44]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00f      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006a28:	4b06      	ldr	r3, [pc, #24]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a2e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a38:	4902      	ldr	r1, [pc, #8]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006a40:	e002      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006a42:	bf00      	nop
 8006a44:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00b      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a54:	4b8a      	ldr	r3, [pc, #552]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a64:	4986      	ldr	r1, [pc, #536]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00b      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006a78:	4b81      	ldr	r3, [pc, #516]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a7e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a88:	497d      	ldr	r1, [pc, #500]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d006      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 80d6 	beq.w	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006aa4:	4b76      	ldr	r3, [pc, #472]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a75      	ldr	r2, [pc, #468]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006aaa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ab0:	f7fd f9f6 	bl	8003ea0 <HAL_GetTick>
 8006ab4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ab6:	e008      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ab8:	f7fd f9f2 	bl	8003ea0 <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	2b64      	cmp	r3, #100	; 0x64
 8006ac4:	d901      	bls.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e195      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006aca:	4b6d      	ldr	r3, [pc, #436]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1f0      	bne.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d021      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d11d      	bne.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006aea:	4b65      	ldr	r3, [pc, #404]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006af0:	0c1b      	lsrs	r3, r3, #16
 8006af2:	f003 0303 	and.w	r3, r3, #3
 8006af6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006af8:	4b61      	ldr	r3, [pc, #388]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006afe:	0e1b      	lsrs	r3, r3, #24
 8006b00:	f003 030f 	and.w	r3, r3, #15
 8006b04:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	019a      	lsls	r2, r3, #6
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	041b      	lsls	r3, r3, #16
 8006b10:	431a      	orrs	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	061b      	lsls	r3, r3, #24
 8006b16:	431a      	orrs	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	071b      	lsls	r3, r3, #28
 8006b1e:	4958      	ldr	r1, [pc, #352]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d004      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b3a:	d00a      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d02e      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b50:	d129      	bne.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006b52:	4b4b      	ldr	r3, [pc, #300]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b58:	0c1b      	lsrs	r3, r3, #16
 8006b5a:	f003 0303 	and.w	r3, r3, #3
 8006b5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b60:	4b47      	ldr	r3, [pc, #284]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b66:	0f1b      	lsrs	r3, r3, #28
 8006b68:	f003 0307 	and.w	r3, r3, #7
 8006b6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	019a      	lsls	r2, r3, #6
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	041b      	lsls	r3, r3, #16
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	061b      	lsls	r3, r3, #24
 8006b80:	431a      	orrs	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	071b      	lsls	r3, r3, #28
 8006b86:	493e      	ldr	r1, [pc, #248]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b8e:	4b3c      	ldr	r3, [pc, #240]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b94:	f023 021f 	bic.w	r2, r3, #31
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	4938      	ldr	r1, [pc, #224]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d01d      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006bb2:	4b33      	ldr	r3, [pc, #204]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bb8:	0e1b      	lsrs	r3, r3, #24
 8006bba:	f003 030f 	and.w	r3, r3, #15
 8006bbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006bc0:	4b2f      	ldr	r3, [pc, #188]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bc6:	0f1b      	lsrs	r3, r3, #28
 8006bc8:	f003 0307 	and.w	r3, r3, #7
 8006bcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	019a      	lsls	r2, r3, #6
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	041b      	lsls	r3, r3, #16
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	061b      	lsls	r3, r3, #24
 8006be0:	431a      	orrs	r2, r3
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	071b      	lsls	r3, r3, #28
 8006be6:	4926      	ldr	r1, [pc, #152]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d011      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	019a      	lsls	r2, r3, #6
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	041b      	lsls	r3, r3, #16
 8006c06:	431a      	orrs	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	061b      	lsls	r3, r3, #24
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	071b      	lsls	r3, r3, #28
 8006c16:	491a      	ldr	r1, [pc, #104]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c1e:	4b18      	ldr	r3, [pc, #96]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a17      	ldr	r2, [pc, #92]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006c24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c2a:	f7fd f939 	bl	8003ea0 <HAL_GetTick>
 8006c2e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c30:	e008      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006c32:	f7fd f935 	bl	8003ea0 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	2b64      	cmp	r3, #100	; 0x64
 8006c3e:	d901      	bls.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e0d8      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c44:	4b0e      	ldr	r3, [pc, #56]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d0f0      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	f040 80ce 	bne.w	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006c58:	4b09      	ldr	r3, [pc, #36]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a08      	ldr	r2, [pc, #32]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006c5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c64:	f7fd f91c 	bl	8003ea0 <HAL_GetTick>
 8006c68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c6a:	e00b      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006c6c:	f7fd f918 	bl	8003ea0 <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	2b64      	cmp	r3, #100	; 0x64
 8006c78:	d904      	bls.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e0bb      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006c7e:	bf00      	nop
 8006c80:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c84:	4b5e      	ldr	r3, [pc, #376]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c90:	d0ec      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d009      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d02e      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d12a      	bne.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006cba:	4b51      	ldr	r3, [pc, #324]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc0:	0c1b      	lsrs	r3, r3, #16
 8006cc2:	f003 0303 	and.w	r3, r3, #3
 8006cc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006cc8:	4b4d      	ldr	r3, [pc, #308]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cce:	0f1b      	lsrs	r3, r3, #28
 8006cd0:	f003 0307 	and.w	r3, r3, #7
 8006cd4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	019a      	lsls	r2, r3, #6
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	041b      	lsls	r3, r3, #16
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	061b      	lsls	r3, r3, #24
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	071b      	lsls	r3, r3, #28
 8006cee:	4944      	ldr	r1, [pc, #272]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006cf6:	4b42      	ldr	r3, [pc, #264]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cfc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d04:	3b01      	subs	r3, #1
 8006d06:	021b      	lsls	r3, r3, #8
 8006d08:	493d      	ldr	r1, [pc, #244]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d022      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d24:	d11d      	bne.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d26:	4b36      	ldr	r3, [pc, #216]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d2c:	0e1b      	lsrs	r3, r3, #24
 8006d2e:	f003 030f 	and.w	r3, r3, #15
 8006d32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006d34:	4b32      	ldr	r3, [pc, #200]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d3a:	0f1b      	lsrs	r3, r3, #28
 8006d3c:	f003 0307 	and.w	r3, r3, #7
 8006d40:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	019a      	lsls	r2, r3, #6
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	041b      	lsls	r3, r3, #16
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	061b      	lsls	r3, r3, #24
 8006d54:	431a      	orrs	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	071b      	lsls	r3, r3, #28
 8006d5a:	4929      	ldr	r1, [pc, #164]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0308 	and.w	r3, r3, #8
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d028      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d6e:	4b24      	ldr	r3, [pc, #144]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d74:	0e1b      	lsrs	r3, r3, #24
 8006d76:	f003 030f 	and.w	r3, r3, #15
 8006d7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006d7c:	4b20      	ldr	r3, [pc, #128]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d82:	0c1b      	lsrs	r3, r3, #16
 8006d84:	f003 0303 	and.w	r3, r3, #3
 8006d88:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	019a      	lsls	r2, r3, #6
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	041b      	lsls	r3, r3, #16
 8006d94:	431a      	orrs	r2, r3
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	061b      	lsls	r3, r3, #24
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	071b      	lsls	r3, r3, #28
 8006da2:	4917      	ldr	r1, [pc, #92]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006daa:	4b15      	ldr	r3, [pc, #84]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006db0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db8:	4911      	ldr	r1, [pc, #68]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006dc0:	4b0f      	ldr	r3, [pc, #60]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a0e      	ldr	r2, [pc, #56]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dcc:	f7fd f868 	bl	8003ea0 <HAL_GetTick>
 8006dd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006dd2:	e008      	b.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006dd4:	f7fd f864 	bl	8003ea0 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b64      	cmp	r3, #100	; 0x64
 8006de0:	d901      	bls.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e007      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006de6:	4b06      	ldr	r3, [pc, #24]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006df2:	d1ef      	bne.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3720      	adds	r7, #32
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	40023800 	.word	0x40023800

08006e04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e049      	b.n	8006eaa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d106      	bne.n	8006e30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7fc ff02 	bl	8003c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2202      	movs	r2, #2
 8006e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	3304      	adds	r3, #4
 8006e40:	4619      	mov	r1, r3
 8006e42:	4610      	mov	r0, r2
 8006e44:	f000 f9f6 	bl	8007234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
	...

08006eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d001      	beq.n	8006ecc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e054      	b.n	8006f76 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68da      	ldr	r2, [r3, #12]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f042 0201 	orr.w	r2, r2, #1
 8006ee2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a26      	ldr	r2, [pc, #152]	; (8006f84 <HAL_TIM_Base_Start_IT+0xd0>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d022      	beq.n	8006f34 <HAL_TIM_Base_Start_IT+0x80>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ef6:	d01d      	beq.n	8006f34 <HAL_TIM_Base_Start_IT+0x80>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a22      	ldr	r2, [pc, #136]	; (8006f88 <HAL_TIM_Base_Start_IT+0xd4>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d018      	beq.n	8006f34 <HAL_TIM_Base_Start_IT+0x80>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a21      	ldr	r2, [pc, #132]	; (8006f8c <HAL_TIM_Base_Start_IT+0xd8>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d013      	beq.n	8006f34 <HAL_TIM_Base_Start_IT+0x80>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a1f      	ldr	r2, [pc, #124]	; (8006f90 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d00e      	beq.n	8006f34 <HAL_TIM_Base_Start_IT+0x80>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a1e      	ldr	r2, [pc, #120]	; (8006f94 <HAL_TIM_Base_Start_IT+0xe0>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d009      	beq.n	8006f34 <HAL_TIM_Base_Start_IT+0x80>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a1c      	ldr	r2, [pc, #112]	; (8006f98 <HAL_TIM_Base_Start_IT+0xe4>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d004      	beq.n	8006f34 <HAL_TIM_Base_Start_IT+0x80>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a1b      	ldr	r2, [pc, #108]	; (8006f9c <HAL_TIM_Base_Start_IT+0xe8>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d115      	bne.n	8006f60 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	4b19      	ldr	r3, [pc, #100]	; (8006fa0 <HAL_TIM_Base_Start_IT+0xec>)
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b06      	cmp	r3, #6
 8006f44:	d015      	beq.n	8006f72 <HAL_TIM_Base_Start_IT+0xbe>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f4c:	d011      	beq.n	8006f72 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f042 0201 	orr.w	r2, r2, #1
 8006f5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f5e:	e008      	b.n	8006f72 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f042 0201 	orr.w	r2, r2, #1
 8006f6e:	601a      	str	r2, [r3, #0]
 8006f70:	e000      	b.n	8006f74 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	40010000 	.word	0x40010000
 8006f88:	40000400 	.word	0x40000400
 8006f8c:	40000800 	.word	0x40000800
 8006f90:	40000c00 	.word	0x40000c00
 8006f94:	40010400 	.word	0x40010400
 8006f98:	40014000 	.word	0x40014000
 8006f9c:	40001800 	.word	0x40001800
 8006fa0:	00010007 	.word	0x00010007

08006fa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d122      	bne.n	8007000 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d11b      	bne.n	8007000 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f06f 0202 	mvn.w	r2, #2
 8006fd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	f003 0303 	and.w	r3, r3, #3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f905 	bl	80071f6 <HAL_TIM_IC_CaptureCallback>
 8006fec:	e005      	b.n	8006ffa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f8f7 	bl	80071e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f908 	bl	800720a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	f003 0304 	and.w	r3, r3, #4
 800700a:	2b04      	cmp	r3, #4
 800700c:	d122      	bne.n	8007054 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	f003 0304 	and.w	r3, r3, #4
 8007018:	2b04      	cmp	r3, #4
 800701a:	d11b      	bne.n	8007054 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f06f 0204 	mvn.w	r2, #4
 8007024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2202      	movs	r2, #2
 800702a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007036:	2b00      	cmp	r3, #0
 8007038:	d003      	beq.n	8007042 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f8db 	bl	80071f6 <HAL_TIM_IC_CaptureCallback>
 8007040:	e005      	b.n	800704e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f8cd 	bl	80071e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f8de 	bl	800720a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	f003 0308 	and.w	r3, r3, #8
 800705e:	2b08      	cmp	r3, #8
 8007060:	d122      	bne.n	80070a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	f003 0308 	and.w	r3, r3, #8
 800706c:	2b08      	cmp	r3, #8
 800706e:	d11b      	bne.n	80070a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f06f 0208 	mvn.w	r2, #8
 8007078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2204      	movs	r2, #4
 800707e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	f003 0303 	and.w	r3, r3, #3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f8b1 	bl	80071f6 <HAL_TIM_IC_CaptureCallback>
 8007094:	e005      	b.n	80070a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f8a3 	bl	80071e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f8b4 	bl	800720a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	f003 0310 	and.w	r3, r3, #16
 80070b2:	2b10      	cmp	r3, #16
 80070b4:	d122      	bne.n	80070fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	f003 0310 	and.w	r3, r3, #16
 80070c0:	2b10      	cmp	r3, #16
 80070c2:	d11b      	bne.n	80070fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f06f 0210 	mvn.w	r2, #16
 80070cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2208      	movs	r2, #8
 80070d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d003      	beq.n	80070ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f887 	bl	80071f6 <HAL_TIM_IC_CaptureCallback>
 80070e8:	e005      	b.n	80070f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f879 	bl	80071e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f88a 	bl	800720a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b01      	cmp	r3, #1
 8007108:	d10e      	bne.n	8007128 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	2b01      	cmp	r3, #1
 8007116:	d107      	bne.n	8007128 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f06f 0201 	mvn.w	r2, #1
 8007120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7fc fc8a 	bl	8003a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007132:	2b80      	cmp	r3, #128	; 0x80
 8007134:	d10e      	bne.n	8007154 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007140:	2b80      	cmp	r3, #128	; 0x80
 8007142:	d107      	bne.n	8007154 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800714c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f9a8 	bl	80074a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800715e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007162:	d10e      	bne.n	8007182 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800716e:	2b80      	cmp	r3, #128	; 0x80
 8007170:	d107      	bne.n	8007182 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800717a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 f99b 	bl	80074b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800718c:	2b40      	cmp	r3, #64	; 0x40
 800718e:	d10e      	bne.n	80071ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719a:	2b40      	cmp	r3, #64	; 0x40
 800719c:	d107      	bne.n	80071ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f838 	bl	800721e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	f003 0320 	and.w	r3, r3, #32
 80071b8:	2b20      	cmp	r3, #32
 80071ba:	d10e      	bne.n	80071da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	f003 0320 	and.w	r3, r3, #32
 80071c6:	2b20      	cmp	r3, #32
 80071c8:	d107      	bne.n	80071da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f06f 0220 	mvn.w	r2, #32
 80071d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f95b 	bl	8007490 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071da:	bf00      	nop
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b083      	sub	sp, #12
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071ea:	bf00      	nop
 80071ec:	370c      	adds	r7, #12
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b083      	sub	sp, #12
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071fe:	bf00      	nop
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800720a:	b480      	push	{r7}
 800720c:	b083      	sub	sp, #12
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007212:	bf00      	nop
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
	...

08007234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a40      	ldr	r2, [pc, #256]	; (8007348 <TIM_Base_SetConfig+0x114>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d013      	beq.n	8007274 <TIM_Base_SetConfig+0x40>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007252:	d00f      	beq.n	8007274 <TIM_Base_SetConfig+0x40>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a3d      	ldr	r2, [pc, #244]	; (800734c <TIM_Base_SetConfig+0x118>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d00b      	beq.n	8007274 <TIM_Base_SetConfig+0x40>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a3c      	ldr	r2, [pc, #240]	; (8007350 <TIM_Base_SetConfig+0x11c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d007      	beq.n	8007274 <TIM_Base_SetConfig+0x40>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a3b      	ldr	r2, [pc, #236]	; (8007354 <TIM_Base_SetConfig+0x120>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d003      	beq.n	8007274 <TIM_Base_SetConfig+0x40>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a3a      	ldr	r2, [pc, #232]	; (8007358 <TIM_Base_SetConfig+0x124>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d108      	bne.n	8007286 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800727a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	4313      	orrs	r3, r2
 8007284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a2f      	ldr	r2, [pc, #188]	; (8007348 <TIM_Base_SetConfig+0x114>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d02b      	beq.n	80072e6 <TIM_Base_SetConfig+0xb2>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007294:	d027      	beq.n	80072e6 <TIM_Base_SetConfig+0xb2>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a2c      	ldr	r2, [pc, #176]	; (800734c <TIM_Base_SetConfig+0x118>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d023      	beq.n	80072e6 <TIM_Base_SetConfig+0xb2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a2b      	ldr	r2, [pc, #172]	; (8007350 <TIM_Base_SetConfig+0x11c>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d01f      	beq.n	80072e6 <TIM_Base_SetConfig+0xb2>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a2a      	ldr	r2, [pc, #168]	; (8007354 <TIM_Base_SetConfig+0x120>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d01b      	beq.n	80072e6 <TIM_Base_SetConfig+0xb2>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a29      	ldr	r2, [pc, #164]	; (8007358 <TIM_Base_SetConfig+0x124>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d017      	beq.n	80072e6 <TIM_Base_SetConfig+0xb2>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a28      	ldr	r2, [pc, #160]	; (800735c <TIM_Base_SetConfig+0x128>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d013      	beq.n	80072e6 <TIM_Base_SetConfig+0xb2>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a27      	ldr	r2, [pc, #156]	; (8007360 <TIM_Base_SetConfig+0x12c>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d00f      	beq.n	80072e6 <TIM_Base_SetConfig+0xb2>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a26      	ldr	r2, [pc, #152]	; (8007364 <TIM_Base_SetConfig+0x130>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d00b      	beq.n	80072e6 <TIM_Base_SetConfig+0xb2>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a25      	ldr	r2, [pc, #148]	; (8007368 <TIM_Base_SetConfig+0x134>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d007      	beq.n	80072e6 <TIM_Base_SetConfig+0xb2>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a24      	ldr	r2, [pc, #144]	; (800736c <TIM_Base_SetConfig+0x138>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d003      	beq.n	80072e6 <TIM_Base_SetConfig+0xb2>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a23      	ldr	r2, [pc, #140]	; (8007370 <TIM_Base_SetConfig+0x13c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d108      	bne.n	80072f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	4313      	orrs	r3, r2
 8007304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	689a      	ldr	r2, [r3, #8]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a0a      	ldr	r2, [pc, #40]	; (8007348 <TIM_Base_SetConfig+0x114>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d003      	beq.n	800732c <TIM_Base_SetConfig+0xf8>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a0c      	ldr	r2, [pc, #48]	; (8007358 <TIM_Base_SetConfig+0x124>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d103      	bne.n	8007334 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	691a      	ldr	r2, [r3, #16]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	615a      	str	r2, [r3, #20]
}
 800733a:	bf00      	nop
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	40010000 	.word	0x40010000
 800734c:	40000400 	.word	0x40000400
 8007350:	40000800 	.word	0x40000800
 8007354:	40000c00 	.word	0x40000c00
 8007358:	40010400 	.word	0x40010400
 800735c:	40014000 	.word	0x40014000
 8007360:	40014400 	.word	0x40014400
 8007364:	40014800 	.word	0x40014800
 8007368:	40001800 	.word	0x40001800
 800736c:	40001c00 	.word	0x40001c00
 8007370:	40002000 	.word	0x40002000

08007374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007384:	2b01      	cmp	r3, #1
 8007386:	d101      	bne.n	800738c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007388:	2302      	movs	r3, #2
 800738a:	e06d      	b.n	8007468 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2202      	movs	r2, #2
 8007398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a30      	ldr	r2, [pc, #192]	; (8007474 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d004      	beq.n	80073c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a2f      	ldr	r2, [pc, #188]	; (8007478 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d108      	bne.n	80073d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80073c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a20      	ldr	r2, [pc, #128]	; (8007474 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d022      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073fe:	d01d      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a1d      	ldr	r2, [pc, #116]	; (800747c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d018      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a1c      	ldr	r2, [pc, #112]	; (8007480 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d013      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a1a      	ldr	r2, [pc, #104]	; (8007484 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d00e      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a15      	ldr	r2, [pc, #84]	; (8007478 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d009      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a16      	ldr	r2, [pc, #88]	; (8007488 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d004      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a15      	ldr	r2, [pc, #84]	; (800748c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d10c      	bne.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007442:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	4313      	orrs	r3, r2
 800744c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3714      	adds	r7, #20
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	40010000 	.word	0x40010000
 8007478:	40010400 	.word	0x40010400
 800747c:	40000400 	.word	0x40000400
 8007480:	40000800 	.word	0x40000800
 8007484:	40000c00 	.word	0x40000c00
 8007488:	40014000 	.word	0x40014000
 800748c:	40001800 	.word	0x40001800

08007490 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d101      	bne.n	80074de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e040      	b.n	8007560 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d106      	bne.n	80074f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7fc fbf6 	bl	8003ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2224      	movs	r2, #36	; 0x24
 80074f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 0201 	bic.w	r2, r2, #1
 8007508:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fc06 	bl	8007d1c <UART_SetConfig>
 8007510:	4603      	mov	r3, r0
 8007512:	2b01      	cmp	r3, #1
 8007514:	d101      	bne.n	800751a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e022      	b.n	8007560 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751e:	2b00      	cmp	r3, #0
 8007520:	d002      	beq.n	8007528 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fe5e 	bl	80081e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007536:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689a      	ldr	r2, [r3, #8]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007546:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f042 0201 	orr.w	r2, r2, #1
 8007556:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 fee5 	bl	8008328 <UART_CheckIdleState>
 800755e:	4603      	mov	r3, r0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b08a      	sub	sp, #40	; 0x28
 800756c:	af02      	add	r7, sp, #8
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	603b      	str	r3, [r7, #0]
 8007574:	4613      	mov	r3, r2
 8007576:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800757c:	2b20      	cmp	r3, #32
 800757e:	d171      	bne.n	8007664 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <HAL_UART_Transmit+0x24>
 8007586:	88fb      	ldrh	r3, [r7, #6]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d101      	bne.n	8007590 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e06a      	b.n	8007666 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2221      	movs	r2, #33	; 0x21
 800759c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800759e:	f7fc fc7f 	bl	8003ea0 <HAL_GetTick>
 80075a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	88fa      	ldrh	r2, [r7, #6]
 80075a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	88fa      	ldrh	r2, [r7, #6]
 80075b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075bc:	d108      	bne.n	80075d0 <HAL_UART_Transmit+0x68>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d104      	bne.n	80075d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80075c6:	2300      	movs	r3, #0
 80075c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	61bb      	str	r3, [r7, #24]
 80075ce:	e003      	b.n	80075d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075d4:	2300      	movs	r3, #0
 80075d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80075d8:	e02c      	b.n	8007634 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2200      	movs	r2, #0
 80075e2:	2180      	movs	r1, #128	; 0x80
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 feec 	bl	80083c2 <UART_WaitOnFlagUntilTimeout>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e038      	b.n	8007666 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10b      	bne.n	8007612 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	881b      	ldrh	r3, [r3, #0]
 80075fe:	461a      	mov	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007608:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	3302      	adds	r3, #2
 800760e:	61bb      	str	r3, [r7, #24]
 8007610:	e007      	b.n	8007622 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	781a      	ldrb	r2, [r3, #0]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	3301      	adds	r3, #1
 8007620:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007628:	b29b      	uxth	r3, r3
 800762a:	3b01      	subs	r3, #1
 800762c:	b29a      	uxth	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800763a:	b29b      	uxth	r3, r3
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1cc      	bne.n	80075da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	2200      	movs	r2, #0
 8007648:	2140      	movs	r1, #64	; 0x40
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 feb9 	bl	80083c2 <UART_WaitOnFlagUntilTimeout>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e005      	b.n	8007666 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2220      	movs	r2, #32
 800765e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	e000      	b.n	8007666 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007664:	2302      	movs	r3, #2
  }
}
 8007666:	4618      	mov	r0, r3
 8007668:	3720      	adds	r7, #32
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b08a      	sub	sp, #40	; 0x28
 8007672:	af00      	add	r7, sp, #0
 8007674:	60f8      	str	r0, [r7, #12]
 8007676:	60b9      	str	r1, [r7, #8]
 8007678:	4613      	mov	r3, r2
 800767a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007682:	2b20      	cmp	r3, #32
 8007684:	d132      	bne.n	80076ec <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d002      	beq.n	8007692 <HAL_UART_Receive_IT+0x24>
 800768c:	88fb      	ldrh	r3, [r7, #6]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d101      	bne.n	8007696 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e02b      	b.n	80076ee <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d018      	beq.n	80076dc <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	e853 3f00 	ldrex	r3, [r3]
 80076b6:	613b      	str	r3, [r7, #16]
   return(result);
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076be:	627b      	str	r3, [r7, #36]	; 0x24
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	461a      	mov	r2, r3
 80076c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c8:	623b      	str	r3, [r7, #32]
 80076ca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076cc:	69f9      	ldr	r1, [r7, #28]
 80076ce:	6a3a      	ldr	r2, [r7, #32]
 80076d0:	e841 2300 	strex	r3, r2, [r1]
 80076d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1e6      	bne.n	80076aa <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80076dc:	88fb      	ldrh	r3, [r7, #6]
 80076de:	461a      	mov	r2, r3
 80076e0:	68b9      	ldr	r1, [r7, #8]
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f000 ff34 	bl	8008550 <UART_Start_Receive_IT>
 80076e8:	4603      	mov	r3, r0
 80076ea:	e000      	b.n	80076ee <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80076ec:	2302      	movs	r3, #2
  }
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3728      	adds	r7, #40	; 0x28
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b0ba      	sub	sp, #232	; 0xe8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	69db      	ldr	r3, [r3, #28]
 8007706:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800771e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007722:	f640 030f 	movw	r3, #2063	; 0x80f
 8007726:	4013      	ands	r3, r2
 8007728:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800772c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007730:	2b00      	cmp	r3, #0
 8007732:	d115      	bne.n	8007760 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007738:	f003 0320 	and.w	r3, r3, #32
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00f      	beq.n	8007760 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007744:	f003 0320 	and.w	r3, r3, #32
 8007748:	2b00      	cmp	r3, #0
 800774a:	d009      	beq.n	8007760 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 82ac 	beq.w	8007cae <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	4798      	blx	r3
      }
      return;
 800775e:	e2a6      	b.n	8007cae <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007760:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 8117 	beq.w	8007998 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800776a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	2b00      	cmp	r3, #0
 8007774:	d106      	bne.n	8007784 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007776:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800777a:	4b85      	ldr	r3, [pc, #532]	; (8007990 <HAL_UART_IRQHandler+0x298>)
 800777c:	4013      	ands	r3, r2
 800777e:	2b00      	cmp	r3, #0
 8007780:	f000 810a 	beq.w	8007998 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007788:	f003 0301 	and.w	r3, r3, #1
 800778c:	2b00      	cmp	r3, #0
 800778e:	d011      	beq.n	80077b4 <HAL_UART_IRQHandler+0xbc>
 8007790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00b      	beq.n	80077b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2201      	movs	r2, #1
 80077a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077aa:	f043 0201 	orr.w	r2, r3, #1
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077b8:	f003 0302 	and.w	r3, r3, #2
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d011      	beq.n	80077e4 <HAL_UART_IRQHandler+0xec>
 80077c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00b      	beq.n	80077e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2202      	movs	r2, #2
 80077d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077da:	f043 0204 	orr.w	r2, r3, #4
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e8:	f003 0304 	and.w	r3, r3, #4
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d011      	beq.n	8007814 <HAL_UART_IRQHandler+0x11c>
 80077f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077f4:	f003 0301 	and.w	r3, r3, #1
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00b      	beq.n	8007814 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2204      	movs	r2, #4
 8007802:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800780a:	f043 0202 	orr.w	r2, r3, #2
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007818:	f003 0308 	and.w	r3, r3, #8
 800781c:	2b00      	cmp	r3, #0
 800781e:	d017      	beq.n	8007850 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007824:	f003 0320 	and.w	r3, r3, #32
 8007828:	2b00      	cmp	r3, #0
 800782a:	d105      	bne.n	8007838 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800782c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007830:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00b      	beq.n	8007850 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2208      	movs	r2, #8
 800783e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007846:	f043 0208 	orr.w	r2, r3, #8
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007858:	2b00      	cmp	r3, #0
 800785a:	d012      	beq.n	8007882 <HAL_UART_IRQHandler+0x18a>
 800785c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007860:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00c      	beq.n	8007882 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007870:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007878:	f043 0220 	orr.w	r2, r3, #32
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 8212 	beq.w	8007cb2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800788e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007892:	f003 0320 	and.w	r3, r3, #32
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00d      	beq.n	80078b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800789a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800789e:	f003 0320 	and.w	r3, r3, #32
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d007      	beq.n	80078b6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ca:	2b40      	cmp	r3, #64	; 0x40
 80078cc:	d005      	beq.n	80078da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80078ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d04f      	beq.n	800797a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fefe 	bl	80086dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ea:	2b40      	cmp	r3, #64	; 0x40
 80078ec:	d141      	bne.n	8007972 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3308      	adds	r3, #8
 80078f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078fc:	e853 3f00 	ldrex	r3, [r3]
 8007900:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007904:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800790c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3308      	adds	r3, #8
 8007916:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800791a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800791e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007922:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007926:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800792a:	e841 2300 	strex	r3, r2, [r1]
 800792e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007932:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1d9      	bne.n	80078ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800793e:	2b00      	cmp	r3, #0
 8007940:	d013      	beq.n	800796a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007946:	4a13      	ldr	r2, [pc, #76]	; (8007994 <HAL_UART_IRQHandler+0x29c>)
 8007948:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800794e:	4618      	mov	r0, r3
 8007950:	f7fd ff4b 	bl	80057ea <HAL_DMA_Abort_IT>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d017      	beq.n	800798a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800795e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007964:	4610      	mov	r0, r2
 8007966:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007968:	e00f      	b.n	800798a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f9b6 	bl	8007cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007970:	e00b      	b.n	800798a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f9b2 	bl	8007cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007978:	e007      	b.n	800798a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f9ae 	bl	8007cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007988:	e193      	b.n	8007cb2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800798a:	bf00      	nop
    return;
 800798c:	e191      	b.n	8007cb2 <HAL_UART_IRQHandler+0x5ba>
 800798e:	bf00      	nop
 8007990:	04000120 	.word	0x04000120
 8007994:	080087a5 	.word	0x080087a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800799c:	2b01      	cmp	r3, #1
 800799e:	f040 814c 	bne.w	8007c3a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80079a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079a6:	f003 0310 	and.w	r3, r3, #16
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 8145 	beq.w	8007c3a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80079b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079b4:	f003 0310 	and.w	r3, r3, #16
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 813e 	beq.w	8007c3a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2210      	movs	r2, #16
 80079c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d0:	2b40      	cmp	r3, #64	; 0x40
 80079d2:	f040 80b6 	bne.w	8007b42 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f000 8165 	beq.w	8007cb6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80079f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079f6:	429a      	cmp	r2, r3
 80079f8:	f080 815d 	bcs.w	8007cb6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a10:	f000 8086 	beq.w	8007b20 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	461a      	mov	r2, r3
 8007a3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a42:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1da      	bne.n	8007a14 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3308      	adds	r3, #8
 8007a64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a68:	e853 3f00 	ldrex	r3, [r3]
 8007a6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a70:	f023 0301 	bic.w	r3, r3, #1
 8007a74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3308      	adds	r3, #8
 8007a7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a8e:	e841 2300 	strex	r3, r2, [r1]
 8007a92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1e1      	bne.n	8007a5e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	3308      	adds	r3, #8
 8007aa0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007aa4:	e853 3f00 	ldrex	r3, [r3]
 8007aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	3308      	adds	r3, #8
 8007aba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007abe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ac0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ac4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007ac6:	e841 2300 	strex	r3, r2, [r1]
 8007aca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1e3      	bne.n	8007a9a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2220      	movs	r2, #32
 8007ad6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ae8:	e853 3f00 	ldrex	r3, [r3]
 8007aec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007af0:	f023 0310 	bic.w	r3, r3, #16
 8007af4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	461a      	mov	r2, r3
 8007afe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b02:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b04:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b0a:	e841 2300 	strex	r3, r2, [r1]
 8007b0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1e4      	bne.n	8007ae0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fd fdf5 	bl	800570a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2202      	movs	r2, #2
 8007b24:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	4619      	mov	r1, r3
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f8d8 	bl	8007cf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b40:	e0b9      	b.n	8007cb6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 80ab 	beq.w	8007cba <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8007b64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 80a6 	beq.w	8007cba <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b76:	e853 3f00 	ldrex	r3, [r3]
 8007b7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b90:	647b      	str	r3, [r7, #68]	; 0x44
 8007b92:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b98:	e841 2300 	strex	r3, r2, [r1]
 8007b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1e4      	bne.n	8007b6e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	3308      	adds	r3, #8
 8007baa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bae:	e853 3f00 	ldrex	r3, [r3]
 8007bb2:	623b      	str	r3, [r7, #32]
   return(result);
 8007bb4:	6a3b      	ldr	r3, [r7, #32]
 8007bb6:	f023 0301 	bic.w	r3, r3, #1
 8007bba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3308      	adds	r3, #8
 8007bc4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007bc8:	633a      	str	r2, [r7, #48]	; 0x30
 8007bca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bd0:	e841 2300 	strex	r3, r2, [r1]
 8007bd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1e3      	bne.n	8007ba4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2220      	movs	r2, #32
 8007be0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	e853 3f00 	ldrex	r3, [r3]
 8007bfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f023 0310 	bic.w	r3, r3, #16
 8007c04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c12:	61fb      	str	r3, [r7, #28]
 8007c14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c16:	69b9      	ldr	r1, [r7, #24]
 8007c18:	69fa      	ldr	r2, [r7, #28]
 8007c1a:	e841 2300 	strex	r3, r2, [r1]
 8007c1e:	617b      	str	r3, [r7, #20]
   return(result);
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1e4      	bne.n	8007bf0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2202      	movs	r2, #2
 8007c2a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c30:	4619      	mov	r1, r3
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f85c 	bl	8007cf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c38:	e03f      	b.n	8007cba <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00e      	beq.n	8007c64 <HAL_UART_IRQHandler+0x56c>
 8007c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d008      	beq.n	8007c64 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007c5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f853 	bl	8007d08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c62:	e02d      	b.n	8007cc0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00e      	beq.n	8007c8e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d008      	beq.n	8007c8e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d01c      	beq.n	8007cbe <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	4798      	blx	r3
    }
    return;
 8007c8c:	e017      	b.n	8007cbe <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d012      	beq.n	8007cc0 <HAL_UART_IRQHandler+0x5c8>
 8007c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00c      	beq.n	8007cc0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fd92 	bl	80087d0 <UART_EndTransmit_IT>
    return;
 8007cac:	e008      	b.n	8007cc0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007cae:	bf00      	nop
 8007cb0:	e006      	b.n	8007cc0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007cb2:	bf00      	nop
 8007cb4:	e004      	b.n	8007cc0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007cb6:	bf00      	nop
 8007cb8:	e002      	b.n	8007cc0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007cba:	bf00      	nop
 8007cbc:	e000      	b.n	8007cc0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007cbe:	bf00      	nop
  }

}
 8007cc0:	37e8      	adds	r7, #232	; 0xe8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop

08007cc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b088      	sub	sp, #32
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689a      	ldr	r2, [r3, #8]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	431a      	orrs	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	431a      	orrs	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	69db      	ldr	r3, [r3, #28]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	4ba6      	ldr	r3, [pc, #664]	; (8007fe0 <UART_SetConfig+0x2c4>)
 8007d48:	4013      	ands	r3, r2
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	6812      	ldr	r2, [r2, #0]
 8007d4e:	6979      	ldr	r1, [r7, #20]
 8007d50:	430b      	orrs	r3, r1
 8007d52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68da      	ldr	r2, [r3, #12]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	430a      	orrs	r2, r1
 8007d68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	699b      	ldr	r3, [r3, #24]
 8007d6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a1b      	ldr	r3, [r3, #32]
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	430a      	orrs	r2, r1
 8007d8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a94      	ldr	r2, [pc, #592]	; (8007fe4 <UART_SetConfig+0x2c8>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d120      	bne.n	8007dda <UART_SetConfig+0xbe>
 8007d98:	4b93      	ldr	r3, [pc, #588]	; (8007fe8 <UART_SetConfig+0x2cc>)
 8007d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d9e:	f003 0303 	and.w	r3, r3, #3
 8007da2:	2b03      	cmp	r3, #3
 8007da4:	d816      	bhi.n	8007dd4 <UART_SetConfig+0xb8>
 8007da6:	a201      	add	r2, pc, #4	; (adr r2, 8007dac <UART_SetConfig+0x90>)
 8007da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dac:	08007dbd 	.word	0x08007dbd
 8007db0:	08007dc9 	.word	0x08007dc9
 8007db4:	08007dc3 	.word	0x08007dc3
 8007db8:	08007dcf 	.word	0x08007dcf
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	77fb      	strb	r3, [r7, #31]
 8007dc0:	e150      	b.n	8008064 <UART_SetConfig+0x348>
 8007dc2:	2302      	movs	r3, #2
 8007dc4:	77fb      	strb	r3, [r7, #31]
 8007dc6:	e14d      	b.n	8008064 <UART_SetConfig+0x348>
 8007dc8:	2304      	movs	r3, #4
 8007dca:	77fb      	strb	r3, [r7, #31]
 8007dcc:	e14a      	b.n	8008064 <UART_SetConfig+0x348>
 8007dce:	2308      	movs	r3, #8
 8007dd0:	77fb      	strb	r3, [r7, #31]
 8007dd2:	e147      	b.n	8008064 <UART_SetConfig+0x348>
 8007dd4:	2310      	movs	r3, #16
 8007dd6:	77fb      	strb	r3, [r7, #31]
 8007dd8:	e144      	b.n	8008064 <UART_SetConfig+0x348>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a83      	ldr	r2, [pc, #524]	; (8007fec <UART_SetConfig+0x2d0>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d132      	bne.n	8007e4a <UART_SetConfig+0x12e>
 8007de4:	4b80      	ldr	r3, [pc, #512]	; (8007fe8 <UART_SetConfig+0x2cc>)
 8007de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dea:	f003 030c 	and.w	r3, r3, #12
 8007dee:	2b0c      	cmp	r3, #12
 8007df0:	d828      	bhi.n	8007e44 <UART_SetConfig+0x128>
 8007df2:	a201      	add	r2, pc, #4	; (adr r2, 8007df8 <UART_SetConfig+0xdc>)
 8007df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df8:	08007e2d 	.word	0x08007e2d
 8007dfc:	08007e45 	.word	0x08007e45
 8007e00:	08007e45 	.word	0x08007e45
 8007e04:	08007e45 	.word	0x08007e45
 8007e08:	08007e39 	.word	0x08007e39
 8007e0c:	08007e45 	.word	0x08007e45
 8007e10:	08007e45 	.word	0x08007e45
 8007e14:	08007e45 	.word	0x08007e45
 8007e18:	08007e33 	.word	0x08007e33
 8007e1c:	08007e45 	.word	0x08007e45
 8007e20:	08007e45 	.word	0x08007e45
 8007e24:	08007e45 	.word	0x08007e45
 8007e28:	08007e3f 	.word	0x08007e3f
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	77fb      	strb	r3, [r7, #31]
 8007e30:	e118      	b.n	8008064 <UART_SetConfig+0x348>
 8007e32:	2302      	movs	r3, #2
 8007e34:	77fb      	strb	r3, [r7, #31]
 8007e36:	e115      	b.n	8008064 <UART_SetConfig+0x348>
 8007e38:	2304      	movs	r3, #4
 8007e3a:	77fb      	strb	r3, [r7, #31]
 8007e3c:	e112      	b.n	8008064 <UART_SetConfig+0x348>
 8007e3e:	2308      	movs	r3, #8
 8007e40:	77fb      	strb	r3, [r7, #31]
 8007e42:	e10f      	b.n	8008064 <UART_SetConfig+0x348>
 8007e44:	2310      	movs	r3, #16
 8007e46:	77fb      	strb	r3, [r7, #31]
 8007e48:	e10c      	b.n	8008064 <UART_SetConfig+0x348>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a68      	ldr	r2, [pc, #416]	; (8007ff0 <UART_SetConfig+0x2d4>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d120      	bne.n	8007e96 <UART_SetConfig+0x17a>
 8007e54:	4b64      	ldr	r3, [pc, #400]	; (8007fe8 <UART_SetConfig+0x2cc>)
 8007e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007e5e:	2b30      	cmp	r3, #48	; 0x30
 8007e60:	d013      	beq.n	8007e8a <UART_SetConfig+0x16e>
 8007e62:	2b30      	cmp	r3, #48	; 0x30
 8007e64:	d814      	bhi.n	8007e90 <UART_SetConfig+0x174>
 8007e66:	2b20      	cmp	r3, #32
 8007e68:	d009      	beq.n	8007e7e <UART_SetConfig+0x162>
 8007e6a:	2b20      	cmp	r3, #32
 8007e6c:	d810      	bhi.n	8007e90 <UART_SetConfig+0x174>
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d002      	beq.n	8007e78 <UART_SetConfig+0x15c>
 8007e72:	2b10      	cmp	r3, #16
 8007e74:	d006      	beq.n	8007e84 <UART_SetConfig+0x168>
 8007e76:	e00b      	b.n	8007e90 <UART_SetConfig+0x174>
 8007e78:	2300      	movs	r3, #0
 8007e7a:	77fb      	strb	r3, [r7, #31]
 8007e7c:	e0f2      	b.n	8008064 <UART_SetConfig+0x348>
 8007e7e:	2302      	movs	r3, #2
 8007e80:	77fb      	strb	r3, [r7, #31]
 8007e82:	e0ef      	b.n	8008064 <UART_SetConfig+0x348>
 8007e84:	2304      	movs	r3, #4
 8007e86:	77fb      	strb	r3, [r7, #31]
 8007e88:	e0ec      	b.n	8008064 <UART_SetConfig+0x348>
 8007e8a:	2308      	movs	r3, #8
 8007e8c:	77fb      	strb	r3, [r7, #31]
 8007e8e:	e0e9      	b.n	8008064 <UART_SetConfig+0x348>
 8007e90:	2310      	movs	r3, #16
 8007e92:	77fb      	strb	r3, [r7, #31]
 8007e94:	e0e6      	b.n	8008064 <UART_SetConfig+0x348>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a56      	ldr	r2, [pc, #344]	; (8007ff4 <UART_SetConfig+0x2d8>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d120      	bne.n	8007ee2 <UART_SetConfig+0x1c6>
 8007ea0:	4b51      	ldr	r3, [pc, #324]	; (8007fe8 <UART_SetConfig+0x2cc>)
 8007ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ea6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007eaa:	2bc0      	cmp	r3, #192	; 0xc0
 8007eac:	d013      	beq.n	8007ed6 <UART_SetConfig+0x1ba>
 8007eae:	2bc0      	cmp	r3, #192	; 0xc0
 8007eb0:	d814      	bhi.n	8007edc <UART_SetConfig+0x1c0>
 8007eb2:	2b80      	cmp	r3, #128	; 0x80
 8007eb4:	d009      	beq.n	8007eca <UART_SetConfig+0x1ae>
 8007eb6:	2b80      	cmp	r3, #128	; 0x80
 8007eb8:	d810      	bhi.n	8007edc <UART_SetConfig+0x1c0>
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d002      	beq.n	8007ec4 <UART_SetConfig+0x1a8>
 8007ebe:	2b40      	cmp	r3, #64	; 0x40
 8007ec0:	d006      	beq.n	8007ed0 <UART_SetConfig+0x1b4>
 8007ec2:	e00b      	b.n	8007edc <UART_SetConfig+0x1c0>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	77fb      	strb	r3, [r7, #31]
 8007ec8:	e0cc      	b.n	8008064 <UART_SetConfig+0x348>
 8007eca:	2302      	movs	r3, #2
 8007ecc:	77fb      	strb	r3, [r7, #31]
 8007ece:	e0c9      	b.n	8008064 <UART_SetConfig+0x348>
 8007ed0:	2304      	movs	r3, #4
 8007ed2:	77fb      	strb	r3, [r7, #31]
 8007ed4:	e0c6      	b.n	8008064 <UART_SetConfig+0x348>
 8007ed6:	2308      	movs	r3, #8
 8007ed8:	77fb      	strb	r3, [r7, #31]
 8007eda:	e0c3      	b.n	8008064 <UART_SetConfig+0x348>
 8007edc:	2310      	movs	r3, #16
 8007ede:	77fb      	strb	r3, [r7, #31]
 8007ee0:	e0c0      	b.n	8008064 <UART_SetConfig+0x348>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a44      	ldr	r2, [pc, #272]	; (8007ff8 <UART_SetConfig+0x2dc>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d125      	bne.n	8007f38 <UART_SetConfig+0x21c>
 8007eec:	4b3e      	ldr	r3, [pc, #248]	; (8007fe8 <UART_SetConfig+0x2cc>)
 8007eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ef6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007efa:	d017      	beq.n	8007f2c <UART_SetConfig+0x210>
 8007efc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f00:	d817      	bhi.n	8007f32 <UART_SetConfig+0x216>
 8007f02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f06:	d00b      	beq.n	8007f20 <UART_SetConfig+0x204>
 8007f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f0c:	d811      	bhi.n	8007f32 <UART_SetConfig+0x216>
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d003      	beq.n	8007f1a <UART_SetConfig+0x1fe>
 8007f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f16:	d006      	beq.n	8007f26 <UART_SetConfig+0x20a>
 8007f18:	e00b      	b.n	8007f32 <UART_SetConfig+0x216>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	77fb      	strb	r3, [r7, #31]
 8007f1e:	e0a1      	b.n	8008064 <UART_SetConfig+0x348>
 8007f20:	2302      	movs	r3, #2
 8007f22:	77fb      	strb	r3, [r7, #31]
 8007f24:	e09e      	b.n	8008064 <UART_SetConfig+0x348>
 8007f26:	2304      	movs	r3, #4
 8007f28:	77fb      	strb	r3, [r7, #31]
 8007f2a:	e09b      	b.n	8008064 <UART_SetConfig+0x348>
 8007f2c:	2308      	movs	r3, #8
 8007f2e:	77fb      	strb	r3, [r7, #31]
 8007f30:	e098      	b.n	8008064 <UART_SetConfig+0x348>
 8007f32:	2310      	movs	r3, #16
 8007f34:	77fb      	strb	r3, [r7, #31]
 8007f36:	e095      	b.n	8008064 <UART_SetConfig+0x348>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a2f      	ldr	r2, [pc, #188]	; (8007ffc <UART_SetConfig+0x2e0>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d125      	bne.n	8007f8e <UART_SetConfig+0x272>
 8007f42:	4b29      	ldr	r3, [pc, #164]	; (8007fe8 <UART_SetConfig+0x2cc>)
 8007f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007f4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f50:	d017      	beq.n	8007f82 <UART_SetConfig+0x266>
 8007f52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f56:	d817      	bhi.n	8007f88 <UART_SetConfig+0x26c>
 8007f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f5c:	d00b      	beq.n	8007f76 <UART_SetConfig+0x25a>
 8007f5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f62:	d811      	bhi.n	8007f88 <UART_SetConfig+0x26c>
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d003      	beq.n	8007f70 <UART_SetConfig+0x254>
 8007f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f6c:	d006      	beq.n	8007f7c <UART_SetConfig+0x260>
 8007f6e:	e00b      	b.n	8007f88 <UART_SetConfig+0x26c>
 8007f70:	2301      	movs	r3, #1
 8007f72:	77fb      	strb	r3, [r7, #31]
 8007f74:	e076      	b.n	8008064 <UART_SetConfig+0x348>
 8007f76:	2302      	movs	r3, #2
 8007f78:	77fb      	strb	r3, [r7, #31]
 8007f7a:	e073      	b.n	8008064 <UART_SetConfig+0x348>
 8007f7c:	2304      	movs	r3, #4
 8007f7e:	77fb      	strb	r3, [r7, #31]
 8007f80:	e070      	b.n	8008064 <UART_SetConfig+0x348>
 8007f82:	2308      	movs	r3, #8
 8007f84:	77fb      	strb	r3, [r7, #31]
 8007f86:	e06d      	b.n	8008064 <UART_SetConfig+0x348>
 8007f88:	2310      	movs	r3, #16
 8007f8a:	77fb      	strb	r3, [r7, #31]
 8007f8c:	e06a      	b.n	8008064 <UART_SetConfig+0x348>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a1b      	ldr	r2, [pc, #108]	; (8008000 <UART_SetConfig+0x2e4>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d138      	bne.n	800800a <UART_SetConfig+0x2ee>
 8007f98:	4b13      	ldr	r3, [pc, #76]	; (8007fe8 <UART_SetConfig+0x2cc>)
 8007f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f9e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007fa2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007fa6:	d017      	beq.n	8007fd8 <UART_SetConfig+0x2bc>
 8007fa8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007fac:	d82a      	bhi.n	8008004 <UART_SetConfig+0x2e8>
 8007fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fb2:	d00b      	beq.n	8007fcc <UART_SetConfig+0x2b0>
 8007fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fb8:	d824      	bhi.n	8008004 <UART_SetConfig+0x2e8>
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d003      	beq.n	8007fc6 <UART_SetConfig+0x2aa>
 8007fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fc2:	d006      	beq.n	8007fd2 <UART_SetConfig+0x2b6>
 8007fc4:	e01e      	b.n	8008004 <UART_SetConfig+0x2e8>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	77fb      	strb	r3, [r7, #31]
 8007fca:	e04b      	b.n	8008064 <UART_SetConfig+0x348>
 8007fcc:	2302      	movs	r3, #2
 8007fce:	77fb      	strb	r3, [r7, #31]
 8007fd0:	e048      	b.n	8008064 <UART_SetConfig+0x348>
 8007fd2:	2304      	movs	r3, #4
 8007fd4:	77fb      	strb	r3, [r7, #31]
 8007fd6:	e045      	b.n	8008064 <UART_SetConfig+0x348>
 8007fd8:	2308      	movs	r3, #8
 8007fda:	77fb      	strb	r3, [r7, #31]
 8007fdc:	e042      	b.n	8008064 <UART_SetConfig+0x348>
 8007fde:	bf00      	nop
 8007fe0:	efff69f3 	.word	0xefff69f3
 8007fe4:	40011000 	.word	0x40011000
 8007fe8:	40023800 	.word	0x40023800
 8007fec:	40004400 	.word	0x40004400
 8007ff0:	40004800 	.word	0x40004800
 8007ff4:	40004c00 	.word	0x40004c00
 8007ff8:	40005000 	.word	0x40005000
 8007ffc:	40011400 	.word	0x40011400
 8008000:	40007800 	.word	0x40007800
 8008004:	2310      	movs	r3, #16
 8008006:	77fb      	strb	r3, [r7, #31]
 8008008:	e02c      	b.n	8008064 <UART_SetConfig+0x348>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a72      	ldr	r2, [pc, #456]	; (80081d8 <UART_SetConfig+0x4bc>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d125      	bne.n	8008060 <UART_SetConfig+0x344>
 8008014:	4b71      	ldr	r3, [pc, #452]	; (80081dc <UART_SetConfig+0x4c0>)
 8008016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800801a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800801e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008022:	d017      	beq.n	8008054 <UART_SetConfig+0x338>
 8008024:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008028:	d817      	bhi.n	800805a <UART_SetConfig+0x33e>
 800802a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800802e:	d00b      	beq.n	8008048 <UART_SetConfig+0x32c>
 8008030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008034:	d811      	bhi.n	800805a <UART_SetConfig+0x33e>
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <UART_SetConfig+0x326>
 800803a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800803e:	d006      	beq.n	800804e <UART_SetConfig+0x332>
 8008040:	e00b      	b.n	800805a <UART_SetConfig+0x33e>
 8008042:	2300      	movs	r3, #0
 8008044:	77fb      	strb	r3, [r7, #31]
 8008046:	e00d      	b.n	8008064 <UART_SetConfig+0x348>
 8008048:	2302      	movs	r3, #2
 800804a:	77fb      	strb	r3, [r7, #31]
 800804c:	e00a      	b.n	8008064 <UART_SetConfig+0x348>
 800804e:	2304      	movs	r3, #4
 8008050:	77fb      	strb	r3, [r7, #31]
 8008052:	e007      	b.n	8008064 <UART_SetConfig+0x348>
 8008054:	2308      	movs	r3, #8
 8008056:	77fb      	strb	r3, [r7, #31]
 8008058:	e004      	b.n	8008064 <UART_SetConfig+0x348>
 800805a:	2310      	movs	r3, #16
 800805c:	77fb      	strb	r3, [r7, #31]
 800805e:	e001      	b.n	8008064 <UART_SetConfig+0x348>
 8008060:	2310      	movs	r3, #16
 8008062:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	69db      	ldr	r3, [r3, #28]
 8008068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800806c:	d15b      	bne.n	8008126 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800806e:	7ffb      	ldrb	r3, [r7, #31]
 8008070:	2b08      	cmp	r3, #8
 8008072:	d828      	bhi.n	80080c6 <UART_SetConfig+0x3aa>
 8008074:	a201      	add	r2, pc, #4	; (adr r2, 800807c <UART_SetConfig+0x360>)
 8008076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807a:	bf00      	nop
 800807c:	080080a1 	.word	0x080080a1
 8008080:	080080a9 	.word	0x080080a9
 8008084:	080080b1 	.word	0x080080b1
 8008088:	080080c7 	.word	0x080080c7
 800808c:	080080b7 	.word	0x080080b7
 8008090:	080080c7 	.word	0x080080c7
 8008094:	080080c7 	.word	0x080080c7
 8008098:	080080c7 	.word	0x080080c7
 800809c:	080080bf 	.word	0x080080bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080a0:	f7fe fa60 	bl	8006564 <HAL_RCC_GetPCLK1Freq>
 80080a4:	61b8      	str	r0, [r7, #24]
        break;
 80080a6:	e013      	b.n	80080d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080a8:	f7fe fa70 	bl	800658c <HAL_RCC_GetPCLK2Freq>
 80080ac:	61b8      	str	r0, [r7, #24]
        break;
 80080ae:	e00f      	b.n	80080d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080b0:	4b4b      	ldr	r3, [pc, #300]	; (80081e0 <UART_SetConfig+0x4c4>)
 80080b2:	61bb      	str	r3, [r7, #24]
        break;
 80080b4:	e00c      	b.n	80080d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080b6:	f7fe f983 	bl	80063c0 <HAL_RCC_GetSysClockFreq>
 80080ba:	61b8      	str	r0, [r7, #24]
        break;
 80080bc:	e008      	b.n	80080d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080c2:	61bb      	str	r3, [r7, #24]
        break;
 80080c4:	e004      	b.n	80080d0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80080c6:	2300      	movs	r3, #0
 80080c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	77bb      	strb	r3, [r7, #30]
        break;
 80080ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d074      	beq.n	80081c0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	005a      	lsls	r2, r3, #1
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	085b      	lsrs	r3, r3, #1
 80080e0:	441a      	add	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	2b0f      	cmp	r3, #15
 80080f0:	d916      	bls.n	8008120 <UART_SetConfig+0x404>
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080f8:	d212      	bcs.n	8008120 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	f023 030f 	bic.w	r3, r3, #15
 8008102:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	085b      	lsrs	r3, r3, #1
 8008108:	b29b      	uxth	r3, r3
 800810a:	f003 0307 	and.w	r3, r3, #7
 800810e:	b29a      	uxth	r2, r3
 8008110:	89fb      	ldrh	r3, [r7, #14]
 8008112:	4313      	orrs	r3, r2
 8008114:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	89fa      	ldrh	r2, [r7, #14]
 800811c:	60da      	str	r2, [r3, #12]
 800811e:	e04f      	b.n	80081c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	77bb      	strb	r3, [r7, #30]
 8008124:	e04c      	b.n	80081c0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008126:	7ffb      	ldrb	r3, [r7, #31]
 8008128:	2b08      	cmp	r3, #8
 800812a:	d828      	bhi.n	800817e <UART_SetConfig+0x462>
 800812c:	a201      	add	r2, pc, #4	; (adr r2, 8008134 <UART_SetConfig+0x418>)
 800812e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008132:	bf00      	nop
 8008134:	08008159 	.word	0x08008159
 8008138:	08008161 	.word	0x08008161
 800813c:	08008169 	.word	0x08008169
 8008140:	0800817f 	.word	0x0800817f
 8008144:	0800816f 	.word	0x0800816f
 8008148:	0800817f 	.word	0x0800817f
 800814c:	0800817f 	.word	0x0800817f
 8008150:	0800817f 	.word	0x0800817f
 8008154:	08008177 	.word	0x08008177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008158:	f7fe fa04 	bl	8006564 <HAL_RCC_GetPCLK1Freq>
 800815c:	61b8      	str	r0, [r7, #24]
        break;
 800815e:	e013      	b.n	8008188 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008160:	f7fe fa14 	bl	800658c <HAL_RCC_GetPCLK2Freq>
 8008164:	61b8      	str	r0, [r7, #24]
        break;
 8008166:	e00f      	b.n	8008188 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008168:	4b1d      	ldr	r3, [pc, #116]	; (80081e0 <UART_SetConfig+0x4c4>)
 800816a:	61bb      	str	r3, [r7, #24]
        break;
 800816c:	e00c      	b.n	8008188 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800816e:	f7fe f927 	bl	80063c0 <HAL_RCC_GetSysClockFreq>
 8008172:	61b8      	str	r0, [r7, #24]
        break;
 8008174:	e008      	b.n	8008188 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800817a:	61bb      	str	r3, [r7, #24]
        break;
 800817c:	e004      	b.n	8008188 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800817e:	2300      	movs	r3, #0
 8008180:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	77bb      	strb	r3, [r7, #30]
        break;
 8008186:	bf00      	nop
    }

    if (pclk != 0U)
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d018      	beq.n	80081c0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	085a      	lsrs	r2, r3, #1
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	441a      	add	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	fbb2 f3f3 	udiv	r3, r2, r3
 80081a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	2b0f      	cmp	r3, #15
 80081a6:	d909      	bls.n	80081bc <UART_SetConfig+0x4a0>
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081ae:	d205      	bcs.n	80081bc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	60da      	str	r2, [r3, #12]
 80081ba:	e001      	b.n	80081c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80081cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3720      	adds	r7, #32
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	40007c00 	.word	0x40007c00
 80081dc:	40023800 	.word	0x40023800
 80081e0:	00f42400 	.word	0x00f42400

080081e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f0:	f003 0301 	and.w	r3, r3, #1
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00a      	beq.n	800820e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	430a      	orrs	r2, r1
 800820c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008212:	f003 0302 	and.w	r3, r3, #2
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00a      	beq.n	8008230 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	430a      	orrs	r2, r1
 800822e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008234:	f003 0304 	and.w	r3, r3, #4
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00a      	beq.n	8008252 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	430a      	orrs	r2, r1
 8008250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008256:	f003 0308 	and.w	r3, r3, #8
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00a      	beq.n	8008274 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	430a      	orrs	r2, r1
 8008272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008278:	f003 0310 	and.w	r3, r3, #16
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00a      	beq.n	8008296 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	430a      	orrs	r2, r1
 8008294:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829a:	f003 0320 	and.w	r3, r3, #32
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00a      	beq.n	80082b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	430a      	orrs	r2, r1
 80082b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d01a      	beq.n	80082fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	430a      	orrs	r2, r1
 80082d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082e2:	d10a      	bne.n	80082fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	430a      	orrs	r2, r1
 80082f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00a      	beq.n	800831c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	430a      	orrs	r2, r1
 800831a:	605a      	str	r2, [r3, #4]
  }
}
 800831c:	bf00      	nop
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af02      	add	r7, sp, #8
 800832e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008338:	f7fb fdb2 	bl	8003ea0 <HAL_GetTick>
 800833c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 0308 	and.w	r3, r3, #8
 8008348:	2b08      	cmp	r3, #8
 800834a:	d10e      	bne.n	800836a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800834c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f831 	bl	80083c2 <UART_WaitOnFlagUntilTimeout>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008366:	2303      	movs	r3, #3
 8008368:	e027      	b.n	80083ba <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0304 	and.w	r3, r3, #4
 8008374:	2b04      	cmp	r3, #4
 8008376:	d10e      	bne.n	8008396 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008378:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f81b 	bl	80083c2 <UART_WaitOnFlagUntilTimeout>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e011      	b.n	80083ba <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2220      	movs	r2, #32
 800839a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2220      	movs	r2, #32
 80083a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b09c      	sub	sp, #112	; 0x70
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	60f8      	str	r0, [r7, #12]
 80083ca:	60b9      	str	r1, [r7, #8]
 80083cc:	603b      	str	r3, [r7, #0]
 80083ce:	4613      	mov	r3, r2
 80083d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083d2:	e0a7      	b.n	8008524 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083da:	f000 80a3 	beq.w	8008524 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083de:	f7fb fd5f 	bl	8003ea0 <HAL_GetTick>
 80083e2:	4602      	mov	r2, r0
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	1ad3      	subs	r3, r2, r3
 80083e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d302      	bcc.n	80083f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80083ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d13f      	bne.n	8008474 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083fc:	e853 3f00 	ldrex	r3, [r3]
 8008400:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008404:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008408:	667b      	str	r3, [r7, #100]	; 0x64
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	461a      	mov	r2, r3
 8008410:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008412:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008414:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008416:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008418:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800841a:	e841 2300 	strex	r3, r2, [r1]
 800841e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1e6      	bne.n	80083f4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	3308      	adds	r3, #8
 800842c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008430:	e853 3f00 	ldrex	r3, [r3]
 8008434:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008438:	f023 0301 	bic.w	r3, r3, #1
 800843c:	663b      	str	r3, [r7, #96]	; 0x60
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	3308      	adds	r3, #8
 8008444:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008446:	64ba      	str	r2, [r7, #72]	; 0x48
 8008448:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800844c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800844e:	e841 2300 	strex	r3, r2, [r1]
 8008452:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1e5      	bne.n	8008426 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2220      	movs	r2, #32
 800845e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2220      	movs	r2, #32
 8008464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008470:	2303      	movs	r3, #3
 8008472:	e068      	b.n	8008546 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f003 0304 	and.w	r3, r3, #4
 800847e:	2b00      	cmp	r3, #0
 8008480:	d050      	beq.n	8008524 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	69db      	ldr	r3, [r3, #28]
 8008488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800848c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008490:	d148      	bne.n	8008524 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800849a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a4:	e853 3f00 	ldrex	r3, [r3]
 80084a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80084b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	461a      	mov	r2, r3
 80084b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ba:	637b      	str	r3, [r7, #52]	; 0x34
 80084bc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084c2:	e841 2300 	strex	r3, r2, [r1]
 80084c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80084c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1e6      	bne.n	800849c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	3308      	adds	r3, #8
 80084d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	e853 3f00 	ldrex	r3, [r3]
 80084dc:	613b      	str	r3, [r7, #16]
   return(result);
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	f023 0301 	bic.w	r3, r3, #1
 80084e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	3308      	adds	r3, #8
 80084ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80084ee:	623a      	str	r2, [r7, #32]
 80084f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f2:	69f9      	ldr	r1, [r7, #28]
 80084f4:	6a3a      	ldr	r2, [r7, #32]
 80084f6:	e841 2300 	strex	r3, r2, [r1]
 80084fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1e5      	bne.n	80084ce <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2220      	movs	r2, #32
 8008506:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2220      	movs	r2, #32
 800850c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2220      	movs	r2, #32
 8008514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	e010      	b.n	8008546 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	69da      	ldr	r2, [r3, #28]
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	4013      	ands	r3, r2
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	429a      	cmp	r2, r3
 8008532:	bf0c      	ite	eq
 8008534:	2301      	moveq	r3, #1
 8008536:	2300      	movne	r3, #0
 8008538:	b2db      	uxtb	r3, r3
 800853a:	461a      	mov	r2, r3
 800853c:	79fb      	ldrb	r3, [r7, #7]
 800853e:	429a      	cmp	r2, r3
 8008540:	f43f af48 	beq.w	80083d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3770      	adds	r7, #112	; 0x70
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
	...

08008550 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008550:	b480      	push	{r7}
 8008552:	b097      	sub	sp, #92	; 0x5c
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	4613      	mov	r3, r2
 800855c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	68ba      	ldr	r2, [r7, #8]
 8008562:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	88fa      	ldrh	r2, [r7, #6]
 8008568:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	88fa      	ldrh	r2, [r7, #6]
 8008570:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008582:	d10e      	bne.n	80085a2 <UART_Start_Receive_IT+0x52>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d105      	bne.n	8008598 <UART_Start_Receive_IT+0x48>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008592:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008596:	e02d      	b.n	80085f4 <UART_Start_Receive_IT+0xa4>
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	22ff      	movs	r2, #255	; 0xff
 800859c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085a0:	e028      	b.n	80085f4 <UART_Start_Receive_IT+0xa4>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10d      	bne.n	80085c6 <UART_Start_Receive_IT+0x76>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d104      	bne.n	80085bc <UART_Start_Receive_IT+0x6c>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	22ff      	movs	r2, #255	; 0xff
 80085b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085ba:	e01b      	b.n	80085f4 <UART_Start_Receive_IT+0xa4>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	227f      	movs	r2, #127	; 0x7f
 80085c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085c4:	e016      	b.n	80085f4 <UART_Start_Receive_IT+0xa4>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085ce:	d10d      	bne.n	80085ec <UART_Start_Receive_IT+0x9c>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d104      	bne.n	80085e2 <UART_Start_Receive_IT+0x92>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	227f      	movs	r2, #127	; 0x7f
 80085dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085e0:	e008      	b.n	80085f4 <UART_Start_Receive_IT+0xa4>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	223f      	movs	r2, #63	; 0x3f
 80085e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085ea:	e003      	b.n	80085f4 <UART_Start_Receive_IT+0xa4>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2222      	movs	r2, #34	; 0x22
 8008600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	3308      	adds	r3, #8
 800860a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800860e:	e853 3f00 	ldrex	r3, [r3]
 8008612:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008616:	f043 0301 	orr.w	r3, r3, #1
 800861a:	657b      	str	r3, [r7, #84]	; 0x54
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3308      	adds	r3, #8
 8008622:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008624:	64ba      	str	r2, [r7, #72]	; 0x48
 8008626:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008628:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800862a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800862c:	e841 2300 	strex	r3, r2, [r1]
 8008630:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1e5      	bne.n	8008604 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008640:	d107      	bne.n	8008652 <UART_Start_Receive_IT+0x102>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d103      	bne.n	8008652 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	4a21      	ldr	r2, [pc, #132]	; (80086d4 <UART_Start_Receive_IT+0x184>)
 800864e:	669a      	str	r2, [r3, #104]	; 0x68
 8008650:	e002      	b.n	8008658 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	4a20      	ldr	r2, [pc, #128]	; (80086d8 <UART_Start_Receive_IT+0x188>)
 8008656:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d019      	beq.n	8008694 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008668:	e853 3f00 	ldrex	r3, [r3]
 800866c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800866e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008670:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008674:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	461a      	mov	r2, r3
 800867c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800867e:	637b      	str	r3, [r7, #52]	; 0x34
 8008680:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008682:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008684:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008686:	e841 2300 	strex	r3, r2, [r1]
 800868a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800868c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1e6      	bne.n	8008660 <UART_Start_Receive_IT+0x110>
 8008692:	e018      	b.n	80086c6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	e853 3f00 	ldrex	r3, [r3]
 80086a0:	613b      	str	r3, [r7, #16]
   return(result);
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f043 0320 	orr.w	r3, r3, #32
 80086a8:	653b      	str	r3, [r7, #80]	; 0x50
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	461a      	mov	r2, r3
 80086b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086b2:	623b      	str	r3, [r7, #32]
 80086b4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b6:	69f9      	ldr	r1, [r7, #28]
 80086b8:	6a3a      	ldr	r2, [r7, #32]
 80086ba:	e841 2300 	strex	r3, r2, [r1]
 80086be:	61bb      	str	r3, [r7, #24]
   return(result);
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1e6      	bne.n	8008694 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	375c      	adds	r7, #92	; 0x5c
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr
 80086d4:	0800898b 	.word	0x0800898b
 80086d8:	08008825 	.word	0x08008825

080086dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086dc:	b480      	push	{r7}
 80086de:	b095      	sub	sp, #84	; 0x54
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ec:	e853 3f00 	ldrex	r3, [r3]
 80086f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	461a      	mov	r2, r3
 8008700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008702:	643b      	str	r3, [r7, #64]	; 0x40
 8008704:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008706:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008708:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800870a:	e841 2300 	strex	r3, r2, [r1]
 800870e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1e6      	bne.n	80086e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3308      	adds	r3, #8
 800871c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	e853 3f00 	ldrex	r3, [r3]
 8008724:	61fb      	str	r3, [r7, #28]
   return(result);
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	f023 0301 	bic.w	r3, r3, #1
 800872c:	64bb      	str	r3, [r7, #72]	; 0x48
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	3308      	adds	r3, #8
 8008734:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008736:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008738:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800873c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800873e:	e841 2300 	strex	r3, r2, [r1]
 8008742:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	2b00      	cmp	r3, #0
 8008748:	d1e5      	bne.n	8008716 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800874e:	2b01      	cmp	r3, #1
 8008750:	d118      	bne.n	8008784 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	e853 3f00 	ldrex	r3, [r3]
 800875e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	f023 0310 	bic.w	r3, r3, #16
 8008766:	647b      	str	r3, [r7, #68]	; 0x44
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	461a      	mov	r2, r3
 800876e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008770:	61bb      	str	r3, [r7, #24]
 8008772:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008774:	6979      	ldr	r1, [r7, #20]
 8008776:	69ba      	ldr	r2, [r7, #24]
 8008778:	e841 2300 	strex	r3, r2, [r1]
 800877c:	613b      	str	r3, [r7, #16]
   return(result);
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d1e6      	bne.n	8008752 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2220      	movs	r2, #32
 8008788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008798:	bf00      	nop
 800879a:	3754      	adds	r7, #84	; 0x54
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f7ff fa8a 	bl	8007cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087c8:	bf00      	nop
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b088      	sub	sp, #32
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	e853 3f00 	ldrex	r3, [r3]
 80087e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ec:	61fb      	str	r3, [r7, #28]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	461a      	mov	r2, r3
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	61bb      	str	r3, [r7, #24]
 80087f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fa:	6979      	ldr	r1, [r7, #20]
 80087fc:	69ba      	ldr	r2, [r7, #24]
 80087fe:	e841 2300 	strex	r3, r2, [r1]
 8008802:	613b      	str	r3, [r7, #16]
   return(result);
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1e6      	bne.n	80087d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2220      	movs	r2, #32
 800880e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f7ff fa56 	bl	8007cc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800881c:	bf00      	nop
 800881e:	3720      	adds	r7, #32
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b096      	sub	sp, #88	; 0x58
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008832:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800883c:	2b22      	cmp	r3, #34	; 0x22
 800883e:	f040 8098 	bne.w	8008972 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008848:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800884c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008850:	b2d9      	uxtb	r1, r3
 8008852:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008856:	b2da      	uxtb	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800885c:	400a      	ands	r2, r1
 800885e:	b2d2      	uxtb	r2, r2
 8008860:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008866:	1c5a      	adds	r2, r3, #1
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008872:	b29b      	uxth	r3, r3
 8008874:	3b01      	subs	r3, #1
 8008876:	b29a      	uxth	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008884:	b29b      	uxth	r3, r3
 8008886:	2b00      	cmp	r3, #0
 8008888:	d17b      	bne.n	8008982 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008892:	e853 3f00 	ldrex	r3, [r3]
 8008896:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800889e:	653b      	str	r3, [r7, #80]	; 0x50
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	461a      	mov	r2, r3
 80088a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088a8:	647b      	str	r3, [r7, #68]	; 0x44
 80088aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088b0:	e841 2300 	strex	r3, r2, [r1]
 80088b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1e6      	bne.n	800888a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3308      	adds	r3, #8
 80088c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	e853 3f00 	ldrex	r3, [r3]
 80088ca:	623b      	str	r3, [r7, #32]
   return(result);
 80088cc:	6a3b      	ldr	r3, [r7, #32]
 80088ce:	f023 0301 	bic.w	r3, r3, #1
 80088d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	3308      	adds	r3, #8
 80088da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088dc:	633a      	str	r2, [r7, #48]	; 0x30
 80088de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088e4:	e841 2300 	strex	r3, r2, [r1]
 80088e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1e5      	bne.n	80088bc <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2220      	movs	r2, #32
 80088f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008908:	2b01      	cmp	r3, #1
 800890a:	d12e      	bne.n	800896a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	e853 3f00 	ldrex	r3, [r3]
 800891e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f023 0310 	bic.w	r3, r3, #16
 8008926:	64bb      	str	r3, [r7, #72]	; 0x48
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	461a      	mov	r2, r3
 800892e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008930:	61fb      	str	r3, [r7, #28]
 8008932:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008934:	69b9      	ldr	r1, [r7, #24]
 8008936:	69fa      	ldr	r2, [r7, #28]
 8008938:	e841 2300 	strex	r3, r2, [r1]
 800893c:	617b      	str	r3, [r7, #20]
   return(result);
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d1e6      	bne.n	8008912 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	69db      	ldr	r3, [r3, #28]
 800894a:	f003 0310 	and.w	r3, r3, #16
 800894e:	2b10      	cmp	r3, #16
 8008950:	d103      	bne.n	800895a <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2210      	movs	r2, #16
 8008958:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008960:	4619      	mov	r1, r3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7ff f9c4 	bl	8007cf0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008968:	e00b      	b.n	8008982 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7fa ffe0 	bl	8003930 <HAL_UART_RxCpltCallback>
}
 8008970:	e007      	b.n	8008982 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	699a      	ldr	r2, [r3, #24]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f042 0208 	orr.w	r2, r2, #8
 8008980:	619a      	str	r2, [r3, #24]
}
 8008982:	bf00      	nop
 8008984:	3758      	adds	r7, #88	; 0x58
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b096      	sub	sp, #88	; 0x58
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008998:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089a2:	2b22      	cmp	r3, #34	; 0x22
 80089a4:	f040 8098 	bne.w	8008ad8 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ae:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80089b8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80089bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80089c0:	4013      	ands	r3, r2
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089c6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089cc:	1c9a      	adds	r2, r3, #2
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089d8:	b29b      	uxth	r3, r3
 80089da:	3b01      	subs	r3, #1
 80089dc:	b29a      	uxth	r2, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d17b      	bne.n	8008ae8 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f8:	e853 3f00 	ldrex	r3, [r3]
 80089fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a0e:	643b      	str	r3, [r7, #64]	; 0x40
 8008a10:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a16:	e841 2300 	strex	r3, r2, [r1]
 8008a1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1e6      	bne.n	80089f0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	3308      	adds	r3, #8
 8008a28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2a:	6a3b      	ldr	r3, [r7, #32]
 8008a2c:	e853 3f00 	ldrex	r3, [r3]
 8008a30:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	f023 0301 	bic.w	r3, r3, #1
 8008a38:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	3308      	adds	r3, #8
 8008a40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1e5      	bne.n	8008a22 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2220      	movs	r2, #32
 8008a5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d12e      	bne.n	8008ad0 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	e853 3f00 	ldrex	r3, [r3]
 8008a84:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	f023 0310 	bic.w	r3, r3, #16
 8008a8c:	647b      	str	r3, [r7, #68]	; 0x44
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	461a      	mov	r2, r3
 8008a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a96:	61bb      	str	r3, [r7, #24]
 8008a98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9a:	6979      	ldr	r1, [r7, #20]
 8008a9c:	69ba      	ldr	r2, [r7, #24]
 8008a9e:	e841 2300 	strex	r3, r2, [r1]
 8008aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d1e6      	bne.n	8008a78 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	f003 0310 	and.w	r3, r3, #16
 8008ab4:	2b10      	cmp	r3, #16
 8008ab6:	d103      	bne.n	8008ac0 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2210      	movs	r2, #16
 8008abe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f7ff f911 	bl	8007cf0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ace:	e00b      	b.n	8008ae8 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7fa ff2d 	bl	8003930 <HAL_UART_RxCpltCallback>
}
 8008ad6:	e007      	b.n	8008ae8 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	699a      	ldr	r2, [r3, #24]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f042 0208 	orr.w	r2, r2, #8
 8008ae6:	619a      	str	r2, [r3, #24]
}
 8008ae8:	bf00      	nop
 8008aea:	3758      	adds	r7, #88	; 0x58
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <__libc_init_array>:
 8008af0:	b570      	push	{r4, r5, r6, lr}
 8008af2:	4d0d      	ldr	r5, [pc, #52]	; (8008b28 <__libc_init_array+0x38>)
 8008af4:	4c0d      	ldr	r4, [pc, #52]	; (8008b2c <__libc_init_array+0x3c>)
 8008af6:	1b64      	subs	r4, r4, r5
 8008af8:	10a4      	asrs	r4, r4, #2
 8008afa:	2600      	movs	r6, #0
 8008afc:	42a6      	cmp	r6, r4
 8008afe:	d109      	bne.n	8008b14 <__libc_init_array+0x24>
 8008b00:	4d0b      	ldr	r5, [pc, #44]	; (8008b30 <__libc_init_array+0x40>)
 8008b02:	4c0c      	ldr	r4, [pc, #48]	; (8008b34 <__libc_init_array+0x44>)
 8008b04:	f000 f864 	bl	8008bd0 <_init>
 8008b08:	1b64      	subs	r4, r4, r5
 8008b0a:	10a4      	asrs	r4, r4, #2
 8008b0c:	2600      	movs	r6, #0
 8008b0e:	42a6      	cmp	r6, r4
 8008b10:	d105      	bne.n	8008b1e <__libc_init_array+0x2e>
 8008b12:	bd70      	pop	{r4, r5, r6, pc}
 8008b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b18:	4798      	blx	r3
 8008b1a:	3601      	adds	r6, #1
 8008b1c:	e7ee      	b.n	8008afc <__libc_init_array+0xc>
 8008b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b22:	4798      	blx	r3
 8008b24:	3601      	adds	r6, #1
 8008b26:	e7f2      	b.n	8008b0e <__libc_init_array+0x1e>
 8008b28:	0800971c 	.word	0x0800971c
 8008b2c:	0800971c 	.word	0x0800971c
 8008b30:	0800971c 	.word	0x0800971c
 8008b34:	08009720 	.word	0x08009720

08008b38 <memset>:
 8008b38:	4402      	add	r2, r0
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d100      	bne.n	8008b42 <memset+0xa>
 8008b40:	4770      	bx	lr
 8008b42:	f803 1b01 	strb.w	r1, [r3], #1
 8008b46:	e7f9      	b.n	8008b3c <memset+0x4>

08008b48 <__utoa>:
 8008b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b4a:	4c1f      	ldr	r4, [pc, #124]	; (8008bc8 <__utoa+0x80>)
 8008b4c:	b08b      	sub	sp, #44	; 0x2c
 8008b4e:	4605      	mov	r5, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	466e      	mov	r6, sp
 8008b54:	f104 0c20 	add.w	ip, r4, #32
 8008b58:	6820      	ldr	r0, [r4, #0]
 8008b5a:	6861      	ldr	r1, [r4, #4]
 8008b5c:	4637      	mov	r7, r6
 8008b5e:	c703      	stmia	r7!, {r0, r1}
 8008b60:	3408      	adds	r4, #8
 8008b62:	4564      	cmp	r4, ip
 8008b64:	463e      	mov	r6, r7
 8008b66:	d1f7      	bne.n	8008b58 <__utoa+0x10>
 8008b68:	7921      	ldrb	r1, [r4, #4]
 8008b6a:	7139      	strb	r1, [r7, #4]
 8008b6c:	1e91      	subs	r1, r2, #2
 8008b6e:	6820      	ldr	r0, [r4, #0]
 8008b70:	6038      	str	r0, [r7, #0]
 8008b72:	2922      	cmp	r1, #34	; 0x22
 8008b74:	f04f 0100 	mov.w	r1, #0
 8008b78:	d904      	bls.n	8008b84 <__utoa+0x3c>
 8008b7a:	7019      	strb	r1, [r3, #0]
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	4618      	mov	r0, r3
 8008b80:	b00b      	add	sp, #44	; 0x2c
 8008b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b84:	1e58      	subs	r0, r3, #1
 8008b86:	4684      	mov	ip, r0
 8008b88:	fbb5 f7f2 	udiv	r7, r5, r2
 8008b8c:	fb02 5617 	mls	r6, r2, r7, r5
 8008b90:	3628      	adds	r6, #40	; 0x28
 8008b92:	446e      	add	r6, sp
 8008b94:	460c      	mov	r4, r1
 8008b96:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008b9a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008b9e:	462e      	mov	r6, r5
 8008ba0:	42b2      	cmp	r2, r6
 8008ba2:	f101 0101 	add.w	r1, r1, #1
 8008ba6:	463d      	mov	r5, r7
 8008ba8:	d9ee      	bls.n	8008b88 <__utoa+0x40>
 8008baa:	2200      	movs	r2, #0
 8008bac:	545a      	strb	r2, [r3, r1]
 8008bae:	1919      	adds	r1, r3, r4
 8008bb0:	1aa5      	subs	r5, r4, r2
 8008bb2:	42aa      	cmp	r2, r5
 8008bb4:	dae3      	bge.n	8008b7e <__utoa+0x36>
 8008bb6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008bba:	780e      	ldrb	r6, [r1, #0]
 8008bbc:	7006      	strb	r6, [r0, #0]
 8008bbe:	3201      	adds	r2, #1
 8008bc0:	f801 5901 	strb.w	r5, [r1], #-1
 8008bc4:	e7f4      	b.n	8008bb0 <__utoa+0x68>
 8008bc6:	bf00      	nop
 8008bc8:	080096ec 	.word	0x080096ec

08008bcc <utoa>:
 8008bcc:	f7ff bfbc 	b.w	8008b48 <__utoa>

08008bd0 <_init>:
 8008bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd2:	bf00      	nop
 8008bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bd6:	bc08      	pop	{r3}
 8008bd8:	469e      	mov	lr, r3
 8008bda:	4770      	bx	lr

08008bdc <_fini>:
 8008bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bde:	bf00      	nop
 8008be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008be2:	bc08      	pop	{r3}
 8008be4:	469e      	mov	lr, r3
 8008be6:	4770      	bx	lr
