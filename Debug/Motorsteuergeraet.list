
Motorsteuergeraet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e40  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08006038  08006038  00016038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006448  08006448  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006448  08006448  00016448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006450  08006450  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006450  08006450  00016450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006454  08006454  00016454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000000c  08006464  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08006464  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018806  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000385b  00000000  00000000  00038840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  0003c0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  0003d1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c8d7  00000000  00000000  0003e138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017edb  00000000  00000000  0006aa0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010780b  00000000  00000000  000828ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018a0f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004458  00000000  00000000  0018a148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006020 	.word	0x08006020

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08006020 	.word	0x08006020

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <BAMOCAN_ID>:
//----------------------------------------------------------------------

// Ermittle Register nach Empfang Bamocar CAN-ID
//----------------------------------------------------------------------
void BAMOCAN_ID(uint8_t* data)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	uint8_t Reg = data[0];
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	73fb      	strb	r3, [r7, #15]
	uint16_t speed = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	81bb      	strh	r3, [r7, #12]

	// Waehlen welches Register gesendet wurde
	switch (Reg)
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	2b30      	cmp	r3, #48	; 0x30
 8000556:	d113      	bne.n	8000580 <BAMOCAN_ID+0x40>
	{
		// Register fuer aktuelle Drehzahl, speed = n
		case BAMOCAR_REG_SPEED_ACT:
			speed = ((data[2]<<8) + data[1]);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	3302      	adds	r3, #2
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	b29b      	uxth	r3, r3
 8000560:	021b      	lsls	r3, r3, #8
 8000562:	b29a      	uxth	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3301      	adds	r3, #1
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	b29b      	uxth	r3, r3
 800056c:	4413      	add	r3, r2
 800056e:	81bb      	strh	r3, [r7, #12]
			motor1.Drehzahl = speed;
 8000570:	4a08      	ldr	r2, [pc, #32]	; (8000594 <BAMOCAN_ID+0x54>)
 8000572:	89bb      	ldrh	r3, [r7, #12]
 8000574:	8053      	strh	r3, [r2, #2]
// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Aktuelle Drehzahl\n", 18);
 8000576:	2112      	movs	r1, #18
 8000578:	4807      	ldr	r0, [pc, #28]	; (8000598 <BAMOCAN_ID+0x58>)
 800057a:	f000 f811 	bl	80005a0 <uartTransmit>
#endif

			break;
 800057e:	e004      	b.n	800058a <BAMOCAN_ID+0x4a>


		// Default Mitteilung falls Auwertung für Register noch nicht definiert ist
		default:
			uartTransmit("Bamocar Register nicht definiert\n", 33);
 8000580:	2121      	movs	r1, #33	; 0x21
 8000582:	4806      	ldr	r0, [pc, #24]	; (800059c <BAMOCAN_ID+0x5c>)
 8000584:	f000 f80c 	bl	80005a0 <uartTransmit>
			break;
 8000588:	bf00      	nop
	}
}
 800058a:	bf00      	nop
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000034 	.word	0x20000034
 8000598:	08006038 	.word	0x08006038
 800059c:	0800604c 	.word	0x0800604c

080005a0 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <uartTransmit+0x24>)
 80005b6:	f005 f865 	bl	8005684 <HAL_UART_Transmit>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000138 	.word	0x20000138

080005c8 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 80005d2:	683a      	ldr	r2, [r7, #0]
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	4619      	mov	r1, r3
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f005 fd1e 	bl	800601c <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fe27 	bl	8000238 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	f107 010c 	add.w	r1, r7, #12
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	4803      	ldr	r0, [pc, #12]	; (8000604 <uartTransmitNumber+0x3c>)
 80005f8:	f005 f844 	bl	8005684 <HAL_UART_Transmit>
}
 80005fc:	bf00      	nop
 80005fe:	3718      	adds	r7, #24
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000138 	.word	0x20000138

08000608 <collectMiddlewareInfo>:


// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION		"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION			"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION	"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION			"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 800060c:	2112      	movs	r1, #18
 800060e:	4822      	ldr	r0, [pc, #136]	; (8000698 <collectMiddlewareInfo+0x90>)
 8000610:	f7ff ffc6 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8000614:	210a      	movs	r1, #10
 8000616:	2005      	movs	r0, #5
 8000618:	f7ff ffd6 	bl	80005c8 <uartTransmitNumber>
	uartTransmit(".", 1);
 800061c:	2101      	movs	r1, #1
 800061e:	481f      	ldr	r0, [pc, #124]	; (800069c <collectMiddlewareInfo+0x94>)
 8000620:	f7ff ffbe 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8000624:	210a      	movs	r1, #10
 8000626:	2001      	movs	r0, #1
 8000628:	f7ff ffce 	bl	80005c8 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 800062c:	2110      	movs	r1, #16
 800062e:	481c      	ldr	r0, [pc, #112]	; (80006a0 <collectMiddlewareInfo+0x98>)
 8000630:	f7ff ffb6 	bl	80005a0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8000634:	f001 fdb8 	bl	80021a8 <HAL_GetHalVersion>
 8000638:	4603      	mov	r3, r0
 800063a:	0e1b      	lsrs	r3, r3, #24
 800063c:	b2db      	uxtb	r3, r3
 800063e:	210a      	movs	r1, #10
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ffc1 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000646:	2101      	movs	r1, #1
 8000648:	4814      	ldr	r0, [pc, #80]	; (800069c <collectMiddlewareInfo+0x94>)
 800064a:	f7ff ffa9 	bl	80005a0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 800064e:	f001 fdab 	bl	80021a8 <HAL_GetHalVersion>
 8000652:	4603      	mov	r3, r0
 8000654:	0c1b      	lsrs	r3, r3, #16
 8000656:	b2db      	uxtb	r3, r3
 8000658:	210a      	movs	r1, #10
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ffb4 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000660:	2101      	movs	r1, #1
 8000662:	480e      	ldr	r0, [pc, #56]	; (800069c <collectMiddlewareInfo+0x94>)
 8000664:	f7ff ff9c 	bl	80005a0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000668:	f001 fd9e 	bl	80021a8 <HAL_GetHalVersion>
 800066c:	4603      	mov	r3, r0
 800066e:	0a1b      	lsrs	r3, r3, #8
 8000670:	b2db      	uxtb	r3, r3
 8000672:	210a      	movs	r1, #10
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ffa7 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800067a:	2101      	movs	r1, #1
 800067c:	4807      	ldr	r0, [pc, #28]	; (800069c <collectMiddlewareInfo+0x94>)
 800067e:	f7ff ff8f 	bl	80005a0 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000682:	f001 fd91 	bl	80021a8 <HAL_GetHalVersion>
 8000686:	4603      	mov	r3, r0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	210a      	movs	r1, #10
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff9b 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen

	uartTransmit("\n", 1);*/
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	08006070 	.word	0x08006070
 800069c:	08006084 	.word	0x08006084
 80006a0:	08006088 	.word	0x08006088

080006a4 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	#define STRING_GIT_BRANCH			"\nGit Branch:\t\t"
	#define STRING_GIT_HASH				"\nGit Hash:\t\t"
	#define STRING_BUILD_DATE			"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME			"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_VERSION, sizeof(STRING_GIT_VERSION));
 80006a8:	2110      	movs	r1, #16
 80006aa:	4816      	ldr	r0, [pc, #88]	; (8000704 <collectSoftwareInfo+0x60>)
 80006ac:	f7ff ff78 	bl	80005a0 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 80006b0:	2108      	movs	r1, #8
 80006b2:	4815      	ldr	r0, [pc, #84]	; (8000708 <collectSoftwareInfo+0x64>)
 80006b4:	f7ff ff74 	bl	80005a0 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 80006b8:	210f      	movs	r1, #15
 80006ba:	4814      	ldr	r0, [pc, #80]	; (800070c <collectSoftwareInfo+0x68>)
 80006bc:	f7ff ff70 	bl	80005a0 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 80006c0:	210c      	movs	r1, #12
 80006c2:	4813      	ldr	r0, [pc, #76]	; (8000710 <collectSoftwareInfo+0x6c>)
 80006c4:	f7ff ff6c 	bl	80005a0 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 80006c8:	210d      	movs	r1, #13
 80006ca:	4812      	ldr	r0, [pc, #72]	; (8000714 <collectSoftwareInfo+0x70>)
 80006cc:	f7ff ff68 	bl	80005a0 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 80006d0:	2129      	movs	r1, #41	; 0x29
 80006d2:	4811      	ldr	r0, [pc, #68]	; (8000718 <collectSoftwareInfo+0x74>)
 80006d4:	f7ff ff64 	bl	80005a0 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80006d8:	210f      	movs	r1, #15
 80006da:	4810      	ldr	r0, [pc, #64]	; (800071c <collectSoftwareInfo+0x78>)
 80006dc:	f7ff ff60 	bl	80005a0 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 80006e0:	210c      	movs	r1, #12
 80006e2:	480f      	ldr	r0, [pc, #60]	; (8000720 <collectSoftwareInfo+0x7c>)
 80006e4:	f7ff ff5c 	bl	80005a0 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80006e8:	210f      	movs	r1, #15
 80006ea:	480e      	ldr	r0, [pc, #56]	; (8000724 <collectSoftwareInfo+0x80>)
 80006ec:	f7ff ff58 	bl	80005a0 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 80006f0:	2109      	movs	r1, #9
 80006f2:	480d      	ldr	r0, [pc, #52]	; (8000728 <collectSoftwareInfo+0x84>)
 80006f4:	f7ff ff54 	bl	80005a0 <uartTransmit>

	uartTransmit("\n", 1);
 80006f8:	2101      	movs	r1, #1
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <collectSoftwareInfo+0x88>)
 80006fc:	f7ff ff50 	bl	80005a0 <uartTransmit>
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	08006098 	.word	0x08006098
 8000708:	080060a8 	.word	0x080060a8
 800070c:	080060b0 	.word	0x080060b0
 8000710:	080060c0 	.word	0x080060c0
 8000714:	080060cc 	.word	0x080060cc
 8000718:	080060dc 	.word	0x080060dc
 800071c:	08006108 	.word	0x08006108
 8000720:	08006118 	.word	0x08006118
 8000724:	08006124 	.word	0x08006124
 8000728:	08006134 	.word	0x08006134
 800072c:	08006140 	.word	0x08006140

08000730 <collectHardwareInfo>:
//----------------------------------------------------------------------

// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID		"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION			"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ				"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID				"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 8000736:	2113      	movs	r1, #19
 8000738:	483b      	ldr	r0, [pc, #236]	; (8000828 <collectHardwareInfo+0xf8>)
 800073a:	f7ff ff31 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 800073e:	f001 fd49 	bl	80021d4 <HAL_GetDEVID>
 8000742:	4603      	mov	r3, r0
 8000744:	210a      	movs	r1, #10
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff3e 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 800074c:	2115      	movs	r1, #21
 800074e:	4837      	ldr	r0, [pc, #220]	; (800082c <collectHardwareInfo+0xfc>)
 8000750:	f7ff ff26 	bl	80005a0 <uartTransmit>
	
	switch(HAL_GetREVID())													// Mikrocontroller Revision
 8000754:	f001 fd32 	bl	80021bc <HAL_GetREVID>
 8000758:	4603      	mov	r3, r0
 800075a:	f242 0201 	movw	r2, #8193	; 0x2001
 800075e:	4293      	cmp	r3, r2
 8000760:	d016      	beq.n	8000790 <collectHardwareInfo+0x60>
 8000762:	f242 0201 	movw	r2, #8193	; 0x2001
 8000766:	4293      	cmp	r3, r2
 8000768:	d817      	bhi.n	800079a <collectHardwareInfo+0x6a>
 800076a:	f241 0201 	movw	r2, #4097	; 0x1001
 800076e:	4293      	cmp	r3, r2
 8000770:	d004      	beq.n	800077c <collectHardwareInfo+0x4c>
 8000772:	f241 0203 	movw	r2, #4099	; 0x1003
 8000776:	4293      	cmp	r3, r2
 8000778:	d005      	beq.n	8000786 <collectHardwareInfo+0x56>
 800077a:	e00e      	b.n	800079a <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 800077c:	2101      	movs	r1, #1
 800077e:	482c      	ldr	r0, [pc, #176]	; (8000830 <collectHardwareInfo+0x100>)
 8000780:	f7ff ff0e 	bl	80005a0 <uartTransmit>
			break;
 8000784:	e011      	b.n	80007aa <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 8000786:	2101      	movs	r1, #1
 8000788:	482a      	ldr	r0, [pc, #168]	; (8000834 <collectHardwareInfo+0x104>)
 800078a:	f7ff ff09 	bl	80005a0 <uartTransmit>
			break;
 800078e:	e00c      	b.n	80007aa <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000790:	2101      	movs	r1, #1
 8000792:	4829      	ldr	r0, [pc, #164]	; (8000838 <collectHardwareInfo+0x108>)
 8000794:	f7ff ff04 	bl	80005a0 <uartTransmit>
			break;
 8000798:	e007      	b.n	80007aa <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 800079a:	f001 fd0f 	bl	80021bc <HAL_GetREVID>
 800079e:	4603      	mov	r3, r0
 80007a0:	210a      	movs	r1, #10
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ff10 	bl	80005c8 <uartTransmitNumber>
			break;
 80007a8:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 80007aa:	2113      	movs	r1, #19
 80007ac:	4823      	ldr	r0, [pc, #140]	; (800083c <collectHardwareInfo+0x10c>)
 80007ae:	f7ff fef7 	bl	80005a0 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 80007b2:	f003 feab 	bl	800450c <HAL_RCC_GetSysClockFreq>
 80007b6:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a21      	ldr	r2, [pc, #132]	; (8000840 <collectHardwareInfo+0x110>)
 80007bc:	fba2 2303 	umull	r2, r3, r2, r3
 80007c0:	0c9b      	lsrs	r3, r3, #18
 80007c2:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 80007c4:	210a      	movs	r1, #10
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff fefe 	bl	80005c8 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80007cc:	2104      	movs	r1, #4
 80007ce:	481d      	ldr	r0, [pc, #116]	; (8000844 <collectHardwareInfo+0x114>)
 80007d0:	f7ff fee6 	bl	80005a0 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80007d4:	210f      	movs	r1, #15
 80007d6:	481c      	ldr	r0, [pc, #112]	; (8000848 <collectHardwareInfo+0x118>)
 80007d8:	f7ff fee2 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 80007dc:	f001 fd08 	bl	80021f0 <HAL_GetUIDw0>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2110      	movs	r1, #16
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff feef 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80007ea:	2101      	movs	r1, #1
 80007ec:	4817      	ldr	r0, [pc, #92]	; (800084c <collectHardwareInfo+0x11c>)
 80007ee:	f7ff fed7 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 80007f2:	f001 fd09 	bl	8002208 <HAL_GetUIDw1>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2110      	movs	r1, #16
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fee4 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000800:	2101      	movs	r1, #1
 8000802:	4812      	ldr	r0, [pc, #72]	; (800084c <collectHardwareInfo+0x11c>)
 8000804:	f7ff fecc 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000808:	f001 fd0a 	bl	8002220 <HAL_GetUIDw2>
 800080c:	4603      	mov	r3, r0
 800080e:	2110      	movs	r1, #16
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fed9 	bl	80005c8 <uartTransmitNumber>

	uartTransmit("\n", 1);
 8000816:	2101      	movs	r1, #1
 8000818:	480d      	ldr	r0, [pc, #52]	; (8000850 <collectHardwareInfo+0x120>)
 800081a:	f7ff fec1 	bl	80005a0 <uartTransmit>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	08006144 	.word	0x08006144
 800082c:	08006158 	.word	0x08006158
 8000830:	08006170 	.word	0x08006170
 8000834:	08006174 	.word	0x08006174
 8000838:	08006178 	.word	0x08006178
 800083c:	0800617c 	.word	0x0800617c
 8000840:	431bde83 	.word	0x431bde83
 8000844:	08006190 	.word	0x08006190
 8000848:	08006198 	.word	0x08006198
 800084c:	080061a8 	.word	0x080061a8
 8000850:	08006140 	.word	0x08006140

08000854 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL "\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL "\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL "\n\t --Software--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000858:	2111      	movs	r1, #17
 800085a:	480b      	ldr	r0, [pc, #44]	; (8000888 <collectSystemInfo+0x34>)
 800085c:	f7ff fea0 	bl	80005a0 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000860:	f7ff ff66 	bl	8000730 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000864:	2111      	movs	r1, #17
 8000866:	4809      	ldr	r0, [pc, #36]	; (800088c <collectSystemInfo+0x38>)
 8000868:	f7ff fe9a 	bl	80005a0 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 800086c:	f7ff ff1a 	bl	80006a4 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000870:	2113      	movs	r1, #19
 8000872:	4807      	ldr	r0, [pc, #28]	; (8000890 <collectSystemInfo+0x3c>)
 8000874:	f7ff fe94 	bl	80005a0 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000878:	f7ff fec6 	bl	8000608 <collectMiddlewareInfo>

	uartTransmit("\n\n\n", 3);
 800087c:	2103      	movs	r1, #3
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <collectSystemInfo+0x40>)
 8000880:	f7ff fe8e 	bl	80005a0 <uartTransmit>
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	080061ac 	.word	0x080061ac
 800088c:	080061c0 	.word	0x080061c0
 8000890:	080061d4 	.word	0x080061d4
 8000894:	080061e8 	.word	0x080061e8

08000898 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 800089e:	2300      	movs	r3, #0
 80008a0:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 80008a2:	4b25      	ldr	r3, [pc, #148]	; (8000938 <readResetSource+0xa0>)
 80008a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d002      	beq.n	80008b4 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	3301      	adds	r3, #1
 80008b2:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 80008b4:	4b20      	ldr	r3, [pc, #128]	; (8000938 <readResetSource+0xa0>)
 80008b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d002      	beq.n	80008c6 <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	3302      	adds	r3, #2
 80008c4:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 80008c6:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <readResetSource+0xa0>)
 80008c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	da02      	bge.n	80008d4 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	3304      	adds	r3, #4
 80008d2:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 80008d4:	4b18      	ldr	r3, [pc, #96]	; (8000938 <readResetSource+0xa0>)
 80008d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d002      	beq.n	80008e6 <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	3308      	adds	r3, #8
 80008e4:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <readResetSource+0xa0>)
 80008e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d002      	beq.n	80008f8 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	3310      	adds	r3, #16
 80008f6:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <readResetSource+0xa0>)
 80008fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000900:	2b00      	cmp	r3, #0
 8000902:	d002      	beq.n	800090a <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	3320      	adds	r3, #32
 8000908:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <readResetSource+0xa0>)
 800090c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800090e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000912:	2b00      	cmp	r3, #0
 8000914:	d002      	beq.n	800091c <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	3340      	adds	r3, #64	; 0x40
 800091a:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <readResetSource+0xa0>)
 800091e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000920:	4a05      	ldr	r2, [pc, #20]	; (8000938 <readResetSource+0xa0>)
 8000922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000926:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8000928:	79fb      	ldrb	r3, [r7, #7]
}
 800092a:	4618      	mov	r0, r3
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800

0800093c <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8000946:	2106      	movs	r1, #6
 8000948:	482a      	ldr	r0, [pc, #168]	; (80009f4 <printResetSource+0xb8>)
 800094a:	f7ff fe29 	bl	80005a0 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d104      	bne.n	800095e <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8000954:	210f      	movs	r1, #15
 8000956:	4828      	ldr	r0, [pc, #160]	; (80009f8 <printResetSource+0xbc>)
 8000958:	f7ff fe22 	bl	80005a0 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 800095c:	e046      	b.n	80009ec <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	2b00      	cmp	r3, #0
 8000966:	d003      	beq.n	8000970 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000968:	2118      	movs	r1, #24
 800096a:	4824      	ldr	r0, [pc, #144]	; (80009fc <printResetSource+0xc0>)
 800096c:	f7ff fe18 	bl	80005a0 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	2b00      	cmp	r3, #0
 8000978:	d003      	beq.n	8000982 <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 800097a:	2116      	movs	r1, #22
 800097c:	4820      	ldr	r0, [pc, #128]	; (8000a00 <printResetSource+0xc4>)
 800097e:	f7ff fe0f 	bl	80005a0 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	f003 0304 	and.w	r3, r3, #4
 8000988:	2b00      	cmp	r3, #0
 800098a:	d003      	beq.n	8000994 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 800098c:	210a      	movs	r1, #10
 800098e:	481d      	ldr	r0, [pc, #116]	; (8000a04 <printResetSource+0xc8>)
 8000990:	f7ff fe06 	bl	80005a0 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	f003 0308 	and.w	r3, r3, #8
 800099a:	2b00      	cmp	r3, #0
 800099c:	d003      	beq.n	80009a6 <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 800099e:	2110      	movs	r1, #16
 80009a0:	4819      	ldr	r0, [pc, #100]	; (8000a08 <printResetSource+0xcc>)
 80009a2:	f7ff fdfd 	bl	80005a0 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	f003 0310 	and.w	r3, r3, #16
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d003      	beq.n	80009b8 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 80009b0:	210f      	movs	r1, #15
 80009b2:	4816      	ldr	r0, [pc, #88]	; (8000a0c <printResetSource+0xd0>)
 80009b4:	f7ff fdf4 	bl	80005a0 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	f003 0320 	and.w	r3, r3, #32
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d003      	beq.n	80009ca <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 80009c2:	210f      	movs	r1, #15
 80009c4:	4812      	ldr	r0, [pc, #72]	; (8000a10 <printResetSource+0xd4>)
 80009c6:	f7ff fdeb 	bl	80005a0 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d003      	beq.n	80009dc <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 80009d4:	210a      	movs	r1, #10
 80009d6:	480f      	ldr	r0, [pc, #60]	; (8000a14 <printResetSource+0xd8>)
 80009d8:	f7ff fde2 	bl	80005a0 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 80009dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	da03      	bge.n	80009ec <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 80009e4:	2105      	movs	r1, #5
 80009e6:	480c      	ldr	r0, [pc, #48]	; (8000a18 <printResetSource+0xdc>)
 80009e8:	f7ff fdda 	bl	80005a0 <uartTransmit>
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	080061ec 	.word	0x080061ec
 80009f8:	080061f4 	.word	0x080061f4
 80009fc:	08006204 	.word	0x08006204
 8000a00:	08006220 	.word	0x08006220
 8000a04:	08006238 	.word	0x08006238
 8000a08:	08006244 	.word	0x08006244
 8000a0c:	08006258 	.word	0x08006258
 8000a10:	08006268 	.word	0x08006268
 8000a14:	08006278 	.word	0x08006278
 8000a18:	08006284 	.word	0x08006284

08000a1c <ADC_Gaspedal>:
//----------------------------------------------------------------------

// Gaspedal einlesen
//----------------------------------------------------------------------
uint16_t ADC_Gaspedal(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_6;
 8000a32:	2306      	movs	r3, #6
 8000a34:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000a36:	2301      	movs	r3, #1
 8000a38:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	4619      	mov	r1, r3
 8000a42:	480e      	ldr	r0, [pc, #56]	; (8000a7c <ADC_Gaspedal+0x60>)
 8000a44:	f001 fdd6 	bl	80025f4 <HAL_ADC_ConfigChannel>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <ADC_Gaspedal+0x36>
	{
		Error_Handler();
 8000a4e:	f001 f9a7 	bl	8001da0 <Error_Handler>
	}

	// ADC Starten und Wert einlesen
	HAL_ADC_Start(&hadc1);
 8000a52:	480a      	ldr	r0, [pc, #40]	; (8000a7c <ADC_Gaspedal+0x60>)
 8000a54:	f001 fc34 	bl	80022c0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000a58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a5c:	4807      	ldr	r0, [pc, #28]	; (8000a7c <ADC_Gaspedal+0x60>)
 8000a5e:	f001 fd31 	bl	80024c4 <HAL_ADC_PollForConversion>
	ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000a62:	4806      	ldr	r0, [pc, #24]	; (8000a7c <ADC_Gaspedal+0x60>)
 8000a64:	f001 fdb9 	bl	80025da <HAL_ADC_GetValue>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	82fb      	strh	r3, [r7, #22]
	HAL_ADC_Stop(&hadc1);
 8000a6c:	4803      	ldr	r0, [pc, #12]	; (8000a7c <ADC_Gaspedal+0x60>)
 8000a6e:	f001 fcf5 	bl	800245c <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000a72:	8afb      	ldrh	r3, [r7, #22]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000058 	.word	0x20000058

08000a80 <ADC_Bremsdruck>:
//----------------------------------------------------------------------

// Bremsdruck einlesen
//----------------------------------------------------------------------
uint16_t ADC_Bremsdruck(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_14;
 8000a96:	230e      	movs	r3, #14
 8000a98:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	480e      	ldr	r0, [pc, #56]	; (8000ae0 <ADC_Bremsdruck+0x60>)
 8000aa8:	f001 fda4 	bl	80025f4 <HAL_ADC_ConfigChannel>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <ADC_Bremsdruck+0x36>
	{
		Error_Handler();
 8000ab2:	f001 f975 	bl	8001da0 <Error_Handler>
	}

	// ADC Starten und Wert einlesen
	HAL_ADC_Start(&hadc1);
 8000ab6:	480a      	ldr	r0, [pc, #40]	; (8000ae0 <ADC_Bremsdruck+0x60>)
 8000ab8:	f001 fc02 	bl	80022c0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000abc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ac0:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <ADC_Bremsdruck+0x60>)
 8000ac2:	f001 fcff 	bl	80024c4 <HAL_ADC_PollForConversion>
	ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000ac6:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <ADC_Bremsdruck+0x60>)
 8000ac8:	f001 fd87 	bl	80025da <HAL_ADC_GetValue>
 8000acc:	4603      	mov	r3, r0
 8000ace:	82fb      	strh	r3, [r7, #22]
	HAL_ADC_Stop(&hadc1);
 8000ad0:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <ADC_Bremsdruck+0x60>)
 8000ad2:	f001 fcc3 	bl	800245c <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000ad6:	8afb      	ldrh	r3, [r7, #22]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000058 	.word	0x20000058

08000ae4 <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (status == HAL_OK) {													// HAL OK
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d104      	bne.n	8000afe <hal_error+0x1a>
		uartTransmit("HAL OK\n", 7);
 8000af4:	2107      	movs	r1, #7
 8000af6:	480f      	ldr	r0, [pc, #60]	; (8000b34 <hal_error+0x50>)
 8000af8:	f7ff fd52 	bl	80005a0 <uartTransmit>
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 8000afc:	e016      	b.n	8000b2c <hal_error+0x48>
	else if (status == HAL_ERROR) {											// HAL Error
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d104      	bne.n	8000b0e <hal_error+0x2a>
		uartTransmit("HAL ERROR\n", 10);
 8000b04:	210a      	movs	r1, #10
 8000b06:	480c      	ldr	r0, [pc, #48]	; (8000b38 <hal_error+0x54>)
 8000b08:	f7ff fd4a 	bl	80005a0 <uartTransmit>
}
 8000b0c:	e00e      	b.n	8000b2c <hal_error+0x48>
	else if (status == HAL_BUSY) {											// HAL Beschaeftigt
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d104      	bne.n	8000b1e <hal_error+0x3a>
		uartTransmit("HAL BUSY\n", 9);
 8000b14:	2109      	movs	r1, #9
 8000b16:	4809      	ldr	r0, [pc, #36]	; (8000b3c <hal_error+0x58>)
 8000b18:	f7ff fd42 	bl	80005a0 <uartTransmit>
}
 8000b1c:	e006      	b.n	8000b2c <hal_error+0x48>
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2b03      	cmp	r3, #3
 8000b22:	d103      	bne.n	8000b2c <hal_error+0x48>
		uartTransmit("HAL TIMEOUT\n", 12);
 8000b24:	210c      	movs	r1, #12
 8000b26:	4806      	ldr	r0, [pc, #24]	; (8000b40 <hal_error+0x5c>)
 8000b28:	f7ff fd3a 	bl	80005a0 <uartTransmit>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	0800628c 	.word	0x0800628c
 8000b38:	08006294 	.word	0x08006294
 8000b3c:	080062a0 	.word	0x080062a0
 8000b40:	080062ac 	.word	0x080062ac

08000b44 <software_error>:
//----------------------------------------------------------------------

// Diagnose Funktion falls ein Fehler auftritt
//----------------------------------------------------------------------
void software_error(uint8_t errorcode)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4e:	b672      	cpsid	i
}
 8000b50:	bf00      	nop
	__disable_irq();														// Interrupts deaktivieren
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);		// Fehler LED einschalten
 8000b52:	2201      	movs	r2, #1
 8000b54:	2104      	movs	r1, #4
 8000b56:	4808      	ldr	r0, [pc, #32]	; (8000b78 <software_error+0x34>)
 8000b58:	f003 f8d4 	bl	8003d04 <HAL_GPIO_WritePin>

#ifdef DEBUG																// Serielle Kommunukation nur waehrend Debugging
#define SOFTERRORMESSAGE			"\nError Handler ausgeloest\n"			// Ausgabe das Fehler aufgetreten ist
	uartTransmit(SOFTERRORMESSAGE,sizeof(SOFTERRORMESSAGE));
 8000b5c:	211b      	movs	r1, #27
 8000b5e:	4807      	ldr	r0, [pc, #28]	; (8000b7c <software_error+0x38>)
 8000b60:	f7ff fd1e 	bl	80005a0 <uartTransmit>

#define ERRORCODE					"Error Code:\t"							// Ausgabe des Fehlers anhand von Fehlercode
	uartTransmit(ERRORCODE,sizeof(ERRORCODE));
 8000b64:	210d      	movs	r1, #13
 8000b66:	4806      	ldr	r0, [pc, #24]	; (8000b80 <software_error+0x3c>)
 8000b68:	f7ff fd1a 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(errorcode, 10);										// Fehlercode ausgeben
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	210a      	movs	r1, #10
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fd29 	bl	80005c8 <uartTransmitNumber>
#endif
	while (1)																// Endlosschleife
 8000b76:	e7fe      	b.n	8000b76 <software_error+0x32>
 8000b78:	40020400 	.word	0x40020400
 8000b7c:	080062bc 	.word	0x080062bc
 8000b80:	080062d8 	.word	0x080062d8

08000b84 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.Kickdown = HAL_GPIO_ReadPin(KICKDOWN_GPIO_Port, KICKDOWN_Pin);					// Eingang Gaspedal getreten
 8000b88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b8c:	48ce      	ldr	r0, [pc, #824]	; (8000ec8 <readall_inputs+0x344>)
 8000b8e:	f003 f8a1 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000b92:	4603      	mov	r3, r0
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	b2d9      	uxtb	r1, r3
 8000b9a:	4acc      	ldr	r2, [pc, #816]	; (8000ecc <readall_inputs+0x348>)
 8000b9c:	7813      	ldrb	r3, [r2, #0]
 8000b9e:	f361 0300 	bfi	r3, r1, #0, #1
 8000ba2:	7013      	strb	r3, [r2, #0]
	system_in.Leerlauf = HAL_GPIO_ReadPin(LEERLAUF_GPIO_Port, LEERLAUF_Pin);					// Eingang Gaspedal nicht getreten
 8000ba4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba8:	48c7      	ldr	r0, [pc, #796]	; (8000ec8 <readall_inputs+0x344>)
 8000baa:	f003 f893 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	b2d9      	uxtb	r1, r3
 8000bb6:	4ac5      	ldr	r2, [pc, #788]	; (8000ecc <readall_inputs+0x348>)
 8000bb8:	7813      	ldrb	r3, [r2, #0]
 8000bba:	f361 0341 	bfi	r3, r1, #1, #1
 8000bbe:	7013      	strb	r3, [r2, #0]
	system_in.BremseNO = HAL_GPIO_ReadPin(BREMSE_NO_GPIO_Port, BREMSE_NO_Pin);					// Eingang Bremse nicht getreten
 8000bc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bc4:	48c0      	ldr	r0, [pc, #768]	; (8000ec8 <readall_inputs+0x344>)
 8000bc6:	f003 f885 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	b2d9      	uxtb	r1, r3
 8000bd2:	4abe      	ldr	r2, [pc, #760]	; (8000ecc <readall_inputs+0x348>)
 8000bd4:	7813      	ldrb	r3, [r2, #0]
 8000bd6:	f361 0382 	bfi	r3, r1, #2, #1
 8000bda:	7013      	strb	r3, [r2, #0]
	system_in.BremseNC = HAL_GPIO_ReadPin(BREMSE_NC_GPIO_Port, BREMSE_NC_Pin);					// Eingang Bremse getreten
 8000bdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000be0:	48b9      	ldr	r0, [pc, #740]	; (8000ec8 <readall_inputs+0x344>)
 8000be2:	f003 f877 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000be6:	4603      	mov	r3, r0
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	b2d9      	uxtb	r1, r3
 8000bee:	4ab7      	ldr	r2, [pc, #732]	; (8000ecc <readall_inputs+0x348>)
 8000bf0:	7813      	ldrb	r3, [r2, #0]
 8000bf2:	f361 03c3 	bfi	r3, r1, #3, #1
 8000bf6:	7013      	strb	r3, [r2, #0]
	system_in.Kupplung = HAL_GPIO_ReadPin(KUPPLUNG_NO_GPIO_Port, KUPPLUNG_NO_Pin);				// Eingang Kupplung nicht getreten
 8000bf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bfc:	48b2      	ldr	r0, [pc, #712]	; (8000ec8 <readall_inputs+0x344>)
 8000bfe:	f003 f869 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000c02:	4603      	mov	r3, r0
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	b2d9      	uxtb	r1, r3
 8000c0a:	4ab0      	ldr	r2, [pc, #704]	; (8000ecc <readall_inputs+0x348>)
 8000c0c:	7813      	ldrb	r3, [r2, #0]
 8000c0e:	f361 1304 	bfi	r3, r1, #4, #1
 8000c12:	7013      	strb	r3, [r2, #0]
	system_in.Recuperation = HAL_GPIO_ReadPin(RECUPERATION_GPIO_Port, RECUPERATION_Pin);		// Eingang Recuperation
 8000c14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c18:	48ad      	ldr	r0, [pc, #692]	; (8000ed0 <readall_inputs+0x34c>)
 8000c1a:	f003 f85b 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	b2d9      	uxtb	r1, r3
 8000c26:	4aa9      	ldr	r2, [pc, #676]	; (8000ecc <readall_inputs+0x348>)
 8000c28:	7813      	ldrb	r3, [r2, #0]
 8000c2a:	f361 1345 	bfi	r3, r1, #5, #1
 8000c2e:	7013      	strb	r3, [r2, #0]
	system_in.ECON = HAL_GPIO_ReadPin(ECON_GPIO_Port, ECON_Pin);								// Eingang Klima
 8000c30:	2102      	movs	r1, #2
 8000c32:	48a7      	ldr	r0, [pc, #668]	; (8000ed0 <readall_inputs+0x34c>)
 8000c34:	f003 f84e 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	b2d9      	uxtb	r1, r3
 8000c40:	4aa2      	ldr	r2, [pc, #648]	; (8000ecc <readall_inputs+0x348>)
 8000c42:	7813      	ldrb	r3, [r2, #0]
 8000c44:	f361 1386 	bfi	r3, r1, #6, #1
 8000c48:	7013      	strb	r3, [r2, #0]
	system_in.Anlasser = HAL_GPIO_ReadPin(ANLASSER_GPIO_Port, ANLASSER_Pin);					// Eingang Zuendschloss, Motor starten
 8000c4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c4e:	48a1      	ldr	r0, [pc, #644]	; (8000ed4 <readall_inputs+0x350>)
 8000c50:	f003 f840 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000c54:	4603      	mov	r3, r0
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	b2d9      	uxtb	r1, r3
 8000c5c:	4a9b      	ldr	r2, [pc, #620]	; (8000ecc <readall_inputs+0x348>)
 8000c5e:	7813      	ldrb	r3, [r2, #0]
 8000c60:	f361 13c7 	bfi	r3, r1, #7, #1
 8000c64:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8000c66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c6a:	489b      	ldr	r0, [pc, #620]	; (8000ed8 <readall_inputs+0x354>)
 8000c6c:	f003 f832 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000c70:	4603      	mov	r3, r0
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	b2d9      	uxtb	r1, r3
 8000c78:	4a94      	ldr	r2, [pc, #592]	; (8000ecc <readall_inputs+0x348>)
 8000c7a:	7853      	ldrb	r3, [r2, #1]
 8000c7c:	f361 0300 	bfi	r3, r1, #0, #1
 8000c80:	7053      	strb	r3, [r2, #1]
	system_in.DCDC_Inst = HAL_GPIO_ReadPin(DCDC_INSTRUCTION_GPIO_Port, DCDC_INSTRUCTION_Pin);	// DCDC Wandler funktioniert einwandfrei
 8000c82:	2101      	movs	r1, #1
 8000c84:	4895      	ldr	r0, [pc, #596]	; (8000edc <readall_inputs+0x358>)
 8000c86:	f003 f825 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	b2d9      	uxtb	r1, r3
 8000c92:	4a8e      	ldr	r2, [pc, #568]	; (8000ecc <readall_inputs+0x348>)
 8000c94:	7853      	ldrb	r3, [r2, #1]
 8000c96:	f361 0341 	bfi	r3, r1, #1, #1
 8000c9a:	7053      	strb	r3, [r2, #1]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	488c      	ldr	r0, [pc, #560]	; (8000ed0 <readall_inputs+0x34c>)
 8000ca0:	f003 f818 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	b2d9      	uxtb	r1, r3
 8000cac:	4a87      	ldr	r2, [pc, #540]	; (8000ecc <readall_inputs+0x348>)
 8000cae:	7853      	ldrb	r3, [r2, #1]
 8000cb0:	f361 0382 	bfi	r3, r1, #2, #1
 8000cb4:	7053      	strb	r3, [r2, #1]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8000cb6:	2140      	movs	r1, #64	; 0x40
 8000cb8:	4883      	ldr	r0, [pc, #524]	; (8000ec8 <readall_inputs+0x344>)
 8000cba:	f003 f80b 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	b2d9      	uxtb	r1, r3
 8000cc6:	4a81      	ldr	r2, [pc, #516]	; (8000ecc <readall_inputs+0x348>)
 8000cc8:	7853      	ldrb	r3, [r2, #1]
 8000cca:	f361 03c3 	bfi	r3, r1, #3, #1
 8000cce:	7053      	strb	r3, [r2, #1]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	4883      	ldr	r0, [pc, #524]	; (8000ee0 <readall_inputs+0x35c>)
 8000cd4:	f002 fffe 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	b2d9      	uxtb	r1, r3
 8000ce0:	4a7a      	ldr	r2, [pc, #488]	; (8000ecc <readall_inputs+0x348>)
 8000ce2:	7853      	ldrb	r3, [r2, #1]
 8000ce4:	f361 1304 	bfi	r3, r1, #4, #1
 8000ce8:	7053      	strb	r3, [r2, #1]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8000cea:	2104      	movs	r1, #4
 8000cec:	487c      	ldr	r0, [pc, #496]	; (8000ee0 <readall_inputs+0x35c>)
 8000cee:	f002 fff1 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	b2d9      	uxtb	r1, r3
 8000cfa:	4a74      	ldr	r2, [pc, #464]	; (8000ecc <readall_inputs+0x348>)
 8000cfc:	7853      	ldrb	r3, [r2, #1]
 8000cfe:	f361 1345 	bfi	r3, r1, #5, #1
 8000d02:	7053      	strb	r3, [r2, #1]
//	system_in.Bremsdruck_NO = HAL_GPIO_ReadPin(Bremsdruck_NO_GPIO_Port, Bremsdruck_NO_Pin);		// Bremsdruck nicht zu hoch
//	system_in.Bremsdruck_NC = HAL_GPIO_ReadPin(Bremsdruck_NC_GPIO_Port, Bremsdruck_NC_Pin);		// Bremsdruck zu hoch

	// SDC-Eingaenge einlesen
	sdc_in.EmergencyRun = HAL_GPIO_ReadPin(EMERGENCY_RUN_GPIO_Port, EMERGENCY_RUN_Pin);			// Emergency Run, Akku
 8000d04:	2102      	movs	r1, #2
 8000d06:	4876      	ldr	r0, [pc, #472]	; (8000ee0 <readall_inputs+0x35c>)
 8000d08:	f002 ffe4 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	b2d9      	uxtb	r1, r3
 8000d14:	4a73      	ldr	r2, [pc, #460]	; (8000ee4 <readall_inputs+0x360>)
 8000d16:	7813      	ldrb	r3, [r2, #0]
 8000d18:	f361 0300 	bfi	r3, r1, #0, #1
 8000d1c:	7013      	strb	r3, [r2, #0]
	sdc_in.SDC0 = HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin);						// Shutdown-Circuit, OK
 8000d1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d22:	4869      	ldr	r0, [pc, #420]	; (8000ec8 <readall_inputs+0x344>)
 8000d24:	f002 ffd6 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	b2d9      	uxtb	r1, r3
 8000d30:	4a6c      	ldr	r2, [pc, #432]	; (8000ee4 <readall_inputs+0x360>)
 8000d32:	7813      	ldrb	r3, [r2, #0]
 8000d34:	f361 0341 	bfi	r3, r1, #1, #1
 8000d38:	7013      	strb	r3, [r2, #0]
	sdc_in.AkkuSDC = HAL_GPIO_ReadPin(SENSE_SDC_AKKU_GPIO_Port, SENSE_SDC_AKKU_Pin);			// Shutdown-Circuit Akku, OK
 8000d3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d3e:	4862      	ldr	r0, [pc, #392]	; (8000ec8 <readall_inputs+0x344>)
 8000d40:	f002 ffc8 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000d44:	4603      	mov	r3, r0
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	b2d9      	uxtb	r1, r3
 8000d4c:	4a65      	ldr	r2, [pc, #404]	; (8000ee4 <readall_inputs+0x360>)
 8000d4e:	7813      	ldrb	r3, [r2, #0]
 8000d50:	f361 0382 	bfi	r3, r1, #2, #1
 8000d54:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8000d56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d5a:	485e      	ldr	r0, [pc, #376]	; (8000ed4 <readall_inputs+0x350>)
 8000d5c:	f002 ffba 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000d60:	4603      	mov	r3, r0
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	b2d9      	uxtb	r1, r3
 8000d68:	4a5e      	ldr	r2, [pc, #376]	; (8000ee4 <readall_inputs+0x360>)
 8000d6a:	7813      	ldrb	r3, [r2, #0]
 8000d6c:	f361 03c3 	bfi	r3, r1, #3, #1
 8000d70:	7013      	strb	r3, [r2, #0]
	sdc_in.DCDC_Fault = HAL_GPIO_ReadPin(DCDC_FAULT_GPIO_Port, DCDC_FAULT_Pin);					// DCDC Wandler funktioniert nicht richtig
 8000d72:	2102      	movs	r1, #2
 8000d74:	4859      	ldr	r0, [pc, #356]	; (8000edc <readall_inputs+0x358>)
 8000d76:	f002 ffad 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	b2d9      	uxtb	r1, r3
 8000d82:	4a58      	ldr	r2, [pc, #352]	; (8000ee4 <readall_inputs+0x360>)
 8000d84:	7813      	ldrb	r3, [r2, #0]
 8000d86:	f361 1304 	bfi	r3, r1, #4, #1
 8000d8a:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.ASR1 = HAL_GPIO_ReadPin(ASR_IN1_GPIO_Port, ASR_IN1_Pin);							// ASR Eingang Mittelkonsole
 8000d8c:	2110      	movs	r1, #16
 8000d8e:	4853      	ldr	r0, [pc, #332]	; (8000edc <readall_inputs+0x358>)
 8000d90:	f002 ffa0 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000d94:	4603      	mov	r3, r0
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	b2d9      	uxtb	r1, r3
 8000d9c:	4a52      	ldr	r2, [pc, #328]	; (8000ee8 <readall_inputs+0x364>)
 8000d9e:	7813      	ldrb	r3, [r2, #0]
 8000da0:	f361 0300 	bfi	r3, r1, #0, #1
 8000da4:	7013      	strb	r3, [r2, #0]
	komfort_in.ASR2 = HAL_GPIO_ReadPin(ASR_IN2_GPIO_Port, ASR_IN2_Pin);							// ASR Eingang Mittelkonsole
 8000da6:	2110      	movs	r1, #16
 8000da8:	484b      	ldr	r0, [pc, #300]	; (8000ed8 <readall_inputs+0x354>)
 8000daa:	f002 ff93 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000dae:	4603      	mov	r3, r0
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	b2d9      	uxtb	r1, r3
 8000db6:	4a4c      	ldr	r2, [pc, #304]	; (8000ee8 <readall_inputs+0x364>)
 8000db8:	7813      	ldrb	r3, [r2, #0]
 8000dba:	f361 0341 	bfi	r3, r1, #1, #1
 8000dbe:	7013      	strb	r3, [r2, #0]
	komfort_in.ECO = HAL_GPIO_ReadPin(ECO_GPIO_Port, ECO_Pin);									// ECO Eingang Mittelkonsole
 8000dc0:	2108      	movs	r1, #8
 8000dc2:	4841      	ldr	r0, [pc, #260]	; (8000ec8 <readall_inputs+0x344>)
 8000dc4:	f002 ff86 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	b2d9      	uxtb	r1, r3
 8000dd0:	4a45      	ldr	r2, [pc, #276]	; (8000ee8 <readall_inputs+0x364>)
 8000dd2:	7813      	ldrb	r3, [r2, #0]
 8000dd4:	f361 0382 	bfi	r3, r1, #2, #1
 8000dd8:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Rst_In = HAL_GPIO_ReadPin(BC_RESET_IN_GPIO_Port, BC_RESET_IN_Pin);			// Boardcomputer Reset Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8000dda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dde:	483f      	ldr	r0, [pc, #252]	; (8000edc <readall_inputs+0x358>)
 8000de0:	f002 ff78 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000de4:	4603      	mov	r3, r0
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	b2d9      	uxtb	r1, r3
 8000dec:	4a3e      	ldr	r2, [pc, #248]	; (8000ee8 <readall_inputs+0x364>)
 8000dee:	7813      	ldrb	r3, [r2, #0]
 8000df0:	f361 03c3 	bfi	r3, r1, #3, #1
 8000df4:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Up_In = HAL_GPIO_ReadPin(BC_UP_IN_GPIO_Port, BC_UP_IN_Pin);					// Boardcomputer Rauf Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8000df6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dfa:	4839      	ldr	r0, [pc, #228]	; (8000ee0 <readall_inputs+0x35c>)
 8000dfc:	f002 ff6a 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000e00:	4603      	mov	r3, r0
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	b2d9      	uxtb	r1, r3
 8000e08:	4a37      	ldr	r2, [pc, #220]	; (8000ee8 <readall_inputs+0x364>)
 8000e0a:	7813      	ldrb	r3, [r2, #0]
 8000e0c:	f361 1304 	bfi	r3, r1, #4, #1
 8000e10:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Down_In = HAL_GPIO_ReadPin(BC_DOWN_IN_GPIO_Port, BC_DOWN_IN_Pin);				// Boardcomputer Runter Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8000e12:	2110      	movs	r1, #16
 8000e14:	482c      	ldr	r0, [pc, #176]	; (8000ec8 <readall_inputs+0x344>)
 8000e16:	f002 ff5d 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	b2d9      	uxtb	r1, r3
 8000e22:	4a31      	ldr	r2, [pc, #196]	; (8000ee8 <readall_inputs+0x364>)
 8000e24:	7813      	ldrb	r3, [r2, #0]
 8000e26:	f361 1345 	bfi	r3, r1, #5, #1
 8000e2a:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn1 = HAL_GPIO_ReadPin(BAMOCAR_IN1_GPIO_Port, BAMOCAR_IN1_Pin);				// Eingang Bamocar 1
 8000e2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e30:	4829      	ldr	r0, [pc, #164]	; (8000ed8 <readall_inputs+0x354>)
 8000e32:	f002 ff4f 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000e36:	4603      	mov	r3, r0
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	b2d9      	uxtb	r1, r3
 8000e3e:	4a2a      	ldr	r2, [pc, #168]	; (8000ee8 <readall_inputs+0x364>)
 8000e40:	7813      	ldrb	r3, [r2, #0]
 8000e42:	f361 1386 	bfi	r3, r1, #6, #1
 8000e46:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn2 = HAL_GPIO_ReadPin(BAMOCAR_IN2_GPIO_Port, BAMOCAR_IN2_Pin);				// Eingang Bamocar 2
 8000e48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e4c:	4822      	ldr	r0, [pc, #136]	; (8000ed8 <readall_inputs+0x354>)
 8000e4e:	f002 ff41 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000e52:	4603      	mov	r3, r0
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	b2d9      	uxtb	r1, r3
 8000e5a:	4a23      	ldr	r2, [pc, #140]	; (8000ee8 <readall_inputs+0x364>)
 8000e5c:	7813      	ldrb	r3, [r2, #0]
 8000e5e:	f361 13c7 	bfi	r3, r1, #7, #1
 8000e62:	7013      	strb	r3, [r2, #0]
	komfort_in.Enter = HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin);							// Encoder Taster Enter Eingang Mittelconsole
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	4821      	ldr	r0, [pc, #132]	; (8000eec <readall_inputs+0x368>)
 8000e68:	f002 ff34 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	b2d9      	uxtb	r1, r3
 8000e74:	4a1c      	ldr	r2, [pc, #112]	; (8000ee8 <readall_inputs+0x364>)
 8000e76:	7853      	ldrb	r3, [r2, #1]
 8000e78:	f361 0300 	bfi	r3, r1, #0, #1
 8000e7c:	7053      	strb	r3, [r2, #1]
	komfort_in.OutA = HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTA_Pin);								// Encoder OUTA Eingang Mittelconsole
 8000e7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e82:	4817      	ldr	r0, [pc, #92]	; (8000ee0 <readall_inputs+0x35c>)
 8000e84:	f002 ff26 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	b2d9      	uxtb	r1, r3
 8000e90:	4a15      	ldr	r2, [pc, #84]	; (8000ee8 <readall_inputs+0x364>)
 8000e92:	7853      	ldrb	r3, [r2, #1]
 8000e94:	f361 0341 	bfi	r3, r1, #1, #1
 8000e98:	7053      	strb	r3, [r2, #1]
	komfort_in.OutB = HAL_GPIO_ReadPin(OUTB_GPIO_Port, OUTB_Pin);								// Encoder OUTB Eingang Mittelconsole
 8000e9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e9e:	4810      	ldr	r0, [pc, #64]	; (8000ee0 <readall_inputs+0x35c>)
 8000ea0:	f002 ff18 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	b2d9      	uxtb	r1, r3
 8000eac:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <readall_inputs+0x364>)
 8000eae:	7853      	ldrb	r3, [r2, #1]
 8000eb0:	f361 0382 	bfi	r3, r1, #2, #1
 8000eb4:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA1 = HAL_GPIO_ReadPin(GRA1_GPIO_Port, GRA1_Pin);								// Tempomat 1 Eingang
 8000eb6:	2120      	movs	r1, #32
 8000eb8:	4808      	ldr	r0, [pc, #32]	; (8000edc <readall_inputs+0x358>)
 8000eba:	f002 ff0b 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	b2d9      	uxtb	r1, r3
 8000ec6:	e013      	b.n	8000ef0 <readall_inputs+0x36c>
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	2000003c 	.word	0x2000003c
 8000ed0:	40021400 	.word	0x40021400
 8000ed4:	40020400 	.word	0x40020400
 8000ed8:	40020c00 	.word	0x40020c00
 8000edc:	40021800 	.word	0x40021800
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	20000044 	.word	0x20000044
 8000ee8:	20000040 	.word	0x20000040
 8000eec:	40020800 	.word	0x40020800
 8000ef0:	4a1d      	ldr	r2, [pc, #116]	; (8000f68 <readall_inputs+0x3e4>)
 8000ef2:	7853      	ldrb	r3, [r2, #1]
 8000ef4:	f361 03c3 	bfi	r3, r1, #3, #1
 8000ef8:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA2 = HAL_GPIO_ReadPin(GRA2_GPIO_Port, GRA2_Pin);								// Tempomat 2 Eingang
 8000efa:	2140      	movs	r1, #64	; 0x40
 8000efc:	481b      	ldr	r0, [pc, #108]	; (8000f6c <readall_inputs+0x3e8>)
 8000efe:	f002 fee9 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000f02:	4603      	mov	r3, r0
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	b2d9      	uxtb	r1, r3
 8000f0a:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <readall_inputs+0x3e4>)
 8000f0c:	7853      	ldrb	r3, [r2, #1]
 8000f0e:	f361 1304 	bfi	r3, r1, #4, #1
 8000f12:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA3 = HAL_GPIO_ReadPin(GRA3_GPIO_Port, GRA3_Pin);								// Tempomat 3 Eingang
 8000f14:	2180      	movs	r1, #128	; 0x80
 8000f16:	4815      	ldr	r0, [pc, #84]	; (8000f6c <readall_inputs+0x3e8>)
 8000f18:	f002 fedc 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	b2d9      	uxtb	r1, r3
 8000f24:	4a10      	ldr	r2, [pc, #64]	; (8000f68 <readall_inputs+0x3e4>)
 8000f26:	7853      	ldrb	r3, [r2, #1]
 8000f28:	f361 1345 	bfi	r3, r1, #5, #1
 8000f2c:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA4 = HAL_GPIO_ReadPin(GRA4_GPIO_Port, GRA4_Pin);								// Tempomat 4 Eingang
 8000f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f32:	480e      	ldr	r0, [pc, #56]	; (8000f6c <readall_inputs+0x3e8>)
 8000f34:	f002 fece 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	b2d9      	uxtb	r1, r3
 8000f40:	4a09      	ldr	r2, [pc, #36]	; (8000f68 <readall_inputs+0x3e4>)
 8000f42:	7853      	ldrb	r3, [r2, #1]
 8000f44:	f361 1386 	bfi	r3, r1, #6, #1
 8000f48:	7053      	strb	r3, [r2, #1]
	komfort_in.Durchfluss = HAL_GPIO_ReadPin(DURCHFLUSS_GPIO_Port, DURCHFLUSS_Pin);				// Durchflusssensor Eingang
 8000f4a:	2120      	movs	r1, #32
 8000f4c:	4808      	ldr	r0, [pc, #32]	; (8000f70 <readall_inputs+0x3ec>)
 8000f4e:	f002 fec1 	bl	8003cd4 <HAL_GPIO_ReadPin>
 8000f52:	4603      	mov	r3, r0
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	b2d9      	uxtb	r1, r3
 8000f5a:	4a03      	ldr	r2, [pc, #12]	; (8000f68 <readall_inputs+0x3e4>)
 8000f5c:	7853      	ldrb	r3, [r2, #1]
 8000f5e:	f361 13c7 	bfi	r3, r1, #7, #1
 8000f62:	7053      	strb	r3, [r2, #1]
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000040 	.word	0x20000040
 8000f6c:	40021800 	.word	0x40021800
 8000f70:	40021000 	.word	0x40021000

08000f74 <millis>:
//----------------------------------------------------------------------
#include "millis.h"
//----------------------------------------------------------------------

uint32_t millis(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000f78:	f001 f8e6 	bl	8002148 <HAL_GetTick>
 8000f7c:	4603      	mov	r3, r0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <testPCB_Leds>:
}
//----------------------------------------------------------------------

// Teste Platinen LEDs
void testPCB_Leds(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2180      	movs	r1, #128	; 0x80
 8000f8c:	481b      	ldr	r0, [pc, #108]	; (8000ffc <testPCB_Leds+0x78>)
 8000f8e:	f002 feb9 	bl	8003d04 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000f92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f96:	f001 f8e3 	bl	8002160 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2180      	movs	r1, #128	; 0x80
 8000f9e:	4817      	ldr	r0, [pc, #92]	; (8000ffc <testPCB_Leds+0x78>)
 8000fa0:	f002 feb0 	bl	8003d04 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000fa4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fa8:	f001 f8da 	bl	8002160 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fb2:	4812      	ldr	r0, [pc, #72]	; (8000ffc <testPCB_Leds+0x78>)
 8000fb4:	f002 fea6 	bl	8003d04 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000fb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fbc:	f001 f8d0 	bl	8002160 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fc6:	480d      	ldr	r0, [pc, #52]	; (8000ffc <testPCB_Leds+0x78>)
 8000fc8:	f002 fe9c 	bl	8003d04 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000fcc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fd0:	f001 f8c6 	bl	8002160 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2104      	movs	r1, #4
 8000fd8:	4808      	ldr	r0, [pc, #32]	; (8000ffc <testPCB_Leds+0x78>)
 8000fda:	f002 fe93 	bl	8003d04 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000fde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fe2:	f001 f8bd 	bl	8002160 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2104      	movs	r1, #4
 8000fea:	4804      	ldr	r0, [pc, #16]	; (8000ffc <testPCB_Leds+0x78>)
 8000fec:	f002 fe8a 	bl	8003d04 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000ff0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ff4:	f001 f8b4 	bl	8002160 <HAL_Delay>
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40020400 	.word	0x40020400

08001000 <readTrottle>:
//----------------------------------------------------------------------

//
//----------------------------------------------------------------------
void readTrottle(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
	uint16_t ADC_Gas = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	80fb      	strh	r3, [r7, #6]
	if ((system_in.Kickdown == 1) && (system_in.Leerlauf != 1))
 800100a:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <readTrottle+0x78>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	d006      	beq.n	8001026 <readTrottle+0x26>
 8001018:	4b17      	ldr	r3, [pc, #92]	; (8001078 <readTrottle+0x78>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d024      	beq.n	8001070 <readTrottle+0x70>
	{

	}
	else if ((system_in.Kickdown != 1) && (system_in.Leerlauf == 1))
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <readTrottle+0x78>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b00      	cmp	r3, #0
 8001032:	d106      	bne.n	8001042 <readTrottle+0x42>
 8001034:	4b10      	ldr	r3, [pc, #64]	; (8001078 <readTrottle+0x78>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d116      	bne.n	8001070 <readTrottle+0x70>
	{

	}
	else if ((system_in.Kickdown != 1) && (system_in.Leerlauf != 1))
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <readTrottle+0x78>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	d10b      	bne.n	8001068 <readTrottle+0x68>
 8001050:	4b09      	ldr	r3, [pc, #36]	; (8001078 <readTrottle+0x78>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d104      	bne.n	8001068 <readTrottle+0x68>
	{
		// Gaspedal einlesen
		ADC_Gas = ADC_Gaspedal();
 800105e:	f7ff fcdd 	bl	8000a1c <ADC_Gaspedal>
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
 8001066:	e003      	b.n	8001070 <readTrottle+0x70>
	}
	else
	{
		// Gaspedal invalide
		software_error(ERROR_GASPEDAL);
 8001068:	2001      	movs	r0, #1
 800106a:	f7ff fd6b 	bl	8000b44 <software_error>
	}
}
 800106e:	bf00      	nop
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000003c 	.word	0x2000003c

0800107c <readBrake>:
//----------------------------------------------------------------------

//
//----------------------------------------------------------------------
void readBrake(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
	uint16_t ADC_Bremse = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	80fb      	strh	r3, [r7, #6]
	if ((system_in.BremseNO == 1) && (system_in.BremseNC != 1))
 8001086:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <readBrake+0x78>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d006      	beq.n	80010a2 <readBrake+0x26>
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <readBrake+0x78>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	f003 0308 	and.w	r3, r3, #8
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d024      	beq.n	80010ec <readBrake+0x70>
	{

	}
	else if ((system_in.BremseNO != 1) && (system_in.BremseNC == 1))
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <readBrake+0x78>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d106      	bne.n	80010be <readBrake+0x42>
 80010b0:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <readBrake+0x78>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	f003 0308 	and.w	r3, r3, #8
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d116      	bne.n	80010ec <readBrake+0x70>
	{

	}
	else if ((system_in.BremseNO != 1) && (system_in.BremseNC != 1))
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <readBrake+0x78>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10b      	bne.n	80010e4 <readBrake+0x68>
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <readBrake+0x78>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d104      	bne.n	80010e4 <readBrake+0x68>
	{
		// Bremsdruck einlesen
		ADC_Bremse = ADC_Bremsdruck();
 80010da:	f7ff fcd1 	bl	8000a80 <ADC_Bremsdruck>
 80010de:	4603      	mov	r3, r0
 80010e0:	80fb      	strh	r3, [r7, #6]
 80010e2:	e003      	b.n	80010ec <readBrake+0x70>
	}
	else
	{
		// Bremse invalide
		software_error(ERROR_BREMSPEDAL);
 80010e4:	2002      	movs	r0, #2
 80010e6:	f7ff fd2d 	bl	8000b44 <software_error>
	}
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	2000003c 	.word	0x2000003c

080010f8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010fe:	463b      	mov	r3, r7
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800110a:	4b64      	ldr	r3, [pc, #400]	; (800129c <MX_ADC1_Init+0x1a4>)
 800110c:	4a64      	ldr	r2, [pc, #400]	; (80012a0 <MX_ADC1_Init+0x1a8>)
 800110e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001110:	4b62      	ldr	r3, [pc, #392]	; (800129c <MX_ADC1_Init+0x1a4>)
 8001112:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001116:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001118:	4b60      	ldr	r3, [pc, #384]	; (800129c <MX_ADC1_Init+0x1a4>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800111e:	4b5f      	ldr	r3, [pc, #380]	; (800129c <MX_ADC1_Init+0x1a4>)
 8001120:	2201      	movs	r2, #1
 8001122:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001124:	4b5d      	ldr	r3, [pc, #372]	; (800129c <MX_ADC1_Init+0x1a4>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800112a:	4b5c      	ldr	r3, [pc, #368]	; (800129c <MX_ADC1_Init+0x1a4>)
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001132:	4b5a      	ldr	r3, [pc, #360]	; (800129c <MX_ADC1_Init+0x1a4>)
 8001134:	2200      	movs	r2, #0
 8001136:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001138:	4b58      	ldr	r3, [pc, #352]	; (800129c <MX_ADC1_Init+0x1a4>)
 800113a:	4a5a      	ldr	r2, [pc, #360]	; (80012a4 <MX_ADC1_Init+0x1ac>)
 800113c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800113e:	4b57      	ldr	r3, [pc, #348]	; (800129c <MX_ADC1_Init+0x1a4>)
 8001140:	2200      	movs	r2, #0
 8001142:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 8001144:	4b55      	ldr	r3, [pc, #340]	; (800129c <MX_ADC1_Init+0x1a4>)
 8001146:	220a      	movs	r2, #10
 8001148:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800114a:	4b54      	ldr	r3, [pc, #336]	; (800129c <MX_ADC1_Init+0x1a4>)
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001152:	4b52      	ldr	r3, [pc, #328]	; (800129c <MX_ADC1_Init+0x1a4>)
 8001154:	2201      	movs	r2, #1
 8001156:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001158:	4850      	ldr	r0, [pc, #320]	; (800129c <MX_ADC1_Init+0x1a4>)
 800115a:	f001 f86d 	bl	8002238 <HAL_ADC_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001164:	f000 fe1c 	bl	8001da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001168:	230e      	movs	r3, #14
 800116a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800116c:	2301      	movs	r3, #1
 800116e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001170:	2301      	movs	r3, #1
 8001172:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001174:	463b      	mov	r3, r7
 8001176:	4619      	mov	r1, r3
 8001178:	4848      	ldr	r0, [pc, #288]	; (800129c <MX_ADC1_Init+0x1a4>)
 800117a:	f001 fa3b 	bl	80025f4 <HAL_ADC_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001184:	f000 fe0c 	bl	8001da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001188:	2306      	movs	r3, #6
 800118a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800118c:	2302      	movs	r3, #2
 800118e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001190:	463b      	mov	r3, r7
 8001192:	4619      	mov	r1, r3
 8001194:	4841      	ldr	r0, [pc, #260]	; (800129c <MX_ADC1_Init+0x1a4>)
 8001196:	f001 fa2d 	bl	80025f4 <HAL_ADC_ConfigChannel>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80011a0:	f000 fdfe 	bl	8001da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011a4:	2304      	movs	r3, #4
 80011a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011a8:	2303      	movs	r3, #3
 80011aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80011ac:	2302      	movs	r3, #2
 80011ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b0:	463b      	mov	r3, r7
 80011b2:	4619      	mov	r1, r3
 80011b4:	4839      	ldr	r0, [pc, #228]	; (800129c <MX_ADC1_Init+0x1a4>)
 80011b6:	f001 fa1d 	bl	80025f4 <HAL_ADC_ConfigChannel>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80011c0:	f000 fdee 	bl	8001da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011c4:	2305      	movs	r3, #5
 80011c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80011c8:	2304      	movs	r3, #4
 80011ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011cc:	463b      	mov	r3, r7
 80011ce:	4619      	mov	r1, r3
 80011d0:	4832      	ldr	r0, [pc, #200]	; (800129c <MX_ADC1_Init+0x1a4>)
 80011d2:	f001 fa0f 	bl	80025f4 <HAL_ADC_ConfigChannel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80011dc:	f000 fde0 	bl	8001da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80011e0:	230f      	movs	r3, #15
 80011e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80011e4:	2305      	movs	r3, #5
 80011e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80011e8:	2301      	movs	r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ec:	463b      	mov	r3, r7
 80011ee:	4619      	mov	r1, r3
 80011f0:	482a      	ldr	r0, [pc, #168]	; (800129c <MX_ADC1_Init+0x1a4>)
 80011f2:	f001 f9ff 	bl	80025f4 <HAL_ADC_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80011fc:	f000 fdd0 	bl	8001da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001200:	2303      	movs	r3, #3
 8001202:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001204:	2306      	movs	r3, #6
 8001206:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001208:	2303      	movs	r3, #3
 800120a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120c:	463b      	mov	r3, r7
 800120e:	4619      	mov	r1, r3
 8001210:	4822      	ldr	r0, [pc, #136]	; (800129c <MX_ADC1_Init+0x1a4>)
 8001212:	f001 f9ef 	bl	80025f4 <HAL_ADC_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 800121c:	f000 fdc0 	bl	8001da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001220:	2307      	movs	r3, #7
 8001222:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001224:	2307      	movs	r3, #7
 8001226:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001228:	463b      	mov	r3, r7
 800122a:	4619      	mov	r1, r3
 800122c:	481b      	ldr	r0, [pc, #108]	; (800129c <MX_ADC1_Init+0x1a4>)
 800122e:	f001 f9e1 	bl	80025f4 <HAL_ADC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 8001238:	f000 fdb2 	bl	8001da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800123c:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <MX_ADC1_Init+0x1b0>)
 800123e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001240:	2308      	movs	r3, #8
 8001242:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001244:	463b      	mov	r3, r7
 8001246:	4619      	mov	r1, r3
 8001248:	4814      	ldr	r0, [pc, #80]	; (800129c <MX_ADC1_Init+0x1a4>)
 800124a:	f001 f9d3 	bl	80025f4 <HAL_ADC_ConfigChannel>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 8001254:	f000 fda4 	bl	8001da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001258:	2308      	movs	r3, #8
 800125a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800125c:	2309      	movs	r3, #9
 800125e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001260:	2301      	movs	r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	4619      	mov	r1, r3
 8001268:	480c      	ldr	r0, [pc, #48]	; (800129c <MX_ADC1_Init+0x1a4>)
 800126a:	f001 f9c3 	bl	80025f4 <HAL_ADC_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_ADC1_Init+0x180>
  {
    Error_Handler();
 8001274:	f000 fd94 	bl	8001da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001278:	2309      	movs	r3, #9
 800127a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800127c:	230a      	movs	r3, #10
 800127e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001280:	463b      	mov	r3, r7
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_ADC1_Init+0x1a4>)
 8001286:	f001 f9b5 	bl	80025f4 <HAL_ADC_ConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_ADC1_Init+0x19c>
  {
    Error_Handler();
 8001290:	f000 fd86 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000058 	.word	0x20000058
 80012a0:	40012000 	.word	0x40012000
 80012a4:	0f000001 	.word	0x0f000001
 80012a8:	10000012 	.word	0x10000012

080012ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08c      	sub	sp, #48	; 0x30
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 031c 	add.w	r3, r7, #28
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a2d      	ldr	r2, [pc, #180]	; (8001380 <HAL_ADC_MspInit+0xd4>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d153      	bne.n	8001376 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ce:	4b2d      	ldr	r3, [pc, #180]	; (8001384 <HAL_ADC_MspInit+0xd8>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	4a2c      	ldr	r2, [pc, #176]	; (8001384 <HAL_ADC_MspInit+0xd8>)
 80012d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d8:	6453      	str	r3, [r2, #68]	; 0x44
 80012da:	4b2a      	ldr	r3, [pc, #168]	; (8001384 <HAL_ADC_MspInit+0xd8>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e2:	61bb      	str	r3, [r7, #24]
 80012e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	4b27      	ldr	r3, [pc, #156]	; (8001384 <HAL_ADC_MspInit+0xd8>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a26      	ldr	r2, [pc, #152]	; (8001384 <HAL_ADC_MspInit+0xd8>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b24      	ldr	r3, [pc, #144]	; (8001384 <HAL_ADC_MspInit+0xd8>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fe:	4b21      	ldr	r3, [pc, #132]	; (8001384 <HAL_ADC_MspInit+0xd8>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a20      	ldr	r2, [pc, #128]	; (8001384 <HAL_ADC_MspInit+0xd8>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <HAL_ADC_MspInit+0xd8>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <HAL_ADC_MspInit+0xd8>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a1a      	ldr	r2, [pc, #104]	; (8001384 <HAL_ADC_MspInit+0xd8>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <HAL_ADC_MspInit+0xd8>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SENSE_KL15_Pin|SENSE_KUEHLWASSER_Pin|SENSE_KLIMA_FLAP_Pin|SENSE_GAS_Pin
 800132e:	23f8      	movs	r3, #248	; 0xf8
 8001330:	61fb      	str	r3, [r7, #28]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001332:	2303      	movs	r3, #3
 8001334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	4811      	ldr	r0, [pc, #68]	; (8001388 <HAL_ADC_MspInit+0xdc>)
 8001342:	f002 fb1b 	bl	800397c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_DRUCK_Pin|SENSE_DRUCK_TEMP_Pin;
 8001346:	2330      	movs	r3, #48	; 0x30
 8001348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134a:	2303      	movs	r3, #3
 800134c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	4619      	mov	r1, r3
 8001358:	480c      	ldr	r0, [pc, #48]	; (800138c <HAL_ADC_MspInit+0xe0>)
 800135a:	f002 fb0f 	bl	800397c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_RETURN_Pin|SENSE_INFO_Pin;
 800135e:	2303      	movs	r3, #3
 8001360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001362:	2303      	movs	r3, #3
 8001364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	4807      	ldr	r0, [pc, #28]	; (8001390 <HAL_ADC_MspInit+0xe4>)
 8001372:	f002 fb03 	bl	800397c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001376:	bf00      	nop
 8001378:	3730      	adds	r7, #48	; 0x30
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40012000 	.word	0x40012000
 8001384:	40023800 	.word	0x40023800
 8001388:	40020000 	.word	0x40020000
 800138c:	40020800 	.word	0x40020800
 8001390:	40020400 	.word	0x40020400

08001394 <MX_CAN3_Init>:

CAN_HandleTypeDef hcan3;

/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <MX_CAN3_Init+0x64>)
 800139a:	4a18      	ldr	r2, [pc, #96]	; (80013fc <MX_CAN3_Init+0x68>)
 800139c:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 800139e:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <MX_CAN3_Init+0x64>)
 80013a0:	2206      	movs	r2, #6
 80013a2:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <MX_CAN3_Init+0x64>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <MX_CAN3_Init+0x64>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_CAN3_Init+0x64>)
 80013b2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80013b6:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <MX_CAN3_Init+0x64>)
 80013ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80013be:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 80013c0:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <MX_CAN3_Init+0x64>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <MX_CAN3_Init+0x64>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <MX_CAN3_Init+0x64>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <MX_CAN3_Init+0x64>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 80013d8:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <MX_CAN3_Init+0x64>)
 80013da:	2200      	movs	r2, #0
 80013dc:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <MX_CAN3_Init+0x64>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 80013e4:	4804      	ldr	r0, [pc, #16]	; (80013f8 <MX_CAN3_Init+0x64>)
 80013e6:	f001 fb49 	bl	8002a7c <HAL_CAN_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 80013f0:	f000 fcd6 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200000a0 	.word	0x200000a0
 80013fc:	40003400 	.word	0x40003400

08001400 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08c      	sub	sp, #48	; 0x30
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN3)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a27      	ldr	r2, [pc, #156]	; (80014bc <HAL_CAN_MspInit+0xbc>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d148      	bne.n	80014b4 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN3_MspInit 0 */

  /* USER CODE END CAN3_MspInit 0 */
    /* CAN3 clock enable */
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001422:	4b27      	ldr	r3, [pc, #156]	; (80014c0 <HAL_CAN_MspInit+0xc0>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a26      	ldr	r2, [pc, #152]	; (80014c0 <HAL_CAN_MspInit+0xc0>)
 8001428:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
 800142e:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <HAL_CAN_MspInit+0xc0>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001436:	61bb      	str	r3, [r7, #24]
 8001438:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 800143a:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <HAL_CAN_MspInit+0xc0>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	4a20      	ldr	r2, [pc, #128]	; (80014c0 <HAL_CAN_MspInit+0xc0>)
 8001440:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001444:	6413      	str	r3, [r2, #64]	; 0x40
 8001446:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <HAL_CAN_MspInit+0xc0>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001452:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <HAL_CAN_MspInit+0xc0>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a1a      	ldr	r2, [pc, #104]	; (80014c0 <HAL_CAN_MspInit+0xc0>)
 8001458:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <HAL_CAN_MspInit+0xc0>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <HAL_CAN_MspInit+0xc0>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <HAL_CAN_MspInit+0xc0>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_CAN_MspInit+0xc0>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /**CAN3 GPIO Configuration
    PA8     ------> CAN3_RX
    PA15     ------> CAN3_TX
    */
    GPIO_InitStruct.Pin = ACAN_RX_Pin|ACAN_TX_Pin;
 8001482:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001494:	230b      	movs	r3, #11
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	4619      	mov	r1, r3
 800149e:	4809      	ldr	r0, [pc, #36]	; (80014c4 <HAL_CAN_MspInit+0xc4>)
 80014a0:	f002 fa6c 	bl	800397c <HAL_GPIO_Init>

    /* CAN3 interrupt Init */
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2100      	movs	r1, #0
 80014a8:	2069      	movs	r0, #105	; 0x69
 80014aa:	f002 fa30 	bl	800390e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 80014ae:	2069      	movs	r0, #105	; 0x69
 80014b0:	f002 fa49 	bl	8003946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 80014b4:	bf00      	nop
 80014b6:	3730      	adds	r7, #48	; 0x30
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40003400 	.word	0x40003400
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020000 	.word	0x40020000

080014c8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08e      	sub	sp, #56	; 0x38
 80014cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014de:	4bb6      	ldr	r3, [pc, #728]	; (80017b8 <MX_GPIO_Init+0x2f0>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4ab5      	ldr	r2, [pc, #724]	; (80017b8 <MX_GPIO_Init+0x2f0>)
 80014e4:	f043 0310 	orr.w	r3, r3, #16
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4bb3      	ldr	r3, [pc, #716]	; (80017b8 <MX_GPIO_Init+0x2f0>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0310 	and.w	r3, r3, #16
 80014f2:	623b      	str	r3, [r7, #32]
 80014f4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f6:	4bb0      	ldr	r3, [pc, #704]	; (80017b8 <MX_GPIO_Init+0x2f0>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4aaf      	ldr	r2, [pc, #700]	; (80017b8 <MX_GPIO_Init+0x2f0>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4bad      	ldr	r3, [pc, #692]	; (80017b8 <MX_GPIO_Init+0x2f0>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800150e:	4baa      	ldr	r3, [pc, #680]	; (80017b8 <MX_GPIO_Init+0x2f0>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4aa9      	ldr	r2, [pc, #676]	; (80017b8 <MX_GPIO_Init+0x2f0>)
 8001514:	f043 0320 	orr.w	r3, r3, #32
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4ba7      	ldr	r3, [pc, #668]	; (80017b8 <MX_GPIO_Init+0x2f0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0320 	and.w	r3, r3, #32
 8001522:	61bb      	str	r3, [r7, #24]
 8001524:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001526:	4ba4      	ldr	r3, [pc, #656]	; (80017b8 <MX_GPIO_Init+0x2f0>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4aa3      	ldr	r2, [pc, #652]	; (80017b8 <MX_GPIO_Init+0x2f0>)
 800152c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4ba1      	ldr	r3, [pc, #644]	; (80017b8 <MX_GPIO_Init+0x2f0>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	4b9e      	ldr	r3, [pc, #632]	; (80017b8 <MX_GPIO_Init+0x2f0>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a9d      	ldr	r2, [pc, #628]	; (80017b8 <MX_GPIO_Init+0x2f0>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b9b      	ldr	r3, [pc, #620]	; (80017b8 <MX_GPIO_Init+0x2f0>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	4b98      	ldr	r3, [pc, #608]	; (80017b8 <MX_GPIO_Init+0x2f0>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a97      	ldr	r2, [pc, #604]	; (80017b8 <MX_GPIO_Init+0x2f0>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b95      	ldr	r3, [pc, #596]	; (80017b8 <MX_GPIO_Init+0x2f0>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800156e:	4b92      	ldr	r3, [pc, #584]	; (80017b8 <MX_GPIO_Init+0x2f0>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a91      	ldr	r2, [pc, #580]	; (80017b8 <MX_GPIO_Init+0x2f0>)
 8001574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b8f      	ldr	r3, [pc, #572]	; (80017b8 <MX_GPIO_Init+0x2f0>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001586:	4b8c      	ldr	r3, [pc, #560]	; (80017b8 <MX_GPIO_Init+0x2f0>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a8b      	ldr	r2, [pc, #556]	; (80017b8 <MX_GPIO_Init+0x2f0>)
 800158c:	f043 0308 	orr.w	r3, r3, #8
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b89      	ldr	r3, [pc, #548]	; (80017b8 <MX_GPIO_Init+0x2f0>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 800159e:	2200      	movs	r2, #0
 80015a0:	f248 0187 	movw	r1, #32903	; 0x8087
 80015a4:	4885      	ldr	r0, [pc, #532]	; (80017bc <MX_GPIO_Init+0x2f4>)
 80015a6:	f002 fbad 	bl	8003d04 <HAL_GPIO_WritePin>
                          |DIGITAL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_ON_Pin|WS2812_Pin, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	f242 0108 	movw	r1, #8200	; 0x2008
 80015b0:	4883      	ldr	r0, [pc, #524]	; (80017c0 <MX_GPIO_Init+0x2f8>)
 80015b2:	f002 fba7 	bl	8003d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 80015b6:	2200      	movs	r2, #0
 80015b8:	f24f 013c 	movw	r1, #61500	; 0xf03c
 80015bc:	4881      	ldr	r0, [pc, #516]	; (80017c4 <MX_GPIO_Init+0x2fc>)
 80015be:	f002 fba1 	bl	8003d04 <HAL_GPIO_WritePin>
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 80015c2:	2200      	movs	r2, #0
 80015c4:	f647 0194 	movw	r1, #30868	; 0x7894
 80015c8:	487f      	ldr	r0, [pc, #508]	; (80017c8 <MX_GPIO_Init+0x300>)
 80015ca:	f002 fb9b 	bl	8003d04 <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 80015ce:	2200      	movs	r2, #0
 80015d0:	f64e 2188 	movw	r1, #60040	; 0xea88
 80015d4:	487d      	ldr	r0, [pc, #500]	; (80017cc <MX_GPIO_Init+0x304>)
 80015d6:	f002 fb95 	bl	8003d04 <HAL_GPIO_WritePin>
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 80015da:	2200      	movs	r2, #0
 80015dc:	f64e 610c 	movw	r1, #60940	; 0xee0c
 80015e0:	487b      	ldr	r0, [pc, #492]	; (80017d0 <MX_GPIO_Init+0x308>)
 80015e2:	f002 fb8f 	bl	8003d04 <HAL_GPIO_WritePin>
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ec:	4879      	ldr	r0, [pc, #484]	; (80017d4 <MX_GPIO_Init+0x30c>)
 80015ee:	f002 fb89 	bl	8003d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 80015f2:	f248 0387 	movw	r3, #32903	; 0x8087
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
                          |DIGITAL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001608:	4619      	mov	r1, r3
 800160a:	486c      	ldr	r0, [pc, #432]	; (80017bc <MX_GPIO_Init+0x2f4>)
 800160c:	f002 f9b6 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ECO_Pin|BC_DOWN_IN_Pin|DURCHFLUSS_Pin|BUTTON2_Pin
 8001610:	f647 7378 	movw	r3, #32632	; 0x7f78
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
                          |KICKDOWN_Pin|LEERLAUF_Pin|KUPPLUNG_NO_Pin|BREMSE_NC_Pin
                          |BREMSE_NO_Pin|SENSE_SDC_AKKU_Pin|SENSE_SDC_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001616:	2300      	movs	r3, #0
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800161e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001622:	4619      	mov	r1, r3
 8001624:	4865      	ldr	r0, [pc, #404]	; (80017bc <MX_GPIO_Init+0x2f4>)
 8001626:	f002 f9a9 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 800162a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	2301      	movs	r3, #1
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001640:	4619      	mov	r1, r3
 8001642:	485f      	ldr	r0, [pc, #380]	; (80017c0 <MX_GPIO_Init+0x2f8>)
 8001644:	f002 f99a 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001648:	f64d 7347 	movw	r3, #57159	; 0xdf47
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|SD_SW_Pin|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800164e:	2303      	movs	r3, #3
 8001650:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165a:	4619      	mov	r1, r3
 800165c:	4858      	ldr	r0, [pc, #352]	; (80017c0 <MX_GPIO_Init+0x2f8>)
 800165e:	f002 f98d 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|ECON_Pin|RECUPERATION_Pin;
 8001662:	f640 0303 	movw	r3, #2051	; 0x803
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001668:	2300      	movs	r3, #0
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001674:	4619      	mov	r1, r3
 8001676:	4853      	ldr	r0, [pc, #332]	; (80017c4 <MX_GPIO_Init+0x2fc>)
 8001678:	f002 f980 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 800167c:	f24f 033c 	movw	r3, #61500	; 0xf03c
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001682:	2301      	movs	r3, #1
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800168e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001692:	4619      	mov	r1, r3
 8001694:	484b      	ldr	r0, [pc, #300]	; (80017c4 <MX_GPIO_Init+0x2fc>)
 8001696:	f002 f971 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PF10 */
  GPIO_InitStruct.Pin = SPI5_CS_Pin|SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin
 800169a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a0:	2303      	movs	r3, #3
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ac:	4619      	mov	r1, r3
 80016ae:	4845      	ldr	r0, [pc, #276]	; (80017c4 <MX_GPIO_Init+0x2fc>)
 80016b0:	f002 f964 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS2812_Pin;
 80016b4:	2308      	movs	r3, #8
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b8:	2301      	movs	r3, #1
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c0:	2302      	movs	r3, #2
 80016c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 80016c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c8:	4619      	mov	r1, r3
 80016ca:	483d      	ldr	r0, [pc, #244]	; (80017c0 <MX_GPIO_Init+0x2f8>)
 80016cc:	f002 f956 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|EMERGENCY_RUN_Pin|HW_WAKE_Pin|OUTA_Pin
 80016d0:	f640 6307 	movw	r3, #3591	; 0xe07
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTB_Pin|BC_UP_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e2:	4619      	mov	r1, r3
 80016e4:	483b      	ldr	r0, [pc, #236]	; (80017d4 <MX_GPIO_Init+0x30c>)
 80016e6:	f002 f949 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 80016ea:	f647 0394 	movw	r3, #30868	; 0x7894
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001700:	4619      	mov	r1, r3
 8001702:	4831      	ldr	r0, [pc, #196]	; (80017c8 <MX_GPIO_Init+0x300>)
 8001704:	f002 f93a 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DCDC_INSTRUCTION_Pin|DCDC_FAULT_Pin|ASR_IN1_Pin|GRA1_Pin
 8001708:	f241 13f3 	movw	r3, #4595	; 0x11f3
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GRA2_Pin|GRA3_Pin|GRA4_Pin|BC_RESET_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170e:	2300      	movs	r3, #0
 8001710:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171a:	4619      	mov	r1, r3
 800171c:	482c      	ldr	r0, [pc, #176]	; (80017d0 <MX_GPIO_Init+0x308>)
 800171e:	f002 f92d 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSE_SDC_BTB_Pin|ANLASSER_Pin;
 8001722:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001728:	2300      	movs	r3, #0
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001734:	4619      	mov	r1, r3
 8001736:	4824      	ldr	r0, [pc, #144]	; (80017c8 <MX_GPIO_Init+0x300>)
 8001738:	f002 f920 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KL15_Pin|BAMOCAR_IN2_Pin|BAMOCAR_IN1_Pin|ASR_IN2_Pin;
 800173c:	f241 5310 	movw	r3, #5392	; 0x1510
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001742:	2300      	movs	r3, #0
 8001744:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800174a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174e:	4619      	mov	r1, r3
 8001750:	481e      	ldr	r0, [pc, #120]	; (80017cc <MX_GPIO_Init+0x304>)
 8001752:	f002 f913 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 8001756:	f64e 2388 	movw	r3, #60040	; 0xea88
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175c:	2301      	movs	r3, #1
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001764:	2300      	movs	r3, #0
 8001766:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176c:	4619      	mov	r1, r3
 800176e:	4817      	ldr	r0, [pc, #92]	; (80017cc <MX_GPIO_Init+0x304>)
 8001770:	f002 f904 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 8001774:	f64e 630c 	movw	r3, #60940	; 0xee0c
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177a:	2301      	movs	r3, #1
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178a:	4619      	mov	r1, r3
 800178c:	4810      	ldr	r0, [pc, #64]	; (80017d0 <MX_GPIO_Init+0x308>)
 800178e:	f002 f8f5 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 8001792:	2380      	movs	r3, #128	; 0x80
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001796:	2300      	movs	r3, #0
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 800179e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a2:	4619      	mov	r1, r3
 80017a4:	4806      	ldr	r0, [pc, #24]	; (80017c0 <MX_GPIO_Init+0x2f8>)
 80017a6:	f002 f8e9 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RUECKWARNUNG_Pin;
 80017aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b0:	2301      	movs	r3, #1
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	e00f      	b.n	80017d8 <MX_GPIO_Init+0x310>
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40020800 	.word	0x40020800
 80017c4:	40021400 	.word	0x40021400
 80017c8:	40020400 	.word	0x40020400
 80017cc:	40020c00 	.word	0x40020c00
 80017d0:	40021800 	.word	0x40021800
 80017d4:	40020000 	.word	0x40020000
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RUECKWARNUNG_GPIO_Port, &GPIO_InitStruct);
 80017de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e2:	4619      	mov	r1, r3
 80017e4:	480f      	ldr	r0, [pc, #60]	; (8001824 <MX_GPIO_Init+0x35c>)
 80017e6:	f002 f8c9 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_TX_Pin|CAN1_RX_Pin|SD_CMD_Pin;
 80017ea:	2307      	movs	r3, #7
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ee:	2303      	movs	r3, #3
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fa:	4619      	mov	r1, r3
 80017fc:	480a      	ldr	r0, [pc, #40]	; (8001828 <MX_GPIO_Init+0x360>)
 80017fe:	f002 f8bd 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CAN2_TX_Pin|CAN2_RX_Pin|I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001802:	f44f 7358 	mov.w	r3, #864	; 0x360
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001808:	2303      	movs	r3, #3
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001814:	4619      	mov	r1, r3
 8001816:	4805      	ldr	r0, [pc, #20]	; (800182c <MX_GPIO_Init+0x364>)
 8001818:	f002 f8b0 	bl	800397c <HAL_GPIO_Init>

}
 800181c:	bf00      	nop
 800181e:	3738      	adds	r7, #56	; 0x38
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40020000 	.word	0x40020000
 8001828:	40020c00 	.word	0x40020c00
 800182c:	40020400 	.word	0x40020400

08001830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	b0ac      	sub	sp, #176	; 0xb0
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001836:	f000 fc36 	bl	80020a6 <HAL_Init>

  /* USER CODE BEGIN Init */

	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[5], InData[5], status;
	uint16_t count = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
  	uint32_t lastcan = 0, lastsendcan = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001846:	2300      	movs	r3, #0
 8001848:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  	CAN_FilterTypeDef sFilterConfig;

  	// Erstelle Can-Nachrichten
  	CAN_TxHeaderTypeDef TxMessage = {0x123, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 800184c:	4bbc      	ldr	r3, [pc, #752]	; (8001b40 <main+0x310>)
 800184e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001852:	461d      	mov	r5, r3
 8001854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001858:	e895 0003 	ldmia.w	r5, {r0, r1}
 800185c:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxOutput = {MOTOR_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 5, DISABLE};
 8001860:	4bb8      	ldr	r3, [pc, #736]	; (8001b44 <main+0x314>)
 8001862:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001866:	461d      	mov	r5, r3
 8001868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800186a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800186c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001870:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxInput = {MOTOR_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 5, DISABLE};
 8001874:	4bb4      	ldr	r3, [pc, #720]	; (8001b48 <main+0x318>)
 8001876:	f107 0418 	add.w	r4, r7, #24
 800187a:	461d      	mov	r5, r3
 800187c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001880:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001884:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxMotor1 = {MOTOR_CAN_DREHZAHL, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8001888:	4bb0      	ldr	r3, [pc, #704]	; (8001b4c <main+0x31c>)
 800188a:	463c      	mov	r4, r7
 800188c:	461d      	mov	r5, r3
 800188e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001890:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001892:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001896:	e884 0003 	stmia.w	r4, {r0, r1}

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800189a:	f000 f9bf 	bl	8001c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800189e:	f7ff fe13 	bl	80014c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018a2:	f000 fb63 	bl	8001f6c <MX_USART2_UART_Init>
  MX_CAN3_Init();
 80018a6:	f7ff fd75 	bl	8001394 <MX_CAN3_Init>
  MX_ADC1_Init();
 80018aa:	f7ff fc25 	bl	80010f8 <MX_ADC1_Init>
  MX_TIM6_Init();
 80018ae:	f000 fb01 	bl	8001eb4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 80018b2:	f7fe fff1 	bl	8000898 <readResetSource>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff f83f 	bl	800093c <printResetSource>

  	/* Teste serielle Schnittstelle*/
  	#define TEST_STRING_UART	"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
  	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 80018be:	213a      	movs	r1, #58	; 0x3a
 80018c0:	48a3      	ldr	r0, [pc, #652]	; (8001b50 <main+0x320>)
 80018c2:	f7fe fe6d 	bl	80005a0 <uartTransmit>

  	/* Sammel Systeminformationen */
  	collectSystemInfo();
 80018c6:	f7fe ffc5 	bl	8000854 <collectSystemInfo>
#endif

	// Leds Testen
  	testPCB_Leds();
 80018ca:	f7ff fb5b 	bl	8000f84 <testPCB_Leds>

  	/* Lese alle Eingaenge */
  	readall_inputs();
 80018ce:	f7ff f959 	bl	8000b84 <readall_inputs>

  	// Starte CAN Bus
  	if((status = HAL_CAN_Start(&hcan3)) != HAL_OK)
 80018d2:	48a0      	ldr	r0, [pc, #640]	; (8001b54 <main+0x324>)
 80018d4:	f001 faba 	bl	8002e4c <HAL_CAN_Start>
 80018d8:	4603      	mov	r3, r0
 80018da:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 80018de:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d006      	beq.n	80018f4 <main+0xc4>
  	{
  		/* Start Error */
  		hal_error(status);
 80018e6:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff f8fa 	bl	8000ae4 <hal_error>
  		Error_Handler();
 80018f0:	f000 fa56 	bl	8001da0 <Error_Handler>
  	}
  	uartTransmit("CAN START\n", 10);
 80018f4:	210a      	movs	r1, #10
 80018f6:	4898      	ldr	r0, [pc, #608]	; (8001b58 <main+0x328>)
 80018f8:	f7fe fe52 	bl	80005a0 <uartTransmit>

  	// Aktiviere Interrupts für CAN Bus
  	if((status = HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING)) != HAL_OK)
 80018fc:	2102      	movs	r1, #2
 80018fe:	4895      	ldr	r0, [pc, #596]	; (8001b54 <main+0x324>)
 8001900:	f001 fcd5 	bl	80032ae <HAL_CAN_ActivateNotification>
 8001904:	4603      	mov	r3, r0
 8001906:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 800190a:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d006      	beq.n	8001920 <main+0xf0>
  	{
  		/* Notification Error */
  		hal_error(status);
 8001912:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff f8e4 	bl	8000ae4 <hal_error>
  		Error_Handler();
 800191c:	f000 fa40 	bl	8001da0 <Error_Handler>
  	}
  	uartTransmit("Send Message\n", 13);
 8001920:	210d      	movs	r1, #13
 8001922:	488e      	ldr	r0, [pc, #568]	; (8001b5c <main+0x32c>)
 8001924:	f7fe fe3c 	bl	80005a0 <uartTransmit>

  	// Filter Bank initialisieren um Daten zu empfangen
    sFilterConfig.FilterBank = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	677b      	str	r3, [r7, #116]	; 0x74
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800192c:	2300      	movs	r3, #0
 800192e:	67bb      	str	r3, [r7, #120]	; 0x78
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001930:	2301      	movs	r3, #1
 8001932:	67fb      	str	r3, [r7, #124]	; 0x7c
    sFilterConfig.FilterIdHigh = 0x0000;
 8001934:	2300      	movs	r3, #0
 8001936:	663b      	str	r3, [r7, #96]	; 0x60
    sFilterConfig.FilterIdLow = 0x0000;
 8001938:	2300      	movs	r3, #0
 800193a:	667b      	str	r3, [r7, #100]	; 0x64
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 800193c:	2300      	movs	r3, #0
 800193e:	66bb      	str	r3, [r7, #104]	; 0x68
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8001940:	2300      	movs	r3, #0
 8001942:	66fb      	str	r3, [r7, #108]	; 0x6c
    sFilterConfig.FilterFIFOAssignment = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	673b      	str	r3, [r7, #112]	; 0x70
    sFilterConfig.FilterActivation = ENABLE;
 8001948:	2301      	movs	r3, #1
 800194a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // Filter Bank schreiben
    if((status = HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 800194e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001952:	4619      	mov	r1, r3
 8001954:	487f      	ldr	r0, [pc, #508]	; (8001b54 <main+0x324>)
 8001956:	f001 f98d 	bl	8002c74 <HAL_CAN_ConfigFilter>
 800195a:	4603      	mov	r3, r0
 800195c:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 8001960:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d006      	beq.n	8001976 <main+0x146>
    {
    	/* Filter configuration Error */
  		hal_error(status);
 8001968:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff f8b9 	bl	8000ae4 <hal_error>
  		Error_Handler();
 8001972:	f000 fa15 	bl	8001da0 <Error_Handler>
	TxMotor1.RTR = CAN_RTR_DATA;
	TxMotor1.IDE = CAN_ID_STD;
	TxMotor1.DLC = 8;
	TxMotor1.TransmitGlobalTime=DISABLE;*/

  	for (uint8_t j = 0; j < 8; j++)
 8001976:	2300      	movs	r3, #0
 8001978:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 800197c:	e00f      	b.n	800199e <main+0x16e>
  		TxData[j] = (j + 1);
 800197e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8001982:	f897 20a3 	ldrb.w	r2, [r7, #163]	; 0xa3
 8001986:	3201      	adds	r2, #1
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800198e:	440b      	add	r3, r1
 8001990:	f803 2c18 	strb.w	r2, [r3, #-24]
  	for (uint8_t j = 0; j < 8; j++)
 8001994:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8001998:	3301      	adds	r3, #1
 800199a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 800199e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80019a2:	2b07      	cmp	r3, #7
 80019a4:	d9eb      	bls.n	800197e <main+0x14e>

  	// Start timer
  	HAL_TIM_Base_Start(&htim6);
 80019a6:	486e      	ldr	r0, [pc, #440]	; (8001b60 <main+0x330>)
 80019a8:	f003 fb1a 	bl	8004fe0 <HAL_TIM_Base_Start>

  	uartTransmit("\nStarte While\n\n", 15);
 80019ac:	210f      	movs	r1, #15
 80019ae:	486d      	ldr	r0, [pc, #436]	; (8001b64 <main+0x334>)
 80019b0:	f7fe fdf6 	bl	80005a0 <uartTransmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 80019b4:	4b6c      	ldr	r3, [pc, #432]	; (8001b68 <main+0x338>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d107      	bne.n	80019ce <main+0x19e>
		{
			count++;													// Zaehler count hochzaehlen
 80019be:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80019c2:	3301      	adds	r3, #1
 80019c4:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
			millisekunden_flag_1 = 0;									// Setze Millisekunden-Flag zurueck
 80019c8:	4b67      	ldr	r3, [pc, #412]	; (8001b68 <main+0x338>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
		}

		// Task wird alle 20 Millisekunden ausgefuehrt
		if (count == 20)
 80019ce:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80019d2:	2b14      	cmp	r3, #20
 80019d4:	d10d      	bne.n	80019f2 <main+0x1c2>
		{
			// Sende Nachricht Motor1
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMotor1, motor1.output, (uint32_t *)CAN_TX_MAILBOX0);
 80019d6:	4639      	mov	r1, r7
 80019d8:	2301      	movs	r3, #1
 80019da:	4a64      	ldr	r2, [pc, #400]	; (8001b6c <main+0x33c>)
 80019dc:	485d      	ldr	r0, [pc, #372]	; (8001b54 <main+0x324>)
 80019de:	f001 fa79 	bl	8002ed4 <HAL_CAN_AddTxMessage>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
			hal_error(status);
 80019e8:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff f879 	bl	8000ae4 <hal_error>
		}

		// Task wird alle 50 Millisekunden ausgefuehrt
		if (count == 50)
 80019f2:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80019f6:	2b32      	cmp	r3, #50	; 0x32
 80019f8:	d105      	bne.n	8001a06 <main+0x1d6>
		{
			// alle Inputs einlesen
			readall_inputs();
 80019fa:	f7ff f8c3 	bl	8000b84 <readall_inputs>

			// Bremse pruefen
			readBrake();
 80019fe:	f7ff fb3d 	bl	800107c <readBrake>

			// Gaspedal pruefen
			readTrottle();
 8001a02:	f7ff fafd 	bl	8001000 <readTrottle>
		}

		// Task wird alle 200 Millisekunden ausgefuehrt
		if (count == 200)
 8001a06:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001a0a:	2bc8      	cmp	r3, #200	; 0xc8
 8001a0c:	d153      	bne.n	8001ab6 <main+0x286>
		{
			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 8001a0e:	4b58      	ldr	r3, [pc, #352]	; (8001b70 <main+0x340>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			OutData[1] = highcurrent_out.high_out;
 8001a16:	4b57      	ldr	r3, [pc, #348]	; (8001b74 <main+0x344>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
			OutData[2] = (leuchten_out.ledoutput >> 8);
 8001a1e:	4b56      	ldr	r3, [pc, #344]	; (8001b78 <main+0x348>)
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	0a1b      	lsrs	r3, r3, #8
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			OutData[3] = leuchten_out.ledoutput;
 8001a2c:	4b52      	ldr	r3, [pc, #328]	; (8001b78 <main+0x348>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			OutData[4] = komfort_out.komfortoutput;
 8001a36:	4b51      	ldr	r3, [pc, #324]	; (8001b7c <main+0x34c>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94

			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX0);
 8001a3e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001a42:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001a46:	2301      	movs	r3, #1
 8001a48:	4842      	ldr	r0, [pc, #264]	; (8001b54 <main+0x324>)
 8001a4a:	f001 fa43 	bl	8002ed4 <HAL_CAN_AddTxMessage>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
			hal_error(status);
 8001a54:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff f843 	bl	8000ae4 <hal_error>

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] = (system_in.systeminput >> 8);
 8001a5e:	4b48      	ldr	r3, [pc, #288]	; (8001b80 <main+0x350>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	0a1b      	lsrs	r3, r3, #8
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
			InData[1] = system_in.systeminput;
 8001a6c:	4b44      	ldr	r3, [pc, #272]	; (8001b80 <main+0x350>)
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
			InData[2] = sdc_in.sdcinput;
 8001a76:	4b43      	ldr	r3, [pc, #268]	; (8001b84 <main+0x354>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			InData[3] = (komfort_in.komfortinput >> 8);
 8001a7e:	4b42      	ldr	r3, [pc, #264]	; (8001b88 <main+0x358>)
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	0a1b      	lsrs	r3, r3, #8
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			InData[4] = komfort_in.komfortinput;
 8001a8c:	4b3e      	ldr	r3, [pc, #248]	; (8001b88 <main+0x358>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX0);
 8001a96:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001a9a:	f107 0118 	add.w	r1, r7, #24
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	482c      	ldr	r0, [pc, #176]	; (8001b54 <main+0x324>)
 8001aa2:	f001 fa17 	bl	8002ed4 <HAL_CAN_AddTxMessage>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
			hal_error(status);
 8001aac:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff f817 	bl	8000ae4 <hal_error>
		}

	  	// Task wird alle 5 Millisekunden ausgefuehrt
	  	if (millis() - lastcan >= 5)
 8001ab6:	f7ff fa5d 	bl	8000f74 <millis>
 8001aba:	4602      	mov	r2, r0
 8001abc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	f240 8082 	bls.w	8001bcc <main+0x39c>
		{
			// Wenn Nachricht ueber den CAN-Bus empfangen wurden
			if (can_change == 1)
 8001ac8:	4b30      	ldr	r3, [pc, #192]	; (8001b8c <main+0x35c>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d17d      	bne.n	8001bcc <main+0x39c>
			{
				// Nachricht ID über UART ausgeben
				uartTransmitNumber(RxMessage.StdId, 16);
 8001ad0:	4b2f      	ldr	r3, [pc, #188]	; (8001b90 <main+0x360>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2110      	movs	r1, #16
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fd76 	bl	80005c8 <uartTransmitNumber>
				uartTransmit("\t", 1);
 8001adc:	2101      	movs	r1, #1
 8001ade:	482d      	ldr	r0, [pc, #180]	; (8001b94 <main+0x364>)
 8001ae0:	f7fe fd5e 	bl	80005a0 <uartTransmit>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 8001aea:	e00c      	b.n	8001b06 <main+0x2d6>
				{
					uartTransmitNumber(RxData[i], 16);
 8001aec:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 8001af0:	4a29      	ldr	r2, [pc, #164]	; (8001b98 <main+0x368>)
 8001af2:	5cd3      	ldrb	r3, [r2, r3]
 8001af4:	2110      	movs	r1, #16
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fd66 	bl	80005c8 <uartTransmitNumber>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 8001afc:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 8001b00:	3301      	adds	r3, #1
 8001b02:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 8001b06:	f897 20a2 	ldrb.w	r2, [r7, #162]	; 0xa2
 8001b0a:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <main+0x360>)
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d3ec      	bcc.n	8001aec <main+0x2bc>
				}
				uartTransmit("\n", 1);
 8001b12:	2101      	movs	r1, #1
 8001b14:	4821      	ldr	r0, [pc, #132]	; (8001b9c <main+0x36c>)
 8001b16:	f7fe fd43 	bl	80005a0 <uartTransmit>

				// Sortieren der IDs nach Geräten
				switch (RxMessage.StdId)
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <main+0x360>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f240 1211 	movw	r2, #273	; 0x111
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d007      	beq.n	8001b36 <main+0x306>
 8001b26:	f240 1281 	movw	r2, #385	; 0x181
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d13a      	bne.n	8001ba4 <main+0x374>
				{
					case BAMOCAR_RX_ID:
						BAMOCAN_ID(&RxData[0]);
 8001b2e:	481a      	ldr	r0, [pc, #104]	; (8001b98 <main+0x368>)
 8001b30:	f7fe fd06 	bl	8000540 <BAMOCAN_ID>
						break;
 8001b34:	e03b      	b.n	8001bae <main+0x37e>
					case 0x111:
						uartTransmit("CAN-ID Computer config\n", 23);
 8001b36:	2117      	movs	r1, #23
 8001b38:	4819      	ldr	r0, [pc, #100]	; (8001ba0 <main+0x370>)
 8001b3a:	f7fe fd31 	bl	80005a0 <uartTransmit>
						break;
 8001b3e:	e036      	b.n	8001bae <main+0x37e>
 8001b40:	0800638c 	.word	0x0800638c
 8001b44:	080063a4 	.word	0x080063a4
 8001b48:	080063bc 	.word	0x080063bc
 8001b4c:	080063d4 	.word	0x080063d4
 8001b50:	080062e8 	.word	0x080062e8
 8001b54:	200000a0 	.word	0x200000a0
 8001b58:	08006324 	.word	0x08006324
 8001b5c:	08006330 	.word	0x08006330
 8001b60:	200000ec 	.word	0x200000ec
 8001b64:	08006340 	.word	0x08006340
 8001b68:	20000029 	.word	0x20000029
 8001b6c:	20000034 	.word	0x20000034
 8001b70:	2000004c 	.word	0x2000004c
 8001b74:	20000050 	.word	0x20000050
 8001b78:	20000054 	.word	0x20000054
 8001b7c:	20000048 	.word	0x20000048
 8001b80:	2000003c 	.word	0x2000003c
 8001b84:	20000044 	.word	0x20000044
 8001b88:	20000040 	.word	0x20000040
 8001b8c:	20000028 	.word	0x20000028
 8001b90:	200000d0 	.word	0x200000d0
 8001b94:	08006350 	.word	0x08006350
 8001b98:	200000c8 	.word	0x200000c8
 8001b9c:	08006354 	.word	0x08006354
 8001ba0:	08006358 	.word	0x08006358
					default:
						uartTransmit("CAN-ID nicht verfuegbar\n", 24);
 8001ba4:	2118      	movs	r1, #24
 8001ba6:	4819      	ldr	r0, [pc, #100]	; (8001c0c <main+0x3dc>)
 8001ba8:	f7fe fcfa 	bl	80005a0 <uartTransmit>
						break;
 8001bac:	bf00      	nop
				}

				TxData[2] = motor1.output[2];
 8001bae:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <main+0x3e0>)
 8001bb0:	789b      	ldrb	r3, [r3, #2]
 8001bb2:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
				TxData[3] = motor1.output[3];
 8001bb6:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <main+0x3e0>)
 8001bb8:	78db      	ldrb	r3, [r3, #3]
 8001bba:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
				lastcan = millis();
 8001bbe:	f7ff f9d9 	bl	8000f74 <millis>
 8001bc2:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
				can_change = 0;
 8001bc6:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <main+0x3e4>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
			}
		}

		// Sende CAN Nachricht auf CAN-Bus
		if (millis() - lastsendcan >= 993)
 8001bcc:	f7ff f9d2 	bl	8000f74 <millis>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 8001bdc:	f67f aeea 	bls.w	80019b4 <main+0x184>
		{
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 8001be0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001be4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001be8:	2301      	movs	r3, #1
 8001bea:	480b      	ldr	r0, [pc, #44]	; (8001c18 <main+0x3e8>)
 8001bec:	f001 f972 	bl	8002ed4 <HAL_CAN_AddTxMessage>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
			hal_error(status);
 8001bf6:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe ff72 	bl	8000ae4 <hal_error>
			lastsendcan = millis();
 8001c00:	f7ff f9b8 	bl	8000f74 <millis>
 8001c04:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		if (millisekunden_flag_1 == 1)
 8001c08:	e6d4      	b.n	80019b4 <main+0x184>
 8001c0a:	bf00      	nop
 8001c0c:	08006370 	.word	0x08006370
 8001c10:	20000034 	.word	0x20000034
 8001c14:	20000028 	.word	0x20000028
 8001c18:	200000a0 	.word	0x200000a0

08001c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b0b8      	sub	sp, #224	; 0xe0
 8001c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c22:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c26:	2234      	movs	r2, #52	; 0x34
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f004 f9ac 	bl	8005f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c30:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c40:	f107 0308 	add.w	r3, r7, #8
 8001c44:	2290      	movs	r2, #144	; 0x90
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f004 f99d 	bl	8005f88 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	4b3b      	ldr	r3, [pc, #236]	; (8001d3c <SystemClock_Config+0x120>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	4a3a      	ldr	r2, [pc, #232]	; (8001d3c <SystemClock_Config+0x120>)
 8001c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c58:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5a:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <SystemClock_Config+0x120>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c66:	4b36      	ldr	r3, [pc, #216]	; (8001d40 <SystemClock_Config+0x124>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c6e:	4a34      	ldr	r2, [pc, #208]	; (8001d40 <SystemClock_Config+0x124>)
 8001c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	4b32      	ldr	r3, [pc, #200]	; (8001d40 <SystemClock_Config+0x124>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c82:	2301      	movs	r3, #1
 8001c84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c90:	2302      	movs	r3, #2
 8001c92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001c9e:	2319      	movs	r3, #25
 8001ca0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001ca4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cac:	2302      	movs	r3, #2
 8001cae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cbe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f002 f888 	bl	8003dd8 <HAL_RCC_OscConfig>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001cce:	f000 f867 	bl	8001da0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001cd2:	f002 f831 	bl	8003d38 <HAL_PWREx_EnableOverDrive>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001cdc:	f000 f860 	bl	8001da0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ce0:	230f      	movs	r3, #15
 8001ce2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d00:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d04:	2103      	movs	r1, #3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f002 fb14 	bl	8004334 <HAL_RCC_ClockConfig>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001d12:	f000 f845 	bl	8001da0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d1e:	f107 0308 	add.w	r3, r7, #8
 8001d22:	4618      	mov	r0, r3
 8001d24:	f002 fcdc 	bl	80046e0 <HAL_RCCEx_PeriphCLKConfig>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8001d2e:	f000 f837 	bl	8001da0 <Error_Handler>
  }
}
 8001d32:	bf00      	nop
 8001d34:	37e0      	adds	r7, #224	; 0xe0
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40007000 	.word	0x40007000

08001d44 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
// Interrupts
// Can-Interrupt: Nachricht wartet
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001d4e:	4a07      	ldr	r2, [pc, #28]	; (8001d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001d50:	2100      	movs	r1, #0
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f001 f999 	bl	800308a <HAL_CAN_GetRxMessage>
	can_change = 1;
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	701a      	strb	r2, [r3, #0]
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200000c8 	.word	0x200000c8
 8001d6c:	200000d0 	.word	0x200000d0
 8001d70:	20000028 	.word	0x20000028

08001d74 <HAL_TIM_PeriodElapsedCallback>:

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a06      	ldr	r2, [pc, #24]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d102      	bne.n	8001d8a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	701a      	strb	r2, [r3, #0]
	}
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	200000ec 	.word	0x200000ec
 8001d9c:	20000029 	.word	0x20000029

08001da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001da4:	b672      	cpsid	i
}
 8001da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001da8:	2201      	movs	r2, #1
 8001daa:	2104      	movs	r1, #4
 8001dac:	4803      	ldr	r0, [pc, #12]	; (8001dbc <Error_Handler+0x1c>)
 8001dae:	f001 ffa9 	bl	8003d04 <HAL_GPIO_WritePin>
#ifdef DEBUG
#define ERRORMESSAGE			"\nError Handler ausgeloest\n"
  uartTransmit(ERRORMESSAGE,sizeof(ERRORMESSAGE));
 8001db2:	211b      	movs	r1, #27
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <Error_Handler+0x20>)
 8001db6:	f7fe fbf3 	bl	80005a0 <uartTransmit>
#endif
  while (1)
 8001dba:	e7fe      	b.n	8001dba <Error_Handler+0x1a>
 8001dbc:	40020400 	.word	0x40020400
 8001dc0:	080063ec 	.word	0x080063ec

08001dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dca:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <HAL_MspInit+0x44>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	4a0e      	ldr	r2, [pc, #56]	; (8001e08 <HAL_MspInit+0x44>)
 8001dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <HAL_MspInit+0x44>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_MspInit+0x44>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <HAL_MspInit+0x44>)
 8001de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dec:	6453      	str	r3, [r2, #68]	; 0x44
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_MspInit+0x44>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800

08001e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <NMI_Handler+0x4>

08001e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e16:	e7fe      	b.n	8001e16 <HardFault_Handler+0x4>

08001e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <MemManage_Handler+0x4>

08001e1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e22:	e7fe      	b.n	8001e22 <BusFault_Handler+0x4>

08001e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <UsageFault_Handler+0x4>

08001e2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e58:	f000 f962 	bl	8002120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e64:	4802      	ldr	r0, [pc, #8]	; (8001e70 <TIM6_DAC_IRQHandler+0x10>)
 8001e66:	f003 f92b 	bl	80050c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200000ec 	.word	0x200000ec

08001e74 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <CAN3_RX0_IRQHandler+0x10>)
 8001e7a:	f001 fa3e 	bl	80032fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200000a0 	.word	0x200000a0

08001e88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <SystemInit+0x28>)
 8001e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e92:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <SystemInit+0x28>)
 8001e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <SystemInit+0x28>)
 8001e9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ea2:	609a      	str	r2, [r3, #8]
#endif
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ec4:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <MX_TIM6_Init+0x64>)
 8001ec6:	4a15      	ldr	r2, [pc, #84]	; (8001f1c <MX_TIM6_Init+0x68>)
 8001ec8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 5;
 8001eca:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <MX_TIM6_Init+0x64>)
 8001ecc:	2205      	movs	r2, #5
 8001ece:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <MX_TIM6_Init+0x64>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <MX_TIM6_Init+0x64>)
 8001ed8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001edc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <MX_TIM6_Init+0x64>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ee4:	480c      	ldr	r0, [pc, #48]	; (8001f18 <MX_TIM6_Init+0x64>)
 8001ee6:	f003 f823 	bl	8004f30 <HAL_TIM_Base_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001ef0:	f7ff ff56 	bl	8001da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	4619      	mov	r1, r3
 8001f00:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_TIM6_Init+0x64>)
 8001f02:	f003 fac5 	bl	8005490 <HAL_TIMEx_MasterConfigSynchronization>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001f0c:	f7ff ff48 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f10:	bf00      	nop
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200000ec 	.word	0x200000ec
 8001f1c:	40001000 	.word	0x40001000

08001f20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <HAL_TIM_Base_MspInit+0x44>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d113      	bne.n	8001f5a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f32:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <HAL_TIM_Base_MspInit+0x48>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	4a0c      	ldr	r2, [pc, #48]	; (8001f68 <HAL_TIM_Base_MspInit+0x48>)
 8001f38:	f043 0310 	orr.w	r3, r3, #16
 8001f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <HAL_TIM_Base_MspInit+0x48>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f003 0310 	and.w	r3, r3, #16
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	2036      	movs	r0, #54	; 0x36
 8001f50:	f001 fcdd 	bl	800390e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f54:	2036      	movs	r0, #54	; 0x36
 8001f56:	f001 fcf6 	bl	8003946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40001000 	.word	0x40001000
 8001f68:	40023800 	.word	0x40023800

08001f6c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f70:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <MX_USART2_UART_Init+0x58>)
 8001f72:	4a15      	ldr	r2, [pc, #84]	; (8001fc8 <MX_USART2_UART_Init+0x5c>)
 8001f74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001f76:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <MX_USART2_UART_Init+0x58>)
 8001f78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <MX_USART2_UART_Init+0x58>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f84:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <MX_USART2_UART_Init+0x58>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <MX_USART2_UART_Init+0x58>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <MX_USART2_UART_Init+0x58>)
 8001f92:	220c      	movs	r2, #12
 8001f94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <MX_USART2_UART_Init+0x58>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f9c:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <MX_USART2_UART_Init+0x58>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <MX_USART2_UART_Init+0x58>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <MX_USART2_UART_Init+0x58>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fae:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <MX_USART2_UART_Init+0x58>)
 8001fb0:	f003 fb1a 	bl	80055e8 <HAL_UART_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001fba:	f7ff fef1 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000138 	.word	0x20000138
 8001fc8:	40004400 	.word	0x40004400

08001fcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	; 0x28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a17      	ldr	r2, [pc, #92]	; (8002048 <HAL_UART_MspInit+0x7c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d127      	bne.n	800203e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fee:	4b17      	ldr	r3, [pc, #92]	; (800204c <HAL_UART_MspInit+0x80>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	4a16      	ldr	r2, [pc, #88]	; (800204c <HAL_UART_MspInit+0x80>)
 8001ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffa:	4b14      	ldr	r3, [pc, #80]	; (800204c <HAL_UART_MspInit+0x80>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002006:	4b11      	ldr	r3, [pc, #68]	; (800204c <HAL_UART_MspInit+0x80>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a10      	ldr	r2, [pc, #64]	; (800204c <HAL_UART_MspInit+0x80>)
 800200c:	f043 0308 	orr.w	r3, r3, #8
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <HAL_UART_MspInit+0x80>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART2TX_Pin|DEBUG_UART2RX_Pin;
 800201e:	2360      	movs	r3, #96	; 0x60
 8002020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800202e:	2307      	movs	r3, #7
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002032:	f107 0314 	add.w	r3, r7, #20
 8002036:	4619      	mov	r1, r3
 8002038:	4805      	ldr	r0, [pc, #20]	; (8002050 <HAL_UART_MspInit+0x84>)
 800203a:	f001 fc9f 	bl	800397c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800203e:	bf00      	nop
 8002040:	3728      	adds	r7, #40	; 0x28
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40004400 	.word	0x40004400
 800204c:	40023800 	.word	0x40023800
 8002050:	40020c00 	.word	0x40020c00

08002054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800208c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002058:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800205a:	e003      	b.n	8002064 <LoopCopyDataInit>

0800205c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800205e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002060:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002062:	3104      	adds	r1, #4

08002064 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002064:	480b      	ldr	r0, [pc, #44]	; (8002094 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002066:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002068:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800206a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800206c:	d3f6      	bcc.n	800205c <CopyDataInit>
  ldr  r2, =_sbss
 800206e:	4a0b      	ldr	r2, [pc, #44]	; (800209c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002070:	e002      	b.n	8002078 <LoopFillZerobss>

08002072 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002072:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002074:	f842 3b04 	str.w	r3, [r2], #4

08002078 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800207a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800207c:	d3f9      	bcc.n	8002072 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800207e:	f7ff ff03 	bl	8001e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002082:	f003 ff5d 	bl	8005f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002086:	f7ff fbd3 	bl	8001830 <main>
  bx  lr    
 800208a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800208c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002090:	08006458 	.word	0x08006458
  ldr  r0, =_sdata
 8002094:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002098:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800209c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80020a0:	200001c0 	.word	0x200001c0

080020a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020a4:	e7fe      	b.n	80020a4 <ADC_IRQHandler>

080020a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020aa:	2003      	movs	r0, #3
 80020ac:	f001 fc24 	bl	80038f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020b0:	2000      	movs	r0, #0
 80020b2:	f000 f805 	bl	80020c0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80020b6:	f7ff fe85 	bl	8001dc4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_InitTick+0x54>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b12      	ldr	r3, [pc, #72]	; (8002118 <HAL_InitTick+0x58>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	4619      	mov	r1, r3
 80020d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020da:	fbb2 f3f3 	udiv	r3, r2, r3
 80020de:	4618      	mov	r0, r3
 80020e0:	f001 fc3f 	bl	8003962 <HAL_SYSTICK_Config>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e00e      	b.n	800210c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b0f      	cmp	r3, #15
 80020f2:	d80a      	bhi.n	800210a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f4:	2200      	movs	r2, #0
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	f001 fc07 	bl	800390e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002100:	4a06      	ldr	r2, [pc, #24]	; (800211c <HAL_InitTick+0x5c>)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	e000      	b.n	800210c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000000 	.word	0x20000000
 8002118:	20000008 	.word	0x20000008
 800211c:	20000004 	.word	0x20000004

08002120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_IncTick+0x20>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_IncTick+0x24>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4413      	add	r3, r2
 8002130:	4a04      	ldr	r2, [pc, #16]	; (8002144 <HAL_IncTick+0x24>)
 8002132:	6013      	str	r3, [r2, #0]
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000008 	.word	0x20000008
 8002144:	200001bc 	.word	0x200001bc

08002148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return uwTick;
 800214c:	4b03      	ldr	r3, [pc, #12]	; (800215c <HAL_GetTick+0x14>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	200001bc 	.word	0x200001bc

08002160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002168:	f7ff ffee 	bl	8002148 <HAL_GetTick>
 800216c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002178:	d005      	beq.n	8002186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800217a:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <HAL_Delay+0x44>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4413      	add	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002186:	bf00      	nop
 8002188:	f7ff ffde 	bl	8002148 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	429a      	cmp	r2, r3
 8002196:	d8f7      	bhi.n	8002188 <HAL_Delay+0x28>
  {
  }
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000008 	.word	0x20000008

080021a8 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
 return __STM32F7xx_HAL_VERSION;
 80021ac:	4b02      	ldr	r3, [pc, #8]	; (80021b8 <HAL_GetHalVersion+0x10>)
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	01020900 	.word	0x01020900

080021bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 80021c0:	4b03      	ldr	r3, [pc, #12]	; (80021d0 <HAL_GetREVID+0x14>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	0c1b      	lsrs	r3, r3, #16
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e0042000 	.word	0xe0042000

080021d4 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <HAL_GetDEVID+0x18>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e0042000 	.word	0xe0042000

080021f0 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <HAL_GetUIDw0+0x14>)
 80021f6:	681b      	ldr	r3, [r3, #0]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	1ff0f420 	.word	0x1ff0f420

08002208 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <HAL_GetUIDw1+0x14>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	1ff0f424 	.word	0x1ff0f424

08002220 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002224:	4b03      	ldr	r3, [pc, #12]	; (8002234 <HAL_GetUIDw2+0x14>)
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	1ff0f428 	.word	0x1ff0f428

08002238 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002240:	2300      	movs	r3, #0
 8002242:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e031      	b.n	80022b2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	2b00      	cmp	r3, #0
 8002254:	d109      	bne.n	800226a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff f828 	bl	80012ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f003 0310 	and.w	r3, r3, #16
 8002272:	2b00      	cmp	r3, #0
 8002274:	d116      	bne.n	80022a4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <HAL_ADC_Init+0x84>)
 800227c:	4013      	ands	r3, r2
 800227e:	f043 0202 	orr.w	r2, r3, #2
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 fafe 	bl	8002888 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f023 0303 	bic.w	r3, r3, #3
 800229a:	f043 0201 	orr.w	r2, r3, #1
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	641a      	str	r2, [r3, #64]	; 0x40
 80022a2:	e001      	b.n	80022a8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	ffffeefd 	.word	0xffffeefd

080022c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_ADC_Start+0x1a>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e0ad      	b.n	8002436 <HAL_ADC_Start+0x176>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d018      	beq.n	8002322 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002300:	4b50      	ldr	r3, [pc, #320]	; (8002444 <HAL_ADC_Start+0x184>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a50      	ldr	r2, [pc, #320]	; (8002448 <HAL_ADC_Start+0x188>)
 8002306:	fba2 2303 	umull	r2, r3, r2, r3
 800230a:	0c9a      	lsrs	r2, r3, #18
 800230c:	4613      	mov	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4413      	add	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002314:	e002      	b.n	800231c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	3b01      	subs	r3, #1
 800231a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f9      	bne.n	8002316 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b01      	cmp	r3, #1
 800232e:	d175      	bne.n	800241c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002334:	4b45      	ldr	r3, [pc, #276]	; (800244c <HAL_ADC_Start+0x18c>)
 8002336:	4013      	ands	r3, r2
 8002338:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800234a:	2b00      	cmp	r3, #0
 800234c:	d007      	beq.n	800235e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002356:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800236a:	d106      	bne.n	800237a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002370:	f023 0206 	bic.w	r2, r3, #6
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	645a      	str	r2, [r3, #68]	; 0x44
 8002378:	e002      	b.n	8002380 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002390:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002392:	4b2f      	ldr	r3, [pc, #188]	; (8002450 <HAL_ADC_Start+0x190>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 031f 	and.w	r3, r3, #31
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10f      	bne.n	80023be <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d143      	bne.n	8002434 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	e03a      	b.n	8002434 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a24      	ldr	r2, [pc, #144]	; (8002454 <HAL_ADC_Start+0x194>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d10e      	bne.n	80023e6 <HAL_ADC_Start+0x126>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d107      	bne.n	80023e6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023e4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80023e6:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <HAL_ADC_Start+0x190>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d120      	bne.n	8002434 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a18      	ldr	r2, [pc, #96]	; (8002458 <HAL_ADC_Start+0x198>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d11b      	bne.n	8002434 <HAL_ADC_Start+0x174>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d114      	bne.n	8002434 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	e00b      	b.n	8002434 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	f043 0210 	orr.w	r2, r3, #16
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242c:	f043 0201 	orr.w	r2, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20000000 	.word	0x20000000
 8002448:	431bde83 	.word	0x431bde83
 800244c:	fffff8fe 	.word	0xfffff8fe
 8002450:	40012300 	.word	0x40012300
 8002454:	40012000 	.word	0x40012000
 8002458:	40012200 	.word	0x40012200

0800245c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800246a:	2b01      	cmp	r3, #1
 800246c:	d101      	bne.n	8002472 <HAL_ADC_Stop+0x16>
 800246e:	2302      	movs	r3, #2
 8002470:	e01f      	b.n	80024b2 <HAL_ADC_Stop+0x56>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0201 	bic.w	r2, r2, #1
 8002488:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d107      	bne.n	80024a8 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <HAL_ADC_Stop+0x64>)
 800249e:	4013      	ands	r3, r2
 80024a0:	f043 0201 	orr.w	r2, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	ffffeefe 	.word	0xffffeefe

080024c4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e0:	d113      	bne.n	800250a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024f0:	d10b      	bne.n	800250a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f043 0220 	orr.w	r2, r3, #32
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e063      	b.n	80025d2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800250a:	f7ff fe1d 	bl	8002148 <HAL_GetTick>
 800250e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002510:	e021      	b.n	8002556 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002518:	d01d      	beq.n	8002556 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d007      	beq.n	8002530 <HAL_ADC_PollForConversion+0x6c>
 8002520:	f7ff fe12 	bl	8002148 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d212      	bcs.n	8002556 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b02      	cmp	r3, #2
 800253c:	d00b      	beq.n	8002556 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f043 0204 	orr.w	r2, r3, #4
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e03d      	b.n	80025d2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b02      	cmp	r3, #2
 8002562:	d1d6      	bne.n	8002512 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0212 	mvn.w	r2, #18
 800256c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d123      	bne.n	80025d0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800258c:	2b00      	cmp	r3, #0
 800258e:	d11f      	bne.n	80025d0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800259a:	2b00      	cmp	r3, #0
 800259c:	d006      	beq.n	80025ac <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d111      	bne.n	80025d0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d105      	bne.n	80025d0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	f043 0201 	orr.w	r2, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002608:	2b01      	cmp	r3, #1
 800260a:	d101      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x1c>
 800260c:	2302      	movs	r3, #2
 800260e:	e12a      	b.n	8002866 <HAL_ADC_ConfigChannel+0x272>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b09      	cmp	r3, #9
 800261e:	d93a      	bls.n	8002696 <HAL_ADC_ConfigChannel+0xa2>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002628:	d035      	beq.n	8002696 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68d9      	ldr	r1, [r3, #12]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	b29b      	uxth	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	3b1e      	subs	r3, #30
 8002640:	2207      	movs	r2, #7
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43da      	mvns	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	400a      	ands	r2, r1
 800264e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a87      	ldr	r2, [pc, #540]	; (8002874 <HAL_ADC_ConfigChannel+0x280>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d10a      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68d9      	ldr	r1, [r3, #12]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	061a      	lsls	r2, r3, #24
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800266e:	e035      	b.n	80026dc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68d9      	ldr	r1, [r3, #12]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	b29b      	uxth	r3, r3
 8002680:	4618      	mov	r0, r3
 8002682:	4603      	mov	r3, r0
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4403      	add	r3, r0
 8002688:	3b1e      	subs	r3, #30
 800268a:	409a      	lsls	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002694:	e022      	b.n	80026dc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6919      	ldr	r1, [r3, #16]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	461a      	mov	r2, r3
 80026a4:	4613      	mov	r3, r2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	2207      	movs	r2, #7
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43da      	mvns	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	400a      	ands	r2, r1
 80026b8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6919      	ldr	r1, [r3, #16]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	4618      	mov	r0, r3
 80026cc:	4603      	mov	r3, r0
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4403      	add	r3, r0
 80026d2:	409a      	lsls	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b06      	cmp	r3, #6
 80026e2:	d824      	bhi.n	800272e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	3b05      	subs	r3, #5
 80026f6:	221f      	movs	r2, #31
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43da      	mvns	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	400a      	ands	r2, r1
 8002704:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	b29b      	uxth	r3, r3
 8002712:	4618      	mov	r0, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	3b05      	subs	r3, #5
 8002720:	fa00 f203 	lsl.w	r2, r0, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	635a      	str	r2, [r3, #52]	; 0x34
 800272c:	e04c      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b0c      	cmp	r3, #12
 8002734:	d824      	bhi.n	8002780 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	3b23      	subs	r3, #35	; 0x23
 8002748:	221f      	movs	r2, #31
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43da      	mvns	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	400a      	ands	r2, r1
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	b29b      	uxth	r3, r3
 8002764:	4618      	mov	r0, r3
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	3b23      	subs	r3, #35	; 0x23
 8002772:	fa00 f203 	lsl.w	r2, r0, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	631a      	str	r2, [r3, #48]	; 0x30
 800277e:	e023      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	3b41      	subs	r3, #65	; 0x41
 8002792:	221f      	movs	r2, #31
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43da      	mvns	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	400a      	ands	r2, r1
 80027a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	4618      	mov	r0, r3
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	3b41      	subs	r3, #65	; 0x41
 80027bc:	fa00 f203 	lsl.w	r2, r0, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a2a      	ldr	r2, [pc, #168]	; (8002878 <HAL_ADC_ConfigChannel+0x284>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d10a      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x1f4>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027da:	d105      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80027dc:	4b27      	ldr	r3, [pc, #156]	; (800287c <HAL_ADC_ConfigChannel+0x288>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4a26      	ldr	r2, [pc, #152]	; (800287c <HAL_ADC_ConfigChannel+0x288>)
 80027e2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80027e6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a22      	ldr	r2, [pc, #136]	; (8002878 <HAL_ADC_ConfigChannel+0x284>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d109      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x212>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2b12      	cmp	r3, #18
 80027f8:	d105      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_ADC_ConfigChannel+0x288>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4a1f      	ldr	r2, [pc, #124]	; (800287c <HAL_ADC_ConfigChannel+0x288>)
 8002800:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002804:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1b      	ldr	r2, [pc, #108]	; (8002878 <HAL_ADC_ConfigChannel+0x284>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d125      	bne.n	800285c <HAL_ADC_ConfigChannel+0x268>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a17      	ldr	r2, [pc, #92]	; (8002874 <HAL_ADC_ConfigChannel+0x280>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d003      	beq.n	8002822 <HAL_ADC_ConfigChannel+0x22e>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b11      	cmp	r3, #17
 8002820:	d11c      	bne.n	800285c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002822:	4b16      	ldr	r3, [pc, #88]	; (800287c <HAL_ADC_ConfigChannel+0x288>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4a15      	ldr	r2, [pc, #84]	; (800287c <HAL_ADC_ConfigChannel+0x288>)
 8002828:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800282c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a10      	ldr	r2, [pc, #64]	; (8002874 <HAL_ADC_ConfigChannel+0x280>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d111      	bne.n	800285c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <HAL_ADC_ConfigChannel+0x28c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a11      	ldr	r2, [pc, #68]	; (8002884 <HAL_ADC_ConfigChannel+0x290>)
 800283e:	fba2 2303 	umull	r2, r3, r2, r3
 8002842:	0c9a      	lsrs	r2, r3, #18
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800284e:	e002      	b.n	8002856 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	3b01      	subs	r3, #1
 8002854:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1f9      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	10000012 	.word	0x10000012
 8002878:	40012000 	.word	0x40012000
 800287c:	40012300 	.word	0x40012300
 8002880:	20000000 	.word	0x20000000
 8002884:	431bde83 	.word	0x431bde83

08002888 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002890:	4b78      	ldr	r3, [pc, #480]	; (8002a74 <ADC_Init+0x1ec>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	4a77      	ldr	r2, [pc, #476]	; (8002a74 <ADC_Init+0x1ec>)
 8002896:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800289a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800289c:	4b75      	ldr	r3, [pc, #468]	; (8002a74 <ADC_Init+0x1ec>)
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4973      	ldr	r1, [pc, #460]	; (8002a74 <ADC_Init+0x1ec>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	021a      	lsls	r2, r3, #8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6899      	ldr	r1, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002916:	4a58      	ldr	r2, [pc, #352]	; (8002a78 <ADC_Init+0x1f0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d022      	beq.n	8002962 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800292a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6899      	ldr	r1, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800294c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6899      	ldr	r1, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	e00f      	b.n	8002982 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002970:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002980:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0202 	bic.w	r2, r2, #2
 8002990:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6899      	ldr	r1, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	005a      	lsls	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01b      	beq.n	80029e8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6859      	ldr	r1, [r3, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	3b01      	subs	r3, #1
 80029dc:	035a      	lsls	r2, r3, #13
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	e007      	b.n	80029f8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	051a      	lsls	r2, r3, #20
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6899      	ldr	r1, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a3a:	025a      	lsls	r2, r3, #9
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6899      	ldr	r1, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	029a      	lsls	r2, r3, #10
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	609a      	str	r2, [r3, #8]
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	40012300 	.word	0x40012300
 8002a78:	0f000001 	.word	0x0f000001

08002a7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e0ed      	b.n	8002c6a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d102      	bne.n	8002aa0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7fe fcb0 	bl	8001400 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0202 	bic.w	r2, r2, #2
 8002aae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ab0:	f7ff fb4a 	bl	8002148 <HAL_GetTick>
 8002ab4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ab6:	e012      	b.n	8002ade <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ab8:	f7ff fb46 	bl	8002148 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b0a      	cmp	r3, #10
 8002ac4:	d90b      	bls.n	8002ade <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2205      	movs	r2, #5
 8002ad6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e0c5      	b.n	8002c6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1e5      	bne.n	8002ab8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002afc:	f7ff fb24 	bl	8002148 <HAL_GetTick>
 8002b00:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b02:	e012      	b.n	8002b2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b04:	f7ff fb20 	bl	8002148 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b0a      	cmp	r3, #10
 8002b10:	d90b      	bls.n	8002b2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2205      	movs	r2, #5
 8002b22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e09f      	b.n	8002c6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0e5      	beq.n	8002b04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	7e1b      	ldrb	r3, [r3, #24]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d108      	bne.n	8002b52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	e007      	b.n	8002b62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	7e5b      	ldrb	r3, [r3, #25]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d108      	bne.n	8002b7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e007      	b.n	8002b8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	7e9b      	ldrb	r3, [r3, #26]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d108      	bne.n	8002ba6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0220 	orr.w	r2, r2, #32
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	e007      	b.n	8002bb6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0220 	bic.w	r2, r2, #32
 8002bb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	7edb      	ldrb	r3, [r3, #27]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d108      	bne.n	8002bd0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0210 	bic.w	r2, r2, #16
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	e007      	b.n	8002be0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0210 	orr.w	r2, r2, #16
 8002bde:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	7f1b      	ldrb	r3, [r3, #28]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d108      	bne.n	8002bfa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0208 	orr.w	r2, r2, #8
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	e007      	b.n	8002c0a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0208 	bic.w	r2, r2, #8
 8002c08:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	7f5b      	ldrb	r3, [r3, #29]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d108      	bne.n	8002c24 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0204 	orr.w	r2, r2, #4
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	e007      	b.n	8002c34 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0204 	bic.w	r2, r2, #4
 8002c32:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	ea42 0103 	orr.w	r1, r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	1e5a      	subs	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c8a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002c8c:	7cfb      	ldrb	r3, [r7, #19]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d003      	beq.n	8002c9a <HAL_CAN_ConfigFilter+0x26>
 8002c92:	7cfb      	ldrb	r3, [r7, #19]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	f040 80c7 	bne.w	8002e28 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a69      	ldr	r2, [pc, #420]	; (8002e44 <HAL_CAN_ConfigFilter+0x1d0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d001      	beq.n	8002ca8 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002ca4:	4b68      	ldr	r3, [pc, #416]	; (8002e48 <HAL_CAN_ConfigFilter+0x1d4>)
 8002ca6:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cae:	f043 0201 	orr.w	r2, r3, #1
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	4a63      	ldr	r2, [pc, #396]	; (8002e48 <HAL_CAN_ConfigFilter+0x1d4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d111      	bne.n	8002ce4 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cc6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	2201      	movs	r2, #1
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	401a      	ands	r2, r3
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d123      	bne.n	8002d56 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	401a      	ands	r2, r3
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d30:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	3248      	adds	r2, #72	; 0x48
 8002d36:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d4a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d4c:	6979      	ldr	r1, [r7, #20]
 8002d4e:	3348      	adds	r3, #72	; 0x48
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	440b      	add	r3, r1
 8002d54:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d122      	bne.n	8002da4 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	431a      	orrs	r2, r3
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002d7e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	3248      	adds	r2, #72	; 0x48
 8002d84:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d98:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d9a:	6979      	ldr	r1, [r7, #20]
 8002d9c:	3348      	adds	r3, #72	; 0x48
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	440b      	add	r3, r1
 8002da2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d109      	bne.n	8002dc0 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	401a      	ands	r2, r3
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002dbe:	e007      	b.n	8002dd0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d109      	bne.n	8002dec <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	401a      	ands	r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002dea:	e007      	b.n	8002dfc <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	431a      	orrs	r2, r3
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d107      	bne.n	8002e14 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e1a:	f023 0201 	bic.w	r2, r3, #1
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	e006      	b.n	8002e36 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
  }
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	371c      	adds	r7, #28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40003400 	.word	0x40003400
 8002e48:	40006400 	.word	0x40006400

08002e4c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d12e      	bne.n	8002ebe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0201 	bic.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e78:	f7ff f966 	bl	8002148 <HAL_GetTick>
 8002e7c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e7e:	e012      	b.n	8002ea6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e80:	f7ff f962 	bl	8002148 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b0a      	cmp	r3, #10
 8002e8c:	d90b      	bls.n	8002ea6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2205      	movs	r2, #5
 8002e9e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e012      	b.n	8002ecc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1e5      	bne.n	8002e80 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e006      	b.n	8002ecc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
  }
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b089      	sub	sp, #36	; 0x24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ee8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ef2:	7ffb      	ldrb	r3, [r7, #31]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d003      	beq.n	8002f00 <HAL_CAN_AddTxMessage+0x2c>
 8002ef8:	7ffb      	ldrb	r3, [r7, #31]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	f040 80b8 	bne.w	8003070 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10a      	bne.n	8002f20 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d105      	bne.n	8002f20 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 80a0 	beq.w	8003060 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	0e1b      	lsrs	r3, r3, #24
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d907      	bls.n	8002f40 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e09e      	b.n	800307e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002f40:	2201      	movs	r2, #1
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	409a      	lsls	r2, r3
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10d      	bne.n	8002f6e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f5c:	68f9      	ldr	r1, [r7, #12]
 8002f5e:	6809      	ldr	r1, [r1, #0]
 8002f60:	431a      	orrs	r2, r3
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	3318      	adds	r3, #24
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	440b      	add	r3, r1
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	e00f      	b.n	8002f8e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f78:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f7e:	68f9      	ldr	r1, [r7, #12]
 8002f80:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002f82:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	3318      	adds	r3, #24
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	440b      	add	r3, r1
 8002f8c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6819      	ldr	r1, [r3, #0]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	691a      	ldr	r2, [r3, #16]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	3318      	adds	r3, #24
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	440b      	add	r3, r1
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	7d1b      	ldrb	r3, [r3, #20]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d111      	bne.n	8002fce <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	3318      	adds	r3, #24
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	6811      	ldr	r1, [r2, #0]
 8002fbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	3318      	adds	r3, #24
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	440b      	add	r3, r1
 8002fca:	3304      	adds	r3, #4
 8002fcc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3307      	adds	r3, #7
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	061a      	lsls	r2, r3, #24
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3306      	adds	r3, #6
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	041b      	lsls	r3, r3, #16
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3305      	adds	r3, #5
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	3204      	adds	r2, #4
 8002fee:	7812      	ldrb	r2, [r2, #0]
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	6811      	ldr	r1, [r2, #0]
 8002ff6:	ea43 0200 	orr.w	r2, r3, r0
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	440b      	add	r3, r1
 8003000:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003004:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3303      	adds	r3, #3
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	061a      	lsls	r2, r3, #24
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3302      	adds	r3, #2
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	041b      	lsls	r3, r3, #16
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3301      	adds	r3, #1
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	4313      	orrs	r3, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	7812      	ldrb	r2, [r2, #0]
 8003026:	4610      	mov	r0, r2
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	6811      	ldr	r1, [r2, #0]
 800302c:	ea43 0200 	orr.w	r2, r3, r0
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	440b      	add	r3, r1
 8003036:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800303a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	3318      	adds	r3, #24
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	4413      	add	r3, r2
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	6811      	ldr	r1, [r2, #0]
 800304e:	f043 0201 	orr.w	r2, r3, #1
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	3318      	adds	r3, #24
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	440b      	add	r3, r1
 800305a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800305c:	2300      	movs	r3, #0
 800305e:	e00e      	b.n	800307e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e006      	b.n	800307e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
  }
}
 800307e:	4618      	mov	r0, r3
 8003080:	3724      	adds	r7, #36	; 0x24
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800308a:	b480      	push	{r7}
 800308c:	b087      	sub	sp, #28
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
 8003096:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800309e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80030a0:	7dfb      	ldrb	r3, [r7, #23]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d003      	beq.n	80030ae <HAL_CAN_GetRxMessage+0x24>
 80030a6:	7dfb      	ldrb	r3, [r7, #23]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	f040 80f3 	bne.w	8003294 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10e      	bne.n	80030d2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d116      	bne.n	80030f0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e0e7      	b.n	80032a2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d107      	bne.n	80030f0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0d8      	b.n	80032a2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	331b      	adds	r3, #27
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	4413      	add	r3, r2
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0204 	and.w	r2, r3, #4
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10c      	bne.n	8003128 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	331b      	adds	r3, #27
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	4413      	add	r3, r2
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	0d5b      	lsrs	r3, r3, #21
 800311e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	e00b      	b.n	8003140 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	331b      	adds	r3, #27
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	4413      	add	r3, r2
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	08db      	lsrs	r3, r3, #3
 8003138:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	331b      	adds	r3, #27
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	4413      	add	r3, r2
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0202 	and.w	r2, r3, #2
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	331b      	adds	r3, #27
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	4413      	add	r3, r2
 8003162:	3304      	adds	r3, #4
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 020f 	and.w	r2, r3, #15
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	331b      	adds	r3, #27
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	4413      	add	r3, r2
 800317a:	3304      	adds	r3, #4
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	0a1b      	lsrs	r3, r3, #8
 8003180:	b2da      	uxtb	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	331b      	adds	r3, #27
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	4413      	add	r3, r2
 8003192:	3304      	adds	r3, #4
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	0c1b      	lsrs	r3, r3, #16
 8003198:	b29a      	uxth	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	4413      	add	r3, r2
 80031be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	0a1a      	lsrs	r2, r3, #8
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	3301      	adds	r3, #1
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	0c1a      	lsrs	r2, r3, #16
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	3302      	adds	r3, #2
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	0e1a      	lsrs	r2, r3, #24
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	3303      	adds	r3, #3
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	4413      	add	r3, r2
 800320c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	3304      	adds	r3, #4
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	4413      	add	r3, r2
 8003224:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	0a1a      	lsrs	r2, r3, #8
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	3305      	adds	r3, #5
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	4413      	add	r3, r2
 800323e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	0c1a      	lsrs	r2, r3, #16
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	3306      	adds	r3, #6
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	4413      	add	r3, r2
 8003258:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	0e1a      	lsrs	r2, r3, #24
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	3307      	adds	r3, #7
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d108      	bne.n	8003280 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 0220 	orr.w	r2, r2, #32
 800327c:	60da      	str	r2, [r3, #12]
 800327e:	e007      	b.n	8003290 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0220 	orr.w	r2, r2, #32
 800328e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	e006      	b.n	80032a2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
  }
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	371c      	adds	r7, #28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b085      	sub	sp, #20
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032be:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d002      	beq.n	80032cc <HAL_CAN_ActivateNotification+0x1e>
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d109      	bne.n	80032e0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6959      	ldr	r1, [r3, #20]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	e006      	b.n	80032ee <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
  }
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b08a      	sub	sp, #40	; 0x28
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003302:	2300      	movs	r3, #0
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d07c      	beq.n	800343a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d023      	beq.n	8003392 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2201      	movs	r2, #1
 8003350:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f983 	bl	8003668 <HAL_CAN_TxMailbox0CompleteCallback>
 8003362:	e016      	b.n	8003392 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b00      	cmp	r3, #0
 800336c:	d004      	beq.n	8003378 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
 8003376:	e00c      	b.n	8003392 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d004      	beq.n	800338c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
 800338a:	e002      	b.n	8003392 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f989 	bl	80036a4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003398:	2b00      	cmp	r3, #0
 800339a:	d024      	beq.n	80033e6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f963 	bl	800367c <HAL_CAN_TxMailbox1CompleteCallback>
 80033b6:	e016      	b.n	80033e6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d004      	beq.n	80033cc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ca:	e00c      	b.n	80033e6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d004      	beq.n	80033e0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
 80033de:	e002      	b.n	80033e6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f969 	bl	80036b8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d024      	beq.n	800343a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f943 	bl	8003690 <HAL_CAN_TxMailbox2CompleteCallback>
 800340a:	e016      	b.n	800343a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d004      	beq.n	8003420 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
 800341e:	e00c      	b.n	800343a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d004      	beq.n	8003434 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
 8003432:	e002      	b.n	800343a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f949 	bl	80036cc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00c      	beq.n	800345e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f003 0310 	and.w	r3, r3, #16
 800344a:	2b00      	cmp	r3, #0
 800344c:	d007      	beq.n	800345e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003454:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2210      	movs	r2, #16
 800345c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00b      	beq.n	8003480 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d006      	beq.n	8003480 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2208      	movs	r2, #8
 8003478:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f930 	bl	80036e0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7fe fc53 	bl	8001d44 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00c      	beq.n	80034c2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d007      	beq.n	80034c2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2210      	movs	r2, #16
 80034c0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00b      	beq.n	80034e4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d006      	beq.n	80034e4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2208      	movs	r2, #8
 80034dc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f912 	bl	8003708 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d009      	beq.n	8003502 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f8f9 	bl	80036f4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00b      	beq.n	8003524 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b00      	cmp	r3, #0
 8003514:	d006      	beq.n	8003524 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2210      	movs	r2, #16
 800351c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f8fc 	bl	800371c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00b      	beq.n	8003546 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b00      	cmp	r3, #0
 8003536:	d006      	beq.n	8003546 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2208      	movs	r2, #8
 800353e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f8f5 	bl	8003730 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d07b      	beq.n	8003648 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b00      	cmp	r3, #0
 8003558:	d072      	beq.n	8003640 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003560:	2b00      	cmp	r3, #0
 8003562:	d008      	beq.n	8003576 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	f043 0302 	orr.w	r3, r3, #2
 8003590:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	f043 0304 	orr.w	r3, r3, #4
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d043      	beq.n	8003640 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d03e      	beq.n	8003640 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035c8:	2b60      	cmp	r3, #96	; 0x60
 80035ca:	d02b      	beq.n	8003624 <HAL_CAN_IRQHandler+0x32a>
 80035cc:	2b60      	cmp	r3, #96	; 0x60
 80035ce:	d82e      	bhi.n	800362e <HAL_CAN_IRQHandler+0x334>
 80035d0:	2b50      	cmp	r3, #80	; 0x50
 80035d2:	d022      	beq.n	800361a <HAL_CAN_IRQHandler+0x320>
 80035d4:	2b50      	cmp	r3, #80	; 0x50
 80035d6:	d82a      	bhi.n	800362e <HAL_CAN_IRQHandler+0x334>
 80035d8:	2b40      	cmp	r3, #64	; 0x40
 80035da:	d019      	beq.n	8003610 <HAL_CAN_IRQHandler+0x316>
 80035dc:	2b40      	cmp	r3, #64	; 0x40
 80035de:	d826      	bhi.n	800362e <HAL_CAN_IRQHandler+0x334>
 80035e0:	2b30      	cmp	r3, #48	; 0x30
 80035e2:	d010      	beq.n	8003606 <HAL_CAN_IRQHandler+0x30c>
 80035e4:	2b30      	cmp	r3, #48	; 0x30
 80035e6:	d822      	bhi.n	800362e <HAL_CAN_IRQHandler+0x334>
 80035e8:	2b10      	cmp	r3, #16
 80035ea:	d002      	beq.n	80035f2 <HAL_CAN_IRQHandler+0x2f8>
 80035ec:	2b20      	cmp	r3, #32
 80035ee:	d005      	beq.n	80035fc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80035f0:	e01d      	b.n	800362e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	f043 0308 	orr.w	r3, r3, #8
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035fa:	e019      	b.n	8003630 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	f043 0310 	orr.w	r3, r3, #16
 8003602:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003604:	e014      	b.n	8003630 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	f043 0320 	orr.w	r3, r3, #32
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800360e:	e00f      	b.n	8003630 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003618:	e00a      	b.n	8003630 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003620:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003622:	e005      	b.n	8003630 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800362c:	e000      	b.n	8003630 <HAL_CAN_IRQHandler+0x336>
            break;
 800362e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699a      	ldr	r2, [r3, #24]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800363e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2204      	movs	r2, #4
 8003646:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	2b00      	cmp	r3, #0
 800364c:	d008      	beq.n	8003660 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f872 	bl	8003744 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003660:	bf00      	nop
 8003662:	3728      	adds	r7, #40	; 0x28
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003768:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <__NVIC_SetPriorityGrouping+0x40>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003774:	4013      	ands	r3, r2
 8003776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003780:	4b06      	ldr	r3, [pc, #24]	; (800379c <__NVIC_SetPriorityGrouping+0x44>)
 8003782:	4313      	orrs	r3, r2
 8003784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003786:	4a04      	ldr	r2, [pc, #16]	; (8003798 <__NVIC_SetPriorityGrouping+0x40>)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	60d3      	str	r3, [r2, #12]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	e000ed00 	.word	0xe000ed00
 800379c:	05fa0000 	.word	0x05fa0000

080037a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a4:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <__NVIC_GetPriorityGrouping+0x18>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	0a1b      	lsrs	r3, r3, #8
 80037aa:	f003 0307 	and.w	r3, r3, #7
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	e000ed00 	.word	0xe000ed00

080037bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	db0b      	blt.n	80037e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	f003 021f 	and.w	r2, r3, #31
 80037d4:	4907      	ldr	r1, [pc, #28]	; (80037f4 <__NVIC_EnableIRQ+0x38>)
 80037d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	2001      	movs	r0, #1
 80037de:	fa00 f202 	lsl.w	r2, r0, r2
 80037e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	e000e100 	.word	0xe000e100

080037f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	6039      	str	r1, [r7, #0]
 8003802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003808:	2b00      	cmp	r3, #0
 800380a:	db0a      	blt.n	8003822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	b2da      	uxtb	r2, r3
 8003810:	490c      	ldr	r1, [pc, #48]	; (8003844 <__NVIC_SetPriority+0x4c>)
 8003812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003816:	0112      	lsls	r2, r2, #4
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	440b      	add	r3, r1
 800381c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003820:	e00a      	b.n	8003838 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	b2da      	uxtb	r2, r3
 8003826:	4908      	ldr	r1, [pc, #32]	; (8003848 <__NVIC_SetPriority+0x50>)
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	3b04      	subs	r3, #4
 8003830:	0112      	lsls	r2, r2, #4
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	440b      	add	r3, r1
 8003836:	761a      	strb	r2, [r3, #24]
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	e000e100 	.word	0xe000e100
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800384c:	b480      	push	{r7}
 800384e:	b089      	sub	sp, #36	; 0x24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f1c3 0307 	rsb	r3, r3, #7
 8003866:	2b04      	cmp	r3, #4
 8003868:	bf28      	it	cs
 800386a:	2304      	movcs	r3, #4
 800386c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	3304      	adds	r3, #4
 8003872:	2b06      	cmp	r3, #6
 8003874:	d902      	bls.n	800387c <NVIC_EncodePriority+0x30>
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3b03      	subs	r3, #3
 800387a:	e000      	b.n	800387e <NVIC_EncodePriority+0x32>
 800387c:	2300      	movs	r3, #0
 800387e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003880:	f04f 32ff 	mov.w	r2, #4294967295
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43da      	mvns	r2, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	401a      	ands	r2, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003894:	f04f 31ff 	mov.w	r1, #4294967295
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	fa01 f303 	lsl.w	r3, r1, r3
 800389e:	43d9      	mvns	r1, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a4:	4313      	orrs	r3, r2
         );
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3724      	adds	r7, #36	; 0x24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
	...

080038b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3b01      	subs	r3, #1
 80038c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038c4:	d301      	bcc.n	80038ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038c6:	2301      	movs	r3, #1
 80038c8:	e00f      	b.n	80038ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ca:	4a0a      	ldr	r2, [pc, #40]	; (80038f4 <SysTick_Config+0x40>)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038d2:	210f      	movs	r1, #15
 80038d4:	f04f 30ff 	mov.w	r0, #4294967295
 80038d8:	f7ff ff8e 	bl	80037f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038dc:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <SysTick_Config+0x40>)
 80038de:	2200      	movs	r2, #0
 80038e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038e2:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <SysTick_Config+0x40>)
 80038e4:	2207      	movs	r2, #7
 80038e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	e000e010 	.word	0xe000e010

080038f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff ff29 	bl	8003758 <__NVIC_SetPriorityGrouping>
}
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800390e:	b580      	push	{r7, lr}
 8003910:	b086      	sub	sp, #24
 8003912:	af00      	add	r7, sp, #0
 8003914:	4603      	mov	r3, r0
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	607a      	str	r2, [r7, #4]
 800391a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003920:	f7ff ff3e 	bl	80037a0 <__NVIC_GetPriorityGrouping>
 8003924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	6978      	ldr	r0, [r7, #20]
 800392c:	f7ff ff8e 	bl	800384c <NVIC_EncodePriority>
 8003930:	4602      	mov	r2, r0
 8003932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003936:	4611      	mov	r1, r2
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff ff5d 	bl	80037f8 <__NVIC_SetPriority>
}
 800393e:	bf00      	nop
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	4603      	mov	r3, r0
 800394e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff ff31 	bl	80037bc <__NVIC_EnableIRQ>
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff ffa2 	bl	80038b4 <SysTick_Config>
 8003970:	4603      	mov	r3, r0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800397c:	b480      	push	{r7}
 800397e:	b089      	sub	sp, #36	; 0x24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800398e:	2300      	movs	r3, #0
 8003990:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003992:	2300      	movs	r3, #0
 8003994:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003996:	2300      	movs	r3, #0
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	e175      	b.n	8003c88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800399c:	2201      	movs	r2, #1
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	4013      	ands	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	f040 8164 	bne.w	8003c82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d00b      	beq.n	80039da <HAL_GPIO_Init+0x5e>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d007      	beq.n	80039da <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039ce:	2b11      	cmp	r3, #17
 80039d0:	d003      	beq.n	80039da <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b12      	cmp	r3, #18
 80039d8:	d130      	bne.n	8003a3c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	2203      	movs	r2, #3
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	43db      	mvns	r3, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4013      	ands	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a10:	2201      	movs	r2, #1
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	091b      	lsrs	r3, r3, #4
 8003a26:	f003 0201 	and.w	r2, r3, #1
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	2203      	movs	r2, #3
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4013      	ands	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d003      	beq.n	8003a7c <HAL_GPIO_Init+0x100>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b12      	cmp	r3, #18
 8003a7a:	d123      	bne.n	8003ac4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	08da      	lsrs	r2, r3, #3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3208      	adds	r2, #8
 8003a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	220f      	movs	r2, #15
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	08da      	lsrs	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3208      	adds	r2, #8
 8003abe:	69b9      	ldr	r1, [r7, #24]
 8003ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	2203      	movs	r2, #3
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 0203 	and.w	r2, r3, #3
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 80be 	beq.w	8003c82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b06:	4b66      	ldr	r3, [pc, #408]	; (8003ca0 <HAL_GPIO_Init+0x324>)
 8003b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0a:	4a65      	ldr	r2, [pc, #404]	; (8003ca0 <HAL_GPIO_Init+0x324>)
 8003b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b10:	6453      	str	r3, [r2, #68]	; 0x44
 8003b12:	4b63      	ldr	r3, [pc, #396]	; (8003ca0 <HAL_GPIO_Init+0x324>)
 8003b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003b1e:	4a61      	ldr	r2, [pc, #388]	; (8003ca4 <HAL_GPIO_Init+0x328>)
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	089b      	lsrs	r3, r3, #2
 8003b24:	3302      	adds	r3, #2
 8003b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	220f      	movs	r2, #15
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a58      	ldr	r2, [pc, #352]	; (8003ca8 <HAL_GPIO_Init+0x32c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d037      	beq.n	8003bba <HAL_GPIO_Init+0x23e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a57      	ldr	r2, [pc, #348]	; (8003cac <HAL_GPIO_Init+0x330>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d031      	beq.n	8003bb6 <HAL_GPIO_Init+0x23a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a56      	ldr	r2, [pc, #344]	; (8003cb0 <HAL_GPIO_Init+0x334>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d02b      	beq.n	8003bb2 <HAL_GPIO_Init+0x236>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a55      	ldr	r2, [pc, #340]	; (8003cb4 <HAL_GPIO_Init+0x338>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d025      	beq.n	8003bae <HAL_GPIO_Init+0x232>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a54      	ldr	r2, [pc, #336]	; (8003cb8 <HAL_GPIO_Init+0x33c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d01f      	beq.n	8003baa <HAL_GPIO_Init+0x22e>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a53      	ldr	r2, [pc, #332]	; (8003cbc <HAL_GPIO_Init+0x340>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d019      	beq.n	8003ba6 <HAL_GPIO_Init+0x22a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a52      	ldr	r2, [pc, #328]	; (8003cc0 <HAL_GPIO_Init+0x344>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d013      	beq.n	8003ba2 <HAL_GPIO_Init+0x226>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a51      	ldr	r2, [pc, #324]	; (8003cc4 <HAL_GPIO_Init+0x348>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00d      	beq.n	8003b9e <HAL_GPIO_Init+0x222>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a50      	ldr	r2, [pc, #320]	; (8003cc8 <HAL_GPIO_Init+0x34c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d007      	beq.n	8003b9a <HAL_GPIO_Init+0x21e>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a4f      	ldr	r2, [pc, #316]	; (8003ccc <HAL_GPIO_Init+0x350>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d101      	bne.n	8003b96 <HAL_GPIO_Init+0x21a>
 8003b92:	2309      	movs	r3, #9
 8003b94:	e012      	b.n	8003bbc <HAL_GPIO_Init+0x240>
 8003b96:	230a      	movs	r3, #10
 8003b98:	e010      	b.n	8003bbc <HAL_GPIO_Init+0x240>
 8003b9a:	2308      	movs	r3, #8
 8003b9c:	e00e      	b.n	8003bbc <HAL_GPIO_Init+0x240>
 8003b9e:	2307      	movs	r3, #7
 8003ba0:	e00c      	b.n	8003bbc <HAL_GPIO_Init+0x240>
 8003ba2:	2306      	movs	r3, #6
 8003ba4:	e00a      	b.n	8003bbc <HAL_GPIO_Init+0x240>
 8003ba6:	2305      	movs	r3, #5
 8003ba8:	e008      	b.n	8003bbc <HAL_GPIO_Init+0x240>
 8003baa:	2304      	movs	r3, #4
 8003bac:	e006      	b.n	8003bbc <HAL_GPIO_Init+0x240>
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e004      	b.n	8003bbc <HAL_GPIO_Init+0x240>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e002      	b.n	8003bbc <HAL_GPIO_Init+0x240>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <HAL_GPIO_Init+0x240>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	f002 0203 	and.w	r2, r2, #3
 8003bc2:	0092      	lsls	r2, r2, #2
 8003bc4:	4093      	lsls	r3, r2
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003bcc:	4935      	ldr	r1, [pc, #212]	; (8003ca4 <HAL_GPIO_Init+0x328>)
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	089b      	lsrs	r3, r3, #2
 8003bd2:	3302      	adds	r3, #2
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bda:	4b3d      	ldr	r3, [pc, #244]	; (8003cd0 <HAL_GPIO_Init+0x354>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	43db      	mvns	r3, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4013      	ands	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bfe:	4a34      	ldr	r2, [pc, #208]	; (8003cd0 <HAL_GPIO_Init+0x354>)
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c04:	4b32      	ldr	r3, [pc, #200]	; (8003cd0 <HAL_GPIO_Init+0x354>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4013      	ands	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c28:	4a29      	ldr	r2, [pc, #164]	; (8003cd0 <HAL_GPIO_Init+0x354>)
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c2e:	4b28      	ldr	r3, [pc, #160]	; (8003cd0 <HAL_GPIO_Init+0x354>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	43db      	mvns	r3, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c52:	4a1f      	ldr	r2, [pc, #124]	; (8003cd0 <HAL_GPIO_Init+0x354>)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c58:	4b1d      	ldr	r3, [pc, #116]	; (8003cd0 <HAL_GPIO_Init+0x354>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c7c:	4a14      	ldr	r2, [pc, #80]	; (8003cd0 <HAL_GPIO_Init+0x354>)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	3301      	adds	r3, #1
 8003c86:	61fb      	str	r3, [r7, #28]
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	2b0f      	cmp	r3, #15
 8003c8c:	f67f ae86 	bls.w	800399c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003c90:	bf00      	nop
 8003c92:	bf00      	nop
 8003c94:	3724      	adds	r7, #36	; 0x24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	40013800 	.word	0x40013800
 8003ca8:	40020000 	.word	0x40020000
 8003cac:	40020400 	.word	0x40020400
 8003cb0:	40020800 	.word	0x40020800
 8003cb4:	40020c00 	.word	0x40020c00
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40021400 	.word	0x40021400
 8003cc0:	40021800 	.word	0x40021800
 8003cc4:	40021c00 	.word	0x40021c00
 8003cc8:	40022000 	.word	0x40022000
 8003ccc:	40022400 	.word	0x40022400
 8003cd0:	40013c00 	.word	0x40013c00

08003cd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	887b      	ldrh	r3, [r7, #2]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cec:	2301      	movs	r3, #1
 8003cee:	73fb      	strb	r3, [r7, #15]
 8003cf0:	e001      	b.n	8003cf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	807b      	strh	r3, [r7, #2]
 8003d10:	4613      	mov	r3, r2
 8003d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d14:	787b      	ldrb	r3, [r7, #1]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d1a:	887a      	ldrh	r2, [r7, #2]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003d20:	e003      	b.n	8003d2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003d22:	887b      	ldrh	r3, [r7, #2]
 8003d24:	041a      	lsls	r2, r3, #16
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	619a      	str	r2, [r3, #24]
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
	...

08003d38 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d42:	4b23      	ldr	r3, [pc, #140]	; (8003dd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	4a22      	ldr	r2, [pc, #136]	; (8003dd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d4e:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d5a:	4b1e      	ldr	r3, [pc, #120]	; (8003dd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a1d      	ldr	r2, [pc, #116]	; (8003dd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d64:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d66:	f7fe f9ef 	bl	8002148 <HAL_GetTick>
 8003d6a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d6c:	e009      	b.n	8003d82 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d6e:	f7fe f9eb 	bl	8002148 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d7c:	d901      	bls.n	8003d82 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e022      	b.n	8003dc8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d82:	4b14      	ldr	r3, [pc, #80]	; (8003dd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d8e:	d1ee      	bne.n	8003d6e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003d90:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a0f      	ldr	r2, [pc, #60]	; (8003dd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d9c:	f7fe f9d4 	bl	8002148 <HAL_GetTick>
 8003da0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003da2:	e009      	b.n	8003db8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003da4:	f7fe f9d0 	bl	8002148 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003db2:	d901      	bls.n	8003db8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e007      	b.n	8003dc8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003db8:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dc4:	d1ee      	bne.n	8003da4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	40007000 	.word	0x40007000

08003dd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003de0:	2300      	movs	r3, #0
 8003de2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e29b      	b.n	8004326 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 8087 	beq.w	8003f0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dfc:	4b96      	ldr	r3, [pc, #600]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 030c 	and.w	r3, r3, #12
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d00c      	beq.n	8003e22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e08:	4b93      	ldr	r3, [pc, #588]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 030c 	and.w	r3, r3, #12
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d112      	bne.n	8003e3a <HAL_RCC_OscConfig+0x62>
 8003e14:	4b90      	ldr	r3, [pc, #576]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e20:	d10b      	bne.n	8003e3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e22:	4b8d      	ldr	r3, [pc, #564]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d06c      	beq.n	8003f08 <HAL_RCC_OscConfig+0x130>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d168      	bne.n	8003f08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e275      	b.n	8004326 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e42:	d106      	bne.n	8003e52 <HAL_RCC_OscConfig+0x7a>
 8003e44:	4b84      	ldr	r3, [pc, #528]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a83      	ldr	r2, [pc, #524]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	e02e      	b.n	8003eb0 <HAL_RCC_OscConfig+0xd8>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10c      	bne.n	8003e74 <HAL_RCC_OscConfig+0x9c>
 8003e5a:	4b7f      	ldr	r3, [pc, #508]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a7e      	ldr	r2, [pc, #504]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	4b7c      	ldr	r3, [pc, #496]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a7b      	ldr	r2, [pc, #492]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003e6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	e01d      	b.n	8003eb0 <HAL_RCC_OscConfig+0xd8>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCC_OscConfig+0xc0>
 8003e7e:	4b76      	ldr	r3, [pc, #472]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a75      	ldr	r2, [pc, #468]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	4b73      	ldr	r3, [pc, #460]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a72      	ldr	r2, [pc, #456]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	e00b      	b.n	8003eb0 <HAL_RCC_OscConfig+0xd8>
 8003e98:	4b6f      	ldr	r3, [pc, #444]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a6e      	ldr	r2, [pc, #440]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	4b6c      	ldr	r3, [pc, #432]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a6b      	ldr	r2, [pc, #428]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d013      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb8:	f7fe f946 	bl	8002148 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec0:	f7fe f942 	bl	8002148 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b64      	cmp	r3, #100	; 0x64
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e229      	b.n	8004326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed2:	4b61      	ldr	r3, [pc, #388]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0xe8>
 8003ede:	e014      	b.n	8003f0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee0:	f7fe f932 	bl	8002148 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee8:	f7fe f92e 	bl	8002148 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b64      	cmp	r3, #100	; 0x64
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e215      	b.n	8004326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003efa:	4b57      	ldr	r3, [pc, #348]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x110>
 8003f06:	e000      	b.n	8003f0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d069      	beq.n	8003fea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f16:	4b50      	ldr	r3, [pc, #320]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00b      	beq.n	8003f3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f22:	4b4d      	ldr	r3, [pc, #308]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 030c 	and.w	r3, r3, #12
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d11c      	bne.n	8003f68 <HAL_RCC_OscConfig+0x190>
 8003f2e:	4b4a      	ldr	r3, [pc, #296]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d116      	bne.n	8003f68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f3a:	4b47      	ldr	r3, [pc, #284]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d005      	beq.n	8003f52 <HAL_RCC_OscConfig+0x17a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d001      	beq.n	8003f52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e1e9      	b.n	8004326 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f52:	4b41      	ldr	r3, [pc, #260]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	493d      	ldr	r1, [pc, #244]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f66:	e040      	b.n	8003fea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d023      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f70:	4b39      	ldr	r3, [pc, #228]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a38      	ldr	r2, [pc, #224]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003f76:	f043 0301 	orr.w	r3, r3, #1
 8003f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7c:	f7fe f8e4 	bl	8002148 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f84:	f7fe f8e0 	bl	8002148 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e1c7      	b.n	8004326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f96:	4b30      	ldr	r3, [pc, #192]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0f0      	beq.n	8003f84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa2:	4b2d      	ldr	r3, [pc, #180]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4929      	ldr	r1, [pc, #164]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	600b      	str	r3, [r1, #0]
 8003fb6:	e018      	b.n	8003fea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fb8:	4b27      	ldr	r3, [pc, #156]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a26      	ldr	r2, [pc, #152]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003fbe:	f023 0301 	bic.w	r3, r3, #1
 8003fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc4:	f7fe f8c0 	bl	8002148 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fcc:	f7fe f8bc 	bl	8002148 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e1a3      	b.n	8004326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fde:	4b1e      	ldr	r3, [pc, #120]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1f0      	bne.n	8003fcc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d038      	beq.n	8004068 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d019      	beq.n	8004032 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ffe:	4b16      	ldr	r3, [pc, #88]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8004000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004002:	4a15      	ldr	r2, [pc, #84]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400a:	f7fe f89d 	bl	8002148 <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004010:	e008      	b.n	8004024 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004012:	f7fe f899 	bl	8002148 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e180      	b.n	8004326 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004024:	4b0c      	ldr	r3, [pc, #48]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8004026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0f0      	beq.n	8004012 <HAL_RCC_OscConfig+0x23a>
 8004030:	e01a      	b.n	8004068 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8004034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004036:	4a08      	ldr	r2, [pc, #32]	; (8004058 <HAL_RCC_OscConfig+0x280>)
 8004038:	f023 0301 	bic.w	r3, r3, #1
 800403c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403e:	f7fe f883 	bl	8002148 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004044:	e00a      	b.n	800405c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004046:	f7fe f87f 	bl	8002148 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d903      	bls.n	800405c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e166      	b.n	8004326 <HAL_RCC_OscConfig+0x54e>
 8004058:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800405c:	4b92      	ldr	r3, [pc, #584]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 800405e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1ee      	bne.n	8004046 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 80a4 	beq.w	80041be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004076:	4b8c      	ldr	r3, [pc, #560]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10d      	bne.n	800409e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004082:	4b89      	ldr	r3, [pc, #548]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	4a88      	ldr	r2, [pc, #544]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 8004088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800408c:	6413      	str	r3, [r2, #64]	; 0x40
 800408e:	4b86      	ldr	r3, [pc, #536]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004096:	60bb      	str	r3, [r7, #8]
 8004098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800409a:	2301      	movs	r3, #1
 800409c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800409e:	4b83      	ldr	r3, [pc, #524]	; (80042ac <HAL_RCC_OscConfig+0x4d4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d118      	bne.n	80040dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80040aa:	4b80      	ldr	r3, [pc, #512]	; (80042ac <HAL_RCC_OscConfig+0x4d4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a7f      	ldr	r2, [pc, #508]	; (80042ac <HAL_RCC_OscConfig+0x4d4>)
 80040b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040b6:	f7fe f847 	bl	8002148 <HAL_GetTick>
 80040ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040be:	f7fe f843 	bl	8002148 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b64      	cmp	r3, #100	; 0x64
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e12a      	b.n	8004326 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040d0:	4b76      	ldr	r3, [pc, #472]	; (80042ac <HAL_RCC_OscConfig+0x4d4>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0f0      	beq.n	80040be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d106      	bne.n	80040f2 <HAL_RCC_OscConfig+0x31a>
 80040e4:	4b70      	ldr	r3, [pc, #448]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 80040e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e8:	4a6f      	ldr	r2, [pc, #444]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	6713      	str	r3, [r2, #112]	; 0x70
 80040f0:	e02d      	b.n	800414e <HAL_RCC_OscConfig+0x376>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10c      	bne.n	8004114 <HAL_RCC_OscConfig+0x33c>
 80040fa:	4b6b      	ldr	r3, [pc, #428]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 80040fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fe:	4a6a      	ldr	r2, [pc, #424]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 8004100:	f023 0301 	bic.w	r3, r3, #1
 8004104:	6713      	str	r3, [r2, #112]	; 0x70
 8004106:	4b68      	ldr	r3, [pc, #416]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 8004108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410a:	4a67      	ldr	r2, [pc, #412]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 800410c:	f023 0304 	bic.w	r3, r3, #4
 8004110:	6713      	str	r3, [r2, #112]	; 0x70
 8004112:	e01c      	b.n	800414e <HAL_RCC_OscConfig+0x376>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	2b05      	cmp	r3, #5
 800411a:	d10c      	bne.n	8004136 <HAL_RCC_OscConfig+0x35e>
 800411c:	4b62      	ldr	r3, [pc, #392]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 800411e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004120:	4a61      	ldr	r2, [pc, #388]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 8004122:	f043 0304 	orr.w	r3, r3, #4
 8004126:	6713      	str	r3, [r2, #112]	; 0x70
 8004128:	4b5f      	ldr	r3, [pc, #380]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 800412a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412c:	4a5e      	ldr	r2, [pc, #376]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 800412e:	f043 0301 	orr.w	r3, r3, #1
 8004132:	6713      	str	r3, [r2, #112]	; 0x70
 8004134:	e00b      	b.n	800414e <HAL_RCC_OscConfig+0x376>
 8004136:	4b5c      	ldr	r3, [pc, #368]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 8004138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413a:	4a5b      	ldr	r2, [pc, #364]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 800413c:	f023 0301 	bic.w	r3, r3, #1
 8004140:	6713      	str	r3, [r2, #112]	; 0x70
 8004142:	4b59      	ldr	r3, [pc, #356]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 8004144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004146:	4a58      	ldr	r2, [pc, #352]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 8004148:	f023 0304 	bic.w	r3, r3, #4
 800414c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d015      	beq.n	8004182 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004156:	f7fd fff7 	bl	8002148 <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800415c:	e00a      	b.n	8004174 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415e:	f7fd fff3 	bl	8002148 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	f241 3288 	movw	r2, #5000	; 0x1388
 800416c:	4293      	cmp	r3, r2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e0d8      	b.n	8004326 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004174:	4b4c      	ldr	r3, [pc, #304]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 8004176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0ee      	beq.n	800415e <HAL_RCC_OscConfig+0x386>
 8004180:	e014      	b.n	80041ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004182:	f7fd ffe1 	bl	8002148 <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004188:	e00a      	b.n	80041a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800418a:	f7fd ffdd 	bl	8002148 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	f241 3288 	movw	r2, #5000	; 0x1388
 8004198:	4293      	cmp	r3, r2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e0c2      	b.n	8004326 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041a0:	4b41      	ldr	r3, [pc, #260]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 80041a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1ee      	bne.n	800418a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041ac:	7dfb      	ldrb	r3, [r7, #23]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d105      	bne.n	80041be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b2:	4b3d      	ldr	r3, [pc, #244]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	4a3c      	ldr	r2, [pc, #240]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 80041b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 80ae 	beq.w	8004324 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041c8:	4b37      	ldr	r3, [pc, #220]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 030c 	and.w	r3, r3, #12
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d06d      	beq.n	80042b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d14b      	bne.n	8004274 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041dc:	4b32      	ldr	r3, [pc, #200]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a31      	ldr	r2, [pc, #196]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 80041e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e8:	f7fd ffae 	bl	8002148 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f0:	f7fd ffaa 	bl	8002148 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e091      	b.n	8004326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004202:	4b29      	ldr	r3, [pc, #164]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69da      	ldr	r2, [r3, #28]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	019b      	lsls	r3, r3, #6
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	085b      	lsrs	r3, r3, #1
 8004226:	3b01      	subs	r3, #1
 8004228:	041b      	lsls	r3, r3, #16
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	061b      	lsls	r3, r3, #24
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	071b      	lsls	r3, r3, #28
 800423a:	491b      	ldr	r1, [pc, #108]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 800423c:	4313      	orrs	r3, r2
 800423e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004240:	4b19      	ldr	r3, [pc, #100]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a18      	ldr	r2, [pc, #96]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 8004246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800424a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fd ff7c 	bl	8002148 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004254:	f7fd ff78 	bl	8002148 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e05f      	b.n	8004326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004266:	4b10      	ldr	r3, [pc, #64]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0f0      	beq.n	8004254 <HAL_RCC_OscConfig+0x47c>
 8004272:	e057      	b.n	8004324 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004274:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a0b      	ldr	r2, [pc, #44]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 800427a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800427e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004280:	f7fd ff62 	bl	8002148 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004288:	f7fd ff5e 	bl	8002148 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e045      	b.n	8004326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800429a:	4b03      	ldr	r3, [pc, #12]	; (80042a8 <HAL_RCC_OscConfig+0x4d0>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x4b0>
 80042a6:	e03d      	b.n	8004324 <HAL_RCC_OscConfig+0x54c>
 80042a8:	40023800 	.word	0x40023800
 80042ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80042b0:	4b1f      	ldr	r3, [pc, #124]	; (8004330 <HAL_RCC_OscConfig+0x558>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d030      	beq.n	8004320 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d129      	bne.n	8004320 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d122      	bne.n	8004320 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042e0:	4013      	ands	r3, r2
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d119      	bne.n	8004320 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f6:	085b      	lsrs	r3, r3, #1
 80042f8:	3b01      	subs	r3, #1
 80042fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d10f      	bne.n	8004320 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800430c:	429a      	cmp	r2, r3
 800430e:	d107      	bne.n	8004320 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800431c:	429a      	cmp	r2, r3
 800431e:	d001      	beq.n	8004324 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40023800 	.word	0x40023800

08004334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e0d0      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800434c:	4b6a      	ldr	r3, [pc, #424]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d910      	bls.n	800437c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435a:	4b67      	ldr	r3, [pc, #412]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 020f 	bic.w	r2, r3, #15
 8004362:	4965      	ldr	r1, [pc, #404]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	4313      	orrs	r3, r2
 8004368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800436a:	4b63      	ldr	r3, [pc, #396]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0b8      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d020      	beq.n	80043ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004394:	4b59      	ldr	r3, [pc, #356]	; (80044fc <HAL_RCC_ClockConfig+0x1c8>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4a58      	ldr	r2, [pc, #352]	; (80044fc <HAL_RCC_ClockConfig+0x1c8>)
 800439a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800439e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043ac:	4b53      	ldr	r3, [pc, #332]	; (80044fc <HAL_RCC_ClockConfig+0x1c8>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	4a52      	ldr	r2, [pc, #328]	; (80044fc <HAL_RCC_ClockConfig+0x1c8>)
 80043b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b8:	4b50      	ldr	r3, [pc, #320]	; (80044fc <HAL_RCC_ClockConfig+0x1c8>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	494d      	ldr	r1, [pc, #308]	; (80044fc <HAL_RCC_ClockConfig+0x1c8>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d040      	beq.n	8004458 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d107      	bne.n	80043ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043de:	4b47      	ldr	r3, [pc, #284]	; (80044fc <HAL_RCC_ClockConfig+0x1c8>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d115      	bne.n	8004416 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e07f      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d107      	bne.n	8004406 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f6:	4b41      	ldr	r3, [pc, #260]	; (80044fc <HAL_RCC_ClockConfig+0x1c8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d109      	bne.n	8004416 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e073      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004406:	4b3d      	ldr	r3, [pc, #244]	; (80044fc <HAL_RCC_ClockConfig+0x1c8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e06b      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004416:	4b39      	ldr	r3, [pc, #228]	; (80044fc <HAL_RCC_ClockConfig+0x1c8>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f023 0203 	bic.w	r2, r3, #3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	4936      	ldr	r1, [pc, #216]	; (80044fc <HAL_RCC_ClockConfig+0x1c8>)
 8004424:	4313      	orrs	r3, r2
 8004426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004428:	f7fd fe8e 	bl	8002148 <HAL_GetTick>
 800442c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800442e:	e00a      	b.n	8004446 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004430:	f7fd fe8a 	bl	8002148 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	f241 3288 	movw	r2, #5000	; 0x1388
 800443e:	4293      	cmp	r3, r2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e053      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004446:	4b2d      	ldr	r3, [pc, #180]	; (80044fc <HAL_RCC_ClockConfig+0x1c8>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 020c 	and.w	r2, r3, #12
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	429a      	cmp	r2, r3
 8004456:	d1eb      	bne.n	8004430 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004458:	4b27      	ldr	r3, [pc, #156]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d210      	bcs.n	8004488 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004466:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f023 020f 	bic.w	r2, r3, #15
 800446e:	4922      	ldr	r1, [pc, #136]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	4313      	orrs	r3, r2
 8004474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004476:	4b20      	ldr	r3, [pc, #128]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d001      	beq.n	8004488 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e032      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004494:	4b19      	ldr	r3, [pc, #100]	; (80044fc <HAL_RCC_ClockConfig+0x1c8>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4916      	ldr	r1, [pc, #88]	; (80044fc <HAL_RCC_ClockConfig+0x1c8>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044b2:	4b12      	ldr	r3, [pc, #72]	; (80044fc <HAL_RCC_ClockConfig+0x1c8>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	490e      	ldr	r1, [pc, #56]	; (80044fc <HAL_RCC_ClockConfig+0x1c8>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044c6:	f000 f821 	bl	800450c <HAL_RCC_GetSysClockFreq>
 80044ca:	4602      	mov	r2, r0
 80044cc:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <HAL_RCC_ClockConfig+0x1c8>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	091b      	lsrs	r3, r3, #4
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	490a      	ldr	r1, [pc, #40]	; (8004500 <HAL_RCC_ClockConfig+0x1cc>)
 80044d8:	5ccb      	ldrb	r3, [r1, r3]
 80044da:	fa22 f303 	lsr.w	r3, r2, r3
 80044de:	4a09      	ldr	r2, [pc, #36]	; (8004504 <HAL_RCC_ClockConfig+0x1d0>)
 80044e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044e2:	4b09      	ldr	r3, [pc, #36]	; (8004508 <HAL_RCC_ClockConfig+0x1d4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fd fdea 	bl	80020c0 <HAL_InitTick>

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40023c00 	.word	0x40023c00
 80044fc:	40023800 	.word	0x40023800
 8004500:	08006408 	.word	0x08006408
 8004504:	20000000 	.word	0x20000000
 8004508:	20000004 	.word	0x20000004

0800450c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800450c:	b5b0      	push	{r4, r5, r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004512:	2100      	movs	r1, #0
 8004514:	6079      	str	r1, [r7, #4]
 8004516:	2100      	movs	r1, #0
 8004518:	60f9      	str	r1, [r7, #12]
 800451a:	2100      	movs	r1, #0
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800451e:	2100      	movs	r1, #0
 8004520:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004522:	4952      	ldr	r1, [pc, #328]	; (800466c <HAL_RCC_GetSysClockFreq+0x160>)
 8004524:	6889      	ldr	r1, [r1, #8]
 8004526:	f001 010c 	and.w	r1, r1, #12
 800452a:	2908      	cmp	r1, #8
 800452c:	d00d      	beq.n	800454a <HAL_RCC_GetSysClockFreq+0x3e>
 800452e:	2908      	cmp	r1, #8
 8004530:	f200 8094 	bhi.w	800465c <HAL_RCC_GetSysClockFreq+0x150>
 8004534:	2900      	cmp	r1, #0
 8004536:	d002      	beq.n	800453e <HAL_RCC_GetSysClockFreq+0x32>
 8004538:	2904      	cmp	r1, #4
 800453a:	d003      	beq.n	8004544 <HAL_RCC_GetSysClockFreq+0x38>
 800453c:	e08e      	b.n	800465c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800453e:	4b4c      	ldr	r3, [pc, #304]	; (8004670 <HAL_RCC_GetSysClockFreq+0x164>)
 8004540:	60bb      	str	r3, [r7, #8]
      break;
 8004542:	e08e      	b.n	8004662 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004544:	4b4b      	ldr	r3, [pc, #300]	; (8004674 <HAL_RCC_GetSysClockFreq+0x168>)
 8004546:	60bb      	str	r3, [r7, #8]
      break;
 8004548:	e08b      	b.n	8004662 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800454a:	4948      	ldr	r1, [pc, #288]	; (800466c <HAL_RCC_GetSysClockFreq+0x160>)
 800454c:	6849      	ldr	r1, [r1, #4]
 800454e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004552:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004554:	4945      	ldr	r1, [pc, #276]	; (800466c <HAL_RCC_GetSysClockFreq+0x160>)
 8004556:	6849      	ldr	r1, [r1, #4]
 8004558:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800455c:	2900      	cmp	r1, #0
 800455e:	d024      	beq.n	80045aa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004560:	4942      	ldr	r1, [pc, #264]	; (800466c <HAL_RCC_GetSysClockFreq+0x160>)
 8004562:	6849      	ldr	r1, [r1, #4]
 8004564:	0989      	lsrs	r1, r1, #6
 8004566:	4608      	mov	r0, r1
 8004568:	f04f 0100 	mov.w	r1, #0
 800456c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004570:	f04f 0500 	mov.w	r5, #0
 8004574:	ea00 0204 	and.w	r2, r0, r4
 8004578:	ea01 0305 	and.w	r3, r1, r5
 800457c:	493d      	ldr	r1, [pc, #244]	; (8004674 <HAL_RCC_GetSysClockFreq+0x168>)
 800457e:	fb01 f003 	mul.w	r0, r1, r3
 8004582:	2100      	movs	r1, #0
 8004584:	fb01 f102 	mul.w	r1, r1, r2
 8004588:	1844      	adds	r4, r0, r1
 800458a:	493a      	ldr	r1, [pc, #232]	; (8004674 <HAL_RCC_GetSysClockFreq+0x168>)
 800458c:	fba2 0101 	umull	r0, r1, r2, r1
 8004590:	1863      	adds	r3, r4, r1
 8004592:	4619      	mov	r1, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	461a      	mov	r2, r3
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	f7fb fe54 	bl	8000248 <__aeabi_uldivmod>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4613      	mov	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	e04a      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045aa:	4b30      	ldr	r3, [pc, #192]	; (800466c <HAL_RCC_GetSysClockFreq+0x160>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	099b      	lsrs	r3, r3, #6
 80045b0:	461a      	mov	r2, r3
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80045ba:	f04f 0100 	mov.w	r1, #0
 80045be:	ea02 0400 	and.w	r4, r2, r0
 80045c2:	ea03 0501 	and.w	r5, r3, r1
 80045c6:	4620      	mov	r0, r4
 80045c8:	4629      	mov	r1, r5
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	f04f 0300 	mov.w	r3, #0
 80045d2:	014b      	lsls	r3, r1, #5
 80045d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045d8:	0142      	lsls	r2, r0, #5
 80045da:	4610      	mov	r0, r2
 80045dc:	4619      	mov	r1, r3
 80045de:	1b00      	subs	r0, r0, r4
 80045e0:	eb61 0105 	sbc.w	r1, r1, r5
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	018b      	lsls	r3, r1, #6
 80045ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045f2:	0182      	lsls	r2, r0, #6
 80045f4:	1a12      	subs	r2, r2, r0
 80045f6:	eb63 0301 	sbc.w	r3, r3, r1
 80045fa:	f04f 0000 	mov.w	r0, #0
 80045fe:	f04f 0100 	mov.w	r1, #0
 8004602:	00d9      	lsls	r1, r3, #3
 8004604:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004608:	00d0      	lsls	r0, r2, #3
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	1912      	adds	r2, r2, r4
 8004610:	eb45 0303 	adc.w	r3, r5, r3
 8004614:	f04f 0000 	mov.w	r0, #0
 8004618:	f04f 0100 	mov.w	r1, #0
 800461c:	0299      	lsls	r1, r3, #10
 800461e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004622:	0290      	lsls	r0, r2, #10
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4610      	mov	r0, r2
 800462a:	4619      	mov	r1, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	461a      	mov	r2, r3
 8004630:	f04f 0300 	mov.w	r3, #0
 8004634:	f7fb fe08 	bl	8000248 <__aeabi_uldivmod>
 8004638:	4602      	mov	r2, r0
 800463a:	460b      	mov	r3, r1
 800463c:	4613      	mov	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004640:	4b0a      	ldr	r3, [pc, #40]	; (800466c <HAL_RCC_GetSysClockFreq+0x160>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	0c1b      	lsrs	r3, r3, #16
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	3301      	adds	r3, #1
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	fbb2 f3f3 	udiv	r3, r2, r3
 8004658:	60bb      	str	r3, [r7, #8]
      break;
 800465a:	e002      	b.n	8004662 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800465c:	4b04      	ldr	r3, [pc, #16]	; (8004670 <HAL_RCC_GetSysClockFreq+0x164>)
 800465e:	60bb      	str	r3, [r7, #8]
      break;
 8004660:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004662:	68bb      	ldr	r3, [r7, #8]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bdb0      	pop	{r4, r5, r7, pc}
 800466c:	40023800 	.word	0x40023800
 8004670:	00f42400 	.word	0x00f42400
 8004674:	017d7840 	.word	0x017d7840

08004678 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800467c:	4b03      	ldr	r3, [pc, #12]	; (800468c <HAL_RCC_GetHCLKFreq+0x14>)
 800467e:	681b      	ldr	r3, [r3, #0]
}
 8004680:	4618      	mov	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	20000000 	.word	0x20000000

08004690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004694:	f7ff fff0 	bl	8004678 <HAL_RCC_GetHCLKFreq>
 8004698:	4602      	mov	r2, r0
 800469a:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	0a9b      	lsrs	r3, r3, #10
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	4903      	ldr	r1, [pc, #12]	; (80046b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046a6:	5ccb      	ldrb	r3, [r1, r3]
 80046a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40023800 	.word	0x40023800
 80046b4:	08006418 	.word	0x08006418

080046b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046bc:	f7ff ffdc 	bl	8004678 <HAL_RCC_GetHCLKFreq>
 80046c0:	4602      	mov	r2, r0
 80046c2:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	0b5b      	lsrs	r3, r3, #13
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	4903      	ldr	r1, [pc, #12]	; (80046dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ce:	5ccb      	ldrb	r3, [r1, r3]
 80046d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40023800 	.word	0x40023800
 80046dc:	08006418 	.word	0x08006418

080046e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80046e8:	2300      	movs	r3, #0
 80046ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80046ec:	2300      	movs	r3, #0
 80046ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80046f0:	2300      	movs	r3, #0
 80046f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b00      	cmp	r3, #0
 8004706:	d012      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004708:	4b69      	ldr	r3, [pc, #420]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	4a68      	ldr	r2, [pc, #416]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004712:	6093      	str	r3, [r2, #8]
 8004714:	4b66      	ldr	r3, [pc, #408]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471c:	4964      	ldr	r1, [pc, #400]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471e:	4313      	orrs	r3, r2
 8004720:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800472a:	2301      	movs	r3, #1
 800472c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d017      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800473a:	4b5d      	ldr	r3, [pc, #372]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800473c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004740:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004748:	4959      	ldr	r1, [pc, #356]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004754:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004758:	d101      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800475a:	2301      	movs	r3, #1
 800475c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004766:	2301      	movs	r3, #1
 8004768:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d017      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004776:	4b4e      	ldr	r3, [pc, #312]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800477c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	494a      	ldr	r1, [pc, #296]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004794:	d101      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004796:	2301      	movs	r3, #1
 8004798:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80047a2:	2301      	movs	r3, #1
 80047a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80047b2:	2301      	movs	r3, #1
 80047b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 808b 	beq.w	80048da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047c4:	4b3a      	ldr	r3, [pc, #232]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c8:	4a39      	ldr	r2, [pc, #228]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ce:	6413      	str	r3, [r2, #64]	; 0x40
 80047d0:	4b37      	ldr	r3, [pc, #220]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d8:	60bb      	str	r3, [r7, #8]
 80047da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047dc:	4b35      	ldr	r3, [pc, #212]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a34      	ldr	r2, [pc, #208]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047e8:	f7fd fcae 	bl	8002148 <HAL_GetTick>
 80047ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047ee:	e008      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f0:	f7fd fcaa 	bl	8002148 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b64      	cmp	r3, #100	; 0x64
 80047fc:	d901      	bls.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e38f      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004802:	4b2c      	ldr	r3, [pc, #176]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0f0      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800480e:	4b28      	ldr	r3, [pc, #160]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004816:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d035      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	429a      	cmp	r2, r3
 800482a:	d02e      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800482c:	4b20      	ldr	r3, [pc, #128]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800482e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004834:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004836:	4b1e      	ldr	r3, [pc, #120]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483a:	4a1d      	ldr	r2, [pc, #116]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800483c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004840:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004842:	4b1b      	ldr	r3, [pc, #108]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004846:	4a1a      	ldr	r2, [pc, #104]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800484c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800484e:	4a18      	ldr	r2, [pc, #96]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004854:	4b16      	ldr	r3, [pc, #88]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b01      	cmp	r3, #1
 800485e:	d114      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004860:	f7fd fc72 	bl	8002148 <HAL_GetTick>
 8004864:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004866:	e00a      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004868:	f7fd fc6e 	bl	8002148 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	f241 3288 	movw	r2, #5000	; 0x1388
 8004876:	4293      	cmp	r3, r2
 8004878:	d901      	bls.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e351      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800487e:	4b0c      	ldr	r3, [pc, #48]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0ee      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004896:	d111      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004898:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048a4:	4b04      	ldr	r3, [pc, #16]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80048a6:	400b      	ands	r3, r1
 80048a8:	4901      	ldr	r1, [pc, #4]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
 80048ae:	e00b      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80048b0:	40023800 	.word	0x40023800
 80048b4:	40007000 	.word	0x40007000
 80048b8:	0ffffcff 	.word	0x0ffffcff
 80048bc:	4bb3      	ldr	r3, [pc, #716]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	4ab2      	ldr	r2, [pc, #712]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80048c6:	6093      	str	r3, [r2, #8]
 80048c8:	4bb0      	ldr	r3, [pc, #704]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d4:	49ad      	ldr	r1, [pc, #692]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0310 	and.w	r3, r3, #16
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d010      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048e6:	4ba9      	ldr	r3, [pc, #676]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ec:	4aa7      	ldr	r2, [pc, #668]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80048f6:	4ba5      	ldr	r3, [pc, #660]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004900:	49a2      	ldr	r1, [pc, #648]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00a      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004914:	4b9d      	ldr	r3, [pc, #628]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004922:	499a      	ldr	r1, [pc, #616]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004936:	4b95      	ldr	r3, [pc, #596]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004944:	4991      	ldr	r1, [pc, #580]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00a      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004958:	4b8c      	ldr	r3, [pc, #560]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800495a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004966:	4989      	ldr	r1, [pc, #548]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004968:	4313      	orrs	r3, r2
 800496a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800497a:	4b84      	ldr	r3, [pc, #528]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800497c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004980:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004988:	4980      	ldr	r1, [pc, #512]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00a      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800499c:	4b7b      	ldr	r3, [pc, #492]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800499e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a2:	f023 0203 	bic.w	r2, r3, #3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049aa:	4978      	ldr	r1, [pc, #480]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049be:	4b73      	ldr	r3, [pc, #460]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c4:	f023 020c 	bic.w	r2, r3, #12
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049cc:	496f      	ldr	r1, [pc, #444]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049e0:	4b6a      	ldr	r3, [pc, #424]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ee:	4967      	ldr	r1, [pc, #412]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a02:	4b62      	ldr	r3, [pc, #392]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a08:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a10:	495e      	ldr	r1, [pc, #376]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00a      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a24:	4b59      	ldr	r3, [pc, #356]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a32:	4956      	ldr	r1, [pc, #344]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004a46:	4b51      	ldr	r3, [pc, #324]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a54:	494d      	ldr	r1, [pc, #308]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004a68:	4b48      	ldr	r3, [pc, #288]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a76:	4945      	ldr	r1, [pc, #276]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a8a:	4b40      	ldr	r3, [pc, #256]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a98:	493c      	ldr	r1, [pc, #240]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00a      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004aac:	4b37      	ldr	r3, [pc, #220]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aba:	4934      	ldr	r1, [pc, #208]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d011      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ace:	4b2f      	ldr	r3, [pc, #188]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004adc:	492b      	ldr	r1, [pc, #172]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ae8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aec:	d101      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004aee:	2301      	movs	r3, #1
 8004af0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004afe:	2301      	movs	r3, #1
 8004b00:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b0e:	4b1f      	ldr	r3, [pc, #124]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b14:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b1c:	491b      	ldr	r1, [pc, #108]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00b      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b30:	4b16      	ldr	r3, [pc, #88]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b36:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b40:	4912      	ldr	r1, [pc, #72]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00b      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004b54:	4b0d      	ldr	r3, [pc, #52]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b64:	4909      	ldr	r1, [pc, #36]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00f      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b78:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b7e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b88:	e002      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004b8a:	bf00      	nop
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	4986      	ldr	r1, [pc, #536]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00b      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004ba4:	4b81      	ldr	r3, [pc, #516]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004baa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bb4:	497d      	ldr	r1, [pc, #500]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d006      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 80d6 	beq.w	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bd0:	4b76      	ldr	r3, [pc, #472]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a75      	ldr	r2, [pc, #468]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bdc:	f7fd fab4 	bl	8002148 <HAL_GetTick>
 8004be0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004be4:	f7fd fab0 	bl	8002148 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b64      	cmp	r3, #100	; 0x64
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e195      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bf6:	4b6d      	ldr	r3, [pc, #436]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1f0      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d021      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d11d      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c16:	4b65      	ldr	r3, [pc, #404]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c1c:	0c1b      	lsrs	r3, r3, #16
 8004c1e:	f003 0303 	and.w	r3, r3, #3
 8004c22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c24:	4b61      	ldr	r3, [pc, #388]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c2a:	0e1b      	lsrs	r3, r3, #24
 8004c2c:	f003 030f 	and.w	r3, r3, #15
 8004c30:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	019a      	lsls	r2, r3, #6
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	041b      	lsls	r3, r3, #16
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	061b      	lsls	r3, r3, #24
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	071b      	lsls	r3, r3, #28
 8004c4a:	4958      	ldr	r1, [pc, #352]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d004      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c66:	d00a      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d02e      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c7c:	d129      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c7e:	4b4b      	ldr	r3, [pc, #300]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c84:	0c1b      	lsrs	r3, r3, #16
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c8c:	4b47      	ldr	r3, [pc, #284]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c92:	0f1b      	lsrs	r3, r3, #28
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	019a      	lsls	r2, r3, #6
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	041b      	lsls	r3, r3, #16
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	061b      	lsls	r3, r3, #24
 8004cac:	431a      	orrs	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	071b      	lsls	r3, r3, #28
 8004cb2:	493e      	ldr	r1, [pc, #248]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004cba:	4b3c      	ldr	r3, [pc, #240]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cc0:	f023 021f 	bic.w	r2, r3, #31
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	4938      	ldr	r1, [pc, #224]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d01d      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004cde:	4b33      	ldr	r3, [pc, #204]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ce4:	0e1b      	lsrs	r3, r3, #24
 8004ce6:	f003 030f 	and.w	r3, r3, #15
 8004cea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004cec:	4b2f      	ldr	r3, [pc, #188]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cf2:	0f1b      	lsrs	r3, r3, #28
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	019a      	lsls	r2, r3, #6
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	041b      	lsls	r3, r3, #16
 8004d06:	431a      	orrs	r2, r3
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	061b      	lsls	r3, r3, #24
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	071b      	lsls	r3, r3, #28
 8004d12:	4926      	ldr	r1, [pc, #152]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d011      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	019a      	lsls	r2, r3, #6
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	041b      	lsls	r3, r3, #16
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	061b      	lsls	r3, r3, #24
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	071b      	lsls	r3, r3, #28
 8004d42:	491a      	ldr	r1, [pc, #104]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d4a:	4b18      	ldr	r3, [pc, #96]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a17      	ldr	r2, [pc, #92]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d56:	f7fd f9f7 	bl	8002148 <HAL_GetTick>
 8004d5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d5e:	f7fd f9f3 	bl	8002148 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b64      	cmp	r3, #100	; 0x64
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e0d8      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d70:	4b0e      	ldr	r3, [pc, #56]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0f0      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	f040 80ce 	bne.w	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d84:	4b09      	ldr	r3, [pc, #36]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a08      	ldr	r2, [pc, #32]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d90:	f7fd f9da 	bl	8002148 <HAL_GetTick>
 8004d94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d96:	e00b      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d98:	f7fd f9d6 	bl	8002148 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b64      	cmp	r3, #100	; 0x64
 8004da4:	d904      	bls.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e0bb      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004daa:	bf00      	nop
 8004dac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004db0:	4b5e      	ldr	r3, [pc, #376]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004db8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dbc:	d0ec      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d009      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d02e      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d12a      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004de6:	4b51      	ldr	r3, [pc, #324]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dec:	0c1b      	lsrs	r3, r3, #16
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004df4:	4b4d      	ldr	r3, [pc, #308]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfa:	0f1b      	lsrs	r3, r3, #28
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	019a      	lsls	r2, r3, #6
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	041b      	lsls	r3, r3, #16
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	061b      	lsls	r3, r3, #24
 8004e14:	431a      	orrs	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	071b      	lsls	r3, r3, #28
 8004e1a:	4944      	ldr	r1, [pc, #272]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e22:	4b42      	ldr	r3, [pc, #264]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e28:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e30:	3b01      	subs	r3, #1
 8004e32:	021b      	lsls	r3, r3, #8
 8004e34:	493d      	ldr	r1, [pc, #244]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d022      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e50:	d11d      	bne.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e52:	4b36      	ldr	r3, [pc, #216]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e58:	0e1b      	lsrs	r3, r3, #24
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e60:	4b32      	ldr	r3, [pc, #200]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e66:	0f1b      	lsrs	r3, r3, #28
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	019a      	lsls	r2, r3, #6
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	041b      	lsls	r3, r3, #16
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	061b      	lsls	r3, r3, #24
 8004e80:	431a      	orrs	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	071b      	lsls	r3, r3, #28
 8004e86:	4929      	ldr	r1, [pc, #164]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0308 	and.w	r3, r3, #8
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d028      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e9a:	4b24      	ldr	r3, [pc, #144]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea0:	0e1b      	lsrs	r3, r3, #24
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ea8:	4b20      	ldr	r3, [pc, #128]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eae:	0c1b      	lsrs	r3, r3, #16
 8004eb0:	f003 0303 	and.w	r3, r3, #3
 8004eb4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	019a      	lsls	r2, r3, #6
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	041b      	lsls	r3, r3, #16
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	061b      	lsls	r3, r3, #24
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	071b      	lsls	r3, r3, #28
 8004ece:	4917      	ldr	r1, [pc, #92]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ed6:	4b15      	ldr	r3, [pc, #84]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004edc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	4911      	ldr	r1, [pc, #68]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004eec:	4b0f      	ldr	r3, [pc, #60]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a0e      	ldr	r2, [pc, #56]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ef8:	f7fd f926 	bl	8002148 <HAL_GetTick>
 8004efc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004efe:	e008      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f00:	f7fd f922 	bl	8002148 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b64      	cmp	r3, #100	; 0x64
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e007      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f12:	4b06      	ldr	r3, [pc, #24]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f1e:	d1ef      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3720      	adds	r7, #32
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40023800 	.word	0x40023800

08004f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e049      	b.n	8004fd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d106      	bne.n	8004f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7fc ffe2 	bl	8001f20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4610      	mov	r0, r2
 8004f70:	f000 f9ee 	bl	8005350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d001      	beq.n	8004ff8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e04c      	b.n	8005092 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a26      	ldr	r2, [pc, #152]	; (80050a0 <HAL_TIM_Base_Start+0xc0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d022      	beq.n	8005050 <HAL_TIM_Base_Start+0x70>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005012:	d01d      	beq.n	8005050 <HAL_TIM_Base_Start+0x70>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a22      	ldr	r2, [pc, #136]	; (80050a4 <HAL_TIM_Base_Start+0xc4>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d018      	beq.n	8005050 <HAL_TIM_Base_Start+0x70>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a21      	ldr	r2, [pc, #132]	; (80050a8 <HAL_TIM_Base_Start+0xc8>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d013      	beq.n	8005050 <HAL_TIM_Base_Start+0x70>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a1f      	ldr	r2, [pc, #124]	; (80050ac <HAL_TIM_Base_Start+0xcc>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d00e      	beq.n	8005050 <HAL_TIM_Base_Start+0x70>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a1e      	ldr	r2, [pc, #120]	; (80050b0 <HAL_TIM_Base_Start+0xd0>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d009      	beq.n	8005050 <HAL_TIM_Base_Start+0x70>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a1c      	ldr	r2, [pc, #112]	; (80050b4 <HAL_TIM_Base_Start+0xd4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d004      	beq.n	8005050 <HAL_TIM_Base_Start+0x70>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a1b      	ldr	r2, [pc, #108]	; (80050b8 <HAL_TIM_Base_Start+0xd8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d115      	bne.n	800507c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689a      	ldr	r2, [r3, #8]
 8005056:	4b19      	ldr	r3, [pc, #100]	; (80050bc <HAL_TIM_Base_Start+0xdc>)
 8005058:	4013      	ands	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b06      	cmp	r3, #6
 8005060:	d015      	beq.n	800508e <HAL_TIM_Base_Start+0xae>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005068:	d011      	beq.n	800508e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0201 	orr.w	r2, r2, #1
 8005078:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507a:	e008      	b.n	800508e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	e000      	b.n	8005090 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800508e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40010000 	.word	0x40010000
 80050a4:	40000400 	.word	0x40000400
 80050a8:	40000800 	.word	0x40000800
 80050ac:	40000c00 	.word	0x40000c00
 80050b0:	40010400 	.word	0x40010400
 80050b4:	40014000 	.word	0x40014000
 80050b8:	40001800 	.word	0x40001800
 80050bc:	00010007 	.word	0x00010007

080050c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d122      	bne.n	800511c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d11b      	bne.n	800511c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0202 	mvn.w	r2, #2
 80050ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f905 	bl	8005312 <HAL_TIM_IC_CaptureCallback>
 8005108:	e005      	b.n	8005116 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f8f7 	bl	80052fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f908 	bl	8005326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	f003 0304 	and.w	r3, r3, #4
 8005126:	2b04      	cmp	r3, #4
 8005128:	d122      	bne.n	8005170 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b04      	cmp	r3, #4
 8005136:	d11b      	bne.n	8005170 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f06f 0204 	mvn.w	r2, #4
 8005140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2202      	movs	r2, #2
 8005146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f8db 	bl	8005312 <HAL_TIM_IC_CaptureCallback>
 800515c:	e005      	b.n	800516a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f8cd 	bl	80052fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f8de 	bl	8005326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b08      	cmp	r3, #8
 800517c:	d122      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f003 0308 	and.w	r3, r3, #8
 8005188:	2b08      	cmp	r3, #8
 800518a:	d11b      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0208 	mvn.w	r2, #8
 8005194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2204      	movs	r2, #4
 800519a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f8b1 	bl	8005312 <HAL_TIM_IC_CaptureCallback>
 80051b0:	e005      	b.n	80051be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f8a3 	bl	80052fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f8b4 	bl	8005326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f003 0310 	and.w	r3, r3, #16
 80051ce:	2b10      	cmp	r3, #16
 80051d0:	d122      	bne.n	8005218 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f003 0310 	and.w	r3, r3, #16
 80051dc:	2b10      	cmp	r3, #16
 80051de:	d11b      	bne.n	8005218 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f06f 0210 	mvn.w	r2, #16
 80051e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2208      	movs	r2, #8
 80051ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f887 	bl	8005312 <HAL_TIM_IC_CaptureCallback>
 8005204:	e005      	b.n	8005212 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f879 	bl	80052fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f88a 	bl	8005326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b01      	cmp	r3, #1
 8005224:	d10e      	bne.n	8005244 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b01      	cmp	r3, #1
 8005232:	d107      	bne.n	8005244 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f06f 0201 	mvn.w	r2, #1
 800523c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fc fd98 	bl	8001d74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524e:	2b80      	cmp	r3, #128	; 0x80
 8005250:	d10e      	bne.n	8005270 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525c:	2b80      	cmp	r3, #128	; 0x80
 800525e:	d107      	bne.n	8005270 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f9a8 	bl	80055c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800527e:	d10e      	bne.n	800529e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528a:	2b80      	cmp	r3, #128	; 0x80
 800528c:	d107      	bne.n	800529e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f99b 	bl	80055d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a8:	2b40      	cmp	r3, #64	; 0x40
 80052aa:	d10e      	bne.n	80052ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b6:	2b40      	cmp	r3, #64	; 0x40
 80052b8:	d107      	bne.n	80052ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f838 	bl	800533a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f003 0320 	and.w	r3, r3, #32
 80052d4:	2b20      	cmp	r3, #32
 80052d6:	d10e      	bne.n	80052f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f003 0320 	and.w	r3, r3, #32
 80052e2:	2b20      	cmp	r3, #32
 80052e4:	d107      	bne.n	80052f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f06f 0220 	mvn.w	r2, #32
 80052ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f95b 	bl	80055ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052f6:	bf00      	nop
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
	...

08005350 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a40      	ldr	r2, [pc, #256]	; (8005464 <TIM_Base_SetConfig+0x114>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d013      	beq.n	8005390 <TIM_Base_SetConfig+0x40>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800536e:	d00f      	beq.n	8005390 <TIM_Base_SetConfig+0x40>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a3d      	ldr	r2, [pc, #244]	; (8005468 <TIM_Base_SetConfig+0x118>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00b      	beq.n	8005390 <TIM_Base_SetConfig+0x40>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a3c      	ldr	r2, [pc, #240]	; (800546c <TIM_Base_SetConfig+0x11c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d007      	beq.n	8005390 <TIM_Base_SetConfig+0x40>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a3b      	ldr	r2, [pc, #236]	; (8005470 <TIM_Base_SetConfig+0x120>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d003      	beq.n	8005390 <TIM_Base_SetConfig+0x40>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a3a      	ldr	r2, [pc, #232]	; (8005474 <TIM_Base_SetConfig+0x124>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d108      	bne.n	80053a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005396:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a2f      	ldr	r2, [pc, #188]	; (8005464 <TIM_Base_SetConfig+0x114>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d02b      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b0:	d027      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a2c      	ldr	r2, [pc, #176]	; (8005468 <TIM_Base_SetConfig+0x118>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d023      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a2b      	ldr	r2, [pc, #172]	; (800546c <TIM_Base_SetConfig+0x11c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d01f      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a2a      	ldr	r2, [pc, #168]	; (8005470 <TIM_Base_SetConfig+0x120>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d01b      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a29      	ldr	r2, [pc, #164]	; (8005474 <TIM_Base_SetConfig+0x124>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d017      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a28      	ldr	r2, [pc, #160]	; (8005478 <TIM_Base_SetConfig+0x128>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d013      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a27      	ldr	r2, [pc, #156]	; (800547c <TIM_Base_SetConfig+0x12c>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00f      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a26      	ldr	r2, [pc, #152]	; (8005480 <TIM_Base_SetConfig+0x130>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00b      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a25      	ldr	r2, [pc, #148]	; (8005484 <TIM_Base_SetConfig+0x134>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d007      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a24      	ldr	r2, [pc, #144]	; (8005488 <TIM_Base_SetConfig+0x138>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d003      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a23      	ldr	r2, [pc, #140]	; (800548c <TIM_Base_SetConfig+0x13c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d108      	bne.n	8005414 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a0a      	ldr	r2, [pc, #40]	; (8005464 <TIM_Base_SetConfig+0x114>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d003      	beq.n	8005448 <TIM_Base_SetConfig+0xf8>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a0c      	ldr	r2, [pc, #48]	; (8005474 <TIM_Base_SetConfig+0x124>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d103      	bne.n	8005450 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	615a      	str	r2, [r3, #20]
}
 8005456:	bf00      	nop
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	40010000 	.word	0x40010000
 8005468:	40000400 	.word	0x40000400
 800546c:	40000800 	.word	0x40000800
 8005470:	40000c00 	.word	0x40000c00
 8005474:	40010400 	.word	0x40010400
 8005478:	40014000 	.word	0x40014000
 800547c:	40014400 	.word	0x40014400
 8005480:	40014800 	.word	0x40014800
 8005484:	40001800 	.word	0x40001800
 8005488:	40001c00 	.word	0x40001c00
 800548c:	40002000 	.word	0x40002000

08005490 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d101      	bne.n	80054a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054a4:	2302      	movs	r3, #2
 80054a6:	e06d      	b.n	8005584 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a30      	ldr	r2, [pc, #192]	; (8005590 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d004      	beq.n	80054dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a2f      	ldr	r2, [pc, #188]	; (8005594 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d108      	bne.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a20      	ldr	r2, [pc, #128]	; (8005590 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d022      	beq.n	8005558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551a:	d01d      	beq.n	8005558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a1d      	ldr	r2, [pc, #116]	; (8005598 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d018      	beq.n	8005558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a1c      	ldr	r2, [pc, #112]	; (800559c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d013      	beq.n	8005558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a1a      	ldr	r2, [pc, #104]	; (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d00e      	beq.n	8005558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a15      	ldr	r2, [pc, #84]	; (8005594 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d009      	beq.n	8005558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a16      	ldr	r2, [pc, #88]	; (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d004      	beq.n	8005558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a15      	ldr	r2, [pc, #84]	; (80055a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d10c      	bne.n	8005572 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800555e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	4313      	orrs	r3, r2
 8005568:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	40010000 	.word	0x40010000
 8005594:	40010400 	.word	0x40010400
 8005598:	40000400 	.word	0x40000400
 800559c:	40000800 	.word	0x40000800
 80055a0:	40000c00 	.word	0x40000c00
 80055a4:	40014000 	.word	0x40014000
 80055a8:	40001800 	.word	0x40001800

080055ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e040      	b.n	800567c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d106      	bne.n	8005610 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7fc fcde 	bl	8001fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2224      	movs	r2, #36	; 0x24
 8005614:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 0201 	bic.w	r2, r2, #1
 8005624:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f8c0 	bl	80057ac <UART_SetConfig>
 800562c:	4603      	mov	r3, r0
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e022      	b.n	800567c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 fb16 	bl	8005c70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005652:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005662:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0201 	orr.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fb9d 	bl	8005db4 <UART_CheckIdleState>
 800567a:	4603      	mov	r3, r0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b08a      	sub	sp, #40	; 0x28
 8005688:	af02      	add	r7, sp, #8
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	603b      	str	r3, [r7, #0]
 8005690:	4613      	mov	r3, r2
 8005692:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005698:	2b20      	cmp	r3, #32
 800569a:	f040 8081 	bne.w	80057a0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <HAL_UART_Transmit+0x26>
 80056a4:	88fb      	ldrh	r3, [r7, #6]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e079      	b.n	80057a2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d101      	bne.n	80056bc <HAL_UART_Transmit+0x38>
 80056b8:	2302      	movs	r3, #2
 80056ba:	e072      	b.n	80057a2 <HAL_UART_Transmit+0x11e>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2221      	movs	r2, #33	; 0x21
 80056d0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056d2:	f7fc fd39 	bl	8002148 <HAL_GetTick>
 80056d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	88fa      	ldrh	r2, [r7, #6]
 80056dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	88fa      	ldrh	r2, [r7, #6]
 80056e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f0:	d108      	bne.n	8005704 <HAL_UART_Transmit+0x80>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d104      	bne.n	8005704 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80056fa:	2300      	movs	r3, #0
 80056fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	61bb      	str	r3, [r7, #24]
 8005702:	e003      	b.n	800570c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005708:	2300      	movs	r3, #0
 800570a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005714:	e02c      	b.n	8005770 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2200      	movs	r2, #0
 800571e:	2180      	movs	r1, #128	; 0x80
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 fb90 	bl	8005e46 <UART_WaitOnFlagUntilTimeout>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d001      	beq.n	8005730 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e038      	b.n	80057a2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10b      	bne.n	800574e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005744:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	3302      	adds	r3, #2
 800574a:	61bb      	str	r3, [r7, #24]
 800574c:	e007      	b.n	800575e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	781a      	ldrb	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	3301      	adds	r3, #1
 800575c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005764:	b29b      	uxth	r3, r3
 8005766:	3b01      	subs	r3, #1
 8005768:	b29a      	uxth	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005776:	b29b      	uxth	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1cc      	bne.n	8005716 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	2200      	movs	r2, #0
 8005784:	2140      	movs	r1, #64	; 0x40
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 fb5d 	bl	8005e46 <UART_WaitOnFlagUntilTimeout>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e005      	b.n	80057a2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2220      	movs	r2, #32
 800579a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800579c:	2300      	movs	r3, #0
 800579e:	e000      	b.n	80057a2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80057a0:	2302      	movs	r3, #2
  }
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3720      	adds	r7, #32
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
	...

080057ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057b4:	2300      	movs	r3, #0
 80057b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	431a      	orrs	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	4ba7      	ldr	r3, [pc, #668]	; (8005a74 <UART_SetConfig+0x2c8>)
 80057d8:	4013      	ands	r3, r2
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	6812      	ldr	r2, [r2, #0]
 80057de:	6979      	ldr	r1, [r7, #20]
 80057e0:	430b      	orrs	r3, r1
 80057e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	4313      	orrs	r3, r2
 8005808:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	430a      	orrs	r2, r1
 800581c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a95      	ldr	r2, [pc, #596]	; (8005a78 <UART_SetConfig+0x2cc>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d120      	bne.n	800586a <UART_SetConfig+0xbe>
 8005828:	4b94      	ldr	r3, [pc, #592]	; (8005a7c <UART_SetConfig+0x2d0>)
 800582a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582e:	f003 0303 	and.w	r3, r3, #3
 8005832:	2b03      	cmp	r3, #3
 8005834:	d816      	bhi.n	8005864 <UART_SetConfig+0xb8>
 8005836:	a201      	add	r2, pc, #4	; (adr r2, 800583c <UART_SetConfig+0x90>)
 8005838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583c:	0800584d 	.word	0x0800584d
 8005840:	08005859 	.word	0x08005859
 8005844:	08005853 	.word	0x08005853
 8005848:	0800585f 	.word	0x0800585f
 800584c:	2301      	movs	r3, #1
 800584e:	77fb      	strb	r3, [r7, #31]
 8005850:	e14f      	b.n	8005af2 <UART_SetConfig+0x346>
 8005852:	2302      	movs	r3, #2
 8005854:	77fb      	strb	r3, [r7, #31]
 8005856:	e14c      	b.n	8005af2 <UART_SetConfig+0x346>
 8005858:	2304      	movs	r3, #4
 800585a:	77fb      	strb	r3, [r7, #31]
 800585c:	e149      	b.n	8005af2 <UART_SetConfig+0x346>
 800585e:	2308      	movs	r3, #8
 8005860:	77fb      	strb	r3, [r7, #31]
 8005862:	e146      	b.n	8005af2 <UART_SetConfig+0x346>
 8005864:	2310      	movs	r3, #16
 8005866:	77fb      	strb	r3, [r7, #31]
 8005868:	e143      	b.n	8005af2 <UART_SetConfig+0x346>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a84      	ldr	r2, [pc, #528]	; (8005a80 <UART_SetConfig+0x2d4>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d132      	bne.n	80058da <UART_SetConfig+0x12e>
 8005874:	4b81      	ldr	r3, [pc, #516]	; (8005a7c <UART_SetConfig+0x2d0>)
 8005876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587a:	f003 030c 	and.w	r3, r3, #12
 800587e:	2b0c      	cmp	r3, #12
 8005880:	d828      	bhi.n	80058d4 <UART_SetConfig+0x128>
 8005882:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <UART_SetConfig+0xdc>)
 8005884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005888:	080058bd 	.word	0x080058bd
 800588c:	080058d5 	.word	0x080058d5
 8005890:	080058d5 	.word	0x080058d5
 8005894:	080058d5 	.word	0x080058d5
 8005898:	080058c9 	.word	0x080058c9
 800589c:	080058d5 	.word	0x080058d5
 80058a0:	080058d5 	.word	0x080058d5
 80058a4:	080058d5 	.word	0x080058d5
 80058a8:	080058c3 	.word	0x080058c3
 80058ac:	080058d5 	.word	0x080058d5
 80058b0:	080058d5 	.word	0x080058d5
 80058b4:	080058d5 	.word	0x080058d5
 80058b8:	080058cf 	.word	0x080058cf
 80058bc:	2300      	movs	r3, #0
 80058be:	77fb      	strb	r3, [r7, #31]
 80058c0:	e117      	b.n	8005af2 <UART_SetConfig+0x346>
 80058c2:	2302      	movs	r3, #2
 80058c4:	77fb      	strb	r3, [r7, #31]
 80058c6:	e114      	b.n	8005af2 <UART_SetConfig+0x346>
 80058c8:	2304      	movs	r3, #4
 80058ca:	77fb      	strb	r3, [r7, #31]
 80058cc:	e111      	b.n	8005af2 <UART_SetConfig+0x346>
 80058ce:	2308      	movs	r3, #8
 80058d0:	77fb      	strb	r3, [r7, #31]
 80058d2:	e10e      	b.n	8005af2 <UART_SetConfig+0x346>
 80058d4:	2310      	movs	r3, #16
 80058d6:	77fb      	strb	r3, [r7, #31]
 80058d8:	e10b      	b.n	8005af2 <UART_SetConfig+0x346>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a69      	ldr	r2, [pc, #420]	; (8005a84 <UART_SetConfig+0x2d8>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d120      	bne.n	8005926 <UART_SetConfig+0x17a>
 80058e4:	4b65      	ldr	r3, [pc, #404]	; (8005a7c <UART_SetConfig+0x2d0>)
 80058e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80058ee:	2b30      	cmp	r3, #48	; 0x30
 80058f0:	d013      	beq.n	800591a <UART_SetConfig+0x16e>
 80058f2:	2b30      	cmp	r3, #48	; 0x30
 80058f4:	d814      	bhi.n	8005920 <UART_SetConfig+0x174>
 80058f6:	2b20      	cmp	r3, #32
 80058f8:	d009      	beq.n	800590e <UART_SetConfig+0x162>
 80058fa:	2b20      	cmp	r3, #32
 80058fc:	d810      	bhi.n	8005920 <UART_SetConfig+0x174>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <UART_SetConfig+0x15c>
 8005902:	2b10      	cmp	r3, #16
 8005904:	d006      	beq.n	8005914 <UART_SetConfig+0x168>
 8005906:	e00b      	b.n	8005920 <UART_SetConfig+0x174>
 8005908:	2300      	movs	r3, #0
 800590a:	77fb      	strb	r3, [r7, #31]
 800590c:	e0f1      	b.n	8005af2 <UART_SetConfig+0x346>
 800590e:	2302      	movs	r3, #2
 8005910:	77fb      	strb	r3, [r7, #31]
 8005912:	e0ee      	b.n	8005af2 <UART_SetConfig+0x346>
 8005914:	2304      	movs	r3, #4
 8005916:	77fb      	strb	r3, [r7, #31]
 8005918:	e0eb      	b.n	8005af2 <UART_SetConfig+0x346>
 800591a:	2308      	movs	r3, #8
 800591c:	77fb      	strb	r3, [r7, #31]
 800591e:	e0e8      	b.n	8005af2 <UART_SetConfig+0x346>
 8005920:	2310      	movs	r3, #16
 8005922:	77fb      	strb	r3, [r7, #31]
 8005924:	e0e5      	b.n	8005af2 <UART_SetConfig+0x346>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a57      	ldr	r2, [pc, #348]	; (8005a88 <UART_SetConfig+0x2dc>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d120      	bne.n	8005972 <UART_SetConfig+0x1c6>
 8005930:	4b52      	ldr	r3, [pc, #328]	; (8005a7c <UART_SetConfig+0x2d0>)
 8005932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005936:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800593a:	2bc0      	cmp	r3, #192	; 0xc0
 800593c:	d013      	beq.n	8005966 <UART_SetConfig+0x1ba>
 800593e:	2bc0      	cmp	r3, #192	; 0xc0
 8005940:	d814      	bhi.n	800596c <UART_SetConfig+0x1c0>
 8005942:	2b80      	cmp	r3, #128	; 0x80
 8005944:	d009      	beq.n	800595a <UART_SetConfig+0x1ae>
 8005946:	2b80      	cmp	r3, #128	; 0x80
 8005948:	d810      	bhi.n	800596c <UART_SetConfig+0x1c0>
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <UART_SetConfig+0x1a8>
 800594e:	2b40      	cmp	r3, #64	; 0x40
 8005950:	d006      	beq.n	8005960 <UART_SetConfig+0x1b4>
 8005952:	e00b      	b.n	800596c <UART_SetConfig+0x1c0>
 8005954:	2300      	movs	r3, #0
 8005956:	77fb      	strb	r3, [r7, #31]
 8005958:	e0cb      	b.n	8005af2 <UART_SetConfig+0x346>
 800595a:	2302      	movs	r3, #2
 800595c:	77fb      	strb	r3, [r7, #31]
 800595e:	e0c8      	b.n	8005af2 <UART_SetConfig+0x346>
 8005960:	2304      	movs	r3, #4
 8005962:	77fb      	strb	r3, [r7, #31]
 8005964:	e0c5      	b.n	8005af2 <UART_SetConfig+0x346>
 8005966:	2308      	movs	r3, #8
 8005968:	77fb      	strb	r3, [r7, #31]
 800596a:	e0c2      	b.n	8005af2 <UART_SetConfig+0x346>
 800596c:	2310      	movs	r3, #16
 800596e:	77fb      	strb	r3, [r7, #31]
 8005970:	e0bf      	b.n	8005af2 <UART_SetConfig+0x346>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a45      	ldr	r2, [pc, #276]	; (8005a8c <UART_SetConfig+0x2e0>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d125      	bne.n	80059c8 <UART_SetConfig+0x21c>
 800597c:	4b3f      	ldr	r3, [pc, #252]	; (8005a7c <UART_SetConfig+0x2d0>)
 800597e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800598a:	d017      	beq.n	80059bc <UART_SetConfig+0x210>
 800598c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005990:	d817      	bhi.n	80059c2 <UART_SetConfig+0x216>
 8005992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005996:	d00b      	beq.n	80059b0 <UART_SetConfig+0x204>
 8005998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800599c:	d811      	bhi.n	80059c2 <UART_SetConfig+0x216>
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <UART_SetConfig+0x1fe>
 80059a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a6:	d006      	beq.n	80059b6 <UART_SetConfig+0x20a>
 80059a8:	e00b      	b.n	80059c2 <UART_SetConfig+0x216>
 80059aa:	2300      	movs	r3, #0
 80059ac:	77fb      	strb	r3, [r7, #31]
 80059ae:	e0a0      	b.n	8005af2 <UART_SetConfig+0x346>
 80059b0:	2302      	movs	r3, #2
 80059b2:	77fb      	strb	r3, [r7, #31]
 80059b4:	e09d      	b.n	8005af2 <UART_SetConfig+0x346>
 80059b6:	2304      	movs	r3, #4
 80059b8:	77fb      	strb	r3, [r7, #31]
 80059ba:	e09a      	b.n	8005af2 <UART_SetConfig+0x346>
 80059bc:	2308      	movs	r3, #8
 80059be:	77fb      	strb	r3, [r7, #31]
 80059c0:	e097      	b.n	8005af2 <UART_SetConfig+0x346>
 80059c2:	2310      	movs	r3, #16
 80059c4:	77fb      	strb	r3, [r7, #31]
 80059c6:	e094      	b.n	8005af2 <UART_SetConfig+0x346>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a30      	ldr	r2, [pc, #192]	; (8005a90 <UART_SetConfig+0x2e4>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d125      	bne.n	8005a1e <UART_SetConfig+0x272>
 80059d2:	4b2a      	ldr	r3, [pc, #168]	; (8005a7c <UART_SetConfig+0x2d0>)
 80059d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059e0:	d017      	beq.n	8005a12 <UART_SetConfig+0x266>
 80059e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059e6:	d817      	bhi.n	8005a18 <UART_SetConfig+0x26c>
 80059e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ec:	d00b      	beq.n	8005a06 <UART_SetConfig+0x25a>
 80059ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059f2:	d811      	bhi.n	8005a18 <UART_SetConfig+0x26c>
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <UART_SetConfig+0x254>
 80059f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059fc:	d006      	beq.n	8005a0c <UART_SetConfig+0x260>
 80059fe:	e00b      	b.n	8005a18 <UART_SetConfig+0x26c>
 8005a00:	2301      	movs	r3, #1
 8005a02:	77fb      	strb	r3, [r7, #31]
 8005a04:	e075      	b.n	8005af2 <UART_SetConfig+0x346>
 8005a06:	2302      	movs	r3, #2
 8005a08:	77fb      	strb	r3, [r7, #31]
 8005a0a:	e072      	b.n	8005af2 <UART_SetConfig+0x346>
 8005a0c:	2304      	movs	r3, #4
 8005a0e:	77fb      	strb	r3, [r7, #31]
 8005a10:	e06f      	b.n	8005af2 <UART_SetConfig+0x346>
 8005a12:	2308      	movs	r3, #8
 8005a14:	77fb      	strb	r3, [r7, #31]
 8005a16:	e06c      	b.n	8005af2 <UART_SetConfig+0x346>
 8005a18:	2310      	movs	r3, #16
 8005a1a:	77fb      	strb	r3, [r7, #31]
 8005a1c:	e069      	b.n	8005af2 <UART_SetConfig+0x346>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a1c      	ldr	r2, [pc, #112]	; (8005a94 <UART_SetConfig+0x2e8>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d137      	bne.n	8005a98 <UART_SetConfig+0x2ec>
 8005a28:	4b14      	ldr	r3, [pc, #80]	; (8005a7c <UART_SetConfig+0x2d0>)
 8005a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a2e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005a32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a36:	d017      	beq.n	8005a68 <UART_SetConfig+0x2bc>
 8005a38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a3c:	d817      	bhi.n	8005a6e <UART_SetConfig+0x2c2>
 8005a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a42:	d00b      	beq.n	8005a5c <UART_SetConfig+0x2b0>
 8005a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a48:	d811      	bhi.n	8005a6e <UART_SetConfig+0x2c2>
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <UART_SetConfig+0x2aa>
 8005a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a52:	d006      	beq.n	8005a62 <UART_SetConfig+0x2b6>
 8005a54:	e00b      	b.n	8005a6e <UART_SetConfig+0x2c2>
 8005a56:	2300      	movs	r3, #0
 8005a58:	77fb      	strb	r3, [r7, #31]
 8005a5a:	e04a      	b.n	8005af2 <UART_SetConfig+0x346>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	77fb      	strb	r3, [r7, #31]
 8005a60:	e047      	b.n	8005af2 <UART_SetConfig+0x346>
 8005a62:	2304      	movs	r3, #4
 8005a64:	77fb      	strb	r3, [r7, #31]
 8005a66:	e044      	b.n	8005af2 <UART_SetConfig+0x346>
 8005a68:	2308      	movs	r3, #8
 8005a6a:	77fb      	strb	r3, [r7, #31]
 8005a6c:	e041      	b.n	8005af2 <UART_SetConfig+0x346>
 8005a6e:	2310      	movs	r3, #16
 8005a70:	77fb      	strb	r3, [r7, #31]
 8005a72:	e03e      	b.n	8005af2 <UART_SetConfig+0x346>
 8005a74:	efff69f3 	.word	0xefff69f3
 8005a78:	40011000 	.word	0x40011000
 8005a7c:	40023800 	.word	0x40023800
 8005a80:	40004400 	.word	0x40004400
 8005a84:	40004800 	.word	0x40004800
 8005a88:	40004c00 	.word	0x40004c00
 8005a8c:	40005000 	.word	0x40005000
 8005a90:	40011400 	.word	0x40011400
 8005a94:	40007800 	.word	0x40007800
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a71      	ldr	r2, [pc, #452]	; (8005c64 <UART_SetConfig+0x4b8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d125      	bne.n	8005aee <UART_SetConfig+0x342>
 8005aa2:	4b71      	ldr	r3, [pc, #452]	; (8005c68 <UART_SetConfig+0x4bc>)
 8005aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005aac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ab0:	d017      	beq.n	8005ae2 <UART_SetConfig+0x336>
 8005ab2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ab6:	d817      	bhi.n	8005ae8 <UART_SetConfig+0x33c>
 8005ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005abc:	d00b      	beq.n	8005ad6 <UART_SetConfig+0x32a>
 8005abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ac2:	d811      	bhi.n	8005ae8 <UART_SetConfig+0x33c>
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <UART_SetConfig+0x324>
 8005ac8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005acc:	d006      	beq.n	8005adc <UART_SetConfig+0x330>
 8005ace:	e00b      	b.n	8005ae8 <UART_SetConfig+0x33c>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	77fb      	strb	r3, [r7, #31]
 8005ad4:	e00d      	b.n	8005af2 <UART_SetConfig+0x346>
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	77fb      	strb	r3, [r7, #31]
 8005ada:	e00a      	b.n	8005af2 <UART_SetConfig+0x346>
 8005adc:	2304      	movs	r3, #4
 8005ade:	77fb      	strb	r3, [r7, #31]
 8005ae0:	e007      	b.n	8005af2 <UART_SetConfig+0x346>
 8005ae2:	2308      	movs	r3, #8
 8005ae4:	77fb      	strb	r3, [r7, #31]
 8005ae6:	e004      	b.n	8005af2 <UART_SetConfig+0x346>
 8005ae8:	2310      	movs	r3, #16
 8005aea:	77fb      	strb	r3, [r7, #31]
 8005aec:	e001      	b.n	8005af2 <UART_SetConfig+0x346>
 8005aee:	2310      	movs	r3, #16
 8005af0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005afa:	d15b      	bne.n	8005bb4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005afc:	7ffb      	ldrb	r3, [r7, #31]
 8005afe:	2b08      	cmp	r3, #8
 8005b00:	d827      	bhi.n	8005b52 <UART_SetConfig+0x3a6>
 8005b02:	a201      	add	r2, pc, #4	; (adr r2, 8005b08 <UART_SetConfig+0x35c>)
 8005b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b08:	08005b2d 	.word	0x08005b2d
 8005b0c:	08005b35 	.word	0x08005b35
 8005b10:	08005b3d 	.word	0x08005b3d
 8005b14:	08005b53 	.word	0x08005b53
 8005b18:	08005b43 	.word	0x08005b43
 8005b1c:	08005b53 	.word	0x08005b53
 8005b20:	08005b53 	.word	0x08005b53
 8005b24:	08005b53 	.word	0x08005b53
 8005b28:	08005b4b 	.word	0x08005b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b2c:	f7fe fdb0 	bl	8004690 <HAL_RCC_GetPCLK1Freq>
 8005b30:	61b8      	str	r0, [r7, #24]
        break;
 8005b32:	e013      	b.n	8005b5c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b34:	f7fe fdc0 	bl	80046b8 <HAL_RCC_GetPCLK2Freq>
 8005b38:	61b8      	str	r0, [r7, #24]
        break;
 8005b3a:	e00f      	b.n	8005b5c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b3c:	4b4b      	ldr	r3, [pc, #300]	; (8005c6c <UART_SetConfig+0x4c0>)
 8005b3e:	61bb      	str	r3, [r7, #24]
        break;
 8005b40:	e00c      	b.n	8005b5c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b42:	f7fe fce3 	bl	800450c <HAL_RCC_GetSysClockFreq>
 8005b46:	61b8      	str	r0, [r7, #24]
        break;
 8005b48:	e008      	b.n	8005b5c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b4e:	61bb      	str	r3, [r7, #24]
        break;
 8005b50:	e004      	b.n	8005b5c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005b52:	2300      	movs	r3, #0
 8005b54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	77bb      	strb	r3, [r7, #30]
        break;
 8005b5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d074      	beq.n	8005c4c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	005a      	lsls	r2, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	085b      	lsrs	r3, r3, #1
 8005b6c:	441a      	add	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	2b0f      	cmp	r3, #15
 8005b7e:	d916      	bls.n	8005bae <UART_SetConfig+0x402>
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b86:	d212      	bcs.n	8005bae <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	f023 030f 	bic.w	r3, r3, #15
 8005b90:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	085b      	lsrs	r3, r3, #1
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	f003 0307 	and.w	r3, r3, #7
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	89fb      	ldrh	r3, [r7, #14]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	89fa      	ldrh	r2, [r7, #14]
 8005baa:	60da      	str	r2, [r3, #12]
 8005bac:	e04e      	b.n	8005c4c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	77bb      	strb	r3, [r7, #30]
 8005bb2:	e04b      	b.n	8005c4c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bb4:	7ffb      	ldrb	r3, [r7, #31]
 8005bb6:	2b08      	cmp	r3, #8
 8005bb8:	d827      	bhi.n	8005c0a <UART_SetConfig+0x45e>
 8005bba:	a201      	add	r2, pc, #4	; (adr r2, 8005bc0 <UART_SetConfig+0x414>)
 8005bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc0:	08005be5 	.word	0x08005be5
 8005bc4:	08005bed 	.word	0x08005bed
 8005bc8:	08005bf5 	.word	0x08005bf5
 8005bcc:	08005c0b 	.word	0x08005c0b
 8005bd0:	08005bfb 	.word	0x08005bfb
 8005bd4:	08005c0b 	.word	0x08005c0b
 8005bd8:	08005c0b 	.word	0x08005c0b
 8005bdc:	08005c0b 	.word	0x08005c0b
 8005be0:	08005c03 	.word	0x08005c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be4:	f7fe fd54 	bl	8004690 <HAL_RCC_GetPCLK1Freq>
 8005be8:	61b8      	str	r0, [r7, #24]
        break;
 8005bea:	e013      	b.n	8005c14 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bec:	f7fe fd64 	bl	80046b8 <HAL_RCC_GetPCLK2Freq>
 8005bf0:	61b8      	str	r0, [r7, #24]
        break;
 8005bf2:	e00f      	b.n	8005c14 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf4:	4b1d      	ldr	r3, [pc, #116]	; (8005c6c <UART_SetConfig+0x4c0>)
 8005bf6:	61bb      	str	r3, [r7, #24]
        break;
 8005bf8:	e00c      	b.n	8005c14 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bfa:	f7fe fc87 	bl	800450c <HAL_RCC_GetSysClockFreq>
 8005bfe:	61b8      	str	r0, [r7, #24]
        break;
 8005c00:	e008      	b.n	8005c14 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c06:	61bb      	str	r3, [r7, #24]
        break;
 8005c08:	e004      	b.n	8005c14 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	77bb      	strb	r3, [r7, #30]
        break;
 8005c12:	bf00      	nop
    }

    if (pclk != 0U)
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d018      	beq.n	8005c4c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	085a      	lsrs	r2, r3, #1
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	441a      	add	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	2b0f      	cmp	r3, #15
 8005c34:	d908      	bls.n	8005c48 <UART_SetConfig+0x49c>
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c3c:	d204      	bcs.n	8005c48 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	60da      	str	r2, [r3, #12]
 8005c46:	e001      	b.n	8005c4c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005c58:	7fbb      	ldrb	r3, [r7, #30]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3720      	adds	r7, #32
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	40007c00 	.word	0x40007c00
 8005c68:	40023800 	.word	0x40023800
 8005c6c:	00f42400 	.word	0x00f42400

08005c70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00a      	beq.n	8005c9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00a      	beq.n	8005cbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00a      	beq.n	8005cde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	f003 0308 	and.w	r3, r3, #8
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	f003 0310 	and.w	r3, r3, #16
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00a      	beq.n	8005d22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d01a      	beq.n	8005d86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d6e:	d10a      	bne.n	8005d86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00a      	beq.n	8005da8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	605a      	str	r2, [r3, #4]
  }
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af02      	add	r7, sp, #8
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dc4:	f7fc f9c0 	bl	8002148 <HAL_GetTick>
 8005dc8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b08      	cmp	r3, #8
 8005dd6:	d10e      	bne.n	8005df6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f82d 	bl	8005e46 <UART_WaitOnFlagUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e023      	b.n	8005e3e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d10e      	bne.n	8005e22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f817 	bl	8005e46 <UART_WaitOnFlagUntilTimeout>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e00d      	b.n	8005e3e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2220      	movs	r2, #32
 8005e26:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b084      	sub	sp, #16
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	60f8      	str	r0, [r7, #12]
 8005e4e:	60b9      	str	r1, [r7, #8]
 8005e50:	603b      	str	r3, [r7, #0]
 8005e52:	4613      	mov	r3, r2
 8005e54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e56:	e05e      	b.n	8005f16 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5e:	d05a      	beq.n	8005f16 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e60:	f7fc f972 	bl	8002148 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d302      	bcc.n	8005e76 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d11b      	bne.n	8005eae <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e84:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 0201 	bic.w	r2, r2, #1
 8005e94:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e043      	b.n	8005f36 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d02c      	beq.n	8005f16 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	69db      	ldr	r3, [r3, #28]
 8005ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eca:	d124      	bne.n	8005f16 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ed4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ee4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0201 	bic.w	r2, r2, #1
 8005ef4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2220      	movs	r2, #32
 8005f00:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2220      	movs	r2, #32
 8005f06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e00f      	b.n	8005f36 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	69da      	ldr	r2, [r3, #28]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	bf0c      	ite	eq
 8005f26:	2301      	moveq	r3, #1
 8005f28:	2300      	movne	r3, #0
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	79fb      	ldrb	r3, [r7, #7]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d091      	beq.n	8005e58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <__libc_init_array>:
 8005f40:	b570      	push	{r4, r5, r6, lr}
 8005f42:	4d0d      	ldr	r5, [pc, #52]	; (8005f78 <__libc_init_array+0x38>)
 8005f44:	4c0d      	ldr	r4, [pc, #52]	; (8005f7c <__libc_init_array+0x3c>)
 8005f46:	1b64      	subs	r4, r4, r5
 8005f48:	10a4      	asrs	r4, r4, #2
 8005f4a:	2600      	movs	r6, #0
 8005f4c:	42a6      	cmp	r6, r4
 8005f4e:	d109      	bne.n	8005f64 <__libc_init_array+0x24>
 8005f50:	4d0b      	ldr	r5, [pc, #44]	; (8005f80 <__libc_init_array+0x40>)
 8005f52:	4c0c      	ldr	r4, [pc, #48]	; (8005f84 <__libc_init_array+0x44>)
 8005f54:	f000 f864 	bl	8006020 <_init>
 8005f58:	1b64      	subs	r4, r4, r5
 8005f5a:	10a4      	asrs	r4, r4, #2
 8005f5c:	2600      	movs	r6, #0
 8005f5e:	42a6      	cmp	r6, r4
 8005f60:	d105      	bne.n	8005f6e <__libc_init_array+0x2e>
 8005f62:	bd70      	pop	{r4, r5, r6, pc}
 8005f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f68:	4798      	blx	r3
 8005f6a:	3601      	adds	r6, #1
 8005f6c:	e7ee      	b.n	8005f4c <__libc_init_array+0xc>
 8005f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f72:	4798      	blx	r3
 8005f74:	3601      	adds	r6, #1
 8005f76:	e7f2      	b.n	8005f5e <__libc_init_array+0x1e>
 8005f78:	08006450 	.word	0x08006450
 8005f7c:	08006450 	.word	0x08006450
 8005f80:	08006450 	.word	0x08006450
 8005f84:	08006454 	.word	0x08006454

08005f88 <memset>:
 8005f88:	4402      	add	r2, r0
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d100      	bne.n	8005f92 <memset+0xa>
 8005f90:	4770      	bx	lr
 8005f92:	f803 1b01 	strb.w	r1, [r3], #1
 8005f96:	e7f9      	b.n	8005f8c <memset+0x4>

08005f98 <__utoa>:
 8005f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f9a:	4c1f      	ldr	r4, [pc, #124]	; (8006018 <__utoa+0x80>)
 8005f9c:	b08b      	sub	sp, #44	; 0x2c
 8005f9e:	4605      	mov	r5, r0
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	466e      	mov	r6, sp
 8005fa4:	f104 0c20 	add.w	ip, r4, #32
 8005fa8:	6820      	ldr	r0, [r4, #0]
 8005faa:	6861      	ldr	r1, [r4, #4]
 8005fac:	4637      	mov	r7, r6
 8005fae:	c703      	stmia	r7!, {r0, r1}
 8005fb0:	3408      	adds	r4, #8
 8005fb2:	4564      	cmp	r4, ip
 8005fb4:	463e      	mov	r6, r7
 8005fb6:	d1f7      	bne.n	8005fa8 <__utoa+0x10>
 8005fb8:	7921      	ldrb	r1, [r4, #4]
 8005fba:	7139      	strb	r1, [r7, #4]
 8005fbc:	1e91      	subs	r1, r2, #2
 8005fbe:	6820      	ldr	r0, [r4, #0]
 8005fc0:	6038      	str	r0, [r7, #0]
 8005fc2:	2922      	cmp	r1, #34	; 0x22
 8005fc4:	f04f 0100 	mov.w	r1, #0
 8005fc8:	d904      	bls.n	8005fd4 <__utoa+0x3c>
 8005fca:	7019      	strb	r1, [r3, #0]
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4618      	mov	r0, r3
 8005fd0:	b00b      	add	sp, #44	; 0x2c
 8005fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fd4:	1e58      	subs	r0, r3, #1
 8005fd6:	4684      	mov	ip, r0
 8005fd8:	fbb5 f7f2 	udiv	r7, r5, r2
 8005fdc:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8005fe0:	fb02 5617 	mls	r6, r2, r7, r5
 8005fe4:	4476      	add	r6, lr
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005fec:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005ff0:	462e      	mov	r6, r5
 8005ff2:	42b2      	cmp	r2, r6
 8005ff4:	f101 0101 	add.w	r1, r1, #1
 8005ff8:	463d      	mov	r5, r7
 8005ffa:	d9ed      	bls.n	8005fd8 <__utoa+0x40>
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	545a      	strb	r2, [r3, r1]
 8006000:	1919      	adds	r1, r3, r4
 8006002:	1aa5      	subs	r5, r4, r2
 8006004:	42aa      	cmp	r2, r5
 8006006:	dae2      	bge.n	8005fce <__utoa+0x36>
 8006008:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800600c:	780e      	ldrb	r6, [r1, #0]
 800600e:	7006      	strb	r6, [r0, #0]
 8006010:	3201      	adds	r2, #1
 8006012:	f801 5901 	strb.w	r5, [r1], #-1
 8006016:	e7f4      	b.n	8006002 <__utoa+0x6a>
 8006018:	08006420 	.word	0x08006420

0800601c <utoa>:
 800601c:	f7ff bfbc 	b.w	8005f98 <__utoa>

08006020 <_init>:
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	bf00      	nop
 8006024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006026:	bc08      	pop	{r3}
 8006028:	469e      	mov	lr, r3
 800602a:	4770      	bx	lr

0800602c <_fini>:
 800602c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602e:	bf00      	nop
 8006030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006032:	bc08      	pop	{r3}
 8006034:	469e      	mov	lr, r3
 8006036:	4770      	bx	lr
