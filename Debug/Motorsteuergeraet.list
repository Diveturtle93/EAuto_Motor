
Motorsteuergeraet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003554  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800374c  0800374c  0001374c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003764  08003764  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003764  08003764  00013764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800376c  0800376c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800376c  0800376c  0001376c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003770  08003770  00013770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  08003780  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003780  00020120  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e62c  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f9  00000000  00000000  0002e666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  00030760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  00031140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027837  00000000  00000000  00031a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc5c  00000000  00000000  0005926f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f565b  00000000  00000000  00066ecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c526  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026c4  00000000  00000000  0015c57c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003734 	.word	0x08003734

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003734 	.word	0x08003734

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000536:	463b      	mov	r3, r7
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000542:	4b21      	ldr	r3, [pc, #132]	; (80005c8 <MX_ADC1_Init+0x98>)
 8000544:	4a21      	ldr	r2, [pc, #132]	; (80005cc <MX_ADC1_Init+0x9c>)
 8000546:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000548:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <MX_ADC1_Init+0x98>)
 800054a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800054e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000550:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <MX_ADC1_Init+0x98>)
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000556:	4b1c      	ldr	r3, [pc, #112]	; (80005c8 <MX_ADC1_Init+0x98>)
 8000558:	2200      	movs	r2, #0
 800055a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800055c:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <MX_ADC1_Init+0x98>)
 800055e:	2200      	movs	r2, #0
 8000560:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000562:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <MX_ADC1_Init+0x98>)
 8000564:	2200      	movs	r2, #0
 8000566:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800056a:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <MX_ADC1_Init+0x98>)
 800056c:	2200      	movs	r2, #0
 800056e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000570:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <MX_ADC1_Init+0x98>)
 8000572:	4a17      	ldr	r2, [pc, #92]	; (80005d0 <MX_ADC1_Init+0xa0>)
 8000574:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000576:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <MX_ADC1_Init+0x98>)
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800057c:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <MX_ADC1_Init+0x98>)
 800057e:	2201      	movs	r2, #1
 8000580:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000582:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <MX_ADC1_Init+0x98>)
 8000584:	2200      	movs	r2, #0
 8000586:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <MX_ADC1_Init+0x98>)
 800058c:	2201      	movs	r2, #1
 800058e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000590:	480d      	ldr	r0, [pc, #52]	; (80005c8 <MX_ADC1_Init+0x98>)
 8000592:	f000 fd0b 	bl	8000fac <HAL_ADC_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800059c:	f000 fb64 	bl	8000c68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80005a0:	2307      	movs	r3, #7
 80005a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	4805      	ldr	r0, [pc, #20]	; (80005c8 <MX_ADC1_Init+0x98>)
 80005b2:	f000 fd3f 	bl	8001034 <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005bc:	f000 fb54 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000028 	.word	0x20000028
 80005cc:	40012000 	.word	0x40012000
 80005d0:	0f000001 	.word	0x0f000001

080005d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a15      	ldr	r2, [pc, #84]	; (8000648 <HAL_ADC_MspInit+0x74>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d123      	bne.n	800063e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <HAL_ADC_MspInit+0x78>)
 80005f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005fa:	4a14      	ldr	r2, [pc, #80]	; (800064c <HAL_ADC_MspInit+0x78>)
 80005fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000600:	6453      	str	r3, [r2, #68]	; 0x44
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <HAL_ADC_MspInit+0x78>)
 8000604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <HAL_ADC_MspInit+0x78>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a0e      	ldr	r2, [pc, #56]	; (800064c <HAL_ADC_MspInit+0x78>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <HAL_ADC_MspInit+0x78>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = PCB_ADC_Pin;
 8000626:	2380      	movs	r3, #128	; 0x80
 8000628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800062a:	2303      	movs	r3, #3
 800062c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PCB_ADC_GPIO_Port, &GPIO_InitStruct);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4619      	mov	r1, r3
 8000638:	4805      	ldr	r0, [pc, #20]	; (8000650 <HAL_ADC_MspInit+0x7c>)
 800063a:	f001 f92d 	bl	8001898 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800063e:	bf00      	nop
 8000640:	3728      	adds	r7, #40	; 0x28
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40012000 	.word	0x40012000
 800064c:	40023800 	.word	0x40023800
 8000650:	40020000 	.word	0x40020000

08000654 <MX_CAN3_Init>:

CAN_HandleTypeDef hcan3;

/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8000658:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <MX_CAN3_Init+0x64>)
 800065a:	4a18      	ldr	r2, [pc, #96]	; (80006bc <MX_CAN3_Init+0x68>)
 800065c:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <MX_CAN3_Init+0x64>)
 8000660:	2206      	movs	r2, #6
 8000662:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_CAN3_Init+0x64>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_CAN3_Init+0x64>)
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_CAN3_Init+0x64>)
 8000672:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000676:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_CAN3_Init+0x64>)
 800067a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800067e:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8000680:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <MX_CAN3_Init+0x64>)
 8000682:	2200      	movs	r2, #0
 8000684:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_CAN3_Init+0x64>)
 8000688:	2200      	movs	r2, #0
 800068a:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <MX_CAN3_Init+0x64>)
 800068e:	2200      	movs	r2, #0
 8000690:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_CAN3_Init+0x64>)
 8000694:	2200      	movs	r2, #0
 8000696:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <MX_CAN3_Init+0x64>)
 800069a:	2200      	movs	r2, #0
 800069c:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_CAN3_Init+0x64>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_CAN3_Init+0x64>)
 80006a6:	f000 ff15 	bl	80014d4 <HAL_CAN_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 80006b0:	f000 fada 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000070 	.word	0x20000070
 80006bc:	40003400 	.word	0x40003400

080006c0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08c      	sub	sp, #48	; 0x30
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN3)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a23      	ldr	r2, [pc, #140]	; (800076c <HAL_CAN_MspInit+0xac>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d140      	bne.n	8000764 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN3_MspInit 0 */

  /* USER CODE END CAN3_MspInit 0 */
    /* CAN3 clock enable */
    __HAL_RCC_CAN3_CLK_ENABLE();
 80006e2:	4b23      	ldr	r3, [pc, #140]	; (8000770 <HAL_CAN_MspInit+0xb0>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	4a22      	ldr	r2, [pc, #136]	; (8000770 <HAL_CAN_MspInit+0xb0>)
 80006e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006ec:	6413      	str	r3, [r2, #64]	; 0x40
 80006ee:	4b20      	ldr	r3, [pc, #128]	; (8000770 <HAL_CAN_MspInit+0xb0>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006f6:	61bb      	str	r3, [r7, #24]
 80006f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 80006fa:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <HAL_CAN_MspInit+0xb0>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fe:	4a1c      	ldr	r2, [pc, #112]	; (8000770 <HAL_CAN_MspInit+0xb0>)
 8000700:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000704:	6413      	str	r3, [r2, #64]	; 0x40
 8000706:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <HAL_CAN_MspInit+0xb0>)
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <HAL_CAN_MspInit+0xb0>)
 8000714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000716:	4a16      	ldr	r2, [pc, #88]	; (8000770 <HAL_CAN_MspInit+0xb0>)
 8000718:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800071c:	6413      	str	r3, [r2, #64]	; 0x40
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <HAL_CAN_MspInit+0xb0>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <HAL_CAN_MspInit+0xb0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a10      	ldr	r2, [pc, #64]	; (8000770 <HAL_CAN_MspInit+0xb0>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <HAL_CAN_MspInit+0xb0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
    /**CAN3 GPIO Configuration
    PA8     ------> CAN3_RX
    PA15     ------> CAN3_TX
    */
    GPIO_InitStruct.Pin = ACAN_RX_Pin|ACAN_TX_Pin;
 8000742:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000748:	2302      	movs	r3, #2
 800074a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000750:	2303      	movs	r3, #3
 8000752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8000754:	230b      	movs	r3, #11
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4619      	mov	r1, r3
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <HAL_CAN_MspInit+0xb4>)
 8000760:	f001 f89a 	bl	8001898 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8000764:	bf00      	nop
 8000766:	3730      	adds	r7, #48	; 0x30
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40003400 	.word	0x40003400
 8000770:	40023800 	.word	0x40023800
 8000774:	40020000 	.word	0x40020000

08000778 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08e      	sub	sp, #56	; 0x38
 800077c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078e:	4bb5      	ldr	r3, [pc, #724]	; (8000a64 <MX_GPIO_Init+0x2ec>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4ab4      	ldr	r2, [pc, #720]	; (8000a64 <MX_GPIO_Init+0x2ec>)
 8000794:	f043 0310 	orr.w	r3, r3, #16
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4bb2      	ldr	r3, [pc, #712]	; (8000a64 <MX_GPIO_Init+0x2ec>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0310 	and.w	r3, r3, #16
 80007a2:	623b      	str	r3, [r7, #32]
 80007a4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4baf      	ldr	r3, [pc, #700]	; (8000a64 <MX_GPIO_Init+0x2ec>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4aae      	ldr	r2, [pc, #696]	; (8000a64 <MX_GPIO_Init+0x2ec>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4bac      	ldr	r3, [pc, #688]	; (8000a64 <MX_GPIO_Init+0x2ec>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	61fb      	str	r3, [r7, #28]
 80007bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007be:	4ba9      	ldr	r3, [pc, #676]	; (8000a64 <MX_GPIO_Init+0x2ec>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4aa8      	ldr	r2, [pc, #672]	; (8000a64 <MX_GPIO_Init+0x2ec>)
 80007c4:	f043 0320 	orr.w	r3, r3, #32
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4ba6      	ldr	r3, [pc, #664]	; (8000a64 <MX_GPIO_Init+0x2ec>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0320 	and.w	r3, r3, #32
 80007d2:	61bb      	str	r3, [r7, #24]
 80007d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	4ba3      	ldr	r3, [pc, #652]	; (8000a64 <MX_GPIO_Init+0x2ec>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4aa2      	ldr	r2, [pc, #648]	; (8000a64 <MX_GPIO_Init+0x2ec>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4ba0      	ldr	r3, [pc, #640]	; (8000a64 <MX_GPIO_Init+0x2ec>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b9d      	ldr	r3, [pc, #628]	; (8000a64 <MX_GPIO_Init+0x2ec>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a9c      	ldr	r2, [pc, #624]	; (8000a64 <MX_GPIO_Init+0x2ec>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b9a      	ldr	r3, [pc, #616]	; (8000a64 <MX_GPIO_Init+0x2ec>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	4b97      	ldr	r3, [pc, #604]	; (8000a64 <MX_GPIO_Init+0x2ec>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a96      	ldr	r2, [pc, #600]	; (8000a64 <MX_GPIO_Init+0x2ec>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b94      	ldr	r3, [pc, #592]	; (8000a64 <MX_GPIO_Init+0x2ec>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800081e:	4b91      	ldr	r3, [pc, #580]	; (8000a64 <MX_GPIO_Init+0x2ec>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a90      	ldr	r2, [pc, #576]	; (8000a64 <MX_GPIO_Init+0x2ec>)
 8000824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b8e      	ldr	r3, [pc, #568]	; (8000a64 <MX_GPIO_Init+0x2ec>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	4b8b      	ldr	r3, [pc, #556]	; (8000a64 <MX_GPIO_Init+0x2ec>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a8a      	ldr	r2, [pc, #552]	; (8000a64 <MX_GPIO_Init+0x2ec>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b88      	ldr	r3, [pc, #544]	; (8000a64 <MX_GPIO_Init+0x2ec>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_ON_Pin|WS2812_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	f242 0108 	movw	r1, #8200	; 0x2008
 8000854:	4884      	ldr	r0, [pc, #528]	; (8000a68 <MX_GPIO_Init+0x2f0>)
 8000856:	f001 f9cb 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_ORANGE_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000860:	4882      	ldr	r0, [pc, #520]	; (8000a6c <MX_GPIO_Init+0x2f4>)
 8000862:	f001 f9c5 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800086c:	4880      	ldr	r0, [pc, #512]	; (8000a70 <MX_GPIO_Init+0x2f8>)
 800086e:	f001 f9bf 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2104      	movs	r1, #4
 8000876:	487f      	ldr	r0, [pc, #508]	; (8000a74 <MX_GPIO_Init+0x2fc>)
 8000878:	f001 f9ba 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE7 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1;
 800087c:	2387      	movs	r3, #135	; 0x87
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000880:	2303      	movs	r3, #3
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088c:	4619      	mov	r1, r3
 800088e:	4878      	ldr	r0, [pc, #480]	; (8000a70 <MX_GPIO_Init+0x2f8>)
 8000890:	f001 f802 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ECO_Pin|BC_DOWN_Pin|DURCHFLUSS_Pin|BUTTON2_Pin
 8000894:	f647 7378 	movw	r3, #32632	; 0x7f78
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
                          |KICKDOWN_Pin|LEERLAUF_Pin|KUPPLUNG_NO_Pin|BREMSE_NC_Pin
                          |BREMSE_NO_Pin|SENSE_SDC_AKKU_Pin|SENSE_SDC_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a6:	4619      	mov	r1, r3
 80008a8:	4871      	ldr	r0, [pc, #452]	; (8000a70 <MX_GPIO_Init+0x2f8>)
 80008aa:	f000 fff5 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 80008ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c4:	4619      	mov	r1, r3
 80008c6:	4868      	ldr	r0, [pc, #416]	; (8000a68 <MX_GPIO_Init+0x2f0>)
 80008c8:	f000 ffe6 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC4 PC5 PC6
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 80008cc:	f64d 7377 	movw	r3, #57207	; 0xdf77
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d2:	2303      	movs	r3, #3
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008de:	4619      	mov	r1, r3
 80008e0:	4861      	ldr	r0, [pc, #388]	; (8000a68 <MX_GPIO_Init+0x2f0>)
 80008e2:	f000 ffd9 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF12
                           PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008e6:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ec:	2303      	movs	r3, #3
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f8:	4619      	mov	r1, r3
 80008fa:	485f      	ldr	r0, [pc, #380]	; (8000a78 <MX_GPIO_Init+0x300>)
 80008fc:	f000 ffcc 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS2812_Pin;
 8000900:	2308      	movs	r3, #8
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800090c:	2302      	movs	r3, #2
 800090e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000914:	4619      	mov	r1, r3
 8000916:	4854      	ldr	r0, [pc, #336]	; (8000a68 <MX_GPIO_Init+0x2f0>)
 8000918:	f000 ffbe 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|EMERGENCY_RUN_Pin|HW_WAKE_Pin|OUTA_Pin
 800091c:	f640 6307 	movw	r3, #3591	; 0xe07
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTB_Pin|BC_UP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092e:	4619      	mov	r1, r3
 8000930:	4852      	ldr	r0, [pc, #328]	; (8000a7c <MX_GPIO_Init+0x304>)
 8000932:	f000 ffb1 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000936:	f241 0378 	movw	r3, #4216	; 0x1078
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093c:	2303      	movs	r3, #3
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000948:	4619      	mov	r1, r3
 800094a:	484c      	ldr	r0, [pc, #304]	; (8000a7c <MX_GPIO_Init+0x304>)
 800094c:	f000 ffa4 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_ORANGE_Pin|LED_BLUE_Pin;
 8000950:	f244 0381 	movw	r3, #16513	; 0x4081
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000966:	4619      	mov	r1, r3
 8000968:	4840      	ldr	r0, [pc, #256]	; (8000a6c <MX_GPIO_Init+0x2f4>)
 800096a:	f000 ff95 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB11 PB12
                           PB13 PB4 PB5 PB6
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_12
 800096e:	f643 3376 	movw	r3, #15222	; 0x3b76
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000974:	2303      	movs	r3, #3
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000980:	4619      	mov	r1, r3
 8000982:	483a      	ldr	r0, [pc, #232]	; (8000a6c <MX_GPIO_Init+0x2f4>)
 8000984:	f000 ff88 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RECUPERATION_Pin;
 8000988:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RECUPERATION_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099a:	4619      	mov	r1, r3
 800099c:	4836      	ldr	r0, [pc, #216]	; (8000a78 <MX_GPIO_Init+0x300>)
 800099e:	f000 ff7b 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DCDC_INSTRUCTION_Pin|DCCDC_FAULT_Pin|ASR_IN1_Pin|GRA1_Pin
 80009a2:	f240 13f3 	movw	r3, #499	; 0x1f3
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GRA2_Pin|GRA3_Pin|GRA4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b4:	4619      	mov	r1, r3
 80009b6:	482f      	ldr	r0, [pc, #188]	; (8000a74 <MX_GPIO_Init+0x2fc>)
 80009b8:	f000 ff6e 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_SDC_OUT_Pin;
 80009bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MOTOR_SDC_OUT_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	4826      	ldr	r0, [pc, #152]	; (8000a70 <MX_GPIO_Init+0x2f8>)
 80009d6:	f000 ff5f 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSE_SDC_BTB_Pin|ANLASSER_Pin;
 80009da:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	481f      	ldr	r0, [pc, #124]	; (8000a6c <MX_GPIO_Init+0x2f4>)
 80009f0:	f000 ff52 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KL15_Pin|BAMOCAR_IN1_Pin|BAMOCAR_IN2_Pin|ASR_IN2_Pin;
 80009f4:	f241 5310 	movw	r3, #5392	; 0x1510
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	4619      	mov	r1, r3
 8000a08:	481d      	ldr	r0, [pc, #116]	; (8000a80 <MX_GPIO_Init+0x308>)
 8000a0a:	f000 ff45 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD11 PD13 PD14
                           PD15 PD0 PD1 PD2
                           PD3 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14
 8000a0e:	f64e 238f 	movw	r3, #60047	; 0xea8f
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a14:	2303      	movs	r3, #3
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	4817      	ldr	r0, [pc, #92]	; (8000a80 <MX_GPIO_Init+0x308>)
 8000a24:	f000 ff38 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480d      	ldr	r0, [pc, #52]	; (8000a74 <MX_GPIO_Init+0x2fc>)
 8000a40:	f000 ff2a 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000a44:	f64f 6308 	movw	r3, #65032	; 0xfe08
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a56:	4619      	mov	r1, r3
 8000a58:	4806      	ldr	r0, [pc, #24]	; (8000a74 <MX_GPIO_Init+0x2fc>)
 8000a5a:	f000 ff1d 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 8000a5e:	2380      	movs	r3, #128	; 0x80
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
 8000a62:	e00f      	b.n	8000a84 <MX_GPIO_Init+0x30c>
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020800 	.word	0x40020800
 8000a6c:	40020400 	.word	0x40020400
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40021800 	.word	0x40021800
 8000a78:	40021400 	.word	0x40021400
 8000a7c:	40020000 	.word	0x40020000
 8000a80:	40020c00 	.word	0x40020c00
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a90:	4619      	mov	r1, r3
 8000a92:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <MX_GPIO_Init+0x328>)
 8000a94:	f000 ff00 	bl	8001898 <HAL_GPIO_Init>

}
 8000a98:	bf00      	nop
 8000a9a:	3738      	adds	r7, #56	; 0x38
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40020800 	.word	0x40020800

08000aa4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000aac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ab0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d013      	beq.n	8000ae4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000abc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ac0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ac4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00b      	beq.n	8000ae4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000acc:	e000      	b.n	8000ad0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ace:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ad0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d0f9      	beq.n	8000ace <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ada:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ae4:	687b      	ldr	r3, [r7, #4]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af8:	f000 f9d7 	bl	8000eaa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000afc:	f000 f844 	bl	8000b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b00:	f7ff fe3a 	bl	8000778 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b04:	f000 f91a 	bl	8000d3c <MX_USART2_UART_Init>
  MX_CAN3_Init();
 8000b08:	f7ff fda4 	bl	8000654 <MX_CAN3_Init>
  MX_ADC1_Init();
 8000b0c:	f7ff fd10 	bl	8000530 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  ITM_SendChar('H');
 8000b10:	2048      	movs	r0, #72	; 0x48
 8000b12:	f7ff ffc7 	bl	8000aa4 <ITM_SendChar>
  ITM_SendChar('a');
 8000b16:	2061      	movs	r0, #97	; 0x61
 8000b18:	f7ff ffc4 	bl	8000aa4 <ITM_SendChar>
  ITM_SendChar('l');
 8000b1c:	206c      	movs	r0, #108	; 0x6c
 8000b1e:	f7ff ffc1 	bl	8000aa4 <ITM_SendChar>
  ITM_SendChar('l');
 8000b22:	206c      	movs	r0, #108	; 0x6c
 8000b24:	f7ff ffbe 	bl	8000aa4 <ITM_SendChar>
  ITM_SendChar('o');
 8000b28:	206f      	movs	r0, #111	; 0x6f
 8000b2a:	f7ff ffbb 	bl	8000aa4 <ITM_SendChar>
  ITM_SendChar(' ');
 8000b2e:	2020      	movs	r0, #32
 8000b30:	f7ff ffb8 	bl	8000aa4 <ITM_SendChar>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 1);
 8000b34:	2201      	movs	r2, #1
 8000b36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b3a:	4812      	ldr	r0, [pc, #72]	; (8000b84 <main+0x90>)
 8000b3c:	f001 f858 	bl	8001bf0 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000b40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b44:	f000 fa0e 	bl	8000f64 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b4e:	480d      	ldr	r0, [pc, #52]	; (8000b84 <main+0x90>)
 8000b50:	f001 f84e 	bl	8001bf0 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000b54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b58:	f000 fa04 	bl	8000f64 <HAL_Delay>
	  ITM_SendChar('H');
 8000b5c:	2048      	movs	r0, #72	; 0x48
 8000b5e:	f7ff ffa1 	bl	8000aa4 <ITM_SendChar>
	  ITM_SendChar('a');
 8000b62:	2061      	movs	r0, #97	; 0x61
 8000b64:	f7ff ff9e 	bl	8000aa4 <ITM_SendChar>
	  ITM_SendChar('l');
 8000b68:	206c      	movs	r0, #108	; 0x6c
 8000b6a:	f7ff ff9b 	bl	8000aa4 <ITM_SendChar>
	  ITM_SendChar('l');
 8000b6e:	206c      	movs	r0, #108	; 0x6c
 8000b70:	f7ff ff98 	bl	8000aa4 <ITM_SendChar>
	  ITM_SendChar('o');
 8000b74:	206f      	movs	r0, #111	; 0x6f
 8000b76:	f7ff ff95 	bl	8000aa4 <ITM_SendChar>
	  ITM_SendChar(' ');
 8000b7a:	2020      	movs	r0, #32
 8000b7c:	f7ff ff92 	bl	8000aa4 <ITM_SendChar>
	  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, 1);
 8000b80:	e7d8      	b.n	8000b34 <main+0x40>
 8000b82:	bf00      	nop
 8000b84:	40020400 	.word	0x40020400

08000b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b094      	sub	sp, #80	; 0x50
 8000b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	2234      	movs	r2, #52	; 0x34
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f002 fdc4 	bl	8003724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bac:	4b2c      	ldr	r3, [pc, #176]	; (8000c60 <SystemClock_Config+0xd8>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	4a2b      	ldr	r2, [pc, #172]	; (8000c60 <SystemClock_Config+0xd8>)
 8000bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb8:	4b29      	ldr	r3, [pc, #164]	; (8000c60 <SystemClock_Config+0xd8>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc4:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <SystemClock_Config+0xdc>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a26      	ldr	r2, [pc, #152]	; (8000c64 <SystemClock_Config+0xdc>)
 8000bca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <SystemClock_Config+0xdc>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be6:	2302      	movs	r3, #2
 8000be8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000bf0:	2319      	movs	r3, #25
 8000bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000bf4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000bf8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c02:	2302      	movs	r3, #2
 8000c04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f001 f85a 	bl	8001cc4 <HAL_RCC_OscConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c16:	f000 f827 	bl	8000c68 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c1a:	f001 f803 	bl	8001c24 <HAL_PWREx_EnableOverDrive>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000c24:	f000 f820 	bl	8000c68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c28:	230f      	movs	r3, #15
 8000c2a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000c40:	f107 0308 	add.w	r3, r7, #8
 8000c44:	2107      	movs	r1, #7
 8000c46:	4618      	mov	r0, r3
 8000c48:	f001 faea 	bl	8002220 <HAL_RCC_ClockConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000c52:	f000 f809 	bl	8000c68 <Error_Handler>
  }
}
 8000c56:	bf00      	nop
 8000c58:	3750      	adds	r7, #80	; 0x50
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40007000 	.word	0x40007000

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <Error_Handler+0x8>
	...

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <HAL_MspInit+0x44>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <HAL_MspInit+0x44>)
 8000c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c84:	6413      	str	r3, [r2, #64]	; 0x40
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <HAL_MspInit+0x44>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <HAL_MspInit+0x44>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	4a08      	ldr	r2, [pc, #32]	; (8000cb8 <HAL_MspInit+0x44>)
 8000c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_MspInit+0x44>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40023800 	.word	0x40023800

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <NMI_Handler+0x4>

08000cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <HardFault_Handler+0x4>

08000cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <MemManage_Handler+0x4>

08000cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d08:	f000 f90c 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <SystemInit+0x28>)
 8000d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1a:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <SystemInit+0x28>)
 8000d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <SystemInit+0x28>)
 8000d26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d2a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d42:	4a15      	ldr	r2, [pc, #84]	; (8000d98 <MX_USART2_UART_Init+0x5c>)
 8000d44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d62:	220c      	movs	r2, #12
 8000d64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d80:	f002 f84c 	bl	8002e1c <HAL_UART_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d8a:	f7ff ff6d 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000098 	.word	0x20000098
 8000d98:	40004400 	.word	0x40004400

08000d9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b0ae      	sub	sp, #184	; 0xb8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	2290      	movs	r2, #144	; 0x90
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f002 fcb1 	bl	8003724 <memset>
  if(uartHandle->Instance==USART2)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a21      	ldr	r2, [pc, #132]	; (8000e4c <HAL_UART_MspInit+0xb0>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d13a      	bne.n	8000e42 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dcc:	2380      	movs	r3, #128	; 0x80
 8000dce:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f001 fbf7 	bl	80025cc <HAL_RCCEx_PeriphCLKConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000de4:	f7ff ff40 	bl	8000c68 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000de8:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <HAL_UART_MspInit+0xb4>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	4a18      	ldr	r2, [pc, #96]	; (8000e50 <HAL_UART_MspInit+0xb4>)
 8000dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df2:	6413      	str	r3, [r2, #64]	; 0x40
 8000df4:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <HAL_UART_MspInit+0xb4>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <HAL_UART_MspInit+0xb4>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <HAL_UART_MspInit+0xb4>)
 8000e06:	f043 0308 	orr.w	r3, r3, #8
 8000e0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0c:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_UART_MspInit+0xb4>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	f003 0308 	and.w	r3, r3, #8
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART2TX_Pin|DEBUG_UART2RX_Pin;
 8000e18:	2360      	movs	r3, #96	; 0x60
 8000e1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e30:	2307      	movs	r3, #7
 8000e32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e36:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <HAL_UART_MspInit+0xb8>)
 8000e3e:	f000 fd2b 	bl	8001898 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e42:	bf00      	nop
 8000e44:	37b8      	adds	r7, #184	; 0xb8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40004400 	.word	0x40004400
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020c00 	.word	0x40020c00

08000e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e5e:	e003      	b.n	8000e68 <LoopCopyDataInit>

08000e60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e66:	3104      	adds	r1, #4

08000e68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e68:	480b      	ldr	r0, [pc, #44]	; (8000e98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e70:	d3f6      	bcc.n	8000e60 <CopyDataInit>
  ldr  r2, =_sbss
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e74:	e002      	b.n	8000e7c <LoopFillZerobss>

08000e76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e78:	f842 3b04 	str.w	r3, [r2], #4

08000e7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e80:	d3f9      	bcc.n	8000e76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e82:	f7ff ff45 	bl	8000d10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e86:	f002 fc29 	bl	80036dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8a:	f7ff fe33 	bl	8000af4 <main>
  bx  lr    
 8000e8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e90:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000e94:	08003774 	.word	0x08003774
  ldr  r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e9c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000ea0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000ea4:	20000120 	.word	0x20000120

08000ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC_IRQHandler>

08000eaa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eae:	2003      	movs	r0, #3
 8000eb0:	f000 fcbe 	bl	8001830 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f000 f805 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eba:	f7ff fedb 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_InitTick+0x54>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_InitTick+0x58>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fccb 	bl	800187e <HAL_SYSTICK_Config>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00e      	b.n	8000f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d80a      	bhi.n	8000f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f000 fca1 	bl	8001846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f04:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <HAL_InitTick+0x5c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000004 	.word	0x20000004

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x20>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x24>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <HAL_IncTick+0x24>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008
 8000f48:	2000011c 	.word	0x2000011c

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	2000011c 	.word	0x2000011c

08000f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff ffee 	bl	8000f4c <HAL_GetTick>
 8000f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7c:	d005      	beq.n	8000f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_Delay+0x44>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f8a:	bf00      	nop
 8000f8c:	f7ff ffde 	bl	8000f4c <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d8f7      	bhi.n	8000f8c <HAL_Delay+0x28>
  {
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008

08000fac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e031      	b.n	8001026 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d109      	bne.n	8000fde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff fb02 	bl	80005d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f003 0310 	and.w	r3, r3, #16
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d116      	bne.n	8001018 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <HAL_ADC_Init+0x84>)
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	f043 0202 	orr.w	r2, r3, #2
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 f970 	bl	80012e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f023 0303 	bic.w	r3, r3, #3
 800100e:	f043 0201 	orr.w	r2, r3, #1
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	641a      	str	r2, [r3, #64]	; 0x40
 8001016:	e001      	b.n	800101c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	ffffeefd 	.word	0xffffeefd

08001034 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001048:	2b01      	cmp	r3, #1
 800104a:	d101      	bne.n	8001050 <HAL_ADC_ConfigChannel+0x1c>
 800104c:	2302      	movs	r3, #2
 800104e:	e136      	b.n	80012be <HAL_ADC_ConfigChannel+0x28a>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2201      	movs	r2, #1
 8001054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b09      	cmp	r3, #9
 800105e:	d93a      	bls.n	80010d6 <HAL_ADC_ConfigChannel+0xa2>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001068:	d035      	beq.n	80010d6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68d9      	ldr	r1, [r3, #12]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	b29b      	uxth	r3, r3
 8001076:	461a      	mov	r2, r3
 8001078:	4613      	mov	r3, r2
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4413      	add	r3, r2
 800107e:	3b1e      	subs	r3, #30
 8001080:	2207      	movs	r2, #7
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	400a      	ands	r2, r1
 800108e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a8d      	ldr	r2, [pc, #564]	; (80012cc <HAL_ADC_ConfigChannel+0x298>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d10a      	bne.n	80010b0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	68d9      	ldr	r1, [r3, #12]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	061a      	lsls	r2, r3, #24
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	430a      	orrs	r2, r1
 80010ac:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010ae:	e035      	b.n	800111c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	68d9      	ldr	r1, [r3, #12]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	4618      	mov	r0, r3
 80010c2:	4603      	mov	r3, r0
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	4403      	add	r3, r0
 80010c8:	3b1e      	subs	r3, #30
 80010ca:	409a      	lsls	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	430a      	orrs	r2, r1
 80010d2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010d4:	e022      	b.n	800111c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6919      	ldr	r1, [r3, #16]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	461a      	mov	r2, r3
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	2207      	movs	r2, #7
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43da      	mvns	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	400a      	ands	r2, r1
 80010f8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6919      	ldr	r1, [r3, #16]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	b29b      	uxth	r3, r3
 800110a:	4618      	mov	r0, r3
 800110c:	4603      	mov	r3, r0
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4403      	add	r3, r0
 8001112:	409a      	lsls	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	430a      	orrs	r2, r1
 800111a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b06      	cmp	r3, #6
 8001122:	d824      	bhi.n	800116e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	3b05      	subs	r3, #5
 8001136:	221f      	movs	r2, #31
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43da      	mvns	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	400a      	ands	r2, r1
 8001144:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	b29b      	uxth	r3, r3
 8001152:	4618      	mov	r0, r3
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	3b05      	subs	r3, #5
 8001160:	fa00 f203 	lsl.w	r2, r0, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	430a      	orrs	r2, r1
 800116a:	635a      	str	r2, [r3, #52]	; 0x34
 800116c:	e04c      	b.n	8001208 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b0c      	cmp	r3, #12
 8001174:	d824      	bhi.n	80011c0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	3b23      	subs	r3, #35	; 0x23
 8001188:	221f      	movs	r2, #31
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43da      	mvns	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	400a      	ands	r2, r1
 8001196:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	4618      	mov	r0, r3
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	3b23      	subs	r3, #35	; 0x23
 80011b2:	fa00 f203 	lsl.w	r2, r0, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	430a      	orrs	r2, r1
 80011bc:	631a      	str	r2, [r3, #48]	; 0x30
 80011be:	e023      	b.n	8001208 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	3b41      	subs	r3, #65	; 0x41
 80011d2:	221f      	movs	r2, #31
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43da      	mvns	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	400a      	ands	r2, r1
 80011e0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	3b41      	subs	r3, #65	; 0x41
 80011fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a30      	ldr	r2, [pc, #192]	; (80012d0 <HAL_ADC_ConfigChannel+0x29c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d10a      	bne.n	8001228 <HAL_ADC_ConfigChannel+0x1f4>
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800121a:	d105      	bne.n	8001228 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800121c:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	4a2c      	ldr	r2, [pc, #176]	; (80012d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001222:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001226:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a28      	ldr	r2, [pc, #160]	; (80012d0 <HAL_ADC_ConfigChannel+0x29c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d10f      	bne.n	8001252 <HAL_ADC_ConfigChannel+0x21e>
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b12      	cmp	r3, #18
 8001238:	d10b      	bne.n	8001252 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800123a:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	4a25      	ldr	r2, [pc, #148]	; (80012d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001240:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001244:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001246:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	4a22      	ldr	r2, [pc, #136]	; (80012d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800124c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001250:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a1e      	ldr	r2, [pc, #120]	; (80012d0 <HAL_ADC_ConfigChannel+0x29c>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d12b      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x280>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a1a      	ldr	r2, [pc, #104]	; (80012cc <HAL_ADC_ConfigChannel+0x298>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d003      	beq.n	800126e <HAL_ADC_ConfigChannel+0x23a>
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b11      	cmp	r3, #17
 800126c:	d122      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800126e:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001274:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001278:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	4a15      	ldr	r2, [pc, #84]	; (80012d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001280:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001284:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a10      	ldr	r2, [pc, #64]	; (80012cc <HAL_ADC_ConfigChannel+0x298>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d111      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <HAL_ADC_ConfigChannel+0x2a4>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a11      	ldr	r2, [pc, #68]	; (80012dc <HAL_ADC_ConfigChannel+0x2a8>)
 8001296:	fba2 2303 	umull	r2, r3, r2, r3
 800129a:	0c9a      	lsrs	r2, r3, #18
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80012a6:	e002      	b.n	80012ae <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1f9      	bne.n	80012a8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	10000012 	.word	0x10000012
 80012d0:	40012000 	.word	0x40012000
 80012d4:	40012300 	.word	0x40012300
 80012d8:	20000000 	.word	0x20000000
 80012dc:	431bde83 	.word	0x431bde83

080012e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80012e8:	4b78      	ldr	r3, [pc, #480]	; (80014cc <ADC_Init+0x1ec>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	4a77      	ldr	r2, [pc, #476]	; (80014cc <ADC_Init+0x1ec>)
 80012ee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80012f2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80012f4:	4b75      	ldr	r3, [pc, #468]	; (80014cc <ADC_Init+0x1ec>)
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	4973      	ldr	r1, [pc, #460]	; (80014cc <ADC_Init+0x1ec>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001310:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6859      	ldr	r1, [r3, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	021a      	lsls	r2, r3, #8
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001334:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6859      	ldr	r1, [r3, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001356:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6899      	ldr	r1, [r3, #8]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	430a      	orrs	r2, r1
 8001368:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136e:	4a58      	ldr	r2, [pc, #352]	; (80014d0 <ADC_Init+0x1f0>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d022      	beq.n	80013ba <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001382:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6899      	ldr	r1, [r3, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6899      	ldr	r1, [r3, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	e00f      	b.n	80013da <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 0202 	bic.w	r2, r2, #2
 80013e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6899      	ldr	r1, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	005a      	lsls	r2, r3, #1
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d01b      	beq.n	8001440 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001416:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001426:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6859      	ldr	r1, [r3, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	3b01      	subs	r3, #1
 8001434:	035a      	lsls	r2, r3, #13
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	e007      	b.n	8001450 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800144e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800145e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	3b01      	subs	r3, #1
 800146c:	051a      	lsls	r2, r3, #20
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001484:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6899      	ldr	r1, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001492:	025a      	lsls	r2, r3, #9
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	430a      	orrs	r2, r1
 800149a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6899      	ldr	r1, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	029a      	lsls	r2, r3, #10
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	609a      	str	r2, [r3, #8]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	40012300 	.word	0x40012300
 80014d0:	0f000001 	.word	0x0f000001

080014d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e0ed      	b.n	80016c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d102      	bne.n	80014f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff f8e4 	bl	80006c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 0201 	orr.w	r2, r2, #1
 8001506:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001508:	f7ff fd20 	bl	8000f4c <HAL_GetTick>
 800150c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800150e:	e012      	b.n	8001536 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001510:	f7ff fd1c 	bl	8000f4c <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b0a      	cmp	r3, #10
 800151c:	d90b      	bls.n	8001536 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001522:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2205      	movs	r2, #5
 800152e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e0c5      	b.n	80016c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0e5      	beq.n	8001510 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0202 	bic.w	r2, r2, #2
 8001552:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001554:	f7ff fcfa 	bl	8000f4c <HAL_GetTick>
 8001558:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800155a:	e012      	b.n	8001582 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800155c:	f7ff fcf6 	bl	8000f4c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b0a      	cmp	r3, #10
 8001568:	d90b      	bls.n	8001582 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2205      	movs	r2, #5
 800157a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e09f      	b.n	80016c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1e5      	bne.n	800155c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7e1b      	ldrb	r3, [r3, #24]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d108      	bne.n	80015aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	e007      	b.n	80015ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	7e5b      	ldrb	r3, [r3, #25]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d108      	bne.n	80015d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	e007      	b.n	80015e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7e9b      	ldrb	r3, [r3, #26]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d108      	bne.n	80015fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0220 	orr.w	r2, r2, #32
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	e007      	b.n	800160e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0220 	bic.w	r2, r2, #32
 800160c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7edb      	ldrb	r3, [r3, #27]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d108      	bne.n	8001628 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0210 	bic.w	r2, r2, #16
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	e007      	b.n	8001638 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0210 	orr.w	r2, r2, #16
 8001636:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	7f1b      	ldrb	r3, [r3, #28]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d108      	bne.n	8001652 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0208 	orr.w	r2, r2, #8
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	e007      	b.n	8001662 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0208 	bic.w	r2, r2, #8
 8001660:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7f5b      	ldrb	r3, [r3, #29]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d108      	bne.n	800167c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f042 0204 	orr.w	r2, r2, #4
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	e007      	b.n	800168c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0204 	bic.w	r2, r2, #4
 800168a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	ea42 0103 	orr.w	r1, r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	1e5a      	subs	r2, r3, #1
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <__NVIC_SetPriorityGrouping>:
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <__NVIC_SetPriorityGrouping+0x40>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e8:	4013      	ands	r3, r2
 80016ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fa:	4a04      	ldr	r2, [pc, #16]	; (800170c <__NVIC_SetPriorityGrouping+0x40>)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	60d3      	str	r3, [r2, #12]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00
 8001710:	05fa0000 	.word	0x05fa0000

08001714 <__NVIC_GetPriorityGrouping>:
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <__NVIC_GetPriorityGrouping+0x18>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	f003 0307 	and.w	r3, r3, #7
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_SetPriority>:
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	2b00      	cmp	r3, #0
 8001742:	db0a      	blt.n	800175a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	b2da      	uxtb	r2, r3
 8001748:	490c      	ldr	r1, [pc, #48]	; (800177c <__NVIC_SetPriority+0x4c>)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	0112      	lsls	r2, r2, #4
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	440b      	add	r3, r1
 8001754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001758:	e00a      	b.n	8001770 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4908      	ldr	r1, [pc, #32]	; (8001780 <__NVIC_SetPriority+0x50>)
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	3b04      	subs	r3, #4
 8001768:	0112      	lsls	r2, r2, #4
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	440b      	add	r3, r1
 800176e:	761a      	strb	r2, [r3, #24]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	e000e100 	.word	0xe000e100
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <NVIC_EncodePriority>:
{
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	; 0x24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f1c3 0307 	rsb	r3, r3, #7
 800179e:	2b04      	cmp	r3, #4
 80017a0:	bf28      	it	cs
 80017a2:	2304      	movcs	r3, #4
 80017a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3304      	adds	r3, #4
 80017aa:	2b06      	cmp	r3, #6
 80017ac:	d902      	bls.n	80017b4 <NVIC_EncodePriority+0x30>
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3b03      	subs	r3, #3
 80017b2:	e000      	b.n	80017b6 <NVIC_EncodePriority+0x32>
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	f04f 32ff 	mov.w	r2, #4294967295
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43da      	mvns	r2, r3
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	401a      	ands	r2, r3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017cc:	f04f 31ff 	mov.w	r1, #4294967295
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	fa01 f303 	lsl.w	r3, r1, r3
 80017d6:	43d9      	mvns	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	4313      	orrs	r3, r2
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3724      	adds	r7, #36	; 0x24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <SysTick_Config>:
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017fc:	d301      	bcc.n	8001802 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80017fe:	2301      	movs	r3, #1
 8001800:	e00f      	b.n	8001822 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001802:	4a0a      	ldr	r2, [pc, #40]	; (800182c <SysTick_Config+0x40>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800180a:	210f      	movs	r1, #15
 800180c:	f04f 30ff 	mov.w	r0, #4294967295
 8001810:	f7ff ff8e 	bl	8001730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <SysTick_Config+0x40>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800181a:	4b04      	ldr	r3, [pc, #16]	; (800182c <SysTick_Config+0x40>)
 800181c:	2207      	movs	r2, #7
 800181e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	e000e010 	.word	0xe000e010

08001830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ff47 	bl	80016cc <__NVIC_SetPriorityGrouping>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001846:	b580      	push	{r7, lr}
 8001848:	b086      	sub	sp, #24
 800184a:	af00      	add	r7, sp, #0
 800184c:	4603      	mov	r3, r0
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001858:	f7ff ff5c 	bl	8001714 <__NVIC_GetPriorityGrouping>
 800185c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	6978      	ldr	r0, [r7, #20]
 8001864:	f7ff ff8e 	bl	8001784 <NVIC_EncodePriority>
 8001868:	4602      	mov	r2, r0
 800186a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff5d 	bl	8001730 <__NVIC_SetPriority>
}
 8001876:	bf00      	nop
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffb0 	bl	80017ec <SysTick_Config>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
 80018b6:	e175      	b.n	8001ba4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018b8:	2201      	movs	r2, #1
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	f040 8164 	bne.w	8001b9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d005      	beq.n	80018ee <HAL_GPIO_Init+0x56>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d130      	bne.n	8001950 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	2203      	movs	r2, #3
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001924:	2201      	movs	r2, #1
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	f003 0201 	and.w	r2, r3, #1
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	2b03      	cmp	r3, #3
 800195a:	d017      	beq.n	800198c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	2203      	movs	r2, #3
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d123      	bne.n	80019e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	08da      	lsrs	r2, r3, #3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3208      	adds	r2, #8
 80019a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	220f      	movs	r2, #15
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	691a      	ldr	r2, [r3, #16]
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	08da      	lsrs	r2, r3, #3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3208      	adds	r2, #8
 80019da:	69b9      	ldr	r1, [r7, #24]
 80019dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	2203      	movs	r2, #3
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0203 	and.w	r2, r3, #3
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 80be 	beq.w	8001b9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a22:	4b66      	ldr	r3, [pc, #408]	; (8001bbc <HAL_GPIO_Init+0x324>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	4a65      	ldr	r2, [pc, #404]	; (8001bbc <HAL_GPIO_Init+0x324>)
 8001a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2e:	4b63      	ldr	r3, [pc, #396]	; (8001bbc <HAL_GPIO_Init+0x324>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a3a:	4a61      	ldr	r2, [pc, #388]	; (8001bc0 <HAL_GPIO_Init+0x328>)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	3302      	adds	r3, #2
 8001a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	220f      	movs	r2, #15
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a58      	ldr	r2, [pc, #352]	; (8001bc4 <HAL_GPIO_Init+0x32c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d037      	beq.n	8001ad6 <HAL_GPIO_Init+0x23e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a57      	ldr	r2, [pc, #348]	; (8001bc8 <HAL_GPIO_Init+0x330>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d031      	beq.n	8001ad2 <HAL_GPIO_Init+0x23a>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a56      	ldr	r2, [pc, #344]	; (8001bcc <HAL_GPIO_Init+0x334>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d02b      	beq.n	8001ace <HAL_GPIO_Init+0x236>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a55      	ldr	r2, [pc, #340]	; (8001bd0 <HAL_GPIO_Init+0x338>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d025      	beq.n	8001aca <HAL_GPIO_Init+0x232>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a54      	ldr	r2, [pc, #336]	; (8001bd4 <HAL_GPIO_Init+0x33c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d01f      	beq.n	8001ac6 <HAL_GPIO_Init+0x22e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a53      	ldr	r2, [pc, #332]	; (8001bd8 <HAL_GPIO_Init+0x340>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d019      	beq.n	8001ac2 <HAL_GPIO_Init+0x22a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a52      	ldr	r2, [pc, #328]	; (8001bdc <HAL_GPIO_Init+0x344>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d013      	beq.n	8001abe <HAL_GPIO_Init+0x226>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a51      	ldr	r2, [pc, #324]	; (8001be0 <HAL_GPIO_Init+0x348>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d00d      	beq.n	8001aba <HAL_GPIO_Init+0x222>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a50      	ldr	r2, [pc, #320]	; (8001be4 <HAL_GPIO_Init+0x34c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d007      	beq.n	8001ab6 <HAL_GPIO_Init+0x21e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4f      	ldr	r2, [pc, #316]	; (8001be8 <HAL_GPIO_Init+0x350>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d101      	bne.n	8001ab2 <HAL_GPIO_Init+0x21a>
 8001aae:	2309      	movs	r3, #9
 8001ab0:	e012      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ab2:	230a      	movs	r3, #10
 8001ab4:	e010      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	e00e      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001aba:	2307      	movs	r3, #7
 8001abc:	e00c      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001abe:	2306      	movs	r3, #6
 8001ac0:	e00a      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ac2:	2305      	movs	r3, #5
 8001ac4:	e008      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001aca:	2303      	movs	r3, #3
 8001acc:	e004      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e002      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	69fa      	ldr	r2, [r7, #28]
 8001ada:	f002 0203 	and.w	r2, r2, #3
 8001ade:	0092      	lsls	r2, r2, #2
 8001ae0:	4093      	lsls	r3, r2
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ae8:	4935      	ldr	r1, [pc, #212]	; (8001bc0 <HAL_GPIO_Init+0x328>)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	089b      	lsrs	r3, r3, #2
 8001aee:	3302      	adds	r3, #2
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001af6:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b1a:	4a34      	ldr	r2, [pc, #208]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b20:	4b32      	ldr	r3, [pc, #200]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b44:	4a29      	ldr	r2, [pc, #164]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b4a:	4b28      	ldr	r3, [pc, #160]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b6e:	4a1f      	ldr	r2, [pc, #124]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b74:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b98:	4a14      	ldr	r2, [pc, #80]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	2b0f      	cmp	r3, #15
 8001ba8:	f67f ae86 	bls.w	80018b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	3724      	adds	r7, #36	; 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40013800 	.word	0x40013800
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	40020800 	.word	0x40020800
 8001bd0:	40020c00 	.word	0x40020c00
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40021400 	.word	0x40021400
 8001bdc:	40021800 	.word	0x40021800
 8001be0:	40021c00 	.word	0x40021c00
 8001be4:	40022000 	.word	0x40022000
 8001be8:	40022400 	.word	0x40022400
 8001bec:	40013c00 	.word	0x40013c00

08001bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c00:	787b      	ldrb	r3, [r7, #1]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c0c:	e003      	b.n	8001c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c0e:	887b      	ldrh	r3, [r7, #2]
 8001c10:	041a      	lsls	r2, r3, #16
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	619a      	str	r2, [r3, #24]
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <HAL_PWREx_EnableOverDrive+0x98>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	4a22      	ldr	r2, [pc, #136]	; (8001cbc <HAL_PWREx_EnableOverDrive+0x98>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3a:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <HAL_PWREx_EnableOverDrive+0x98>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c46:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a1d      	ldr	r2, [pc, #116]	; (8001cc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c50:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c52:	f7ff f97b 	bl	8000f4c <HAL_GetTick>
 8001c56:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c58:	e009      	b.n	8001c6e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c5a:	f7ff f977 	bl	8000f4c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c68:	d901      	bls.n	8001c6e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e022      	b.n	8001cb4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c6e:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c7a:	d1ee      	bne.n	8001c5a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c7c:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0f      	ldr	r2, [pc, #60]	; (8001cc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c86:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c88:	f7ff f960 	bl	8000f4c <HAL_GetTick>
 8001c8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c8e:	e009      	b.n	8001ca4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c90:	f7ff f95c 	bl	8000f4c <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c9e:	d901      	bls.n	8001ca4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e007      	b.n	8001cb4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001cb0:	d1ee      	bne.n	8001c90 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40007000 	.word	0x40007000

08001cc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e29b      	b.n	8002212 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 8087 	beq.w	8001df6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ce8:	4b96      	ldr	r3, [pc, #600]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 030c 	and.w	r3, r3, #12
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d00c      	beq.n	8001d0e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cf4:	4b93      	ldr	r3, [pc, #588]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d112      	bne.n	8001d26 <HAL_RCC_OscConfig+0x62>
 8001d00:	4b90      	ldr	r3, [pc, #576]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d0c:	d10b      	bne.n	8001d26 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0e:	4b8d      	ldr	r3, [pc, #564]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d06c      	beq.n	8001df4 <HAL_RCC_OscConfig+0x130>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d168      	bne.n	8001df4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e275      	b.n	8002212 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d2e:	d106      	bne.n	8001d3e <HAL_RCC_OscConfig+0x7a>
 8001d30:	4b84      	ldr	r3, [pc, #528]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a83      	ldr	r2, [pc, #524]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	e02e      	b.n	8001d9c <HAL_RCC_OscConfig+0xd8>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x9c>
 8001d46:	4b7f      	ldr	r3, [pc, #508]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a7e      	ldr	r2, [pc, #504]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	4b7c      	ldr	r3, [pc, #496]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a7b      	ldr	r2, [pc, #492]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e01d      	b.n	8001d9c <HAL_RCC_OscConfig+0xd8>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0xc0>
 8001d6a:	4b76      	ldr	r3, [pc, #472]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a75      	ldr	r2, [pc, #468]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	4b73      	ldr	r3, [pc, #460]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a72      	ldr	r2, [pc, #456]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e00b      	b.n	8001d9c <HAL_RCC_OscConfig+0xd8>
 8001d84:	4b6f      	ldr	r3, [pc, #444]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a6e      	ldr	r2, [pc, #440]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4b6c      	ldr	r3, [pc, #432]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a6b      	ldr	r2, [pc, #428]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d013      	beq.n	8001dcc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da4:	f7ff f8d2 	bl	8000f4c <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dac:	f7ff f8ce 	bl	8000f4c <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	; 0x64
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e229      	b.n	8002212 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	4b61      	ldr	r3, [pc, #388]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0xe8>
 8001dca:	e014      	b.n	8001df6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7ff f8be 	bl	8000f4c <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7ff f8ba 	bl	8000f4c <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	; 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e215      	b.n	8002212 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de6:	4b57      	ldr	r3, [pc, #348]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x110>
 8001df2:	e000      	b.n	8001df6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d069      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e02:	4b50      	ldr	r3, [pc, #320]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00b      	beq.n	8001e26 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e0e:	4b4d      	ldr	r3, [pc, #308]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d11c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x190>
 8001e1a:	4b4a      	ldr	r3, [pc, #296]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d116      	bne.n	8001e54 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e26:	4b47      	ldr	r3, [pc, #284]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <HAL_RCC_OscConfig+0x17a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d001      	beq.n	8001e3e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e1e9      	b.n	8002212 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3e:	4b41      	ldr	r3, [pc, #260]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	493d      	ldr	r1, [pc, #244]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e52:	e040      	b.n	8001ed6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d023      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e5c:	4b39      	ldr	r3, [pc, #228]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a38      	ldr	r2, [pc, #224]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e68:	f7ff f870 	bl	8000f4c <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e70:	f7ff f86c 	bl	8000f4c <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e1c7      	b.n	8002212 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e82:	4b30      	ldr	r3, [pc, #192]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8e:	4b2d      	ldr	r3, [pc, #180]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4929      	ldr	r1, [pc, #164]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]
 8001ea2:	e018      	b.n	8001ed6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ea4:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a26      	ldr	r2, [pc, #152]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001eaa:	f023 0301 	bic.w	r3, r3, #1
 8001eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7ff f84c 	bl	8000f4c <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb8:	f7ff f848 	bl	8000f4c <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e1a3      	b.n	8002212 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eca:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d038      	beq.n	8001f54 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d019      	beq.n	8001f1e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eea:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eee:	4a15      	ldr	r2, [pc, #84]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef6:	f7ff f829 	bl	8000f4c <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001efe:	f7ff f825 	bl	8000f4c <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e180      	b.n	8002212 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x23a>
 8001f1c:	e01a      	b.n	8001f54 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f22:	4a08      	ldr	r2, [pc, #32]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001f24:	f023 0301 	bic.w	r3, r3, #1
 8001f28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2a:	f7ff f80f 	bl	8000f4c <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f30:	e00a      	b.n	8001f48 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f32:	f7ff f80b 	bl	8000f4c <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d903      	bls.n	8001f48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e166      	b.n	8002212 <HAL_RCC_OscConfig+0x54e>
 8001f44:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f48:	4b92      	ldr	r3, [pc, #584]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8001f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1ee      	bne.n	8001f32 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 80a4 	beq.w	80020aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f62:	4b8c      	ldr	r3, [pc, #560]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10d      	bne.n	8001f8a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6e:	4b89      	ldr	r3, [pc, #548]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	4a88      	ldr	r2, [pc, #544]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8001f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f78:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7a:	4b86      	ldr	r3, [pc, #536]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f86:	2301      	movs	r3, #1
 8001f88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f8a:	4b83      	ldr	r3, [pc, #524]	; (8002198 <HAL_RCC_OscConfig+0x4d4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d118      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f96:	4b80      	ldr	r3, [pc, #512]	; (8002198 <HAL_RCC_OscConfig+0x4d4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a7f      	ldr	r2, [pc, #508]	; (8002198 <HAL_RCC_OscConfig+0x4d4>)
 8001f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa2:	f7fe ffd3 	bl	8000f4c <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001faa:	f7fe ffcf 	bl	8000f4c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b64      	cmp	r3, #100	; 0x64
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e12a      	b.n	8002212 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fbc:	4b76      	ldr	r3, [pc, #472]	; (8002198 <HAL_RCC_OscConfig+0x4d4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d106      	bne.n	8001fde <HAL_RCC_OscConfig+0x31a>
 8001fd0:	4b70      	ldr	r3, [pc, #448]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	4a6f      	ldr	r2, [pc, #444]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6713      	str	r3, [r2, #112]	; 0x70
 8001fdc:	e02d      	b.n	800203a <HAL_RCC_OscConfig+0x376>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x33c>
 8001fe6:	4b6b      	ldr	r3, [pc, #428]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fea:	4a6a      	ldr	r2, [pc, #424]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8001fec:	f023 0301 	bic.w	r3, r3, #1
 8001ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff2:	4b68      	ldr	r3, [pc, #416]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff6:	4a67      	ldr	r2, [pc, #412]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8001ff8:	f023 0304 	bic.w	r3, r3, #4
 8001ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffe:	e01c      	b.n	800203a <HAL_RCC_OscConfig+0x376>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b05      	cmp	r3, #5
 8002006:	d10c      	bne.n	8002022 <HAL_RCC_OscConfig+0x35e>
 8002008:	4b62      	ldr	r3, [pc, #392]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 800200a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200c:	4a61      	ldr	r2, [pc, #388]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 800200e:	f043 0304 	orr.w	r3, r3, #4
 8002012:	6713      	str	r3, [r2, #112]	; 0x70
 8002014:	4b5f      	ldr	r3, [pc, #380]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002018:	4a5e      	ldr	r2, [pc, #376]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6713      	str	r3, [r2, #112]	; 0x70
 8002020:	e00b      	b.n	800203a <HAL_RCC_OscConfig+0x376>
 8002022:	4b5c      	ldr	r3, [pc, #368]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002026:	4a5b      	ldr	r2, [pc, #364]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8002028:	f023 0301 	bic.w	r3, r3, #1
 800202c:	6713      	str	r3, [r2, #112]	; 0x70
 800202e:	4b59      	ldr	r3, [pc, #356]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8002030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002032:	4a58      	ldr	r2, [pc, #352]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8002034:	f023 0304 	bic.w	r3, r3, #4
 8002038:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d015      	beq.n	800206e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002042:	f7fe ff83 	bl	8000f4c <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002048:	e00a      	b.n	8002060 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204a:	f7fe ff7f 	bl	8000f4c <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	f241 3288 	movw	r2, #5000	; 0x1388
 8002058:	4293      	cmp	r3, r2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e0d8      	b.n	8002212 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002060:	4b4c      	ldr	r3, [pc, #304]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8002062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0ee      	beq.n	800204a <HAL_RCC_OscConfig+0x386>
 800206c:	e014      	b.n	8002098 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206e:	f7fe ff6d 	bl	8000f4c <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002074:	e00a      	b.n	800208c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7fe ff69 	bl	8000f4c <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f241 3288 	movw	r2, #5000	; 0x1388
 8002084:	4293      	cmp	r3, r2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e0c2      	b.n	8002212 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208c:	4b41      	ldr	r3, [pc, #260]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 800208e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1ee      	bne.n	8002076 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002098:	7dfb      	ldrb	r3, [r7, #23]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d105      	bne.n	80020aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209e:	4b3d      	ldr	r3, [pc, #244]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	4a3c      	ldr	r2, [pc, #240]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 80020a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 80ae 	beq.w	8002210 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020b4:	4b37      	ldr	r3, [pc, #220]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 030c 	and.w	r3, r3, #12
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d06d      	beq.n	800219c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d14b      	bne.n	8002160 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c8:	4b32      	ldr	r3, [pc, #200]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a31      	ldr	r2, [pc, #196]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 80020ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d4:	f7fe ff3a 	bl	8000f4c <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020dc:	f7fe ff36 	bl	8000f4c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e091      	b.n	8002212 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ee:	4b29      	ldr	r3, [pc, #164]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69da      	ldr	r2, [r3, #28]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	019b      	lsls	r3, r3, #6
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002110:	085b      	lsrs	r3, r3, #1
 8002112:	3b01      	subs	r3, #1
 8002114:	041b      	lsls	r3, r3, #16
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	061b      	lsls	r3, r3, #24
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	071b      	lsls	r3, r3, #28
 8002126:	491b      	ldr	r1, [pc, #108]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8002128:	4313      	orrs	r3, r2
 800212a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800212c:	4b19      	ldr	r3, [pc, #100]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a18      	ldr	r2, [pc, #96]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8002132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7fe ff08 	bl	8000f4c <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002140:	f7fe ff04 	bl	8000f4c <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e05f      	b.n	8002212 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0x47c>
 800215e:	e057      	b.n	8002210 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0b      	ldr	r2, [pc, #44]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8002166:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800216a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7fe feee 	bl	8000f4c <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002174:	f7fe feea 	bl	8000f4c <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e045      	b.n	8002212 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002186:	4b03      	ldr	r3, [pc, #12]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x4b0>
 8002192:	e03d      	b.n	8002210 <HAL_RCC_OscConfig+0x54c>
 8002194:	40023800 	.word	0x40023800
 8002198:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800219c:	4b1f      	ldr	r3, [pc, #124]	; (800221c <HAL_RCC_OscConfig+0x558>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d030      	beq.n	800220c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d129      	bne.n	800220c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d122      	bne.n	800220c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021cc:	4013      	ands	r3, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d119      	bne.n	800220c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e2:	085b      	lsrs	r3, r3, #1
 80021e4:	3b01      	subs	r3, #1
 80021e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d10f      	bne.n	800220c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d107      	bne.n	800220c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002208:	429a      	cmp	r2, r3
 800220a:	d001      	beq.n	8002210 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e000      	b.n	8002212 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800

08002220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0d0      	b.n	80023da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002238:	4b6a      	ldr	r3, [pc, #424]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d910      	bls.n	8002268 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b67      	ldr	r3, [pc, #412]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 020f 	bic.w	r2, r3, #15
 800224e:	4965      	ldr	r1, [pc, #404]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002256:	4b63      	ldr	r3, [pc, #396]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d001      	beq.n	8002268 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0b8      	b.n	80023da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d020      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002280:	4b59      	ldr	r3, [pc, #356]	; (80023e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	4a58      	ldr	r2, [pc, #352]	; (80023e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002286:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800228a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002298:	4b53      	ldr	r3, [pc, #332]	; (80023e8 <HAL_RCC_ClockConfig+0x1c8>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	4a52      	ldr	r2, [pc, #328]	; (80023e8 <HAL_RCC_ClockConfig+0x1c8>)
 800229e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a4:	4b50      	ldr	r3, [pc, #320]	; (80023e8 <HAL_RCC_ClockConfig+0x1c8>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	494d      	ldr	r1, [pc, #308]	; (80023e8 <HAL_RCC_ClockConfig+0x1c8>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d040      	beq.n	8002344 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d107      	bne.n	80022da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ca:	4b47      	ldr	r3, [pc, #284]	; (80023e8 <HAL_RCC_ClockConfig+0x1c8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d115      	bne.n	8002302 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e07f      	b.n	80023da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d107      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e2:	4b41      	ldr	r3, [pc, #260]	; (80023e8 <HAL_RCC_ClockConfig+0x1c8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d109      	bne.n	8002302 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e073      	b.n	80023da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f2:	4b3d      	ldr	r3, [pc, #244]	; (80023e8 <HAL_RCC_ClockConfig+0x1c8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e06b      	b.n	80023da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002302:	4b39      	ldr	r3, [pc, #228]	; (80023e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f023 0203 	bic.w	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	4936      	ldr	r1, [pc, #216]	; (80023e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002310:	4313      	orrs	r3, r2
 8002312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002314:	f7fe fe1a 	bl	8000f4c <HAL_GetTick>
 8002318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231a:	e00a      	b.n	8002332 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800231c:	f7fe fe16 	bl	8000f4c <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f241 3288 	movw	r2, #5000	; 0x1388
 800232a:	4293      	cmp	r3, r2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e053      	b.n	80023da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002332:	4b2d      	ldr	r3, [pc, #180]	; (80023e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 020c 	and.w	r2, r3, #12
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	429a      	cmp	r2, r3
 8002342:	d1eb      	bne.n	800231c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002344:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d210      	bcs.n	8002374 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002352:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 020f 	bic.w	r2, r3, #15
 800235a:	4922      	ldr	r1, [pc, #136]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	4313      	orrs	r3, r2
 8002360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d001      	beq.n	8002374 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e032      	b.n	80023da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002380:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4916      	ldr	r1, [pc, #88]	; (80023e8 <HAL_RCC_ClockConfig+0x1c8>)
 800238e:	4313      	orrs	r3, r2
 8002390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d009      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800239e:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_RCC_ClockConfig+0x1c8>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	490e      	ldr	r1, [pc, #56]	; (80023e8 <HAL_RCC_ClockConfig+0x1c8>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023b2:	f000 f821 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 80023b6:	4602      	mov	r2, r0
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_RCC_ClockConfig+0x1c8>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	490a      	ldr	r1, [pc, #40]	; (80023ec <HAL_RCC_ClockConfig+0x1cc>)
 80023c4:	5ccb      	ldrb	r3, [r1, r3]
 80023c6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ca:	4a09      	ldr	r2, [pc, #36]	; (80023f0 <HAL_RCC_ClockConfig+0x1d0>)
 80023cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <HAL_RCC_ClockConfig+0x1d4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe fd76 	bl	8000ec4 <HAL_InitTick>

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023c00 	.word	0x40023c00
 80023e8:	40023800 	.word	0x40023800
 80023ec:	0800374c 	.word	0x0800374c
 80023f0:	20000000 	.word	0x20000000
 80023f4:	20000004 	.word	0x20000004

080023f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f8:	b5b0      	push	{r4, r5, r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80023fe:	2100      	movs	r1, #0
 8002400:	6079      	str	r1, [r7, #4]
 8002402:	2100      	movs	r1, #0
 8002404:	60f9      	str	r1, [r7, #12]
 8002406:	2100      	movs	r1, #0
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800240a:	2100      	movs	r1, #0
 800240c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800240e:	4952      	ldr	r1, [pc, #328]	; (8002558 <HAL_RCC_GetSysClockFreq+0x160>)
 8002410:	6889      	ldr	r1, [r1, #8]
 8002412:	f001 010c 	and.w	r1, r1, #12
 8002416:	2908      	cmp	r1, #8
 8002418:	d00d      	beq.n	8002436 <HAL_RCC_GetSysClockFreq+0x3e>
 800241a:	2908      	cmp	r1, #8
 800241c:	f200 8094 	bhi.w	8002548 <HAL_RCC_GetSysClockFreq+0x150>
 8002420:	2900      	cmp	r1, #0
 8002422:	d002      	beq.n	800242a <HAL_RCC_GetSysClockFreq+0x32>
 8002424:	2904      	cmp	r1, #4
 8002426:	d003      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0x38>
 8002428:	e08e      	b.n	8002548 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800242a:	4b4c      	ldr	r3, [pc, #304]	; (800255c <HAL_RCC_GetSysClockFreq+0x164>)
 800242c:	60bb      	str	r3, [r7, #8]
      break;
 800242e:	e08e      	b.n	800254e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002430:	4b4b      	ldr	r3, [pc, #300]	; (8002560 <HAL_RCC_GetSysClockFreq+0x168>)
 8002432:	60bb      	str	r3, [r7, #8]
      break;
 8002434:	e08b      	b.n	800254e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002436:	4948      	ldr	r1, [pc, #288]	; (8002558 <HAL_RCC_GetSysClockFreq+0x160>)
 8002438:	6849      	ldr	r1, [r1, #4]
 800243a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800243e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002440:	4945      	ldr	r1, [pc, #276]	; (8002558 <HAL_RCC_GetSysClockFreq+0x160>)
 8002442:	6849      	ldr	r1, [r1, #4]
 8002444:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002448:	2900      	cmp	r1, #0
 800244a:	d024      	beq.n	8002496 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800244c:	4942      	ldr	r1, [pc, #264]	; (8002558 <HAL_RCC_GetSysClockFreq+0x160>)
 800244e:	6849      	ldr	r1, [r1, #4]
 8002450:	0989      	lsrs	r1, r1, #6
 8002452:	4608      	mov	r0, r1
 8002454:	f04f 0100 	mov.w	r1, #0
 8002458:	f240 14ff 	movw	r4, #511	; 0x1ff
 800245c:	f04f 0500 	mov.w	r5, #0
 8002460:	ea00 0204 	and.w	r2, r0, r4
 8002464:	ea01 0305 	and.w	r3, r1, r5
 8002468:	493d      	ldr	r1, [pc, #244]	; (8002560 <HAL_RCC_GetSysClockFreq+0x168>)
 800246a:	fb01 f003 	mul.w	r0, r1, r3
 800246e:	2100      	movs	r1, #0
 8002470:	fb01 f102 	mul.w	r1, r1, r2
 8002474:	1844      	adds	r4, r0, r1
 8002476:	493a      	ldr	r1, [pc, #232]	; (8002560 <HAL_RCC_GetSysClockFreq+0x168>)
 8002478:	fba2 0101 	umull	r0, r1, r2, r1
 800247c:	1863      	adds	r3, r4, r1
 800247e:	4619      	mov	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	461a      	mov	r2, r3
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	f7fd fed6 	bl	8000238 <__aeabi_uldivmod>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4613      	mov	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	e04a      	b.n	800252c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002496:	4b30      	ldr	r3, [pc, #192]	; (8002558 <HAL_RCC_GetSysClockFreq+0x160>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	099b      	lsrs	r3, r3, #6
 800249c:	461a      	mov	r2, r3
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024a6:	f04f 0100 	mov.w	r1, #0
 80024aa:	ea02 0400 	and.w	r4, r2, r0
 80024ae:	ea03 0501 	and.w	r5, r3, r1
 80024b2:	4620      	mov	r0, r4
 80024b4:	4629      	mov	r1, r5
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	014b      	lsls	r3, r1, #5
 80024c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024c4:	0142      	lsls	r2, r0, #5
 80024c6:	4610      	mov	r0, r2
 80024c8:	4619      	mov	r1, r3
 80024ca:	1b00      	subs	r0, r0, r4
 80024cc:	eb61 0105 	sbc.w	r1, r1, r5
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	018b      	lsls	r3, r1, #6
 80024da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024de:	0182      	lsls	r2, r0, #6
 80024e0:	1a12      	subs	r2, r2, r0
 80024e2:	eb63 0301 	sbc.w	r3, r3, r1
 80024e6:	f04f 0000 	mov.w	r0, #0
 80024ea:	f04f 0100 	mov.w	r1, #0
 80024ee:	00d9      	lsls	r1, r3, #3
 80024f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024f4:	00d0      	lsls	r0, r2, #3
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	1912      	adds	r2, r2, r4
 80024fc:	eb45 0303 	adc.w	r3, r5, r3
 8002500:	f04f 0000 	mov.w	r0, #0
 8002504:	f04f 0100 	mov.w	r1, #0
 8002508:	0299      	lsls	r1, r3, #10
 800250a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800250e:	0290      	lsls	r0, r2, #10
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4610      	mov	r0, r2
 8002516:	4619      	mov	r1, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	461a      	mov	r2, r3
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	f7fd fe8a 	bl	8000238 <__aeabi_uldivmod>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4613      	mov	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800252c:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_RCC_GetSysClockFreq+0x160>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	0c1b      	lsrs	r3, r3, #16
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	3301      	adds	r3, #1
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	fbb2 f3f3 	udiv	r3, r2, r3
 8002544:	60bb      	str	r3, [r7, #8]
      break;
 8002546:	e002      	b.n	800254e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <HAL_RCC_GetSysClockFreq+0x164>)
 800254a:	60bb      	str	r3, [r7, #8]
      break;
 800254c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800254e:	68bb      	ldr	r3, [r7, #8]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bdb0      	pop	{r4, r5, r7, pc}
 8002558:	40023800 	.word	0x40023800
 800255c:	00f42400 	.word	0x00f42400
 8002560:	017d7840 	.word	0x017d7840

08002564 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002568:	4b03      	ldr	r3, [pc, #12]	; (8002578 <HAL_RCC_GetHCLKFreq+0x14>)
 800256a:	681b      	ldr	r3, [r3, #0]
}
 800256c:	4618      	mov	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	20000000 	.word	0x20000000

0800257c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002580:	f7ff fff0 	bl	8002564 <HAL_RCC_GetHCLKFreq>
 8002584:	4602      	mov	r2, r0
 8002586:	4b05      	ldr	r3, [pc, #20]	; (800259c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	0a9b      	lsrs	r3, r3, #10
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	4903      	ldr	r1, [pc, #12]	; (80025a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002592:	5ccb      	ldrb	r3, [r1, r3]
 8002594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002598:	4618      	mov	r0, r3
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40023800 	.word	0x40023800
 80025a0:	0800375c 	.word	0x0800375c

080025a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025a8:	f7ff ffdc 	bl	8002564 <HAL_RCC_GetHCLKFreq>
 80025ac:	4602      	mov	r2, r0
 80025ae:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	0b5b      	lsrs	r3, r3, #13
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	4903      	ldr	r1, [pc, #12]	; (80025c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ba:	5ccb      	ldrb	r3, [r1, r3]
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40023800 	.word	0x40023800
 80025c8:	0800375c 	.word	0x0800375c

080025cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d012      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025f4:	4b69      	ldr	r3, [pc, #420]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	4a68      	ldr	r2, [pc, #416]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80025fe:	6093      	str	r3, [r2, #8]
 8002600:	4b66      	ldr	r3, [pc, #408]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002608:	4964      	ldr	r1, [pc, #400]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800260a:	4313      	orrs	r3, r2
 800260c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002616:	2301      	movs	r3, #1
 8002618:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d017      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002626:	4b5d      	ldr	r3, [pc, #372]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800262c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002634:	4959      	ldr	r1, [pc, #356]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002640:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002644:	d101      	bne.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002646:	2301      	movs	r3, #1
 8002648:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002652:	2301      	movs	r3, #1
 8002654:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d017      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002662:	4b4e      	ldr	r3, [pc, #312]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002668:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	494a      	ldr	r1, [pc, #296]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002680:	d101      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002682:	2301      	movs	r3, #1
 8002684:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800268e:	2301      	movs	r3, #1
 8002690:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800269e:	2301      	movs	r3, #1
 80026a0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0320 	and.w	r3, r3, #32
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 808b 	beq.w	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026b0:	4b3a      	ldr	r3, [pc, #232]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	4a39      	ldr	r2, [pc, #228]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ba:	6413      	str	r3, [r2, #64]	; 0x40
 80026bc:	4b37      	ldr	r3, [pc, #220]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026c8:	4b35      	ldr	r3, [pc, #212]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a34      	ldr	r2, [pc, #208]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d4:	f7fe fc3a 	bl	8000f4c <HAL_GetTick>
 80026d8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026dc:	f7fe fc36 	bl	8000f4c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b64      	cmp	r3, #100	; 0x64
 80026e8:	d901      	bls.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e38f      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026ee:	4b2c      	ldr	r3, [pc, #176]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026fa:	4b28      	ldr	r3, [pc, #160]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002702:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d035      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	429a      	cmp	r2, r3
 8002716:	d02e      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002718:	4b20      	ldr	r3, [pc, #128]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002720:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002722:	4b1e      	ldr	r3, [pc, #120]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002726:	4a1d      	ldr	r2, [pc, #116]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800272c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800272e:	4b1b      	ldr	r3, [pc, #108]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002732:	4a1a      	ldr	r2, [pc, #104]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002738:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800273a:	4a18      	ldr	r2, [pc, #96]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002740:	4b16      	ldr	r3, [pc, #88]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b01      	cmp	r3, #1
 800274a:	d114      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274c:	f7fe fbfe 	bl	8000f4c <HAL_GetTick>
 8002750:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002752:	e00a      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002754:	f7fe fbfa 	bl	8000f4c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e351      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276a:	4b0c      	ldr	r3, [pc, #48]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0ee      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800277e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002782:	d111      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002792:	400b      	ands	r3, r1
 8002794:	4901      	ldr	r1, [pc, #4]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
 800279a:	e00b      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800279c:	40023800 	.word	0x40023800
 80027a0:	40007000 	.word	0x40007000
 80027a4:	0ffffcff 	.word	0x0ffffcff
 80027a8:	4bb3      	ldr	r3, [pc, #716]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	4ab2      	ldr	r2, [pc, #712]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80027b2:	6093      	str	r3, [r2, #8]
 80027b4:	4bb0      	ldr	r3, [pc, #704]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c0:	49ad      	ldr	r1, [pc, #692]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0310 	and.w	r3, r3, #16
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d010      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80027d2:	4ba9      	ldr	r3, [pc, #676]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027d8:	4aa7      	ldr	r2, [pc, #668]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80027e2:	4ba5      	ldr	r3, [pc, #660]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	49a2      	ldr	r1, [pc, #648]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002800:	4b9d      	ldr	r3, [pc, #628]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002806:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800280e:	499a      	ldr	r1, [pc, #616]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002822:	4b95      	ldr	r3, [pc, #596]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002828:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002830:	4991      	ldr	r1, [pc, #580]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00a      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002844:	4b8c      	ldr	r3, [pc, #560]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002852:	4989      	ldr	r1, [pc, #548]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002866:	4b84      	ldr	r3, [pc, #528]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002874:	4980      	ldr	r1, [pc, #512]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00a      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002888:	4b7b      	ldr	r3, [pc, #492]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288e:	f023 0203 	bic.w	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	4978      	ldr	r1, [pc, #480]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028aa:	4b73      	ldr	r3, [pc, #460]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b0:	f023 020c 	bic.w	r2, r3, #12
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b8:	496f      	ldr	r1, [pc, #444]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028cc:	4b6a      	ldr	r3, [pc, #424]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028da:	4967      	ldr	r1, [pc, #412]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00a      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028ee:	4b62      	ldr	r3, [pc, #392]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fc:	495e      	ldr	r1, [pc, #376]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002910:	4b59      	ldr	r3, [pc, #356]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002916:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291e:	4956      	ldr	r1, [pc, #344]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002932:	4b51      	ldr	r3, [pc, #324]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002938:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002940:	494d      	ldr	r1, [pc, #308]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00a      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002954:	4b48      	ldr	r3, [pc, #288]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002962:	4945      	ldr	r1, [pc, #276]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00a      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002976:	4b40      	ldr	r3, [pc, #256]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002984:	493c      	ldr	r1, [pc, #240]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00a      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002998:	4b37      	ldr	r3, [pc, #220]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800299a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029a6:	4934      	ldr	r1, [pc, #208]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d011      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80029ba:	4b2f      	ldr	r3, [pc, #188]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029c8:	492b      	ldr	r1, [pc, #172]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029d8:	d101      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80029da:	2301      	movs	r3, #1
 80029dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80029ea:	2301      	movs	r3, #1
 80029ec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029fa:	4b1f      	ldr	r3, [pc, #124]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a00:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a08:	491b      	ldr	r1, [pc, #108]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00b      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a1c:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a22:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a2c:	4912      	ldr	r1, [pc, #72]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00b      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002a40:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a46:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a50:	4909      	ldr	r1, [pc, #36]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00f      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a64:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a6a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a74:	e002      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002a76:	bf00      	nop
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	4986      	ldr	r1, [pc, #536]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00b      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002a90:	4b81      	ldr	r3, [pc, #516]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a96:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aa0:	497d      	ldr	r1, [pc, #500]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d006      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 80d6 	beq.w	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002abc:	4b76      	ldr	r3, [pc, #472]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a75      	ldr	r2, [pc, #468]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ac2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ac6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ac8:	f7fe fa40 	bl	8000f4c <HAL_GetTick>
 8002acc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ad0:	f7fe fa3c 	bl	8000f4c <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b64      	cmp	r3, #100	; 0x64
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e195      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ae2:	4b6d      	ldr	r3, [pc, #436]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d021      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d11d      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b02:	4b65      	ldr	r3, [pc, #404]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b08:	0c1b      	lsrs	r3, r3, #16
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b10:	4b61      	ldr	r3, [pc, #388]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b16:	0e1b      	lsrs	r3, r3, #24
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	019a      	lsls	r2, r3, #6
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	041b      	lsls	r3, r3, #16
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	061b      	lsls	r3, r3, #24
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	071b      	lsls	r3, r3, #28
 8002b36:	4958      	ldr	r1, [pc, #352]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d004      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b52:	d00a      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d02e      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b68:	d129      	bne.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b6a:	4b4b      	ldr	r3, [pc, #300]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b70:	0c1b      	lsrs	r3, r3, #16
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b78:	4b47      	ldr	r3, [pc, #284]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b7e:	0f1b      	lsrs	r3, r3, #28
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	019a      	lsls	r2, r3, #6
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	041b      	lsls	r3, r3, #16
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	061b      	lsls	r3, r3, #24
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	071b      	lsls	r3, r3, #28
 8002b9e:	493e      	ldr	r1, [pc, #248]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ba6:	4b3c      	ldr	r3, [pc, #240]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bac:	f023 021f 	bic.w	r2, r3, #31
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	4938      	ldr	r1, [pc, #224]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d01d      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bca:	4b33      	ldr	r3, [pc, #204]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd0:	0e1b      	lsrs	r3, r3, #24
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bd8:	4b2f      	ldr	r3, [pc, #188]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bde:	0f1b      	lsrs	r3, r3, #28
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	019a      	lsls	r2, r3, #6
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	041b      	lsls	r3, r3, #16
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	061b      	lsls	r3, r3, #24
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	071b      	lsls	r3, r3, #28
 8002bfe:	4926      	ldr	r1, [pc, #152]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d011      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	019a      	lsls	r2, r3, #6
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	041b      	lsls	r3, r3, #16
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	061b      	lsls	r3, r3, #24
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	071b      	lsls	r3, r3, #28
 8002c2e:	491a      	ldr	r1, [pc, #104]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c36:	4b18      	ldr	r3, [pc, #96]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a17      	ldr	r2, [pc, #92]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c42:	f7fe f983 	bl	8000f4c <HAL_GetTick>
 8002c46:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c48:	e008      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c4a:	f7fe f97f 	bl	8000f4c <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b64      	cmp	r3, #100	; 0x64
 8002c56:	d901      	bls.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e0d8      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0f0      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	f040 80ce 	bne.w	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c70:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a08      	ldr	r2, [pc, #32]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c7c:	f7fe f966 	bl	8000f4c <HAL_GetTick>
 8002c80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c82:	e00b      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c84:	f7fe f962 	bl	8000f4c <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d904      	bls.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e0bb      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c9c:	4b5e      	ldr	r3, [pc, #376]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ca8:	d0ec      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d009      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d02e      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d12a      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cd2:	4b51      	ldr	r3, [pc, #324]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd8:	0c1b      	lsrs	r3, r3, #16
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ce0:	4b4d      	ldr	r3, [pc, #308]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce6:	0f1b      	lsrs	r3, r3, #28
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	019a      	lsls	r2, r3, #6
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	041b      	lsls	r3, r3, #16
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	061b      	lsls	r3, r3, #24
 8002d00:	431a      	orrs	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	071b      	lsls	r3, r3, #28
 8002d06:	4944      	ldr	r1, [pc, #272]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d0e:	4b42      	ldr	r3, [pc, #264]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d14:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	021b      	lsls	r3, r3, #8
 8002d20:	493d      	ldr	r1, [pc, #244]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d022      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d3c:	d11d      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d3e:	4b36      	ldr	r3, [pc, #216]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d44:	0e1b      	lsrs	r3, r3, #24
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d4c:	4b32      	ldr	r3, [pc, #200]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d52:	0f1b      	lsrs	r3, r3, #28
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	019a      	lsls	r2, r3, #6
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	041b      	lsls	r3, r3, #16
 8002d66:	431a      	orrs	r2, r3
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	061b      	lsls	r3, r3, #24
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	071b      	lsls	r3, r3, #28
 8002d72:	4929      	ldr	r1, [pc, #164]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d028      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d86:	4b24      	ldr	r3, [pc, #144]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8c:	0e1b      	lsrs	r3, r3, #24
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d94:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9a:	0c1b      	lsrs	r3, r3, #16
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	019a      	lsls	r2, r3, #6
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	041b      	lsls	r3, r3, #16
 8002dac:	431a      	orrs	r2, r3
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	061b      	lsls	r3, r3, #24
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	071b      	lsls	r3, r3, #28
 8002dba:	4917      	ldr	r1, [pc, #92]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002dc2:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	4911      	ldr	r1, [pc, #68]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002dd8:	4b0f      	ldr	r3, [pc, #60]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a0e      	ldr	r2, [pc, #56]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002de4:	f7fe f8b2 	bl	8000f4c <HAL_GetTick>
 8002de8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002dec:	f7fe f8ae 	bl	8000f4c <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b64      	cmp	r3, #100	; 0x64
 8002df8:	d901      	bls.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e007      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e0a:	d1ef      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3720      	adds	r7, #32
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800

08002e1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e040      	b.n	8002eb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d106      	bne.n	8002e44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7fd ffac 	bl	8000d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2224      	movs	r2, #36	; 0x24
 8002e48:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0201 	bic.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f82c 	bl	8002eb8 <UART_SetConfig>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e022      	b.n	8002eb0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fa82 	bl	800337c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fb09 	bl	80034c0 <UART_CheckIdleState>
 8002eae:	4603      	mov	r3, r0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4ba7      	ldr	r3, [pc, #668]	; (8003180 <UART_SetConfig+0x2c8>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6812      	ldr	r2, [r2, #0]
 8002eea:	6979      	ldr	r1, [r7, #20]
 8002eec:	430b      	orrs	r3, r1
 8002eee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a95      	ldr	r2, [pc, #596]	; (8003184 <UART_SetConfig+0x2cc>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d120      	bne.n	8002f76 <UART_SetConfig+0xbe>
 8002f34:	4b94      	ldr	r3, [pc, #592]	; (8003188 <UART_SetConfig+0x2d0>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d816      	bhi.n	8002f70 <UART_SetConfig+0xb8>
 8002f42:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <UART_SetConfig+0x90>)
 8002f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f48:	08002f59 	.word	0x08002f59
 8002f4c:	08002f65 	.word	0x08002f65
 8002f50:	08002f5f 	.word	0x08002f5f
 8002f54:	08002f6b 	.word	0x08002f6b
 8002f58:	2301      	movs	r3, #1
 8002f5a:	77fb      	strb	r3, [r7, #31]
 8002f5c:	e14f      	b.n	80031fe <UART_SetConfig+0x346>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	77fb      	strb	r3, [r7, #31]
 8002f62:	e14c      	b.n	80031fe <UART_SetConfig+0x346>
 8002f64:	2304      	movs	r3, #4
 8002f66:	77fb      	strb	r3, [r7, #31]
 8002f68:	e149      	b.n	80031fe <UART_SetConfig+0x346>
 8002f6a:	2308      	movs	r3, #8
 8002f6c:	77fb      	strb	r3, [r7, #31]
 8002f6e:	e146      	b.n	80031fe <UART_SetConfig+0x346>
 8002f70:	2310      	movs	r3, #16
 8002f72:	77fb      	strb	r3, [r7, #31]
 8002f74:	e143      	b.n	80031fe <UART_SetConfig+0x346>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a84      	ldr	r2, [pc, #528]	; (800318c <UART_SetConfig+0x2d4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d132      	bne.n	8002fe6 <UART_SetConfig+0x12e>
 8002f80:	4b81      	ldr	r3, [pc, #516]	; (8003188 <UART_SetConfig+0x2d0>)
 8002f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	2b0c      	cmp	r3, #12
 8002f8c:	d828      	bhi.n	8002fe0 <UART_SetConfig+0x128>
 8002f8e:	a201      	add	r2, pc, #4	; (adr r2, 8002f94 <UART_SetConfig+0xdc>)
 8002f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f94:	08002fc9 	.word	0x08002fc9
 8002f98:	08002fe1 	.word	0x08002fe1
 8002f9c:	08002fe1 	.word	0x08002fe1
 8002fa0:	08002fe1 	.word	0x08002fe1
 8002fa4:	08002fd5 	.word	0x08002fd5
 8002fa8:	08002fe1 	.word	0x08002fe1
 8002fac:	08002fe1 	.word	0x08002fe1
 8002fb0:	08002fe1 	.word	0x08002fe1
 8002fb4:	08002fcf 	.word	0x08002fcf
 8002fb8:	08002fe1 	.word	0x08002fe1
 8002fbc:	08002fe1 	.word	0x08002fe1
 8002fc0:	08002fe1 	.word	0x08002fe1
 8002fc4:	08002fdb 	.word	0x08002fdb
 8002fc8:	2300      	movs	r3, #0
 8002fca:	77fb      	strb	r3, [r7, #31]
 8002fcc:	e117      	b.n	80031fe <UART_SetConfig+0x346>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	77fb      	strb	r3, [r7, #31]
 8002fd2:	e114      	b.n	80031fe <UART_SetConfig+0x346>
 8002fd4:	2304      	movs	r3, #4
 8002fd6:	77fb      	strb	r3, [r7, #31]
 8002fd8:	e111      	b.n	80031fe <UART_SetConfig+0x346>
 8002fda:	2308      	movs	r3, #8
 8002fdc:	77fb      	strb	r3, [r7, #31]
 8002fde:	e10e      	b.n	80031fe <UART_SetConfig+0x346>
 8002fe0:	2310      	movs	r3, #16
 8002fe2:	77fb      	strb	r3, [r7, #31]
 8002fe4:	e10b      	b.n	80031fe <UART_SetConfig+0x346>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a69      	ldr	r2, [pc, #420]	; (8003190 <UART_SetConfig+0x2d8>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d120      	bne.n	8003032 <UART_SetConfig+0x17a>
 8002ff0:	4b65      	ldr	r3, [pc, #404]	; (8003188 <UART_SetConfig+0x2d0>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ffa:	2b30      	cmp	r3, #48	; 0x30
 8002ffc:	d013      	beq.n	8003026 <UART_SetConfig+0x16e>
 8002ffe:	2b30      	cmp	r3, #48	; 0x30
 8003000:	d814      	bhi.n	800302c <UART_SetConfig+0x174>
 8003002:	2b20      	cmp	r3, #32
 8003004:	d009      	beq.n	800301a <UART_SetConfig+0x162>
 8003006:	2b20      	cmp	r3, #32
 8003008:	d810      	bhi.n	800302c <UART_SetConfig+0x174>
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <UART_SetConfig+0x15c>
 800300e:	2b10      	cmp	r3, #16
 8003010:	d006      	beq.n	8003020 <UART_SetConfig+0x168>
 8003012:	e00b      	b.n	800302c <UART_SetConfig+0x174>
 8003014:	2300      	movs	r3, #0
 8003016:	77fb      	strb	r3, [r7, #31]
 8003018:	e0f1      	b.n	80031fe <UART_SetConfig+0x346>
 800301a:	2302      	movs	r3, #2
 800301c:	77fb      	strb	r3, [r7, #31]
 800301e:	e0ee      	b.n	80031fe <UART_SetConfig+0x346>
 8003020:	2304      	movs	r3, #4
 8003022:	77fb      	strb	r3, [r7, #31]
 8003024:	e0eb      	b.n	80031fe <UART_SetConfig+0x346>
 8003026:	2308      	movs	r3, #8
 8003028:	77fb      	strb	r3, [r7, #31]
 800302a:	e0e8      	b.n	80031fe <UART_SetConfig+0x346>
 800302c:	2310      	movs	r3, #16
 800302e:	77fb      	strb	r3, [r7, #31]
 8003030:	e0e5      	b.n	80031fe <UART_SetConfig+0x346>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a57      	ldr	r2, [pc, #348]	; (8003194 <UART_SetConfig+0x2dc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d120      	bne.n	800307e <UART_SetConfig+0x1c6>
 800303c:	4b52      	ldr	r3, [pc, #328]	; (8003188 <UART_SetConfig+0x2d0>)
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003042:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003046:	2bc0      	cmp	r3, #192	; 0xc0
 8003048:	d013      	beq.n	8003072 <UART_SetConfig+0x1ba>
 800304a:	2bc0      	cmp	r3, #192	; 0xc0
 800304c:	d814      	bhi.n	8003078 <UART_SetConfig+0x1c0>
 800304e:	2b80      	cmp	r3, #128	; 0x80
 8003050:	d009      	beq.n	8003066 <UART_SetConfig+0x1ae>
 8003052:	2b80      	cmp	r3, #128	; 0x80
 8003054:	d810      	bhi.n	8003078 <UART_SetConfig+0x1c0>
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <UART_SetConfig+0x1a8>
 800305a:	2b40      	cmp	r3, #64	; 0x40
 800305c:	d006      	beq.n	800306c <UART_SetConfig+0x1b4>
 800305e:	e00b      	b.n	8003078 <UART_SetConfig+0x1c0>
 8003060:	2300      	movs	r3, #0
 8003062:	77fb      	strb	r3, [r7, #31]
 8003064:	e0cb      	b.n	80031fe <UART_SetConfig+0x346>
 8003066:	2302      	movs	r3, #2
 8003068:	77fb      	strb	r3, [r7, #31]
 800306a:	e0c8      	b.n	80031fe <UART_SetConfig+0x346>
 800306c:	2304      	movs	r3, #4
 800306e:	77fb      	strb	r3, [r7, #31]
 8003070:	e0c5      	b.n	80031fe <UART_SetConfig+0x346>
 8003072:	2308      	movs	r3, #8
 8003074:	77fb      	strb	r3, [r7, #31]
 8003076:	e0c2      	b.n	80031fe <UART_SetConfig+0x346>
 8003078:	2310      	movs	r3, #16
 800307a:	77fb      	strb	r3, [r7, #31]
 800307c:	e0bf      	b.n	80031fe <UART_SetConfig+0x346>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a45      	ldr	r2, [pc, #276]	; (8003198 <UART_SetConfig+0x2e0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d125      	bne.n	80030d4 <UART_SetConfig+0x21c>
 8003088:	4b3f      	ldr	r3, [pc, #252]	; (8003188 <UART_SetConfig+0x2d0>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003092:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003096:	d017      	beq.n	80030c8 <UART_SetConfig+0x210>
 8003098:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800309c:	d817      	bhi.n	80030ce <UART_SetConfig+0x216>
 800309e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a2:	d00b      	beq.n	80030bc <UART_SetConfig+0x204>
 80030a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a8:	d811      	bhi.n	80030ce <UART_SetConfig+0x216>
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <UART_SetConfig+0x1fe>
 80030ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b2:	d006      	beq.n	80030c2 <UART_SetConfig+0x20a>
 80030b4:	e00b      	b.n	80030ce <UART_SetConfig+0x216>
 80030b6:	2300      	movs	r3, #0
 80030b8:	77fb      	strb	r3, [r7, #31]
 80030ba:	e0a0      	b.n	80031fe <UART_SetConfig+0x346>
 80030bc:	2302      	movs	r3, #2
 80030be:	77fb      	strb	r3, [r7, #31]
 80030c0:	e09d      	b.n	80031fe <UART_SetConfig+0x346>
 80030c2:	2304      	movs	r3, #4
 80030c4:	77fb      	strb	r3, [r7, #31]
 80030c6:	e09a      	b.n	80031fe <UART_SetConfig+0x346>
 80030c8:	2308      	movs	r3, #8
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e097      	b.n	80031fe <UART_SetConfig+0x346>
 80030ce:	2310      	movs	r3, #16
 80030d0:	77fb      	strb	r3, [r7, #31]
 80030d2:	e094      	b.n	80031fe <UART_SetConfig+0x346>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a30      	ldr	r2, [pc, #192]	; (800319c <UART_SetConfig+0x2e4>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d125      	bne.n	800312a <UART_SetConfig+0x272>
 80030de:	4b2a      	ldr	r3, [pc, #168]	; (8003188 <UART_SetConfig+0x2d0>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030ec:	d017      	beq.n	800311e <UART_SetConfig+0x266>
 80030ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030f2:	d817      	bhi.n	8003124 <UART_SetConfig+0x26c>
 80030f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030f8:	d00b      	beq.n	8003112 <UART_SetConfig+0x25a>
 80030fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030fe:	d811      	bhi.n	8003124 <UART_SetConfig+0x26c>
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <UART_SetConfig+0x254>
 8003104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003108:	d006      	beq.n	8003118 <UART_SetConfig+0x260>
 800310a:	e00b      	b.n	8003124 <UART_SetConfig+0x26c>
 800310c:	2301      	movs	r3, #1
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e075      	b.n	80031fe <UART_SetConfig+0x346>
 8003112:	2302      	movs	r3, #2
 8003114:	77fb      	strb	r3, [r7, #31]
 8003116:	e072      	b.n	80031fe <UART_SetConfig+0x346>
 8003118:	2304      	movs	r3, #4
 800311a:	77fb      	strb	r3, [r7, #31]
 800311c:	e06f      	b.n	80031fe <UART_SetConfig+0x346>
 800311e:	2308      	movs	r3, #8
 8003120:	77fb      	strb	r3, [r7, #31]
 8003122:	e06c      	b.n	80031fe <UART_SetConfig+0x346>
 8003124:	2310      	movs	r3, #16
 8003126:	77fb      	strb	r3, [r7, #31]
 8003128:	e069      	b.n	80031fe <UART_SetConfig+0x346>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1c      	ldr	r2, [pc, #112]	; (80031a0 <UART_SetConfig+0x2e8>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d137      	bne.n	80031a4 <UART_SetConfig+0x2ec>
 8003134:	4b14      	ldr	r3, [pc, #80]	; (8003188 <UART_SetConfig+0x2d0>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800313e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003142:	d017      	beq.n	8003174 <UART_SetConfig+0x2bc>
 8003144:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003148:	d817      	bhi.n	800317a <UART_SetConfig+0x2c2>
 800314a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800314e:	d00b      	beq.n	8003168 <UART_SetConfig+0x2b0>
 8003150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003154:	d811      	bhi.n	800317a <UART_SetConfig+0x2c2>
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <UART_SetConfig+0x2aa>
 800315a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800315e:	d006      	beq.n	800316e <UART_SetConfig+0x2b6>
 8003160:	e00b      	b.n	800317a <UART_SetConfig+0x2c2>
 8003162:	2300      	movs	r3, #0
 8003164:	77fb      	strb	r3, [r7, #31]
 8003166:	e04a      	b.n	80031fe <UART_SetConfig+0x346>
 8003168:	2302      	movs	r3, #2
 800316a:	77fb      	strb	r3, [r7, #31]
 800316c:	e047      	b.n	80031fe <UART_SetConfig+0x346>
 800316e:	2304      	movs	r3, #4
 8003170:	77fb      	strb	r3, [r7, #31]
 8003172:	e044      	b.n	80031fe <UART_SetConfig+0x346>
 8003174:	2308      	movs	r3, #8
 8003176:	77fb      	strb	r3, [r7, #31]
 8003178:	e041      	b.n	80031fe <UART_SetConfig+0x346>
 800317a:	2310      	movs	r3, #16
 800317c:	77fb      	strb	r3, [r7, #31]
 800317e:	e03e      	b.n	80031fe <UART_SetConfig+0x346>
 8003180:	efff69f3 	.word	0xefff69f3
 8003184:	40011000 	.word	0x40011000
 8003188:	40023800 	.word	0x40023800
 800318c:	40004400 	.word	0x40004400
 8003190:	40004800 	.word	0x40004800
 8003194:	40004c00 	.word	0x40004c00
 8003198:	40005000 	.word	0x40005000
 800319c:	40011400 	.word	0x40011400
 80031a0:	40007800 	.word	0x40007800
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a71      	ldr	r2, [pc, #452]	; (8003370 <UART_SetConfig+0x4b8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d125      	bne.n	80031fa <UART_SetConfig+0x342>
 80031ae:	4b71      	ldr	r3, [pc, #452]	; (8003374 <UART_SetConfig+0x4bc>)
 80031b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80031b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80031bc:	d017      	beq.n	80031ee <UART_SetConfig+0x336>
 80031be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80031c2:	d817      	bhi.n	80031f4 <UART_SetConfig+0x33c>
 80031c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c8:	d00b      	beq.n	80031e2 <UART_SetConfig+0x32a>
 80031ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ce:	d811      	bhi.n	80031f4 <UART_SetConfig+0x33c>
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <UART_SetConfig+0x324>
 80031d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031d8:	d006      	beq.n	80031e8 <UART_SetConfig+0x330>
 80031da:	e00b      	b.n	80031f4 <UART_SetConfig+0x33c>
 80031dc:	2300      	movs	r3, #0
 80031de:	77fb      	strb	r3, [r7, #31]
 80031e0:	e00d      	b.n	80031fe <UART_SetConfig+0x346>
 80031e2:	2302      	movs	r3, #2
 80031e4:	77fb      	strb	r3, [r7, #31]
 80031e6:	e00a      	b.n	80031fe <UART_SetConfig+0x346>
 80031e8:	2304      	movs	r3, #4
 80031ea:	77fb      	strb	r3, [r7, #31]
 80031ec:	e007      	b.n	80031fe <UART_SetConfig+0x346>
 80031ee:	2308      	movs	r3, #8
 80031f0:	77fb      	strb	r3, [r7, #31]
 80031f2:	e004      	b.n	80031fe <UART_SetConfig+0x346>
 80031f4:	2310      	movs	r3, #16
 80031f6:	77fb      	strb	r3, [r7, #31]
 80031f8:	e001      	b.n	80031fe <UART_SetConfig+0x346>
 80031fa:	2310      	movs	r3, #16
 80031fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003206:	d15a      	bne.n	80032be <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8003208:	7ffb      	ldrb	r3, [r7, #31]
 800320a:	2b08      	cmp	r3, #8
 800320c:	d827      	bhi.n	800325e <UART_SetConfig+0x3a6>
 800320e:	a201      	add	r2, pc, #4	; (adr r2, 8003214 <UART_SetConfig+0x35c>)
 8003210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003214:	08003239 	.word	0x08003239
 8003218:	08003241 	.word	0x08003241
 800321c:	08003249 	.word	0x08003249
 8003220:	0800325f 	.word	0x0800325f
 8003224:	0800324f 	.word	0x0800324f
 8003228:	0800325f 	.word	0x0800325f
 800322c:	0800325f 	.word	0x0800325f
 8003230:	0800325f 	.word	0x0800325f
 8003234:	08003257 	.word	0x08003257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003238:	f7ff f9a0 	bl	800257c <HAL_RCC_GetPCLK1Freq>
 800323c:	61b8      	str	r0, [r7, #24]
        break;
 800323e:	e013      	b.n	8003268 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003240:	f7ff f9b0 	bl	80025a4 <HAL_RCC_GetPCLK2Freq>
 8003244:	61b8      	str	r0, [r7, #24]
        break;
 8003246:	e00f      	b.n	8003268 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003248:	4b4b      	ldr	r3, [pc, #300]	; (8003378 <UART_SetConfig+0x4c0>)
 800324a:	61bb      	str	r3, [r7, #24]
        break;
 800324c:	e00c      	b.n	8003268 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800324e:	f7ff f8d3 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 8003252:	61b8      	str	r0, [r7, #24]
        break;
 8003254:	e008      	b.n	8003268 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800325a:	61bb      	str	r3, [r7, #24]
        break;
 800325c:	e004      	b.n	8003268 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	77bb      	strb	r3, [r7, #30]
        break;
 8003266:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d074      	beq.n	8003358 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	005a      	lsls	r2, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	085b      	lsrs	r3, r3, #1
 8003278:	441a      	add	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003282:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	2b0f      	cmp	r3, #15
 8003288:	d916      	bls.n	80032b8 <UART_SetConfig+0x400>
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003290:	d212      	bcs.n	80032b8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	b29b      	uxth	r3, r3
 8003296:	f023 030f 	bic.w	r3, r3, #15
 800329a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	085b      	lsrs	r3, r3, #1
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	89fb      	ldrh	r3, [r7, #14]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	89fa      	ldrh	r2, [r7, #14]
 80032b4:	60da      	str	r2, [r3, #12]
 80032b6:	e04f      	b.n	8003358 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	77bb      	strb	r3, [r7, #30]
 80032bc:	e04c      	b.n	8003358 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032be:	7ffb      	ldrb	r3, [r7, #31]
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d828      	bhi.n	8003316 <UART_SetConfig+0x45e>
 80032c4:	a201      	add	r2, pc, #4	; (adr r2, 80032cc <UART_SetConfig+0x414>)
 80032c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ca:	bf00      	nop
 80032cc:	080032f1 	.word	0x080032f1
 80032d0:	080032f9 	.word	0x080032f9
 80032d4:	08003301 	.word	0x08003301
 80032d8:	08003317 	.word	0x08003317
 80032dc:	08003307 	.word	0x08003307
 80032e0:	08003317 	.word	0x08003317
 80032e4:	08003317 	.word	0x08003317
 80032e8:	08003317 	.word	0x08003317
 80032ec:	0800330f 	.word	0x0800330f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f0:	f7ff f944 	bl	800257c <HAL_RCC_GetPCLK1Freq>
 80032f4:	61b8      	str	r0, [r7, #24]
        break;
 80032f6:	e013      	b.n	8003320 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032f8:	f7ff f954 	bl	80025a4 <HAL_RCC_GetPCLK2Freq>
 80032fc:	61b8      	str	r0, [r7, #24]
        break;
 80032fe:	e00f      	b.n	8003320 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003300:	4b1d      	ldr	r3, [pc, #116]	; (8003378 <UART_SetConfig+0x4c0>)
 8003302:	61bb      	str	r3, [r7, #24]
        break;
 8003304:	e00c      	b.n	8003320 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003306:	f7ff f877 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 800330a:	61b8      	str	r0, [r7, #24]
        break;
 800330c:	e008      	b.n	8003320 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800330e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003312:	61bb      	str	r3, [r7, #24]
        break;
 8003314:	e004      	b.n	8003320 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	77bb      	strb	r3, [r7, #30]
        break;
 800331e:	bf00      	nop
    }

    if (pclk != 0U)
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d018      	beq.n	8003358 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	085a      	lsrs	r2, r3, #1
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	441a      	add	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	fbb2 f3f3 	udiv	r3, r2, r3
 8003338:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	2b0f      	cmp	r3, #15
 800333e:	d909      	bls.n	8003354 <UART_SetConfig+0x49c>
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003346:	d205      	bcs.n	8003354 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	b29a      	uxth	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	60da      	str	r2, [r3, #12]
 8003352:	e001      	b.n	8003358 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003364:	7fbb      	ldrb	r3, [r7, #30]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3720      	adds	r7, #32
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40007c00 	.word	0x40007c00
 8003374:	40023800 	.word	0x40023800
 8003378:	00f42400 	.word	0x00f42400

0800337c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00a      	beq.n	80033a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003458:	2b00      	cmp	r3, #0
 800345a:	d01a      	beq.n	8003492 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800347a:	d10a      	bne.n	8003492 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	605a      	str	r2, [r3, #4]
  }
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034d0:	f7fd fd3c 	bl	8000f4c <HAL_GetTick>
 80034d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d10e      	bne.n	8003502 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f82d 	bl	8003552 <UART_WaitOnFlagUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e023      	b.n	800354a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b04      	cmp	r3, #4
 800350e:	d10e      	bne.n	800352e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003510:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f817 	bl	8003552 <UART_WaitOnFlagUntilTimeout>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e00d      	b.n	800354a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2220      	movs	r2, #32
 8003532:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2220      	movs	r2, #32
 8003538:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b09c      	sub	sp, #112	; 0x70
 8003556:	af00      	add	r7, sp, #0
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	603b      	str	r3, [r7, #0]
 800355e:	4613      	mov	r3, r2
 8003560:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003562:	e0a5      	b.n	80036b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356a:	f000 80a1 	beq.w	80036b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356e:	f7fd fced 	bl	8000f4c <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800357a:	429a      	cmp	r2, r3
 800357c:	d302      	bcc.n	8003584 <UART_WaitOnFlagUntilTimeout+0x32>
 800357e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003580:	2b00      	cmp	r3, #0
 8003582:	d13e      	bne.n	8003602 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800358c:	e853 3f00 	ldrex	r3, [r3]
 8003590:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003594:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003598:	667b      	str	r3, [r7, #100]	; 0x64
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80035a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035aa:	e841 2300 	strex	r3, r2, [r1]
 80035ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80035b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1e6      	bne.n	8003584 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3308      	adds	r3, #8
 80035bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c0:	e853 3f00 	ldrex	r3, [r3]
 80035c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c8:	f023 0301 	bic.w	r3, r3, #1
 80035cc:	663b      	str	r3, [r7, #96]	; 0x60
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3308      	adds	r3, #8
 80035d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80035d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035de:	e841 2300 	strex	r3, r2, [r1]
 80035e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80035e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1e5      	bne.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2220      	movs	r2, #32
 80035ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e067      	b.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d04f      	beq.n	80036b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800361a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800361e:	d147      	bne.n	80036b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003628:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003632:	e853 3f00 	ldrex	r3, [r3]
 8003636:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800363e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003648:	637b      	str	r3, [r7, #52]	; 0x34
 800364a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800364e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003650:	e841 2300 	strex	r3, r2, [r1]
 8003654:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e6      	bne.n	800362a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3308      	adds	r3, #8
 8003662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	e853 3f00 	ldrex	r3, [r3]
 800366a:	613b      	str	r3, [r7, #16]
   return(result);
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	66bb      	str	r3, [r7, #104]	; 0x68
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3308      	adds	r3, #8
 800367a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800367c:	623a      	str	r2, [r7, #32]
 800367e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003680:	69f9      	ldr	r1, [r7, #28]
 8003682:	6a3a      	ldr	r2, [r7, #32]
 8003684:	e841 2300 	strex	r3, r2, [r1]
 8003688:	61bb      	str	r3, [r7, #24]
   return(result);
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e5      	bne.n	800365c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2220      	movs	r2, #32
 8003694:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2220      	movs	r2, #32
 80036a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e010      	b.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69da      	ldr	r2, [r3, #28]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	4013      	ands	r3, r2
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	429a      	cmp	r2, r3
 80036be:	bf0c      	ite	eq
 80036c0:	2301      	moveq	r3, #1
 80036c2:	2300      	movne	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	461a      	mov	r2, r3
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	f43f af4a 	beq.w	8003564 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3770      	adds	r7, #112	; 0x70
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <__libc_init_array>:
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	4d0d      	ldr	r5, [pc, #52]	; (8003714 <__libc_init_array+0x38>)
 80036e0:	4c0d      	ldr	r4, [pc, #52]	; (8003718 <__libc_init_array+0x3c>)
 80036e2:	1b64      	subs	r4, r4, r5
 80036e4:	10a4      	asrs	r4, r4, #2
 80036e6:	2600      	movs	r6, #0
 80036e8:	42a6      	cmp	r6, r4
 80036ea:	d109      	bne.n	8003700 <__libc_init_array+0x24>
 80036ec:	4d0b      	ldr	r5, [pc, #44]	; (800371c <__libc_init_array+0x40>)
 80036ee:	4c0c      	ldr	r4, [pc, #48]	; (8003720 <__libc_init_array+0x44>)
 80036f0:	f000 f820 	bl	8003734 <_init>
 80036f4:	1b64      	subs	r4, r4, r5
 80036f6:	10a4      	asrs	r4, r4, #2
 80036f8:	2600      	movs	r6, #0
 80036fa:	42a6      	cmp	r6, r4
 80036fc:	d105      	bne.n	800370a <__libc_init_array+0x2e>
 80036fe:	bd70      	pop	{r4, r5, r6, pc}
 8003700:	f855 3b04 	ldr.w	r3, [r5], #4
 8003704:	4798      	blx	r3
 8003706:	3601      	adds	r6, #1
 8003708:	e7ee      	b.n	80036e8 <__libc_init_array+0xc>
 800370a:	f855 3b04 	ldr.w	r3, [r5], #4
 800370e:	4798      	blx	r3
 8003710:	3601      	adds	r6, #1
 8003712:	e7f2      	b.n	80036fa <__libc_init_array+0x1e>
 8003714:	0800376c 	.word	0x0800376c
 8003718:	0800376c 	.word	0x0800376c
 800371c:	0800376c 	.word	0x0800376c
 8003720:	08003770 	.word	0x08003770

08003724 <memset>:
 8003724:	4402      	add	r2, r0
 8003726:	4603      	mov	r3, r0
 8003728:	4293      	cmp	r3, r2
 800372a:	d100      	bne.n	800372e <memset+0xa>
 800372c:	4770      	bx	lr
 800372e:	f803 1b01 	strb.w	r1, [r3], #1
 8003732:	e7f9      	b.n	8003728 <memset+0x4>

08003734 <_init>:
 8003734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003736:	bf00      	nop
 8003738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800373a:	bc08      	pop	{r3}
 800373c:	469e      	mov	lr, r3
 800373e:	4770      	bx	lr

08003740 <_fini>:
 8003740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003742:	bf00      	nop
 8003744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003746:	bc08      	pop	{r3}
 8003748:	469e      	mov	lr, r3
 800374a:	4770      	bx	lr
