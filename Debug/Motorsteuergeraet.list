
Motorsteuergeraet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006570  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  08006768  08006768  00016768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dd0  08006dd0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006dd0  08006dd0  00016dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dd8  08006dd8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dd8  08006dd8  00016dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ddc  08006ddc  00016ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000000c  08006dec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08006dec  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cafd  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d10  00000000  00000000  0003cb37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00040848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  000419d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d5b3  00000000  00000000  000429c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a94  00000000  00000000  0006ff73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010851d  00000000  00000000  00089a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00191f24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004640  00000000  00000000  00191f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006750 	.word	0x08006750

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08006750 	.word	0x08006750

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <BAMOCAN_ID>:
//----------------------------------------------------------------------

// Ermittle Register nach Empfang Bamocar CAN-ID
//----------------------------------------------------------------------
void BAMOCAN_ID(uint8_t* data)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	uint8_t Reg = data[0];
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	73fb      	strb	r3, [r7, #15]
	uint16_t speed = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	81bb      	strh	r3, [r7, #12]

	// Waehlen welches Register gesendet wurde
	switch (Reg)
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	2b30      	cmp	r3, #48	; 0x30
 8000556:	d112      	bne.n	800057e <BAMOCAN_ID+0x3e>
	{
		// Register fuer aktuelle Drehzahl, speed = n
		case BAMOCAR_REG_SPEED_ACT:
			speed = ((data[2]<<8) + data[1]);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	3302      	adds	r3, #2
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	b29b      	uxth	r3, r3
 8000560:	021b      	lsls	r3, r3, #8
 8000562:	b29a      	uxth	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3301      	adds	r3, #1
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	b29b      	uxth	r3, r3
 800056c:	4413      	add	r3, r2
 800056e:	81bb      	strh	r3, [r7, #12]
			motor1.Drehzahl = speed;
 8000570:	4a07      	ldr	r2, [pc, #28]	; (8000590 <BAMOCAN_ID+0x50>)
 8000572:	89bb      	ldrh	r3, [r7, #12]
 8000574:	8053      	strh	r3, [r2, #2]
// Uart Ausgabe
#ifdef DEBUG_BAMOCAR
			ITM_SendString("Aktuelle Drehzahl\n");
 8000576:	4807      	ldr	r0, [pc, #28]	; (8000594 <BAMOCAN_ID+0x54>)
 8000578:	f000 fbba 	bl	8000cf0 <ITM_SendString>
#endif
			break;
 800057c:	e004      	b.n	8000588 <BAMOCAN_ID+0x48>

		// Default Mitteilung falls Auwertung fuer Register noch nicht definiert ist
		default:
			uartTransmit("Bamocar Register nicht definiert\n", 33);
 800057e:	2121      	movs	r1, #33	; 0x21
 8000580:	4805      	ldr	r0, [pc, #20]	; (8000598 <BAMOCAN_ID+0x58>)
 8000582:	f000 f80b 	bl	800059c <uartTransmit>
			break;
 8000586:	bf00      	nop
	}
}
 8000588:	bf00      	nop
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000034 	.word	0x20000034
 8000594:	08006768 	.word	0x08006768
 8000598:	0800677c 	.word	0x0800677c

0800059c <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <uartTransmit+0x24>)
 80005b2:	f005 fbb7 	bl	8005d24 <HAL_UART_Transmit>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000184 	.word	0x20000184

080005c4 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	4619      	mov	r1, r3
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f006 f8b8 	bl	800674c <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff fe29 	bl	8000238 <strlen>
 80005e6:	4603      	mov	r3, r0
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	f107 010c 	add.w	r1, r7, #12
 80005ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f2:	4803      	ldr	r0, [pc, #12]	; (8000600 <uartTransmitNumber+0x3c>)
 80005f4:	f005 fb96 	bl	8005d24 <HAL_UART_Transmit>
}
 80005f8:	bf00      	nop
 80005fa:	3718      	adds	r7, #24
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000184 	.word	0x20000184

08000604 <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 800060a:	2113      	movs	r1, #19
 800060c:	483d      	ldr	r0, [pc, #244]	; (8000704 <collectHardwareInfo+0x100>)
 800060e:	f7ff ffc5 	bl	800059c <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 8000612:	f002 f91b 	bl	800284c <HAL_GetDEVID>
 8000616:	4603      	mov	r3, r0
 8000618:	210a      	movs	r1, #10
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffd2 	bl	80005c4 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8000620:	2115      	movs	r1, #21
 8000622:	4839      	ldr	r0, [pc, #228]	; (8000708 <collectHardwareInfo+0x104>)
 8000624:	f7ff ffba 	bl	800059c <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 8000628:	f002 f904 	bl	8002834 <HAL_GetREVID>
 800062c:	4603      	mov	r3, r0
 800062e:	f242 0201 	movw	r2, #8193	; 0x2001
 8000632:	4293      	cmp	r3, r2
 8000634:	d016      	beq.n	8000664 <collectHardwareInfo+0x60>
 8000636:	f242 0201 	movw	r2, #8193	; 0x2001
 800063a:	4293      	cmp	r3, r2
 800063c:	d817      	bhi.n	800066e <collectHardwareInfo+0x6a>
 800063e:	f241 0201 	movw	r2, #4097	; 0x1001
 8000642:	4293      	cmp	r3, r2
 8000644:	d004      	beq.n	8000650 <collectHardwareInfo+0x4c>
 8000646:	f241 0203 	movw	r2, #4099	; 0x1003
 800064a:	4293      	cmp	r3, r2
 800064c:	d005      	beq.n	800065a <collectHardwareInfo+0x56>
 800064e:	e00e      	b.n	800066e <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8000650:	2101      	movs	r1, #1
 8000652:	482e      	ldr	r0, [pc, #184]	; (800070c <collectHardwareInfo+0x108>)
 8000654:	f7ff ffa2 	bl	800059c <uartTransmit>
			break;
 8000658:	e011      	b.n	800067e <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 800065a:	2101      	movs	r1, #1
 800065c:	482c      	ldr	r0, [pc, #176]	; (8000710 <collectHardwareInfo+0x10c>)
 800065e:	f7ff ff9d 	bl	800059c <uartTransmit>
			break;
 8000662:	e00c      	b.n	800067e <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000664:	2101      	movs	r1, #1
 8000666:	482b      	ldr	r0, [pc, #172]	; (8000714 <collectHardwareInfo+0x110>)
 8000668:	f7ff ff98 	bl	800059c <uartTransmit>
			break;
 800066c:	e007      	b.n	800067e <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 800066e:	f002 f8e1 	bl	8002834 <HAL_GetREVID>
 8000672:	4603      	mov	r3, r0
 8000674:	210a      	movs	r1, #10
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ffa4 	bl	80005c4 <uartTransmitNumber>
			break;
 800067c:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 800067e:	2113      	movs	r1, #19
 8000680:	4825      	ldr	r0, [pc, #148]	; (8000718 <collectHardwareInfo+0x114>)
 8000682:	f7ff ff8b 	bl	800059c <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 8000686:	f004 fa89 	bl	8004b9c <HAL_RCC_GetSysClockFreq>
 800068a:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a23      	ldr	r2, [pc, #140]	; (800071c <collectHardwareInfo+0x118>)
 8000690:	fba2 2303 	umull	r2, r3, r2, r3
 8000694:	0c9b      	lsrs	r3, r3, #18
 8000696:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 8000698:	210a      	movs	r1, #10
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f7ff ff92 	bl	80005c4 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80006a0:	2104      	movs	r1, #4
 80006a2:	481f      	ldr	r0, [pc, #124]	; (8000720 <collectHardwareInfo+0x11c>)
 80006a4:	f7ff ff7a 	bl	800059c <uartTransmit>


	uartTransmit("\n", 1);
 80006a8:	2101      	movs	r1, #1
 80006aa:	481e      	ldr	r0, [pc, #120]	; (8000724 <collectHardwareInfo+0x120>)
 80006ac:	f7ff ff76 	bl	800059c <uartTransmit>
	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80006b0:	210f      	movs	r1, #15
 80006b2:	481d      	ldr	r0, [pc, #116]	; (8000728 <collectHardwareInfo+0x124>)
 80006b4:	f7ff ff72 	bl	800059c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 80006b8:	f002 f8d6 	bl	8002868 <HAL_GetUIDw0>
 80006bc:	4603      	mov	r3, r0
 80006be:	2110      	movs	r1, #16
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff7f 	bl	80005c4 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80006c6:	2101      	movs	r1, #1
 80006c8:	4818      	ldr	r0, [pc, #96]	; (800072c <collectHardwareInfo+0x128>)
 80006ca:	f7ff ff67 	bl	800059c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 80006ce:	f002 f8d7 	bl	8002880 <HAL_GetUIDw1>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2110      	movs	r1, #16
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff74 	bl	80005c4 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80006dc:	2101      	movs	r1, #1
 80006de:	4813      	ldr	r0, [pc, #76]	; (800072c <collectHardwareInfo+0x128>)
 80006e0:	f7ff ff5c 	bl	800059c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 80006e4:	f002 f8d8 	bl	8002898 <HAL_GetUIDw2>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2110      	movs	r1, #16
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ff69 	bl	80005c4 <uartTransmitNumber>

	uartTransmit("\n", 1);
 80006f2:	2101      	movs	r1, #1
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <collectHardwareInfo+0x120>)
 80006f6:	f7ff ff51 	bl	800059c <uartTransmit>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	080067a0 	.word	0x080067a0
 8000708:	080067b4 	.word	0x080067b4
 800070c:	080067cc 	.word	0x080067cc
 8000710:	080067d0 	.word	0x080067d0
 8000714:	080067d4 	.word	0x080067d4
 8000718:	080067d8 	.word	0x080067d8
 800071c:	431bde83 	.word	0x431bde83
 8000720:	080067ec 	.word	0x080067ec
 8000724:	080067f4 	.word	0x080067f4
 8000728:	080067f8 	.word	0x080067f8
 800072c:	08006808 	.word	0x08006808

08000730 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 8000734:	210f      	movs	r1, #15
 8000736:	4826      	ldr	r0, [pc, #152]	; (80007d0 <collectSoftwareInfo+0xa0>)
 8000738:	f7ff ff30 	bl	800059c <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 800073c:	2108      	movs	r1, #8
 800073e:	4825      	ldr	r0, [pc, #148]	; (80007d4 <collectSoftwareInfo+0xa4>)
 8000740:	f7ff ff2c 	bl	800059c <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000744:	210f      	movs	r1, #15
 8000746:	4824      	ldr	r0, [pc, #144]	; (80007d8 <collectSoftwareInfo+0xa8>)
 8000748:	f7ff ff28 	bl	800059c <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 800074c:	2106      	movs	r1, #6
 800074e:	4823      	ldr	r0, [pc, #140]	; (80007dc <collectSoftwareInfo+0xac>)
 8000750:	f7ff ff24 	bl	800059c <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000754:	210d      	movs	r1, #13
 8000756:	4822      	ldr	r0, [pc, #136]	; (80007e0 <collectSoftwareInfo+0xb0>)
 8000758:	f7ff ff20 	bl	800059c <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 800075c:	2129      	movs	r1, #41	; 0x29
 800075e:	4821      	ldr	r0, [pc, #132]	; (80007e4 <collectSoftwareInfo+0xb4>)
 8000760:	f7ff ff1c 	bl	800059c <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000764:	2101      	movs	r1, #1
 8000766:	4820      	ldr	r0, [pc, #128]	; (80007e8 <collectSoftwareInfo+0xb8>)
 8000768:	f7ff ff18 	bl	800059c <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 800076c:	2115      	movs	r1, #21
 800076e:	481f      	ldr	r0, [pc, #124]	; (80007ec <collectSoftwareInfo+0xbc>)
 8000770:	f7ff ff14 	bl	800059c <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 8000774:	2105      	movs	r1, #5
 8000776:	481e      	ldr	r0, [pc, #120]	; (80007f0 <collectSoftwareInfo+0xc0>)
 8000778:	f7ff ff10 	bl	800059c <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 800077c:	2114      	movs	r1, #20
 800077e:	481d      	ldr	r0, [pc, #116]	; (80007f4 <collectSoftwareInfo+0xc4>)
 8000780:	f7ff ff0c 	bl	800059c <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 8000784:	2108      	movs	r1, #8
 8000786:	481c      	ldr	r0, [pc, #112]	; (80007f8 <collectSoftwareInfo+0xc8>)
 8000788:	f7ff ff08 	bl	800059c <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 800078c:	2115      	movs	r1, #21
 800078e:	481b      	ldr	r0, [pc, #108]	; (80007fc <collectSoftwareInfo+0xcc>)
 8000790:	f7ff ff04 	bl	800059c <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 8000794:	2111      	movs	r1, #17
 8000796:	481a      	ldr	r0, [pc, #104]	; (8000800 <collectSoftwareInfo+0xd0>)
 8000798:	f7ff ff00 	bl	800059c <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 800079c:	2101      	movs	r1, #1
 800079e:	4812      	ldr	r0, [pc, #72]	; (80007e8 <collectSoftwareInfo+0xb8>)
 80007a0:	f7ff fefc 	bl	800059c <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80007a4:	210f      	movs	r1, #15
 80007a6:	4817      	ldr	r0, [pc, #92]	; (8000804 <collectSoftwareInfo+0xd4>)
 80007a8:	f7ff fef8 	bl	800059c <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 80007ac:	210b      	movs	r1, #11
 80007ae:	4816      	ldr	r0, [pc, #88]	; (8000808 <collectSoftwareInfo+0xd8>)
 80007b0:	f7ff fef4 	bl	800059c <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80007b4:	210f      	movs	r1, #15
 80007b6:	4815      	ldr	r0, [pc, #84]	; (800080c <collectSoftwareInfo+0xdc>)
 80007b8:	f7ff fef0 	bl	800059c <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 80007bc:	2109      	movs	r1, #9
 80007be:	4814      	ldr	r0, [pc, #80]	; (8000810 <collectSoftwareInfo+0xe0>)
 80007c0:	f7ff feec 	bl	800059c <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80007c4:	2101      	movs	r1, #1
 80007c6:	4808      	ldr	r0, [pc, #32]	; (80007e8 <collectSoftwareInfo+0xb8>)
 80007c8:	f7ff fee8 	bl	800059c <uartTransmit>
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	0800680c 	.word	0x0800680c
 80007d4:	0800681c 	.word	0x0800681c
 80007d8:	08006824 	.word	0x08006824
 80007dc:	08006834 	.word	0x08006834
 80007e0:	0800683c 	.word	0x0800683c
 80007e4:	0800684c 	.word	0x0800684c
 80007e8:	080067f4 	.word	0x080067f4
 80007ec:	08006878 	.word	0x08006878
 80007f0:	08006890 	.word	0x08006890
 80007f4:	08006898 	.word	0x08006898
 80007f8:	080068ac 	.word	0x080068ac
 80007fc:	080068b4 	.word	0x080068b4
 8000800:	080068cc 	.word	0x080068cc
 8000804:	080068e0 	.word	0x080068e0
 8000808:	080068f0 	.word	0x080068f0
 800080c:	080068fc 	.word	0x080068fc
 8000810:	0800690c 	.word	0x0800690c

08000814 <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8000818:	2112      	movs	r1, #18
 800081a:	4824      	ldr	r0, [pc, #144]	; (80008ac <collectMiddlewareInfo+0x98>)
 800081c:	f7ff febe 	bl	800059c <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8000820:	210a      	movs	r1, #10
 8000822:	2005      	movs	r0, #5
 8000824:	f7ff fece 	bl	80005c4 <uartTransmitNumber>
	uartTransmit(".", 1);
 8000828:	2101      	movs	r1, #1
 800082a:	4821      	ldr	r0, [pc, #132]	; (80008b0 <collectMiddlewareInfo+0x9c>)
 800082c:	f7ff feb6 	bl	800059c <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8000830:	210a      	movs	r1, #10
 8000832:	2001      	movs	r0, #1
 8000834:	f7ff fec6 	bl	80005c4 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8000838:	2110      	movs	r1, #16
 800083a:	481e      	ldr	r0, [pc, #120]	; (80008b4 <collectMiddlewareInfo+0xa0>)
 800083c:	f7ff feae 	bl	800059c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8000840:	f001 ffee 	bl	8002820 <HAL_GetHalVersion>
 8000844:	4603      	mov	r3, r0
 8000846:	0e1b      	lsrs	r3, r3, #24
 8000848:	b2db      	uxtb	r3, r3
 800084a:	210a      	movs	r1, #10
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff feb9 	bl	80005c4 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000852:	2101      	movs	r1, #1
 8000854:	4816      	ldr	r0, [pc, #88]	; (80008b0 <collectMiddlewareInfo+0x9c>)
 8000856:	f7ff fea1 	bl	800059c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 800085a:	f001 ffe1 	bl	8002820 <HAL_GetHalVersion>
 800085e:	4603      	mov	r3, r0
 8000860:	0c1b      	lsrs	r3, r3, #16
 8000862:	b2db      	uxtb	r3, r3
 8000864:	210a      	movs	r1, #10
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff feac 	bl	80005c4 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800086c:	2101      	movs	r1, #1
 800086e:	4810      	ldr	r0, [pc, #64]	; (80008b0 <collectMiddlewareInfo+0x9c>)
 8000870:	f7ff fe94 	bl	800059c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000874:	f001 ffd4 	bl	8002820 <HAL_GetHalVersion>
 8000878:	4603      	mov	r3, r0
 800087a:	0a1b      	lsrs	r3, r3, #8
 800087c:	b2db      	uxtb	r3, r3
 800087e:	210a      	movs	r1, #10
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff fe9f 	bl	80005c4 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000886:	2101      	movs	r1, #1
 8000888:	4809      	ldr	r0, [pc, #36]	; (80008b0 <collectMiddlewareInfo+0x9c>)
 800088a:	f7ff fe87 	bl	800059c <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 800088e:	f001 ffc7 	bl	8002820 <HAL_GetHalVersion>
 8000892:	4603      	mov	r3, r0
 8000894:	b2db      	uxtb	r3, r3
 8000896:	210a      	movs	r1, #10
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fe93 	bl	80005c4 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 800089e:	2101      	movs	r1, #1
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <collectMiddlewareInfo+0xa4>)
 80008a2:	f7ff fe7b 	bl	800059c <uartTransmit>
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	08006918 	.word	0x08006918
 80008b0:	0800692c 	.word	0x0800692c
 80008b4:	08006930 	.word	0x08006930
 80008b8:	080067f4 	.word	0x080067f4

080008bc <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 80008c0:	2114      	movs	r1, #20
 80008c2:	4814      	ldr	r0, [pc, #80]	; (8000914 <collectGitcounts+0x58>)
 80008c4:	f7ff fe6a 	bl	800059c <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 80008c8:	2103      	movs	r1, #3
 80008ca:	4813      	ldr	r0, [pc, #76]	; (8000918 <collectGitcounts+0x5c>)
 80008cc:	f7ff fe66 	bl	800059c <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 80008d0:	2116      	movs	r1, #22
 80008d2:	4812      	ldr	r0, [pc, #72]	; (800091c <collectGitcounts+0x60>)
 80008d4:	f7ff fe62 	bl	800059c <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 80008d8:	2103      	movs	r1, #3
 80008da:	4811      	ldr	r0, [pc, #68]	; (8000920 <collectGitcounts+0x64>)
 80008dc:	f7ff fe5e 	bl	800059c <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 80008e0:	211c      	movs	r1, #28
 80008e2:	4810      	ldr	r0, [pc, #64]	; (8000924 <collectGitcounts+0x68>)
 80008e4:	f7ff fe5a 	bl	800059c <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 80008e8:	2103      	movs	r1, #3
 80008ea:	480f      	ldr	r0, [pc, #60]	; (8000928 <collectGitcounts+0x6c>)
 80008ec:	f7ff fe56 	bl	800059c <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 80008f0:	2115      	movs	r1, #21
 80008f2:	480e      	ldr	r0, [pc, #56]	; (800092c <collectGitcounts+0x70>)
 80008f4:	f7ff fe52 	bl	800059c <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 80008f8:	2102      	movs	r1, #2
 80008fa:	480d      	ldr	r0, [pc, #52]	; (8000930 <collectGitcounts+0x74>)
 80008fc:	f7ff fe4e 	bl	800059c <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000900:	2114      	movs	r1, #20
 8000902:	480c      	ldr	r0, [pc, #48]	; (8000934 <collectGitcounts+0x78>)
 8000904:	f7ff fe4a 	bl	800059c <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 8000908:	2102      	movs	r1, #2
 800090a:	480b      	ldr	r0, [pc, #44]	; (8000938 <collectGitcounts+0x7c>)
 800090c:	f7ff fe46 	bl	800059c <uartTransmit>
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	08006940 	.word	0x08006940
 8000918:	08006954 	.word	0x08006954
 800091c:	08006958 	.word	0x08006958
 8000920:	08006970 	.word	0x08006970
 8000924:	08006974 	.word	0x08006974
 8000928:	08006990 	.word	0x08006990
 800092c:	08006878 	.word	0x08006878
 8000930:	08006994 	.word	0x08006994
 8000934:	08006898 	.word	0x08006898
 8000938:	08006998 	.word	0x08006998

0800093c <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000940:	2111      	movs	r1, #17
 8000942:	480e      	ldr	r0, [pc, #56]	; (800097c <collectSystemInfo+0x40>)
 8000944:	f7ff fe2a 	bl	800059c <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000948:	f7ff fe5c 	bl	8000604 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 800094c:	2111      	movs	r1, #17
 800094e:	480c      	ldr	r0, [pc, #48]	; (8000980 <collectSystemInfo+0x44>)
 8000950:	f7ff fe24 	bl	800059c <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8000954:	f7ff feec 	bl	8000730 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000958:	2113      	movs	r1, #19
 800095a:	480a      	ldr	r0, [pc, #40]	; (8000984 <collectSystemInfo+0x48>)
 800095c:	f7ff fe1e 	bl	800059c <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000960:	f7ff ff58 	bl	8000814 <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8000964:	2113      	movs	r1, #19
 8000966:	4808      	ldr	r0, [pc, #32]	; (8000988 <collectSystemInfo+0x4c>)
 8000968:	f7ff fe18 	bl	800059c <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 800096c:	f7ff ffa6 	bl	80008bc <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 8000970:	2103      	movs	r1, #3
 8000972:	4806      	ldr	r0, [pc, #24]	; (800098c <collectSystemInfo+0x50>)
 8000974:	f7ff fe12 	bl	800059c <uartTransmit>
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	0800699c 	.word	0x0800699c
 8000980:	080069b0 	.word	0x080069b0
 8000984:	080069c4 	.word	0x080069c4
 8000988:	080069d8 	.word	0x080069d8
 800098c:	080069ec 	.word	0x080069ec

08000990 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8000996:	2300      	movs	r3, #0
 8000998:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 800099a:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <readResetSource+0xa0>)
 800099c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800099e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d002      	beq.n	80009ac <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	3301      	adds	r3, #1
 80009aa:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 80009ac:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <readResetSource+0xa0>)
 80009ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d002      	beq.n	80009be <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	3302      	adds	r3, #2
 80009bc:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <readResetSource+0xa0>)
 80009c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	da02      	bge.n	80009cc <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	3304      	adds	r3, #4
 80009ca:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 80009cc:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <readResetSource+0xa0>)
 80009ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d002      	beq.n	80009de <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	3308      	adds	r3, #8
 80009dc:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <readResetSource+0xa0>)
 80009e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d002      	beq.n	80009f0 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	3310      	adds	r3, #16
 80009ee:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <readResetSource+0xa0>)
 80009f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d002      	beq.n	8000a02 <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	3320      	adds	r3, #32
 8000a00:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <readResetSource+0xa0>)
 8000a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d002      	beq.n	8000a14 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	3340      	adds	r3, #64	; 0x40
 8000a12:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <readResetSource+0xa0>)
 8000a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a18:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <readResetSource+0xa0>)
 8000a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a1e:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8000a20:	79fb      	ldrb	r3, [r7, #7]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800

08000a34 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8000a3e:	2106      	movs	r1, #6
 8000a40:	482a      	ldr	r0, [pc, #168]	; (8000aec <printResetSource+0xb8>)
 8000a42:	f7ff fdab 	bl	800059c <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d104      	bne.n	8000a56 <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8000a4c:	210f      	movs	r1, #15
 8000a4e:	4828      	ldr	r0, [pc, #160]	; (8000af0 <printResetSource+0xbc>)
 8000a50:	f7ff fda4 	bl	800059c <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8000a54:	e046      	b.n	8000ae4 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d003      	beq.n	8000a68 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000a60:	2118      	movs	r1, #24
 8000a62:	4824      	ldr	r0, [pc, #144]	; (8000af4 <printResetSource+0xc0>)
 8000a64:	f7ff fd9a 	bl	800059c <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d003      	beq.n	8000a7a <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000a72:	2116      	movs	r1, #22
 8000a74:	4820      	ldr	r0, [pc, #128]	; (8000af8 <printResetSource+0xc4>)
 8000a76:	f7ff fd91 	bl	800059c <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d003      	beq.n	8000a8c <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8000a84:	210a      	movs	r1, #10
 8000a86:	481d      	ldr	r0, [pc, #116]	; (8000afc <printResetSource+0xc8>)
 8000a88:	f7ff fd88 	bl	800059c <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	f003 0308 	and.w	r3, r3, #8
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d003      	beq.n	8000a9e <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8000a96:	2110      	movs	r1, #16
 8000a98:	4819      	ldr	r0, [pc, #100]	; (8000b00 <printResetSource+0xcc>)
 8000a9a:	f7ff fd7f 	bl	800059c <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	f003 0310 	and.w	r3, r3, #16
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d003      	beq.n	8000ab0 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000aa8:	210f      	movs	r1, #15
 8000aaa:	4816      	ldr	r0, [pc, #88]	; (8000b04 <printResetSource+0xd0>)
 8000aac:	f7ff fd76 	bl	800059c <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	f003 0320 	and.w	r3, r3, #32
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000aba:	210f      	movs	r1, #15
 8000abc:	4812      	ldr	r0, [pc, #72]	; (8000b08 <printResetSource+0xd4>)
 8000abe:	f7ff fd6d 	bl	800059c <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d003      	beq.n	8000ad4 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000acc:	210a      	movs	r1, #10
 8000ace:	480f      	ldr	r0, [pc, #60]	; (8000b0c <printResetSource+0xd8>)
 8000ad0:	f7ff fd64 	bl	800059c <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8000ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	da03      	bge.n	8000ae4 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000adc:	2105      	movs	r1, #5
 8000ade:	480c      	ldr	r0, [pc, #48]	; (8000b10 <printResetSource+0xdc>)
 8000ae0:	f7ff fd5c 	bl	800059c <uartTransmit>
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	080069f0 	.word	0x080069f0
 8000af0:	080069f8 	.word	0x080069f8
 8000af4:	08006a08 	.word	0x08006a08
 8000af8:	08006a24 	.word	0x08006a24
 8000afc:	08006a3c 	.word	0x08006a3c
 8000b00:	08006a48 	.word	0x08006a48
 8000b04:	08006a5c 	.word	0x08006a5c
 8000b08:	08006a6c 	.word	0x08006a6c
 8000b0c:	08006a7c 	.word	0x08006a7c
 8000b10:	08006a88 	.word	0x08006a88

08000b14 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b20:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d013      	beq.n	8000b54 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b2c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b30:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000b34:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d00b      	beq.n	8000b54 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b3c:	e000      	b.n	8000b40 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b3e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d0f9      	beq.n	8000b3e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b4a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	b2d2      	uxtb	r2, r2
 8000b52:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b54:	687b      	ldr	r3, [r7, #4]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <ADC_Gaspedal>:
//----------------------------------------------------------------------

// Gaspedal einlesen
//----------------------------------------------------------------------
uint16_t ADC_Gaspedal(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC von Gaspedal einlesen\n");
 8000b6a:	481d      	ldr	r0, [pc, #116]	; (8000be0 <ADC_Gaspedal+0x7c>)
 8000b6c:	f000 f8c0 	bl	8000cf0 <ITM_SendString>
#endif

	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_6;
 8000b80:	2306      	movs	r3, #6
 8000b82:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000b84:	2301      	movs	r3, #1
 8000b86:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4814      	ldr	r0, [pc, #80]	; (8000be4 <ADC_Gaspedal+0x80>)
 8000b92:	f002 f86b 	bl	8002c6c <HAL_ADC_ConfigChannel>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <ADC_Gaspedal+0x3c>
	{
		Error_Handler();
 8000b9c:	f001 fbd8 	bl	8002350 <Error_Handler>
	}

	// ADC Starten und Wert einlesen
	HAL_ADC_Start(&hadc1);
 8000ba0:	4810      	ldr	r0, [pc, #64]	; (8000be4 <ADC_Gaspedal+0x80>)
 8000ba2:	f001 fec9 	bl	8002938 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000ba6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000baa:	480e      	ldr	r0, [pc, #56]	; (8000be4 <ADC_Gaspedal+0x80>)
 8000bac:	f001 ffc6 	bl	8002b3c <HAL_ADC_PollForConversion>
	ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <ADC_Gaspedal+0x80>)
 8000bb2:	f002 f84e 	bl	8002c52 <HAL_ADC_GetValue>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	82fb      	strh	r3, [r7, #22]
	HAL_ADC_Stop(&hadc1);
 8000bba:	480a      	ldr	r0, [pc, #40]	; (8000be4 <ADC_Gaspedal+0x80>)
 8000bbc:	f001 ff8a 	bl	8002ad4 <HAL_ADC_Stop>

#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC-Wert Gaspedal:\t");
 8000bc0:	4809      	ldr	r0, [pc, #36]	; (8000be8 <ADC_Gaspedal+0x84>)
 8000bc2:	f000 f895 	bl	8000cf0 <ITM_SendString>
	ITM_SendNumber(ADC_Data);
 8000bc6:	8afb      	ldrh	r3, [r7, #22]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 f8a7 	bl	8000d1c <ITM_SendNumber>
	ITM_SendChar('\n');
 8000bce:	200a      	movs	r0, #10
 8000bd0:	f7ff ffa0 	bl	8000b14 <ITM_SendChar>
#endif

	//ADC Wert zurueck geben
	return ADC_Data;
 8000bd4:	8afb      	ldrh	r3, [r7, #22]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	08006a90 	.word	0x08006a90
 8000be4:	20000058 	.word	0x20000058
 8000be8:	08006aac 	.word	0x08006aac

08000bec <ITM_SendChar>:
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000bf4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bf8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d013      	beq.n	8000c2c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c04:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c08:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000c0c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d00b      	beq.n	8000c2c <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 8000c14:	e000      	b.n	8000c18 <ITM_SendChar+0x2c>
      __NOP();
 8000c16:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d0f9      	beq.n	8000c16 <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c22:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	701a      	strb	r2, [r3, #0]
  return (ch);
 8000c2c:	687b      	ldr	r3, [r7, #4]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	71fb      	strb	r3, [r7, #7]
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <software_error>:
//----------------------------------------------------------------------

// Diagnose Funktion falls ein Fehler auftritt
//----------------------------------------------------------------------
void software_error(uint8_t errorcode)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5a:	b672      	cpsid	i
}
 8000c5c:	bf00      	nop
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8000c5e:	4a1e      	ldr	r2, [pc, #120]	; (8000cd8 <software_error+0x88>)
 8000c60:	7853      	ldrb	r3, [r2, #1]
 8000c62:	f043 0308 	orr.w	r3, r3, #8
 8000c66:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <software_error+0x88>)
 8000c6a:	785b      	ldrb	r3, [r3, #1]
 8000c6c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	461a      	mov	r2, r3
 8000c74:	2104      	movs	r1, #4
 8000c76:	4819      	ldr	r0, [pc, #100]	; (8000cdc <software_error+0x8c>)
 8000c78:	f003 fb8c 	bl	8004394 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8000c7c:	4a16      	ldr	r2, [pc, #88]	; (8000cd8 <software_error+0x88>)
 8000c7e:	7853      	ldrb	r3, [r2, #1]
 8000c80:	f36f 1304 	bfc	r3, #4, #1
 8000c84:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// OK LED ausschalten
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <software_error+0x88>)
 8000c88:	785b      	ldrb	r3, [r3, #1]
 8000c8a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	461a      	mov	r2, r3
 8000c92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c96:	4811      	ldr	r0, [pc, #68]	; (8000cdc <software_error+0x8c>)
 8000c98:	f003 fb7c 	bl	8004394 <HAL_GPIO_WritePin>

	// Schalte SDC_Motor aus
	system_out.MotorSDC = 0;												// Zuruecksetzen Variable
 8000c9c:	4a10      	ldr	r2, [pc, #64]	; (8000ce0 <software_error+0x90>)
 8000c9e:	7813      	ldrb	r3, [r2, #0]
 8000ca0:	f36f 1345 	bfc	r3, #5, #1
 8000ca4:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, system_out.MotorSDC);// SDC oeffnen
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <software_error+0x90>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cb6:	480b      	ldr	r0, [pc, #44]	; (8000ce4 <software_error+0x94>)
 8000cb8:	f003 fb6c 	bl	8004394 <HAL_GPIO_WritePin>
#ifdef DEBUG																// Serielle Kommunukation nur waehrend Debugging
#define SOFTERRORMESSAGE			"\nError Handler ausgeloest\n"			// Ausgabe das Fehler aufgetreten ist
	uartTransmit(SOFTERRORMESSAGE,sizeof(SOFTERRORMESSAGE));
 8000cbc:	211b      	movs	r1, #27
 8000cbe:	480a      	ldr	r0, [pc, #40]	; (8000ce8 <software_error+0x98>)
 8000cc0:	f7ff fc6c 	bl	800059c <uartTransmit>

#define ERRORCODE					"Error Code:\t"							// Ausgabe des Fehlers anhand von Fehlercode
	uartTransmit(ERRORCODE,sizeof(ERRORCODE));
 8000cc4:	210d      	movs	r1, #13
 8000cc6:	4809      	ldr	r0, [pc, #36]	; (8000cec <software_error+0x9c>)
 8000cc8:	f7ff fc68 	bl	800059c <uartTransmit>
	uartTransmitNumber(errorcode, 10);										// Fehlercode ausgeben
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	210a      	movs	r1, #10
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fc77 	bl	80005c4 <uartTransmitNumber>
#endif
	while (1);																// Endlosschleife
 8000cd6:	e7fe      	b.n	8000cd6 <software_error+0x86>
 8000cd8:	20000050 	.word	0x20000050
 8000cdc:	40020400 	.word	0x40020400
 8000ce0:	20000040 	.word	0x20000040
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	08006af8 	.word	0x08006af8
 8000cec:	08006b14 	.word	0x08006b14

08000cf0 <ITM_SendString>:
// Nachricht SWO ITM Data Console
// Core Clock := Maximalfrequenz ; HCLK fuer Serial Wire Viewer
// Im String #GRN# oder #RED# oder #ORG# erscheint die Nachricht in einer Farbe
//----------------------------------------------------------------------
void ITM_SendString(char *text)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
#ifdef DEBUG
	// So lange *text != '\0', also ungleich dem "String-Endezeichen(Terminator)"
	while(*text)															// Starte Pointerschleife
 8000cf8:	e007      	b.n	8000d0a <ITM_SendString+0x1a>
	{
		ITM_SendChar(*text);												// Sende ITM Zeichen
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff ff74 	bl	8000bec <ITM_SendChar>
		text++;																// Pointer hochzaehlen
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3301      	adds	r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
	while(*text)															// Starte Pointerschleife
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d1f3      	bne.n	8000cfa <ITM_SendString+0xa>
	}
#endif
}
 8000d12:	bf00      	nop
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <ITM_SendNumber>:
//----------------------------------------------------------------------

// Debug Nummer ueber SWO senden
//----------------------------------------------------------------------
void ITM_SendNumber(long number)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	; 0x30
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
#ifdef DEBUG
	// Variablen definieren
	unsigned char buf[8 * sizeof(long)];
	unsigned int i = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Wenn Nummer 0 ist
	if(number == 0)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d103      	bne.n	8000d36 <ITM_SendNumber+0x1a>
	{
		ITM_SendChar('0');													// Sende 0
 8000d2e:	2030      	movs	r0, #48	; 0x30
 8000d30:	f7ff ff5c 	bl	8000bec <ITM_SendChar>
 8000d34:	e03b      	b.n	8000dae <ITM_SendNumber+0x92>
		return;																// Beende Funktion
	}

	// Wenn Zahl negativ ist
	if(number < 0)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	da23      	bge.n	8000d84 <ITM_SendNumber+0x68>
	{
		ITM_SendChar('-');													// Vorzeichen senden
 8000d3c:	202d      	movs	r0, #45	; 0x2d
 8000d3e:	f7ff ff55 	bl	8000bec <ITM_SendChar>
		number = number * -1;												// Nummer invertieren
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	425b      	negs	r3, r3
 8000d46:	607b      	str	r3, [r7, #4]
	}

	// Berechne Ziffern bis Zahl 0 ist
	while(number > 0)
 8000d48:	e01c      	b.n	8000d84 <ITM_SendNumber+0x68>
	{
		// Ziffern in Puffer schreiben
		buf[i++] = number % 10;												// Rest berechnen
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <ITM_SendNumber+0x98>)
 8000d4e:	fb83 1302 	smull	r1, r3, r3, r2
 8000d52:	1099      	asrs	r1, r3, #2
 8000d54:	17d3      	asrs	r3, r2, #31
 8000d56:	1ac9      	subs	r1, r1, r3
 8000d58:	460b      	mov	r3, r1
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	1ad1      	subs	r1, r2, r3
 8000d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d64:	1c5a      	adds	r2, r3, #1
 8000d66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000d68:	b2ca      	uxtb	r2, r1
 8000d6a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000d6e:	440b      	add	r3, r1
 8000d70:	f803 2c24 	strb.w	r2, [r3, #-36]
		number = number / 10;												// Dividiere durch 10
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <ITM_SendNumber+0x98>)
 8000d78:	fb82 1203 	smull	r1, r2, r2, r3
 8000d7c:	1092      	asrs	r2, r2, #2
 8000d7e:	17db      	asrs	r3, r3, #31
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	607b      	str	r3, [r7, #4]
	while(number > 0)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	dcdf      	bgt.n	8000d4a <ITM_SendNumber+0x2e>
	}

	// Sende Zeichen
	for(; i > 0; i--)
 8000d8a:	e00d      	b.n	8000da8 <ITM_SendNumber+0x8c>
	{
		ITM_SendChar('0' + buf[i-1]);
 8000d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000d94:	4413      	add	r3, r2
 8000d96:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000d9a:	3330      	adds	r3, #48	; 0x30
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff25 	bl	8000bec <ITM_SendChar>
	for(; i > 0; i--)
 8000da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da4:	3b01      	subs	r3, #1
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d1ee      	bne.n	8000d8c <ITM_SendNumber+0x70>
	}
#endif
}
 8000dae:	3730      	adds	r7, #48	; 0x30
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	66666667 	.word	0x66666667

08000db8 <ITM_SendChar>:
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000dc0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dc4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d013      	beq.n	8000df8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000dd0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dd4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000dd8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d00b      	beq.n	8000df8 <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 8000de0:	e000      	b.n	8000de4 <ITM_SendChar+0x2c>
      __NOP();
 8000de2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000de4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f9      	beq.n	8000de2 <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000dee:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	701a      	strb	r2, [r3, #0]
  return (ch);
 8000df8:	687b      	ldr	r3, [r7, #4]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
#ifdef DEBUG_INPUT
	ITM_SendString("Lese Inputs ein\n");
 8000e0c:	48cf      	ldr	r0, [pc, #828]	; (800114c <readall_inputs+0x344>)
 8000e0e:	f7ff ff6f 	bl	8000cf0 <ITM_SendString>
#endif

	// Systemeingaenge einlesen
	system_in.Kickdown = HAL_GPIO_ReadPin(KICKDOWN_GPIO_Port, KICKDOWN_Pin);					// Eingang Gaspedal getreten
 8000e12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e16:	48ce      	ldr	r0, [pc, #824]	; (8001150 <readall_inputs+0x348>)
 8000e18:	f003 faa4 	bl	8004364 <HAL_GPIO_ReadPin>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	b2d9      	uxtb	r1, r3
 8000e24:	4acb      	ldr	r2, [pc, #812]	; (8001154 <readall_inputs+0x34c>)
 8000e26:	7813      	ldrb	r3, [r2, #0]
 8000e28:	f361 0300 	bfi	r3, r1, #0, #1
 8000e2c:	7013      	strb	r3, [r2, #0]
	system_in.Leerlauf = HAL_GPIO_ReadPin(LEERLAUF_GPIO_Port, LEERLAUF_Pin);					// Eingang Gaspedal nicht getreten
 8000e2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e32:	48c7      	ldr	r0, [pc, #796]	; (8001150 <readall_inputs+0x348>)
 8000e34:	f003 fa96 	bl	8004364 <HAL_GPIO_ReadPin>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	b2d9      	uxtb	r1, r3
 8000e40:	4ac4      	ldr	r2, [pc, #784]	; (8001154 <readall_inputs+0x34c>)
 8000e42:	7813      	ldrb	r3, [r2, #0]
 8000e44:	f361 0341 	bfi	r3, r1, #1, #1
 8000e48:	7013      	strb	r3, [r2, #0]
	system_in.BremseNO = HAL_GPIO_ReadPin(BREMSE_NO_GPIO_Port, BREMSE_NO_Pin);					// Eingang Bremse nicht getreten
 8000e4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e4e:	48c0      	ldr	r0, [pc, #768]	; (8001150 <readall_inputs+0x348>)
 8000e50:	f003 fa88 	bl	8004364 <HAL_GPIO_ReadPin>
 8000e54:	4603      	mov	r3, r0
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	b2d9      	uxtb	r1, r3
 8000e5c:	4abd      	ldr	r2, [pc, #756]	; (8001154 <readall_inputs+0x34c>)
 8000e5e:	7813      	ldrb	r3, [r2, #0]
 8000e60:	f361 0382 	bfi	r3, r1, #2, #1
 8000e64:	7013      	strb	r3, [r2, #0]
	system_in.BremseNC = HAL_GPIO_ReadPin(BREMSE_NC_GPIO_Port, BREMSE_NC_Pin);					// Eingang Bremse getreten
 8000e66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e6a:	48b9      	ldr	r0, [pc, #740]	; (8001150 <readall_inputs+0x348>)
 8000e6c:	f003 fa7a 	bl	8004364 <HAL_GPIO_ReadPin>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	b2d9      	uxtb	r1, r3
 8000e78:	4ab6      	ldr	r2, [pc, #728]	; (8001154 <readall_inputs+0x34c>)
 8000e7a:	7813      	ldrb	r3, [r2, #0]
 8000e7c:	f361 03c3 	bfi	r3, r1, #3, #1
 8000e80:	7013      	strb	r3, [r2, #0]
	system_in.Kupplung = HAL_GPIO_ReadPin(KUPPLUNG_NO_GPIO_Port, KUPPLUNG_NO_Pin);				// Eingang Kupplung nicht getreten
 8000e82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e86:	48b2      	ldr	r0, [pc, #712]	; (8001150 <readall_inputs+0x348>)
 8000e88:	f003 fa6c 	bl	8004364 <HAL_GPIO_ReadPin>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	b2d9      	uxtb	r1, r3
 8000e94:	4aaf      	ldr	r2, [pc, #700]	; (8001154 <readall_inputs+0x34c>)
 8000e96:	7813      	ldrb	r3, [r2, #0]
 8000e98:	f361 1304 	bfi	r3, r1, #4, #1
 8000e9c:	7013      	strb	r3, [r2, #0]
	system_in.Recuperation = HAL_GPIO_ReadPin(RECUPERATION_GPIO_Port, RECUPERATION_Pin);		// Eingang Recuperation
 8000e9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ea2:	48ad      	ldr	r0, [pc, #692]	; (8001158 <readall_inputs+0x350>)
 8000ea4:	f003 fa5e 	bl	8004364 <HAL_GPIO_ReadPin>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	b2d9      	uxtb	r1, r3
 8000eb0:	4aa8      	ldr	r2, [pc, #672]	; (8001154 <readall_inputs+0x34c>)
 8000eb2:	7813      	ldrb	r3, [r2, #0]
 8000eb4:	f361 1345 	bfi	r3, r1, #5, #1
 8000eb8:	7013      	strb	r3, [r2, #0]
	system_in.ECON = HAL_GPIO_ReadPin(ECON_GPIO_Port, ECON_Pin);								// Eingang Klima
 8000eba:	2102      	movs	r1, #2
 8000ebc:	48a6      	ldr	r0, [pc, #664]	; (8001158 <readall_inputs+0x350>)
 8000ebe:	f003 fa51 	bl	8004364 <HAL_GPIO_ReadPin>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	b2d9      	uxtb	r1, r3
 8000eca:	4aa2      	ldr	r2, [pc, #648]	; (8001154 <readall_inputs+0x34c>)
 8000ecc:	7813      	ldrb	r3, [r2, #0]
 8000ece:	f361 1386 	bfi	r3, r1, #6, #1
 8000ed2:	7013      	strb	r3, [r2, #0]
	system_in.Anlasser = HAL_GPIO_ReadPin(ANLASSER_GPIO_Port, ANLASSER_Pin);					// Eingang Zuendschloss, Motor starten
 8000ed4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ed8:	48a0      	ldr	r0, [pc, #640]	; (800115c <readall_inputs+0x354>)
 8000eda:	f003 fa43 	bl	8004364 <HAL_GPIO_ReadPin>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	b2d9      	uxtb	r1, r3
 8000ee6:	4a9b      	ldr	r2, [pc, #620]	; (8001154 <readall_inputs+0x34c>)
 8000ee8:	7813      	ldrb	r3, [r2, #0]
 8000eea:	f361 13c7 	bfi	r3, r1, #7, #1
 8000eee:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8000ef0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef4:	489a      	ldr	r0, [pc, #616]	; (8001160 <readall_inputs+0x358>)
 8000ef6:	f003 fa35 	bl	8004364 <HAL_GPIO_ReadPin>
 8000efa:	4603      	mov	r3, r0
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	b2d9      	uxtb	r1, r3
 8000f02:	4a94      	ldr	r2, [pc, #592]	; (8001154 <readall_inputs+0x34c>)
 8000f04:	7853      	ldrb	r3, [r2, #1]
 8000f06:	f361 0300 	bfi	r3, r1, #0, #1
 8000f0a:	7053      	strb	r3, [r2, #1]
	system_in.DCDC_Inst = HAL_GPIO_ReadPin(DCDC_INSTRUCTION_GPIO_Port, DCDC_INSTRUCTION_Pin);	// DCDC Wandler funktioniert einwandfrei
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	4895      	ldr	r0, [pc, #596]	; (8001164 <readall_inputs+0x35c>)
 8000f10:	f003 fa28 	bl	8004364 <HAL_GPIO_ReadPin>
 8000f14:	4603      	mov	r3, r0
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	b2d9      	uxtb	r1, r3
 8000f1c:	4a8d      	ldr	r2, [pc, #564]	; (8001154 <readall_inputs+0x34c>)
 8000f1e:	7853      	ldrb	r3, [r2, #1]
 8000f20:	f361 0341 	bfi	r3, r1, #1, #1
 8000f24:	7053      	strb	r3, [r2, #1]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8000f26:	2101      	movs	r1, #1
 8000f28:	488b      	ldr	r0, [pc, #556]	; (8001158 <readall_inputs+0x350>)
 8000f2a:	f003 fa1b 	bl	8004364 <HAL_GPIO_ReadPin>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	b2d9      	uxtb	r1, r3
 8000f36:	4a87      	ldr	r2, [pc, #540]	; (8001154 <readall_inputs+0x34c>)
 8000f38:	7853      	ldrb	r3, [r2, #1]
 8000f3a:	f361 0382 	bfi	r3, r1, #2, #1
 8000f3e:	7053      	strb	r3, [r2, #1]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8000f40:	2140      	movs	r1, #64	; 0x40
 8000f42:	4883      	ldr	r0, [pc, #524]	; (8001150 <readall_inputs+0x348>)
 8000f44:	f003 fa0e 	bl	8004364 <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	b2d9      	uxtb	r1, r3
 8000f50:	4a80      	ldr	r2, [pc, #512]	; (8001154 <readall_inputs+0x34c>)
 8000f52:	7853      	ldrb	r3, [r2, #1]
 8000f54:	f361 03c3 	bfi	r3, r1, #3, #1
 8000f58:	7053      	strb	r3, [r2, #1]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	4882      	ldr	r0, [pc, #520]	; (8001168 <readall_inputs+0x360>)
 8000f5e:	f003 fa01 	bl	8004364 <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	b2d9      	uxtb	r1, r3
 8000f6a:	4a7a      	ldr	r2, [pc, #488]	; (8001154 <readall_inputs+0x34c>)
 8000f6c:	7853      	ldrb	r3, [r2, #1]
 8000f6e:	f361 1304 	bfi	r3, r1, #4, #1
 8000f72:	7053      	strb	r3, [r2, #1]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8000f74:	2104      	movs	r1, #4
 8000f76:	487c      	ldr	r0, [pc, #496]	; (8001168 <readall_inputs+0x360>)
 8000f78:	f003 f9f4 	bl	8004364 <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	b2d9      	uxtb	r1, r3
 8000f84:	4a73      	ldr	r2, [pc, #460]	; (8001154 <readall_inputs+0x34c>)
 8000f86:	7853      	ldrb	r3, [r2, #1]
 8000f88:	f361 1345 	bfi	r3, r1, #5, #1
 8000f8c:	7053      	strb	r3, [r2, #1]
//	system_in.Bremsdruck_NO = HAL_GPIO_ReadPin(Bremsdruck_NO_GPIO_Port, Bremsdruck_NO_Pin);		// Bremsdruck nicht zu hoch
//	system_in.Bremsdruck_NC = HAL_GPIO_ReadPin(Bremsdruck_NC_GPIO_Port, Bremsdruck_NC_Pin);		// Bremsdruck zu hoch

	// SDC-Eingaenge einlesen
	sdc_in.EmergencyRun = HAL_GPIO_ReadPin(EMERGENCY_RUN_GPIO_Port, EMERGENCY_RUN_Pin);			// Emergency Run, Akku
 8000f8e:	2102      	movs	r1, #2
 8000f90:	4875      	ldr	r0, [pc, #468]	; (8001168 <readall_inputs+0x360>)
 8000f92:	f003 f9e7 	bl	8004364 <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	b2d9      	uxtb	r1, r3
 8000f9e:	4a73      	ldr	r2, [pc, #460]	; (800116c <readall_inputs+0x364>)
 8000fa0:	7813      	ldrb	r3, [r2, #0]
 8000fa2:	f361 0300 	bfi	r3, r1, #0, #1
 8000fa6:	7013      	strb	r3, [r2, #0]
	sdc_in.SDC0 = HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin);						// Shutdown-Circuit, OK
 8000fa8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fac:	4868      	ldr	r0, [pc, #416]	; (8001150 <readall_inputs+0x348>)
 8000fae:	f003 f9d9 	bl	8004364 <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	b2d9      	uxtb	r1, r3
 8000fba:	4a6c      	ldr	r2, [pc, #432]	; (800116c <readall_inputs+0x364>)
 8000fbc:	7813      	ldrb	r3, [r2, #0]
 8000fbe:	f361 0341 	bfi	r3, r1, #1, #1
 8000fc2:	7013      	strb	r3, [r2, #0]
	sdc_in.Akku1SDC = HAL_GPIO_ReadPin(SENSE_SDC_AKKU_GPIO_Port, SENSE_SDC_AKKU_Pin);			// Shutdown-Circuit Akku, OK
 8000fc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc8:	4861      	ldr	r0, [pc, #388]	; (8001150 <readall_inputs+0x348>)
 8000fca:	f003 f9cb 	bl	8004364 <HAL_GPIO_ReadPin>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	b2d9      	uxtb	r1, r3
 8000fd6:	4a65      	ldr	r2, [pc, #404]	; (800116c <readall_inputs+0x364>)
 8000fd8:	7813      	ldrb	r3, [r2, #0]
 8000fda:	f361 0382 	bfi	r3, r1, #2, #1
 8000fde:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8000fe0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe4:	485d      	ldr	r0, [pc, #372]	; (800115c <readall_inputs+0x354>)
 8000fe6:	f003 f9bd 	bl	8004364 <HAL_GPIO_ReadPin>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	b2d9      	uxtb	r1, r3
 8000ff2:	4a5e      	ldr	r2, [pc, #376]	; (800116c <readall_inputs+0x364>)
 8000ff4:	7813      	ldrb	r3, [r2, #0]
 8000ff6:	f361 03c3 	bfi	r3, r1, #3, #1
 8000ffa:	7013      	strb	r3, [r2, #0]
	sdc_in.DCDC_Fault = HAL_GPIO_ReadPin(DCDC_FAULT_GPIO_Port, DCDC_FAULT_Pin);					// DCDC Wandler funktioniert nicht richtig
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	4859      	ldr	r0, [pc, #356]	; (8001164 <readall_inputs+0x35c>)
 8001000:	f003 f9b0 	bl	8004364 <HAL_GPIO_ReadPin>
 8001004:	4603      	mov	r3, r0
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	b2d9      	uxtb	r1, r3
 800100c:	4a57      	ldr	r2, [pc, #348]	; (800116c <readall_inputs+0x364>)
 800100e:	7813      	ldrb	r3, [r2, #0]
 8001010:	f361 1304 	bfi	r3, r1, #4, #1
 8001014:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.ASR1 = HAL_GPIO_ReadPin(ASR_IN1_GPIO_Port, ASR_IN1_Pin);							// ASR Eingang Mittelkonsole
 8001016:	2110      	movs	r1, #16
 8001018:	4852      	ldr	r0, [pc, #328]	; (8001164 <readall_inputs+0x35c>)
 800101a:	f003 f9a3 	bl	8004364 <HAL_GPIO_ReadPin>
 800101e:	4603      	mov	r3, r0
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	b2d9      	uxtb	r1, r3
 8001026:	4a52      	ldr	r2, [pc, #328]	; (8001170 <readall_inputs+0x368>)
 8001028:	7813      	ldrb	r3, [r2, #0]
 800102a:	f361 0300 	bfi	r3, r1, #0, #1
 800102e:	7013      	strb	r3, [r2, #0]
	komfort_in.ASR2 = HAL_GPIO_ReadPin(ASR_IN2_GPIO_Port, ASR_IN2_Pin);							// ASR Eingang Mittelkonsole
 8001030:	2110      	movs	r1, #16
 8001032:	484b      	ldr	r0, [pc, #300]	; (8001160 <readall_inputs+0x358>)
 8001034:	f003 f996 	bl	8004364 <HAL_GPIO_ReadPin>
 8001038:	4603      	mov	r3, r0
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	b2d9      	uxtb	r1, r3
 8001040:	4a4b      	ldr	r2, [pc, #300]	; (8001170 <readall_inputs+0x368>)
 8001042:	7813      	ldrb	r3, [r2, #0]
 8001044:	f361 0341 	bfi	r3, r1, #1, #1
 8001048:	7013      	strb	r3, [r2, #0]
	komfort_in.ECO = HAL_GPIO_ReadPin(ECO_GPIO_Port, ECO_Pin);									// ECO Eingang Mittelkonsole
 800104a:	2108      	movs	r1, #8
 800104c:	4840      	ldr	r0, [pc, #256]	; (8001150 <readall_inputs+0x348>)
 800104e:	f003 f989 	bl	8004364 <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	b2d9      	uxtb	r1, r3
 800105a:	4a45      	ldr	r2, [pc, #276]	; (8001170 <readall_inputs+0x368>)
 800105c:	7813      	ldrb	r3, [r2, #0]
 800105e:	f361 0382 	bfi	r3, r1, #2, #1
 8001062:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Rst_In = HAL_GPIO_ReadPin(BC_RESET_IN_GPIO_Port, BC_RESET_IN_Pin);			// Boardcomputer Reset Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8001064:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001068:	483e      	ldr	r0, [pc, #248]	; (8001164 <readall_inputs+0x35c>)
 800106a:	f003 f97b 	bl	8004364 <HAL_GPIO_ReadPin>
 800106e:	4603      	mov	r3, r0
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	b2d9      	uxtb	r1, r3
 8001076:	4a3e      	ldr	r2, [pc, #248]	; (8001170 <readall_inputs+0x368>)
 8001078:	7813      	ldrb	r3, [r2, #0]
 800107a:	f361 03c3 	bfi	r3, r1, #3, #1
 800107e:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Up_In = HAL_GPIO_ReadPin(BC_UP_IN_GPIO_Port, BC_UP_IN_Pin);					// Boardcomputer Rauf Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8001080:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001084:	4838      	ldr	r0, [pc, #224]	; (8001168 <readall_inputs+0x360>)
 8001086:	f003 f96d 	bl	8004364 <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	b2d9      	uxtb	r1, r3
 8001092:	4a37      	ldr	r2, [pc, #220]	; (8001170 <readall_inputs+0x368>)
 8001094:	7813      	ldrb	r3, [r2, #0]
 8001096:	f361 1304 	bfi	r3, r1, #4, #1
 800109a:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Down_In = HAL_GPIO_ReadPin(BC_DOWN_IN_GPIO_Port, BC_DOWN_IN_Pin);				// Boardcomputer Runter Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 800109c:	2110      	movs	r1, #16
 800109e:	482c      	ldr	r0, [pc, #176]	; (8001150 <readall_inputs+0x348>)
 80010a0:	f003 f960 	bl	8004364 <HAL_GPIO_ReadPin>
 80010a4:	4603      	mov	r3, r0
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	b2d9      	uxtb	r1, r3
 80010ac:	4a30      	ldr	r2, [pc, #192]	; (8001170 <readall_inputs+0x368>)
 80010ae:	7813      	ldrb	r3, [r2, #0]
 80010b0:	f361 1345 	bfi	r3, r1, #5, #1
 80010b4:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn1 = HAL_GPIO_ReadPin(BAMOCAR_IN1_GPIO_Port, BAMOCAR_IN1_Pin);				// Eingang Bamocar 1
 80010b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ba:	4829      	ldr	r0, [pc, #164]	; (8001160 <readall_inputs+0x358>)
 80010bc:	f003 f952 	bl	8004364 <HAL_GPIO_ReadPin>
 80010c0:	4603      	mov	r3, r0
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	b2d9      	uxtb	r1, r3
 80010c8:	4a29      	ldr	r2, [pc, #164]	; (8001170 <readall_inputs+0x368>)
 80010ca:	7813      	ldrb	r3, [r2, #0]
 80010cc:	f361 1386 	bfi	r3, r1, #6, #1
 80010d0:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn2 = HAL_GPIO_ReadPin(BAMOCAR_IN2_GPIO_Port, BAMOCAR_IN2_Pin);				// Eingang Bamocar 2
 80010d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d6:	4822      	ldr	r0, [pc, #136]	; (8001160 <readall_inputs+0x358>)
 80010d8:	f003 f944 	bl	8004364 <HAL_GPIO_ReadPin>
 80010dc:	4603      	mov	r3, r0
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	b2d9      	uxtb	r1, r3
 80010e4:	4a22      	ldr	r2, [pc, #136]	; (8001170 <readall_inputs+0x368>)
 80010e6:	7813      	ldrb	r3, [r2, #0]
 80010e8:	f361 13c7 	bfi	r3, r1, #7, #1
 80010ec:	7013      	strb	r3, [r2, #0]
	komfort_in.Enter = HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin);							// Encoder Taster Enter Eingang Mittelconsole
 80010ee:	2180      	movs	r1, #128	; 0x80
 80010f0:	4820      	ldr	r0, [pc, #128]	; (8001174 <readall_inputs+0x36c>)
 80010f2:	f003 f937 	bl	8004364 <HAL_GPIO_ReadPin>
 80010f6:	4603      	mov	r3, r0
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	b2d9      	uxtb	r1, r3
 80010fe:	4a1c      	ldr	r2, [pc, #112]	; (8001170 <readall_inputs+0x368>)
 8001100:	7853      	ldrb	r3, [r2, #1]
 8001102:	f361 0300 	bfi	r3, r1, #0, #1
 8001106:	7053      	strb	r3, [r2, #1]
	komfort_in.OutA = HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTA_Pin);								// Encoder OUTA Eingang Mittelconsole
 8001108:	f44f 7100 	mov.w	r1, #512	; 0x200
 800110c:	4816      	ldr	r0, [pc, #88]	; (8001168 <readall_inputs+0x360>)
 800110e:	f003 f929 	bl	8004364 <HAL_GPIO_ReadPin>
 8001112:	4603      	mov	r3, r0
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	b2d9      	uxtb	r1, r3
 800111a:	4a15      	ldr	r2, [pc, #84]	; (8001170 <readall_inputs+0x368>)
 800111c:	7853      	ldrb	r3, [r2, #1]
 800111e:	f361 0341 	bfi	r3, r1, #1, #1
 8001122:	7053      	strb	r3, [r2, #1]
	komfort_in.OutB = HAL_GPIO_ReadPin(OUTB_GPIO_Port, OUTB_Pin);								// Encoder OUTB Eingang Mittelconsole
 8001124:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001128:	480f      	ldr	r0, [pc, #60]	; (8001168 <readall_inputs+0x360>)
 800112a:	f003 f91b 	bl	8004364 <HAL_GPIO_ReadPin>
 800112e:	4603      	mov	r3, r0
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	b2d9      	uxtb	r1, r3
 8001136:	4a0e      	ldr	r2, [pc, #56]	; (8001170 <readall_inputs+0x368>)
 8001138:	7853      	ldrb	r3, [r2, #1]
 800113a:	f361 0382 	bfi	r3, r1, #2, #1
 800113e:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA1 = HAL_GPIO_ReadPin(GRA1_GPIO_Port, GRA1_Pin);								// Tempomat 1 Eingang
 8001140:	2120      	movs	r1, #32
 8001142:	4808      	ldr	r0, [pc, #32]	; (8001164 <readall_inputs+0x35c>)
 8001144:	f003 f90e 	bl	8004364 <HAL_GPIO_ReadPin>
 8001148:	4603      	mov	r3, r0
 800114a:	e015      	b.n	8001178 <readall_inputs+0x370>
 800114c:	08006b24 	.word	0x08006b24
 8001150:	40021000 	.word	0x40021000
 8001154:	20000044 	.word	0x20000044
 8001158:	40021400 	.word	0x40021400
 800115c:	40020400 	.word	0x40020400
 8001160:	40020c00 	.word	0x40020c00
 8001164:	40021800 	.word	0x40021800
 8001168:	40020000 	.word	0x40020000
 800116c:	20000054 	.word	0x20000054
 8001170:	2000004c 	.word	0x2000004c
 8001174:	40020800 	.word	0x40020800
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	b2d9      	uxtb	r1, r3
 800117e:	4a30      	ldr	r2, [pc, #192]	; (8001240 <readall_inputs+0x438>)
 8001180:	7853      	ldrb	r3, [r2, #1]
 8001182:	f361 03c3 	bfi	r3, r1, #3, #1
 8001186:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA2 = HAL_GPIO_ReadPin(GRA2_GPIO_Port, GRA2_Pin);								// Tempomat 2 Eingang
 8001188:	2140      	movs	r1, #64	; 0x40
 800118a:	482e      	ldr	r0, [pc, #184]	; (8001244 <readall_inputs+0x43c>)
 800118c:	f003 f8ea 	bl	8004364 <HAL_GPIO_ReadPin>
 8001190:	4603      	mov	r3, r0
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	b2d9      	uxtb	r1, r3
 8001198:	4a29      	ldr	r2, [pc, #164]	; (8001240 <readall_inputs+0x438>)
 800119a:	7853      	ldrb	r3, [r2, #1]
 800119c:	f361 1304 	bfi	r3, r1, #4, #1
 80011a0:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA3 = HAL_GPIO_ReadPin(GRA3_GPIO_Port, GRA3_Pin);								// Tempomat 3 Eingang
 80011a2:	2180      	movs	r1, #128	; 0x80
 80011a4:	4827      	ldr	r0, [pc, #156]	; (8001244 <readall_inputs+0x43c>)
 80011a6:	f003 f8dd 	bl	8004364 <HAL_GPIO_ReadPin>
 80011aa:	4603      	mov	r3, r0
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	b2d9      	uxtb	r1, r3
 80011b2:	4a23      	ldr	r2, [pc, #140]	; (8001240 <readall_inputs+0x438>)
 80011b4:	7853      	ldrb	r3, [r2, #1]
 80011b6:	f361 1345 	bfi	r3, r1, #5, #1
 80011ba:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA4 = HAL_GPIO_ReadPin(GRA4_GPIO_Port, GRA4_Pin);								// Tempomat 4 Eingang
 80011bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c0:	4820      	ldr	r0, [pc, #128]	; (8001244 <readall_inputs+0x43c>)
 80011c2:	f003 f8cf 	bl	8004364 <HAL_GPIO_ReadPin>
 80011c6:	4603      	mov	r3, r0
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	b2d9      	uxtb	r1, r3
 80011ce:	4a1c      	ldr	r2, [pc, #112]	; (8001240 <readall_inputs+0x438>)
 80011d0:	7853      	ldrb	r3, [r2, #1]
 80011d2:	f361 1386 	bfi	r3, r1, #6, #1
 80011d6:	7053      	strb	r3, [r2, #1]
	komfort_in.Durchfluss = HAL_GPIO_ReadPin(DURCHFLUSS_GPIO_Port, DURCHFLUSS_Pin);				// Durchflusssensor Eingang
 80011d8:	2120      	movs	r1, #32
 80011da:	481b      	ldr	r0, [pc, #108]	; (8001248 <readall_inputs+0x440>)
 80011dc:	f003 f8c2 	bl	8004364 <HAL_GPIO_ReadPin>
 80011e0:	4603      	mov	r3, r0
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	b2d9      	uxtb	r1, r3
 80011e8:	4a15      	ldr	r2, [pc, #84]	; (8001240 <readall_inputs+0x438>)
 80011ea:	7853      	ldrb	r3, [r2, #1]
 80011ec:	f361 13c7 	bfi	r3, r1, #7, #1
 80011f0:	7053      	strb	r3, [r2, #1]

#ifdef DEBUG_INPUT
	ITM_SendString("Eingaenge gelesen.\n");
 80011f2:	4816      	ldr	r0, [pc, #88]	; (800124c <readall_inputs+0x444>)
 80011f4:	f7ff fd7c 	bl	8000cf0 <ITM_SendString>
	ITM_SendString("system_in:\t");
 80011f8:	4815      	ldr	r0, [pc, #84]	; (8001250 <readall_inputs+0x448>)
 80011fa:	f7ff fd79 	bl	8000cf0 <ITM_SendString>
	ITM_SendNumber(system_in.systeminput);
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <readall_inputs+0x44c>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fd8a 	bl	8000d1c <ITM_SendNumber>
	ITM_SendChar('\n');
 8001208:	200a      	movs	r0, #10
 800120a:	f7ff fdd5 	bl	8000db8 <ITM_SendChar>
	ITM_SendString("sdc_in:\t");
 800120e:	4812      	ldr	r0, [pc, #72]	; (8001258 <readall_inputs+0x450>)
 8001210:	f7ff fd6e 	bl	8000cf0 <ITM_SendString>
	ITM_SendNumber(sdc_in.sdcinput);
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <readall_inputs+0x454>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fd7f 	bl	8000d1c <ITM_SendNumber>
	ITM_SendChar('\n');
 800121e:	200a      	movs	r0, #10
 8001220:	f7ff fdca 	bl	8000db8 <ITM_SendChar>
	ITM_SendString("komfort_in:\t");
 8001224:	480e      	ldr	r0, [pc, #56]	; (8001260 <readall_inputs+0x458>)
 8001226:	f7ff fd63 	bl	8000cf0 <ITM_SendString>
	ITM_SendNumber(komfort_in.komfortinput);
 800122a:	4b05      	ldr	r3, [pc, #20]	; (8001240 <readall_inputs+0x438>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fd74 	bl	8000d1c <ITM_SendNumber>
	ITM_SendChar('\n');
 8001234:	200a      	movs	r0, #10
 8001236:	f7ff fdbf 	bl	8000db8 <ITM_SendChar>
#endif
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000004c 	.word	0x2000004c
 8001244:	40021800 	.word	0x40021800
 8001248:	40021000 	.word	0x40021000
 800124c:	08006b38 	.word	0x08006b38
 8001250:	08006b4c 	.word	0x08006b4c
 8001254:	20000044 	.word	0x20000044
 8001258:	08006b58 	.word	0x08006b58
 800125c:	20000054 	.word	0x20000054
 8001260:	08006b64 	.word	0x08006b64

08001264 <millis>:
//----------------------------------------------------------------------
#include "millis.h"
//----------------------------------------------------------------------

uint32_t millis(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001268:	f001 faaa 	bl	80027c0 <HAL_GetTick>
 800126c:	4603      	mov	r3, r0
}
 800126e:	4618      	mov	r0, r3
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);							// Teste Green LED, an
 8001278:	2201      	movs	r2, #1
 800127a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800127e:	481b      	ldr	r0, [pc, #108]	; (80012ec <testPCB_Leds+0x78>)
 8001280:	f003 f888 	bl	8004394 <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 8001284:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001288:	f001 faa6 	bl	80027d8 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);							// Teste Green LED, aus
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001292:	4816      	ldr	r0, [pc, #88]	; (80012ec <testPCB_Leds+0x78>)
 8001294:	f003 f87e 	bl	8004394 <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 8001298:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800129c:	f001 fa9c 	bl	80027d8 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);								// Teste Blue LED, an
 80012a0:	2201      	movs	r2, #1
 80012a2:	2180      	movs	r1, #128	; 0x80
 80012a4:	4811      	ldr	r0, [pc, #68]	; (80012ec <testPCB_Leds+0x78>)
 80012a6:	f003 f875 	bl	8004394 <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 80012aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ae:	f001 fa93 	bl	80027d8 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);							// Teste Blue LED, aus
 80012b2:	2200      	movs	r2, #0
 80012b4:	2180      	movs	r1, #128	; 0x80
 80012b6:	480d      	ldr	r0, [pc, #52]	; (80012ec <testPCB_Leds+0x78>)
 80012b8:	f003 f86c 	bl	8004394 <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 80012bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012c0:	f001 fa8a 	bl	80027d8 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);								// Teste Red LED, an
 80012c4:	2201      	movs	r2, #1
 80012c6:	2104      	movs	r1, #4
 80012c8:	4808      	ldr	r0, [pc, #32]	; (80012ec <testPCB_Leds+0x78>)
 80012ca:	f003 f863 	bl	8004394 <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 80012ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012d2:	f001 fa81 	bl	80027d8 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);								// Teste Red LED, aus
 80012d6:	2200      	movs	r2, #0
 80012d8:	2104      	movs	r1, #4
 80012da:	4804      	ldr	r0, [pc, #16]	; (80012ec <testPCB_Leds+0x78>)
 80012dc:	f003 f85a 	bl	8004394 <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 80012e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012e4:	f001 fa78 	bl	80027d8 <HAL_Delay>
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40020400 	.word	0x40020400

080012f0 <testCockpit_Leds>:
//----------------------------------------------------------------------

// Teste Cockpit LEDs
//----------------------------------------------------------------------
void testCockpit_Leds(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(ANHAENGER_GPIO_Port, ANHAENGER_Pin, GPIO_PIN_SET);							// Teste Anhaenger LED, an (Cockpit ECO)
 80012f4:	2201      	movs	r2, #1
 80012f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012fa:	4813      	ldr	r0, [pc, #76]	; (8001348 <testCockpit_Leds+0x58>)
 80012fc:	f003 f84a 	bl	8004394 <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 8001300:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001304:	f001 fa68 	bl	80027d8 <HAL_Delay>
    HAL_GPIO_WritePin(ANHAENGER_GPIO_Port, ANHAENGER_Pin, GPIO_PIN_RESET);							// Teste Anhaenger LED, aus (Cockpit ECO)
 8001308:	2200      	movs	r2, #0
 800130a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800130e:	480e      	ldr	r0, [pc, #56]	; (8001348 <testCockpit_Leds+0x58>)
 8001310:	f003 f840 	bl	8004394 <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 8001314:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001318:	f001 fa5e 	bl	80027d8 <HAL_Delay>
    HAL_GPIO_WritePin(RESERVE_OUT_GPIO_Port, RESERVE_OUT_Pin, GPIO_PIN_SET);						// Teste Reserve LED, an (Cockpit Niveauregulierung)
 800131c:	2201      	movs	r2, #1
 800131e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001322:	4809      	ldr	r0, [pc, #36]	; (8001348 <testCockpit_Leds+0x58>)
 8001324:	f003 f836 	bl	8004394 <HAL_GPIO_WritePin>
    HAL_Delay(1000);																				// Warte 1s
 8001328:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800132c:	f001 fa54 	bl	80027d8 <HAL_Delay>
    HAL_GPIO_WritePin(RESERVE_OUT_GPIO_Port, RESERVE_OUT_Pin, GPIO_PIN_RESET);						// Teste Reserve LED, aus (Cockpit Niveauregulierung)
 8001330:	2200      	movs	r2, #0
 8001332:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001336:	4804      	ldr	r0, [pc, #16]	; (8001348 <testCockpit_Leds+0x58>)
 8001338:	f003 f82c 	bl	8004394 <HAL_GPIO_WritePin>
    HAL_Delay(500);																					// Warte 0.5s
 800133c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001340:	f001 fa4a 	bl	80027d8 <HAL_Delay>
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40020c00 	.word	0x40020c00

0800134c <pwm_oelstand>:
//----------------------------------------------------------------------

// PWM fuer Oelstandsensor am Kombiinstrument
//----------------------------------------------------------------------
void pwm_oelstand(uint16_t time)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	80fb      	strh	r3, [r7, #6]
	// Auswahl wie viele Sekunden vergangen
	switch (time)																					// Zeit wird uebergeben
 8001356:	88fb      	ldrh	r3, [r7, #6]
 8001358:	2b4b      	cmp	r3, #75	; 0x4b
 800135a:	d01c      	beq.n	8001396 <pwm_oelstand+0x4a>
 800135c:	2b4b      	cmp	r3, #75	; 0x4b
 800135e:	dc20      	bgt.n	80013a2 <pwm_oelstand+0x56>
 8001360:	2b2d      	cmp	r3, #45	; 0x2d
 8001362:	d012      	beq.n	800138a <pwm_oelstand+0x3e>
 8001364:	2b2d      	cmp	r3, #45	; 0x2d
 8001366:	dc1c      	bgt.n	80013a2 <pwm_oelstand+0x56>
 8001368:	2b00      	cmp	r3, #0
 800136a:	d002      	beq.n	8001372 <pwm_oelstand+0x26>
 800136c:	2b0f      	cmp	r3, #15
 800136e:	d006      	beq.n	800137e <pwm_oelstand+0x32>
			break;
		case 75: // 5x15 ms = 75 ms
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 75ms Oelstandsensor Ausgang high
			break;
		default:
			break;
 8001370:	e017      	b.n	80013a2 <pwm_oelstand+0x56>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_RESET);			// Bei 0ms Oelstandsensor Ausgang low
 8001372:	2200      	movs	r2, #0
 8001374:	2180      	movs	r1, #128	; 0x80
 8001376:	480d      	ldr	r0, [pc, #52]	; (80013ac <pwm_oelstand+0x60>)
 8001378:	f003 f80c 	bl	8004394 <HAL_GPIO_WritePin>
			break;
 800137c:	e012      	b.n	80013a4 <pwm_oelstand+0x58>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 15ms Oelstandsensor Ausgang high
 800137e:	2201      	movs	r2, #1
 8001380:	2180      	movs	r1, #128	; 0x80
 8001382:	480a      	ldr	r0, [pc, #40]	; (80013ac <pwm_oelstand+0x60>)
 8001384:	f003 f806 	bl	8004394 <HAL_GPIO_WritePin>
			break;
 8001388:	e00c      	b.n	80013a4 <pwm_oelstand+0x58>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_RESET);			// Bei 45ms Oelstandsensor Ausgang low
 800138a:	2200      	movs	r2, #0
 800138c:	2180      	movs	r1, #128	; 0x80
 800138e:	4807      	ldr	r0, [pc, #28]	; (80013ac <pwm_oelstand+0x60>)
 8001390:	f003 f800 	bl	8004394 <HAL_GPIO_WritePin>
			break;
 8001394:	e006      	b.n	80013a4 <pwm_oelstand+0x58>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 75ms Oelstandsensor Ausgang high
 8001396:	2201      	movs	r2, #1
 8001398:	2180      	movs	r1, #128	; 0x80
 800139a:	4804      	ldr	r0, [pc, #16]	; (80013ac <pwm_oelstand+0x60>)
 800139c:	f002 fffa 	bl	8004394 <HAL_GPIO_WritePin>
			break;
 80013a0:	e000      	b.n	80013a4 <pwm_oelstand+0x58>
			break;
 80013a2:	bf00      	nop
	}
	// Nach 405ms wird das ganze wiederholt
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40020c00 	.word	0x40020c00

080013b0 <cockpit_default>:
//----------------------------------------------------------------------

// Setze Cockpit auf default, alle Fehler OK
//----------------------------------------------------------------------
void cockpit_default(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	leuchten_out.Ruechwarn = 1;																		// Ruecklichtwarnung setzen
 80013b4:	4a18      	ldr	r2, [pc, #96]	; (8001418 <cockpit_default+0x68>)
 80013b6:	7813      	ldrb	r3, [r2, #0]
 80013b8:	f043 0310 	orr.w	r3, r3, #16
 80013bc:	7013      	strb	r3, [r2, #0]
	leuchten_out.Wischwarn = 1;																		// Wischwasserwarnung setzen
 80013be:	4a16      	ldr	r2, [pc, #88]	; (8001418 <cockpit_default+0x68>)
 80013c0:	7813      	ldrb	r3, [r2, #0]
 80013c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013c6:	7013      	strb	r3, [r2, #0]
	leuchten_out.Bremswarn = 1;																		// Bremslichtwarnung setzen
 80013c8:	4a13      	ldr	r2, [pc, #76]	; (8001418 <cockpit_default+0x68>)
 80013ca:	7813      	ldrb	r3, [r2, #0]
 80013cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d0:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, leuchten_out.Ruechwarn);			// Fehlermeldung fuer Ruecklichtwarnung einschalten
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <cockpit_default+0x68>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e2:	480e      	ldr	r0, [pc, #56]	; (800141c <cockpit_default+0x6c>)
 80013e4:	f002 ffd6 	bl	8004394 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WISCHWARNUNG_GPIO_Port, WISCHWARNUNG_Pin, leuchten_out.Wischwarn);			// Fehlermeldung fuer Wischwasserwarnung einschalten
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <cockpit_default+0x68>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	461a      	mov	r2, r3
 80013f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f8:	4809      	ldr	r0, [pc, #36]	; (8001420 <cockpit_default+0x70>)
 80013fa:	f002 ffcb 	bl	8004394 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BREMSWARNUNG_GPIO_Port, BREMSWARNUNG_Pin, leuchten_out.Bremswarn);			// Fehlermeldung fuer Bremslichtwarnung einschalten
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <cockpit_default+0x68>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001406:	b2db      	uxtb	r3, r3
 8001408:	461a      	mov	r2, r3
 800140a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800140e:	4804      	ldr	r0, [pc, #16]	; (8001420 <cockpit_default+0x70>)
 8001410:	f002 ffc0 	bl	8004394 <HAL_GPIO_WritePin>
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000050 	.word	0x20000050
 800141c:	40020000 	.word	0x40020000
 8001420:	40021800 	.word	0x40021800

08001424 <testSDC>:
//----------------------------------------------------------------------

// Testen der Spannung am Shutdown-Circuit, Signal 1 = offen, Signal = 0 geschlossen
//----------------------------------------------------------------------
void testSDC(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, GPIO_PIN_SET);					// Einschalten von Shutdown-Circuit zum testen
 8001428:	2201      	movs	r2, #1
 800142a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800142e:	480e      	ldr	r0, [pc, #56]	; (8001468 <testSDC+0x44>)
 8001430:	f002 ffb0 	bl	8004394 <HAL_GPIO_WritePin>
	HAL_Delay(100);																					// Wartezeit zum setzen
 8001434:	2064      	movs	r0, #100	; 0x64
 8001436:	f001 f9cf 	bl	80027d8 <HAL_Delay>
	if (HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin) == 1)								// Einlesen von SDC0 Eingang
 800143a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800143e:	480a      	ldr	r0, [pc, #40]	; (8001468 <testSDC+0x44>)
 8001440:	f002 ff90 	bl	8004364 <HAL_GPIO_ReadPin>
 8001444:	4603      	mov	r3, r0
 8001446:	2b01      	cmp	r3, #1
 8001448:	d102      	bne.n	8001450 <testSDC+0x2c>
	{
		software_error(ERROR_SDC_SPANNUNG);															// Sollte Sicherung kaputt oder Kurzschluss, dann Fehlerausgeben
 800144a:	2003      	movs	r0, #3
 800144c:	f7ff fc00 	bl	8000c50 <software_error>
	}
	HAL_Delay(100);																					// Wartezeit zum setzen
 8001450:	2064      	movs	r0, #100	; 0x64
 8001452:	f001 f9c1 	bl	80027d8 <HAL_Delay>
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, GPIO_PIN_RESET);					// Auschalten von Shutdown-Circuit
 8001456:	2200      	movs	r2, #0
 8001458:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <testSDC+0x44>)
 800145e:	f002 ff99 	bl	8004394 <HAL_GPIO_WritePin>
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40021000 	.word	0x40021000

0800146c <ITM_SendChar>:
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001474:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001478:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b00      	cmp	r3, #0
 8001482:	d013      	beq.n	80014ac <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001484:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001488:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800148c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00b      	beq.n	80014ac <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 8001494:	e000      	b.n	8001498 <ITM_SendChar+0x2c>
      __NOP();
 8001496:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001498:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f9      	beq.n	8001496 <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80014a2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	701a      	strb	r2, [r3, #0]
  return (ch);
 80014ac:	687b      	ldr	r3, [r7, #4]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <readPedals>:
//----------------------------------------------------------------------

// Gaspedal auswerten
//----------------------------------------------------------------------
uint16_t readPedals(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
	// Variablen anlegen
	uint16_t ADC_Gas = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	80fb      	strh	r3, [r7, #6]
	uint8_t tmpBrake = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	717b      	strb	r3, [r7, #5]

#ifdef DEBUG_PEDALE
	ITM_SendString("Zustand von Bremse ausgeben\n");
 80014ca:	4856      	ldr	r0, [pc, #344]	; (8001624 <readPedals+0x168>)
 80014cc:	f7ff fc10 	bl	8000cf0 <ITM_SendString>
	ITM_SendString("Bremse darf nicht bei beiden Eingaengen 1 sein.\n");
 80014d0:	4855      	ldr	r0, [pc, #340]	; (8001628 <readPedals+0x16c>)
 80014d2:	f7ff fc0d 	bl	8000cf0 <ITM_SendString>
	ITM_SendString("BremseNO:\t");
 80014d6:	4855      	ldr	r0, [pc, #340]	; (800162c <readPedals+0x170>)
 80014d8:	f7ff fc0a 	bl	8000cf0 <ITM_SendString>
	ITM_SendNumber(system_in.BremseNO);
 80014dc:	4b54      	ldr	r3, [pc, #336]	; (8001630 <readPedals+0x174>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fc18 	bl	8000d1c <ITM_SendNumber>
	ITM_SendChar('\n');
 80014ec:	200a      	movs	r0, #10
 80014ee:	f7ff ffbd 	bl	800146c <ITM_SendChar>
	ITM_SendString("BremseNC:\t");
 80014f2:	4850      	ldr	r0, [pc, #320]	; (8001634 <readPedals+0x178>)
 80014f4:	f7ff fbfc 	bl	8000cf0 <ITM_SendString>
	ITM_SendNumber(system_in.BremseNC);
 80014f8:	4b4d      	ldr	r3, [pc, #308]	; (8001630 <readPedals+0x174>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001500:	b2db      	uxtb	r3, r3
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fc0a 	bl	8000d1c <ITM_SendNumber>
	ITM_SendChar('\n');
 8001508:	200a      	movs	r0, #10
 800150a:	f7ff ffaf 	bl	800146c <ITM_SendChar>
		// Bremse invalide
		software_error(ERROR_BREMSPEDAL);
	}*/

#ifdef DEBUG_PEDALE
	ITM_SendString("Zustand von Kupplung ausgeben, Kupplung:\t");
 800150e:	484a      	ldr	r0, [pc, #296]	; (8001638 <readPedals+0x17c>)
 8001510:	f7ff fbee 	bl	8000cf0 <ITM_SendString>
	ITM_SendNumber(system_in.Kupplung);
 8001514:	4b46      	ldr	r3, [pc, #280]	; (8001630 <readPedals+0x174>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800151c:	b2db      	uxtb	r3, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fbfc 	bl	8000d1c <ITM_SendNumber>
	ITM_SendChar('\n');
 8001524:	200a      	movs	r0, #10
 8001526:	f7ff ffa1 	bl	800146c <ITM_SendChar>
#endif

	// Kupplung pruefen
	if (system_in.Kupplung == 1)
 800152a:	4b41      	ldr	r3, [pc, #260]	; (8001630 <readPedals+0x174>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	f003 0310 	and.w	r3, r3, #16
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <readPedals+0x84>
	{
		tmpBrake |= 0x02;
 8001538:	797b      	ldrb	r3, [r7, #5]
 800153a:	f043 0302 	orr.w	r3, r3, #2
 800153e:	717b      	strb	r3, [r7, #5]
	}

#ifdef DEBUG_PEDALE
	ITM_SendString("Zustand Pedale ausgeben, tmpBrake:\t");
 8001540:	483e      	ldr	r0, [pc, #248]	; (800163c <readPedals+0x180>)
 8001542:	f7ff fbd5 	bl	8000cf0 <ITM_SendString>
	ITM_SendNumber(tmpBrake);
 8001546:	797b      	ldrb	r3, [r7, #5]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fbe7 	bl	8000d1c <ITM_SendNumber>
	ITM_SendChar('\n');
 800154e:	200a      	movs	r0, #10
 8001550:	f7ff ff8c 	bl	800146c <ITM_SendChar>
#endif

	// Gaspedal einlesen
	ADC_Gas = ADC_Gaspedal();
 8001554:	f7ff fb06 	bl	8000b64 <ADC_Gaspedal>
 8001558:	4603      	mov	r3, r0
 800155a:	80fb      	strh	r3, [r7, #6]

	// Wenn Bremse oder Kupplung nicht getreten ist, Gaspedal auswerten, KL15 muss an sein
	if (tmpBrake == 0 && (system_in.KL15 != 1))
 800155c:	797b      	ldrb	r3, [r7, #5]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d157      	bne.n	8001612 <readPedals+0x156>
 8001562:	4b33      	ldr	r3, [pc, #204]	; (8001630 <readPedals+0x174>)
 8001564:	785b      	ldrb	r3, [r3, #1]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d150      	bne.n	8001612 <readPedals+0x156>
	{
		// Wenn Leerlauf und Kickdown aktiv Plausibilitaetsfehler
		if ((system_in.Leerlauf == 1) && (system_in.Kickdown == 1))
 8001570:	4b2f      	ldr	r3, [pc, #188]	; (8001630 <readPedals+0x174>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00e      	beq.n	800159c <readPedals+0xe0>
 800157e:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <readPedals+0x174>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b00      	cmp	r3, #0
 800158a:	d007      	beq.n	800159c <readPedals+0xe0>
		{
			// Fehlermeldung auf Uart ausgeben
#define TROTTLE_INVALID				"Error_Gaspedal_1 Plausibilitaetsfehler: Kickdown und Leerlauf"
			uartTransmit(TROTTLE_INVALID, sizeof(TROTTLE_INVALID));
 800158c:	213e      	movs	r1, #62	; 0x3e
 800158e:	482c      	ldr	r0, [pc, #176]	; (8001640 <readPedals+0x184>)
 8001590:	f7ff f804 	bl	800059c <uartTransmit>
			// Gaspedal invalide
			software_error(ERROR_GASPEDAL);
 8001594:	2001      	movs	r0, #1
 8001596:	f7ff fb5b 	bl	8000c50 <software_error>
 800159a:	e039      	b.n	8001610 <readPedals+0x154>
		}
		// Threshold Wert vergleichen / Threshold Wert >= THRESHOLD und Leerlauf aktiv
		else if ((system_in.Leerlauf == 1) && (ADC_Gas >= GAS_THRESHOLD))
 800159c:	4b24      	ldr	r3, [pc, #144]	; (8001630 <readPedals+0x174>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d008      	beq.n	80015bc <readPedals+0x100>
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80015b0:	d304      	bcc.n	80015bc <readPedals+0x100>
		{
			// Wenn Wert groesser THRESHOLD ist, dann THRESHOLD vom ADC-Wert abziehen
			ADC_Gas -= GAS_THRESHOLD;
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015b8:	80fb      	strh	r3, [r7, #6]
 80015ba:	e029      	b.n	8001610 <readPedals+0x154>
		}
		// Threshold Wert vergleichen / Threshold Wert < THRESHOLD und Leerlauf aktiv
		else if ((system_in.Leerlauf == 1) && (ADC_Gas < GAS_THRESHOLD))
 80015bc:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <readPedals+0x174>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d006      	beq.n	80015d8 <readPedals+0x11c>
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80015d0:	d202      	bcs.n	80015d8 <readPedals+0x11c>
		{
			// Wenn der Wert kleine als THRESHOLD ist, dann ADC ignorieren, alle Werte sind 0
			ADC_Gas = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	80fb      	strh	r3, [r7, #6]
 80015d6:	e01b      	b.n	8001610 <readPedals+0x154>
		}
		// Threshold Wert vergleichen / Threshold Wert < THRESHOLD und Kickdown aktiv
		else if ((system_in.Kickdown == 1) && (ADC_Gas < (GAS_MAX_ADC - GAS_THRESHOLD)))
 80015d8:	4b15      	ldr	r3, [pc, #84]	; (8001630 <readPedals+0x174>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d004      	beq.n	80015f0 <readPedals+0x134>
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	f640 62d2 	movw	r2, #3794	; 0xed2
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d90f      	bls.n	8001610 <readPedals+0x154>
		{
			// Wenn Wert kleiner THRESHOLD ist

		}
		// Threshold Wert vergleichen / Threshold Wert > THRESHOLD und Kickdown aktiv
		else if ((system_in.Kickdown == 1) && (ADC_Gas >= (GAS_MAX_ADC - GAS_THRESHOLD)))
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <readPedals+0x174>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00c      	beq.n	8001618 <readPedals+0x15c>
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	f640 62d2 	movw	r2, #3794	; 0xed2
 8001604:	4293      	cmp	r3, r2
 8001606:	d907      	bls.n	8001618 <readPedals+0x15c>
		{
			// Wenn Wert gleich THRESHOLD ist
			ADC_Gas = 4095;
 8001608:	f640 73ff 	movw	r3, #4095	; 0xfff
 800160c:	80fb      	strh	r3, [r7, #6]
		if ((system_in.Leerlauf == 1) && (system_in.Kickdown == 1))
 800160e:	e003      	b.n	8001618 <readPedals+0x15c>
 8001610:	e002      	b.n	8001618 <readPedals+0x15c>
	}
	// Wenn tmpBrake != 0
	else
	{
		// Wenn Kupplung oder Bremse getreten
		ADC_Gas = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	80fb      	strh	r3, [r7, #6]
 8001616:	e000      	b.n	800161a <readPedals+0x15e>
		if ((system_in.Leerlauf == 1) && (system_in.Kickdown == 1))
 8001618:	bf00      	nop
	}

	return ADC_Gas;
 800161a:	88fb      	ldrh	r3, [r7, #6]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	08006b74 	.word	0x08006b74
 8001628:	08006b94 	.word	0x08006b94
 800162c:	08006bc8 	.word	0x08006bc8
 8001630:	20000044 	.word	0x20000044
 8001634:	08006bd4 	.word	0x08006bd4
 8001638:	08006be0 	.word	0x08006be0
 800163c:	08006c0c 	.word	0x08006c0c
 8001640:	08006c30 	.word	0x08006c30

08001644 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800164a:	463b      	mov	r3, r7
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001656:	4b64      	ldr	r3, [pc, #400]	; (80017e8 <MX_ADC1_Init+0x1a4>)
 8001658:	4a64      	ldr	r2, [pc, #400]	; (80017ec <MX_ADC1_Init+0x1a8>)
 800165a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800165c:	4b62      	ldr	r3, [pc, #392]	; (80017e8 <MX_ADC1_Init+0x1a4>)
 800165e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001662:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001664:	4b60      	ldr	r3, [pc, #384]	; (80017e8 <MX_ADC1_Init+0x1a4>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800166a:	4b5f      	ldr	r3, [pc, #380]	; (80017e8 <MX_ADC1_Init+0x1a4>)
 800166c:	2201      	movs	r2, #1
 800166e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001670:	4b5d      	ldr	r3, [pc, #372]	; (80017e8 <MX_ADC1_Init+0x1a4>)
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001676:	4b5c      	ldr	r3, [pc, #368]	; (80017e8 <MX_ADC1_Init+0x1a4>)
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800167e:	4b5a      	ldr	r3, [pc, #360]	; (80017e8 <MX_ADC1_Init+0x1a4>)
 8001680:	2200      	movs	r2, #0
 8001682:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001684:	4b58      	ldr	r3, [pc, #352]	; (80017e8 <MX_ADC1_Init+0x1a4>)
 8001686:	4a5a      	ldr	r2, [pc, #360]	; (80017f0 <MX_ADC1_Init+0x1ac>)
 8001688:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800168a:	4b57      	ldr	r3, [pc, #348]	; (80017e8 <MX_ADC1_Init+0x1a4>)
 800168c:	2200      	movs	r2, #0
 800168e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 8001690:	4b55      	ldr	r3, [pc, #340]	; (80017e8 <MX_ADC1_Init+0x1a4>)
 8001692:	220a      	movs	r2, #10
 8001694:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001696:	4b54      	ldr	r3, [pc, #336]	; (80017e8 <MX_ADC1_Init+0x1a4>)
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800169e:	4b52      	ldr	r3, [pc, #328]	; (80017e8 <MX_ADC1_Init+0x1a4>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016a4:	4850      	ldr	r0, [pc, #320]	; (80017e8 <MX_ADC1_Init+0x1a4>)
 80016a6:	f001 f903 	bl	80028b0 <HAL_ADC_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80016b0:	f000 fe4e 	bl	8002350 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80016b4:	230e      	movs	r3, #14
 80016b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016b8:	2301      	movs	r3, #1
 80016ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80016bc:	2301      	movs	r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016c0:	463b      	mov	r3, r7
 80016c2:	4619      	mov	r1, r3
 80016c4:	4848      	ldr	r0, [pc, #288]	; (80017e8 <MX_ADC1_Init+0x1a4>)
 80016c6:	f001 fad1 	bl	8002c6c <HAL_ADC_ConfigChannel>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016d0:	f000 fe3e 	bl	8002350 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80016d4:	2306      	movs	r3, #6
 80016d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80016d8:	2302      	movs	r3, #2
 80016da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016dc:	463b      	mov	r3, r7
 80016de:	4619      	mov	r1, r3
 80016e0:	4841      	ldr	r0, [pc, #260]	; (80017e8 <MX_ADC1_Init+0x1a4>)
 80016e2:	f001 fac3 	bl	8002c6c <HAL_ADC_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80016ec:	f000 fe30 	bl	8002350 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80016f0:	2304      	movs	r3, #4
 80016f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80016f4:	2303      	movs	r3, #3
 80016f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80016f8:	2302      	movs	r3, #2
 80016fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016fc:	463b      	mov	r3, r7
 80016fe:	4619      	mov	r1, r3
 8001700:	4839      	ldr	r0, [pc, #228]	; (80017e8 <MX_ADC1_Init+0x1a4>)
 8001702:	f001 fab3 	bl	8002c6c <HAL_ADC_ConfigChannel>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 800170c:	f000 fe20 	bl	8002350 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001710:	2305      	movs	r3, #5
 8001712:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001714:	2304      	movs	r3, #4
 8001716:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001718:	463b      	mov	r3, r7
 800171a:	4619      	mov	r1, r3
 800171c:	4832      	ldr	r0, [pc, #200]	; (80017e8 <MX_ADC1_Init+0x1a4>)
 800171e:	f001 faa5 	bl	8002c6c <HAL_ADC_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001728:	f000 fe12 	bl	8002350 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800172c:	230f      	movs	r3, #15
 800172e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001730:	2305      	movs	r3, #5
 8001732:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001734:	2301      	movs	r3, #1
 8001736:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001738:	463b      	mov	r3, r7
 800173a:	4619      	mov	r1, r3
 800173c:	482a      	ldr	r0, [pc, #168]	; (80017e8 <MX_ADC1_Init+0x1a4>)
 800173e:	f001 fa95 	bl	8002c6c <HAL_ADC_ConfigChannel>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8001748:	f000 fe02 	bl	8002350 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800174c:	2303      	movs	r3, #3
 800174e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001750:	2306      	movs	r3, #6
 8001752:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001754:	2303      	movs	r3, #3
 8001756:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001758:	463b      	mov	r3, r7
 800175a:	4619      	mov	r1, r3
 800175c:	4822      	ldr	r0, [pc, #136]	; (80017e8 <MX_ADC1_Init+0x1a4>)
 800175e:	f001 fa85 	bl	8002c6c <HAL_ADC_ConfigChannel>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8001768:	f000 fdf2 	bl	8002350 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800176c:	2307      	movs	r3, #7
 800176e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001770:	2307      	movs	r3, #7
 8001772:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001774:	463b      	mov	r3, r7
 8001776:	4619      	mov	r1, r3
 8001778:	481b      	ldr	r0, [pc, #108]	; (80017e8 <MX_ADC1_Init+0x1a4>)
 800177a:	f001 fa77 	bl	8002c6c <HAL_ADC_ConfigChannel>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 8001784:	f000 fde4 	bl	8002350 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <MX_ADC1_Init+0x1b0>)
 800178a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800178c:	2308      	movs	r3, #8
 800178e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001790:	463b      	mov	r3, r7
 8001792:	4619      	mov	r1, r3
 8001794:	4814      	ldr	r0, [pc, #80]	; (80017e8 <MX_ADC1_Init+0x1a4>)
 8001796:	f001 fa69 	bl	8002c6c <HAL_ADC_ConfigChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 80017a0:	f000 fdd6 	bl	8002350 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80017a4:	2308      	movs	r3, #8
 80017a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80017a8:	2309      	movs	r3, #9
 80017aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80017ac:	2301      	movs	r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017b0:	463b      	mov	r3, r7
 80017b2:	4619      	mov	r1, r3
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <MX_ADC1_Init+0x1a4>)
 80017b6:	f001 fa59 	bl	8002c6c <HAL_ADC_ConfigChannel>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_ADC1_Init+0x180>
  {
    Error_Handler();
 80017c0:	f000 fdc6 	bl	8002350 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80017c4:	2309      	movs	r3, #9
 80017c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80017c8:	230a      	movs	r3, #10
 80017ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017cc:	463b      	mov	r3, r7
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_ADC1_Init+0x1a4>)
 80017d2:	f001 fa4b 	bl	8002c6c <HAL_ADC_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_ADC1_Init+0x19c>
  {
    Error_Handler();
 80017dc:	f000 fdb8 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000058 	.word	0x20000058
 80017ec:	40012000 	.word	0x40012000
 80017f0:	0f000001 	.word	0x0f000001
 80017f4:	10000012 	.word	0x10000012

080017f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08c      	sub	sp, #48	; 0x30
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 031c 	add.w	r3, r7, #28
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a2d      	ldr	r2, [pc, #180]	; (80018cc <HAL_ADC_MspInit+0xd4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d153      	bne.n	80018c2 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800181a:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <HAL_ADC_MspInit+0xd8>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	4a2c      	ldr	r2, [pc, #176]	; (80018d0 <HAL_ADC_MspInit+0xd8>)
 8001820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001824:	6453      	str	r3, [r2, #68]	; 0x44
 8001826:	4b2a      	ldr	r3, [pc, #168]	; (80018d0 <HAL_ADC_MspInit+0xd8>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182e:	61bb      	str	r3, [r7, #24]
 8001830:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001832:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <HAL_ADC_MspInit+0xd8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a26      	ldr	r2, [pc, #152]	; (80018d0 <HAL_ADC_MspInit+0xd8>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <HAL_ADC_MspInit+0xd8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800184a:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <HAL_ADC_MspInit+0xd8>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a20      	ldr	r2, [pc, #128]	; (80018d0 <HAL_ADC_MspInit+0xd8>)
 8001850:	f043 0304 	orr.w	r3, r3, #4
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <HAL_ADC_MspInit+0xd8>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <HAL_ADC_MspInit+0xd8>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a1a      	ldr	r2, [pc, #104]	; (80018d0 <HAL_ADC_MspInit+0xd8>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <HAL_ADC_MspInit+0xd8>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SENSE_KL15_Pin|SENSE_KUEHLWASSER_Pin|SENSE_KLIMA_FLAP_Pin|SENSE_GAS_Pin
 800187a:	23f8      	movs	r3, #248	; 0xf8
 800187c:	61fb      	str	r3, [r7, #28]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800187e:	2303      	movs	r3, #3
 8001880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 031c 	add.w	r3, r7, #28
 800188a:	4619      	mov	r1, r3
 800188c:	4811      	ldr	r0, [pc, #68]	; (80018d4 <HAL_ADC_MspInit+0xdc>)
 800188e:	f002 fbbd 	bl	800400c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_DRUCK_Pin|SENSE_DRUCK_TEMP_Pin;
 8001892:	2330      	movs	r3, #48	; 0x30
 8001894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001896:	2303      	movs	r3, #3
 8001898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	4619      	mov	r1, r3
 80018a4:	480c      	ldr	r0, [pc, #48]	; (80018d8 <HAL_ADC_MspInit+0xe0>)
 80018a6:	f002 fbb1 	bl	800400c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_RETURN_Pin|SENSE_INFO_Pin;
 80018aa:	2303      	movs	r3, #3
 80018ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ae:	2303      	movs	r3, #3
 80018b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	4619      	mov	r1, r3
 80018bc:	4807      	ldr	r0, [pc, #28]	; (80018dc <HAL_ADC_MspInit+0xe4>)
 80018be:	f002 fba5 	bl	800400c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80018c2:	bf00      	nop
 80018c4:	3730      	adds	r7, #48	; 0x30
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40012000 	.word	0x40012000
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40020000 	.word	0x40020000
 80018d8:	40020800 	.word	0x40020800
 80018dc:	40020400 	.word	0x40020400

080018e0 <MX_CAN3_Init>:

CAN_HandleTypeDef hcan3;

/* CAN3 init function */
void MX_CAN3_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 80018e4:	4b17      	ldr	r3, [pc, #92]	; (8001944 <MX_CAN3_Init+0x64>)
 80018e6:	4a18      	ldr	r2, [pc, #96]	; (8001948 <MX_CAN3_Init+0x68>)
 80018e8:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 80018ea:	4b16      	ldr	r3, [pc, #88]	; (8001944 <MX_CAN3_Init+0x64>)
 80018ec:	2206      	movs	r2, #6
 80018ee:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 80018f0:	4b14      	ldr	r3, [pc, #80]	; (8001944 <MX_CAN3_Init+0x64>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80018f6:	4b13      	ldr	r3, [pc, #76]	; (8001944 <MX_CAN3_Init+0x64>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <MX_CAN3_Init+0x64>)
 80018fe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001902:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <MX_CAN3_Init+0x64>)
 8001906:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800190a:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 800190c:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <MX_CAN3_Init+0x64>)
 800190e:	2200      	movs	r2, #0
 8001910:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <MX_CAN3_Init+0x64>)
 8001914:	2200      	movs	r2, #0
 8001916:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <MX_CAN3_Init+0x64>)
 800191a:	2200      	movs	r2, #0
 800191c:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <MX_CAN3_Init+0x64>)
 8001920:	2200      	movs	r2, #0
 8001922:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <MX_CAN3_Init+0x64>)
 8001926:	2200      	movs	r2, #0
 8001928:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <MX_CAN3_Init+0x64>)
 800192c:	2200      	movs	r2, #0
 800192e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001930:	4804      	ldr	r0, [pc, #16]	; (8001944 <MX_CAN3_Init+0x64>)
 8001932:	f001 fbeb 	bl	800310c <HAL_CAN_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 800193c:	f000 fd08 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	200000a0 	.word	0x200000a0
 8001948:	40003400 	.word	0x40003400

0800194c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08c      	sub	sp, #48	; 0x30
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 031c 	add.w	r3, r7, #28
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN3)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a27      	ldr	r2, [pc, #156]	; (8001a08 <HAL_CAN_MspInit+0xbc>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d148      	bne.n	8001a00 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN3_MspInit 0 */

  /* USER CODE END CAN3_MspInit 0 */
    /* CAN3 clock enable */
    __HAL_RCC_CAN3_CLK_ENABLE();
 800196e:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <HAL_CAN_MspInit+0xc0>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	4a26      	ldr	r2, [pc, #152]	; (8001a0c <HAL_CAN_MspInit+0xc0>)
 8001974:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001978:	6413      	str	r3, [r2, #64]	; 0x40
 800197a:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <HAL_CAN_MspInit+0xc0>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001982:	61bb      	str	r3, [r7, #24]
 8001984:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001986:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <HAL_CAN_MspInit+0xc0>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	4a20      	ldr	r2, [pc, #128]	; (8001a0c <HAL_CAN_MspInit+0xc0>)
 800198c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001990:	6413      	str	r3, [r2, #64]	; 0x40
 8001992:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <HAL_CAN_MspInit+0xc0>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800199e:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <HAL_CAN_MspInit+0xc0>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	4a1a      	ldr	r2, [pc, #104]	; (8001a0c <HAL_CAN_MspInit+0xc0>)
 80019a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019a8:	6413      	str	r3, [r2, #64]	; 0x40
 80019aa:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <HAL_CAN_MspInit+0xc0>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <HAL_CAN_MspInit+0xc0>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <HAL_CAN_MspInit+0xc0>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_CAN_MspInit+0xc0>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
    /**CAN3 GPIO Configuration
    PA8     ------> CAN3_RX
    PA15     ------> CAN3_TX
    */
    GPIO_InitStruct.Pin = ACAN_RX_Pin|ACAN_TX_Pin;
 80019ce:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80019d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019dc:	2303      	movs	r3, #3
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80019e0:	230b      	movs	r3, #11
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e4:	f107 031c 	add.w	r3, r7, #28
 80019e8:	4619      	mov	r1, r3
 80019ea:	4809      	ldr	r0, [pc, #36]	; (8001a10 <HAL_CAN_MspInit+0xc4>)
 80019ec:	f002 fb0e 	bl	800400c <HAL_GPIO_Init>

    /* CAN3 interrupt Init */
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2100      	movs	r1, #0
 80019f4:	2069      	movs	r0, #105	; 0x69
 80019f6:	f002 fad2 	bl	8003f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 80019fa:	2069      	movs	r0, #105	; 0x69
 80019fc:	f002 faeb 	bl	8003fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001a00:	bf00      	nop
 8001a02:	3730      	adds	r7, #48	; 0x30
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40003400 	.word	0x40003400
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020000 	.word	0x40020000

08001a14 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08e      	sub	sp, #56	; 0x38
 8001a18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a2a:	4bb6      	ldr	r3, [pc, #728]	; (8001d04 <MX_GPIO_Init+0x2f0>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4ab5      	ldr	r2, [pc, #724]	; (8001d04 <MX_GPIO_Init+0x2f0>)
 8001a30:	f043 0310 	orr.w	r3, r3, #16
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4bb3      	ldr	r3, [pc, #716]	; (8001d04 <MX_GPIO_Init+0x2f0>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0310 	and.w	r3, r3, #16
 8001a3e:	623b      	str	r3, [r7, #32]
 8001a40:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a42:	4bb0      	ldr	r3, [pc, #704]	; (8001d04 <MX_GPIO_Init+0x2f0>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4aaf      	ldr	r2, [pc, #700]	; (8001d04 <MX_GPIO_Init+0x2f0>)
 8001a48:	f043 0304 	orr.w	r3, r3, #4
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4bad      	ldr	r3, [pc, #692]	; (8001d04 <MX_GPIO_Init+0x2f0>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	61fb      	str	r3, [r7, #28]
 8001a58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a5a:	4baa      	ldr	r3, [pc, #680]	; (8001d04 <MX_GPIO_Init+0x2f0>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4aa9      	ldr	r2, [pc, #676]	; (8001d04 <MX_GPIO_Init+0x2f0>)
 8001a60:	f043 0320 	orr.w	r3, r3, #32
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4ba7      	ldr	r3, [pc, #668]	; (8001d04 <MX_GPIO_Init+0x2f0>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0320 	and.w	r3, r3, #32
 8001a6e:	61bb      	str	r3, [r7, #24]
 8001a70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a72:	4ba4      	ldr	r3, [pc, #656]	; (8001d04 <MX_GPIO_Init+0x2f0>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4aa3      	ldr	r2, [pc, #652]	; (8001d04 <MX_GPIO_Init+0x2f0>)
 8001a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4ba1      	ldr	r3, [pc, #644]	; (8001d04 <MX_GPIO_Init+0x2f0>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	4b9e      	ldr	r3, [pc, #632]	; (8001d04 <MX_GPIO_Init+0x2f0>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a9d      	ldr	r2, [pc, #628]	; (8001d04 <MX_GPIO_Init+0x2f0>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b9b      	ldr	r3, [pc, #620]	; (8001d04 <MX_GPIO_Init+0x2f0>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	4b98      	ldr	r3, [pc, #608]	; (8001d04 <MX_GPIO_Init+0x2f0>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a97      	ldr	r2, [pc, #604]	; (8001d04 <MX_GPIO_Init+0x2f0>)
 8001aa8:	f043 0302 	orr.w	r3, r3, #2
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b95      	ldr	r3, [pc, #596]	; (8001d04 <MX_GPIO_Init+0x2f0>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aba:	4b92      	ldr	r3, [pc, #584]	; (8001d04 <MX_GPIO_Init+0x2f0>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a91      	ldr	r2, [pc, #580]	; (8001d04 <MX_GPIO_Init+0x2f0>)
 8001ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b8f      	ldr	r3, [pc, #572]	; (8001d04 <MX_GPIO_Init+0x2f0>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad2:	4b8c      	ldr	r3, [pc, #560]	; (8001d04 <MX_GPIO_Init+0x2f0>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a8b      	ldr	r2, [pc, #556]	; (8001d04 <MX_GPIO_Init+0x2f0>)
 8001ad8:	f043 0308 	orr.w	r3, r3, #8
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b89      	ldr	r3, [pc, #548]	; (8001d04 <MX_GPIO_Init+0x2f0>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 8001aea:	2200      	movs	r2, #0
 8001aec:	f248 0187 	movw	r1, #32903	; 0x8087
 8001af0:	4885      	ldr	r0, [pc, #532]	; (8001d08 <MX_GPIO_Init+0x2f4>)
 8001af2:	f002 fc4f 	bl	8004394 <HAL_GPIO_WritePin>
                          |DIGITAL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_ON_Pin|WS2812_Pin, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	f242 0108 	movw	r1, #8200	; 0x2008
 8001afc:	4883      	ldr	r0, [pc, #524]	; (8001d0c <MX_GPIO_Init+0x2f8>)
 8001afe:	f002 fc49 	bl	8004394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 8001b02:	2200      	movs	r2, #0
 8001b04:	f24f 013c 	movw	r1, #61500	; 0xf03c
 8001b08:	4881      	ldr	r0, [pc, #516]	; (8001d10 <MX_GPIO_Init+0x2fc>)
 8001b0a:	f002 fc43 	bl	8004394 <HAL_GPIO_WritePin>
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f647 0194 	movw	r1, #30868	; 0x7894
 8001b14:	487f      	ldr	r0, [pc, #508]	; (8001d14 <MX_GPIO_Init+0x300>)
 8001b16:	f002 fc3d 	bl	8004394 <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f64e 2188 	movw	r1, #60040	; 0xea88
 8001b20:	487d      	ldr	r0, [pc, #500]	; (8001d18 <MX_GPIO_Init+0x304>)
 8001b22:	f002 fc37 	bl	8004394 <HAL_GPIO_WritePin>
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 8001b26:	2200      	movs	r2, #0
 8001b28:	f64e 610c 	movw	r1, #60940	; 0xee0c
 8001b2c:	487b      	ldr	r0, [pc, #492]	; (8001d1c <MX_GPIO_Init+0x308>)
 8001b2e:	f002 fc31 	bl	8004394 <HAL_GPIO_WritePin>
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, GPIO_PIN_RESET);
 8001b32:	2200      	movs	r2, #0
 8001b34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b38:	4879      	ldr	r0, [pc, #484]	; (8001d20 <MX_GPIO_Init+0x30c>)
 8001b3a:	f002 fc2b 	bl	8004394 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 8001b3e:	f248 0387 	movw	r3, #32903	; 0x8087
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
                          |DIGITAL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b44:	2301      	movs	r3, #1
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b54:	4619      	mov	r1, r3
 8001b56:	486c      	ldr	r0, [pc, #432]	; (8001d08 <MX_GPIO_Init+0x2f4>)
 8001b58:	f002 fa58 	bl	800400c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ECO_Pin|BC_DOWN_IN_Pin|DURCHFLUSS_Pin|BUTTON2_Pin
 8001b5c:	f647 7378 	movw	r3, #32632	; 0x7f78
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
                          |KICKDOWN_Pin|LEERLAUF_Pin|KUPPLUNG_NO_Pin|BREMSE_NC_Pin
                          |BREMSE_NO_Pin|SENSE_SDC_AKKU_Pin|SENSE_SDC_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b62:	2300      	movs	r3, #0
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4865      	ldr	r0, [pc, #404]	; (8001d08 <MX_GPIO_Init+0x2f4>)
 8001b72:	f002 fa4b 	bl	800400c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 8001b76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2300      	movs	r3, #0
 8001b86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8001b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	485f      	ldr	r0, [pc, #380]	; (8001d0c <MX_GPIO_Init+0x2f8>)
 8001b90:	f002 fa3c 	bl	800400c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001b94:	f64d 7347 	movw	r3, #57159	; 0xdf47
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|SD_SW_Pin|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4858      	ldr	r0, [pc, #352]	; (8001d0c <MX_GPIO_Init+0x2f8>)
 8001baa:	f002 fa2f 	bl	800400c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|ECON_Pin|RECUPERATION_Pin;
 8001bae:	f640 0303 	movw	r3, #2051	; 0x803
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4853      	ldr	r0, [pc, #332]	; (8001d10 <MX_GPIO_Init+0x2fc>)
 8001bc4:	f002 fa22 	bl	800400c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 8001bc8:	f24f 033c 	movw	r3, #61500	; 0xf03c
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bde:	4619      	mov	r1, r3
 8001be0:	484b      	ldr	r0, [pc, #300]	; (8001d10 <MX_GPIO_Init+0x2fc>)
 8001be2:	f002 fa13 	bl	800400c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PF10 */
  GPIO_InitStruct.Pin = SPI5_CS_Pin|SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin
 8001be6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bec:	2303      	movs	r3, #3
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4845      	ldr	r0, [pc, #276]	; (8001d10 <MX_GPIO_Init+0x2fc>)
 8001bfc:	f002 fa06 	bl	800400c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS2812_Pin;
 8001c00:	2308      	movs	r3, #8
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c04:	2301      	movs	r3, #1
 8001c06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 8001c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c14:	4619      	mov	r1, r3
 8001c16:	483d      	ldr	r0, [pc, #244]	; (8001d0c <MX_GPIO_Init+0x2f8>)
 8001c18:	f002 f9f8 	bl	800400c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|EMERGENCY_RUN_Pin|HW_WAKE_Pin|OUTA_Pin
 8001c1c:	f640 6307 	movw	r3, #3591	; 0xe07
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTB_Pin|BC_UP_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c22:	2300      	movs	r3, #0
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2e:	4619      	mov	r1, r3
 8001c30:	483b      	ldr	r0, [pc, #236]	; (8001d20 <MX_GPIO_Init+0x30c>)
 8001c32:	f002 f9eb 	bl	800400c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 8001c36:	f647 0394 	movw	r3, #30868	; 0x7894
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c44:	2300      	movs	r3, #0
 8001c46:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4831      	ldr	r0, [pc, #196]	; (8001d14 <MX_GPIO_Init+0x300>)
 8001c50:	f002 f9dc 	bl	800400c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DCDC_INSTRUCTION_Pin|DCDC_FAULT_Pin|ASR_IN1_Pin|GRA1_Pin
 8001c54:	f241 13f3 	movw	r3, #4595	; 0x11f3
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
                          |GRA2_Pin|GRA3_Pin|GRA4_Pin|BC_RESET_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c66:	4619      	mov	r1, r3
 8001c68:	482c      	ldr	r0, [pc, #176]	; (8001d1c <MX_GPIO_Init+0x308>)
 8001c6a:	f002 f9cf 	bl	800400c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSE_SDC_BTB_Pin|ANLASSER_Pin;
 8001c6e:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c74:	2300      	movs	r3, #0
 8001c76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c80:	4619      	mov	r1, r3
 8001c82:	4824      	ldr	r0, [pc, #144]	; (8001d14 <MX_GPIO_Init+0x300>)
 8001c84:	f002 f9c2 	bl	800400c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KL15_Pin|BAMOCAR_IN2_Pin|BAMOCAR_IN1_Pin|ASR_IN2_Pin;
 8001c88:	f241 5310 	movw	r3, #5392	; 0x1510
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	481e      	ldr	r0, [pc, #120]	; (8001d18 <MX_GPIO_Init+0x304>)
 8001c9e:	f002 f9b5 	bl	800400c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 8001ca2:	f64e 2388 	movw	r3, #60040	; 0xea88
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4817      	ldr	r0, [pc, #92]	; (8001d18 <MX_GPIO_Init+0x304>)
 8001cbc:	f002 f9a6 	bl	800400c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 8001cc0:	f64e 630c 	movw	r3, #60940	; 0xee0c
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4810      	ldr	r0, [pc, #64]	; (8001d1c <MX_GPIO_Init+0x308>)
 8001cda:	f002 f997 	bl	800400c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 8001cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4806      	ldr	r0, [pc, #24]	; (8001d0c <MX_GPIO_Init+0x2f8>)
 8001cf2:	f002 f98b 	bl	800400c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RUECKWARNUNG_Pin;
 8001cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	e00f      	b.n	8001d24 <MX_GPIO_Init+0x310>
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40020800 	.word	0x40020800
 8001d10:	40021400 	.word	0x40021400
 8001d14:	40020400 	.word	0x40020400
 8001d18:	40020c00 	.word	0x40020c00
 8001d1c:	40021800 	.word	0x40021800
 8001d20:	40020000 	.word	0x40020000
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RUECKWARNUNG_GPIO_Port, &GPIO_InitStruct);
 8001d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2e:	4619      	mov	r1, r3
 8001d30:	480f      	ldr	r0, [pc, #60]	; (8001d70 <MX_GPIO_Init+0x35c>)
 8001d32:	f002 f96b 	bl	800400c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_TX_Pin|CAN1_RX_Pin|SD_CMD_Pin;
 8001d36:	2307      	movs	r3, #7
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d46:	4619      	mov	r1, r3
 8001d48:	480a      	ldr	r0, [pc, #40]	; (8001d74 <MX_GPIO_Init+0x360>)
 8001d4a:	f002 f95f 	bl	800400c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CAN2_TX_Pin|CAN2_RX_Pin|I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001d4e:	f44f 7358 	mov.w	r3, #864	; 0x360
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d54:	2303      	movs	r3, #3
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d60:	4619      	mov	r1, r3
 8001d62:	4805      	ldr	r0, [pc, #20]	; (8001d78 <MX_GPIO_Init+0x364>)
 8001d64:	f002 f952 	bl	800400c <HAL_GPIO_Init>

}
 8001d68:	bf00      	nop
 8001d6a:	3738      	adds	r7, #56	; 0x38
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40020000 	.word	0x40020000
 8001d74:	40020c00 	.word	0x40020c00
 8001d78:	40020400 	.word	0x40020400

08001d7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d7c:	b5b0      	push	{r4, r5, r7, lr}
 8001d7e:	b0ae      	sub	sp, #184	; 0xb8
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d82:	f000 fccc 	bl	800271e <HAL_Init>

  /* USER CODE BEGIN Init */

	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[5], InData[5], status, task_start;
	uint16_t count = 0, adc_gas;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
	uint32_t lastcan = 0, lastsendcan = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001d92:	2300      	movs	r3, #0
 8001d94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	CAN_FilterTypeDef sFilterConfig;

  	// Erstelle Can-Nachrichten
    // Sendenachricht erstellen
	CAN_TxHeaderTypeDef TxMessage = {0x123, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8001d98:	4bcf      	ldr	r3, [pc, #828]	; (80020d8 <main+0x35c>)
 8001d9a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001d9e:	461d      	mov	r5, r3
 8001da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001da4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001da8:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet digitale Ausgaenge erstellen
	CAN_TxHeaderTypeDef TxOutput = {MOTOR_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 5, DISABLE};
 8001dac:	4bcb      	ldr	r3, [pc, #812]	; (80020dc <main+0x360>)
 8001dae:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001db2:	461d      	mov	r5, r3
 8001db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001dbc:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet digitale Eingaenge erstellen
	CAN_TxHeaderTypeDef TxInput = {MOTOR_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 5, DISABLE};
 8001dc0:	4bc7      	ldr	r3, [pc, #796]	; (80020e0 <main+0x364>)
 8001dc2:	f107 041c 	add.w	r4, r7, #28
 8001dc6:	461d      	mov	r5, r3
 8001dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dcc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001dd0:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet Motor1 erstellen
	CAN_TxHeaderTypeDef TxMotor1 = {MOTOR_CAN_DREHZAHL, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8001dd4:	4bc3      	ldr	r3, [pc, #780]	; (80020e4 <main+0x368>)
 8001dd6:	1d3c      	adds	r4, r7, #4
 8001dd8:	461d      	mov	r5, r3
 8001dda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ddc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dde:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001de2:	e884 0003 	stmia.w	r4, {r0, r1}

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001de6:	f000 fa15 	bl	8002214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dea:	f7ff fe13 	bl	8001a14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001dee:	f000 fbdf 	bl	80025b0 <MX_USART2_UART_Init>
  MX_CAN3_Init();
 8001df2:	f7ff fd75 	bl	80018e0 <MX_CAN3_Init>
  MX_ADC1_Init();
 8001df6:	f7ff fc25 	bl	8001644 <MX_ADC1_Init>
  MX_TIM14_Init();
 8001dfa:	f000 fb73 	bl	80024e4 <MX_TIM14_Init>
  MX_TIM6_Init();
 8001dfe:	f000 fb3b 	bl	8002478 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  	// Schreibe Resetquelle auf die Konsole
#ifdef DEBUG
	printResetSource(readResetSource());
 8001e02:	f7fe fdc5 	bl	8000990 <readResetSource>
 8001e06:	4603      	mov	r3, r0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fe13 	bl	8000a34 <printResetSource>

  	// Teste serielle Schnittstelle
  	#define TEST_STRING_UART	"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
  	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 8001e0e:	213a      	movs	r1, #58	; 0x3a
 8001e10:	48b5      	ldr	r0, [pc, #724]	; (80020e8 <main+0x36c>)
 8001e12:	f7fe fbc3 	bl	800059c <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 8001e16:	f7fe fd91 	bl	800093c <collectSystemInfo>
#endif

	// Leds Testen
  	testPCB_Leds();
 8001e1a:	f7ff fa2b 	bl	8001274 <testPCB_Leds>
	testCockpit_Leds();
 8001e1e:	f7ff fa67 	bl	80012f0 <testCockpit_Leds>

  	// Testen der Versorgungsspannung am Shutdown-Circuit
  	testSDC();
 8001e22:	f7ff faff 	bl	8001424 <testSDC>
  	sdc_in.SDC12V = 1;																	// SDC Spannungsversorgung OK
 8001e26:	4ab1      	ldr	r2, [pc, #708]	; (80020ec <main+0x370>)
 8001e28:	7813      	ldrb	r3, [r2, #0]
 8001e2a:	f043 0320 	orr.w	r3, r3, #32
 8001e2e:	7013      	strb	r3, [r2, #0]

  	// Alle Fehler Cockpit loeschen
  	cockpit_default();
 8001e30:	f7ff fabe 	bl	80013b0 <cockpit_default>

  	// Lese alle Eingaenge
  	readall_inputs();
 8001e34:	f7fe ffe8 	bl	8000e08 <readall_inputs>

  	// Starte CAN Bus
  	if((status = HAL_CAN_Start(&hcan3)) != HAL_OK)
 8001e38:	48ad      	ldr	r0, [pc, #692]	; (80020f0 <main+0x374>)
 8001e3a:	f001 fb4f 	bl	80034dc <HAL_CAN_Start>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
 8001e44:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d006      	beq.n	8001e5a <main+0xde>
  	{
  		/* Start Error */
  		hal_error(status);
 8001e4c:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fef2 	bl	8000c3a <hal_error>
  		Error_Handler();
 8001e56:	f000 fa7b 	bl	8002350 <Error_Handler>
  	}
  	uartTransmit("CAN START\n", 10);
 8001e5a:	210a      	movs	r1, #10
 8001e5c:	48a5      	ldr	r0, [pc, #660]	; (80020f4 <main+0x378>)
 8001e5e:	f7fe fb9d 	bl	800059c <uartTransmit>

  	// Aktiviere Interrupts für CAN Bus
  	if((status = HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING)) != HAL_OK)
 8001e62:	2102      	movs	r1, #2
 8001e64:	48a2      	ldr	r0, [pc, #648]	; (80020f0 <main+0x374>)
 8001e66:	f001 fd6a 	bl	800393e <HAL_CAN_ActivateNotification>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
 8001e70:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d006      	beq.n	8001e86 <main+0x10a>
  	{
  		// Notification Error
  		hal_error(status);
 8001e78:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fedc 	bl	8000c3a <hal_error>
  		Error_Handler();
 8001e82:	f000 fa65 	bl	8002350 <Error_Handler>
  	}
  	uartTransmit("Send Message\n", 13);
 8001e86:	210d      	movs	r1, #13
 8001e88:	489b      	ldr	r0, [pc, #620]	; (80020f8 <main+0x37c>)
 8001e8a:	f7fe fb87 	bl	800059c <uartTransmit>

  	// Filter Bank initialisieren um Daten zu empfangen
    sFilterConfig.FilterBank = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	67bb      	str	r3, [r7, #120]	; 0x78
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	67fb      	str	r3, [r7, #124]	; 0x7c
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001e96:	2301      	movs	r3, #1
 8001e98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    sFilterConfig.FilterIdHigh = 0x0111 << 5;
 8001e9c:	f242 2320 	movw	r3, #8736	; 0x2220
 8001ea0:	667b      	str	r3, [r7, #100]	; 0x64
    sFilterConfig.FilterIdLow = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	66bb      	str	r3, [r7, #104]	; 0x68
    sFilterConfig.FilterMaskIdHigh = 0x111 << 5;
 8001ea6:	f242 2320 	movw	r3, #8736	; 0x2220
 8001eaa:	66fb      	str	r3, [r7, #108]	; 0x6c
    sFilterConfig.FilterMaskIdLow = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	673b      	str	r3, [r7, #112]	; 0x70
    sFilterConfig.FilterFIFOAssignment = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	677b      	str	r3, [r7, #116]	; 0x74
    sFilterConfig.FilterActivation = ENABLE;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    // Filter Bank schreiben
    if((status = HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 8001eba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	488b      	ldr	r0, [pc, #556]	; (80020f0 <main+0x374>)
 8001ec2:	f001 fa1f 	bl	8003304 <HAL_CAN_ConfigFilter>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
 8001ecc:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d006      	beq.n	8001ee2 <main+0x166>
    {
    	// Filter configuration Error
  		hal_error(status);
 8001ed4:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe feae 	bl	8000c3a <hal_error>
  		Error_Handler();
 8001ede:	f000 fa37 	bl	8002350 <Error_Handler>
    }

    // Sendenachricht 0x123 mit Dummy-Daten füllen
  	for (uint8_t j = 0; j < 8; j++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8001ee8:	e00f      	b.n	8001f0a <main+0x18e>
  		TxData[j] = (j + 1);
 8001eea:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8001eee:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8001ef2:	3201      	adds	r2, #1
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8001efa:	440b      	add	r3, r1
 8001efc:	f803 2c1c 	strb.w	r2, [r3, #-28]
  	for (uint8_t j = 0; j < 8; j++)
 8001f00:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8001f04:	3301      	adds	r3, #1
 8001f06:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8001f0a:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8001f0e:	2b07      	cmp	r3, #7
 8001f10:	d9eb      	bls.n	8001eea <main+0x16e>

	// Start Timer 6 mit Interrupt
	HAL_TIM_Base_Start_IT(&htim6);
 8001f12:	487a      	ldr	r0, [pc, #488]	; (80020fc <main+0x380>)
 8001f14:	f003 fbac 	bl	8005670 <HAL_TIM_Base_Start_IT>

  	uartTransmit("\nStarte While\n\n", 15);
 8001f18:	210f      	movs	r1, #15
 8001f1a:	4879      	ldr	r0, [pc, #484]	; (8002100 <main+0x384>)
 8001f1c:	f7fe fb3e 	bl	800059c <uartTransmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 8001f20:	4b78      	ldr	r3, [pc, #480]	; (8002104 <main+0x388>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d10a      	bne.n	8001f40 <main+0x1c4>
		{
			count++;																	// Zaehler count hochzaehlen
 8001f2a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8001f2e:	3301      	adds	r3, #1
 8001f30:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
			millisekunden_flag_1 = 0;													// Setze Millisekunden-Flag zurueck
 8001f34:	4b73      	ldr	r3, [pc, #460]	; (8002104 <main+0x388>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]

			// Setze Flag start, nur wenn millisekunden Flag gesetzt war
			task_start = 1;																// alle Task einmal ausfuehren
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		}

		// PWM Oelstandsensor Kombiinstrument ausgeben
		pwm_oelstand(count);
 8001f40:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fa01 	bl	800134c <pwm_oelstand>

		// Task wird alle 20 Millisekunden ausgefuehrt
		if (((count % 20) == 0) && (task_start == 1))
 8001f4a:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8001f4e:	4b6e      	ldr	r3, [pc, #440]	; (8002108 <main+0x38c>)
 8001f50:	fba3 1302 	umull	r1, r3, r3, r2
 8001f54:	0919      	lsrs	r1, r3, #4
 8001f56:	460b      	mov	r3, r1
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d111      	bne.n	8001f8a <main+0x20e>
 8001f66:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d10d      	bne.n	8001f8a <main+0x20e>
		{
			// Sende Nachricht Motor1
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMotor1, motor1.output, (uint32_t *)CAN_TX_MAILBOX0);
 8001f6e:	1d39      	adds	r1, r7, #4
 8001f70:	2301      	movs	r3, #1
 8001f72:	4a66      	ldr	r2, [pc, #408]	; (800210c <main+0x390>)
 8001f74:	485e      	ldr	r0, [pc, #376]	; (80020f0 <main+0x374>)
 8001f76:	f001 faf5 	bl	8003564 <HAL_CAN_AddTxMessage>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			hal_error(status);
 8001f80:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fe58 	bl	8000c3a <hal_error>
		}

		// Task wird alle 100 Millisekunden ausgefuehrt
		if (((count % 100) == 0) && (task_start == 1))
 8001f8a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8001f8e:	4a60      	ldr	r2, [pc, #384]	; (8002110 <main+0x394>)
 8001f90:	fba2 1203 	umull	r1, r2, r2, r3
 8001f94:	0952      	lsrs	r2, r2, #5
 8001f96:	2164      	movs	r1, #100	; 0x64
 8001f98:	fb01 f202 	mul.w	r2, r1, r2
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10a      	bne.n	8001fba <main+0x23e>
 8001fa4:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d106      	bne.n	8001fba <main+0x23e>
		{
			// alle Inputs einlesen
			readall_inputs();
 8001fac:	f7fe ff2c 	bl	8000e08 <readall_inputs>

			// Pedale pruefen, ADC-Gaspedal ausgeben
			adc_gas = readPedals();
 8001fb0:	f7ff fa84 	bl	80014bc <readPedals>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
		}

		// Task wird alle 200 Millisekunden ausgefuehrt
		if (((count % 200) == 0) && (task_start == 1))
 8001fba:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8001fbe:	4a54      	ldr	r2, [pc, #336]	; (8002110 <main+0x394>)
 8001fc0:	fba2 1203 	umull	r1, r2, r2, r3
 8001fc4:	0992      	lsrs	r2, r2, #6
 8001fc6:	21c8      	movs	r1, #200	; 0xc8
 8001fc8:	fb01 f202 	mul.w	r2, r1, r2
 8001fcc:	1a9b      	subs	r3, r3, r2
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d157      	bne.n	8002084 <main+0x308>
 8001fd4:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d153      	bne.n	8002084 <main+0x308>
		{
			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 8001fdc:	4b4d      	ldr	r3, [pc, #308]	; (8002114 <main+0x398>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			OutData[1] = highcurrent_out.high_out;
 8001fe4:	4b4c      	ldr	r3, [pc, #304]	; (8002118 <main+0x39c>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
			OutData[2] = (leuchten_out.ledoutput >> 8);
 8001fec:	4b4b      	ldr	r3, [pc, #300]	; (800211c <main+0x3a0>)
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			OutData[3] = leuchten_out.ledoutput;
 8001ffa:	4b48      	ldr	r3, [pc, #288]	; (800211c <main+0x3a0>)
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			OutData[4] = komfort_out.komfortoutput;
 8002004:	4b46      	ldr	r3, [pc, #280]	; (8002120 <main+0x3a4>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98

			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX1);
 800200c:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8002010:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002014:	2302      	movs	r3, #2
 8002016:	4836      	ldr	r0, [pc, #216]	; (80020f0 <main+0x374>)
 8002018:	f001 faa4 	bl	8003564 <HAL_CAN_AddTxMessage>
 800201c:	4603      	mov	r3, r0
 800201e:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			hal_error(status);
 8002022:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fe07 	bl	8000c3a <hal_error>

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] = (system_in.systeminput >> 8);
 800202c:	4b3d      	ldr	r3, [pc, #244]	; (8002124 <main+0x3a8>)
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	0a1b      	lsrs	r3, r3, #8
 8002032:	b29b      	uxth	r3, r3
 8002034:	b2db      	uxtb	r3, r3
 8002036:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			InData[1] = system_in.systeminput;
 800203a:	4b3a      	ldr	r3, [pc, #232]	; (8002124 <main+0x3a8>)
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
			InData[2] = sdc_in.sdcinput;
 8002044:	4b29      	ldr	r3, [pc, #164]	; (80020ec <main+0x370>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			InData[3] = (komfort_in.komfortinput >> 8);
 800204c:	4b36      	ldr	r3, [pc, #216]	; (8002128 <main+0x3ac>)
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	b29b      	uxth	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			InData[4] = komfort_in.komfortinput;
 800205a:	4b33      	ldr	r3, [pc, #204]	; (8002128 <main+0x3ac>)
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	b2db      	uxtb	r3, r3
 8002060:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90

			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX2);
 8002064:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002068:	f107 011c 	add.w	r1, r7, #28
 800206c:	2304      	movs	r3, #4
 800206e:	4820      	ldr	r0, [pc, #128]	; (80020f0 <main+0x374>)
 8002070:	f001 fa78 	bl	8003564 <HAL_CAN_AddTxMessage>
 8002074:	4603      	mov	r3, r0
 8002076:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			hal_error(status);
 800207a:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe fddb 	bl	8000c3a <hal_error>
		}

		// Task wird alle 400 Millisekunden ausgefuehrt
		if ((count == 400) && (task_start == 1))
 8002084:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8002088:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800208c:	d106      	bne.n	800209c <main+0x320>
 800208e:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8002092:	2b01      	cmp	r3, #1
 8002094:	d102      	bne.n	800209c <main+0x320>
		{
			count = 0;																	// Zaehler count zuruecksetzen
 8002096:	2300      	movs	r3, #0
 8002098:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
		}

		// Zuruecksetzen Flag start
		task_start = 0;																	// Verhindern das Task mehrfach in einer Millisekunde ausgefuehrt werden
 800209c:	2300      	movs	r3, #0
 800209e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

	  	// Task wird alle 5 Millisekunden ausgefuehrt
	  	if (millis() - lastcan >= 5)
 80020a2:	f7ff f8df 	bl	8001264 <millis>
 80020a6:	4602      	mov	r2, r0
 80020a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	f240 8080 	bls.w	80021b4 <main+0x438>
		{
			// Wenn Nachricht ueber den CAN-Bus empfangen wurden
			if (can_change == 1)
 80020b4:	4b1d      	ldr	r3, [pc, #116]	; (800212c <main+0x3b0>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d17b      	bne.n	80021b4 <main+0x438>
			{
				// Nachricht ID ueber UART ausgeben
				uartTransmitNumber(RxMessage.StdId, 16);
 80020bc:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <main+0x3b4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2110      	movs	r1, #16
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fa7e 	bl	80005c4 <uartTransmitNumber>
				uartTransmit("\t", 1);
 80020c8:	2101      	movs	r1, #1
 80020ca:	481a      	ldr	r0, [pc, #104]	; (8002134 <main+0x3b8>)
 80020cc:	f7fe fa66 	bl	800059c <uartTransmit>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
 80020d6:	e03c      	b.n	8002152 <main+0x3d6>
 80020d8:	08006d14 	.word	0x08006d14
 80020dc:	08006d2c 	.word	0x08006d2c
 80020e0:	08006d44 	.word	0x08006d44
 80020e4:	08006d5c 	.word	0x08006d5c
 80020e8:	08006c70 	.word	0x08006c70
 80020ec:	20000054 	.word	0x20000054
 80020f0:	200000a0 	.word	0x200000a0
 80020f4:	08006cac 	.word	0x08006cac
 80020f8:	08006cb8 	.word	0x08006cb8
 80020fc:	200000ec 	.word	0x200000ec
 8002100:	08006cc8 	.word	0x08006cc8
 8002104:	20000029 	.word	0x20000029
 8002108:	cccccccd 	.word	0xcccccccd
 800210c:	20000034 	.word	0x20000034
 8002110:	51eb851f 	.word	0x51eb851f
 8002114:	20000040 	.word	0x20000040
 8002118:	20000048 	.word	0x20000048
 800211c:	20000050 	.word	0x20000050
 8002120:	2000003c 	.word	0x2000003c
 8002124:	20000044 	.word	0x20000044
 8002128:	2000004c 	.word	0x2000004c
 800212c:	20000028 	.word	0x20000028
 8002130:	200000d0 	.word	0x200000d0
 8002134:	08006cd8 	.word	0x08006cd8
				{
					uartTransmitNumber(RxData[i], 16);
 8002138:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 800213c:	4a2d      	ldr	r2, [pc, #180]	; (80021f4 <main+0x478>)
 800213e:	5cd3      	ldrb	r3, [r2, r3]
 8002140:	2110      	movs	r1, #16
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fa3e 	bl	80005c4 <uartTransmitNumber>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 8002148:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 800214c:	3301      	adds	r3, #1
 800214e:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
 8002152:	f897 20aa 	ldrb.w	r2, [r7, #170]	; 0xaa
 8002156:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <main+0x47c>)
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	429a      	cmp	r2, r3
 800215c:	d3ec      	bcc.n	8002138 <main+0x3bc>
				}
				uartTransmit("\n", 1);
 800215e:	2101      	movs	r1, #1
 8002160:	4826      	ldr	r0, [pc, #152]	; (80021fc <main+0x480>)
 8002162:	f7fe fa1b 	bl	800059c <uartTransmit>

				// Sortieren der IDs nach Geräten
				switch (RxMessage.StdId)
 8002166:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <main+0x47c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f240 1211 	movw	r2, #273	; 0x111
 800216e:	4293      	cmp	r3, r2
 8002170:	d007      	beq.n	8002182 <main+0x406>
 8002172:	f240 1281 	movw	r2, #385	; 0x181
 8002176:	4293      	cmp	r3, r2
 8002178:	d108      	bne.n	800218c <main+0x410>
				{
					case BAMOCAR_RX_ID:
						BAMOCAN_ID(&RxData[0]);
 800217a:	481e      	ldr	r0, [pc, #120]	; (80021f4 <main+0x478>)
 800217c:	f7fe f9e0 	bl	8000540 <BAMOCAN_ID>
						break;
 8002180:	e009      	b.n	8002196 <main+0x41a>
					case 0x111:
						uartTransmit("CAN-ID Computer config\n", 23);
 8002182:	2117      	movs	r1, #23
 8002184:	481e      	ldr	r0, [pc, #120]	; (8002200 <main+0x484>)
 8002186:	f7fe fa09 	bl	800059c <uartTransmit>
						break;
 800218a:	e004      	b.n	8002196 <main+0x41a>
					default:
						uartTransmit("CAN-ID nicht verfuegbar\n", 24);
 800218c:	2118      	movs	r1, #24
 800218e:	481d      	ldr	r0, [pc, #116]	; (8002204 <main+0x488>)
 8002190:	f7fe fa04 	bl	800059c <uartTransmit>
						break;
 8002194:	bf00      	nop
				}

				// Drehzahl ausgeben
				TxData[2] = motor1.output[2];
 8002196:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <main+0x48c>)
 8002198:	789b      	ldrb	r3, [r3, #2]
 800219a:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
				TxData[3] = motor1.output[3];
 800219e:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <main+0x48c>)
 80021a0:	78db      	ldrb	r3, [r3, #3]
 80021a2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				lastcan = millis();
 80021a6:	f7ff f85d 	bl	8001264 <millis>
 80021aa:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
				can_change = 0;
 80021ae:	4b17      	ldr	r3, [pc, #92]	; (800220c <main+0x490>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
			}
		}

		// Sende CAN Nachricht auf CAN-Bus
		if (millis() - lastsendcan >= 1000)
 80021b4:	f7ff f856 	bl	8001264 <millis>
 80021b8:	4602      	mov	r2, r0
 80021ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021c4:	f4ff aeac 	bcc.w	8001f20 <main+0x1a4>
		{
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 80021c8:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80021cc:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80021d0:	2301      	movs	r3, #1
 80021d2:	480f      	ldr	r0, [pc, #60]	; (8002210 <main+0x494>)
 80021d4:	f001 f9c6 	bl	8003564 <HAL_CAN_AddTxMessage>
 80021d8:	4603      	mov	r3, r0
 80021da:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			hal_error(status);
 80021de:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe fd29 	bl	8000c3a <hal_error>
			lastsendcan = millis();
 80021e8:	f7ff f83c 	bl	8001264 <millis>
 80021ec:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
		if (millisekunden_flag_1 == 1)
 80021f0:	e696      	b.n	8001f20 <main+0x1a4>
 80021f2:	bf00      	nop
 80021f4:	200000c8 	.word	0x200000c8
 80021f8:	200000d0 	.word	0x200000d0
 80021fc:	08006cdc 	.word	0x08006cdc
 8002200:	08006ce0 	.word	0x08006ce0
 8002204:	08006cf8 	.word	0x08006cf8
 8002208:	20000034 	.word	0x20000034
 800220c:	20000028 	.word	0x20000028
 8002210:	200000a0 	.word	0x200000a0

08002214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b094      	sub	sp, #80	; 0x50
 8002218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800221a:	f107 031c 	add.w	r3, r7, #28
 800221e:	2234      	movs	r2, #52	; 0x34
 8002220:	2100      	movs	r1, #0
 8002222:	4618      	mov	r0, r3
 8002224:	f004 fa48 	bl	80066b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002228:	f107 0308 	add.w	r3, r7, #8
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002238:	4b2c      	ldr	r3, [pc, #176]	; (80022ec <SystemClock_Config+0xd8>)
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	4a2b      	ldr	r2, [pc, #172]	; (80022ec <SystemClock_Config+0xd8>)
 800223e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002242:	6413      	str	r3, [r2, #64]	; 0x40
 8002244:	4b29      	ldr	r3, [pc, #164]	; (80022ec <SystemClock_Config+0xd8>)
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002250:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <SystemClock_Config+0xdc>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a26      	ldr	r2, [pc, #152]	; (80022f0 <SystemClock_Config+0xdc>)
 8002256:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <SystemClock_Config+0xdc>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002268:	2301      	movs	r3, #1
 800226a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800226c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002270:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002272:	2302      	movs	r3, #2
 8002274:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002276:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800227a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 800227c:	2319      	movs	r3, #25
 800227e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002280:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002284:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002286:	2302      	movs	r3, #2
 8002288:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800228a:	2302      	movs	r3, #2
 800228c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800228e:	2302      	movs	r3, #2
 8002290:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002292:	f107 031c 	add.w	r3, r7, #28
 8002296:	4618      	mov	r0, r3
 8002298:	f002 f8e6 	bl	8004468 <HAL_RCC_OscConfig>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80022a2:	f000 f855 	bl	8002350 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80022a6:	f002 f88f 	bl	80043c8 <HAL_PWREx_EnableOverDrive>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80022b0:	f000 f84e 	bl	8002350 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022b4:	230f      	movs	r3, #15
 80022b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022b8:	2302      	movs	r3, #2
 80022ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022bc:	2300      	movs	r3, #0
 80022be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80022cc:	f107 0308 	add.w	r3, r7, #8
 80022d0:	2107      	movs	r1, #7
 80022d2:	4618      	mov	r0, r3
 80022d4:	f002 fb76 	bl	80049c4 <HAL_RCC_ClockConfig>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80022de:	f000 f837 	bl	8002350 <Error_Handler>
  }
}
 80022e2:	bf00      	nop
 80022e4:	3750      	adds	r7, #80	; 0x50
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40007000 	.word	0x40007000

080022f4 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
// Interrupts
// Can-Interrupt: Nachricht wartet
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80022fe:	4a07      	ldr	r2, [pc, #28]	; (800231c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8002300:	2100      	movs	r1, #0
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f001 fa09 	bl	800371a <HAL_CAN_GetRxMessage>
	can_change = 1;
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800230a:	2201      	movs	r2, #1
 800230c:	701a      	strb	r2, [r3, #0]
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200000c8 	.word	0x200000c8
 800231c:	200000d0 	.word	0x200000d0
 8002320:	20000028 	.word	0x20000028

08002324 <HAL_TIM_PeriodElapsedCallback>:

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)																	// Wenn Timer 6 den ueberlauf ausgeloest hat
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a06      	ldr	r2, [pc, #24]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d102      	bne.n	800233a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;														// Setze Millisekunden Flag
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002336:	2201      	movs	r2, #1
 8002338:	701a      	strb	r2, [r3, #0]
	}
	if (htim == &htim14)																// Wenn Timer 14 den ueberlauf ausgeloest hat
	{

	}
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	200000ec 	.word	0x200000ec
 800234c:	20000029 	.word	0x20000029

08002350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002354:	b672      	cpsid	i
}
 8002356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8002358:	2201      	movs	r2, #1
 800235a:	2104      	movs	r1, #4
 800235c:	4803      	ldr	r0, [pc, #12]	; (800236c <Error_Handler+0x1c>)
 800235e:	f002 f819 	bl	8004394 <HAL_GPIO_WritePin>
#ifdef DEBUG
#define ERRORMESSAGE			"\nError Handler ausgeloest\n"
  uartTransmit(ERRORMESSAGE,sizeof(ERRORMESSAGE));
 8002362:	211b      	movs	r1, #27
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <Error_Handler+0x20>)
 8002366:	f7fe f919 	bl	800059c <uartTransmit>
#endif
  while (1)
 800236a:	e7fe      	b.n	800236a <Error_Handler+0x1a>
 800236c:	40020400 	.word	0x40020400
 8002370:	08006d74 	.word	0x08006d74

08002374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <HAL_MspInit+0x44>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	4a0e      	ldr	r2, [pc, #56]	; (80023b8 <HAL_MspInit+0x44>)
 8002380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002384:	6413      	str	r3, [r2, #64]	; 0x40
 8002386:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <HAL_MspInit+0x44>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238e:	607b      	str	r3, [r7, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <HAL_MspInit+0x44>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <HAL_MspInit+0x44>)
 8002398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800239c:	6453      	str	r3, [r2, #68]	; 0x44
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_MspInit+0x44>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40023800 	.word	0x40023800

080023bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <NMI_Handler+0x4>

080023c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c6:	e7fe      	b.n	80023c6 <HardFault_Handler+0x4>

080023c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023cc:	e7fe      	b.n	80023cc <MemManage_Handler+0x4>

080023ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023d2:	e7fe      	b.n	80023d2 <BusFault_Handler+0x4>

080023d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d8:	e7fe      	b.n	80023d8 <UsageFault_Handler+0x4>

080023da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002408:	f000 f9c6 	bl	8002798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800240c:	bf00      	nop
 800240e:	bd80      	pop	{r7, pc}

08002410 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002414:	4802      	ldr	r0, [pc, #8]	; (8002420 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002416:	f003 f9a3 	bl	8005760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000138 	.word	0x20000138

08002424 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002428:	4802      	ldr	r0, [pc, #8]	; (8002434 <TIM6_DAC_IRQHandler+0x10>)
 800242a:	f003 f999 	bl	8005760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200000ec 	.word	0x200000ec

08002438 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <CAN3_RX0_IRQHandler+0x10>)
 800243e:	f001 faa4 	bl	800398a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	200000a0 	.word	0x200000a0

0800244c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <SystemInit+0x28>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	4a07      	ldr	r2, [pc, #28]	; (8002474 <SystemInit+0x28>)
 8002458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800245c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002460:	4b04      	ldr	r3, [pc, #16]	; (8002474 <SystemInit+0x28>)
 8002462:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002466:	609a      	str	r2, [r3, #8]
#endif
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim14;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800247e:	1d3b      	adds	r3, r7, #4
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002488:	4b14      	ldr	r3, [pc, #80]	; (80024dc <MX_TIM6_Init+0x64>)
 800248a:	4a15      	ldr	r2, [pc, #84]	; (80024e0 <MX_TIM6_Init+0x68>)
 800248c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27-1;
 800248e:	4b13      	ldr	r3, [pc, #76]	; (80024dc <MX_TIM6_Init+0x64>)
 8002490:	221a      	movs	r2, #26
 8002492:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002494:	4b11      	ldr	r3, [pc, #68]	; (80024dc <MX_TIM6_Init+0x64>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000-1;
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <MX_TIM6_Init+0x64>)
 800249c:	f640 729f 	movw	r2, #3999	; 0xf9f
 80024a0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a2:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <MX_TIM6_Init+0x64>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80024a8:	480c      	ldr	r0, [pc, #48]	; (80024dc <MX_TIM6_Init+0x64>)
 80024aa:	f003 f889 	bl	80055c0 <HAL_TIM_Base_Init>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80024b4:	f7ff ff4c 	bl	8002350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b8:	2300      	movs	r3, #0
 80024ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80024c0:	1d3b      	adds	r3, r7, #4
 80024c2:	4619      	mov	r1, r3
 80024c4:	4805      	ldr	r0, [pc, #20]	; (80024dc <MX_TIM6_Init+0x64>)
 80024c6:	f003 fb33 	bl	8005b30 <HAL_TIMEx_MasterConfigSynchronization>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80024d0:	f7ff ff3e 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80024d4:	bf00      	nop
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	200000ec 	.word	0x200000ec
 80024e0:	40001000 	.word	0x40001000

080024e4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80024e8:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <MX_TIM14_Init+0x40>)
 80024ea:	4a0f      	ldr	r2, [pc, #60]	; (8002528 <MX_TIM14_Init+0x44>)
 80024ec:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 108-1;
 80024ee:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <MX_TIM14_Init+0x40>)
 80024f0:	226b      	movs	r2, #107	; 0x6b
 80024f2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <MX_TIM14_Init+0x40>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 80024fa:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <MX_TIM14_Init+0x40>)
 80024fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002500:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002502:	4b08      	ldr	r3, [pc, #32]	; (8002524 <MX_TIM14_Init+0x40>)
 8002504:	2200      	movs	r2, #0
 8002506:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <MX_TIM14_Init+0x40>)
 800250a:	2200      	movs	r2, #0
 800250c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800250e:	4805      	ldr	r0, [pc, #20]	; (8002524 <MX_TIM14_Init+0x40>)
 8002510:	f003 f856 	bl	80055c0 <HAL_TIM_Base_Init>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800251a:	f7ff ff19 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000138 	.word	0x20000138
 8002528:	40002000 	.word	0x40002000

0800252c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a1a      	ldr	r2, [pc, #104]	; (80025a4 <HAL_TIM_Base_MspInit+0x78>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d114      	bne.n	8002568 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800253e:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <HAL_TIM_Base_MspInit+0x7c>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	4a19      	ldr	r2, [pc, #100]	; (80025a8 <HAL_TIM_Base_MspInit+0x7c>)
 8002544:	f043 0310 	orr.w	r3, r3, #16
 8002548:	6413      	str	r3, [r2, #64]	; 0x40
 800254a:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <HAL_TIM_Base_MspInit+0x7c>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f003 0310 	and.w	r3, r3, #16
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	2100      	movs	r1, #0
 800255a:	2036      	movs	r0, #54	; 0x36
 800255c:	f001 fd1f 	bl	8003f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002560:	2036      	movs	r0, #54	; 0x36
 8002562:	f001 fd38 	bl	8003fd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002566:	e018      	b.n	800259a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM14)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a0f      	ldr	r2, [pc, #60]	; (80025ac <HAL_TIM_Base_MspInit+0x80>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d113      	bne.n	800259a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002572:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <HAL_TIM_Base_MspInit+0x7c>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	4a0c      	ldr	r2, [pc, #48]	; (80025a8 <HAL_TIM_Base_MspInit+0x7c>)
 8002578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800257c:	6413      	str	r3, [r2, #64]	; 0x40
 800257e:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <HAL_TIM_Base_MspInit+0x7c>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2100      	movs	r1, #0
 800258e:	202d      	movs	r0, #45	; 0x2d
 8002590:	f001 fd05 	bl	8003f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002594:	202d      	movs	r0, #45	; 0x2d
 8002596:	f001 fd1e 	bl	8003fd6 <HAL_NVIC_EnableIRQ>
}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40001000 	.word	0x40001000
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40002000 	.word	0x40002000

080025b0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025b4:	4b14      	ldr	r3, [pc, #80]	; (8002608 <MX_USART2_UART_Init+0x58>)
 80025b6:	4a15      	ldr	r2, [pc, #84]	; (800260c <MX_USART2_UART_Init+0x5c>)
 80025b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <MX_USART2_UART_Init+0x58>)
 80025bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80025c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025c2:	4b11      	ldr	r3, [pc, #68]	; (8002608 <MX_USART2_UART_Init+0x58>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <MX_USART2_UART_Init+0x58>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025ce:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <MX_USART2_UART_Init+0x58>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <MX_USART2_UART_Init+0x58>)
 80025d6:	220c      	movs	r2, #12
 80025d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025da:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <MX_USART2_UART_Init+0x58>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <MX_USART2_UART_Init+0x58>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025e6:	4b08      	ldr	r3, [pc, #32]	; (8002608 <MX_USART2_UART_Init+0x58>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <MX_USART2_UART_Init+0x58>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025f2:	4805      	ldr	r0, [pc, #20]	; (8002608 <MX_USART2_UART_Init+0x58>)
 80025f4:	f003 fb48 	bl	8005c88 <HAL_UART_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80025fe:	f7ff fea7 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000184 	.word	0x20000184
 800260c:	40004400 	.word	0x40004400

08002610 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b0ae      	sub	sp, #184	; 0xb8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	2290      	movs	r2, #144	; 0x90
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f004 f841 	bl	80066b8 <memset>
  if(uartHandle->Instance==USART2)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a21      	ldr	r2, [pc, #132]	; (80026c0 <HAL_UART_MspInit+0xb0>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d13a      	bne.n	80026b6 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002644:	2300      	movs	r3, #0
 8002646:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	4618      	mov	r0, r3
 800264e:	f002 fb8f 	bl	8004d70 <HAL_RCCEx_PeriphCLKConfig>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002658:	f7ff fe7a 	bl	8002350 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800265c:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <HAL_UART_MspInit+0xb4>)
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	4a18      	ldr	r2, [pc, #96]	; (80026c4 <HAL_UART_MspInit+0xb4>)
 8002662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002666:	6413      	str	r3, [r2, #64]	; 0x40
 8002668:	4b16      	ldr	r3, [pc, #88]	; (80026c4 <HAL_UART_MspInit+0xb4>)
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002674:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <HAL_UART_MspInit+0xb4>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	4a12      	ldr	r2, [pc, #72]	; (80026c4 <HAL_UART_MspInit+0xb4>)
 800267a:	f043 0308 	orr.w	r3, r3, #8
 800267e:	6313      	str	r3, [r2, #48]	; 0x30
 8002680:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <HAL_UART_MspInit+0xb4>)
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART2TX_Pin|DEBUG_UART2RX_Pin;
 800268c:	2360      	movs	r3, #96	; 0x60
 800268e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002692:	2302      	movs	r3, #2
 8002694:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269e:	2303      	movs	r3, #3
 80026a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026a4:	2307      	movs	r3, #7
 80026a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80026ae:	4619      	mov	r1, r3
 80026b0:	4805      	ldr	r0, [pc, #20]	; (80026c8 <HAL_UART_MspInit+0xb8>)
 80026b2:	f001 fcab 	bl	800400c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026b6:	bf00      	nop
 80026b8:	37b8      	adds	r7, #184	; 0xb8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40004400 	.word	0x40004400
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40020c00 	.word	0x40020c00

080026cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002704 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026d2:	e003      	b.n	80026dc <LoopCopyDataInit>

080026d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026da:	3104      	adds	r1, #4

080026dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026dc:	480b      	ldr	r0, [pc, #44]	; (800270c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026de:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026e4:	d3f6      	bcc.n	80026d4 <CopyDataInit>
  ldr  r2, =_sbss
 80026e6:	4a0b      	ldr	r2, [pc, #44]	; (8002714 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80026e8:	e002      	b.n	80026f0 <LoopFillZerobss>

080026ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80026ec:	f842 3b04 	str.w	r3, [r2], #4

080026f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80026f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80026f4:	d3f9      	bcc.n	80026ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026f6:	f7ff fea9 	bl	800244c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026fa:	f003 ffb9 	bl	8006670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026fe:	f7ff fb3d 	bl	8001d7c <main>
  bx  lr    
 8002702:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002704:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002708:	08006de0 	.word	0x08006de0
  ldr  r0, =_sdata
 800270c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002710:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002714:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002718:	2000020c 	.word	0x2000020c

0800271c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800271c:	e7fe      	b.n	800271c <ADC_IRQHandler>

0800271e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002722:	2003      	movs	r0, #3
 8002724:	f001 fc30 	bl	8003f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002728:	2000      	movs	r0, #0
 800272a:	f000 f805 	bl	8002738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800272e:	f7ff fe21 	bl	8002374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002740:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_InitTick+0x54>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4b12      	ldr	r3, [pc, #72]	; (8002790 <HAL_InitTick+0x58>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	4619      	mov	r1, r3
 800274a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800274e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002752:	fbb2 f3f3 	udiv	r3, r2, r3
 8002756:	4618      	mov	r0, r3
 8002758:	f001 fc4b 	bl	8003ff2 <HAL_SYSTICK_Config>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e00e      	b.n	8002784 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b0f      	cmp	r3, #15
 800276a:	d80a      	bhi.n	8002782 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800276c:	2200      	movs	r2, #0
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	f04f 30ff 	mov.w	r0, #4294967295
 8002774:	f001 fc13 	bl	8003f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002778:	4a06      	ldr	r2, [pc, #24]	; (8002794 <HAL_InitTick+0x5c>)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	e000      	b.n	8002784 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
}
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000000 	.word	0x20000000
 8002790:	20000008 	.word	0x20000008
 8002794:	20000004 	.word	0x20000004

08002798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_IncTick+0x20>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_IncTick+0x24>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4413      	add	r3, r2
 80027a8:	4a04      	ldr	r2, [pc, #16]	; (80027bc <HAL_IncTick+0x24>)
 80027aa:	6013      	str	r3, [r2, #0]
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	20000008 	.word	0x20000008
 80027bc:	20000208 	.word	0x20000208

080027c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return uwTick;
 80027c4:	4b03      	ldr	r3, [pc, #12]	; (80027d4 <HAL_GetTick+0x14>)
 80027c6:	681b      	ldr	r3, [r3, #0]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	20000208 	.word	0x20000208

080027d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027e0:	f7ff ffee 	bl	80027c0 <HAL_GetTick>
 80027e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f0:	d005      	beq.n	80027fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027f2:	4b0a      	ldr	r3, [pc, #40]	; (800281c <HAL_Delay+0x44>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4413      	add	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027fe:	bf00      	nop
 8002800:	f7ff ffde 	bl	80027c0 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	429a      	cmp	r2, r3
 800280e:	d8f7      	bhi.n	8002800 <HAL_Delay+0x28>
  {
  }
}
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000008 	.word	0x20000008

08002820 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 8002824:	4b02      	ldr	r3, [pc, #8]	; (8002830 <HAL_GetHalVersion+0x10>)
}
 8002826:	4618      	mov	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	01020a00 	.word	0x01020a00

08002834 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8002838:	4b03      	ldr	r3, [pc, #12]	; (8002848 <HAL_GetREVID+0x14>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	0c1b      	lsrs	r3, r3, #16
}
 800283e:	4618      	mov	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e0042000 	.word	0xe0042000

0800284c <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8002850:	4b04      	ldr	r3, [pc, #16]	; (8002864 <HAL_GetDEVID+0x18>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	e0042000 	.word	0xe0042000

08002868 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800286c:	4b03      	ldr	r3, [pc, #12]	; (800287c <HAL_GetUIDw0+0x14>)
 800286e:	681b      	ldr	r3, [r3, #0]
}
 8002870:	4618      	mov	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	1ff0f420 	.word	0x1ff0f420

08002880 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <HAL_GetUIDw1+0x14>)
 8002886:	681b      	ldr	r3, [r3, #0]
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	1ff0f424 	.word	0x1ff0f424

08002898 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <HAL_GetUIDw2+0x14>)
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	1ff0f428 	.word	0x1ff0f428

080028b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e031      	b.n	800292a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7fe ff92 	bl	80017f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d116      	bne.n	800291c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <HAL_ADC_Init+0x84>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	f043 0202 	orr.w	r2, r3, #2
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 fb0a 	bl	8002f18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f023 0303 	bic.w	r3, r3, #3
 8002912:	f043 0201 	orr.w	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	641a      	str	r2, [r3, #64]	; 0x40
 800291a:	e001      	b.n	8002920 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002928:	7bfb      	ldrb	r3, [r7, #15]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	ffffeefd 	.word	0xffffeefd

08002938 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800294a:	2b01      	cmp	r3, #1
 800294c:	d101      	bne.n	8002952 <HAL_ADC_Start+0x1a>
 800294e:	2302      	movs	r3, #2
 8002950:	e0ad      	b.n	8002aae <HAL_ADC_Start+0x176>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b01      	cmp	r3, #1
 8002966:	d018      	beq.n	800299a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0201 	orr.w	r2, r2, #1
 8002976:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002978:	4b50      	ldr	r3, [pc, #320]	; (8002abc <HAL_ADC_Start+0x184>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a50      	ldr	r2, [pc, #320]	; (8002ac0 <HAL_ADC_Start+0x188>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	0c9a      	lsrs	r2, r3, #18
 8002984:	4613      	mov	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4413      	add	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800298c:	e002      	b.n	8002994 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	3b01      	subs	r3, #1
 8002992:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f9      	bne.n	800298e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d175      	bne.n	8002a94 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ac:	4b45      	ldr	r3, [pc, #276]	; (8002ac4 <HAL_ADC_Start+0x18c>)
 80029ae:	4013      	ands	r3, r2
 80029b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d007      	beq.n	80029d6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e2:	d106      	bne.n	80029f2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e8:	f023 0206 	bic.w	r2, r3, #6
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	645a      	str	r2, [r3, #68]	; 0x44
 80029f0:	e002      	b.n	80029f8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a08:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002a0a:	4b2f      	ldr	r3, [pc, #188]	; (8002ac8 <HAL_ADC_Start+0x190>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 031f 	and.w	r3, r3, #31
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10f      	bne.n	8002a36 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d143      	bne.n	8002aac <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	e03a      	b.n	8002aac <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a24      	ldr	r2, [pc, #144]	; (8002acc <HAL_ADC_Start+0x194>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d10e      	bne.n	8002a5e <HAL_ADC_Start+0x126>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d107      	bne.n	8002a5e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a5c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002a5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ac8 <HAL_ADC_Start+0x190>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 0310 	and.w	r3, r3, #16
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d120      	bne.n	8002aac <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a18      	ldr	r2, [pc, #96]	; (8002ad0 <HAL_ADC_Start+0x198>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d11b      	bne.n	8002aac <HAL_ADC_Start+0x174>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d114      	bne.n	8002aac <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a90:	609a      	str	r2, [r3, #8]
 8002a92:	e00b      	b.n	8002aac <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	f043 0210 	orr.w	r2, r3, #16
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa4:	f043 0201 	orr.w	r2, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20000000 	.word	0x20000000
 8002ac0:	431bde83 	.word	0x431bde83
 8002ac4:	fffff8fe 	.word	0xfffff8fe
 8002ac8:	40012300 	.word	0x40012300
 8002acc:	40012000 	.word	0x40012000
 8002ad0:	40012200 	.word	0x40012200

08002ad4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <HAL_ADC_Stop+0x16>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e01f      	b.n	8002b2a <HAL_ADC_Stop+0x56>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0201 	bic.w	r2, r2, #1
 8002b00:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d107      	bne.n	8002b20 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b14:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <HAL_ADC_Stop+0x64>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	f043 0201 	orr.w	r2, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	ffffeefe 	.word	0xffffeefe

08002b3c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b58:	d113      	bne.n	8002b82 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b68:	d10b      	bne.n	8002b82 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f043 0220 	orr.w	r2, r3, #32
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e063      	b.n	8002c4a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002b82:	f7ff fe1d 	bl	80027c0 <HAL_GetTick>
 8002b86:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b88:	e021      	b.n	8002bce <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b90:	d01d      	beq.n	8002bce <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <HAL_ADC_PollForConversion+0x6c>
 8002b98:	f7ff fe12 	bl	80027c0 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d212      	bcs.n	8002bce <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d00b      	beq.n	8002bce <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f043 0204 	orr.w	r2, r3, #4
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e03d      	b.n	8002c4a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d1d6      	bne.n	8002b8a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0212 	mvn.w	r2, #18
 8002be4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d123      	bne.n	8002c48 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d11f      	bne.n	8002c48 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d006      	beq.n	8002c24 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d111      	bne.n	8002c48 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d105      	bne.n	8002c48 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f043 0201 	orr.w	r2, r3, #1
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x1c>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e136      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x28a>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b09      	cmp	r3, #9
 8002c96:	d93a      	bls.n	8002d0e <HAL_ADC_ConfigChannel+0xa2>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ca0:	d035      	beq.n	8002d0e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68d9      	ldr	r1, [r3, #12]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3b1e      	subs	r3, #30
 8002cb8:	2207      	movs	r2, #7
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43da      	mvns	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	400a      	ands	r2, r1
 8002cc6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a8d      	ldr	r2, [pc, #564]	; (8002f04 <HAL_ADC_ConfigChannel+0x298>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d10a      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68d9      	ldr	r1, [r3, #12]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	061a      	lsls	r2, r3, #24
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ce6:	e035      	b.n	8002d54 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68d9      	ldr	r1, [r3, #12]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4403      	add	r3, r0
 8002d00:	3b1e      	subs	r3, #30
 8002d02:	409a      	lsls	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d0c:	e022      	b.n	8002d54 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6919      	ldr	r1, [r3, #16]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	4413      	add	r3, r2
 8002d22:	2207      	movs	r2, #7
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43da      	mvns	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	400a      	ands	r2, r1
 8002d30:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6919      	ldr	r1, [r3, #16]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	4618      	mov	r0, r3
 8002d44:	4603      	mov	r3, r0
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	4403      	add	r3, r0
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b06      	cmp	r3, #6
 8002d5a:	d824      	bhi.n	8002da6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3b05      	subs	r3, #5
 8002d6e:	221f      	movs	r2, #31
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43da      	mvns	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	400a      	ands	r2, r1
 8002d7c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	3b05      	subs	r3, #5
 8002d98:	fa00 f203 	lsl.w	r2, r0, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	635a      	str	r2, [r3, #52]	; 0x34
 8002da4:	e04c      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b0c      	cmp	r3, #12
 8002dac:	d824      	bhi.n	8002df8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3b23      	subs	r3, #35	; 0x23
 8002dc0:	221f      	movs	r2, #31
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43da      	mvns	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	400a      	ands	r2, r1
 8002dce:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	4618      	mov	r0, r3
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	3b23      	subs	r3, #35	; 0x23
 8002dea:	fa00 f203 	lsl.w	r2, r0, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	631a      	str	r2, [r3, #48]	; 0x30
 8002df6:	e023      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	3b41      	subs	r3, #65	; 0x41
 8002e0a:	221f      	movs	r2, #31
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43da      	mvns	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	400a      	ands	r2, r1
 8002e18:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	4618      	mov	r0, r3
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	3b41      	subs	r3, #65	; 0x41
 8002e34:	fa00 f203 	lsl.w	r2, r0, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a30      	ldr	r2, [pc, #192]	; (8002f08 <HAL_ADC_ConfigChannel+0x29c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d10a      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x1f4>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e52:	d105      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002e54:	4b2d      	ldr	r3, [pc, #180]	; (8002f0c <HAL_ADC_ConfigChannel+0x2a0>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4a2c      	ldr	r2, [pc, #176]	; (8002f0c <HAL_ADC_ConfigChannel+0x2a0>)
 8002e5a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002e5e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a28      	ldr	r2, [pc, #160]	; (8002f08 <HAL_ADC_ConfigChannel+0x29c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d10f      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x21e>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b12      	cmp	r3, #18
 8002e70:	d10b      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002e72:	4b26      	ldr	r3, [pc, #152]	; (8002f0c <HAL_ADC_ConfigChannel+0x2a0>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	4a25      	ldr	r2, [pc, #148]	; (8002f0c <HAL_ADC_ConfigChannel+0x2a0>)
 8002e78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e7c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002e7e:	4b23      	ldr	r3, [pc, #140]	; (8002f0c <HAL_ADC_ConfigChannel+0x2a0>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4a22      	ldr	r2, [pc, #136]	; (8002f0c <HAL_ADC_ConfigChannel+0x2a0>)
 8002e84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e88:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1e      	ldr	r2, [pc, #120]	; (8002f08 <HAL_ADC_ConfigChannel+0x29c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d12b      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x280>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a1a      	ldr	r2, [pc, #104]	; (8002f04 <HAL_ADC_ConfigChannel+0x298>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d003      	beq.n	8002ea6 <HAL_ADC_ConfigChannel+0x23a>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b11      	cmp	r3, #17
 8002ea4:	d122      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002ea6:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <HAL_ADC_ConfigChannel+0x2a0>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	4a18      	ldr	r2, [pc, #96]	; (8002f0c <HAL_ADC_ConfigChannel+0x2a0>)
 8002eac:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002eb0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002eb2:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <HAL_ADC_ConfigChannel+0x2a0>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4a15      	ldr	r2, [pc, #84]	; (8002f0c <HAL_ADC_ConfigChannel+0x2a0>)
 8002eb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ebc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a10      	ldr	r2, [pc, #64]	; (8002f04 <HAL_ADC_ConfigChannel+0x298>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d111      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002ec8:	4b11      	ldr	r3, [pc, #68]	; (8002f10 <HAL_ADC_ConfigChannel+0x2a4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a11      	ldr	r2, [pc, #68]	; (8002f14 <HAL_ADC_ConfigChannel+0x2a8>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	0c9a      	lsrs	r2, r3, #18
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002ede:	e002      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f9      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	10000012 	.word	0x10000012
 8002f08:	40012000 	.word	0x40012000
 8002f0c:	40012300 	.word	0x40012300
 8002f10:	20000000 	.word	0x20000000
 8002f14:	431bde83 	.word	0x431bde83

08002f18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002f20:	4b78      	ldr	r3, [pc, #480]	; (8003104 <ADC_Init+0x1ec>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4a77      	ldr	r2, [pc, #476]	; (8003104 <ADC_Init+0x1ec>)
 8002f26:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002f2a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002f2c:	4b75      	ldr	r3, [pc, #468]	; (8003104 <ADC_Init+0x1ec>)
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	4973      	ldr	r1, [pc, #460]	; (8003104 <ADC_Init+0x1ec>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6859      	ldr	r1, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	021a      	lsls	r2, r3, #8
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6859      	ldr	r1, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6899      	ldr	r1, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa6:	4a58      	ldr	r2, [pc, #352]	; (8003108 <ADC_Init+0x1f0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d022      	beq.n	8002ff2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6899      	ldr	r1, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6899      	ldr	r1, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	e00f      	b.n	8003012 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003000:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003010:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0202 	bic.w	r2, r2, #2
 8003020:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6899      	ldr	r1, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	005a      	lsls	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3020 	ldrb.w	r3, [r3, #32]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01b      	beq.n	8003078 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800304e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800305e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6859      	ldr	r1, [r3, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	3b01      	subs	r3, #1
 800306c:	035a      	lsls	r2, r3, #13
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	e007      	b.n	8003088 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003086:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003096:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	051a      	lsls	r2, r3, #20
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6899      	ldr	r1, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030ca:	025a      	lsls	r2, r3, #9
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6899      	ldr	r1, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	029a      	lsls	r2, r3, #10
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	609a      	str	r2, [r3, #8]
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	40012300 	.word	0x40012300
 8003108:	0f000001 	.word	0x0f000001

0800310c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e0ed      	b.n	80032fa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d102      	bne.n	8003130 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7fe fc0e 	bl	800194c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003140:	f7ff fb3e 	bl	80027c0 <HAL_GetTick>
 8003144:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003146:	e012      	b.n	800316e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003148:	f7ff fb3a 	bl	80027c0 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b0a      	cmp	r3, #10
 8003154:	d90b      	bls.n	800316e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2205      	movs	r2, #5
 8003166:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e0c5      	b.n	80032fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0e5      	beq.n	8003148 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0202 	bic.w	r2, r2, #2
 800318a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800318c:	f7ff fb18 	bl	80027c0 <HAL_GetTick>
 8003190:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003192:	e012      	b.n	80031ba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003194:	f7ff fb14 	bl	80027c0 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b0a      	cmp	r3, #10
 80031a0:	d90b      	bls.n	80031ba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2205      	movs	r2, #5
 80031b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e09f      	b.n	80032fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1e5      	bne.n	8003194 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7e1b      	ldrb	r3, [r3, #24]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d108      	bne.n	80031e2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	e007      	b.n	80031f2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	7e5b      	ldrb	r3, [r3, #25]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d108      	bne.n	800320c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	e007      	b.n	800321c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800321a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	7e9b      	ldrb	r3, [r3, #26]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d108      	bne.n	8003236 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0220 	orr.w	r2, r2, #32
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	e007      	b.n	8003246 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0220 	bic.w	r2, r2, #32
 8003244:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	7edb      	ldrb	r3, [r3, #27]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d108      	bne.n	8003260 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0210 	bic.w	r2, r2, #16
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	e007      	b.n	8003270 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0210 	orr.w	r2, r2, #16
 800326e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	7f1b      	ldrb	r3, [r3, #28]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d108      	bne.n	800328a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0208 	orr.w	r2, r2, #8
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	e007      	b.n	800329a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0208 	bic.w	r2, r2, #8
 8003298:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	7f5b      	ldrb	r3, [r3, #29]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d108      	bne.n	80032b4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 0204 	orr.w	r2, r2, #4
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	e007      	b.n	80032c4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0204 	bic.w	r2, r2, #4
 80032c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	ea42 0103 	orr.w	r1, r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	1e5a      	subs	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3020 	ldrb.w	r3, [r3, #32]
 800331a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800331c:	7cfb      	ldrb	r3, [r7, #19]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d003      	beq.n	800332a <HAL_CAN_ConfigFilter+0x26>
 8003322:	7cfb      	ldrb	r3, [r7, #19]
 8003324:	2b02      	cmp	r3, #2
 8003326:	f040 80c7 	bne.w	80034b8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a69      	ldr	r2, [pc, #420]	; (80034d4 <HAL_CAN_ConfigFilter+0x1d0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d001      	beq.n	8003338 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8003334:	4b68      	ldr	r3, [pc, #416]	; (80034d8 <HAL_CAN_ConfigFilter+0x1d4>)
 8003336:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800333e:	f043 0201 	orr.w	r2, r3, #1
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	4a63      	ldr	r2, [pc, #396]	; (80034d8 <HAL_CAN_ConfigFilter+0x1d4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d111      	bne.n	8003374 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003356:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	021b      	lsls	r3, r3, #8
 800336c:	431a      	orrs	r2, r3
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	f003 031f 	and.w	r3, r3, #31
 800337c:	2201      	movs	r2, #1
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	43db      	mvns	r3, r3
 800338e:	401a      	ands	r2, r3
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d123      	bne.n	80033e6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	401a      	ands	r2, r3
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	3248      	adds	r2, #72	; 0x48
 80033c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033dc:	6979      	ldr	r1, [r7, #20]
 80033de:	3348      	adds	r3, #72	; 0x48
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	440b      	add	r3, r1
 80033e4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d122      	bne.n	8003434 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	431a      	orrs	r2, r3
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800340e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	3248      	adds	r2, #72	; 0x48
 8003414:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003428:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800342a:	6979      	ldr	r1, [r7, #20]
 800342c:	3348      	adds	r3, #72	; 0x48
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	440b      	add	r3, r1
 8003432:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d109      	bne.n	8003450 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	43db      	mvns	r3, r3
 8003446:	401a      	ands	r2, r3
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800344e:	e007      	b.n	8003460 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	431a      	orrs	r2, r3
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d109      	bne.n	800347c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	43db      	mvns	r3, r3
 8003472:	401a      	ands	r2, r3
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800347a:	e007      	b.n	800348c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	431a      	orrs	r2, r3
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d107      	bne.n	80034a4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	431a      	orrs	r2, r3
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80034aa:	f023 0201 	bic.w	r2, r3, #1
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	e006      	b.n	80034c6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
  }
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	371c      	adds	r7, #28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40003400 	.word	0x40003400
 80034d8:	40006400 	.word	0x40006400

080034dc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d12e      	bne.n	800354e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0201 	bic.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003508:	f7ff f95a 	bl	80027c0 <HAL_GetTick>
 800350c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800350e:	e012      	b.n	8003536 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003510:	f7ff f956 	bl	80027c0 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b0a      	cmp	r3, #10
 800351c:	d90b      	bls.n	8003536 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2205      	movs	r2, #5
 800352e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e012      	b.n	800355c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1e5      	bne.n	8003510 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	e006      	b.n	800355c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
  }
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003564:	b480      	push	{r7}
 8003566:	b089      	sub	sp, #36	; 0x24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003578:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003582:	7ffb      	ldrb	r3, [r7, #31]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d003      	beq.n	8003590 <HAL_CAN_AddTxMessage+0x2c>
 8003588:	7ffb      	ldrb	r3, [r7, #31]
 800358a:	2b02      	cmp	r3, #2
 800358c:	f040 80b8 	bne.w	8003700 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10a      	bne.n	80035b0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d105      	bne.n	80035b0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 80a0 	beq.w	80036f0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	0e1b      	lsrs	r3, r3, #24
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d907      	bls.n	80035d0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e09e      	b.n	800370e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80035d0:	2201      	movs	r2, #1
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	409a      	lsls	r2, r3
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10d      	bne.n	80035fe <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80035ec:	68f9      	ldr	r1, [r7, #12]
 80035ee:	6809      	ldr	r1, [r1, #0]
 80035f0:	431a      	orrs	r2, r3
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	3318      	adds	r3, #24
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	440b      	add	r3, r1
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	e00f      	b.n	800361e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003608:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800360e:	68f9      	ldr	r1, [r7, #12]
 8003610:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003612:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	3318      	adds	r3, #24
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	440b      	add	r3, r1
 800361c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6819      	ldr	r1, [r3, #0]
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	691a      	ldr	r2, [r3, #16]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	3318      	adds	r3, #24
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	440b      	add	r3, r1
 800362e:	3304      	adds	r3, #4
 8003630:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	7d1b      	ldrb	r3, [r3, #20]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d111      	bne.n	800365e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	3318      	adds	r3, #24
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	4413      	add	r3, r2
 8003646:	3304      	adds	r3, #4
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	6811      	ldr	r1, [r2, #0]
 800364e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	3318      	adds	r3, #24
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	440b      	add	r3, r1
 800365a:	3304      	adds	r3, #4
 800365c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3307      	adds	r3, #7
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	061a      	lsls	r2, r3, #24
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3306      	adds	r3, #6
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	041b      	lsls	r3, r3, #16
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3305      	adds	r3, #5
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	021b      	lsls	r3, r3, #8
 8003678:	4313      	orrs	r3, r2
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	3204      	adds	r2, #4
 800367e:	7812      	ldrb	r2, [r2, #0]
 8003680:	4610      	mov	r0, r2
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	6811      	ldr	r1, [r2, #0]
 8003686:	ea43 0200 	orr.w	r2, r3, r0
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	440b      	add	r3, r1
 8003690:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003694:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3303      	adds	r3, #3
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	061a      	lsls	r2, r3, #24
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3302      	adds	r3, #2
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	041b      	lsls	r3, r3, #16
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3301      	adds	r3, #1
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	021b      	lsls	r3, r3, #8
 80036b0:	4313      	orrs	r3, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	7812      	ldrb	r2, [r2, #0]
 80036b6:	4610      	mov	r0, r2
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	6811      	ldr	r1, [r2, #0]
 80036bc:	ea43 0200 	orr.w	r2, r3, r0
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	440b      	add	r3, r1
 80036c6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80036ca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	3318      	adds	r3, #24
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	4413      	add	r3, r2
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	6811      	ldr	r1, [r2, #0]
 80036de:	f043 0201 	orr.w	r2, r3, #1
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	3318      	adds	r3, #24
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	440b      	add	r3, r1
 80036ea:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	e00e      	b.n	800370e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e006      	b.n	800370e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
  }
}
 800370e:	4618      	mov	r0, r3
 8003710:	3724      	adds	r7, #36	; 0x24
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800371a:	b480      	push	{r7}
 800371c:	b087      	sub	sp, #28
 800371e:	af00      	add	r7, sp, #0
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	607a      	str	r2, [r7, #4]
 8003726:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800372e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003730:	7dfb      	ldrb	r3, [r7, #23]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d003      	beq.n	800373e <HAL_CAN_GetRxMessage+0x24>
 8003736:	7dfb      	ldrb	r3, [r7, #23]
 8003738:	2b02      	cmp	r3, #2
 800373a:	f040 80f3 	bne.w	8003924 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10e      	bne.n	8003762 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d116      	bne.n	8003780 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e0e7      	b.n	8003932 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d107      	bne.n	8003780 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e0d8      	b.n	8003932 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	331b      	adds	r3, #27
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	4413      	add	r3, r2
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0204 	and.w	r2, r3, #4
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10c      	bne.n	80037b8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	331b      	adds	r3, #27
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	4413      	add	r3, r2
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	0d5b      	lsrs	r3, r3, #21
 80037ae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	e00b      	b.n	80037d0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	331b      	adds	r3, #27
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	4413      	add	r3, r2
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	08db      	lsrs	r3, r3, #3
 80037c8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	331b      	adds	r3, #27
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	4413      	add	r3, r2
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0202 	and.w	r2, r3, #2
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	331b      	adds	r3, #27
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	4413      	add	r3, r2
 80037f2:	3304      	adds	r3, #4
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 020f 	and.w	r2, r3, #15
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	331b      	adds	r3, #27
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	4413      	add	r3, r2
 800380a:	3304      	adds	r3, #4
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	0a1b      	lsrs	r3, r3, #8
 8003810:	b2da      	uxtb	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	331b      	adds	r3, #27
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	4413      	add	r3, r2
 8003822:	3304      	adds	r3, #4
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	0c1b      	lsrs	r3, r3, #16
 8003828:	b29a      	uxth	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	4413      	add	r3, r2
 8003838:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	b2da      	uxtb	r2, r3
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	4413      	add	r3, r2
 800384e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	0a1a      	lsrs	r2, r3, #8
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	3301      	adds	r3, #1
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	4413      	add	r3, r2
 8003868:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	0c1a      	lsrs	r2, r3, #16
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	3302      	adds	r3, #2
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	4413      	add	r3, r2
 8003882:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	0e1a      	lsrs	r2, r3, #24
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	3303      	adds	r3, #3
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	4413      	add	r3, r2
 800389c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	3304      	adds	r3, #4
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	0a1a      	lsrs	r2, r3, #8
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	3305      	adds	r3, #5
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	0c1a      	lsrs	r2, r3, #16
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	3306      	adds	r3, #6
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	0e1a      	lsrs	r2, r3, #24
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	3307      	adds	r3, #7
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d108      	bne.n	8003910 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 0220 	orr.w	r2, r2, #32
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	e007      	b.n	8003920 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0220 	orr.w	r2, r2, #32
 800391e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003920:	2300      	movs	r3, #0
 8003922:	e006      	b.n	8003932 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
  }
}
 8003932:	4618      	mov	r0, r3
 8003934:	371c      	adds	r7, #28
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800393e:	b480      	push	{r7}
 8003940:	b085      	sub	sp, #20
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800394e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d002      	beq.n	800395c <HAL_CAN_ActivateNotification+0x1e>
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d109      	bne.n	8003970 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6959      	ldr	r1, [r3, #20]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	e006      	b.n	800397e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
  }
}
 800397e:	4618      	mov	r0, r3
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b08a      	sub	sp, #40	; 0x28
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003992:	2300      	movs	r3, #0
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d07c      	beq.n	8003aca <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d023      	beq.n	8003a22 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2201      	movs	r2, #1
 80039e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f983 	bl	8003cf8 <HAL_CAN_TxMailbox0CompleteCallback>
 80039f2:	e016      	b.n	8003a22 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	f003 0304 	and.w	r3, r3, #4
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d004      	beq.n	8003a08 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
 8003a06:	e00c      	b.n	8003a22 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d004      	beq.n	8003a1c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1a:	e002      	b.n	8003a22 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f989 	bl	8003d34 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d024      	beq.n	8003a76 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a34:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f963 	bl	8003d0c <HAL_CAN_TxMailbox1CompleteCallback>
 8003a46:	e016      	b.n	8003a76 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d004      	beq.n	8003a5c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5a:	e00c      	b.n	8003a76 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d004      	beq.n	8003a70 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6e:	e002      	b.n	8003a76 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f969 	bl	8003d48 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d024      	beq.n	8003aca <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a88:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f943 	bl	8003d20 <HAL_CAN_TxMailbox2CompleteCallback>
 8003a9a:	e016      	b.n	8003aca <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d004      	beq.n	8003ab0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
 8003aae:	e00c      	b.n	8003aca <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d004      	beq.n	8003ac4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac2:	e002      	b.n	8003aca <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f949 	bl	8003d5c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00c      	beq.n	8003aee <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d007      	beq.n	8003aee <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2210      	movs	r2, #16
 8003aec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00b      	beq.n	8003b10 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d006      	beq.n	8003b10 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2208      	movs	r2, #8
 8003b08:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f930 	bl	8003d70 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d009      	beq.n	8003b2e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0303 	and.w	r3, r3, #3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7fe fbe3 	bl	80022f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00c      	beq.n	8003b52 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f003 0310 	and.w	r3, r3, #16
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d007      	beq.n	8003b52 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2210      	movs	r2, #16
 8003b50:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	f003 0320 	and.w	r3, r3, #32
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00b      	beq.n	8003b74 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d006      	beq.n	8003b74 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2208      	movs	r2, #8
 8003b6c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f912 	bl	8003d98 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	f003 0310 	and.w	r3, r3, #16
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d009      	beq.n	8003b92 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	f003 0303 	and.w	r3, r3, #3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f8f9 	bl	8003d84 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00b      	beq.n	8003bb4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d006      	beq.n	8003bb4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2210      	movs	r2, #16
 8003bac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f8fc 	bl	8003dac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00b      	beq.n	8003bd6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d006      	beq.n	8003bd6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2208      	movs	r2, #8
 8003bce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f8f5 	bl	8003dc0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d07b      	beq.n	8003cd8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d072      	beq.n	8003cd0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d008      	beq.n	8003c06 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	f043 0302 	orr.w	r3, r3, #2
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d008      	beq.n	8003c3e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	f043 0304 	orr.w	r3, r3, #4
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d043      	beq.n	8003cd0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d03e      	beq.n	8003cd0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c58:	2b60      	cmp	r3, #96	; 0x60
 8003c5a:	d02b      	beq.n	8003cb4 <HAL_CAN_IRQHandler+0x32a>
 8003c5c:	2b60      	cmp	r3, #96	; 0x60
 8003c5e:	d82e      	bhi.n	8003cbe <HAL_CAN_IRQHandler+0x334>
 8003c60:	2b50      	cmp	r3, #80	; 0x50
 8003c62:	d022      	beq.n	8003caa <HAL_CAN_IRQHandler+0x320>
 8003c64:	2b50      	cmp	r3, #80	; 0x50
 8003c66:	d82a      	bhi.n	8003cbe <HAL_CAN_IRQHandler+0x334>
 8003c68:	2b40      	cmp	r3, #64	; 0x40
 8003c6a:	d019      	beq.n	8003ca0 <HAL_CAN_IRQHandler+0x316>
 8003c6c:	2b40      	cmp	r3, #64	; 0x40
 8003c6e:	d826      	bhi.n	8003cbe <HAL_CAN_IRQHandler+0x334>
 8003c70:	2b30      	cmp	r3, #48	; 0x30
 8003c72:	d010      	beq.n	8003c96 <HAL_CAN_IRQHandler+0x30c>
 8003c74:	2b30      	cmp	r3, #48	; 0x30
 8003c76:	d822      	bhi.n	8003cbe <HAL_CAN_IRQHandler+0x334>
 8003c78:	2b10      	cmp	r3, #16
 8003c7a:	d002      	beq.n	8003c82 <HAL_CAN_IRQHandler+0x2f8>
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	d005      	beq.n	8003c8c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003c80:	e01d      	b.n	8003cbe <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	f043 0308 	orr.w	r3, r3, #8
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c8a:	e019      	b.n	8003cc0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	f043 0310 	orr.w	r3, r3, #16
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c94:	e014      	b.n	8003cc0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	f043 0320 	orr.w	r3, r3, #32
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c9e:	e00f      	b.n	8003cc0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ca8:	e00a      	b.n	8003cc0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003cb2:	e005      	b.n	8003cc0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003cbc:	e000      	b.n	8003cc0 <HAL_CAN_IRQHandler+0x336>
            break;
 8003cbe:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003cce:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2204      	movs	r2, #4
 8003cd6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d008      	beq.n	8003cf0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f872 	bl	8003dd4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003cf0:	bf00      	nop
 8003cf2:	3728      	adds	r7, #40	; 0x28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <__NVIC_SetPriorityGrouping>:
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003df8:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <__NVIC_SetPriorityGrouping+0x40>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e04:	4013      	ands	r3, r2
 8003e06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003e10:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <__NVIC_SetPriorityGrouping+0x44>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e16:	4a04      	ldr	r2, [pc, #16]	; (8003e28 <__NVIC_SetPriorityGrouping+0x40>)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	60d3      	str	r3, [r2, #12]
}
 8003e1c:	bf00      	nop
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	e000ed00 	.word	0xe000ed00
 8003e2c:	05fa0000 	.word	0x05fa0000

08003e30 <__NVIC_GetPriorityGrouping>:
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e34:	4b04      	ldr	r3, [pc, #16]	; (8003e48 <__NVIC_GetPriorityGrouping+0x18>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	0a1b      	lsrs	r3, r3, #8
 8003e3a:	f003 0307 	and.w	r3, r3, #7
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	e000ed00 	.word	0xe000ed00

08003e4c <__NVIC_EnableIRQ>:
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	db0b      	blt.n	8003e76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	f003 021f 	and.w	r2, r3, #31
 8003e64:	4907      	ldr	r1, [pc, #28]	; (8003e84 <__NVIC_EnableIRQ+0x38>)
 8003e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	e000e100 	.word	0xe000e100

08003e88 <__NVIC_SetPriority>:
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	6039      	str	r1, [r7, #0]
 8003e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	db0a      	blt.n	8003eb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	490c      	ldr	r1, [pc, #48]	; (8003ed4 <__NVIC_SetPriority+0x4c>)
 8003ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea6:	0112      	lsls	r2, r2, #4
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	440b      	add	r3, r1
 8003eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003eb0:	e00a      	b.n	8003ec8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	4908      	ldr	r1, [pc, #32]	; (8003ed8 <__NVIC_SetPriority+0x50>)
 8003eb8:	79fb      	ldrb	r3, [r7, #7]
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	3b04      	subs	r3, #4
 8003ec0:	0112      	lsls	r2, r2, #4
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	761a      	strb	r2, [r3, #24]
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	e000e100 	.word	0xe000e100
 8003ed8:	e000ed00 	.word	0xe000ed00

08003edc <NVIC_EncodePriority>:
{
 8003edc:	b480      	push	{r7}
 8003ede:	b089      	sub	sp, #36	; 0x24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f1c3 0307 	rsb	r3, r3, #7
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	bf28      	it	cs
 8003efa:	2304      	movcs	r3, #4
 8003efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	3304      	adds	r3, #4
 8003f02:	2b06      	cmp	r3, #6
 8003f04:	d902      	bls.n	8003f0c <NVIC_EncodePriority+0x30>
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	3b03      	subs	r3, #3
 8003f0a:	e000      	b.n	8003f0e <NVIC_EncodePriority+0x32>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f10:	f04f 32ff 	mov.w	r2, #4294967295
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	43da      	mvns	r2, r3
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	401a      	ands	r2, r3
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f24:	f04f 31ff 	mov.w	r1, #4294967295
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2e:	43d9      	mvns	r1, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f34:	4313      	orrs	r3, r2
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3724      	adds	r7, #36	; 0x24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
	...

08003f44 <SysTick_Config>:
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f54:	d301      	bcc.n	8003f5a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003f56:	2301      	movs	r3, #1
 8003f58:	e00f      	b.n	8003f7a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f5a:	4a0a      	ldr	r2, [pc, #40]	; (8003f84 <SysTick_Config+0x40>)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f62:	210f      	movs	r1, #15
 8003f64:	f04f 30ff 	mov.w	r0, #4294967295
 8003f68:	f7ff ff8e 	bl	8003e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f6c:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <SysTick_Config+0x40>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f72:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <SysTick_Config+0x40>)
 8003f74:	2207      	movs	r2, #7
 8003f76:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	e000e010 	.word	0xe000e010

08003f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7ff ff29 	bl	8003de8 <__NVIC_SetPriorityGrouping>
}
 8003f96:	bf00      	nop
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b086      	sub	sp, #24
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	607a      	str	r2, [r7, #4]
 8003faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003fac:	2300      	movs	r3, #0
 8003fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fb0:	f7ff ff3e 	bl	8003e30 <__NVIC_GetPriorityGrouping>
 8003fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	68b9      	ldr	r1, [r7, #8]
 8003fba:	6978      	ldr	r0, [r7, #20]
 8003fbc:	f7ff ff8e 	bl	8003edc <NVIC_EncodePriority>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff ff5d 	bl	8003e88 <__NVIC_SetPriority>
}
 8003fce:	bf00      	nop
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b082      	sub	sp, #8
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	4603      	mov	r3, r0
 8003fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff ff31 	bl	8003e4c <__NVIC_EnableIRQ>
}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff ffa2 	bl	8003f44 <SysTick_Config>
 8004000:	4603      	mov	r3, r0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800400c:	b480      	push	{r7}
 800400e:	b089      	sub	sp, #36	; 0x24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004016:	2300      	movs	r3, #0
 8004018:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800401e:	2300      	movs	r3, #0
 8004020:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004022:	2300      	movs	r3, #0
 8004024:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
 800402a:	e175      	b.n	8004318 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800402c:	2201      	movs	r2, #1
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4013      	ands	r3, r2
 800403e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	429a      	cmp	r2, r3
 8004046:	f040 8164 	bne.w	8004312 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	2b01      	cmp	r3, #1
 8004054:	d005      	beq.n	8004062 <HAL_GPIO_Init+0x56>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d130      	bne.n	80040c4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	2203      	movs	r2, #3
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4013      	ands	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4313      	orrs	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004098:	2201      	movs	r2, #1
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	f003 0201 	and.w	r2, r3, #1
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 0303 	and.w	r3, r3, #3
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d017      	beq.n	8004100 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	2203      	movs	r2, #3
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	43db      	mvns	r3, r3
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4013      	ands	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d123      	bne.n	8004154 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	08da      	lsrs	r2, r3, #3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3208      	adds	r2, #8
 8004114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	220f      	movs	r2, #15
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	43db      	mvns	r3, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4013      	ands	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	4313      	orrs	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	08da      	lsrs	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3208      	adds	r2, #8
 800414e:	69b9      	ldr	r1, [r7, #24]
 8004150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	2203      	movs	r2, #3
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	43db      	mvns	r3, r3
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4013      	ands	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 0203 	and.w	r2, r3, #3
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4313      	orrs	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 80be 	beq.w	8004312 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004196:	4b66      	ldr	r3, [pc, #408]	; (8004330 <HAL_GPIO_Init+0x324>)
 8004198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419a:	4a65      	ldr	r2, [pc, #404]	; (8004330 <HAL_GPIO_Init+0x324>)
 800419c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041a0:	6453      	str	r3, [r2, #68]	; 0x44
 80041a2:	4b63      	ldr	r3, [pc, #396]	; (8004330 <HAL_GPIO_Init+0x324>)
 80041a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80041ae:	4a61      	ldr	r2, [pc, #388]	; (8004334 <HAL_GPIO_Init+0x328>)
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	089b      	lsrs	r3, r3, #2
 80041b4:	3302      	adds	r3, #2
 80041b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f003 0303 	and.w	r3, r3, #3
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	220f      	movs	r2, #15
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	43db      	mvns	r3, r3
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	4013      	ands	r3, r2
 80041d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a58      	ldr	r2, [pc, #352]	; (8004338 <HAL_GPIO_Init+0x32c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d037      	beq.n	800424a <HAL_GPIO_Init+0x23e>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a57      	ldr	r2, [pc, #348]	; (800433c <HAL_GPIO_Init+0x330>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d031      	beq.n	8004246 <HAL_GPIO_Init+0x23a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a56      	ldr	r2, [pc, #344]	; (8004340 <HAL_GPIO_Init+0x334>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d02b      	beq.n	8004242 <HAL_GPIO_Init+0x236>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a55      	ldr	r2, [pc, #340]	; (8004344 <HAL_GPIO_Init+0x338>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d025      	beq.n	800423e <HAL_GPIO_Init+0x232>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a54      	ldr	r2, [pc, #336]	; (8004348 <HAL_GPIO_Init+0x33c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d01f      	beq.n	800423a <HAL_GPIO_Init+0x22e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a53      	ldr	r2, [pc, #332]	; (800434c <HAL_GPIO_Init+0x340>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d019      	beq.n	8004236 <HAL_GPIO_Init+0x22a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a52      	ldr	r2, [pc, #328]	; (8004350 <HAL_GPIO_Init+0x344>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d013      	beq.n	8004232 <HAL_GPIO_Init+0x226>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a51      	ldr	r2, [pc, #324]	; (8004354 <HAL_GPIO_Init+0x348>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d00d      	beq.n	800422e <HAL_GPIO_Init+0x222>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a50      	ldr	r2, [pc, #320]	; (8004358 <HAL_GPIO_Init+0x34c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d007      	beq.n	800422a <HAL_GPIO_Init+0x21e>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a4f      	ldr	r2, [pc, #316]	; (800435c <HAL_GPIO_Init+0x350>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d101      	bne.n	8004226 <HAL_GPIO_Init+0x21a>
 8004222:	2309      	movs	r3, #9
 8004224:	e012      	b.n	800424c <HAL_GPIO_Init+0x240>
 8004226:	230a      	movs	r3, #10
 8004228:	e010      	b.n	800424c <HAL_GPIO_Init+0x240>
 800422a:	2308      	movs	r3, #8
 800422c:	e00e      	b.n	800424c <HAL_GPIO_Init+0x240>
 800422e:	2307      	movs	r3, #7
 8004230:	e00c      	b.n	800424c <HAL_GPIO_Init+0x240>
 8004232:	2306      	movs	r3, #6
 8004234:	e00a      	b.n	800424c <HAL_GPIO_Init+0x240>
 8004236:	2305      	movs	r3, #5
 8004238:	e008      	b.n	800424c <HAL_GPIO_Init+0x240>
 800423a:	2304      	movs	r3, #4
 800423c:	e006      	b.n	800424c <HAL_GPIO_Init+0x240>
 800423e:	2303      	movs	r3, #3
 8004240:	e004      	b.n	800424c <HAL_GPIO_Init+0x240>
 8004242:	2302      	movs	r3, #2
 8004244:	e002      	b.n	800424c <HAL_GPIO_Init+0x240>
 8004246:	2301      	movs	r3, #1
 8004248:	e000      	b.n	800424c <HAL_GPIO_Init+0x240>
 800424a:	2300      	movs	r3, #0
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	f002 0203 	and.w	r2, r2, #3
 8004252:	0092      	lsls	r2, r2, #2
 8004254:	4093      	lsls	r3, r2
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	4313      	orrs	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800425c:	4935      	ldr	r1, [pc, #212]	; (8004334 <HAL_GPIO_Init+0x328>)
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	089b      	lsrs	r3, r3, #2
 8004262:	3302      	adds	r3, #2
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800426a:	4b3d      	ldr	r3, [pc, #244]	; (8004360 <HAL_GPIO_Init+0x354>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	43db      	mvns	r3, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	4013      	ands	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800428e:	4a34      	ldr	r2, [pc, #208]	; (8004360 <HAL_GPIO_Init+0x354>)
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004294:	4b32      	ldr	r3, [pc, #200]	; (8004360 <HAL_GPIO_Init+0x354>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	43db      	mvns	r3, r3
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4013      	ands	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042b8:	4a29      	ldr	r2, [pc, #164]	; (8004360 <HAL_GPIO_Init+0x354>)
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042be:	4b28      	ldr	r3, [pc, #160]	; (8004360 <HAL_GPIO_Init+0x354>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	43db      	mvns	r3, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4013      	ands	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	4313      	orrs	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042e2:	4a1f      	ldr	r2, [pc, #124]	; (8004360 <HAL_GPIO_Init+0x354>)
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042e8:	4b1d      	ldr	r3, [pc, #116]	; (8004360 <HAL_GPIO_Init+0x354>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	43db      	mvns	r3, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4013      	ands	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	4313      	orrs	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800430c:	4a14      	ldr	r2, [pc, #80]	; (8004360 <HAL_GPIO_Init+0x354>)
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	3301      	adds	r3, #1
 8004316:	61fb      	str	r3, [r7, #28]
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	2b0f      	cmp	r3, #15
 800431c:	f67f ae86 	bls.w	800402c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004320:	bf00      	nop
 8004322:	bf00      	nop
 8004324:	3724      	adds	r7, #36	; 0x24
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40023800 	.word	0x40023800
 8004334:	40013800 	.word	0x40013800
 8004338:	40020000 	.word	0x40020000
 800433c:	40020400 	.word	0x40020400
 8004340:	40020800 	.word	0x40020800
 8004344:	40020c00 	.word	0x40020c00
 8004348:	40021000 	.word	0x40021000
 800434c:	40021400 	.word	0x40021400
 8004350:	40021800 	.word	0x40021800
 8004354:	40021c00 	.word	0x40021c00
 8004358:	40022000 	.word	0x40022000
 800435c:	40022400 	.word	0x40022400
 8004360:	40013c00 	.word	0x40013c00

08004364 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	460b      	mov	r3, r1
 800436e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691a      	ldr	r2, [r3, #16]
 8004374:	887b      	ldrh	r3, [r7, #2]
 8004376:	4013      	ands	r3, r2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800437c:	2301      	movs	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
 8004380:	e001      	b.n	8004386 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004382:	2300      	movs	r3, #0
 8004384:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004386:	7bfb      	ldrb	r3, [r7, #15]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	807b      	strh	r3, [r7, #2]
 80043a0:	4613      	mov	r3, r2
 80043a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043a4:	787b      	ldrb	r3, [r7, #1]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043aa:	887a      	ldrh	r2, [r7, #2]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80043b0:	e003      	b.n	80043ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80043b2:	887b      	ldrh	r3, [r7, #2]
 80043b4:	041a      	lsls	r2, r3, #16
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	619a      	str	r2, [r3, #24]
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
	...

080043c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80043ce:	2300      	movs	r3, #0
 80043d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80043d2:	4b23      	ldr	r3, [pc, #140]	; (8004460 <HAL_PWREx_EnableOverDrive+0x98>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	4a22      	ldr	r2, [pc, #136]	; (8004460 <HAL_PWREx_EnableOverDrive+0x98>)
 80043d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043dc:	6413      	str	r3, [r2, #64]	; 0x40
 80043de:	4b20      	ldr	r3, [pc, #128]	; (8004460 <HAL_PWREx_EnableOverDrive+0x98>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80043ea:	4b1e      	ldr	r3, [pc, #120]	; (8004464 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a1d      	ldr	r2, [pc, #116]	; (8004464 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043f6:	f7fe f9e3 	bl	80027c0 <HAL_GetTick>
 80043fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80043fc:	e009      	b.n	8004412 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043fe:	f7fe f9df 	bl	80027c0 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800440c:	d901      	bls.n	8004412 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e022      	b.n	8004458 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004412:	4b14      	ldr	r3, [pc, #80]	; (8004464 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800441e:	d1ee      	bne.n	80043fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004420:	4b10      	ldr	r3, [pc, #64]	; (8004464 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a0f      	ldr	r2, [pc, #60]	; (8004464 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800442a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800442c:	f7fe f9c8 	bl	80027c0 <HAL_GetTick>
 8004430:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004432:	e009      	b.n	8004448 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004434:	f7fe f9c4 	bl	80027c0 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004442:	d901      	bls.n	8004448 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e007      	b.n	8004458 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004448:	4b06      	ldr	r3, [pc, #24]	; (8004464 <HAL_PWREx_EnableOverDrive+0x9c>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004450:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004454:	d1ee      	bne.n	8004434 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40023800 	.word	0x40023800
 8004464:	40007000 	.word	0x40007000

08004468 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004470:	2300      	movs	r3, #0
 8004472:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e29b      	b.n	80049b6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 8087 	beq.w	800459a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800448c:	4b96      	ldr	r3, [pc, #600]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 030c 	and.w	r3, r3, #12
 8004494:	2b04      	cmp	r3, #4
 8004496:	d00c      	beq.n	80044b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004498:	4b93      	ldr	r3, [pc, #588]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 030c 	and.w	r3, r3, #12
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d112      	bne.n	80044ca <HAL_RCC_OscConfig+0x62>
 80044a4:	4b90      	ldr	r3, [pc, #576]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044b0:	d10b      	bne.n	80044ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b2:	4b8d      	ldr	r3, [pc, #564]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d06c      	beq.n	8004598 <HAL_RCC_OscConfig+0x130>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d168      	bne.n	8004598 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e275      	b.n	80049b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d2:	d106      	bne.n	80044e2 <HAL_RCC_OscConfig+0x7a>
 80044d4:	4b84      	ldr	r3, [pc, #528]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a83      	ldr	r2, [pc, #524]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 80044da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	e02e      	b.n	8004540 <HAL_RCC_OscConfig+0xd8>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10c      	bne.n	8004504 <HAL_RCC_OscConfig+0x9c>
 80044ea:	4b7f      	ldr	r3, [pc, #508]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a7e      	ldr	r2, [pc, #504]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 80044f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	4b7c      	ldr	r3, [pc, #496]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a7b      	ldr	r2, [pc, #492]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 80044fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	e01d      	b.n	8004540 <HAL_RCC_OscConfig+0xd8>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800450c:	d10c      	bne.n	8004528 <HAL_RCC_OscConfig+0xc0>
 800450e:	4b76      	ldr	r3, [pc, #472]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a75      	ldr	r2, [pc, #468]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 8004514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	4b73      	ldr	r3, [pc, #460]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a72      	ldr	r2, [pc, #456]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 8004520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	e00b      	b.n	8004540 <HAL_RCC_OscConfig+0xd8>
 8004528:	4b6f      	ldr	r3, [pc, #444]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a6e      	ldr	r2, [pc, #440]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 800452e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	4b6c      	ldr	r3, [pc, #432]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a6b      	ldr	r2, [pc, #428]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 800453a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800453e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d013      	beq.n	8004570 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004548:	f7fe f93a 	bl	80027c0 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004550:	f7fe f936 	bl	80027c0 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b64      	cmp	r3, #100	; 0x64
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e229      	b.n	80049b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004562:	4b61      	ldr	r3, [pc, #388]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f0      	beq.n	8004550 <HAL_RCC_OscConfig+0xe8>
 800456e:	e014      	b.n	800459a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004570:	f7fe f926 	bl	80027c0 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004578:	f7fe f922 	bl	80027c0 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b64      	cmp	r3, #100	; 0x64
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e215      	b.n	80049b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800458a:	4b57      	ldr	r3, [pc, #348]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f0      	bne.n	8004578 <HAL_RCC_OscConfig+0x110>
 8004596:	e000      	b.n	800459a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d069      	beq.n	800467a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045a6:	4b50      	ldr	r3, [pc, #320]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00b      	beq.n	80045ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045b2:	4b4d      	ldr	r3, [pc, #308]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 030c 	and.w	r3, r3, #12
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d11c      	bne.n	80045f8 <HAL_RCC_OscConfig+0x190>
 80045be:	4b4a      	ldr	r3, [pc, #296]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d116      	bne.n	80045f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ca:	4b47      	ldr	r3, [pc, #284]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <HAL_RCC_OscConfig+0x17a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d001      	beq.n	80045e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e1e9      	b.n	80049b6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e2:	4b41      	ldr	r3, [pc, #260]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	493d      	ldr	r1, [pc, #244]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045f6:	e040      	b.n	800467a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d023      	beq.n	8004648 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004600:	4b39      	ldr	r3, [pc, #228]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a38      	ldr	r2, [pc, #224]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460c:	f7fe f8d8 	bl	80027c0 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004614:	f7fe f8d4 	bl	80027c0 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e1c7      	b.n	80049b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004626:	4b30      	ldr	r3, [pc, #192]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004632:	4b2d      	ldr	r3, [pc, #180]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	4929      	ldr	r1, [pc, #164]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 8004642:	4313      	orrs	r3, r2
 8004644:	600b      	str	r3, [r1, #0]
 8004646:	e018      	b.n	800467a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004648:	4b27      	ldr	r3, [pc, #156]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a26      	ldr	r2, [pc, #152]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 800464e:	f023 0301 	bic.w	r3, r3, #1
 8004652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004654:	f7fe f8b4 	bl	80027c0 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800465c:	f7fe f8b0 	bl	80027c0 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e1a3      	b.n	80049b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800466e:	4b1e      	ldr	r3, [pc, #120]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f0      	bne.n	800465c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d038      	beq.n	80046f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d019      	beq.n	80046c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800468e:	4b16      	ldr	r3, [pc, #88]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 8004690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004692:	4a15      	ldr	r2, [pc, #84]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469a:	f7fe f891 	bl	80027c0 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046a2:	f7fe f88d 	bl	80027c0 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e180      	b.n	80049b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046b4:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 80046b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0f0      	beq.n	80046a2 <HAL_RCC_OscConfig+0x23a>
 80046c0:	e01a      	b.n	80046f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046c2:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 80046c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046c6:	4a08      	ldr	r2, [pc, #32]	; (80046e8 <HAL_RCC_OscConfig+0x280>)
 80046c8:	f023 0301 	bic.w	r3, r3, #1
 80046cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ce:	f7fe f877 	bl	80027c0 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046d4:	e00a      	b.n	80046ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d6:	f7fe f873 	bl	80027c0 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d903      	bls.n	80046ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e166      	b.n	80049b6 <HAL_RCC_OscConfig+0x54e>
 80046e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ec:	4b92      	ldr	r3, [pc, #584]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 80046ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1ee      	bne.n	80046d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 80a4 	beq.w	800484e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004706:	4b8c      	ldr	r3, [pc, #560]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10d      	bne.n	800472e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004712:	4b89      	ldr	r3, [pc, #548]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	4a88      	ldr	r2, [pc, #544]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 8004718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800471c:	6413      	str	r3, [r2, #64]	; 0x40
 800471e:	4b86      	ldr	r3, [pc, #536]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004726:	60bb      	str	r3, [r7, #8]
 8004728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800472a:	2301      	movs	r3, #1
 800472c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800472e:	4b83      	ldr	r3, [pc, #524]	; (800493c <HAL_RCC_OscConfig+0x4d4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004736:	2b00      	cmp	r3, #0
 8004738:	d118      	bne.n	800476c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800473a:	4b80      	ldr	r3, [pc, #512]	; (800493c <HAL_RCC_OscConfig+0x4d4>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a7f      	ldr	r2, [pc, #508]	; (800493c <HAL_RCC_OscConfig+0x4d4>)
 8004740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004746:	f7fe f83b 	bl	80027c0 <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800474e:	f7fe f837 	bl	80027c0 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b64      	cmp	r3, #100	; 0x64
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e12a      	b.n	80049b6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004760:	4b76      	ldr	r3, [pc, #472]	; (800493c <HAL_RCC_OscConfig+0x4d4>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0f0      	beq.n	800474e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d106      	bne.n	8004782 <HAL_RCC_OscConfig+0x31a>
 8004774:	4b70      	ldr	r3, [pc, #448]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 8004776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004778:	4a6f      	ldr	r2, [pc, #444]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 800477a:	f043 0301 	orr.w	r3, r3, #1
 800477e:	6713      	str	r3, [r2, #112]	; 0x70
 8004780:	e02d      	b.n	80047de <HAL_RCC_OscConfig+0x376>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10c      	bne.n	80047a4 <HAL_RCC_OscConfig+0x33c>
 800478a:	4b6b      	ldr	r3, [pc, #428]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 800478c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478e:	4a6a      	ldr	r2, [pc, #424]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 8004790:	f023 0301 	bic.w	r3, r3, #1
 8004794:	6713      	str	r3, [r2, #112]	; 0x70
 8004796:	4b68      	ldr	r3, [pc, #416]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 8004798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479a:	4a67      	ldr	r2, [pc, #412]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 800479c:	f023 0304 	bic.w	r3, r3, #4
 80047a0:	6713      	str	r3, [r2, #112]	; 0x70
 80047a2:	e01c      	b.n	80047de <HAL_RCC_OscConfig+0x376>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2b05      	cmp	r3, #5
 80047aa:	d10c      	bne.n	80047c6 <HAL_RCC_OscConfig+0x35e>
 80047ac:	4b62      	ldr	r3, [pc, #392]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 80047ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b0:	4a61      	ldr	r2, [pc, #388]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 80047b2:	f043 0304 	orr.w	r3, r3, #4
 80047b6:	6713      	str	r3, [r2, #112]	; 0x70
 80047b8:	4b5f      	ldr	r3, [pc, #380]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 80047ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047bc:	4a5e      	ldr	r2, [pc, #376]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 80047be:	f043 0301 	orr.w	r3, r3, #1
 80047c2:	6713      	str	r3, [r2, #112]	; 0x70
 80047c4:	e00b      	b.n	80047de <HAL_RCC_OscConfig+0x376>
 80047c6:	4b5c      	ldr	r3, [pc, #368]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	4a5b      	ldr	r2, [pc, #364]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 80047cc:	f023 0301 	bic.w	r3, r3, #1
 80047d0:	6713      	str	r3, [r2, #112]	; 0x70
 80047d2:	4b59      	ldr	r3, [pc, #356]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 80047d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d6:	4a58      	ldr	r2, [pc, #352]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 80047d8:	f023 0304 	bic.w	r3, r3, #4
 80047dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d015      	beq.n	8004812 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e6:	f7fd ffeb 	bl	80027c0 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ec:	e00a      	b.n	8004804 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ee:	f7fd ffe7 	bl	80027c0 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e0d8      	b.n	80049b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004804:	4b4c      	ldr	r3, [pc, #304]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 8004806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0ee      	beq.n	80047ee <HAL_RCC_OscConfig+0x386>
 8004810:	e014      	b.n	800483c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004812:	f7fd ffd5 	bl	80027c0 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004818:	e00a      	b.n	8004830 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481a:	f7fd ffd1 	bl	80027c0 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	f241 3288 	movw	r2, #5000	; 0x1388
 8004828:	4293      	cmp	r3, r2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e0c2      	b.n	80049b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004830:	4b41      	ldr	r3, [pc, #260]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 8004832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1ee      	bne.n	800481a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800483c:	7dfb      	ldrb	r3, [r7, #23]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d105      	bne.n	800484e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004842:	4b3d      	ldr	r3, [pc, #244]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	4a3c      	ldr	r2, [pc, #240]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 8004848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800484c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 80ae 	beq.w	80049b4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004858:	4b37      	ldr	r3, [pc, #220]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 030c 	and.w	r3, r3, #12
 8004860:	2b08      	cmp	r3, #8
 8004862:	d06d      	beq.n	8004940 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	2b02      	cmp	r3, #2
 800486a:	d14b      	bne.n	8004904 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800486c:	4b32      	ldr	r3, [pc, #200]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a31      	ldr	r2, [pc, #196]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 8004872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fd ffa2 	bl	80027c0 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004880:	f7fd ff9e 	bl	80027c0 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e091      	b.n	80049b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004892:	4b29      	ldr	r3, [pc, #164]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f0      	bne.n	8004880 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69da      	ldr	r2, [r3, #28]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	019b      	lsls	r3, r3, #6
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	085b      	lsrs	r3, r3, #1
 80048b6:	3b01      	subs	r3, #1
 80048b8:	041b      	lsls	r3, r3, #16
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	061b      	lsls	r3, r3, #24
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c8:	071b      	lsls	r3, r3, #28
 80048ca:	491b      	ldr	r1, [pc, #108]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048d0:	4b19      	ldr	r3, [pc, #100]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a18      	ldr	r2, [pc, #96]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 80048d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048dc:	f7fd ff70 	bl	80027c0 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e4:	f7fd ff6c 	bl	80027c0 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e05f      	b.n	80049b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f6:	4b10      	ldr	r3, [pc, #64]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0f0      	beq.n	80048e4 <HAL_RCC_OscConfig+0x47c>
 8004902:	e057      	b.n	80049b4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004904:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a0b      	ldr	r2, [pc, #44]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 800490a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800490e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004910:	f7fd ff56 	bl	80027c0 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004918:	f7fd ff52 	bl	80027c0 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e045      	b.n	80049b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800492a:	4b03      	ldr	r3, [pc, #12]	; (8004938 <HAL_RCC_OscConfig+0x4d0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0x4b0>
 8004936:	e03d      	b.n	80049b4 <HAL_RCC_OscConfig+0x54c>
 8004938:	40023800 	.word	0x40023800
 800493c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004940:	4b1f      	ldr	r3, [pc, #124]	; (80049c0 <HAL_RCC_OscConfig+0x558>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d030      	beq.n	80049b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004958:	429a      	cmp	r2, r3
 800495a:	d129      	bne.n	80049b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004966:	429a      	cmp	r2, r3
 8004968:	d122      	bne.n	80049b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004970:	4013      	ands	r3, r2
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004976:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004978:	4293      	cmp	r3, r2
 800497a:	d119      	bne.n	80049b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004986:	085b      	lsrs	r3, r3, #1
 8004988:	3b01      	subs	r3, #1
 800498a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800498c:	429a      	cmp	r2, r3
 800498e:	d10f      	bne.n	80049b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800499c:	429a      	cmp	r2, r3
 800499e:	d107      	bne.n	80049b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049aa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d001      	beq.n	80049b4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e000      	b.n	80049b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40023800 	.word	0x40023800

080049c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0d0      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049dc:	4b6a      	ldr	r3, [pc, #424]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d910      	bls.n	8004a0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ea:	4b67      	ldr	r3, [pc, #412]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f023 020f 	bic.w	r2, r3, #15
 80049f2:	4965      	ldr	r1, [pc, #404]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fa:	4b63      	ldr	r3, [pc, #396]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d001      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e0b8      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d020      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a24:	4b59      	ldr	r3, [pc, #356]	; (8004b8c <HAL_RCC_ClockConfig+0x1c8>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	4a58      	ldr	r2, [pc, #352]	; (8004b8c <HAL_RCC_ClockConfig+0x1c8>)
 8004a2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a3c:	4b53      	ldr	r3, [pc, #332]	; (8004b8c <HAL_RCC_ClockConfig+0x1c8>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	4a52      	ldr	r2, [pc, #328]	; (8004b8c <HAL_RCC_ClockConfig+0x1c8>)
 8004a42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a48:	4b50      	ldr	r3, [pc, #320]	; (8004b8c <HAL_RCC_ClockConfig+0x1c8>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	494d      	ldr	r1, [pc, #308]	; (8004b8c <HAL_RCC_ClockConfig+0x1c8>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d040      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d107      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6e:	4b47      	ldr	r3, [pc, #284]	; (8004b8c <HAL_RCC_ClockConfig+0x1c8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d115      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e07f      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d107      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a86:	4b41      	ldr	r3, [pc, #260]	; (8004b8c <HAL_RCC_ClockConfig+0x1c8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d109      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e073      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a96:	4b3d      	ldr	r3, [pc, #244]	; (8004b8c <HAL_RCC_ClockConfig+0x1c8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e06b      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aa6:	4b39      	ldr	r3, [pc, #228]	; (8004b8c <HAL_RCC_ClockConfig+0x1c8>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f023 0203 	bic.w	r2, r3, #3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	4936      	ldr	r1, [pc, #216]	; (8004b8c <HAL_RCC_ClockConfig+0x1c8>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab8:	f7fd fe82 	bl	80027c0 <HAL_GetTick>
 8004abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004abe:	e00a      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac0:	f7fd fe7e 	bl	80027c0 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e053      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad6:	4b2d      	ldr	r3, [pc, #180]	; (8004b8c <HAL_RCC_ClockConfig+0x1c8>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 020c 	and.w	r2, r3, #12
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d1eb      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae8:	4b27      	ldr	r3, [pc, #156]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 030f 	and.w	r3, r3, #15
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d210      	bcs.n	8004b18 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af6:	4b24      	ldr	r3, [pc, #144]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f023 020f 	bic.w	r2, r3, #15
 8004afe:	4922      	ldr	r1, [pc, #136]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b06:	4b20      	ldr	r3, [pc, #128]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d001      	beq.n	8004b18 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e032      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d008      	beq.n	8004b36 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b24:	4b19      	ldr	r3, [pc, #100]	; (8004b8c <HAL_RCC_ClockConfig+0x1c8>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	4916      	ldr	r1, [pc, #88]	; (8004b8c <HAL_RCC_ClockConfig+0x1c8>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d009      	beq.n	8004b56 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b42:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <HAL_RCC_ClockConfig+0x1c8>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	490e      	ldr	r1, [pc, #56]	; (8004b8c <HAL_RCC_ClockConfig+0x1c8>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b56:	f000 f821 	bl	8004b9c <HAL_RCC_GetSysClockFreq>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <HAL_RCC_ClockConfig+0x1c8>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	091b      	lsrs	r3, r3, #4
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	490a      	ldr	r1, [pc, #40]	; (8004b90 <HAL_RCC_ClockConfig+0x1cc>)
 8004b68:	5ccb      	ldrb	r3, [r1, r3]
 8004b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b6e:	4a09      	ldr	r2, [pc, #36]	; (8004b94 <HAL_RCC_ClockConfig+0x1d0>)
 8004b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b72:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <HAL_RCC_ClockConfig+0x1d4>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fd fdde 	bl	8002738 <HAL_InitTick>

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	40023c00 	.word	0x40023c00
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	08006d90 	.word	0x08006d90
 8004b94:	20000000 	.word	0x20000000
 8004b98:	20000004 	.word	0x20000004

08004b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b9c:	b5b0      	push	{r4, r5, r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	6079      	str	r1, [r7, #4]
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	60f9      	str	r1, [r7, #12]
 8004baa:	2100      	movs	r1, #0
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004bae:	2100      	movs	r1, #0
 8004bb0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bb2:	4952      	ldr	r1, [pc, #328]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x160>)
 8004bb4:	6889      	ldr	r1, [r1, #8]
 8004bb6:	f001 010c 	and.w	r1, r1, #12
 8004bba:	2908      	cmp	r1, #8
 8004bbc:	d00d      	beq.n	8004bda <HAL_RCC_GetSysClockFreq+0x3e>
 8004bbe:	2908      	cmp	r1, #8
 8004bc0:	f200 8094 	bhi.w	8004cec <HAL_RCC_GetSysClockFreq+0x150>
 8004bc4:	2900      	cmp	r1, #0
 8004bc6:	d002      	beq.n	8004bce <HAL_RCC_GetSysClockFreq+0x32>
 8004bc8:	2904      	cmp	r1, #4
 8004bca:	d003      	beq.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x38>
 8004bcc:	e08e      	b.n	8004cec <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bce:	4b4c      	ldr	r3, [pc, #304]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x164>)
 8004bd0:	60bb      	str	r3, [r7, #8]
      break;
 8004bd2:	e08e      	b.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bd4:	4b4b      	ldr	r3, [pc, #300]	; (8004d04 <HAL_RCC_GetSysClockFreq+0x168>)
 8004bd6:	60bb      	str	r3, [r7, #8]
      break;
 8004bd8:	e08b      	b.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bda:	4948      	ldr	r1, [pc, #288]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x160>)
 8004bdc:	6849      	ldr	r1, [r1, #4]
 8004bde:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004be2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004be4:	4945      	ldr	r1, [pc, #276]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x160>)
 8004be6:	6849      	ldr	r1, [r1, #4]
 8004be8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004bec:	2900      	cmp	r1, #0
 8004bee:	d024      	beq.n	8004c3a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bf0:	4942      	ldr	r1, [pc, #264]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x160>)
 8004bf2:	6849      	ldr	r1, [r1, #4]
 8004bf4:	0989      	lsrs	r1, r1, #6
 8004bf6:	4608      	mov	r0, r1
 8004bf8:	f04f 0100 	mov.w	r1, #0
 8004bfc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004c00:	f04f 0500 	mov.w	r5, #0
 8004c04:	ea00 0204 	and.w	r2, r0, r4
 8004c08:	ea01 0305 	and.w	r3, r1, r5
 8004c0c:	493d      	ldr	r1, [pc, #244]	; (8004d04 <HAL_RCC_GetSysClockFreq+0x168>)
 8004c0e:	fb01 f003 	mul.w	r0, r1, r3
 8004c12:	2100      	movs	r1, #0
 8004c14:	fb01 f102 	mul.w	r1, r1, r2
 8004c18:	1844      	adds	r4, r0, r1
 8004c1a:	493a      	ldr	r1, [pc, #232]	; (8004d04 <HAL_RCC_GetSysClockFreq+0x168>)
 8004c1c:	fba2 0101 	umull	r0, r1, r2, r1
 8004c20:	1863      	adds	r3, r4, r1
 8004c22:	4619      	mov	r1, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	461a      	mov	r2, r3
 8004c28:	f04f 0300 	mov.w	r3, #0
 8004c2c:	f7fb fb0c 	bl	8000248 <__aeabi_uldivmod>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	4613      	mov	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	e04a      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c3a:	4b30      	ldr	r3, [pc, #192]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x160>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	099b      	lsrs	r3, r3, #6
 8004c40:	461a      	mov	r2, r3
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c4a:	f04f 0100 	mov.w	r1, #0
 8004c4e:	ea02 0400 	and.w	r4, r2, r0
 8004c52:	ea03 0501 	and.w	r5, r3, r1
 8004c56:	4620      	mov	r0, r4
 8004c58:	4629      	mov	r1, r5
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	014b      	lsls	r3, r1, #5
 8004c64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c68:	0142      	lsls	r2, r0, #5
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	1b00      	subs	r0, r0, r4
 8004c70:	eb61 0105 	sbc.w	r1, r1, r5
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	018b      	lsls	r3, r1, #6
 8004c7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c82:	0182      	lsls	r2, r0, #6
 8004c84:	1a12      	subs	r2, r2, r0
 8004c86:	eb63 0301 	sbc.w	r3, r3, r1
 8004c8a:	f04f 0000 	mov.w	r0, #0
 8004c8e:	f04f 0100 	mov.w	r1, #0
 8004c92:	00d9      	lsls	r1, r3, #3
 8004c94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c98:	00d0      	lsls	r0, r2, #3
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	1912      	adds	r2, r2, r4
 8004ca0:	eb45 0303 	adc.w	r3, r5, r3
 8004ca4:	f04f 0000 	mov.w	r0, #0
 8004ca8:	f04f 0100 	mov.w	r1, #0
 8004cac:	0299      	lsls	r1, r3, #10
 8004cae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004cb2:	0290      	lsls	r0, r2, #10
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4610      	mov	r0, r2
 8004cba:	4619      	mov	r1, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	f7fb fac0 	bl	8000248 <__aeabi_uldivmod>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4613      	mov	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004cd0:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x160>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	0c1b      	lsrs	r3, r3, #16
 8004cd6:	f003 0303 	and.w	r3, r3, #3
 8004cda:	3301      	adds	r3, #1
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce8:	60bb      	str	r3, [r7, #8]
      break;
 8004cea:	e002      	b.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cec:	4b04      	ldr	r3, [pc, #16]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x164>)
 8004cee:	60bb      	str	r3, [r7, #8]
      break;
 8004cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cf2:	68bb      	ldr	r3, [r7, #8]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	00f42400 	.word	0x00f42400
 8004d04:	017d7840 	.word	0x017d7840

08004d08 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d0c:	4b03      	ldr	r3, [pc, #12]	; (8004d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	20000000 	.word	0x20000000

08004d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d24:	f7ff fff0 	bl	8004d08 <HAL_RCC_GetHCLKFreq>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	0a9b      	lsrs	r3, r3, #10
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	4903      	ldr	r1, [pc, #12]	; (8004d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d36:	5ccb      	ldrb	r3, [r1, r3]
 8004d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40023800 	.word	0x40023800
 8004d44:	08006da0 	.word	0x08006da0

08004d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d4c:	f7ff ffdc 	bl	8004d08 <HAL_RCC_GetHCLKFreq>
 8004d50:	4602      	mov	r2, r0
 8004d52:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	0b5b      	lsrs	r3, r3, #13
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	4903      	ldr	r1, [pc, #12]	; (8004d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d5e:	5ccb      	ldrb	r3, [r1, r3]
 8004d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	08006da0 	.word	0x08006da0

08004d70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b088      	sub	sp, #32
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004d80:	2300      	movs	r3, #0
 8004d82:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004d84:	2300      	movs	r3, #0
 8004d86:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d012      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d98:	4b69      	ldr	r3, [pc, #420]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	4a68      	ldr	r2, [pc, #416]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004da2:	6093      	str	r3, [r2, #8]
 8004da4:	4b66      	ldr	r3, [pc, #408]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dac:	4964      	ldr	r1, [pc, #400]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d017      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dca:	4b5d      	ldr	r3, [pc, #372]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd8:	4959      	ldr	r1, [pc, #356]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004de8:	d101      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004dea:	2301      	movs	r3, #1
 8004dec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004df6:	2301      	movs	r3, #1
 8004df8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d017      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e06:	4b4e      	ldr	r3, [pc, #312]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e14:	494a      	ldr	r1, [pc, #296]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e24:	d101      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004e26:	2301      	movs	r3, #1
 8004e28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004e32:	2301      	movs	r3, #1
 8004e34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004e42:	2301      	movs	r3, #1
 8004e44:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 808b 	beq.w	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e54:	4b3a      	ldr	r3, [pc, #232]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e58:	4a39      	ldr	r2, [pc, #228]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e5e:	6413      	str	r3, [r2, #64]	; 0x40
 8004e60:	4b37      	ldr	r3, [pc, #220]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e68:	60bb      	str	r3, [r7, #8]
 8004e6a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e6c:	4b35      	ldr	r3, [pc, #212]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a34      	ldr	r2, [pc, #208]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e78:	f7fd fca2 	bl	80027c0 <HAL_GetTick>
 8004e7c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e80:	f7fd fc9e 	bl	80027c0 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b64      	cmp	r3, #100	; 0x64
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e38f      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e92:	4b2c      	ldr	r3, [pc, #176]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0f0      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e9e:	4b28      	ldr	r3, [pc, #160]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d035      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d02e      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ebc:	4b20      	ldr	r3, [pc, #128]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ec6:	4b1e      	ldr	r3, [pc, #120]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eca:	4a1d      	ldr	r2, [pc, #116]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ed2:	4b1b      	ldr	r3, [pc, #108]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed6:	4a1a      	ldr	r2, [pc, #104]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004edc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004ede:	4a18      	ldr	r2, [pc, #96]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ee4:	4b16      	ldr	r3, [pc, #88]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d114      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef0:	f7fd fc66 	bl	80027c0 <HAL_GetTick>
 8004ef4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef6:	e00a      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ef8:	f7fd fc62 	bl	80027c0 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e351      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f0e:	4b0c      	ldr	r3, [pc, #48]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0ee      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f26:	d111      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004f28:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f34:	4b04      	ldr	r3, [pc, #16]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f36:	400b      	ands	r3, r1
 8004f38:	4901      	ldr	r1, [pc, #4]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	608b      	str	r3, [r1, #8]
 8004f3e:	e00b      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004f40:	40023800 	.word	0x40023800
 8004f44:	40007000 	.word	0x40007000
 8004f48:	0ffffcff 	.word	0x0ffffcff
 8004f4c:	4bb3      	ldr	r3, [pc, #716]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	4ab2      	ldr	r2, [pc, #712]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f52:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f56:	6093      	str	r3, [r2, #8]
 8004f58:	4bb0      	ldr	r3, [pc, #704]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f64:	49ad      	ldr	r1, [pc, #692]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0310 	and.w	r3, r3, #16
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d010      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f76:	4ba9      	ldr	r3, [pc, #676]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f7c:	4aa7      	ldr	r2, [pc, #668]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004f86:	4ba5      	ldr	r3, [pc, #660]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f88:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f90:	49a2      	ldr	r1, [pc, #648]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00a      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fa4:	4b9d      	ldr	r3, [pc, #628]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004faa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fb2:	499a      	ldr	r1, [pc, #616]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fc6:	4b95      	ldr	r3, [pc, #596]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fcc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fd4:	4991      	ldr	r1, [pc, #580]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00a      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fe8:	4b8c      	ldr	r3, [pc, #560]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ff6:	4989      	ldr	r1, [pc, #548]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800500a:	4b84      	ldr	r3, [pc, #528]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800500c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005010:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005018:	4980      	ldr	r1, [pc, #512]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00a      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800502c:	4b7b      	ldr	r3, [pc, #492]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800502e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005032:	f023 0203 	bic.w	r2, r3, #3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503a:	4978      	ldr	r1, [pc, #480]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800503c:	4313      	orrs	r3, r2
 800503e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800504e:	4b73      	ldr	r3, [pc, #460]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005054:	f023 020c 	bic.w	r2, r3, #12
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800505c:	496f      	ldr	r1, [pc, #444]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800505e:	4313      	orrs	r3, r2
 8005060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00a      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005070:	4b6a      	ldr	r3, [pc, #424]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005076:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800507e:	4967      	ldr	r1, [pc, #412]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005080:	4313      	orrs	r3, r2
 8005082:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005092:	4b62      	ldr	r3, [pc, #392]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005098:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a0:	495e      	ldr	r1, [pc, #376]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050b4:	4b59      	ldr	r3, [pc, #356]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c2:	4956      	ldr	r1, [pc, #344]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80050d6:	4b51      	ldr	r3, [pc, #324]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e4:	494d      	ldr	r1, [pc, #308]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80050f8:	4b48      	ldr	r3, [pc, #288]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005106:	4945      	ldr	r1, [pc, #276]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005108:	4313      	orrs	r3, r2
 800510a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800511a:	4b40      	ldr	r3, [pc, #256]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800511c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005120:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005128:	493c      	ldr	r1, [pc, #240]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800513c:	4b37      	ldr	r3, [pc, #220]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800513e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005142:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800514a:	4934      	ldr	r1, [pc, #208]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d011      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800515e:	4b2f      	ldr	r3, [pc, #188]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005164:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800516c:	492b      	ldr	r1, [pc, #172]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005178:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800517c:	d101      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800517e:	2301      	movs	r3, #1
 8005180:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800518e:	2301      	movs	r3, #1
 8005190:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800519e:	4b1f      	ldr	r3, [pc, #124]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ac:	491b      	ldr	r1, [pc, #108]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00b      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051c0:	4b16      	ldr	r3, [pc, #88]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051d0:	4912      	ldr	r1, [pc, #72]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00b      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80051e4:	4b0d      	ldr	r3, [pc, #52]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051f4:	4909      	ldr	r1, [pc, #36]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00f      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005208:	4b04      	ldr	r3, [pc, #16]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800520a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800520e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005218:	e002      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800521a:	bf00      	nop
 800521c:	40023800 	.word	0x40023800
 8005220:	4986      	ldr	r1, [pc, #536]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005222:	4313      	orrs	r3, r2
 8005224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00b      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005234:	4b81      	ldr	r3, [pc, #516]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800523a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005244:	497d      	ldr	r1, [pc, #500]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d006      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 80d6 	beq.w	800540c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005260:	4b76      	ldr	r3, [pc, #472]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a75      	ldr	r2, [pc, #468]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005266:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800526a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800526c:	f7fd faa8 	bl	80027c0 <HAL_GetTick>
 8005270:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005272:	e008      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005274:	f7fd faa4 	bl	80027c0 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b64      	cmp	r3, #100	; 0x64
 8005280:	d901      	bls.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e195      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005286:	4b6d      	ldr	r3, [pc, #436]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1f0      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	d021      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d11d      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052a6:	4b65      	ldr	r3, [pc, #404]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ac:	0c1b      	lsrs	r3, r3, #16
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052b4:	4b61      	ldr	r3, [pc, #388]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ba:	0e1b      	lsrs	r3, r3, #24
 80052bc:	f003 030f 	and.w	r3, r3, #15
 80052c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	019a      	lsls	r2, r3, #6
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	041b      	lsls	r3, r3, #16
 80052cc:	431a      	orrs	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	061b      	lsls	r3, r3, #24
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	071b      	lsls	r3, r3, #28
 80052da:	4958      	ldr	r1, [pc, #352]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d004      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052f6:	d00a      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005300:	2b00      	cmp	r3, #0
 8005302:	d02e      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005308:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800530c:	d129      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800530e:	4b4b      	ldr	r3, [pc, #300]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005314:	0c1b      	lsrs	r3, r3, #16
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800531c:	4b47      	ldr	r3, [pc, #284]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800531e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005322:	0f1b      	lsrs	r3, r3, #28
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	019a      	lsls	r2, r3, #6
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	041b      	lsls	r3, r3, #16
 8005334:	431a      	orrs	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	061b      	lsls	r3, r3, #24
 800533c:	431a      	orrs	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	071b      	lsls	r3, r3, #28
 8005342:	493e      	ldr	r1, [pc, #248]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005344:	4313      	orrs	r3, r2
 8005346:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800534a:	4b3c      	ldr	r3, [pc, #240]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800534c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005350:	f023 021f 	bic.w	r2, r3, #31
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	3b01      	subs	r3, #1
 800535a:	4938      	ldr	r1, [pc, #224]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d01d      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800536e:	4b33      	ldr	r3, [pc, #204]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005374:	0e1b      	lsrs	r3, r3, #24
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800537c:	4b2f      	ldr	r3, [pc, #188]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800537e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005382:	0f1b      	lsrs	r3, r3, #28
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	019a      	lsls	r2, r3, #6
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	041b      	lsls	r3, r3, #16
 8005396:	431a      	orrs	r2, r3
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	061b      	lsls	r3, r3, #24
 800539c:	431a      	orrs	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	071b      	lsls	r3, r3, #28
 80053a2:	4926      	ldr	r1, [pc, #152]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d011      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	019a      	lsls	r2, r3, #6
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	041b      	lsls	r3, r3, #16
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	061b      	lsls	r3, r3, #24
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	071b      	lsls	r3, r3, #28
 80053d2:	491a      	ldr	r1, [pc, #104]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053da:	4b18      	ldr	r3, [pc, #96]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a17      	ldr	r2, [pc, #92]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e6:	f7fd f9eb 	bl	80027c0 <HAL_GetTick>
 80053ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053ec:	e008      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053ee:	f7fd f9e7 	bl	80027c0 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b64      	cmp	r3, #100	; 0x64
 80053fa:	d901      	bls.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e0d8      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005400:	4b0e      	ldr	r3, [pc, #56]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0f0      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	2b01      	cmp	r3, #1
 8005410:	f040 80ce 	bne.w	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005414:	4b09      	ldr	r3, [pc, #36]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a08      	ldr	r2, [pc, #32]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800541a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800541e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005420:	f7fd f9ce 	bl	80027c0 <HAL_GetTick>
 8005424:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005426:	e00b      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005428:	f7fd f9ca 	bl	80027c0 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b64      	cmp	r3, #100	; 0x64
 8005434:	d904      	bls.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e0bb      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800543a:	bf00      	nop
 800543c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005440:	4b5e      	ldr	r3, [pc, #376]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800544c:	d0ec      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545e:	2b00      	cmp	r3, #0
 8005460:	d009      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800546a:	2b00      	cmp	r3, #0
 800546c:	d02e      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	2b00      	cmp	r3, #0
 8005474:	d12a      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005476:	4b51      	ldr	r3, [pc, #324]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547c:	0c1b      	lsrs	r3, r3, #16
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005484:	4b4d      	ldr	r3, [pc, #308]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548a:	0f1b      	lsrs	r3, r3, #28
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	019a      	lsls	r2, r3, #6
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	041b      	lsls	r3, r3, #16
 800549c:	431a      	orrs	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	061b      	lsls	r3, r3, #24
 80054a4:	431a      	orrs	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	071b      	lsls	r3, r3, #28
 80054aa:	4944      	ldr	r1, [pc, #272]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054b2:	4b42      	ldr	r3, [pc, #264]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c0:	3b01      	subs	r3, #1
 80054c2:	021b      	lsls	r3, r3, #8
 80054c4:	493d      	ldr	r1, [pc, #244]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d022      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054e0:	d11d      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054e2:	4b36      	ldr	r3, [pc, #216]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e8:	0e1b      	lsrs	r3, r3, #24
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054f0:	4b32      	ldr	r3, [pc, #200]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f6:	0f1b      	lsrs	r3, r3, #28
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	019a      	lsls	r2, r3, #6
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	041b      	lsls	r3, r3, #16
 800550a:	431a      	orrs	r2, r3
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	061b      	lsls	r3, r3, #24
 8005510:	431a      	orrs	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	071b      	lsls	r3, r3, #28
 8005516:	4929      	ldr	r1, [pc, #164]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005518:	4313      	orrs	r3, r2
 800551a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d028      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800552a:	4b24      	ldr	r3, [pc, #144]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005530:	0e1b      	lsrs	r3, r3, #24
 8005532:	f003 030f 	and.w	r3, r3, #15
 8005536:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005538:	4b20      	ldr	r3, [pc, #128]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800553a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553e:	0c1b      	lsrs	r3, r3, #16
 8005540:	f003 0303 	and.w	r3, r3, #3
 8005544:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	019a      	lsls	r2, r3, #6
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	041b      	lsls	r3, r3, #16
 8005550:	431a      	orrs	r2, r3
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	061b      	lsls	r3, r3, #24
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	071b      	lsls	r3, r3, #28
 800555e:	4917      	ldr	r1, [pc, #92]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005560:	4313      	orrs	r3, r2
 8005562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005566:	4b15      	ldr	r3, [pc, #84]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800556c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	4911      	ldr	r1, [pc, #68]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800557c:	4b0f      	ldr	r3, [pc, #60]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a0e      	ldr	r2, [pc, #56]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005588:	f7fd f91a 	bl	80027c0 <HAL_GetTick>
 800558c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800558e:	e008      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005590:	f7fd f916 	bl	80027c0 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b64      	cmp	r3, #100	; 0x64
 800559c:	d901      	bls.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e007      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055a2:	4b06      	ldr	r3, [pc, #24]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ae:	d1ef      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3720      	adds	r7, #32
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	40023800 	.word	0x40023800

080055c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e049      	b.n	8005666 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7fc ffa0 	bl	800252c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3304      	adds	r3, #4
 80055fc:	4619      	mov	r1, r3
 80055fe:	4610      	mov	r0, r2
 8005600:	f000 f9f6 	bl	80059f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
	...

08005670 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b01      	cmp	r3, #1
 8005682:	d001      	beq.n	8005688 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e054      	b.n	8005732 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68da      	ldr	r2, [r3, #12]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 0201 	orr.w	r2, r2, #1
 800569e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a26      	ldr	r2, [pc, #152]	; (8005740 <HAL_TIM_Base_Start_IT+0xd0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d022      	beq.n	80056f0 <HAL_TIM_Base_Start_IT+0x80>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b2:	d01d      	beq.n	80056f0 <HAL_TIM_Base_Start_IT+0x80>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a22      	ldr	r2, [pc, #136]	; (8005744 <HAL_TIM_Base_Start_IT+0xd4>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d018      	beq.n	80056f0 <HAL_TIM_Base_Start_IT+0x80>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a21      	ldr	r2, [pc, #132]	; (8005748 <HAL_TIM_Base_Start_IT+0xd8>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d013      	beq.n	80056f0 <HAL_TIM_Base_Start_IT+0x80>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a1f      	ldr	r2, [pc, #124]	; (800574c <HAL_TIM_Base_Start_IT+0xdc>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00e      	beq.n	80056f0 <HAL_TIM_Base_Start_IT+0x80>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a1e      	ldr	r2, [pc, #120]	; (8005750 <HAL_TIM_Base_Start_IT+0xe0>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d009      	beq.n	80056f0 <HAL_TIM_Base_Start_IT+0x80>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a1c      	ldr	r2, [pc, #112]	; (8005754 <HAL_TIM_Base_Start_IT+0xe4>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d004      	beq.n	80056f0 <HAL_TIM_Base_Start_IT+0x80>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a1b      	ldr	r2, [pc, #108]	; (8005758 <HAL_TIM_Base_Start_IT+0xe8>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d115      	bne.n	800571c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689a      	ldr	r2, [r3, #8]
 80056f6:	4b19      	ldr	r3, [pc, #100]	; (800575c <HAL_TIM_Base_Start_IT+0xec>)
 80056f8:	4013      	ands	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2b06      	cmp	r3, #6
 8005700:	d015      	beq.n	800572e <HAL_TIM_Base_Start_IT+0xbe>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005708:	d011      	beq.n	800572e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f042 0201 	orr.w	r2, r2, #1
 8005718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571a:	e008      	b.n	800572e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0201 	orr.w	r2, r2, #1
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	e000      	b.n	8005730 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800572e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	40010000 	.word	0x40010000
 8005744:	40000400 	.word	0x40000400
 8005748:	40000800 	.word	0x40000800
 800574c:	40000c00 	.word	0x40000c00
 8005750:	40010400 	.word	0x40010400
 8005754:	40014000 	.word	0x40014000
 8005758:	40001800 	.word	0x40001800
 800575c:	00010007 	.word	0x00010007

08005760 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b02      	cmp	r3, #2
 8005774:	d122      	bne.n	80057bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b02      	cmp	r3, #2
 8005782:	d11b      	bne.n	80057bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f06f 0202 	mvn.w	r2, #2
 800578c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	f003 0303 	and.w	r3, r3, #3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f905 	bl	80059b2 <HAL_TIM_IC_CaptureCallback>
 80057a8:	e005      	b.n	80057b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f8f7 	bl	800599e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f908 	bl	80059c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f003 0304 	and.w	r3, r3, #4
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d122      	bne.n	8005810 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d11b      	bne.n	8005810 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f06f 0204 	mvn.w	r2, #4
 80057e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2202      	movs	r2, #2
 80057e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f8db 	bl	80059b2 <HAL_TIM_IC_CaptureCallback>
 80057fc:	e005      	b.n	800580a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f8cd 	bl	800599e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f8de 	bl	80059c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	2b08      	cmp	r3, #8
 800581c:	d122      	bne.n	8005864 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f003 0308 	and.w	r3, r3, #8
 8005828:	2b08      	cmp	r3, #8
 800582a:	d11b      	bne.n	8005864 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f06f 0208 	mvn.w	r2, #8
 8005834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2204      	movs	r2, #4
 800583a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	f003 0303 	and.w	r3, r3, #3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f8b1 	bl	80059b2 <HAL_TIM_IC_CaptureCallback>
 8005850:	e005      	b.n	800585e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f8a3 	bl	800599e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f8b4 	bl	80059c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f003 0310 	and.w	r3, r3, #16
 800586e:	2b10      	cmp	r3, #16
 8005870:	d122      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	2b10      	cmp	r3, #16
 800587e:	d11b      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f06f 0210 	mvn.w	r2, #16
 8005888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2208      	movs	r2, #8
 800588e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f887 	bl	80059b2 <HAL_TIM_IC_CaptureCallback>
 80058a4:	e005      	b.n	80058b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f879 	bl	800599e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f88a 	bl	80059c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d10e      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d107      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f06f 0201 	mvn.w	r2, #1
 80058dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7fc fd20 	bl	8002324 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ee:	2b80      	cmp	r3, #128	; 0x80
 80058f0:	d10e      	bne.n	8005910 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fc:	2b80      	cmp	r3, #128	; 0x80
 80058fe:	d107      	bne.n	8005910 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f9a8 	bl	8005c60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800591e:	d10e      	bne.n	800593e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592a:	2b80      	cmp	r3, #128	; 0x80
 800592c:	d107      	bne.n	800593e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f99b 	bl	8005c74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005948:	2b40      	cmp	r3, #64	; 0x40
 800594a:	d10e      	bne.n	800596a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005956:	2b40      	cmp	r3, #64	; 0x40
 8005958:	d107      	bne.n	800596a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f838 	bl	80059da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	f003 0320 	and.w	r3, r3, #32
 8005974:	2b20      	cmp	r3, #32
 8005976:	d10e      	bne.n	8005996 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b20      	cmp	r3, #32
 8005984:	d107      	bne.n	8005996 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f06f 0220 	mvn.w	r2, #32
 800598e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f95b 	bl	8005c4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005996:	bf00      	nop
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
	...

080059f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a40      	ldr	r2, [pc, #256]	; (8005b04 <TIM_Base_SetConfig+0x114>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d013      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0e:	d00f      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a3d      	ldr	r2, [pc, #244]	; (8005b08 <TIM_Base_SetConfig+0x118>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d00b      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a3c      	ldr	r2, [pc, #240]	; (8005b0c <TIM_Base_SetConfig+0x11c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d007      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a3b      	ldr	r2, [pc, #236]	; (8005b10 <TIM_Base_SetConfig+0x120>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d003      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a3a      	ldr	r2, [pc, #232]	; (8005b14 <TIM_Base_SetConfig+0x124>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d108      	bne.n	8005a42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a2f      	ldr	r2, [pc, #188]	; (8005b04 <TIM_Base_SetConfig+0x114>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d02b      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a50:	d027      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a2c      	ldr	r2, [pc, #176]	; (8005b08 <TIM_Base_SetConfig+0x118>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d023      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a2b      	ldr	r2, [pc, #172]	; (8005b0c <TIM_Base_SetConfig+0x11c>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d01f      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a2a      	ldr	r2, [pc, #168]	; (8005b10 <TIM_Base_SetConfig+0x120>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d01b      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a29      	ldr	r2, [pc, #164]	; (8005b14 <TIM_Base_SetConfig+0x124>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d017      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a28      	ldr	r2, [pc, #160]	; (8005b18 <TIM_Base_SetConfig+0x128>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d013      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a27      	ldr	r2, [pc, #156]	; (8005b1c <TIM_Base_SetConfig+0x12c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00f      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a26      	ldr	r2, [pc, #152]	; (8005b20 <TIM_Base_SetConfig+0x130>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00b      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a25      	ldr	r2, [pc, #148]	; (8005b24 <TIM_Base_SetConfig+0x134>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d007      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a24      	ldr	r2, [pc, #144]	; (8005b28 <TIM_Base_SetConfig+0x138>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d003      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a23      	ldr	r2, [pc, #140]	; (8005b2c <TIM_Base_SetConfig+0x13c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d108      	bne.n	8005ab4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a0a      	ldr	r2, [pc, #40]	; (8005b04 <TIM_Base_SetConfig+0x114>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d003      	beq.n	8005ae8 <TIM_Base_SetConfig+0xf8>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a0c      	ldr	r2, [pc, #48]	; (8005b14 <TIM_Base_SetConfig+0x124>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d103      	bne.n	8005af0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	615a      	str	r2, [r3, #20]
}
 8005af6:	bf00      	nop
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	40010000 	.word	0x40010000
 8005b08:	40000400 	.word	0x40000400
 8005b0c:	40000800 	.word	0x40000800
 8005b10:	40000c00 	.word	0x40000c00
 8005b14:	40010400 	.word	0x40010400
 8005b18:	40014000 	.word	0x40014000
 8005b1c:	40014400 	.word	0x40014400
 8005b20:	40014800 	.word	0x40014800
 8005b24:	40001800 	.word	0x40001800
 8005b28:	40001c00 	.word	0x40001c00
 8005b2c:	40002000 	.word	0x40002000

08005b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b44:	2302      	movs	r3, #2
 8005b46:	e06d      	b.n	8005c24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a30      	ldr	r2, [pc, #192]	; (8005c30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d004      	beq.n	8005b7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a2f      	ldr	r2, [pc, #188]	; (8005c34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d108      	bne.n	8005b8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a20      	ldr	r2, [pc, #128]	; (8005c30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d022      	beq.n	8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bba:	d01d      	beq.n	8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a1d      	ldr	r2, [pc, #116]	; (8005c38 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d018      	beq.n	8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a1c      	ldr	r2, [pc, #112]	; (8005c3c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d013      	beq.n	8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a1a      	ldr	r2, [pc, #104]	; (8005c40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d00e      	beq.n	8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a15      	ldr	r2, [pc, #84]	; (8005c34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d009      	beq.n	8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a16      	ldr	r2, [pc, #88]	; (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d004      	beq.n	8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a15      	ldr	r2, [pc, #84]	; (8005c48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d10c      	bne.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bfe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	40010000 	.word	0x40010000
 8005c34:	40010400 	.word	0x40010400
 8005c38:	40000400 	.word	0x40000400
 8005c3c:	40000800 	.word	0x40000800
 8005c40:	40000c00 	.word	0x40000c00
 8005c44:	40014000 	.word	0x40014000
 8005c48:	40001800 	.word	0x40001800

08005c4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e040      	b.n	8005d1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d106      	bne.n	8005cb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fc fcb0 	bl	8002610 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2224      	movs	r2, #36	; 0x24
 8005cb4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0201 	bic.w	r2, r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f8c0 	bl	8005e4c <UART_SetConfig>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d101      	bne.n	8005cd6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e022      	b.n	8005d1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fb16 	bl	8006310 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cf2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0201 	orr.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 fb9d 	bl	8006454 <UART_CheckIdleState>
 8005d1a:	4603      	mov	r3, r0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08a      	sub	sp, #40	; 0x28
 8005d28:	af02      	add	r7, sp, #8
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	603b      	str	r3, [r7, #0]
 8005d30:	4613      	mov	r3, r2
 8005d32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d38:	2b20      	cmp	r3, #32
 8005d3a:	f040 8081 	bne.w	8005e40 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <HAL_UART_Transmit+0x26>
 8005d44:	88fb      	ldrh	r3, [r7, #6]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e079      	b.n	8005e42 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d101      	bne.n	8005d5c <HAL_UART_Transmit+0x38>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e072      	b.n	8005e42 <HAL_UART_Transmit+0x11e>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2221      	movs	r2, #33	; 0x21
 8005d70:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d72:	f7fc fd25 	bl	80027c0 <HAL_GetTick>
 8005d76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	88fa      	ldrh	r2, [r7, #6]
 8005d7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	88fa      	ldrh	r2, [r7, #6]
 8005d84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d90:	d108      	bne.n	8005da4 <HAL_UART_Transmit+0x80>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d104      	bne.n	8005da4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	61bb      	str	r3, [r7, #24]
 8005da2:	e003      	b.n	8005dac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005da8:	2300      	movs	r3, #0
 8005daa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005db4:	e02c      	b.n	8005e10 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2180      	movs	r1, #128	; 0x80
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 fb90 	bl	80064e6 <UART_WaitOnFlagUntilTimeout>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e038      	b.n	8005e42 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10b      	bne.n	8005dee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005de4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	3302      	adds	r3, #2
 8005dea:	61bb      	str	r3, [r7, #24]
 8005dec:	e007      	b.n	8005dfe <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	781a      	ldrb	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	3b01      	subs	r3, #1
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1cc      	bne.n	8005db6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	2200      	movs	r2, #0
 8005e24:	2140      	movs	r1, #64	; 0x40
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 fb5d 	bl	80064e6 <UART_WaitOnFlagUntilTimeout>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e005      	b.n	8005e42 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	e000      	b.n	8005e42 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005e40:	2302      	movs	r3, #2
  }
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3720      	adds	r7, #32
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b088      	sub	sp, #32
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e54:	2300      	movs	r3, #0
 8005e56:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689a      	ldr	r2, [r3, #8]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	431a      	orrs	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	431a      	orrs	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	4ba7      	ldr	r3, [pc, #668]	; (8006114 <UART_SetConfig+0x2c8>)
 8005e78:	4013      	ands	r3, r2
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	6812      	ldr	r2, [r2, #0]
 8005e7e:	6979      	ldr	r1, [r7, #20]
 8005e80:	430b      	orrs	r3, r1
 8005e82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68da      	ldr	r2, [r3, #12]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a95      	ldr	r2, [pc, #596]	; (8006118 <UART_SetConfig+0x2cc>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d120      	bne.n	8005f0a <UART_SetConfig+0xbe>
 8005ec8:	4b94      	ldr	r3, [pc, #592]	; (800611c <UART_SetConfig+0x2d0>)
 8005eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ece:	f003 0303 	and.w	r3, r3, #3
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d816      	bhi.n	8005f04 <UART_SetConfig+0xb8>
 8005ed6:	a201      	add	r2, pc, #4	; (adr r2, 8005edc <UART_SetConfig+0x90>)
 8005ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005edc:	08005eed 	.word	0x08005eed
 8005ee0:	08005ef9 	.word	0x08005ef9
 8005ee4:	08005ef3 	.word	0x08005ef3
 8005ee8:	08005eff 	.word	0x08005eff
 8005eec:	2301      	movs	r3, #1
 8005eee:	77fb      	strb	r3, [r7, #31]
 8005ef0:	e14f      	b.n	8006192 <UART_SetConfig+0x346>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	77fb      	strb	r3, [r7, #31]
 8005ef6:	e14c      	b.n	8006192 <UART_SetConfig+0x346>
 8005ef8:	2304      	movs	r3, #4
 8005efa:	77fb      	strb	r3, [r7, #31]
 8005efc:	e149      	b.n	8006192 <UART_SetConfig+0x346>
 8005efe:	2308      	movs	r3, #8
 8005f00:	77fb      	strb	r3, [r7, #31]
 8005f02:	e146      	b.n	8006192 <UART_SetConfig+0x346>
 8005f04:	2310      	movs	r3, #16
 8005f06:	77fb      	strb	r3, [r7, #31]
 8005f08:	e143      	b.n	8006192 <UART_SetConfig+0x346>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a84      	ldr	r2, [pc, #528]	; (8006120 <UART_SetConfig+0x2d4>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d132      	bne.n	8005f7a <UART_SetConfig+0x12e>
 8005f14:	4b81      	ldr	r3, [pc, #516]	; (800611c <UART_SetConfig+0x2d0>)
 8005f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1a:	f003 030c 	and.w	r3, r3, #12
 8005f1e:	2b0c      	cmp	r3, #12
 8005f20:	d828      	bhi.n	8005f74 <UART_SetConfig+0x128>
 8005f22:	a201      	add	r2, pc, #4	; (adr r2, 8005f28 <UART_SetConfig+0xdc>)
 8005f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f28:	08005f5d 	.word	0x08005f5d
 8005f2c:	08005f75 	.word	0x08005f75
 8005f30:	08005f75 	.word	0x08005f75
 8005f34:	08005f75 	.word	0x08005f75
 8005f38:	08005f69 	.word	0x08005f69
 8005f3c:	08005f75 	.word	0x08005f75
 8005f40:	08005f75 	.word	0x08005f75
 8005f44:	08005f75 	.word	0x08005f75
 8005f48:	08005f63 	.word	0x08005f63
 8005f4c:	08005f75 	.word	0x08005f75
 8005f50:	08005f75 	.word	0x08005f75
 8005f54:	08005f75 	.word	0x08005f75
 8005f58:	08005f6f 	.word	0x08005f6f
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	77fb      	strb	r3, [r7, #31]
 8005f60:	e117      	b.n	8006192 <UART_SetConfig+0x346>
 8005f62:	2302      	movs	r3, #2
 8005f64:	77fb      	strb	r3, [r7, #31]
 8005f66:	e114      	b.n	8006192 <UART_SetConfig+0x346>
 8005f68:	2304      	movs	r3, #4
 8005f6a:	77fb      	strb	r3, [r7, #31]
 8005f6c:	e111      	b.n	8006192 <UART_SetConfig+0x346>
 8005f6e:	2308      	movs	r3, #8
 8005f70:	77fb      	strb	r3, [r7, #31]
 8005f72:	e10e      	b.n	8006192 <UART_SetConfig+0x346>
 8005f74:	2310      	movs	r3, #16
 8005f76:	77fb      	strb	r3, [r7, #31]
 8005f78:	e10b      	b.n	8006192 <UART_SetConfig+0x346>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a69      	ldr	r2, [pc, #420]	; (8006124 <UART_SetConfig+0x2d8>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d120      	bne.n	8005fc6 <UART_SetConfig+0x17a>
 8005f84:	4b65      	ldr	r3, [pc, #404]	; (800611c <UART_SetConfig+0x2d0>)
 8005f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f8a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f8e:	2b30      	cmp	r3, #48	; 0x30
 8005f90:	d013      	beq.n	8005fba <UART_SetConfig+0x16e>
 8005f92:	2b30      	cmp	r3, #48	; 0x30
 8005f94:	d814      	bhi.n	8005fc0 <UART_SetConfig+0x174>
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	d009      	beq.n	8005fae <UART_SetConfig+0x162>
 8005f9a:	2b20      	cmp	r3, #32
 8005f9c:	d810      	bhi.n	8005fc0 <UART_SetConfig+0x174>
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d002      	beq.n	8005fa8 <UART_SetConfig+0x15c>
 8005fa2:	2b10      	cmp	r3, #16
 8005fa4:	d006      	beq.n	8005fb4 <UART_SetConfig+0x168>
 8005fa6:	e00b      	b.n	8005fc0 <UART_SetConfig+0x174>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	77fb      	strb	r3, [r7, #31]
 8005fac:	e0f1      	b.n	8006192 <UART_SetConfig+0x346>
 8005fae:	2302      	movs	r3, #2
 8005fb0:	77fb      	strb	r3, [r7, #31]
 8005fb2:	e0ee      	b.n	8006192 <UART_SetConfig+0x346>
 8005fb4:	2304      	movs	r3, #4
 8005fb6:	77fb      	strb	r3, [r7, #31]
 8005fb8:	e0eb      	b.n	8006192 <UART_SetConfig+0x346>
 8005fba:	2308      	movs	r3, #8
 8005fbc:	77fb      	strb	r3, [r7, #31]
 8005fbe:	e0e8      	b.n	8006192 <UART_SetConfig+0x346>
 8005fc0:	2310      	movs	r3, #16
 8005fc2:	77fb      	strb	r3, [r7, #31]
 8005fc4:	e0e5      	b.n	8006192 <UART_SetConfig+0x346>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a57      	ldr	r2, [pc, #348]	; (8006128 <UART_SetConfig+0x2dc>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d120      	bne.n	8006012 <UART_SetConfig+0x1c6>
 8005fd0:	4b52      	ldr	r3, [pc, #328]	; (800611c <UART_SetConfig+0x2d0>)
 8005fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005fda:	2bc0      	cmp	r3, #192	; 0xc0
 8005fdc:	d013      	beq.n	8006006 <UART_SetConfig+0x1ba>
 8005fde:	2bc0      	cmp	r3, #192	; 0xc0
 8005fe0:	d814      	bhi.n	800600c <UART_SetConfig+0x1c0>
 8005fe2:	2b80      	cmp	r3, #128	; 0x80
 8005fe4:	d009      	beq.n	8005ffa <UART_SetConfig+0x1ae>
 8005fe6:	2b80      	cmp	r3, #128	; 0x80
 8005fe8:	d810      	bhi.n	800600c <UART_SetConfig+0x1c0>
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <UART_SetConfig+0x1a8>
 8005fee:	2b40      	cmp	r3, #64	; 0x40
 8005ff0:	d006      	beq.n	8006000 <UART_SetConfig+0x1b4>
 8005ff2:	e00b      	b.n	800600c <UART_SetConfig+0x1c0>
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	77fb      	strb	r3, [r7, #31]
 8005ff8:	e0cb      	b.n	8006192 <UART_SetConfig+0x346>
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	77fb      	strb	r3, [r7, #31]
 8005ffe:	e0c8      	b.n	8006192 <UART_SetConfig+0x346>
 8006000:	2304      	movs	r3, #4
 8006002:	77fb      	strb	r3, [r7, #31]
 8006004:	e0c5      	b.n	8006192 <UART_SetConfig+0x346>
 8006006:	2308      	movs	r3, #8
 8006008:	77fb      	strb	r3, [r7, #31]
 800600a:	e0c2      	b.n	8006192 <UART_SetConfig+0x346>
 800600c:	2310      	movs	r3, #16
 800600e:	77fb      	strb	r3, [r7, #31]
 8006010:	e0bf      	b.n	8006192 <UART_SetConfig+0x346>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a45      	ldr	r2, [pc, #276]	; (800612c <UART_SetConfig+0x2e0>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d125      	bne.n	8006068 <UART_SetConfig+0x21c>
 800601c:	4b3f      	ldr	r3, [pc, #252]	; (800611c <UART_SetConfig+0x2d0>)
 800601e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800602a:	d017      	beq.n	800605c <UART_SetConfig+0x210>
 800602c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006030:	d817      	bhi.n	8006062 <UART_SetConfig+0x216>
 8006032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006036:	d00b      	beq.n	8006050 <UART_SetConfig+0x204>
 8006038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800603c:	d811      	bhi.n	8006062 <UART_SetConfig+0x216>
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <UART_SetConfig+0x1fe>
 8006042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006046:	d006      	beq.n	8006056 <UART_SetConfig+0x20a>
 8006048:	e00b      	b.n	8006062 <UART_SetConfig+0x216>
 800604a:	2300      	movs	r3, #0
 800604c:	77fb      	strb	r3, [r7, #31]
 800604e:	e0a0      	b.n	8006192 <UART_SetConfig+0x346>
 8006050:	2302      	movs	r3, #2
 8006052:	77fb      	strb	r3, [r7, #31]
 8006054:	e09d      	b.n	8006192 <UART_SetConfig+0x346>
 8006056:	2304      	movs	r3, #4
 8006058:	77fb      	strb	r3, [r7, #31]
 800605a:	e09a      	b.n	8006192 <UART_SetConfig+0x346>
 800605c:	2308      	movs	r3, #8
 800605e:	77fb      	strb	r3, [r7, #31]
 8006060:	e097      	b.n	8006192 <UART_SetConfig+0x346>
 8006062:	2310      	movs	r3, #16
 8006064:	77fb      	strb	r3, [r7, #31]
 8006066:	e094      	b.n	8006192 <UART_SetConfig+0x346>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a30      	ldr	r2, [pc, #192]	; (8006130 <UART_SetConfig+0x2e4>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d125      	bne.n	80060be <UART_SetConfig+0x272>
 8006072:	4b2a      	ldr	r3, [pc, #168]	; (800611c <UART_SetConfig+0x2d0>)
 8006074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006078:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800607c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006080:	d017      	beq.n	80060b2 <UART_SetConfig+0x266>
 8006082:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006086:	d817      	bhi.n	80060b8 <UART_SetConfig+0x26c>
 8006088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800608c:	d00b      	beq.n	80060a6 <UART_SetConfig+0x25a>
 800608e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006092:	d811      	bhi.n	80060b8 <UART_SetConfig+0x26c>
 8006094:	2b00      	cmp	r3, #0
 8006096:	d003      	beq.n	80060a0 <UART_SetConfig+0x254>
 8006098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800609c:	d006      	beq.n	80060ac <UART_SetConfig+0x260>
 800609e:	e00b      	b.n	80060b8 <UART_SetConfig+0x26c>
 80060a0:	2301      	movs	r3, #1
 80060a2:	77fb      	strb	r3, [r7, #31]
 80060a4:	e075      	b.n	8006192 <UART_SetConfig+0x346>
 80060a6:	2302      	movs	r3, #2
 80060a8:	77fb      	strb	r3, [r7, #31]
 80060aa:	e072      	b.n	8006192 <UART_SetConfig+0x346>
 80060ac:	2304      	movs	r3, #4
 80060ae:	77fb      	strb	r3, [r7, #31]
 80060b0:	e06f      	b.n	8006192 <UART_SetConfig+0x346>
 80060b2:	2308      	movs	r3, #8
 80060b4:	77fb      	strb	r3, [r7, #31]
 80060b6:	e06c      	b.n	8006192 <UART_SetConfig+0x346>
 80060b8:	2310      	movs	r3, #16
 80060ba:	77fb      	strb	r3, [r7, #31]
 80060bc:	e069      	b.n	8006192 <UART_SetConfig+0x346>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a1c      	ldr	r2, [pc, #112]	; (8006134 <UART_SetConfig+0x2e8>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d137      	bne.n	8006138 <UART_SetConfig+0x2ec>
 80060c8:	4b14      	ldr	r3, [pc, #80]	; (800611c <UART_SetConfig+0x2d0>)
 80060ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80060d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060d6:	d017      	beq.n	8006108 <UART_SetConfig+0x2bc>
 80060d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060dc:	d817      	bhi.n	800610e <UART_SetConfig+0x2c2>
 80060de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e2:	d00b      	beq.n	80060fc <UART_SetConfig+0x2b0>
 80060e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e8:	d811      	bhi.n	800610e <UART_SetConfig+0x2c2>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <UART_SetConfig+0x2aa>
 80060ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f2:	d006      	beq.n	8006102 <UART_SetConfig+0x2b6>
 80060f4:	e00b      	b.n	800610e <UART_SetConfig+0x2c2>
 80060f6:	2300      	movs	r3, #0
 80060f8:	77fb      	strb	r3, [r7, #31]
 80060fa:	e04a      	b.n	8006192 <UART_SetConfig+0x346>
 80060fc:	2302      	movs	r3, #2
 80060fe:	77fb      	strb	r3, [r7, #31]
 8006100:	e047      	b.n	8006192 <UART_SetConfig+0x346>
 8006102:	2304      	movs	r3, #4
 8006104:	77fb      	strb	r3, [r7, #31]
 8006106:	e044      	b.n	8006192 <UART_SetConfig+0x346>
 8006108:	2308      	movs	r3, #8
 800610a:	77fb      	strb	r3, [r7, #31]
 800610c:	e041      	b.n	8006192 <UART_SetConfig+0x346>
 800610e:	2310      	movs	r3, #16
 8006110:	77fb      	strb	r3, [r7, #31]
 8006112:	e03e      	b.n	8006192 <UART_SetConfig+0x346>
 8006114:	efff69f3 	.word	0xefff69f3
 8006118:	40011000 	.word	0x40011000
 800611c:	40023800 	.word	0x40023800
 8006120:	40004400 	.word	0x40004400
 8006124:	40004800 	.word	0x40004800
 8006128:	40004c00 	.word	0x40004c00
 800612c:	40005000 	.word	0x40005000
 8006130:	40011400 	.word	0x40011400
 8006134:	40007800 	.word	0x40007800
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a71      	ldr	r2, [pc, #452]	; (8006304 <UART_SetConfig+0x4b8>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d125      	bne.n	800618e <UART_SetConfig+0x342>
 8006142:	4b71      	ldr	r3, [pc, #452]	; (8006308 <UART_SetConfig+0x4bc>)
 8006144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006148:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800614c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006150:	d017      	beq.n	8006182 <UART_SetConfig+0x336>
 8006152:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006156:	d817      	bhi.n	8006188 <UART_SetConfig+0x33c>
 8006158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800615c:	d00b      	beq.n	8006176 <UART_SetConfig+0x32a>
 800615e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006162:	d811      	bhi.n	8006188 <UART_SetConfig+0x33c>
 8006164:	2b00      	cmp	r3, #0
 8006166:	d003      	beq.n	8006170 <UART_SetConfig+0x324>
 8006168:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800616c:	d006      	beq.n	800617c <UART_SetConfig+0x330>
 800616e:	e00b      	b.n	8006188 <UART_SetConfig+0x33c>
 8006170:	2300      	movs	r3, #0
 8006172:	77fb      	strb	r3, [r7, #31]
 8006174:	e00d      	b.n	8006192 <UART_SetConfig+0x346>
 8006176:	2302      	movs	r3, #2
 8006178:	77fb      	strb	r3, [r7, #31]
 800617a:	e00a      	b.n	8006192 <UART_SetConfig+0x346>
 800617c:	2304      	movs	r3, #4
 800617e:	77fb      	strb	r3, [r7, #31]
 8006180:	e007      	b.n	8006192 <UART_SetConfig+0x346>
 8006182:	2308      	movs	r3, #8
 8006184:	77fb      	strb	r3, [r7, #31]
 8006186:	e004      	b.n	8006192 <UART_SetConfig+0x346>
 8006188:	2310      	movs	r3, #16
 800618a:	77fb      	strb	r3, [r7, #31]
 800618c:	e001      	b.n	8006192 <UART_SetConfig+0x346>
 800618e:	2310      	movs	r3, #16
 8006190:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800619a:	d15a      	bne.n	8006252 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800619c:	7ffb      	ldrb	r3, [r7, #31]
 800619e:	2b08      	cmp	r3, #8
 80061a0:	d827      	bhi.n	80061f2 <UART_SetConfig+0x3a6>
 80061a2:	a201      	add	r2, pc, #4	; (adr r2, 80061a8 <UART_SetConfig+0x35c>)
 80061a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a8:	080061cd 	.word	0x080061cd
 80061ac:	080061d5 	.word	0x080061d5
 80061b0:	080061dd 	.word	0x080061dd
 80061b4:	080061f3 	.word	0x080061f3
 80061b8:	080061e3 	.word	0x080061e3
 80061bc:	080061f3 	.word	0x080061f3
 80061c0:	080061f3 	.word	0x080061f3
 80061c4:	080061f3 	.word	0x080061f3
 80061c8:	080061eb 	.word	0x080061eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061cc:	f7fe fda8 	bl	8004d20 <HAL_RCC_GetPCLK1Freq>
 80061d0:	61b8      	str	r0, [r7, #24]
        break;
 80061d2:	e013      	b.n	80061fc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061d4:	f7fe fdb8 	bl	8004d48 <HAL_RCC_GetPCLK2Freq>
 80061d8:	61b8      	str	r0, [r7, #24]
        break;
 80061da:	e00f      	b.n	80061fc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061dc:	4b4b      	ldr	r3, [pc, #300]	; (800630c <UART_SetConfig+0x4c0>)
 80061de:	61bb      	str	r3, [r7, #24]
        break;
 80061e0:	e00c      	b.n	80061fc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061e2:	f7fe fcdb 	bl	8004b9c <HAL_RCC_GetSysClockFreq>
 80061e6:	61b8      	str	r0, [r7, #24]
        break;
 80061e8:	e008      	b.n	80061fc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061ee:	61bb      	str	r3, [r7, #24]
        break;
 80061f0:	e004      	b.n	80061fc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	77bb      	strb	r3, [r7, #30]
        break;
 80061fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d074      	beq.n	80062ec <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	005a      	lsls	r2, r3, #1
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	085b      	lsrs	r3, r3, #1
 800620c:	441a      	add	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	fbb2 f3f3 	udiv	r3, r2, r3
 8006216:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	2b0f      	cmp	r3, #15
 800621c:	d916      	bls.n	800624c <UART_SetConfig+0x400>
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006224:	d212      	bcs.n	800624c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	b29b      	uxth	r3, r3
 800622a:	f023 030f 	bic.w	r3, r3, #15
 800622e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	085b      	lsrs	r3, r3, #1
 8006234:	b29b      	uxth	r3, r3
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	b29a      	uxth	r2, r3
 800623c:	89fb      	ldrh	r3, [r7, #14]
 800623e:	4313      	orrs	r3, r2
 8006240:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	89fa      	ldrh	r2, [r7, #14]
 8006248:	60da      	str	r2, [r3, #12]
 800624a:	e04f      	b.n	80062ec <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	77bb      	strb	r3, [r7, #30]
 8006250:	e04c      	b.n	80062ec <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006252:	7ffb      	ldrb	r3, [r7, #31]
 8006254:	2b08      	cmp	r3, #8
 8006256:	d828      	bhi.n	80062aa <UART_SetConfig+0x45e>
 8006258:	a201      	add	r2, pc, #4	; (adr r2, 8006260 <UART_SetConfig+0x414>)
 800625a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625e:	bf00      	nop
 8006260:	08006285 	.word	0x08006285
 8006264:	0800628d 	.word	0x0800628d
 8006268:	08006295 	.word	0x08006295
 800626c:	080062ab 	.word	0x080062ab
 8006270:	0800629b 	.word	0x0800629b
 8006274:	080062ab 	.word	0x080062ab
 8006278:	080062ab 	.word	0x080062ab
 800627c:	080062ab 	.word	0x080062ab
 8006280:	080062a3 	.word	0x080062a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006284:	f7fe fd4c 	bl	8004d20 <HAL_RCC_GetPCLK1Freq>
 8006288:	61b8      	str	r0, [r7, #24]
        break;
 800628a:	e013      	b.n	80062b4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800628c:	f7fe fd5c 	bl	8004d48 <HAL_RCC_GetPCLK2Freq>
 8006290:	61b8      	str	r0, [r7, #24]
        break;
 8006292:	e00f      	b.n	80062b4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006294:	4b1d      	ldr	r3, [pc, #116]	; (800630c <UART_SetConfig+0x4c0>)
 8006296:	61bb      	str	r3, [r7, #24]
        break;
 8006298:	e00c      	b.n	80062b4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800629a:	f7fe fc7f 	bl	8004b9c <HAL_RCC_GetSysClockFreq>
 800629e:	61b8      	str	r0, [r7, #24]
        break;
 80062a0:	e008      	b.n	80062b4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062a6:	61bb      	str	r3, [r7, #24]
        break;
 80062a8:	e004      	b.n	80062b4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	77bb      	strb	r3, [r7, #30]
        break;
 80062b2:	bf00      	nop
    }

    if (pclk != 0U)
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d018      	beq.n	80062ec <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	085a      	lsrs	r2, r3, #1
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	441a      	add	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	2b0f      	cmp	r3, #15
 80062d2:	d909      	bls.n	80062e8 <UART_SetConfig+0x49c>
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062da:	d205      	bcs.n	80062e8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	b29a      	uxth	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	60da      	str	r2, [r3, #12]
 80062e6:	e001      	b.n	80062ec <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80062f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3720      	adds	r7, #32
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	40007c00 	.word	0x40007c00
 8006308:	40023800 	.word	0x40023800
 800630c:	00f42400 	.word	0x00f42400

08006310 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00a      	beq.n	800633a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00a      	beq.n	800635c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00a      	beq.n	800637e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	f003 0308 	and.w	r3, r3, #8
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00a      	beq.n	80063a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	f003 0310 	and.w	r3, r3, #16
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00a      	beq.n	80063c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c6:	f003 0320 	and.w	r3, r3, #32
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d01a      	beq.n	8006426 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800640e:	d10a      	bne.n	8006426 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00a      	beq.n	8006448 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	605a      	str	r2, [r3, #4]
  }
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af02      	add	r7, sp, #8
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006464:	f7fc f9ac 	bl	80027c0 <HAL_GetTick>
 8006468:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0308 	and.w	r3, r3, #8
 8006474:	2b08      	cmp	r3, #8
 8006476:	d10e      	bne.n	8006496 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006478:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f82d 	bl	80064e6 <UART_WaitOnFlagUntilTimeout>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e023      	b.n	80064de <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b04      	cmp	r3, #4
 80064a2:	d10e      	bne.n	80064c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f817 	bl	80064e6 <UART_WaitOnFlagUntilTimeout>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e00d      	b.n	80064de <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2220      	movs	r2, #32
 80064c6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2220      	movs	r2, #32
 80064cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b09c      	sub	sp, #112	; 0x70
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	60f8      	str	r0, [r7, #12]
 80064ee:	60b9      	str	r1, [r7, #8]
 80064f0:	603b      	str	r3, [r7, #0]
 80064f2:	4613      	mov	r3, r2
 80064f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064f6:	e0a5      	b.n	8006644 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fe:	f000 80a1 	beq.w	8006644 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006502:	f7fc f95d 	bl	80027c0 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800650e:	429a      	cmp	r2, r3
 8006510:	d302      	bcc.n	8006518 <UART_WaitOnFlagUntilTimeout+0x32>
 8006512:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006514:	2b00      	cmp	r3, #0
 8006516:	d13e      	bne.n	8006596 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006520:	e853 3f00 	ldrex	r3, [r3]
 8006524:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006528:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800652c:	667b      	str	r3, [r7, #100]	; 0x64
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006536:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006538:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800653c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800653e:	e841 2300 	strex	r3, r2, [r1]
 8006542:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1e6      	bne.n	8006518 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	3308      	adds	r3, #8
 8006550:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006554:	e853 3f00 	ldrex	r3, [r3]
 8006558:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800655a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655c:	f023 0301 	bic.w	r3, r3, #1
 8006560:	663b      	str	r3, [r7, #96]	; 0x60
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3308      	adds	r3, #8
 8006568:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800656a:	64ba      	str	r2, [r7, #72]	; 0x48
 800656c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006570:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006572:	e841 2300 	strex	r3, r2, [r1]
 8006576:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1e5      	bne.n	800654a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2220      	movs	r2, #32
 8006582:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2220      	movs	r2, #32
 8006588:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e067      	b.n	8006666 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d04f      	beq.n	8006644 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065b2:	d147      	bne.n	8006644 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	e853 3f00 	ldrex	r3, [r3]
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	461a      	mov	r2, r3
 80065da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065dc:	637b      	str	r3, [r7, #52]	; 0x34
 80065de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065e4:	e841 2300 	strex	r3, r2, [r1]
 80065e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e6      	bne.n	80065be <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3308      	adds	r3, #8
 80065f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	e853 3f00 	ldrex	r3, [r3]
 80065fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	f023 0301 	bic.w	r3, r3, #1
 8006606:	66bb      	str	r3, [r7, #104]	; 0x68
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3308      	adds	r3, #8
 800660e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006610:	623a      	str	r2, [r7, #32]
 8006612:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006614:	69f9      	ldr	r1, [r7, #28]
 8006616:	6a3a      	ldr	r2, [r7, #32]
 8006618:	e841 2300 	strex	r3, r2, [r1]
 800661c:	61bb      	str	r3, [r7, #24]
   return(result);
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1e5      	bne.n	80065f0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2220      	movs	r2, #32
 8006628:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2220      	movs	r2, #32
 800662e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2220      	movs	r2, #32
 8006634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e010      	b.n	8006666 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	69da      	ldr	r2, [r3, #28]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	4013      	ands	r3, r2
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	429a      	cmp	r2, r3
 8006652:	bf0c      	ite	eq
 8006654:	2301      	moveq	r3, #1
 8006656:	2300      	movne	r3, #0
 8006658:	b2db      	uxtb	r3, r3
 800665a:	461a      	mov	r2, r3
 800665c:	79fb      	ldrb	r3, [r7, #7]
 800665e:	429a      	cmp	r2, r3
 8006660:	f43f af4a 	beq.w	80064f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3770      	adds	r7, #112	; 0x70
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
	...

08006670 <__libc_init_array>:
 8006670:	b570      	push	{r4, r5, r6, lr}
 8006672:	4d0d      	ldr	r5, [pc, #52]	; (80066a8 <__libc_init_array+0x38>)
 8006674:	4c0d      	ldr	r4, [pc, #52]	; (80066ac <__libc_init_array+0x3c>)
 8006676:	1b64      	subs	r4, r4, r5
 8006678:	10a4      	asrs	r4, r4, #2
 800667a:	2600      	movs	r6, #0
 800667c:	42a6      	cmp	r6, r4
 800667e:	d109      	bne.n	8006694 <__libc_init_array+0x24>
 8006680:	4d0b      	ldr	r5, [pc, #44]	; (80066b0 <__libc_init_array+0x40>)
 8006682:	4c0c      	ldr	r4, [pc, #48]	; (80066b4 <__libc_init_array+0x44>)
 8006684:	f000 f864 	bl	8006750 <_init>
 8006688:	1b64      	subs	r4, r4, r5
 800668a:	10a4      	asrs	r4, r4, #2
 800668c:	2600      	movs	r6, #0
 800668e:	42a6      	cmp	r6, r4
 8006690:	d105      	bne.n	800669e <__libc_init_array+0x2e>
 8006692:	bd70      	pop	{r4, r5, r6, pc}
 8006694:	f855 3b04 	ldr.w	r3, [r5], #4
 8006698:	4798      	blx	r3
 800669a:	3601      	adds	r6, #1
 800669c:	e7ee      	b.n	800667c <__libc_init_array+0xc>
 800669e:	f855 3b04 	ldr.w	r3, [r5], #4
 80066a2:	4798      	blx	r3
 80066a4:	3601      	adds	r6, #1
 80066a6:	e7f2      	b.n	800668e <__libc_init_array+0x1e>
 80066a8:	08006dd8 	.word	0x08006dd8
 80066ac:	08006dd8 	.word	0x08006dd8
 80066b0:	08006dd8 	.word	0x08006dd8
 80066b4:	08006ddc 	.word	0x08006ddc

080066b8 <memset>:
 80066b8:	4402      	add	r2, r0
 80066ba:	4603      	mov	r3, r0
 80066bc:	4293      	cmp	r3, r2
 80066be:	d100      	bne.n	80066c2 <memset+0xa>
 80066c0:	4770      	bx	lr
 80066c2:	f803 1b01 	strb.w	r1, [r3], #1
 80066c6:	e7f9      	b.n	80066bc <memset+0x4>

080066c8 <__utoa>:
 80066c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ca:	4c1f      	ldr	r4, [pc, #124]	; (8006748 <__utoa+0x80>)
 80066cc:	b08b      	sub	sp, #44	; 0x2c
 80066ce:	4605      	mov	r5, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	466e      	mov	r6, sp
 80066d4:	f104 0c20 	add.w	ip, r4, #32
 80066d8:	6820      	ldr	r0, [r4, #0]
 80066da:	6861      	ldr	r1, [r4, #4]
 80066dc:	4637      	mov	r7, r6
 80066de:	c703      	stmia	r7!, {r0, r1}
 80066e0:	3408      	adds	r4, #8
 80066e2:	4564      	cmp	r4, ip
 80066e4:	463e      	mov	r6, r7
 80066e6:	d1f7      	bne.n	80066d8 <__utoa+0x10>
 80066e8:	7921      	ldrb	r1, [r4, #4]
 80066ea:	7139      	strb	r1, [r7, #4]
 80066ec:	1e91      	subs	r1, r2, #2
 80066ee:	6820      	ldr	r0, [r4, #0]
 80066f0:	6038      	str	r0, [r7, #0]
 80066f2:	2922      	cmp	r1, #34	; 0x22
 80066f4:	f04f 0100 	mov.w	r1, #0
 80066f8:	d904      	bls.n	8006704 <__utoa+0x3c>
 80066fa:	7019      	strb	r1, [r3, #0]
 80066fc:	460b      	mov	r3, r1
 80066fe:	4618      	mov	r0, r3
 8006700:	b00b      	add	sp, #44	; 0x2c
 8006702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006704:	1e58      	subs	r0, r3, #1
 8006706:	4684      	mov	ip, r0
 8006708:	fbb5 f7f2 	udiv	r7, r5, r2
 800670c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006710:	fb02 5617 	mls	r6, r2, r7, r5
 8006714:	4476      	add	r6, lr
 8006716:	460c      	mov	r4, r1
 8006718:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800671c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006720:	462e      	mov	r6, r5
 8006722:	42b2      	cmp	r2, r6
 8006724:	f101 0101 	add.w	r1, r1, #1
 8006728:	463d      	mov	r5, r7
 800672a:	d9ed      	bls.n	8006708 <__utoa+0x40>
 800672c:	2200      	movs	r2, #0
 800672e:	545a      	strb	r2, [r3, r1]
 8006730:	1919      	adds	r1, r3, r4
 8006732:	1aa5      	subs	r5, r4, r2
 8006734:	42aa      	cmp	r2, r5
 8006736:	dae2      	bge.n	80066fe <__utoa+0x36>
 8006738:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800673c:	780e      	ldrb	r6, [r1, #0]
 800673e:	7006      	strb	r6, [r0, #0]
 8006740:	3201      	adds	r2, #1
 8006742:	f801 5901 	strb.w	r5, [r1], #-1
 8006746:	e7f4      	b.n	8006732 <__utoa+0x6a>
 8006748:	08006da8 	.word	0x08006da8

0800674c <utoa>:
 800674c:	f7ff bfbc 	b.w	80066c8 <__utoa>

08006750 <_init>:
 8006750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006752:	bf00      	nop
 8006754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006756:	bc08      	pop	{r3}
 8006758:	469e      	mov	lr, r3
 800675a:	4770      	bx	lr

0800675c <_fini>:
 800675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675e:	bf00      	nop
 8006760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006762:	bc08      	pop	{r3}
 8006764:	469e      	mov	lr, r3
 8006766:	4770      	bx	lr
